
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024518  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038a0  080247b8  080247b8  000257b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08028058  08028058  00029058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08028060  08028060  00029060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08028064  08028064  00029064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  08028068  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002800  20000088  080280f0  0002a088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002888  080280f0  0002a888  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002e88  080280f0  0002ae88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00043000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    00030110  30000000  30000000  0009c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  000cd000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000d5000  2**0
                  CONTENTS, READONLY
 14 .debug_info   000635f6  00000000  00000000  000d502e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c046  00000000  00000000  00138624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000031b0  00000000  00000000  00144670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000027df  00000000  00000000  00147820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004f658  00000000  00000000  00149fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005cb83  00000000  00000000  00199657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191fea  00000000  00000000  001f61da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  003881c4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d850  00000000  00000000  00388208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00395a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080247a0 	.word	0x080247a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	080247a0 	.word	0x080247a0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 fdbb 	bl	8002220 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	613a      	str	r2, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f019 fecf 	bl	801a518 <HAL_Init>

  /* USER CODE BEGIN Init */
  usZero = 0;
 800077a:	4ba7      	ldr	r3, [pc, #668]	@ (8000a18 <main+0x378>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]

  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 8000780:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000784:	2141      	movs	r1, #65	@ 0x41
 8000786:	48a5      	ldr	r0, [pc, #660]	@ (8000a1c <main+0x37c>)
 8000788:	f022 fa85 	bl	8022c96 <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 800078c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000790:	2142      	movs	r1, #66	@ 0x42
 8000792:	48a3      	ldr	r0, [pc, #652]	@ (8000a20 <main+0x380>)
 8000794:	f022 fa7f 	bl	8022c96 <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000798:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800079c:	2143      	movs	r1, #67	@ 0x43
 800079e:	48a1      	ldr	r0, [pc, #644]	@ (8000a24 <main+0x384>)
 80007a0:	f022 fa79 	bl	8022c96 <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 80007a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007a8:	2144      	movs	r1, #68	@ 0x44
 80007aa:	489f      	ldr	r0, [pc, #636]	@ (8000a28 <main+0x388>)
 80007ac:	f022 fa73 	bl	8022c96 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
}
 80007b4:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 fbad 	bl	8000f14 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ba:	f000 fc59 	bl	8001070 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007be:	f001 f8bf 	bl	8001940 <vHeapInit>
  vStartHighResolutionTimer();
 80007c2:	f022 f887 	bl	80228d4 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 ffe3 	bl	8001790 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f000 ff89 	bl	80016e0 <MX_DMA_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007ce:	f000 ff3b 	bl	8001648 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007d2:	f000 fcbd 	bl	8001150 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d6:	f000 fd13 	bl	8001200 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007da:	f000 fd67 	bl	80012ac <MX_SPI3_Init>
  MX_TIM1_Init();
 80007de:	f000 fdbd 	bl	800135c <MX_TIM1_Init>
  MX_TIM3_Init();
 80007e2:	f000 fe0d 	bl	8001400 <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007e6:	f000 fc73 	bl	80010d0 <MX_I2C4_Init>
  MX_TIM4_Init();
 80007ea:	f000 fe57 	bl	800149c <MX_TIM4_Init>
  MX_TIM5_Init();
 80007ee:	f000 fedb 	bl	80015a8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //7 Segment Setup
  //TIM4 CH1
  DMA1_Stream4->M0AR = &ulSevenSegD1;
 80007f2:	4b8e      	ldr	r3, [pc, #568]	@ (8000a2c <main+0x38c>)
 80007f4:	4a8e      	ldr	r2, [pc, #568]	@ (8000a30 <main+0x390>)
 80007f6:	60da      	str	r2, [r3, #12]
  DMA1_Stream4->PAR = &(GPIOD->BSRR); //top 16 bits are reset, bottom 16 bits are set, set has priority if both bits set
 80007f8:	4b8c      	ldr	r3, [pc, #560]	@ (8000a2c <main+0x38c>)
 80007fa:	4a8e      	ldr	r2, [pc, #568]	@ (8000a34 <main+0x394>)
 80007fc:	609a      	str	r2, [r3, #8]
  DMA1_Stream4->NDTR = 1;
 80007fe:	4b8b      	ldr	r3, [pc, #556]	@ (8000a2c <main+0x38c>)
 8000800:	2201      	movs	r2, #1
 8000802:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000804:	f3bf 8f4f 	dsb	sy
}
 8000808:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream4->CR |= DMA_SxCR_EN;
 800080a:	4b88      	ldr	r3, [pc, #544]	@ (8000a2c <main+0x38c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a87      	ldr	r2, [pc, #540]	@ (8000a2c <main+0x38c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6013      	str	r3, [r2, #0]
  //TIM4 UP
  DMA1_Stream5->M0AR = &ulSevenSegD2;
 8000816:	4b88      	ldr	r3, [pc, #544]	@ (8000a38 <main+0x398>)
 8000818:	4a88      	ldr	r2, [pc, #544]	@ (8000a3c <main+0x39c>)
 800081a:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(GPIOD->BSRR);
 800081c:	4b86      	ldr	r3, [pc, #536]	@ (8000a38 <main+0x398>)
 800081e:	4a85      	ldr	r2, [pc, #532]	@ (8000a34 <main+0x394>)
 8000820:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = 1;
 8000822:	4b85      	ldr	r3, [pc, #532]	@ (8000a38 <main+0x398>)
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000828:	f3bf 8f4f 	dsb	sy
}
 800082c:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream5->CR |= DMA_SxCR_EN;
 800082e:	4b82      	ldr	r3, [pc, #520]	@ (8000a38 <main+0x398>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a81      	ldr	r2, [pc, #516]	@ (8000a38 <main+0x398>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6013      	str	r3, [r2, #0]
  //??? initializing the vars in the top just doesn't work???
  ulSevenSegD2 = 0x00FF00FF;
 800083a:	4b80      	ldr	r3, [pc, #512]	@ (8000a3c <main+0x39c>)
 800083c:	f04f 12ff 	mov.w	r2, #16711935	@ 0xff00ff
 8000840:	601a      	str	r2, [r3, #0]
  ulSevenSegD1 = 0x00FF000F;
 8000842:	4b7b      	ldr	r3, [pc, #492]	@ (8000a30 <main+0x390>)
 8000844:	4a7e      	ldr	r2, [pc, #504]	@ (8000a40 <main+0x3a0>)
 8000846:	601a      	str	r2, [r3, #0]
  //TIM4 drives multiplexing
  TIM4->CR1 |= TIM_CR1_URS;
 8000848:	4b7e      	ldr	r3, [pc, #504]	@ (8000a44 <main+0x3a4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a7d      	ldr	r2, [pc, #500]	@ (8000a44 <main+0x3a4>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~TIM_CR1_UDIS;
 8000854:	4b7b      	ldr	r3, [pc, #492]	@ (8000a44 <main+0x3a4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a7a      	ldr	r2, [pc, #488]	@ (8000a44 <main+0x3a4>)
 800085a:	f023 0302 	bic.w	r3, r3, #2
 800085e:	6013      	str	r3, [r2, #0]
  TIM4->CR2 &= ~TIM_CR2_CCDS;
 8000860:	4b78      	ldr	r3, [pc, #480]	@ (8000a44 <main+0x3a4>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	4a77      	ldr	r2, [pc, #476]	@ (8000a44 <main+0x3a4>)
 8000866:	f023 0308 	bic.w	r3, r3, #8
 800086a:	6053      	str	r3, [r2, #4]
  TIM4->DIER |= TIM_DIER_UDE | TIM_DIER_CC1DE;
 800086c:	4b75      	ldr	r3, [pc, #468]	@ (8000a44 <main+0x3a4>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	4a74      	ldr	r2, [pc, #464]	@ (8000a44 <main+0x3a4>)
 8000872:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000876:	60d3      	str	r3, [r2, #12]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000878:	4b72      	ldr	r3, [pc, #456]	@ (8000a44 <main+0x3a4>)
 800087a:	6a1b      	ldr	r3, [r3, #32]
 800087c:	4a71      	ldr	r2, [pc, #452]	@ (8000a44 <main+0x3a4>)
 800087e:	f043 0311 	orr.w	r3, r3, #17
 8000882:	6213      	str	r3, [r2, #32]
  TIM4->EGR |= TIM_EGR_UG | TIM_EGR_CC1G;
 8000884:	4b6f      	ldr	r3, [pc, #444]	@ (8000a44 <main+0x3a4>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	4a6e      	ldr	r2, [pc, #440]	@ (8000a44 <main+0x3a4>)
 800088a:	f043 0303 	orr.w	r3, r3, #3
 800088e:	6153      	str	r3, [r2, #20]
  TIM4->CR1 |= TIM_CR1_CEN;
 8000890:	4b6c      	ldr	r3, [pc, #432]	@ (8000a44 <main+0x3a4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a6b      	ldr	r2, [pc, #428]	@ (8000a44 <main+0x3a4>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6013      	str	r3, [r2, #0]

  //DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008a2:	4869      	ldr	r0, [pc, #420]	@ (8000a48 <main+0x3a8>)
 80008a4:	f01c f94e 	bl	801cb44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ae:	4866      	ldr	r0, [pc, #408]	@ (8000a48 <main+0x3a8>)
 80008b0:	f01c f948 	bl	801cb44 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008b4:	2032      	movs	r0, #50	@ 0x32
 80008b6:	f019 fec1 	bl	801a63c <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c0:	4861      	ldr	r0, [pc, #388]	@ (8000a48 <main+0x3a8>)
 80008c2:	f01c f93f 	bl	801cb44 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008c6:	2032      	movs	r0, #50	@ 0x32
 80008c8:	f019 feb8 	bl	801a63c <HAL_Delay>

  I2C4->CR2 = ( (0b0001100 << 1) & 0xFFFE )  // 7-bit address
 80008cc:	4b5f      	ldr	r3, [pc, #380]	@ (8000a4c <main+0x3ac>)
 80008ce:	4a60      	ldr	r2, [pc, #384]	@ (8000a50 <main+0x3b0>)
 80008d0:	605a      	str	r2, [r3, #4]
                 | (3 << 16)                   // NBYTES = 2
                 | (0 << 10)                   // Write direction (0 = write)
                 | I2C_CR2_AUTOEND             // Auto generate STOP
                 | I2C_CR2_START;              // Generate START
  while( (I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0 );
 80008d2:	bf00      	nop
 80008d4:	4b5d      	ldr	r3, [pc, #372]	@ (8000a4c <main+0x3ac>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0312 	and.w	r3, r3, #18
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d0f9      	beq.n	80008d4 <main+0x234>
//      if (I2C4->ISR & I2C_ISR_NACKF) {
//          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
//          return;  // Abort on failure
//      }
  I2C4->TXDR = 0b00111001; //write to both registers
 80008e0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <main+0x3ac>)
 80008e2:	2239      	movs	r2, #57	@ 0x39
 80008e4:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008e6:	bf00      	nop
 80008e8:	4b58      	ldr	r3, [pc, #352]	@ (8000a4c <main+0x3ac>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0f9      	beq.n	80008e8 <main+0x248>
  I2C4->TXDR = 0; //MSB
 80008f4:	4b55      	ldr	r3, [pc, #340]	@ (8000a4c <main+0x3ac>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008fa:	bf00      	nop
 80008fc:	4b53      	ldr	r3, [pc, #332]	@ (8000a4c <main+0x3ac>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f9      	beq.n	80008fc <main+0x25c>
  I2C4->TXDR = 4; //LSB
 8000908:	4b50      	ldr	r3, [pc, #320]	@ (8000a4c <main+0x3ac>)
 800090a:	2204      	movs	r2, #4
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXE)) == 0 );
 800090e:	bf00      	nop
 8000910:	4b4e      	ldr	r3, [pc, #312]	@ (8000a4c <main+0x3ac>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f9      	beq.n	8000910 <main+0x270>
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF) {
 800091c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <main+0x3ac>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <main+0x294>
      // Handle error (e.g., reset I2C)
      I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
 8000928:	4b48      	ldr	r3, [pc, #288]	@ (8000a4c <main+0x3ac>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	4a47      	ldr	r2, [pc, #284]	@ (8000a4c <main+0x3ac>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	61d3      	str	r3, [r2, #28]
  }

  //SPI1 RX Stream
   DMA1_Stream0->M0AR = usADCDataMock0;
 8000934:	4b47      	ldr	r3, [pc, #284]	@ (8000a54 <main+0x3b4>)
 8000936:	4a39      	ldr	r2, [pc, #228]	@ (8000a1c <main+0x37c>)
 8000938:	60da      	str	r2, [r3, #12]
   DMA1_Stream0->M1AR = usADCDataMock1;
 800093a:	4b46      	ldr	r3, [pc, #280]	@ (8000a54 <main+0x3b4>)
 800093c:	4a38      	ldr	r2, [pc, #224]	@ (8000a20 <main+0x380>)
 800093e:	611a      	str	r2, [r3, #16]
   DMA1_Stream0->PAR = &(SPI1->RXDR);
 8000940:	4b44      	ldr	r3, [pc, #272]	@ (8000a54 <main+0x3b4>)
 8000942:	4a45      	ldr	r2, [pc, #276]	@ (8000a58 <main+0x3b8>)
 8000944:	609a      	str	r2, [r3, #8]
   DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 8000946:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <main+0x3b4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a42      	ldr	r2, [pc, #264]	@ (8000a54 <main+0x3b4>)
 800094c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000950:	6013      	str	r3, [r2, #0]
   DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 8000952:	4b40      	ldr	r3, [pc, #256]	@ (8000a54 <main+0x3b4>)
 8000954:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000958:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
   DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 800095a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a54 <main+0x3b4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a54 <main+0x3b4>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000966:	f3bf 8f4f 	dsb	sy
}
 800096a:	bf00      	nop
   __DSB(); //required?
   DMA1_Stream0->CR |= DMA_SxCR_EN;
 800096c:	4b39      	ldr	r3, [pc, #228]	@ (8000a54 <main+0x3b4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a38      	ldr	r2, [pc, #224]	@ (8000a54 <main+0x3b4>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 8000978:	4b38      	ldr	r3, [pc, #224]	@ (8000a5c <main+0x3bc>)
 800097a:	4a2a      	ldr	r2, [pc, #168]	@ (8000a24 <main+0x384>)
 800097c:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 800097e:	4b37      	ldr	r3, [pc, #220]	@ (8000a5c <main+0x3bc>)
 8000980:	4a29      	ldr	r2, [pc, #164]	@ (8000a28 <main+0x388>)
 8000982:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 8000984:	4b35      	ldr	r3, [pc, #212]	@ (8000a5c <main+0x3bc>)
 8000986:	4a36      	ldr	r2, [pc, #216]	@ (8000a60 <main+0x3c0>)
 8000988:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 800098a:	4b34      	ldr	r3, [pc, #208]	@ (8000a5c <main+0x3bc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a33      	ldr	r2, [pc, #204]	@ (8000a5c <main+0x3bc>)
 8000990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000994:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000996:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <main+0x3bc>)
 8000998:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800099c:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <main+0x3bc>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a2e      	ldr	r2, [pc, #184]	@ (8000a5c <main+0x3bc>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80009aa:	f3bf 8f4f 	dsb	sy
}
 80009ae:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <main+0x3bc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a29      	ldr	r2, [pc, #164]	@ (8000a5c <main+0x3bc>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <main+0x3c4>)
 80009be:	4a16      	ldr	r2, [pc, #88]	@ (8000a18 <main+0x378>)
 80009c0:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 80009c2:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <main+0x3c4>)
 80009c4:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <main+0x3c8>)
 80009c6:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 80009c8:	4b26      	ldr	r3, [pc, #152]	@ (8000a64 <main+0x3c4>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ce:	f3bf 8f4f 	dsb	sy
}
 80009d2:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 80009d4:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <main+0x3c4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a22      	ldr	r2, [pc, #136]	@ (8000a64 <main+0x3c4>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <main+0x3cc>)
 80009e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <main+0x378>)
 80009e4:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <main+0x3cc>)
 80009e8:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <main+0x3d0>)
 80009ea:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <main+0x3cc>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f2:	f3bf 8f4f 	dsb	sy
}
 80009f6:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <main+0x3cc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <main+0x3cc>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]

  //initialize high speed ADC here
  SPI1->CR2 = 0; //reinitialize tsize
 8000a04:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <main+0x3d4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <main+0x3d4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a19      	ldr	r2, [pc, #100]	@ (8000a74 <main+0x3d4>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	e030      	b.n	8000a78 <main+0x3d8>
 8000a16:	bf00      	nop
 8000a18:	30000000 	.word	0x30000000
 8000a1c:	30000004 	.word	0x30000004
 8000a20:	30010004 	.word	0x30010004
 8000a24:	30020004 	.word	0x30020004
 8000a28:	30028004 	.word	0x30028004
 8000a2c:	40020070 	.word	0x40020070
 8000a30:	30030108 	.word	0x30030108
 8000a34:	58020c18 	.word	0x58020c18
 8000a38:	40020088 	.word	0x40020088
 8000a3c:	3003010c 	.word	0x3003010c
 8000a40:	00ff000f 	.word	0x00ff000f
 8000a44:	40000800 	.word	0x40000800
 8000a48:	58020c00 	.word	0x58020c00
 8000a4c:	58001c00 	.word	0x58001c00
 8000a50:	02032018 	.word	0x02032018
 8000a54:	40020010 	.word	0x40020010
 8000a58:	40013030 	.word	0x40013030
 8000a5c:	40020028 	.word	0x40020028
 8000a60:	40003830 	.word	0x40003830
 8000a64:	40020040 	.word	0x40020040
 8000a68:	40013020 	.word	0x40013020
 8000a6c:	40020058 	.word	0x40020058
 8000a70:	40003820 	.word	0x40003820
 8000a74:	40013000 	.word	0x40013000
 8000a78:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000a7a:	4ba3      	ldr	r3, [pc, #652]	@ (8000d08 <main+0x668>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4aa2      	ldr	r2, [pc, #648]	@ (8000d08 <main+0x668>)
 8000a80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a84:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a8c:	489f      	ldr	r0, [pc, #636]	@ (8000d0c <main+0x66c>)
 8000a8e:	f01c f859 	bl	801cb44 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a92:	2064      	movs	r0, #100	@ 0x64
 8000a94:	f019 fdd2 	bl	801a63c <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a9e:	489b      	ldr	r0, [pc, #620]	@ (8000d0c <main+0x66c>)
 8000aa0:	f01c f850 	bl	801cb44 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000aa4:	2064      	movs	r0, #100	@ 0x64
 8000aa6:	f019 fdc9 	bl	801a63c <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80+0x05}; //low reference, low input, vcm on, refpbuf on, input buf on
 8000aaa:	f248 531b 	movw	r3, #34075	@ 0x851b
 8000aae:	813b      	strh	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000ab0:	7a7b      	ldrb	r3, [r7, #9]
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	7a3a      	ldrb	r2, [r7, #8]
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	4b93      	ldr	r3, [pc, #588]	@ (8000d08 <main+0x668>)
 8000aba:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000abc:	bf00      	nop
 8000abe:	4b92      	ldr	r3, [pc, #584]	@ (8000d08 <main+0x668>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f9      	beq.n	8000abe <main+0x41e>
  spi_data[1]++;
 8000aca:	7a7b      	ldrb	r3, [r7, #9]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00010000; //sync control mode
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000ad6:	7a7b      	ldrb	r3, [r7, #9]
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	7a3a      	ldrb	r2, [r7, #8]
 8000adc:	431a      	orrs	r2, r3
 8000ade:	4b8a      	ldr	r3, [pc, #552]	@ (8000d08 <main+0x668>)
 8000ae0:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000ae2:	bf00      	nop
 8000ae4:	4b88      	ldr	r3, [pc, #544]	@ (8000d08 <main+0x668>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0f9      	beq.n	8000ae4 <main+0x444>
  spi_data[1]++;
 8000af0:	7a7b      	ldrb	r3, [r7, #9]
 8000af2:	3301      	adds	r3, #1
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00001001; //sinc4 osr16
 8000af8:	2309      	movs	r3, #9
 8000afa:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000afc:	7a7b      	ldrb	r3, [r7, #9]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	7a3a      	ldrb	r2, [r7, #8]
 8000b02:	431a      	orrs	r2, r3
 8000b04:	4b80      	ldr	r3, [pc, #512]	@ (8000d08 <main+0x668>)
 8000b06:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b08:	bf00      	nop
 8000b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d08 <main+0x668>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f9      	beq.n	8000b0a <main+0x46a>
  spi_data[1]++;
 8000b16:	7a7b      	ldrb	r3, [r7, #9]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b10000000; //external clock
 8000b1e:	2380      	movs	r3, #128	@ 0x80
 8000b20:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b22:	7a7b      	ldrb	r3, [r7, #9]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	7a3a      	ldrb	r2, [r7, #8]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	4b77      	ldr	r3, [pc, #476]	@ (8000d08 <main+0x668>)
 8000b2c:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b2e:	bf00      	nop
 8000b30:	4b75      	ldr	r3, [pc, #468]	@ (8000d08 <main+0x668>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f9      	beq.n	8000b30 <main+0x490>
  spi_data[1]=0x80+0x03; //start conversion
 8000b3c:	2383      	movs	r3, #131	@ 0x83
 8000b3e:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b00000010;
 8000b40:	2302      	movs	r3, #2
 8000b42:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b44:	7a7b      	ldrb	r3, [r7, #9]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	7a3a      	ldrb	r2, [r7, #8]
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	4b6e      	ldr	r3, [pc, #440]	@ (8000d08 <main+0x668>)
 8000b4e:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b50:	bf00      	nop
 8000b52:	4b6d      	ldr	r3, [pc, #436]	@ (8000d08 <main+0x668>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f9      	beq.n	8000b52 <main+0x4b2>
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8000d08 <main+0x668>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a69      	ldr	r2, [pc, #420]	@ (8000d08 <main+0x668>)
 8000b64:	f023 0301 	bic.w	r3, r3, #1
 8000b68:	6013      	str	r3, [r2, #0]

  //GADC Setup
  SPI2->CR2 = 0; //reinitialize tsize
 8000b6a:	4b69      	ldr	r3, [pc, #420]	@ (8000d10 <main+0x670>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= 0b11111; //use 32 bit mode for config
 8000b70:	4b67      	ldr	r3, [pc, #412]	@ (8000d10 <main+0x670>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4a66      	ldr	r2, [pc, #408]	@ (8000d10 <main+0x670>)
 8000b76:	f043 031f 	orr.w	r3, r3, #31
 8000b7a:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000b7c:	4b64      	ldr	r3, [pc, #400]	@ (8000d10 <main+0x670>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a63      	ldr	r2, [pc, #396]	@ (8000d10 <main+0x670>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000b88:	4b61      	ldr	r3, [pc, #388]	@ (8000d10 <main+0x670>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a60      	ldr	r2, [pc, #384]	@ (8000d10 <main+0x670>)
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b92:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b9a:	485e      	ldr	r0, [pc, #376]	@ (8000d14 <main+0x674>)
 8000b9c:	f01b ffd2 	bl	801cb44 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ba0:	2064      	movs	r0, #100	@ 0x64
 8000ba2:	f019 fd4b 	bl	801a63c <HAL_Delay>
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bac:	4859      	ldr	r0, [pc, #356]	@ (8000d14 <main+0x674>)
 8000bae:	f01b ffc9 	bl	801cb44 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000bb2:	2064      	movs	r0, #100	@ 0x64
 8000bb4:	f019 fd42 	bl	801a63c <HAL_Delay>
  uint16_t ucGADCSPIData[2] = {0b1101000000000100, (1<<5) | (1<<4)}; //disable alarms
 8000bb8:	4b57      	ldr	r3, [pc, #348]	@ (8000d18 <main+0x678>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	607b      	str	r3, [r7, #4]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	041b      	lsls	r3, r3, #16
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4b52      	ldr	r3, [pc, #328]	@ (8000d10 <main+0x670>)
 8000bc8:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000bca:	bf00      	nop
 8000bcc:	4b50      	ldr	r3, [pc, #320]	@ (8000d10 <main+0x670>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f9      	beq.n	8000bcc <main+0x52c>
  ucGADCSPIData[0] = 0b1101000000010100; //14h
 8000bd8:	f24d 0314 	movw	r3, #53268	@ 0xd014
 8000bdc:	80bb      	strh	r3, [r7, #4]
  ucGADCSPIData[1] = 0b10; //range select +-1.5x VREF
 8000bde:	2302      	movs	r3, #2
 8000be0:	80fb      	strh	r3, [r7, #6]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000be2:	88bb      	ldrh	r3, [r7, #4]
 8000be4:	041b      	lsls	r3, r3, #16
 8000be6:	88fa      	ldrh	r2, [r7, #6]
 8000be8:	431a      	orrs	r2, r3
 8000bea:	4b49      	ldr	r3, [pc, #292]	@ (8000d10 <main+0x670>)
 8000bec:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){};
 8000bee:	bf00      	nop
 8000bf0:	4b47      	ldr	r3, [pc, #284]	@ (8000d10 <main+0x670>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f9      	beq.n	8000bf0 <main+0x550>
  SPI2->CR1 &= ~SPI_CR1_SPE;
 8000bfc:	4b44      	ldr	r3, [pc, #272]	@ (8000d10 <main+0x670>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a43      	ldr	r2, [pc, #268]	@ (8000d10 <main+0x670>)
 8000c02:	f023 0301 	bic.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
  SPI2->CFG1 &= ~0b11111;
 8000c08:	4b41      	ldr	r3, [pc, #260]	@ (8000d10 <main+0x670>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4a40      	ldr	r2, [pc, #256]	@ (8000d10 <main+0x670>)
 8000c0e:	f023 031f 	bic.w	r3, r3, #31
 8000c12:	6093      	str	r3, [r2, #8]
  SPI2->CFG1 |= 0b1111; //switch back to 16 bit transfers
 8000c14:	4b3e      	ldr	r3, [pc, #248]	@ (8000d10 <main+0x670>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	4a3d      	ldr	r2, [pc, #244]	@ (8000d10 <main+0x670>)
 8000c1a:	f043 030f 	orr.w	r3, r3, #15
 8000c1e:	6093      	str	r3, [r2, #8]

  //TC ADC SETUP
  //interleave temp sensor and internal ADC
  usTCADCConfig[0] = 0b1000101110001010; //FSR 0.256mV, 128SPS, Single Conversion, Start Conversion, Default Inputs
 8000c20:	4b3e      	ldr	r3, [pc, #248]	@ (8000d1c <main+0x67c>)
 8000c22:	f648 328a 	movw	r2, #35722	@ 0x8b8a
 8000c26:	801a      	strh	r2, [r3, #0]
  usTCADCConfig[1] = 0b1000101110011010; //same as above, use internal temp sensor
 8000c28:	4b3c      	ldr	r3, [pc, #240]	@ (8000d1c <main+0x67c>)
 8000c2a:	f648 329a 	movw	r2, #35738	@ 0x8b9a
 8000c2e:	805a      	strh	r2, [r3, #2]
  //TIM5 UP
  DMA1_Stream6->M0AR = usTCADCConfig;
 8000c30:	4b3b      	ldr	r3, [pc, #236]	@ (8000d20 <main+0x680>)
 8000c32:	4a3a      	ldr	r2, [pc, #232]	@ (8000d1c <main+0x67c>)
 8000c34:	60da      	str	r2, [r3, #12]
  DMA1_Stream6->PAR = &(SPI3->TXDR);
 8000c36:	4b3a      	ldr	r3, [pc, #232]	@ (8000d20 <main+0x680>)
 8000c38:	4a3a      	ldr	r2, [pc, #232]	@ (8000d24 <main+0x684>)
 8000c3a:	609a      	str	r2, [r3, #8]
  DMA1_Stream6->NDTR = 2;
 8000c3c:	4b38      	ldr	r3, [pc, #224]	@ (8000d20 <main+0x680>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c42:	f3bf 8f4f 	dsb	sy
}
 8000c46:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream6->CR |= DMA_SxCR_EN;
 8000c48:	4b35      	ldr	r3, [pc, #212]	@ (8000d20 <main+0x680>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a34      	ldr	r2, [pc, #208]	@ (8000d20 <main+0x680>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]
  //SPI3 RX Stream
  DMA1_Stream7->M0AR = usTCADCData0;
 8000c54:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <main+0x688>)
 8000c56:	4a35      	ldr	r2, [pc, #212]	@ (8000d2c <main+0x68c>)
 8000c58:	60da      	str	r2, [r3, #12]
  DMA1_Stream7->M1AR = usTCADCData1;
 8000c5a:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <main+0x688>)
 8000c5c:	4a34      	ldr	r2, [pc, #208]	@ (8000d30 <main+0x690>)
 8000c5e:	611a      	str	r2, [r3, #16]
  DMA1_Stream7->PAR = &(SPI3->RXDR);
 8000c60:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <main+0x688>)
 8000c62:	4a34      	ldr	r2, [pc, #208]	@ (8000d34 <main+0x694>)
 8000c64:	609a      	str	r2, [r3, #8]
  DMA1_Stream7->CR |= DMA_DOUBLE_BUFFER_M0;
 8000c66:	4b30      	ldr	r3, [pc, #192]	@ (8000d28 <main+0x688>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d28 <main+0x688>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
  DMA1_Stream7->NDTR = TC_ADC_BUFFER_HALF_SIZE;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	@ (8000d28 <main+0x688>)
 8000c74:	2240      	movs	r2, #64	@ 0x40
 8000c76:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream7->CR |= DMA_SxCR_TCIE;
 8000c78:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <main+0x688>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000d28 <main+0x688>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c84:	f3bf 8f4f 	dsb	sy
}
 8000c88:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream7->CR |= DMA_SxCR_EN;
 8000c8a:	4b27      	ldr	r3, [pc, #156]	@ (8000d28 <main+0x688>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a26      	ldr	r2, [pc, #152]	@ (8000d28 <main+0x688>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6013      	str	r3, [r2, #0]
  //SPI3 Config
  SPI3->CR2 = 0; //reinitialize tsize
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <main+0x698>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
  SPI3->CFG1 |= SPI_CFG1_RXDMAEN;
 8000c9c:	4b26      	ldr	r3, [pc, #152]	@ (8000d38 <main+0x698>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	4a25      	ldr	r2, [pc, #148]	@ (8000d38 <main+0x698>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca6:	6093      	str	r3, [r2, #8]
  SPI3->CR1 |= SPI_CR1_SPE;
 8000ca8:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <main+0x698>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a22      	ldr	r2, [pc, #136]	@ (8000d38 <main+0x698>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]
  SPI3->CR1 |= SPI_CR1_CSTART;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <main+0x698>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d38 <main+0x698>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
  //enable TIM5 (SPI3 TX)
  TIM5->CR1 |= TIM_CR1_URS;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <main+0x69c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d3c <main+0x69c>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6013      	str	r3, [r2, #0]
  TIM5->CR1 &= ~TIM_CR1_UDIS;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <main+0x69c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d3c <main+0x69c>)
 8000cd2:	f023 0302 	bic.w	r3, r3, #2
 8000cd6:	6013      	str	r3, [r2, #0]
  TIM5->DIER |= TIM_DMA_UPDATE;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <main+0x69c>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <main+0x69c>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce2:	60d3      	str	r3, [r2, #12]
  TIM5->EGR |= TIM_EGR_UG;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <main+0x69c>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <main+0x69c>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6153      	str	r3, [r2, #20]
  TIM5->CR1 |= TIM_CR1_CEN;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <main+0x69c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a11      	ldr	r2, [pc, #68]	@ (8000d3c <main+0x69c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2120      	movs	r1, #32
 8000d00:	480f      	ldr	r0, [pc, #60]	@ (8000d40 <main+0x6a0>)
 8000d02:	f01b ff1f 	bl	801cb44 <HAL_GPIO_WritePin>
 8000d06:	e01d      	b.n	8000d44 <main+0x6a4>
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	58020000 	.word	0x58020000
 8000d10:	40003800 	.word	0x40003800
 8000d14:	58020c00 	.word	0x58020c00
 8000d18:	080247f4 	.word	0x080247f4
 8000d1c:	30030004 	.word	0x30030004
 8000d20:	400200a0 	.word	0x400200a0
 8000d24:	40003c20 	.word	0x40003c20
 8000d28:	400200b8 	.word	0x400200b8
 8000d2c:	30030008 	.word	0x30030008
 8000d30:	30030088 	.word	0x30030088
 8000d34:	40003c30 	.word	0x40003c30
 8000d38:	40003c00 	.word	0x40003c00
 8000d3c:	40000c00 	.word	0x40000c00
 8000d40:	58021000 	.word	0x58021000

  //Enable SPI1
//  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; //reinitialize tsize
 8000d44:	4b59      	ldr	r3, [pc, #356]	@ (8000eac <main+0x80c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000d4a:	4b58      	ldr	r3, [pc, #352]	@ (8000eac <main+0x80c>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	4a57      	ldr	r2, [pc, #348]	@ (8000eac <main+0x80c>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000d56:	4b55      	ldr	r3, [pc, #340]	@ (8000eac <main+0x80c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a54      	ldr	r2, [pc, #336]	@ (8000eac <main+0x80c>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000d62:	4b52      	ldr	r3, [pc, #328]	@ (8000eac <main+0x80c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a51      	ldr	r2, [pc, #324]	@ (8000eac <main+0x80c>)
 8000d68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6c:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CR2 = 0; //reinitialize tsize
 8000d6e:	4b50      	ldr	r3, [pc, #320]	@ (8000eb0 <main+0x810>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000d74:	4b4e      	ldr	r3, [pc, #312]	@ (8000eb0 <main+0x810>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	4a4d      	ldr	r2, [pc, #308]	@ (8000eb0 <main+0x810>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7e:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000d80:	4b4b      	ldr	r3, [pc, #300]	@ (8000eb0 <main+0x810>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a4a      	ldr	r2, [pc, #296]	@ (8000eb0 <main+0x810>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000d8c:	4b48      	ldr	r3, [pc, #288]	@ (8000eb0 <main+0x810>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a47      	ldr	r2, [pc, #284]	@ (8000eb0 <main+0x810>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d96:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000d98:	4b46      	ldr	r3, [pc, #280]	@ (8000eb4 <main+0x814>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a45      	ldr	r2, [pc, #276]	@ (8000eb4 <main+0x814>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000da4:	4b43      	ldr	r3, [pc, #268]	@ (8000eb4 <main+0x814>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a42      	ldr	r2, [pc, #264]	@ (8000eb4 <main+0x814>)
 8000daa:	f023 0302 	bic.w	r3, r3, #2
 8000dae:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000db0:	4b40      	ldr	r3, [pc, #256]	@ (8000eb4 <main+0x814>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4a3f      	ldr	r2, [pc, #252]	@ (8000eb4 <main+0x814>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dba:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8000eb4 <main+0x814>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8000eb4 <main+0x814>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8000eb4 <main+0x814>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a39      	ldr	r2, [pc, #228]	@ (8000eb4 <main+0x814>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6013      	str	r3, [r2, #0]

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000dd4:	4b38      	ldr	r3, [pc, #224]	@ (8000eb8 <main+0x818>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a37      	ldr	r2, [pc, #220]	@ (8000eb8 <main+0x818>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000de0:	4b35      	ldr	r3, [pc, #212]	@ (8000eb8 <main+0x818>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a34      	ldr	r2, [pc, #208]	@ (8000eb8 <main+0x818>)
 8000de6:	f023 0302 	bic.w	r3, r3, #2
 8000dea:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000dec:	4b32      	ldr	r3, [pc, #200]	@ (8000eb8 <main+0x818>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	4a31      	ldr	r2, [pc, #196]	@ (8000eb8 <main+0x818>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df6:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000df8:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb8 <main+0x818>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8000eb8 <main+0x818>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb8 <main+0x818>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a2b      	ldr	r2, [pc, #172]	@ (8000eb8 <main+0x818>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]


  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000e10:	492a      	ldr	r1, [pc, #168]	@ (8000ebc <main+0x81c>)
 8000e12:	2000      	movs	r0, #0
 8000e14:	f017 fcb4 	bl	8018780 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000e18:	4b29      	ldr	r3, [pc, #164]	@ (8000ec0 <main+0x820>)
 8000e1a:	9302      	str	r3, [sp, #8]
 8000e1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <main+0x824>)
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	4b29      	ldr	r3, [pc, #164]	@ (8000ec8 <main+0x828>)
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <main+0x82c>)
 8000e26:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed0 <main+0x830>)
 8000e28:	492a      	ldr	r1, [pc, #168]	@ (8000ed4 <main+0x834>)
 8000e2a:	4824      	ldr	r0, [pc, #144]	@ (8000ebc <main+0x81c>)
 8000e2c:	f00c fc68 	bl	800d700 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000e30:	f008 fdb6 	bl	80099a0 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 8000e34:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <main+0x838>)
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e42:	4926      	ldr	r1, [pc, #152]	@ (8000edc <main+0x83c>)
 8000e44:	4826      	ldr	r0, [pc, #152]	@ (8000ee0 <main+0x840>)
 8000e46:	f003 fae7 	bl	8004418 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "HSADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000e4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <main+0x844>)
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e58:	4923      	ldr	r1, [pc, #140]	@ (8000ee8 <main+0x848>)
 8000e5a:	4824      	ldr	r0, [pc, #144]	@ (8000eec <main+0x84c>)
 8000e5c:	f003 fadc 	bl	8004418 <xTaskCreate>
      xTaskCreate ( vAuxADCTCPTask, "GADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
 8000e60:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <main+0x850>)
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	2301      	movs	r3, #1
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e6e:	4921      	ldr	r1, [pc, #132]	@ (8000ef4 <main+0x854>)
 8000e70:	4821      	ldr	r0, [pc, #132]	@ (8000ef8 <main+0x858>)
 8000e72:	f003 fad1 	bl	8004418 <xTaskCreate>
      xTaskCreate ( vTCADCTCPTask, "TCADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vTCADCTCPTaskHandle);
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <main+0x85c>)
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e84:	491e      	ldr	r1, [pc, #120]	@ (8000f00 <main+0x860>)
 8000e86:	481f      	ldr	r0, [pc, #124]	@ (8000f04 <main+0x864>)
 8000e88:	f003 fac6 	bl	8004418 <xTaskCreate>
      xTaskCreate ( vCommandServerTask, "CommandServer", mainTCP_SERVER_STACK_SIZE, NULL, tskIDLE_PRIORITY, &vCommandServerTaskHandle);
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <main+0x868>)
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	2300      	movs	r3, #0
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2300      	movs	r3, #0
 8000e96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e9a:	491c      	ldr	r1, [pc, #112]	@ (8000f0c <main+0x86c>)
 8000e9c:	481c      	ldr	r0, [pc, #112]	@ (8000f10 <main+0x870>)
 8000e9e:	f003 fabb 	bl	8004418 <xTaskCreate>
      vTaskStartScheduler();
 8000ea2:	f003 fd13 	bl	80048cc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea6:	bf00      	nop
 8000ea8:	e7fd      	b.n	8000ea6 <main+0x806>
 8000eaa:	bf00      	nop
 8000eac:	40013000 	.word	0x40013000
 8000eb0:	40003800 	.word	0x40003800
 8000eb4:	40010000 	.word	0x40010000
 8000eb8:	40000400 	.word	0x40000400
 8000ebc:	20000860 	.word	0x20000860
 8000ec0:	08027cf4 	.word	0x08027cf4
 8000ec4:	08027cf0 	.word	0x08027cf0
 8000ec8:	08027cec 	.word	0x08027cec
 8000ecc:	08027ce8 	.word	0x08027ce8
 8000ed0:	08027ce4 	.word	0x08027ce4
 8000ed4:	20000888 	.word	0x20000888
 8000ed8:	20000d30 	.word	0x20000d30
 8000edc:	080247b8 	.word	0x080247b8
 8000ee0:	08001b6d 	.word	0x08001b6d
 8000ee4:	20000d34 	.word	0x20000d34
 8000ee8:	080247c0 	.word	0x080247c0
 8000eec:	08001b95 	.word	0x08001b95
 8000ef0:	20000d38 	.word	0x20000d38
 8000ef4:	080247cc 	.word	0x080247cc
 8000ef8:	08001d4d 	.word	0x08001d4d
 8000efc:	20000d3c 	.word	0x20000d3c
 8000f00:	080247d8 	.word	0x080247d8
 8000f04:	08001f05 	.word	0x08001f05
 8000f08:	20000d40 	.word	0x20000d40
 8000f0c:	080247e4 	.word	0x080247e4
 8000f10:	080020bd 	.word	0x080020bd

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b09e      	sub	sp, #120	@ 0x78
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f1e:	224c      	movs	r2, #76	@ 0x4c
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f021 feb7 	bl	8022c96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f021 feb0 	bl	8022c96 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f36:	2002      	movs	r0, #2
 8000f38:	f01b ff52 	bl	801cde0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	4b48      	ldr	r3, [pc, #288]	@ (8001064 <SystemClock_Config+0x150>)
 8000f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f44:	4a47      	ldr	r2, [pc, #284]	@ (8001064 <SystemClock_Config+0x150>)
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f4c:	4b45      	ldr	r3, [pc, #276]	@ (8001064 <SystemClock_Config+0x150>)
 8000f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b44      	ldr	r3, [pc, #272]	@ (8001068 <SystemClock_Config+0x154>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	4a43      	ldr	r2, [pc, #268]	@ (8001068 <SystemClock_Config+0x154>)
 8000f5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f60:	6193      	str	r3, [r2, #24]
 8000f62:	4b41      	ldr	r3, [pc, #260]	@ (8001068 <SystemClock_Config+0x154>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f6e:	bf00      	nop
 8000f70:	4b3d      	ldr	r3, [pc, #244]	@ (8001068 <SystemClock_Config+0x154>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f7c:	d1f8      	bne.n	8000f70 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800106c <SystemClock_Config+0x158>)
 8000f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f84:	4a39      	ldr	r2, [pc, #228]	@ (800106c <SystemClock_Config+0x158>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f8e:	4b37      	ldr	r3, [pc, #220]	@ (800106c <SystemClock_Config+0x158>)
 8000f90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	4b31      	ldr	r3, [pc, #196]	@ (8001068 <SystemClock_Config+0x154>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a30      	ldr	r2, [pc, #192]	@ (8001068 <SystemClock_Config+0x154>)
 8000fa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b2e      	ldr	r3, [pc, #184]	@ (8001068 <SystemClock_Config+0x154>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001064 <SystemClock_Config+0x150>)
 8000fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fba:	4a2a      	ldr	r2, [pc, #168]	@ (8001064 <SystemClock_Config+0x150>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fc2:	4b28      	ldr	r3, [pc, #160]	@ (8001064 <SystemClock_Config+0x150>)
 8000fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fce:	bf00      	nop
 8000fd0:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <SystemClock_Config+0x154>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fdc:	d1f8      	bne.n	8000fd0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fe2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fec:	2302      	movs	r3, #2
 8000fee:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000ff4:	2340      	movs	r3, #64	@ 0x40
 8000ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001000:	2302      	movs	r3, #2
 8001002:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001004:	230c      	movs	r3, #12
 8001006:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001008:	2300      	movs	r3, #0
 800100a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001014:	4618      	mov	r0, r3
 8001016:	f01b ff1d 	bl	801ce54 <HAL_RCC_OscConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001020:	f001 f934 	bl	800228c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001024:	233f      	movs	r3, #63	@ 0x3f
 8001026:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001028:	2303      	movs	r3, #3
 800102a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001030:	2308      	movs	r3, #8
 8001032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001034:	2340      	movs	r3, #64	@ 0x40
 8001036:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001038:	2340      	movs	r3, #64	@ 0x40
 800103a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800103c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001042:	2340      	movs	r3, #64	@ 0x40
 8001044:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2102      	movs	r1, #2
 800104c:	4618      	mov	r0, r3
 800104e:	f01c fb5b 	bl	801d708 <HAL_RCC_ClockConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001058:	f001 f918 	bl	800228c <Error_Handler>
  }
}
 800105c:	bf00      	nop
 800105e:	3778      	adds	r7, #120	@ 0x78
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	58000400 	.word	0x58000400
 8001068:	58024800 	.word	0x58024800
 800106c:	58024400 	.word	0x58024400

08001070 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0b0      	sub	sp, #192	@ 0xc0
 8001074:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	22c0      	movs	r2, #192	@ 0xc0
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f021 fe0a 	bl	8022c96 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8001082:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 800108e:	2308      	movs	r3, #8
 8001090:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 8001092:	2340      	movs	r3, #64	@ 0x40
 8001094:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001096:	2302      	movs	r3, #2
 8001098:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80010a2:	2340      	movs	r3, #64	@ 0x40
 80010a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80010ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4618      	mov	r0, r3
 80010b8:	f01c feb2 	bl	801de20 <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80010c2:	f001 f8e3 	bl	800228c <Error_Handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	37c0      	adds	r7, #192	@ 0xc0
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_I2C4_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001148 <MX_I2C4_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_I2C4_Init+0x74>)
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <MX_I2C4_Init+0x7c>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_I2C4_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <MX_I2C4_Init+0x74>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_I2C4_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80010f2:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_I2C4_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <MX_I2C4_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_I2C4_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_I2C4_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800110a:	480e      	ldr	r0, [pc, #56]	@ (8001144 <MX_I2C4_Init+0x74>)
 800110c:	f01b fd34 	bl	801cb78 <HAL_I2C_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001116:	f001 f8b9 	bl	800228c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	4809      	ldr	r0, [pc, #36]	@ (8001144 <MX_I2C4_Init+0x74>)
 800111e:	f01b fdc7 	bl	801ccb0 <HAL_I2CEx_ConfigAnalogFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001128:	f001 f8b0 	bl	800228c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800112c:	2100      	movs	r1, #0
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_I2C4_Init+0x74>)
 8001130:	f01b fe09 	bl	801cd46 <HAL_I2CEx_ConfigDigitalFilter>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800113a:	f001 f8a7 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000a4 	.word	0x200000a4
 8001148:	58001c00 	.word	0x58001c00
 800114c:	10c0ecff 	.word	0x10c0ecff

08001150 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001154:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 8001156:	4a29      	ldr	r2, [pc, #164]	@ (80011fc <MX_SPI1_Init+0xac>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800115a:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 800115c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001160:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001162:	4b25      	ldr	r3, [pc, #148]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001168:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 800116a:	220f      	movs	r2, #15
 800116c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116e:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001174:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 8001176:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800117a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800117c:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 800117e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001182:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001184:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 8001186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800118a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001198:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 800119a:	2200      	movs	r2, #0
 800119c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800119e:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011c6:	2203      	movs	r2, #3
 80011c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011cc:	2230      	movs	r2, #48	@ 0x30
 80011ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_SPI1_Init+0xa8>)
 80011e4:	f01e fc48 	bl	801fa78 <HAL_SPI_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80011ee:	f001 f84d 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000f8 	.word	0x200000f8
 80011fc:	40013000 	.word	0x40013000

08001200 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001204:	4b27      	ldr	r3, [pc, #156]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001206:	4a28      	ldr	r2, [pc, #160]	@ (80012a8 <MX_SPI2_Init+0xa8>)
 8001208:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800120a:	4b26      	ldr	r3, [pc, #152]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 800120c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001210:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001212:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001218:	4b22      	ldr	r3, [pc, #136]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 800121a:	220f      	movs	r2, #15
 800121c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800121e:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001224:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800122a:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 800122c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001230:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001232:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001234:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001238:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001246:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001254:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001258:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001260:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800126c:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001274:	2203      	movs	r2, #3
 8001276:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001278:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 800127a:	2230      	movs	r2, #48	@ 0x30
 800127c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001284:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	@ (80012a4 <MX_SPI2_Init+0xa4>)
 8001292:	f01e fbf1 	bl	801fa78 <HAL_SPI_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800129c:	f000 fff6 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000180 	.word	0x20000180
 80012a8:	40003800 	.word	0x40003800

080012ac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012b0:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012b2:	4a29      	ldr	r2, [pc, #164]	@ (8001358 <MX_SPI3_Init+0xac>)
 80012b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012b6:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012b8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012be:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80012c4:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012c6:	220f      	movs	r2, #15
 80012c8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ca:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012d0:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012da:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80012fa:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <MX_SPI3_Init+0xa8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <MX_SPI3_Init+0xa8>)
 8001302:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001306:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <MX_SPI3_Init+0xa8>)
 800130a:	2200      	movs	r2, #0
 800130c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800130e:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <MX_SPI3_Init+0xa8>)
 8001310:	2200      	movs	r2, #0
 8001312:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <MX_SPI3_Init+0xa8>)
 8001316:	2200      	movs	r2, #0
 8001318:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_SPI3_Init+0xa8>)
 800131c:	2200      	movs	r2, #0
 800131e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_02CYCLE;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <MX_SPI3_Init+0xa8>)
 8001322:	2202      	movs	r2, #2
 8001324:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <MX_SPI3_Init+0xa8>)
 8001328:	2220      	movs	r2, #32
 800132a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <MX_SPI3_Init+0xa8>)
 800132e:	2200      	movs	r2, #0
 8001330:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MX_SPI3_Init+0xa8>)
 8001334:	2200      	movs	r2, #0
 8001336:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <MX_SPI3_Init+0xa8>)
 800133a:	2200      	movs	r2, #0
 800133c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <MX_SPI3_Init+0xa8>)
 8001340:	f01e fb9a 	bl	801fa78 <HAL_SPI_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800134a:	f000 ff9f 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000208 	.word	0x20000208
 8001358:	40003c00 	.word	0x40003c00

0800135c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800137a:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_TIM1_Init+0x9c>)
 800137c:	4a1f      	ldr	r2, [pc, #124]	@ (80013fc <MX_TIM1_Init+0xa0>)
 800137e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <MX_TIM1_Init+0x9c>)
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_TIM1_Init+0x9c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_TIM1_Init+0x9c>)
 800138e:	22ff      	movs	r2, #255	@ 0xff
 8001390:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_TIM1_Init+0x9c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <MX_TIM1_Init+0x9c>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <MX_TIM1_Init+0x9c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a4:	4814      	ldr	r0, [pc, #80]	@ (80013f8 <MX_TIM1_Init+0x9c>)
 80013a6:	f01e ff60 	bl	802026a <HAL_TIM_Base_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013b0:	f000 ff6c 	bl	800228c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_TIM1_Init+0x9c>)
 80013c2:	f01f f997 	bl	80206f4 <HAL_TIM_ConfigClockSource>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013cc:	f000 ff5e 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013d0:	2320      	movs	r3, #32
 80013d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_TIM1_Init+0x9c>)
 80013e2:	f01f fe99 	bl	8021118 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013ec:	f000 ff4e 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200003f8 	.word	0x200003f8
 80013fc:	40010000 	.word	0x40010000

08001400 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800141e:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <MX_TIM3_Init+0x94>)
 8001420:	4a1d      	ldr	r2, [pc, #116]	@ (8001498 <MX_TIM3_Init+0x98>)
 8001422:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <MX_TIM3_Init+0x94>)
 8001426:	22c7      	movs	r2, #199	@ 0xc7
 8001428:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_TIM3_Init+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_TIM3_Init+0x94>)
 8001432:	2209      	movs	r2, #9
 8001434:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <MX_TIM3_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <MX_TIM3_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001442:	4814      	ldr	r0, [pc, #80]	@ (8001494 <MX_TIM3_Init+0x94>)
 8001444:	f01e ff11 	bl	802026a <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800144e:	f000 ff1d 	bl	800228c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001452:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	@ (8001494 <MX_TIM3_Init+0x94>)
 8001460:	f01f f948 	bl	80206f4 <HAL_TIM_ConfigClockSource>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 ff0f 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	@ (8001494 <MX_TIM3_Init+0x94>)
 800147c:	f01f fe4c 	bl	8021118 <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001486:	f000 ff01 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000490 	.word	0x20000490
 8001498:	40000400 	.word	0x40000400

0800149c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08e      	sub	sp, #56	@ 0x38
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
 80014ca:	615a      	str	r2, [r3, #20]
 80014cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014ce:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <MX_TIM4_Init+0x104>)
 80014d0:	4a34      	ldr	r2, [pc, #208]	@ (80015a4 <MX_TIM4_Init+0x108>)
 80014d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 80014d4:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <MX_TIM4_Init+0x104>)
 80014d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <MX_TIM4_Init+0x104>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80014e2:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <MX_TIM4_Init+0x104>)
 80014e4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80014e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <MX_TIM4_Init+0x104>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <MX_TIM4_Init+0x104>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014f6:	482a      	ldr	r0, [pc, #168]	@ (80015a0 <MX_TIM4_Init+0x104>)
 80014f8:	f01e feb7 	bl	802026a <HAL_TIM_Base_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001502:	f000 fec3 	bl	800228c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800150c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001510:	4619      	mov	r1, r3
 8001512:	4823      	ldr	r0, [pc, #140]	@ (80015a0 <MX_TIM4_Init+0x104>)
 8001514:	f01f f8ee 	bl	80206f4 <HAL_TIM_ConfigClockSource>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800151e:	f000 feb5 	bl	800228c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001522:	481f      	ldr	r0, [pc, #124]	@ (80015a0 <MX_TIM4_Init+0x104>)
 8001524:	f01e ff70 	bl	8020408 <HAL_TIM_PWM_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800152e:	f000 fead 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4817      	ldr	r0, [pc, #92]	@ (80015a0 <MX_TIM4_Init+0x104>)
 8001542:	f01f fde9 	bl	8021118 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800154c:	f000 fe9e 	bl	800228c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001550:	2360      	movs	r3, #96	@ 0x60
 8001552:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8001554:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001558:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	4619      	mov	r1, r3
 8001568:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <MX_TIM4_Init+0x104>)
 800156a:	f01e ffaf 	bl	80204cc <HAL_TIM_PWM_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001574:	f000 fe8a 	bl	800228c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001578:	2370      	movs	r3, #112	@ 0x70
 800157a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	2204      	movs	r2, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	@ (80015a0 <MX_TIM4_Init+0x104>)
 8001584:	f01e ffa2 	bl	80204cc <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800158e:	f000 fe7d 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001592:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <MX_TIM4_Init+0x104>)
 8001594:	f001 fb2a 	bl	8002bec <HAL_TIM_MspPostInit>

}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	@ 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200004dc 	.word	0x200004dc
 80015a4:	40000800 	.word	0x40000800

080015a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <MX_TIM5_Init+0x98>)
 80015c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001644 <MX_TIM5_Init+0x9c>)
 80015ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <MX_TIM5_Init+0x98>)
 80015ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <MX_TIM5_Init+0x98>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3124;
 80015da:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <MX_TIM5_Init+0x98>)
 80015dc:	f640 4234 	movw	r2, #3124	@ 0xc34
 80015e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <MX_TIM5_Init+0x98>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <MX_TIM5_Init+0x98>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015ee:	4814      	ldr	r0, [pc, #80]	@ (8001640 <MX_TIM5_Init+0x98>)
 80015f0:	f01e fe3b 	bl	802026a <HAL_TIM_Base_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80015fa:	f000 fe47 	bl	800228c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001602:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	4619      	mov	r1, r3
 800160a:	480d      	ldr	r0, [pc, #52]	@ (8001640 <MX_TIM5_Init+0x98>)
 800160c:	f01f f872 	bl	80206f4 <HAL_TIM_ConfigClockSource>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001616:	f000 fe39 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	@ (8001640 <MX_TIM5_Init+0x98>)
 8001628:	f01f fd76 	bl	8021118 <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001632:	f000 fe2b 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000528 	.word	0x20000528
 8001644:	40000c00 	.word	0x40000c00

08001648 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800164c:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 800164e:	4a23      	ldr	r2, [pc, #140]	@ (80016dc <MX_USART3_UART_Init+0x94>)
 8001650:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001652:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001666:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167e:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001684:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001690:	4811      	ldr	r0, [pc, #68]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 8001692:	f01f fdcf 	bl	8021234 <HAL_UART_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800169c:	f000 fdf6 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a0:	2100      	movs	r1, #0
 80016a2:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 80016a4:	f020 fdd7 	bl	8022256 <HAL_UARTEx_SetTxFifoThreshold>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016ae:	f000 fded 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b2:	2100      	movs	r1, #0
 80016b4:	4808      	ldr	r0, [pc, #32]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 80016b6:	f020 fe0c 	bl	80222d2 <HAL_UARTEx_SetRxFifoThreshold>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016c0:	f000 fde4 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_USART3_UART_Init+0x90>)
 80016c6:	f020 fd8d 	bl	80221e4 <HAL_UARTEx_DisableFifoMode>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016d0:	f000 fddc 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200007cc 	.word	0x200007cc
 80016dc:	40004800 	.word	0x40004800

080016e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e6:	4b29      	ldr	r3, [pc, #164]	@ (800178c <MX_DMA_Init+0xac>)
 80016e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016ec:	4a27      	ldr	r2, [pc, #156]	@ (800178c <MX_DMA_Init+0xac>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80016f6:	4b25      	ldr	r3, [pc, #148]	@ (800178c <MX_DMA_Init+0xac>)
 80016f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2106      	movs	r1, #6
 8001708:	200b      	movs	r0, #11
 800170a:	f019 f8b6 	bl	801a87a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800170e:	200b      	movs	r0, #11
 8001710:	f019 f8cd 	bl	801a8ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2106      	movs	r1, #6
 8001718:	200c      	movs	r0, #12
 800171a:	f019 f8ae 	bl	801a87a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800171e:	200c      	movs	r0, #12
 8001720:	f019 f8c5 	bl	801a8ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2107      	movs	r1, #7
 8001728:	200d      	movs	r0, #13
 800172a:	f019 f8a6 	bl	801a87a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800172e:	200d      	movs	r0, #13
 8001730:	f019 f8bd 	bl	801a8ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2107      	movs	r1, #7
 8001738:	200e      	movs	r0, #14
 800173a:	f019 f89e 	bl	801a87a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800173e:	200e      	movs	r0, #14
 8001740:	f019 f8b5 	bl	801a8ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2107      	movs	r1, #7
 8001748:	200f      	movs	r0, #15
 800174a:	f019 f896 	bl	801a87a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800174e:	200f      	movs	r0, #15
 8001750:	f019 f8ad 	bl	801a8ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2107      	movs	r1, #7
 8001758:	2010      	movs	r0, #16
 800175a:	f019 f88e 	bl	801a87a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800175e:	2010      	movs	r0, #16
 8001760:	f019 f8a5 	bl	801a8ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 7, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2107      	movs	r1, #7
 8001768:	2011      	movs	r0, #17
 800176a:	f019 f886 	bl	801a87a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800176e:	2011      	movs	r0, #17
 8001770:	f019 f89d 	bl	801a8ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 7, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2107      	movs	r1, #7
 8001778:	202f      	movs	r0, #47	@ 0x2f
 800177a:	f019 f87e 	bl	801a87a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800177e:	202f      	movs	r0, #47	@ 0x2f
 8001780:	f019 f895 	bl	801a8ae <HAL_NVIC_EnableIRQ>

}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	58024400 	.word	0x58024400

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	@ 0x30
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a6:	4b61      	ldr	r3, [pc, #388]	@ (800192c <MX_GPIO_Init+0x19c>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ac:	4a5f      	ldr	r2, [pc, #380]	@ (800192c <MX_GPIO_Init+0x19c>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b6:	4b5d      	ldr	r3, [pc, #372]	@ (800192c <MX_GPIO_Init+0x19c>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c4:	4b59      	ldr	r3, [pc, #356]	@ (800192c <MX_GPIO_Init+0x19c>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ca:	4a58      	ldr	r2, [pc, #352]	@ (800192c <MX_GPIO_Init+0x19c>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d4:	4b55      	ldr	r3, [pc, #340]	@ (800192c <MX_GPIO_Init+0x19c>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b52      	ldr	r3, [pc, #328]	@ (800192c <MX_GPIO_Init+0x19c>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e8:	4a50      	ldr	r2, [pc, #320]	@ (800192c <MX_GPIO_Init+0x19c>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f2:	4b4e      	ldr	r3, [pc, #312]	@ (800192c <MX_GPIO_Init+0x19c>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <MX_GPIO_Init+0x19c>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001806:	4a49      	ldr	r2, [pc, #292]	@ (800192c <MX_GPIO_Init+0x19c>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001810:	4b46      	ldr	r3, [pc, #280]	@ (800192c <MX_GPIO_Init+0x19c>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	4b43      	ldr	r3, [pc, #268]	@ (800192c <MX_GPIO_Init+0x19c>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001824:	4a41      	ldr	r2, [pc, #260]	@ (800192c <MX_GPIO_Init+0x19c>)
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800182e:	4b3f      	ldr	r3, [pc, #252]	@ (800192c <MX_GPIO_Init+0x19c>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183c:	4b3b      	ldr	r3, [pc, #236]	@ (800192c <MX_GPIO_Init+0x19c>)
 800183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001842:	4a3a      	ldr	r2, [pc, #232]	@ (800192c <MX_GPIO_Init+0x19c>)
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800184c:	4b37      	ldr	r3, [pc, #220]	@ (800192c <MX_GPIO_Init+0x19c>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	213c      	movs	r1, #60	@ 0x3c
 800185e:	4834      	ldr	r0, [pc, #208]	@ (8001930 <MX_GPIO_Init+0x1a0>)
 8001860:	f01b f970 	bl	801cb44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001864:	2200      	movs	r2, #0
 8001866:	f24c 41ff 	movw	r1, #50431	@ 0xc4ff
 800186a:	4832      	ldr	r0, [pc, #200]	@ (8001934 <MX_GPIO_Init+0x1a4>)
 800186c:	f01b f96a 	bl	801cb44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin|HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001876:	4830      	ldr	r0, [pc, #192]	@ (8001938 <MX_GPIO_Init+0x1a8>)
 8001878:	f01b f964 	bl	801cb44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ISOLATE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin;
 800187c:	233c      	movs	r3, #60	@ 0x3c
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	4827      	ldr	r0, [pc, #156]	@ (8001930 <MX_GPIO_Init+0x1a0>)
 8001894:	f01a ffa6 	bl	801c7e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001898:	f24c 43ff 	movw	r3, #50431	@ 0xc4ff
 800189c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	4820      	ldr	r0, [pc, #128]	@ (8001934 <MX_GPIO_Init+0x1a4>)
 80018b2:	f01a ff97 	bl	801c7e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 80018b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	481a      	ldr	r0, [pc, #104]	@ (8001934 <MX_GPIO_Init+0x1a4>)
 80018cc:	f01a ff8a 	bl	801c7e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin|HS_ADC_RESET_Pin;
 80018d0:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	4813      	ldr	r0, [pc, #76]	@ (8001938 <MX_GPIO_Init+0x1a8>)
 80018ea:	f01a ff7b 	bl	801c7e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 80018ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	480d      	ldr	r0, [pc, #52]	@ (8001938 <MX_GPIO_Init+0x1a8>)
 8001904:	f01a ff6e 	bl	801c7e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin|EFUSE_PGOOD_Pin;
 8001908:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4619      	mov	r1, r3
 800191c:	4807      	ldr	r0, [pc, #28]	@ (800193c <MX_GPIO_Init+0x1ac>)
 800191e:	f01a ff61 	bl	801c7e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001922:	bf00      	nop
 8001924:	3730      	adds	r7, #48	@ 0x30
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	58024400 	.word	0x58024400
 8001930:	58021000 	.word	0x58021000
 8001934:	58020c00 	.word	0x58020c00
 8001938:	58020000 	.word	0x58020000
 800193c:	58020400 	.word	0x58020400

08001940 <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <vHeapInit+0x28>)
 8001948:	463c      	mov	r4, r7
 800194a:	461d      	mov	r5, r3
 800194c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800194e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001950:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 8001958:	463b      	mov	r3, r7
 800195a:	4618      	mov	r0, r3
 800195c:	f005 f90a 	bl	8006b74 <vPortDefineHeapRegions>
}
 8001960:	bf00      	nop
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bdb0      	pop	{r4, r5, r7, pc}
 8001968:	080247f8 	.word	0x080247f8

0800196c <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
	return 0U;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 800198a:	f004 fe59 	bl	8006640 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 800198e:	e000      	b.n	8001992 <vAssertCalled+0x16>
		{
			__NOP();
 8001990:	bf00      	nop
		while( ul == 0 )
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0fb      	beq.n	8001990 <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8001998:	f004 fe7e 	bl	8006698 <vPortExitCritical>
}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 80019a8:	f240 511a 	movw	r1, #1306	@ 0x51a
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <vApplicationMallocFailedHook+0x14>)
 80019ae:	f7ff ffe5 	bl	800197c <vAssertCalled>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	08024818 	.word	0x08024818

080019bc <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	461a      	mov	r2, r3
 80019c8:	460b      	mov	r3, r1
 80019ca:	817b      	strh	r3, [r7, #10]
 80019cc:	4613      	mov	r3, r2
 80019ce:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f89b 	bl	8001b10 <xApplicationGetRandomNumber>

	return ulReturn;
 80019da:	697b      	ldr	r3, [r7, #20]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d147      	bne.n	8001a84 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 80019f4:	4b25      	ldr	r3, [pc, #148]	@ (8001a8c <vApplicationIPNetworkEventHook+0xa8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 80019fc:	4b23      	ldr	r3, [pc, #140]	@ (8001a8c <vApplicationIPNetworkEventHook+0xa8>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 8001a02:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <vApplicationIPNetworkEventHook+0xac>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 8001a08:	f107 0318 	add.w	r3, r7, #24
 8001a0c:	f107 021c 	add.w	r2, r7, #28
 8001a10:	f107 0120 	add.w	r1, r7, #32
 8001a14:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001a18:	f008 f85a 	bl	8009ad0 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	f107 0208 	add.w	r2, r7, #8
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00d fe57 	bl	800f6d8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4818      	ldr	r0, [pc, #96]	@ (8001a94 <vApplicationIPNetworkEventHook+0xb0>)
 8001a32:	f020 fe07 	bl	8022644 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	f107 0208 	add.w	r2, r7, #8
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f00d fe4a 	bl	800f6d8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4813      	ldr	r0, [pc, #76]	@ (8001a98 <vApplicationIPNetworkEventHook+0xb4>)
 8001a4c:	f020 fdfa 	bl	8022644 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f107 0208 	add.w	r2, r7, #8
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00d fe3d 	bl	800f6d8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	4619      	mov	r1, r3
 8001a64:	480d      	ldr	r0, [pc, #52]	@ (8001a9c <vApplicationIPNetworkEventHook+0xb8>)
 8001a66:	f020 fded 	bl	8022644 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f107 0208 	add.w	r2, r7, #8
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00d fe30 	bl	800f6d8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4808      	ldr	r0, [pc, #32]	@ (8001aa0 <vApplicationIPNetworkEventHook+0xbc>)
 8001a80:	f020 fde0 	bl	8022644 <lUDPLoggingPrintf>
	}
}
 8001a84:	bf00      	nop
 8001a86:	3728      	adds	r7, #40	@ 0x28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000d28 	.word	0x20000d28
 8001a90:	20000d2c 	.word	0x20000d2c
 8001a94:	0802482c 	.word	0x0802482c
 8001a98:	0802483c 	.word	0x0802483c
 8001a9c:	08024850 	.word	0x08024850
 8001aa0:	08024868 	.word	0x08024868

08001aa4 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8001ab0:	f000 f810 	bl	8001ad4 <pcApplicationHostnameHook>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f021 ff9f 	bl	80239fc <strcasecmp>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 8001ad8:	4b02      	ldr	r3, [pc, #8]	@ (8001ae4 <pcApplicationHostnameHook+0x10>)
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	08024880 	.word	0x08024880

08001ae8 <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 8001af8:	88bb      	ldrh	r3, [r7, #4]
 8001afa:	4619      	mov	r1, r3
 8001afc:	4803      	ldr	r0, [pc, #12]	@ (8001b0c <vApplicationPingReplyHook+0x24>)
 8001afe:	f020 fda1 	bl	8022644 <lUDPLoggingPrintf>
	}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	08024888 	.word	0x08024888

08001b10 <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 8001b18:	f021 fe02 	bl	8023720 <rand>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8001b3c:	4a01      	ldr	r2, [pc, #4]	@ (8001b44 <prvGetRegistersFromStack+0x14>)
 8001b3e:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <prvGetRegistersFromStack+0x10>
 8001b44:	20000d44 	.word	0x20000d44

08001b48 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	__asm volatile
 8001b4c:	f01e 0f04 	tst.w	lr, #4
 8001b50:	bf0c      	ite	eq
 8001b52:	f3ef 8008 	mrseq	r0, MSP
 8001b56:	f3ef 8009 	mrsne	r0, PSP
 8001b5a:	6981      	ldr	r1, [r0, #24]
 8001b5c:	f7ff ffe8 	bl	8001b30 <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001b74:	200a      	movs	r0, #10
 8001b76:	f002 fe2d 	bl	80047d4 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 8001b7a:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <prvServerWorkTask+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f8      	beq.n	8001b74 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 8001b82:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <prvServerWorkTask+0x24>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 8001b88:	f020 fd78 	bl	802267c <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 8001b8c:	e7f2      	b.n	8001b74 <prvServerWorkTask+0x8>
 8001b8e:	bf00      	nop
 8001b90:	20000d2c 	.word	0x20000d2c

08001b94 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b098      	sub	sp, #96	@ 0x60
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 8001b9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba6:	2218      	movs	r2, #24
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f021 f873 	bl	8022c96 <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 8001bb0:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001bca:	2303      	movs	r3, #3
 8001bcc:	061a      	lsls	r2, r3, #24
 8001bce:	2301      	movs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	23a8      	movs	r3, #168	@ 0xa8
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	22c0      	movs	r2, #192	@ 0xc0
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001be0:	2302      	movs	r3, #2
 8001be2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001be6:	2206      	movs	r2, #6
 8001be8:	2101      	movs	r1, #1
 8001bea:	2002      	movs	r0, #2
 8001bec:	f00c fc68 	bl	800e4c0 <FreeRTOS_socket>
 8001bf0:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f021 f84b 	bl	8022c96 <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001c00:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001c04:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001c06:	230c      	movs	r3, #12
 8001c08:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001c0a:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001c0e:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001c10:	230c      	movs	r3, #12
 8001c12:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001c14:	2304      	movs	r3, #4
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	4b48      	ldr	r3, [pc, #288]	@ (8001d3c <vADCTCPTask+0x1a8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c20:	f00d fc08 	bl	800f434 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001c24:	2304      	movs	r3, #4
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4b44      	ldr	r3, [pc, #272]	@ (8001d3c <vADCTCPTask+0x1a8>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c30:	f00d fc00 	bl	800f434 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	2210      	movs	r2, #16
 8001c3a:	9200      	str	r2, [sp, #0]
 8001c3c:	220d      	movs	r2, #13
 8001c3e:	2100      	movs	r1, #0
 8001c40:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c42:	f00d fbf7 	bl	800f434 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d104      	bne.n	8001c58 <vADCTCPTask+0xc4>
 8001c4e:	f240 6142 	movw	r1, #1602	@ 0x642
 8001c52:	483b      	ldr	r0, [pc, #236]	@ (8001d40 <vADCTCPTask+0x1ac>)
 8001c54:	f7ff fe92 	bl	800197c <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	9200      	str	r2, [sp, #0]
 8001c62:	f04f 32ff 	mov.w	r2, #4294967295
 8001c66:	2100      	movs	r1, #0
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f003 ff3d 	bl	8005ae8 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 8001c78:	4b32      	ldr	r3, [pc, #200]	@ (8001d44 <vADCTCPTask+0x1b0>)
 8001c7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c7c:	e001      	b.n	8001c82 <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 8001c7e:	4b32      	ldr	r3, [pc, #200]	@ (8001d48 <vADCTCPTask+0x1b4>)
 8001c80:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8e:	2218      	movs	r2, #24
 8001c90:	4619      	mov	r1, r3
 8001c92:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c94:	f00d ff6c 	bl	800fb70 <FreeRTOS_connect>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d139      	bne.n	8001d12 <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001c9e:	e030      	b.n	8001d02 <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	4619      	mov	r1, r3
 8001cae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cb0:	f00e fa65 	bl	801017e <FreeRTOS_get_tx_head>
 8001cb4:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d027      	beq.n	8001d0c <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d902      	bls.n	8001cce <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ccc:	e003      	b.n	8001cd6 <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001cda:	4413      	add	r3, r2
 8001cdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001ce2:	f020 fecb 	bl	8022a7c <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001ce6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cee:	f00e fb51 	bl	8010394 <FreeRTOS_send>
 8001cf2:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001cf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db0a      	blt.n	8001d10 <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001cfa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cfe:	4413      	add	r3, r2
 8001d00:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d8ca      	bhi.n	8001ca0 <vADCTCPTask+0x10c>
 8001d0a:	e002      	b.n	8001d12 <vADCTCPTask+0x17e>
                        break;
 8001d0c:	bf00      	nop
 8001d0e:	e000      	b.n	8001d12 <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001d10:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001d12:	2102      	movs	r1, #2
 8001d14:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d16:	f00e fbec 	bl	80104f2 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001d1a:	e002      	b.n	8001d22 <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f002 fd59 	bl	80047d4 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001d22:	2300      	movs	r3, #0
 8001d24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001d28:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d2a:	f00e f993 	bl	8010054 <FreeRTOS_recv>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	daf3      	bge.n	8001d1c <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001d34:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d36:	f00c ff87 	bl	800ec48 <FreeRTOS_closesocket>
    for(;;) {
 8001d3a:	e754      	b.n	8001be6 <vADCTCPTask+0x52>
 8001d3c:	08027cfc 	.word	0x08027cfc
 8001d40:	08024818 	.word	0x08024818
 8001d44:	30010004 	.word	0x30010004
 8001d48:	30000004 	.word	0x30000004

08001d4c <vAuxADCTCPTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

static void vAuxADCTCPTask(void *pvParameters) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b098      	sub	sp, #96	@ 0x60
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usAuxADCDataMock0);
 8001d54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d58:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d5e:	2218      	movs	r2, #24
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f020 ff97 	bl	8022c96 <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usAuxADCPort);
 8001d68:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001d82:	2303      	movs	r3, #3
 8001d84:	061a      	lsls	r2, r3, #24
 8001d86:	2301      	movs	r3, #1
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	23a8      	movs	r3, #168	@ 0xa8
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	4313      	orrs	r3, r2
 8001d92:	22c0      	movs	r2, #192	@ 0xc0
 8001d94:	4313      	orrs	r3, r2
 8001d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001d9e:	2206      	movs	r2, #6
 8001da0:	2101      	movs	r1, #1
 8001da2:	2002      	movs	r0, #2
 8001da4:	f00c fb8c 	bl	800e4c0 <FreeRTOS_socket>
 8001da8:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	2210      	movs	r2, #16
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f020 ff6f 	bl	8022c96 <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001db8:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001dbc:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001dbe:	230c      	movs	r3, #12
 8001dc0:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001dc2:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001dc6:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001dc8:	230c      	movs	r3, #12
 8001dca:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001dcc:	2304      	movs	r3, #4
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	4b48      	ldr	r3, [pc, #288]	@ (8001ef4 <vAuxADCTCPTask+0x1a8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001dd8:	f00d fb2c 	bl	800f434 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001ddc:	2304      	movs	r3, #4
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	4b44      	ldr	r3, [pc, #272]	@ (8001ef4 <vAuxADCTCPTask+0x1a8>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	2100      	movs	r1, #0
 8001de6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001de8:	f00d fb24 	bl	800f434 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	2210      	movs	r2, #16
 8001df2:	9200      	str	r2, [sp, #0]
 8001df4:	220d      	movs	r2, #13
 8001df6:	2100      	movs	r1, #0
 8001df8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001dfa:	f00d fb1b 	bl	800f434 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d104      	bne.n	8001e10 <vAuxADCTCPTask+0xc4>
 8001e06:	f240 61cc 	movw	r1, #1740	@ 0x6cc
 8001e0a:	483b      	ldr	r0, [pc, #236]	@ (8001ef8 <vAuxADCTCPTask+0x1ac>)
 8001e0c:	f7ff fdb6 	bl	800197c <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001e10:	f107 0320 	add.w	r3, r7, #32
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	9200      	str	r2, [sp, #0]
 8001e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2000      	movs	r0, #0
 8001e22:	f003 fe61 	bl	8005ae8 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <vAuxADCTCPTask+0xea>
	    pcBufferToTransmit = usAuxADCDataMock1;
 8001e30:	4b32      	ldr	r3, [pc, #200]	@ (8001efc <vAuxADCTCPTask+0x1b0>)
 8001e32:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e34:	e001      	b.n	8001e3a <vAuxADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usAuxADCDataMock0;
 8001e36:	4b32      	ldr	r3, [pc, #200]	@ (8001f00 <vAuxADCTCPTask+0x1b4>)
 8001e38:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
        xAlreadyTransmitted = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e46:	2218      	movs	r2, #24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e4c:	f00d fe90 	bl	800fb70 <FreeRTOS_connect>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d139      	bne.n	8001eca <vAuxADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001e56:	e030      	b.n	8001eba <vAuxADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4619      	mov	r1, r3
 8001e66:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e68:	f00e f989 	bl	801017e <FreeRTOS_get_tx_head>
 8001e6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d027      	beq.n	8001ec4 <vAuxADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d902      	bls.n	8001e86 <vAuxADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e84:	e003      	b.n	8001e8e <vAuxADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e92:	4413      	add	r3, r2
 8001e94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e96:	4619      	mov	r1, r3
 8001e98:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e9a:	f020 fdef 	bl	8022a7c <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001e9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ea6:	f00e fa75 	bl	8010394 <FreeRTOS_send>
 8001eaa:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0a      	blt.n	8001ec8 <vAuxADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001eb2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eb6:	4413      	add	r3, r2
 8001eb8:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d8ca      	bhi.n	8001e58 <vAuxADCTCPTask+0x10c>
 8001ec2:	e002      	b.n	8001eca <vAuxADCTCPTask+0x17e>
                        break;
 8001ec4:	bf00      	nop
 8001ec6:	e000      	b.n	8001eca <vAuxADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001ec8:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001eca:	2102      	movs	r1, #2
 8001ecc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ece:	f00e fb10 	bl	80104f2 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001ed2:	e002      	b.n	8001eda <vAuxADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f002 fc7d 	bl	80047d4 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001eda:	2300      	movs	r3, #0
 8001edc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ede:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ee0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ee2:	f00e f8b7 	bl	8010054 <FreeRTOS_recv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	daf3      	bge.n	8001ed4 <vAuxADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001eec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001eee:	f00c feab 	bl	800ec48 <FreeRTOS_closesocket>
    for(;;) {
 8001ef2:	e754      	b.n	8001d9e <vAuxADCTCPTask+0x52>
 8001ef4:	08027d00 	.word	0x08027d00
 8001ef8:	08024818 	.word	0x08024818
 8001efc:	30028004 	.word	0x30028004
 8001f00:	30020004 	.word	0x30020004

08001f04 <vTCADCTCPTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

static void vTCADCTCPTask(void *pvParameters) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b098      	sub	sp, #96	@ 0x60
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usTCADCData0);
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f14:	2218      	movs	r2, #24
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f020 febc 	bl	8022c96 <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usTCADCPort);
 8001f1e:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	b21a      	sxth	r2, r3
 8001f26:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001f38:	2303      	movs	r3, #3
 8001f3a:	061a      	lsls	r2, r3, #24
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	041b      	lsls	r3, r3, #16
 8001f40:	431a      	orrs	r2, r3
 8001f42:	23a8      	movs	r3, #168	@ 0xa8
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	4313      	orrs	r3, r2
 8001f48:	22c0      	movs	r2, #192	@ 0xc0
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001f54:	2206      	movs	r2, #6
 8001f56:	2101      	movs	r1, #1
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f00c fab1 	bl	800e4c0 <FreeRTOS_socket>
 8001f5e:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	2210      	movs	r2, #16
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f020 fe94 	bl	8022c96 <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001f6e:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001f72:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001f74:	230c      	movs	r3, #12
 8001f76:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001f78:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001f7c:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001f7e:	230c      	movs	r3, #12
 8001f80:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001f82:	2304      	movs	r3, #4
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4b49      	ldr	r3, [pc, #292]	@ (80020ac <vTCADCTCPTask+0x1a8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f8e:	f00d fa51 	bl	800f434 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001f92:	2304      	movs	r3, #4
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	4b45      	ldr	r3, [pc, #276]	@ (80020ac <vTCADCTCPTask+0x1a8>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f9e:	f00d fa49 	bl	800f434 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	9200      	str	r2, [sp, #0]
 8001faa:	220d      	movs	r2, #13
 8001fac:	2100      	movs	r1, #0
 8001fae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001fb0:	f00d fa40 	bl	800f434 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fba:	d104      	bne.n	8001fc6 <vTCADCTCPTask+0xc2>
 8001fbc:	f240 7156 	movw	r1, #1878	@ 0x756
 8001fc0:	483b      	ldr	r0, [pc, #236]	@ (80020b0 <vTCADCTCPTask+0x1ac>)
 8001fc2:	f7ff fcdb 	bl	800197c <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	f04f 32ff 	mov.w	r2, #4294967295
 8001fce:	9200      	str	r2, [sp, #0]
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f003 fd86 	bl	8005ae8 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <vTCADCTCPTask+0xe8>
	    pcBufferToTransmit = usTCADCData1;
 8001fe6:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <vTCADCTCPTask+0x1b0>)
 8001fe8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fea:	e001      	b.n	8001ff0 <vTCADCTCPTask+0xec>
	} else {
	    pcBufferToTransmit = usTCADCData0;
 8001fec:	4b32      	ldr	r3, [pc, #200]	@ (80020b8 <vTCADCTCPTask+0x1b4>)
 8001fee:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
        xAlreadyTransmitted = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffc:	2218      	movs	r2, #24
 8001ffe:	4619      	mov	r1, r3
 8002000:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002002:	f00d fdb5 	bl	800fb70 <FreeRTOS_connect>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d139      	bne.n	8002080 <vTCADCTCPTask+0x17c>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 800200c:	e030      	b.n	8002070 <vTCADCTCPTask+0x16c>
                {
                    BaseType_t xAvlSpace = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	4619      	mov	r1, r3
 800201c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800201e:	f00e f8ae 	bl	801017e <FreeRTOS_get_tx_head>
 8002022:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8002024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d027      	beq.n	800207a <vTCADCTCPTask+0x176>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 800202a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4293      	cmp	r3, r2
 8002034:	d902      	bls.n	800203c <vTCADCTCPTask+0x138>
                        {
                            xBytesToSend = xAvlSpace;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800203a:	e003      	b.n	8002044 <vTCADCTCPTask+0x140>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 800203c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8002044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002046:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002048:	4413      	add	r3, r2
 800204a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800204c:	4619      	mov	r1, r3
 800204e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002050:	f020 fd14 	bl	8022a7c <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8002054:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002056:	2300      	movs	r3, #0
 8002058:	2100      	movs	r1, #0
 800205a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800205c:	f00e f99a 	bl	8010394 <FreeRTOS_send>
 8002060:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8002062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002064:	2b00      	cmp	r3, #0
 8002066:	db0a      	blt.n	800207e <vTCADCTCPTask+0x17a>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8002068:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800206a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800206c:	4413      	add	r3, r2
 800206e:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8002070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002074:	429a      	cmp	r2, r3
 8002076:	d8ca      	bhi.n	800200e <vTCADCTCPTask+0x10a>
 8002078:	e002      	b.n	8002080 <vTCADCTCPTask+0x17c>
                        break;
 800207a:	bf00      	nop
 800207c:	e000      	b.n	8002080 <vTCADCTCPTask+0x17c>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 800207e:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8002080:	2102      	movs	r1, #2
 8002082:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002084:	f00e fa35 	bl	80104f2 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8002088:	e002      	b.n	8002090 <vTCADCTCPTask+0x18c>
            vTaskDelay(pdMS_TO_TICKS(1));
 800208a:	2001      	movs	r0, #1
 800208c:	f002 fba2 	bl	80047d4 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8002090:	2300      	movs	r3, #0
 8002092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002094:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002096:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002098:	f00d ffdc 	bl	8010054 <FreeRTOS_recv>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	daf3      	bge.n	800208a <vTCADCTCPTask+0x186>
        }
        FreeRTOS_closesocket(xSocket);
 80020a2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80020a4:	f00c fdd0 	bl	800ec48 <FreeRTOS_closesocket>
    for(;;) {
 80020a8:	e754      	b.n	8001f54 <vTCADCTCPTask+0x50>
 80020aa:	bf00      	nop
 80020ac:	08027d04 	.word	0x08027d04
 80020b0:	08024818 	.word	0x08024818
 80020b4:	30030088 	.word	0x30030088
 80020b8:	30030008 	.word	0x30030008

080020bc <vCommandServerTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

void vCommandServerTask( void *pvParameters )
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b094      	sub	sp, #80	@ 0x50
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	6078      	str	r0, [r7, #4]
  struct freertos_sockaddr xClient, xBindAddress;
  Socket_t xListeningSocket, xConnectedSocket;
  socklen_t xSize = sizeof( xClient );
 80020c4:	2318      	movs	r3, #24
 80020c6:	60bb      	str	r3, [r7, #8]
  static const TickType_t xReceiveTimeOut = pdMS_TO_TICKS( 500 );
  const BaseType_t xBacklog = 20;
 80020c8:	2314      	movs	r3, #20
 80020ca:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Attempt to open the socket. */
      xListeningSocket = FreeRTOS_socket( FREERTOS_AF_INET4, /* Or FREERTOS_AF_INET6 for IPv6. */
 80020cc:	2206      	movs	r2, #6
 80020ce:	2101      	movs	r1, #1
 80020d0:	2002      	movs	r0, #2
 80020d2:	f00c f9f5 	bl	800e4c0 <FreeRTOS_socket>
 80020d6:	6438      	str	r0, [r7, #64]	@ 0x40
					  FREERTOS_SOCK_STREAM,  /* SOCK_STREAM for TCP. */
					  FREERTOS_IPPROTO_TCP );

      /* Check the socket was created. */
      configASSERT( xListeningSocket != FREERTOS_INVALID_SOCKET );
 80020d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020de:	d104      	bne.n	80020ea <vCommandServerTask+0x2e>
 80020e0:	f240 71c3 	movw	r1, #1987	@ 0x7c3
 80020e4:	4825      	ldr	r0, [pc, #148]	@ (800217c <vCommandServerTask+0xc0>)
 80020e6:	f7ff fc49 	bl	800197c <vAssertCalled>
	 be used with FreeRTOS_setsockopt() to change the sliding window size from
	 its default then do it here! (see the FreeRTOS_setsockopt()
	 documentation. */

      /* Set a time out so accept() will just wait for a connection. */
      FreeRTOS_setsockopt( xListeningSocket,
 80020ea:	2304      	movs	r3, #4
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	4b24      	ldr	r3, [pc, #144]	@ (8002180 <vCommandServerTask+0xc4>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80020f6:	f00d f99d 	bl	800f434 <FreeRTOS_setsockopt>
			   FREERTOS_SO_RCVTIMEO,
			   &xReceiveTimeOut,
			   sizeof( xReceiveTimeOut ) );

      /* Set the listening port to 10000. */
      memset( &xBindAddress, 0, sizeof(xBindAddress) );
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	2218      	movs	r2, #24
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f020 fdc7 	bl	8022c96 <memset>
      xBindAddress.sin_port = usCommandPort;
 8002108:	f241 3389 	movw	r3, #5001	@ 0x1389
 800210c:	81fb      	strh	r3, [r7, #14]
      xBindAddress.sin_port = FreeRTOS_htons( xBindAddress.sin_port );
 800210e:	89fb      	ldrh	r3, [r7, #14]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	b21a      	sxth	r2, r3
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	b29b      	uxth	r3, r3
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	b21b      	sxth	r3, r3
 8002120:	b29b      	uxth	r3, r3
 8002122:	81fb      	strh	r3, [r7, #14]
      xBindAddress.sin_family = FREERTOS_AF_INET4; /* FREERTOS_AF_INET6 to be used for IPv6 */
 8002124:	2302      	movs	r3, #2
 8002126:	737b      	strb	r3, [r7, #13]

      /* Bind the socket to the port that the client RTOS task will send to. */
      FreeRTOS_bind( xListeningSocket, &xBindAddress, sizeof( xBindAddress ) );
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	2218      	movs	r2, #24
 800212e:	4619      	mov	r1, r3
 8002130:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002132:	f00c fbb5 	bl	800e8a0 <FreeRTOS_bind>

      /* Set the socket into a listening state so it can accept connections.
	 The maximum number of simultaneous connections is limited to 20. */
      FreeRTOS_listen( xListeningSocket, xBacklog );
 8002136:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002138:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800213a:	f00e f969 	bl	8010410 <FreeRTOS_listen>

      for( ;; )
      {
	  /* Wait for incoming connections. */
	  xConnectedSocket = FreeRTOS_accept( xListeningSocket, &xClient, &xSize );
 800213e:	f107 0208 	add.w	r2, r7, #8
 8002142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002146:	4619      	mov	r1, r3
 8002148:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800214a:	f00d fe33 	bl	800fdb4 <FreeRTOS_accept>
 800214e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  configASSERT( xConnectedSocket != FREERTOS_INVALID_SOCKET );
 8002150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002156:	d104      	bne.n	8002162 <vCommandServerTask+0xa6>
 8002158:	f240 71e6 	movw	r1, #2022	@ 0x7e6
 800215c:	4807      	ldr	r0, [pc, #28]	@ (800217c <vCommandServerTask+0xc0>)
 800215e:	f7ff fc0d 	bl	800197c <vAssertCalled>

	  /* Spawn a RTOS task to handle the connection. */
	  xTaskCreate( prvCommandHandlerTask,
 8002162:	2300      	movs	r3, #0
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	2300      	movs	r3, #0
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800216c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8002170:	4904      	ldr	r1, [pc, #16]	@ (8002184 <vCommandServerTask+0xc8>)
 8002172:	4805      	ldr	r0, [pc, #20]	@ (8002188 <vCommandServerTask+0xcc>)
 8002174:	f002 f950 	bl	8004418 <xTaskCreate>
	  xConnectedSocket = FreeRTOS_accept( xListeningSocket, &xClient, &xSize );
 8002178:	e7e1      	b.n	800213e <vCommandServerTask+0x82>
 800217a:	bf00      	nop
 800217c:	08024818 	.word	0x08024818
 8002180:	08027d08 	.word	0x08027d08
 8002184:	080248a0 	.word	0x080248a0
 8002188:	0800218d 	.word	0x0800218d

0800218c <prvCommandHandlerTask>:
      }
}


static void prvCommandHandlerTask( void *pvParameters )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  static char cRxedData[ CMD_BUFFER_SIZE ];
  BaseType_t lBytesReceived;

      /* It is assumed the socket has already been created and connected before
   being passed into this RTOS task using the RTOS task's parameter. */
      xSocket = ( Socket_t ) pvParameters;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	60fb      	str	r3, [r7, #12]

      for( ;; )
      {
	  /* Receive another block of data into the cRxedData buffer. */
	  lBytesReceived = FreeRTOS_recv( xSocket, &cRxedData, CMD_BUFFER_SIZE, 0 );
 8002198:	2300      	movs	r3, #0
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	491c      	ldr	r1, [pc, #112]	@ (8002210 <prvCommandHandlerTask+0x84>)
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f00d ff58 	bl	8010054 <FreeRTOS_recv>
 80021a4:	60b8      	str	r0, [r7, #8]

	  if( lBytesReceived > 0 )
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	dd11      	ble.n	80021d0 <prvCommandHandlerTask+0x44>
	  {
	      /* Data was received, process it here. */
	      //prvProcessData( cRxedData, lBytesReceived );
	      cRxedData[lBytesReceived] = 0; //ensure null terminated string
 80021ac:	4a18      	ldr	r2, [pc, #96]	@ (8002210 <prvCommandHandlerTask+0x84>)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4413      	add	r3, r2
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
	      if (strncmp(cRxedData, "test", 4) == 0){
 80021b6:	2204      	movs	r2, #4
 80021b8:	4916      	ldr	r1, [pc, #88]	@ (8002214 <prvCommandHandlerTask+0x88>)
 80021ba:	4815      	ldr	r0, [pc, #84]	@ (8002210 <prvCommandHandlerTask+0x84>)
 80021bc:	f021 fc38 	bl	8023a30 <strncmp>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1e8      	bne.n	8002198 <prvCommandHandlerTask+0xc>
		  ulSevenSegD1 = 0xFF00FF;
 80021c6:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <prvCommandHandlerTask+0x8c>)
 80021c8:	f04f 12ff 	mov.w	r2, #16711935	@ 0xff00ff
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e7e3      	b.n	8002198 <prvCommandHandlerTask+0xc>
	      }
	  }
	  else if( lBytesReceived == 0 )
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0e0      	beq.n	8002198 <prvCommandHandlerTask+0xc>
	  }
	  else
	  {
	      /* Error (maybe the connected socket already shut down the socket?).
		 Attempt graceful shutdown. */
	      FreeRTOS_shutdown( xSocket, FREERTOS_SHUT_RDWR );
 80021d6:	2102      	movs	r1, #2
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f00e f98a 	bl	80104f2 <FreeRTOS_shutdown>
	      break;
 80021de:	bf00      	nop

      /* The RTOS task will get here if an error is received on a read. Ensure the
   socket has shut down (indicated by FreeRTOS\_recv() returning a -pdFREERTOS\_ERRNO\_EINVAL
   error before closing the socket). */

      while( FreeRTOS_recv( xSocket, &usZero, 1, 0 ) >= 0 )
 80021e0:	e002      	b.n	80021e8 <prvCommandHandlerTask+0x5c>
      {
	  /* Wait for shutdown to complete. If a receive block time is used then
	     this delay will not be necessary as FreeRTOS\_recv() will place the RTOS task
	     into the Blocked state anyway. */
	  vTaskDelay( pdTICKS_TO_MS( 1 ) );
 80021e2:	2001      	movs	r0, #1
 80021e4:	f002 faf6 	bl	80047d4 <vTaskDelay>
      while( FreeRTOS_recv( xSocket, &usZero, 1, 0 ) >= 0 )
 80021e8:	2300      	movs	r3, #0
 80021ea:	2201      	movs	r2, #1
 80021ec:	490b      	ldr	r1, [pc, #44]	@ (800221c <prvCommandHandlerTask+0x90>)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f00d ff30 	bl	8010054 <FreeRTOS_recv>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	daf3      	bge.n	80021e2 <prvCommandHandlerTask+0x56>
	  /* Note - real applications should implement a timeout here, not just
	     loop forever. */
      }

      /* Shutdown is complete and the socket can be safely closed. */
      FreeRTOS_closesocket( xSocket );
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f00c fd24 	bl	800ec48 <FreeRTOS_closesocket>

      /* Must not drop off the end of the RTOS task - delete the RTOS task. */
      vTaskDelete(NULL);
 8002200:	2000      	movs	r0, #0
 8002202:	f002 fa49 	bl	8004698 <vTaskDelete>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000d48 	.word	0x20000d48
 8002214:	080248b0 	.word	0x080248b0
 8002218:	30030108 	.word	0x30030108
 800221c:	30000000 	.word	0x30000000

08002220 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002226:	463b      	mov	r3, r7
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002232:	f018 fb57 	bl	801a8e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002236:	2301      	movs	r3, #1
 8002238:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800223a:	2300      	movs	r3, #0
 800223c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800223e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8002242:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002244:	2312      	movs	r3, #18
 8002246:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002248:	2300      	movs	r3, #0
 800224a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800224c:	2301      	movs	r3, #1
 800224e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002250:	2303      	movs	r3, #3
 8002252:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002258:	2301      	movs	r3, #1
 800225a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002264:	463b      	mov	r3, r7
 8002266:	4618      	mov	r0, r3
 8002268:	f018 fb74 	bl	801a954 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800226c:	2301      	movs	r3, #1
 800226e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002270:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002274:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002276:	463b      	mov	r3, r7
 8002278:	4618      	mov	r0, r3
 800227a:	f018 fb6b 	bl	801a954 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800227e:	2004      	movs	r0, #4
 8002280:	f018 fb48 	bl	801a914 <HAL_MPU_Enable>

}
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002290:	b672      	cpsid	i
}
 8002292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <Error_Handler+0x8>

08002298 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_MspInit+0x30>)
 80022a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022a4:	4a08      	ldr	r2, [pc, #32]	@ (80022c8 <HAL_MspInit+0x30>)
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_MspInit+0x30>)
 80022b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	58024400 	.word	0x58024400

080022cc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	@ 0x38
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a61      	ldr	r2, [pc, #388]	@ (8002470 <HAL_ETH_MspInit+0x1a4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	f040 80bb 	bne.w	8002466 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80022f0:	4b60      	ldr	r3, [pc, #384]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 80022f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022f6:	4a5f      	ldr	r2, [pc, #380]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 80022f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022fc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002300:	4b5c      	ldr	r3, [pc, #368]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 8002302:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002306:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800230a:	623b      	str	r3, [r7, #32]
 800230c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800230e:	4b59      	ldr	r3, [pc, #356]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 8002310:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002314:	4a57      	ldr	r2, [pc, #348]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800231e:	4b55      	ldr	r3, [pc, #340]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 8002320:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800232c:	4b51      	ldr	r3, [pc, #324]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 800232e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002332:	4a50      	ldr	r2, [pc, #320]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 8002334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002338:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800233c:	4b4d      	ldr	r3, [pc, #308]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 800233e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234a:	4b4a      	ldr	r3, [pc, #296]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 800234c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002350:	4a48      	ldr	r2, [pc, #288]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800235a:	4b46      	ldr	r3, [pc, #280]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 800235c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	4b42      	ldr	r3, [pc, #264]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 800236a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236e:	4a41      	ldr	r2, [pc, #260]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002378:	4b3e      	ldr	r3, [pc, #248]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238c:	4a39      	ldr	r2, [pc, #228]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002396:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <HAL_ETH_MspInit+0x1a8>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023a4:	2302      	movs	r3, #2
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023b4:	230b      	movs	r3, #11
 80023b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023bc:	4619      	mov	r1, r3
 80023be:	482e      	ldr	r0, [pc, #184]	@ (8002478 <HAL_ETH_MspInit+0x1ac>)
 80023c0:	f01a fa10 	bl	801c7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80023c4:	2306      	movs	r3, #6
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023d4:	230b      	movs	r3, #11
 80023d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023dc:	4619      	mov	r1, r3
 80023de:	4827      	ldr	r0, [pc, #156]	@ (800247c <HAL_ETH_MspInit+0x1b0>)
 80023e0:	f01a fa00 	bl	801c7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023f4:	230b      	movs	r3, #11
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023fc:	4619      	mov	r1, r3
 80023fe:	481f      	ldr	r0, [pc, #124]	@ (800247c <HAL_ETH_MspInit+0x1b0>)
 8002400:	f01a f9f0 	bl	801c7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002404:	2330      	movs	r3, #48	@ 0x30
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002414:	230b      	movs	r3, #11
 8002416:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800241c:	4619      	mov	r1, r3
 800241e:	4816      	ldr	r0, [pc, #88]	@ (8002478 <HAL_ETH_MspInit+0x1ac>)
 8002420:	f01a f9e0 	bl	801c7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002424:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002436:	230b      	movs	r3, #11
 8002438:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800243e:	4619      	mov	r1, r3
 8002440:	480f      	ldr	r0, [pc, #60]	@ (8002480 <HAL_ETH_MspInit+0x1b4>)
 8002442:	f01a f9cf 	bl	801c7e4 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2105      	movs	r1, #5
 800244a:	203d      	movs	r0, #61	@ 0x3d
 800244c:	f018 fa15 	bl	801a87a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8002450:	203d      	movs	r0, #61	@ 0x3d
 8002452:	f018 fa2c 	bl	801a8ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2105      	movs	r1, #5
 800245a:	203e      	movs	r0, #62	@ 0x3e
 800245c:	f018 fa0d 	bl	801a87a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8002460:	203e      	movs	r0, #62	@ 0x3e
 8002462:	f018 fa24 	bl	801a8ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8002466:	bf00      	nop
 8002468:	3738      	adds	r7, #56	@ 0x38
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40028000 	.word	0x40028000
 8002474:	58024400 	.word	0x58024400
 8002478:	58020800 	.word	0x58020800
 800247c:	58020000 	.word	0x58020000
 8002480:	58020400 	.word	0x58020400

08002484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b0ba      	sub	sp, #232	@ 0xe8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	22c0      	movs	r2, #192	@ 0xc0
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f020 fbf6 	bl	8022c96 <memset>
  if(hi2c->Instance==I2C4)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a27      	ldr	r2, [pc, #156]	@ (800254c <HAL_I2C_MspInit+0xc8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d146      	bne.n	8002542 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80024b4:	f04f 0210 	mov.w	r2, #16
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c6:	f107 0310 	add.w	r3, r7, #16
 80024ca:	4618      	mov	r0, r3
 80024cc:	f01b fca8 	bl	801de20 <HAL_RCCEx_PeriphCLKConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80024d6:	f7ff fed9 	bl	800228c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024da:	4b1d      	ldr	r3, [pc, #116]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 80024e2:	f043 0308 	orr.w	r3, r3, #8
 80024e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024ea:	4b19      	ldr	r3, [pc, #100]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80024f8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80024fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002500:	2312      	movs	r3, #18
 8002502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002512:	2304      	movs	r3, #4
 8002514:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002518:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800251c:	4619      	mov	r1, r3
 800251e:	480d      	ldr	r0, [pc, #52]	@ (8002554 <HAL_I2C_MspInit+0xd0>)
 8002520:	f01a f960 	bl	801c7e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002524:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 8002526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800252a:	4a09      	ldr	r2, [pc, #36]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 800252c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002530:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002534:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 8002536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800253a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8002542:	bf00      	nop
 8002544:	37e8      	adds	r7, #232	@ 0xe8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	58001c00 	.word	0x58001c00
 8002550:	58024400 	.word	0x58024400
 8002554:	58020c00 	.word	0x58020c00

08002558 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b090      	sub	sp, #64	@ 0x40
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a88      	ldr	r2, [pc, #544]	@ (8002798 <HAL_SPI_MspInit+0x240>)
 8002576:	4293      	cmp	r3, r2
 8002578:	f040 8083 	bne.w	8002682 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800257c:	4b87      	ldr	r3, [pc, #540]	@ (800279c <HAL_SPI_MspInit+0x244>)
 800257e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002582:	4a86      	ldr	r2, [pc, #536]	@ (800279c <HAL_SPI_MspInit+0x244>)
 8002584:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002588:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800258c:	4b83      	ldr	r3, [pc, #524]	@ (800279c <HAL_SPI_MspInit+0x244>)
 800258e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002592:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002596:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002598:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	4b80      	ldr	r3, [pc, #512]	@ (800279c <HAL_SPI_MspInit+0x244>)
 800259c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a0:	4a7e      	ldr	r2, [pc, #504]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025aa:	4b7c      	ldr	r3, [pc, #496]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80025ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b8:	4b78      	ldr	r3, [pc, #480]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80025ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025be:	4a77      	ldr	r2, [pc, #476]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025c8:	4b74      	ldr	r3, [pc, #464]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80025ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80025d6:	2370      	movs	r3, #112	@ 0x70
 80025d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025e6:	2305      	movs	r3, #5
 80025e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025ee:	4619      	mov	r1, r3
 80025f0:	486b      	ldr	r0, [pc, #428]	@ (80027a0 <HAL_SPI_MspInit+0x248>)
 80025f2:	f01a f8f7 	bl	801c7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025f6:	2320      	movs	r3, #32
 80025f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002606:	2305      	movs	r3, #5
 8002608:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800260e:	4619      	mov	r1, r3
 8002610:	4864      	ldr	r0, [pc, #400]	@ (80027a4 <HAL_SPI_MspInit+0x24c>)
 8002612:	f01a f8e7 	bl	801c7e4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002616:	4b64      	ldr	r3, [pc, #400]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 8002618:	4a64      	ldr	r2, [pc, #400]	@ (80027ac <HAL_SPI_MspInit+0x254>)
 800261a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800261c:	4b62      	ldr	r3, [pc, #392]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 800261e:	2225      	movs	r2, #37	@ 0x25
 8002620:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002622:	4b61      	ldr	r3, [pc, #388]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002628:	4b5f      	ldr	r3, [pc, #380]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800262e:	4b5e      	ldr	r3, [pc, #376]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 8002630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002634:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002636:	4b5c      	ldr	r3, [pc, #368]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 8002638:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800263c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800263e:	4b5a      	ldr	r3, [pc, #360]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 8002640:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002644:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002646:	4b58      	ldr	r3, [pc, #352]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 8002648:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800264c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800264e:	4b56      	ldr	r3, [pc, #344]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002654:	4b54      	ldr	r3, [pc, #336]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800265a:	4853      	ldr	r0, [pc, #332]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 800265c:	f018 f9ba 	bl	801a9d4 <HAL_DMA_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8002666:	f7ff fe11 	bl	800228c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4e      	ldr	r2, [pc, #312]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 800266e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002670:	4a4d      	ldr	r2, [pc, #308]	@ (80027a8 <HAL_SPI_MspInit+0x250>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	2023      	movs	r0, #35	@ 0x23
 800267c:	f018 f8fd 	bl	801a87a <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002680:	e126      	b.n	80028d0 <HAL_SPI_MspInit+0x378>
  else if(hspi->Instance==SPI2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a4a      	ldr	r2, [pc, #296]	@ (80027b0 <HAL_SPI_MspInit+0x258>)
 8002688:	4293      	cmp	r3, r2
 800268a:	f040 8097 	bne.w	80027bc <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800268e:	4b43      	ldr	r3, [pc, #268]	@ (800279c <HAL_SPI_MspInit+0x244>)
 8002690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002694:	4a41      	ldr	r2, [pc, #260]	@ (800279c <HAL_SPI_MspInit+0x244>)
 8002696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800269a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800269e:	4b3f      	ldr	r3, [pc, #252]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80026a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ac:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80026ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b2:	4a3a      	ldr	r2, [pc, #232]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026bc:	4b37      	ldr	r3, [pc, #220]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80026be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	4b34      	ldr	r3, [pc, #208]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80026cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026d0:	4a32      	ldr	r2, [pc, #200]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026da:	4b30      	ldr	r3, [pc, #192]	@ (800279c <HAL_SPI_MspInit+0x244>)
 80026dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80026e8:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80026ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026fa:	2305      	movs	r3, #5
 80026fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002702:	4619      	mov	r1, r3
 8002704:	4827      	ldr	r0, [pc, #156]	@ (80027a4 <HAL_SPI_MspInit+0x24c>)
 8002706:	f01a f86d 	bl	801c7e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800270a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800271c:	2305      	movs	r3, #5
 800271e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002724:	4619      	mov	r1, r3
 8002726:	481e      	ldr	r0, [pc, #120]	@ (80027a0 <HAL_SPI_MspInit+0x248>)
 8002728:	f01a f85c 	bl	801c7e4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 800272c:	4b21      	ldr	r3, [pc, #132]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 800272e:	4a22      	ldr	r2, [pc, #136]	@ (80027b8 <HAL_SPI_MspInit+0x260>)
 8002730:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002732:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 8002734:	2227      	movs	r2, #39	@ 0x27
 8002736:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002738:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800273e:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002744:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 8002746:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800274a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 800274e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002752:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002754:	4b17      	ldr	r3, [pc, #92]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 8002756:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800275a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800275c:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 800275e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002762:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002764:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 8002766:	2200      	movs	r2, #0
 8002768:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 800276c:	2200      	movs	r2, #0
 800276e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002770:	4810      	ldr	r0, [pc, #64]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 8002772:	f018 f92f 	bl	801a9d4 <HAL_DMA_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_SPI_MspInit+0x228>
      Error_Handler();
 800277c:	f7ff fd86 	bl	800228c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a0c      	ldr	r2, [pc, #48]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 8002784:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002786:	4a0b      	ldr	r2, [pc, #44]	@ (80027b4 <HAL_SPI_MspInit+0x25c>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	2100      	movs	r1, #0
 8002790:	2024      	movs	r0, #36	@ 0x24
 8002792:	f018 f872 	bl	801a87a <HAL_NVIC_SetPriority>
}
 8002796:	e09b      	b.n	80028d0 <HAL_SPI_MspInit+0x378>
 8002798:	40013000 	.word	0x40013000
 800279c:	58024400 	.word	0x58024400
 80027a0:	58020000 	.word	0x58020000
 80027a4:	58020400 	.word	0x58020400
 80027a8:	20000290 	.word	0x20000290
 80027ac:	40020010 	.word	0x40020010
 80027b0:	40003800 	.word	0x40003800
 80027b4:	20000308 	.word	0x20000308
 80027b8:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a45      	ldr	r2, [pc, #276]	@ (80028d8 <HAL_SPI_MspInit+0x380>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	f040 8084 	bne.w	80028d0 <HAL_SPI_MspInit+0x378>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027c8:	4b44      	ldr	r3, [pc, #272]	@ (80028dc <HAL_SPI_MspInit+0x384>)
 80027ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027ce:	4a43      	ldr	r2, [pc, #268]	@ (80028dc <HAL_SPI_MspInit+0x384>)
 80027d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027d8:	4b40      	ldr	r3, [pc, #256]	@ (80028dc <HAL_SPI_MspInit+0x384>)
 80027da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	4b3d      	ldr	r3, [pc, #244]	@ (80028dc <HAL_SPI_MspInit+0x384>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ec:	4a3b      	ldr	r2, [pc, #236]	@ (80028dc <HAL_SPI_MspInit+0x384>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027f6:	4b39      	ldr	r3, [pc, #228]	@ (80028dc <HAL_SPI_MspInit+0x384>)
 80027f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002804:	4b35      	ldr	r3, [pc, #212]	@ (80028dc <HAL_SPI_MspInit+0x384>)
 8002806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800280a:	4a34      	ldr	r2, [pc, #208]	@ (80028dc <HAL_SPI_MspInit+0x384>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002814:	4b31      	ldr	r3, [pc, #196]	@ (80028dc <HAL_SPI_MspInit+0x384>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002834:	2306      	movs	r3, #6
 8002836:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002838:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800283c:	4619      	mov	r1, r3
 800283e:	4828      	ldr	r0, [pc, #160]	@ (80028e0 <HAL_SPI_MspInit+0x388>)
 8002840:	f019 ffd0 	bl	801c7e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002844:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002852:	2300      	movs	r3, #0
 8002854:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002856:	2306      	movs	r3, #6
 8002858:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800285e:	4619      	mov	r1, r3
 8002860:	4820      	ldr	r0, [pc, #128]	@ (80028e4 <HAL_SPI_MspInit+0x38c>)
 8002862:	f019 ffbf 	bl	801c7e4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream7;
 8002866:	4b20      	ldr	r3, [pc, #128]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 8002868:	4a20      	ldr	r2, [pc, #128]	@ (80028ec <HAL_SPI_MspInit+0x394>)
 800286a:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800286c:	4b1e      	ldr	r3, [pc, #120]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 800286e:	223d      	movs	r2, #61	@ 0x3d
 8002870:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002872:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002878:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800287e:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 8002880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002884:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002886:	4b18      	ldr	r3, [pc, #96]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 8002888:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800288c:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800288e:	4b16      	ldr	r3, [pc, #88]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 8002890:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002894:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8002896:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 8002898:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800289c:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a4:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80028aa:	480f      	ldr	r0, [pc, #60]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 80028ac:	f018 f892 	bl	801a9d4 <HAL_DMA_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_SPI_MspInit+0x362>
      Error_Handler();
 80028b6:	f7ff fce9 	bl	800228c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 80028be:	67da      	str	r2, [r3, #124]	@ 0x7c
 80028c0:	4a09      	ldr	r2, [pc, #36]	@ (80028e8 <HAL_SPI_MspInit+0x390>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	2033      	movs	r0, #51	@ 0x33
 80028cc:	f017 ffd5 	bl	801a87a <HAL_NVIC_SetPriority>
}
 80028d0:	bf00      	nop
 80028d2:	3740      	adds	r7, #64	@ 0x40
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40003c00 	.word	0x40003c00
 80028dc:	58024400 	.word	0x58024400
 80028e0:	58020000 	.word	0x58020000
 80028e4:	58020800 	.word	0x58020800
 80028e8:	20000380 	.word	0x20000380
 80028ec:	400200b8 	.word	0x400200b8

080028f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a87      	ldr	r2, [pc, #540]	@ (8002b1c <HAL_TIM_Base_MspInit+0x22c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d13e      	bne.n	8002980 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002902:	4b87      	ldr	r3, [pc, #540]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 8002904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002908:	4a85      	ldr	r2, [pc, #532]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002912:	4b83      	ldr	r3, [pc, #524]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 8002914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 8002920:	4b80      	ldr	r3, [pc, #512]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 8002922:	4a81      	ldr	r2, [pc, #516]	@ (8002b28 <HAL_TIM_Base_MspInit+0x238>)
 8002924:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 8002926:	4b7f      	ldr	r3, [pc, #508]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 8002928:	220f      	movs	r2, #15
 800292a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800292c:	4b7d      	ldr	r3, [pc, #500]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 800292e:	2240      	movs	r2, #64	@ 0x40
 8002930:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002932:	4b7c      	ldr	r3, [pc, #496]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 8002934:	2200      	movs	r2, #0
 8002936:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8002938:	4b7a      	ldr	r3, [pc, #488]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800293e:	4b79      	ldr	r3, [pc, #484]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 8002940:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002944:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002946:	4b77      	ldr	r3, [pc, #476]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 8002948:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800294c:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800294e:	4b75      	ldr	r3, [pc, #468]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 8002950:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002954:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8002956:	4b73      	ldr	r3, [pc, #460]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 8002958:	2200      	movs	r2, #0
 800295a:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800295c:	4b71      	ldr	r3, [pc, #452]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 800295e:	2200      	movs	r2, #0
 8002960:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002962:	4870      	ldr	r0, [pc, #448]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 8002964:	f018 f836 	bl	801a9d4 <HAL_DMA_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800296e:	f7ff fc8d 	bl	800228c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a6b      	ldr	r2, [pc, #428]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 8002976:	621a      	str	r2, [r3, #32]
 8002978:	4a6a      	ldr	r2, [pc, #424]	@ (8002b24 <HAL_TIM_Base_MspInit+0x234>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800297e:	e129      	b.n	8002bd4 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002988:	d10f      	bne.n	80029aa <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800298a:	4b65      	ldr	r3, [pc, #404]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 800298c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002990:	4a63      	ldr	r2, [pc, #396]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800299a:	4b61      	ldr	r3, [pc, #388]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 800299c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	69bb      	ldr	r3, [r7, #24]
}
 80029a8:	e114      	b.n	8002bd4 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM3)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a5f      	ldr	r2, [pc, #380]	@ (8002b2c <HAL_TIM_Base_MspInit+0x23c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d13e      	bne.n	8002a32 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 80029b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029ba:	4a59      	ldr	r2, [pc, #356]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029c4:	4b56      	ldr	r3, [pc, #344]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 80029c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_up.Instance = DMA1_Stream3;
 80029d2:	4b57      	ldr	r3, [pc, #348]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 80029d4:	4a57      	ldr	r2, [pc, #348]	@ (8002b34 <HAL_TIM_Base_MspInit+0x244>)
 80029d6:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 80029d8:	4b55      	ldr	r3, [pc, #340]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 80029da:	221b      	movs	r2, #27
 80029dc:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029de:	4b54      	ldr	r3, [pc, #336]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 80029e0:	2240      	movs	r2, #64	@ 0x40
 80029e2:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e4:	4b52      	ldr	r3, [pc, #328]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 80029ea:	4b51      	ldr	r3, [pc, #324]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 80029f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029f6:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 80029fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029fe:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8002a00:	4b4b      	ldr	r3, [pc, #300]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 8002a02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a06:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 8002a08:	4b49      	ldr	r3, [pc, #292]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a0e:	4b48      	ldr	r3, [pc, #288]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8002a14:	4846      	ldr	r0, [pc, #280]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 8002a16:	f017 ffdd 	bl	801a9d4 <HAL_DMA_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8002a20:	f7ff fc34 	bl	800228c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a42      	ldr	r2, [pc, #264]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 8002a28:	621a      	str	r2, [r3, #32]
 8002a2a:	4a41      	ldr	r2, [pc, #260]	@ (8002b30 <HAL_TIM_Base_MspInit+0x240>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002a30:	e0d0      	b.n	8002bd4 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM4)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a40      	ldr	r2, [pc, #256]	@ (8002b38 <HAL_TIM_Base_MspInit+0x248>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	f040 8087 	bne.w	8002b4c <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a3e:	4b38      	ldr	r3, [pc, #224]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 8002a40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a44:	4a36      	ldr	r2, [pc, #216]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a4e:	4b34      	ldr	r3, [pc, #208]	@ (8002b20 <HAL_TIM_Base_MspInit+0x230>)
 8002a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Stream4;
 8002a5c:	4b37      	ldr	r3, [pc, #220]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002a5e:	4a38      	ldr	r2, [pc, #224]	@ (8002b40 <HAL_TIM_Base_MspInit+0x250>)
 8002a60:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8002a62:	4b36      	ldr	r3, [pc, #216]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002a64:	221d      	movs	r2, #29
 8002a66:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a68:	4b34      	ldr	r3, [pc, #208]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002a6a:	2240      	movs	r2, #64	@ 0x40
 8002a6c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6e:	4b33      	ldr	r3, [pc, #204]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002a74:	4b31      	ldr	r3, [pc, #196]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a7a:	4b30      	ldr	r3, [pc, #192]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002a7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a80:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a82:	4b2e      	ldr	r3, [pc, #184]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002a84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a88:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a90:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a92:	4b2a      	ldr	r3, [pc, #168]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002a94:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a98:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9a:	4b28      	ldr	r3, [pc, #160]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002aa0:	4826      	ldr	r0, [pc, #152]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002aa2:	f017 ff97 	bl	801a9d4 <HAL_DMA_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_TIM_Base_MspInit+0x1c0>
      Error_Handler();
 8002aac:	f7ff fbee 	bl	800228c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a22      	ldr	r2, [pc, #136]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ab6:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <HAL_TIM_Base_MspInit+0x24c>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_up.Instance = DMA1_Stream5;
 8002abc:	4b21      	ldr	r3, [pc, #132]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002abe:	4a22      	ldr	r2, [pc, #136]	@ (8002b48 <HAL_TIM_Base_MspInit+0x258>)
 8002ac0:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8002ac2:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002aca:	2240      	movs	r2, #64	@ 0x40
 8002acc:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ace:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002adc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ae0:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002ae4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ae8:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8002aea:	4b16      	ldr	r3, [pc, #88]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002aec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002af0:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002af2:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002af8:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002afe:	4811      	ldr	r0, [pc, #68]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002b00:	f017 ff68 	bl	801a9d4 <HAL_DMA_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_TIM_Base_MspInit+0x21e>
      Error_Handler();
 8002b0a:	f7ff fbbf 	bl	800228c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a0c      	ldr	r2, [pc, #48]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002b12:	621a      	str	r2, [r3, #32]
 8002b14:	4a0b      	ldr	r2, [pc, #44]	@ (8002b44 <HAL_TIM_Base_MspInit+0x254>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002b1a:	e05b      	b.n	8002bd4 <HAL_TIM_Base_MspInit+0x2e4>
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	58024400 	.word	0x58024400
 8002b24:	20000574 	.word	0x20000574
 8002b28:	40020040 	.word	0x40020040
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	200005ec 	.word	0x200005ec
 8002b34:	40020058 	.word	0x40020058
 8002b38:	40000800 	.word	0x40000800
 8002b3c:	20000664 	.word	0x20000664
 8002b40:	40020070 	.word	0x40020070
 8002b44:	200006dc 	.word	0x200006dc
 8002b48:	40020088 	.word	0x40020088
  else if(htim_base->Instance==TIM5)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a22      	ldr	r2, [pc, #136]	@ (8002bdc <HAL_TIM_Base_MspInit+0x2ec>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d13e      	bne.n	8002bd4 <HAL_TIM_Base_MspInit+0x2e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b56:	4b22      	ldr	r3, [pc, #136]	@ (8002be0 <HAL_TIM_Base_MspInit+0x2f0>)
 8002b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b5c:	4a20      	ldr	r2, [pc, #128]	@ (8002be0 <HAL_TIM_Base_MspInit+0x2f0>)
 8002b5e:	f043 0308 	orr.w	r3, r3, #8
 8002b62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b66:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_TIM_Base_MspInit+0x2f0>)
 8002b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_up.Instance = DMA1_Stream6;
 8002b74:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002b76:	4a1c      	ldr	r2, [pc, #112]	@ (8002be8 <HAL_TIM_Base_MspInit+0x2f8>)
 8002b78:	601a      	str	r2, [r3, #0]
    hdma_tim5_up.Init.Request = DMA_REQUEST_TIM5_UP;
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002b7c:	223b      	movs	r2, #59	@ 0x3b
 8002b7e:	605a      	str	r2, [r3, #4]
    hdma_tim5_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b80:	4b18      	ldr	r3, [pc, #96]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002b82:	2240      	movs	r2, #64	@ 0x40
 8002b84:	609a      	str	r2, [r3, #8]
    hdma_tim5_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b86:	4b17      	ldr	r3, [pc, #92]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	60da      	str	r2, [r3, #12]
    hdma_tim5_up.Init.MemInc = DMA_MINC_ENABLE;
 8002b8c:	4b15      	ldr	r3, [pc, #84]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b92:	611a      	str	r2, [r3, #16]
    hdma_tim5_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b94:	4b13      	ldr	r3, [pc, #76]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002b96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b9a:	615a      	str	r2, [r3, #20]
    hdma_tim5_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002b9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ba2:	619a      	str	r2, [r3, #24]
    hdma_tim5_up.Init.Mode = DMA_CIRCULAR;
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002ba6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002baa:	61da      	str	r2, [r3, #28]
    hdma_tim5_up.Init.Priority = DMA_PRIORITY_LOW;
 8002bac:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	621a      	str	r2, [r3, #32]
    hdma_tim5_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_up) != HAL_OK)
 8002bb8:	480a      	ldr	r0, [pc, #40]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002bba:	f017 ff0b 	bl	801a9d4 <HAL_DMA_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_TIM_Base_MspInit+0x2d8>
      Error_Handler();
 8002bc4:	f7ff fb62 	bl	800228c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_up);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a06      	ldr	r2, [pc, #24]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002bcc:	621a      	str	r2, [r3, #32]
 8002bce:	4a05      	ldr	r2, [pc, #20]	@ (8002be4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002bd4:	bf00      	nop
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40000c00 	.word	0x40000c00
 8002be0:	58024400 	.word	0x58024400
 8002be4:	20000754 	.word	0x20000754
 8002be8:	400200a0 	.word	0x400200a0

08002bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a12      	ldr	r2, [pc, #72]	@ (8002c54 <HAL_TIM_MspPostInit+0x68>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d11e      	bne.n	8002c4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0e:	4b12      	ldr	r3, [pc, #72]	@ (8002c58 <HAL_TIM_MspPostInit+0x6c>)
 8002c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c14:	4a10      	ldr	r2, [pc, #64]	@ (8002c58 <HAL_TIM_MspPostInit+0x6c>)
 8002c16:	f043 0302 	orr.w	r3, r3, #2
 8002c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <HAL_TIM_MspPostInit+0x6c>)
 8002c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c2c:	23c0      	movs	r3, #192	@ 0xc0
 8002c2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	4619      	mov	r1, r3
 8002c46:	4805      	ldr	r0, [pc, #20]	@ (8002c5c <HAL_TIM_MspPostInit+0x70>)
 8002c48:	f019 fdcc 	bl	801c7e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002c4c:	bf00      	nop
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40000800 	.word	0x40000800
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	58020400 	.word	0x58020400

08002c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b0ba      	sub	sp, #232	@ 0xe8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c78:	f107 0310 	add.w	r3, r7, #16
 8002c7c:	22c0      	movs	r2, #192	@ 0xc0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f020 f808 	bl	8022c96 <memset>
  if(huart->Instance==USART3)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a27      	ldr	r2, [pc, #156]	@ (8002d28 <HAL_UART_MspInit+0xc8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d146      	bne.n	8002d1e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c90:	f04f 0202 	mov.w	r2, #2
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ca2:	f107 0310 	add.w	r3, r7, #16
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f01b f8ba 	bl	801de20 <HAL_RCCEx_PeriphCLKConfig>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002cb2:	f7ff faeb 	bl	800228c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <HAL_UART_MspInit+0xcc>)
 8002cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d2c <HAL_UART_MspInit+0xcc>)
 8002cbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cc6:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <HAL_UART_MspInit+0xcc>)
 8002cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ccc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd4:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <HAL_UART_MspInit+0xcc>)
 8002cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cda:	4a14      	ldr	r2, [pc, #80]	@ (8002d2c <HAL_UART_MspInit+0xcc>)
 8002cdc:	f043 0308 	orr.w	r3, r3, #8
 8002ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <HAL_UART_MspInit+0xcc>)
 8002ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cf2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d0c:	2307      	movs	r3, #7
 8002d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d16:	4619      	mov	r1, r3
 8002d18:	4805      	ldr	r0, [pc, #20]	@ (8002d30 <HAL_UART_MspInit+0xd0>)
 8002d1a:	f019 fd63 	bl	801c7e4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002d1e:	bf00      	nop
 8002d20:	37e8      	adds	r7, #232	@ 0xe8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40004800 	.word	0x40004800
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	58020c00 	.word	0x58020c00

08002d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <NMI_Handler+0x4>

08002d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <MemManage_Handler+0x4>

08002d44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <BusFault_Handler+0x4>

08002d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <UsageFault_Handler+0x4>

08002d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d66:	f017 fc49 	bl	801a5fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002d6a:	f002 fc09 	bl	8005580 <xTaskGetSchedulerState>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d101      	bne.n	8002d78 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8002d74:	f003 fce8 	bl	8006748 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 8002d86:	4b19      	ldr	r3, [pc, #100]	@ (8002dec <DMA1_Stream0_IRQHandler+0x70>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00c      	beq.n	8002dac <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 8002d92:	4b17      	ldr	r3, [pc, #92]	@ (8002df0 <DMA1_Stream0_IRQHandler+0x74>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e001      	b.n	8002dac <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 8002da8:	2301      	movs	r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002dac:	4811      	ldr	r0, [pc, #68]	@ (8002df4 <DMA1_Stream0_IRQHandler+0x78>)
 8002dae:	f018 fbb3 	bl	801b518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <DMA1_Stream0_IRQHandler+0x7c>)
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	f003 f832 	bl	8005e30 <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <DMA1_Stream0_IRQHandler+0x66>
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dfc <DMA1_Stream0_IRQHandler+0x80>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40020000 	.word	0x40020000
 8002df0:	40020010 	.word	0x40020010
 8002df4:	20000290 	.word	0x20000290
 8002df8:	20000d34 	.word	0x20000d34
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF1_5){
 8002e0a:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <DMA1_Stream1_IRQHandler+0x70>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <DMA1_Stream1_IRQHandler+0x30>
      uint32_t status = DMA1_Stream1->CR;
 8002e16:	4b17      	ldr	r3, [pc, #92]	@ (8002e74 <DMA1_Stream1_IRQHandler+0x74>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60bb      	str	r3, [r7, #8]
	if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <DMA1_Stream1_IRQHandler+0x2c>
	ulCurrBuf = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	e001      	b.n	8002e30 <DMA1_Stream1_IRQHandler+0x30>
	} else {
	ulCurrBuf = 1;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
	}

    }
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002e30:	4811      	ldr	r0, [pc, #68]	@ (8002e78 <DMA1_Stream1_IRQHandler+0x78>)
 8002e32:	f018 fb71 	bl	801b518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
       xTaskNotifyFromISR() unblocks the handling task, and the priority of
       the handling task is higher than the priority of the currently running task,
       then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
    xHigherPriorityTaskWoken = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
    /* Unblock the handling task so the task can perform any processing necessitated
       by the interrupt. xHandlingTask is the task's handle, which was obtained
       when the task was created. The handling task's 0th notification value
       is bitwise ORed with the interrupt status - ensuring bits that are already
       set are not overwritten. */
    xTaskNotifyFromISR( vAuxADCTCPTaskHandle,
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <DMA1_Stream1_IRQHandler+0x7c>)
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	2300      	movs	r3, #0
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2301      	movs	r3, #1
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	f002 fff0 	bl	8005e30 <xTaskGenericNotifyFromISR>
  			     &xHigherPriorityTaskWoken );

    /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
       The macro used to do this is dependent on the port and may be called
       portEND_SWITCHING_ISR. */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <DMA1_Stream1_IRQHandler+0x66>
 8002e56:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <DMA1_Stream1_IRQHandler+0x80>)
 8002e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40020000 	.word	0x40020000
 8002e74:	40020028 	.word	0x40020028
 8002e78:	20000308 	.word	0x20000308
 8002e7c:	20000d38 	.word	0x20000d38
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002e88:	4802      	ldr	r0, [pc, #8]	@ (8002e94 <DMA1_Stream2_IRQHandler+0x10>)
 8002e8a:	f018 fb45 	bl	801b518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000574 	.word	0x20000574

08002e98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8002e9c:	4802      	ldr	r0, [pc, #8]	@ (8002ea8 <DMA1_Stream3_IRQHandler+0x10>)
 8002e9e:	f018 fb3b 	bl	801b518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200005ec 	.word	0x200005ec

08002eac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002eb0:	4802      	ldr	r0, [pc, #8]	@ (8002ebc <DMA1_Stream4_IRQHandler+0x10>)
 8002eb2:	f018 fb31 	bl	801b518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000664 	.word	0x20000664

08002ec0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8002ec4:	4802      	ldr	r0, [pc, #8]	@ (8002ed0 <DMA1_Stream5_IRQHandler+0x10>)
 8002ec6:	f018 fb27 	bl	801b518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200006dc 	.word	0x200006dc

08002ed4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_up);
 8002ed8:	4802      	ldr	r0, [pc, #8]	@ (8002ee4 <DMA1_Stream6_IRQHandler+0x10>)
 8002eda:	f018 fb1d 	bl	801b518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000754 	.word	0x20000754

08002ee8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002eec:	4802      	ldr	r0, [pc, #8]	@ (8002ef8 <SPI1_IRQHandler+0x10>)
 8002eee:	f01c fee7 	bl	801fcc0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200000f8 	.word	0x200000f8

08002efc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002f00:	4802      	ldr	r0, [pc, #8]	@ (8002f0c <SPI2_IRQHandler+0x10>)
 8002f02:	f01c fedd 	bl	801fcc0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000180 	.word	0x20000180

08002f10 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->HISR & DMA_FLAG_TCIF3_7){
 8002f1a:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <DMA1_Stream7_IRQHandler+0x70>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00c      	beq.n	8002f40 <DMA1_Stream7_IRQHandler+0x30>
      uint32_t status = DMA1_Stream7->CR;
 8002f26:	4b17      	ldr	r3, [pc, #92]	@ (8002f84 <DMA1_Stream7_IRQHandler+0x74>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60bb      	str	r3, [r7, #8]
      if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <DMA1_Stream7_IRQHandler+0x2c>
      ulCurrBuf = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e001      	b.n	8002f40 <DMA1_Stream7_IRQHandler+0x30>
      } else {
      ulCurrBuf = 1;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
      }

    }
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002f40:	4811      	ldr	r0, [pc, #68]	@ (8002f88 <DMA1_Stream7_IRQHandler+0x78>)
 8002f42:	f018 fae9 	bl	801b518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vTCADCTCPTaskHandle,
 8002f4a:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <DMA1_Stream7_IRQHandler+0x7c>)
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	2300      	movs	r3, #0
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2301      	movs	r3, #1
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	f002 ff68 	bl	8005e30 <xTaskGenericNotifyFromISR>
			 &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <DMA1_Stream7_IRQHandler+0x66>
 8002f66:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <DMA1_Stream7_IRQHandler+0x80>)
 8002f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40020000 	.word	0x40020000
 8002f84:	400200b8 	.word	0x400200b8
 8002f88:	20000380 	.word	0x20000380
 8002f8c:	20000d3c 	.word	0x20000d3c
 8002f90:	e000ed04 	.word	0xe000ed04

08002f94 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002f98:	4802      	ldr	r0, [pc, #8]	@ (8002fa4 <SPI3_IRQHandler+0x10>)
 8002f9a:	f01c fe91 	bl	801fcc0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000208 	.word	0x20000208

08002fa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return 1;
 8002fac:	2301      	movs	r3, #1
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_kill>:

int _kill(int pid, int sig)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fc2:	f020 fda1 	bl	8023b08 <__errno>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2216      	movs	r2, #22
 8002fca:	601a      	str	r2, [r3, #0]
  return -1;
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_exit>:

void _exit (int status)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ffe7 	bl	8002fb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fea:	bf00      	nop
 8002fec:	e7fd      	b.n	8002fea <_exit+0x12>

08002fee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e00a      	b.n	8003016 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003000:	f3af 8000 	nop.w
 8003004:	4601      	mov	r1, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	60ba      	str	r2, [r7, #8]
 800300c:	b2ca      	uxtb	r2, r1
 800300e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	3301      	adds	r3, #1
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	dbf0      	blt.n	8003000 <_read+0x12>
  }

  return len;
 800301e:	687b      	ldr	r3, [r7, #4]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e009      	b.n	800304e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	60ba      	str	r2, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	3301      	adds	r3, #1
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	dbf1      	blt.n	800303a <_write+0x12>
  }
  return len;
 8003056:	687b      	ldr	r3, [r7, #4]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <_close>:

int _close(int file)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003088:	605a      	str	r2, [r3, #4]
  return 0;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <_isatty>:

int _isatty(int file)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030a0:	2301      	movs	r3, #1
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d0:	4a14      	ldr	r2, [pc, #80]	@ (8003124 <_sbrk+0x5c>)
 80030d2:	4b15      	ldr	r3, [pc, #84]	@ (8003128 <_sbrk+0x60>)
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030dc:	4b13      	ldr	r3, [pc, #76]	@ (800312c <_sbrk+0x64>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e4:	4b11      	ldr	r3, [pc, #68]	@ (800312c <_sbrk+0x64>)
 80030e6:	4a12      	ldr	r2, [pc, #72]	@ (8003130 <_sbrk+0x68>)
 80030e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ea:	4b10      	ldr	r3, [pc, #64]	@ (800312c <_sbrk+0x64>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d207      	bcs.n	8003108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f8:	f020 fd06 	bl	8023b08 <__errno>
 80030fc:	4603      	mov	r3, r0
 80030fe:	220c      	movs	r2, #12
 8003100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	e009      	b.n	800311c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003108:	4b08      	ldr	r3, [pc, #32]	@ (800312c <_sbrk+0x64>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310e:	4b07      	ldr	r3, [pc, #28]	@ (800312c <_sbrk+0x64>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	4a05      	ldr	r2, [pc, #20]	@ (800312c <_sbrk+0x64>)
 8003118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	24080000 	.word	0x24080000
 8003128:	00000400 	.word	0x00000400
 800312c:	20000dc8 	.word	0x20000dc8
 8003130:	20002888 	.word	0x20002888

08003134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800313a:	4b3f      	ldr	r3, [pc, #252]	@ (8003238 <SystemInit+0x104>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003140:	4a3d      	ldr	r2, [pc, #244]	@ (8003238 <SystemInit+0x104>)
 8003142:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003146:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800314a:	4b3c      	ldr	r3, [pc, #240]	@ (800323c <SystemInit+0x108>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	2b06      	cmp	r3, #6
 8003154:	d807      	bhi.n	8003166 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003156:	4b39      	ldr	r3, [pc, #228]	@ (800323c <SystemInit+0x108>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 030f 	bic.w	r3, r3, #15
 800315e:	4a37      	ldr	r2, [pc, #220]	@ (800323c <SystemInit+0x108>)
 8003160:	f043 0307 	orr.w	r3, r3, #7
 8003164:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003166:	4b36      	ldr	r3, [pc, #216]	@ (8003240 <SystemInit+0x10c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a35      	ldr	r2, [pc, #212]	@ (8003240 <SystemInit+0x10c>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003172:	4b33      	ldr	r3, [pc, #204]	@ (8003240 <SystemInit+0x10c>)
 8003174:	2200      	movs	r2, #0
 8003176:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003178:	4b31      	ldr	r3, [pc, #196]	@ (8003240 <SystemInit+0x10c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4930      	ldr	r1, [pc, #192]	@ (8003240 <SystemInit+0x10c>)
 800317e:	4b31      	ldr	r3, [pc, #196]	@ (8003244 <SystemInit+0x110>)
 8003180:	4013      	ands	r3, r2
 8003182:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003184:	4b2d      	ldr	r3, [pc, #180]	@ (800323c <SystemInit+0x108>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003190:	4b2a      	ldr	r3, [pc, #168]	@ (800323c <SystemInit+0x108>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 030f 	bic.w	r3, r3, #15
 8003198:	4a28      	ldr	r2, [pc, #160]	@ (800323c <SystemInit+0x108>)
 800319a:	f043 0307 	orr.w	r3, r3, #7
 800319e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80031a0:	4b27      	ldr	r3, [pc, #156]	@ (8003240 <SystemInit+0x10c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80031a6:	4b26      	ldr	r3, [pc, #152]	@ (8003240 <SystemInit+0x10c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80031ac:	4b24      	ldr	r3, [pc, #144]	@ (8003240 <SystemInit+0x10c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80031b2:	4b23      	ldr	r3, [pc, #140]	@ (8003240 <SystemInit+0x10c>)
 80031b4:	4a24      	ldr	r2, [pc, #144]	@ (8003248 <SystemInit+0x114>)
 80031b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80031b8:	4b21      	ldr	r3, [pc, #132]	@ (8003240 <SystemInit+0x10c>)
 80031ba:	4a24      	ldr	r2, [pc, #144]	@ (800324c <SystemInit+0x118>)
 80031bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80031be:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <SystemInit+0x10c>)
 80031c0:	4a23      	ldr	r2, [pc, #140]	@ (8003250 <SystemInit+0x11c>)
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80031c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003240 <SystemInit+0x10c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80031ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <SystemInit+0x10c>)
 80031cc:	4a20      	ldr	r2, [pc, #128]	@ (8003250 <SystemInit+0x11c>)
 80031ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <SystemInit+0x10c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80031d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003240 <SystemInit+0x10c>)
 80031d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003250 <SystemInit+0x11c>)
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80031dc:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <SystemInit+0x10c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031e2:	4b17      	ldr	r3, [pc, #92]	@ (8003240 <SystemInit+0x10c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a16      	ldr	r2, [pc, #88]	@ (8003240 <SystemInit+0x10c>)
 80031e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80031ee:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <SystemInit+0x10c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80031f4:	4b17      	ldr	r3, [pc, #92]	@ (8003254 <SystemInit+0x120>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <SystemInit+0x124>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003200:	d202      	bcs.n	8003208 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003202:	4b16      	ldr	r3, [pc, #88]	@ (800325c <SystemInit+0x128>)
 8003204:	2201      	movs	r2, #1
 8003206:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003208:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <SystemInit+0x10c>)
 800320a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800320e:	4a0c      	ldr	r2, [pc, #48]	@ (8003240 <SystemInit+0x10c>)
 8003210:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 8003214:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003218:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <SystemInit+0x10c>)
 800321a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800321e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003220:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003222:	4b0f      	ldr	r3, [pc, #60]	@ (8003260 <SystemInit+0x12c>)
 8003224:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003228:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000ed00 	.word	0xe000ed00
 800323c:	52002000 	.word	0x52002000
 8003240:	58024400 	.word	0x58024400
 8003244:	eaf6ed7f 	.word	0xeaf6ed7f
 8003248:	02020200 	.word	0x02020200
 800324c:	01ff0000 	.word	0x01ff0000
 8003250:	01010280 	.word	0x01010280
 8003254:	5c001000 	.word	0x5c001000
 8003258:	ffff0000 	.word	0xffff0000
 800325c:	51008108 	.word	0x51008108
 8003260:	52004000 	.word	0x52004000

08003264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003264:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800329c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003268:	f7ff ff64 	bl	8003134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800326c:	480c      	ldr	r0, [pc, #48]	@ (80032a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800326e:	490d      	ldr	r1, [pc, #52]	@ (80032a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003270:	4a0d      	ldr	r2, [pc, #52]	@ (80032a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003274:	e002      	b.n	800327c <LoopCopyDataInit>

08003276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800327a:	3304      	adds	r3, #4

0800327c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800327c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003280:	d3f9      	bcc.n	8003276 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003282:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003284:	4c0a      	ldr	r4, [pc, #40]	@ (80032b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003288:	e001      	b.n	800328e <LoopFillZerobss>

0800328a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800328a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800328c:	3204      	adds	r2, #4

0800328e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003290:	d3fb      	bcc.n	800328a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003292:	f020 fc3f 	bl	8023b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003296:	f7fd fa03 	bl	80006a0 <main>
  bx  lr
 800329a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800329c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80032a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80032a8:	08028068 	.word	0x08028068
  ldr r2, =_sbss
 80032ac:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80032b0:	20002888 	.word	0x20002888

080032b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032b4:	e7fe      	b.n	80032b4 <ADC3_IRQHandler>

080032b6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80032bc:	201c      	movs	r0, #28
 80032be:	f003 fac1 	bl	8006844 <pvPortMalloc>
 80032c2:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f9c3 	bl	8003660 <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 80032da:	687b      	ldr	r3, [r7, #4]
        }
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08c      	sub	sp, #48	@ 0x30
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <xEventGroupWaitBits+0x2a>
 8003304:	f240 1147 	movw	r1, #327	@ 0x147
 8003308:	4850      	ldr	r0, [pc, #320]	@ (800344c <xEventGroupWaitBits+0x168>)
 800330a:	f7fe fb37 	bl	800197c <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003314:	d304      	bcc.n	8003320 <xEventGroupWaitBits+0x3c>
 8003316:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800331a:	484c      	ldr	r0, [pc, #304]	@ (800344c <xEventGroupWaitBits+0x168>)
 800331c:	f7fe fb2e 	bl	800197c <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d104      	bne.n	8003330 <xEventGroupWaitBits+0x4c>
 8003326:	f240 1149 	movw	r1, #329	@ 0x149
 800332a:	4848      	ldr	r0, [pc, #288]	@ (800344c <xEventGroupWaitBits+0x168>)
 800332c:	f7fe fb26 	bl	800197c <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003330:	f002 f926 	bl	8005580 <xTaskGetSchedulerState>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <xEventGroupWaitBits+0x5c>
 800333a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <xEventGroupWaitBits+0x60>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <xEventGroupWaitBits+0x62>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <xEventGroupWaitBits+0x70>
 800334a:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800334e:	483f      	ldr	r0, [pc, #252]	@ (800344c <xEventGroupWaitBits+0x168>)
 8003350:	f7fe fb14 	bl	800197c <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 8003354:	f001 faf6 	bl	8004944 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	69f8      	ldr	r0, [r7, #28]
 8003364:	f000 f95a 	bl	800361c <prvTestWaitCondition>
 8003368:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00e      	beq.n	800338e <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 8003374:	2300      	movs	r3, #0
 8003376:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d028      	beq.n	80033d0 <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	43db      	mvns	r3, r3
 8003386:	401a      	ands	r2, r3
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e020      	b.n	80033d0 <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 800338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 8003398:	2301      	movs	r3, #1
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	e018      	b.n	80033d0 <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80033a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033aa:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80033b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	1d18      	adds	r0, r3, #4
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c2:	4313      	orrs	r3, r2
 80033c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033c6:	4619      	mov	r1, r3
 80033c8:	f001 fda4 	bl	8004f14 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80033d0:	f001 fac6 	bl	8004960 <xTaskResumeAll>
 80033d4:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 80033d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d031      	beq.n	8003440 <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 80033e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003450 <xEventGroupWaitBits+0x16c>)
 80033e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 80033f2:	f002 facf 	bl	8005994 <uxTaskResetEventItemValue>
 80033f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80033f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11a      	bne.n	8003438 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 8003402:	f003 f91d 	bl	8006640 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003412:	f000 f903 	bl	800361c <prvTestWaitCondition>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d009      	beq.n	8003430 <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	43db      	mvns	r3, r3
 800342a:	401a      	ands	r2, r3
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 8003430:	2301      	movs	r3, #1
 8003432:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 8003434:	f003 f930 	bl	8006698 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800343e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 8003440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8003442:	4618      	mov	r0, r3
 8003444:	3730      	adds	r7, #48	@ 0x30
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	080248b8 	.word	0x080248b8
 8003450:	e000ed04 	.word	0xe000ed04

08003454 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <xEventGroupClearBits+0x1e>
 8003468:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 800346c:	480f      	ldr	r0, [pc, #60]	@ (80034ac <xEventGroupClearBits+0x58>)
 800346e:	f7fe fa85 	bl	800197c <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003478:	d304      	bcc.n	8003484 <xEventGroupClearBits+0x30>
 800347a:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800347e:	480b      	ldr	r0, [pc, #44]	@ (80034ac <xEventGroupClearBits+0x58>)
 8003480:	f7fe fa7c 	bl	800197c <vAssertCalled>

        taskENTER_CRITICAL();
 8003484:	f003 f8dc 	bl	8006640 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	43db      	mvns	r3, r3
 8003496:	401a      	ands	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800349c:	f003 f8fc 	bl	8006698 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 80034a0:	68bb      	ldr	r3, [r7, #8]
    }
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	080248b8 	.word	0x080248b8

080034b0 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08c      	sub	sp, #48	@ 0x30
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80034ba:	2300      	movs	r3, #0
 80034bc:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d104      	bne.n	80034d6 <xEventGroupSetBits+0x26>
 80034cc:	f240 2132 	movw	r1, #562	@ 0x232
 80034d0:	4836      	ldr	r0, [pc, #216]	@ (80035ac <xEventGroupSetBits+0xfc>)
 80034d2:	f7fe fa53 	bl	800197c <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034dc:	d304      	bcc.n	80034e8 <xEventGroupSetBits+0x38>
 80034de:	f240 2133 	movw	r1, #563	@ 0x233
 80034e2:	4832      	ldr	r0, [pc, #200]	@ (80035ac <xEventGroupSetBits+0xfc>)
 80034e4:	f7fe fa4a 	bl	800197c <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	3304      	adds	r3, #4
 80034ec:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3308      	adds	r3, #8
 80034f2:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 80034f4:	f001 fa26 	bl	8004944 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	431a      	orrs	r2, r3
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 800350a:	e03c      	b.n	8003586 <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 800350c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003522:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800352a:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d108      	bne.n	8003548 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 8003542:	2301      	movs	r3, #1
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24
 8003546:	e008      	b.n	800355a <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	429a      	cmp	r2, r3
 8003554:	d101      	bne.n	800355a <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8003556:	2301      	movs	r3, #1
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	d010      	beq.n	8003582 <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 800356a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800357a:	4619      	mov	r1, r3
 800357c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800357e:	f001 fde7 	bl	8005150 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 8003586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	429a      	cmp	r2, r3
 800358c:	d1be      	bne.n	800350c <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003594:	43db      	mvns	r3, r3
 8003596:	401a      	ands	r2, r3
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 800359c:	f001 f9e0 	bl	8004960 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	681b      	ldr	r3, [r3, #0]
    }
 80035a4:	4618      	mov	r0, r3
 80035a6:	3730      	adds	r7, #48	@ 0x30
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	080248b8 	.word	0x080248b8

080035b0 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <vEventGroupDelete+0x1c>
 80035c2:	f240 218e 	movw	r1, #654	@ 0x28e
 80035c6:	4814      	ldr	r0, [pc, #80]	@ (8003618 <vEventGroupDelete+0x68>)
 80035c8:	f7fe f9d8 	bl	800197c <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3304      	adds	r3, #4
 80035d0:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 80035d2:	f001 f9b7 	bl	8004944 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80035d6:	e011      	b.n	80035fc <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3308      	adds	r3, #8
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d104      	bne.n	80035ee <vEventGroupDelete+0x3e>
 80035e4:	f240 219a 	movw	r1, #666	@ 0x29a
 80035e8:	480b      	ldr	r0, [pc, #44]	@ (8003618 <vEventGroupDelete+0x68>)
 80035ea:	f7fe f9c7 	bl	800197c <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 fdaa 	bl	8005150 <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e9      	bne.n	80035d8 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 8003604:	f001 f9ac 	bl	8004960 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f003 f9ef 	bl	80069ec <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	080248b8 	.word	0x080248b8

0800361c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 800363c:	2301      	movs	r3, #1
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	e007      	b.n	8003652 <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4013      	ands	r3, r2
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	429a      	cmp	r2, r3
 800364c:	d101      	bne.n	8003652 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 800364e:	2301      	movs	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 8003652:	697b      	ldr	r3, [r7, #20]
    }
 8003654:	4618      	mov	r0, r3
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f103 0208 	add.w	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f04f 32ff 	mov.w	r2, #4294967295
 8003678:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f103 0208 	add.w	r2, r3, #8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f103 0208 	add.w	r2, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d103      	bne.n	8003722 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e00c      	b.n	800373c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3308      	adds	r3, #8
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e002      	b.n	8003730 <vListInsert+0x2e>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	d2f6      	bcs.n	800372a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6892      	ldr	r2, [r2, #8]
 800378a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6852      	ldr	r2, [r2, #4]
 8003794:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	d103      	bne.n	80037a8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80037d2:	2301      	movs	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d104      	bne.n	80037ea <xQueueGenericReset+0x22>
 80037e0:	f240 1137 	movw	r1, #311	@ 0x137
 80037e4:	4839      	ldr	r0, [pc, #228]	@ (80038cc <xQueueGenericReset+0x104>)
 80037e6:	f7fe f8c9 	bl	800197c <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05d      	beq.n	80038ac <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d059      	beq.n	80038ac <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003800:	2100      	movs	r1, #0
 8003802:	fba3 2302 	umull	r2, r3, r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d000      	beq.n	800380c <xQueueGenericReset+0x44>
 800380a:	2101      	movs	r1, #1
 800380c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800380e:	2b00      	cmp	r3, #0
 8003810:	d14c      	bne.n	80038ac <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 8003812:	f002 ff15 	bl	8006640 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	441a      	add	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003842:	3b01      	subs	r3, #1
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	441a      	add	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	22ff      	movs	r2, #255	@ 0xff
 8003856:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	22ff      	movs	r2, #255	@ 0xff
 800385e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d114      	bne.n	8003892 <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01a      	beq.n	80038a6 <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	3310      	adds	r3, #16
 8003874:	4618      	mov	r0, r3
 8003876:	f001 fb99 	bl	8004fac <xTaskRemoveFromEventList>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d012      	beq.n	80038a6 <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003880:	4b13      	ldr	r3, [pc, #76]	@ (80038d0 <xQueueGenericReset+0x108>)
 8003882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	e009      	b.n	80038a6 <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	3310      	adds	r3, #16
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fee2 	bl	8003660 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	3324      	adds	r3, #36	@ 0x24
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fedd 	bl	8003660 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80038a6:	f002 fef7 	bl	8006698 <vPortExitCritical>
 80038aa:	e001      	b.n	80038b0 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <xQueueGenericReset+0xf8>
 80038b6:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80038ba:	4804      	ldr	r0, [pc, #16]	@ (80038cc <xQueueGenericReset+0x104>)
 80038bc:	f7fe f85e 	bl	800197c <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80038c0:	68fb      	ldr	r3, [r7, #12]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	080248e4 	.word	0x080248e4
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	@ 0x28
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d02e      	beq.n	800394a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80038ec:	2100      	movs	r1, #0
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	fba3 2302 	umull	r2, r3, r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d000      	beq.n	80038fc <xQueueGenericCreate+0x28>
 80038fa:	2101      	movs	r1, #1
 80038fc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d123      	bne.n	800394a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800390a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800390e:	d81c      	bhi.n	800394a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	3350      	adds	r3, #80	@ 0x50
 800391e:	4618      	mov	r0, r3
 8003920:	f002 ff90 	bl	8006844 <pvPortMalloc>
 8003924:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d016      	beq.n	800395a <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	3350      	adds	r3, #80	@ 0x50
 8003934:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003936:	79fa      	ldrb	r2, [r7, #7]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f810 	bl	8003968 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003948:	e007      	b.n	800395a <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d104      	bne.n	800395a <xQueueGenericCreate+0x86>
 8003950:	f240 212a 	movw	r1, #554	@ 0x22a
 8003954:	4803      	ldr	r0, [pc, #12]	@ (8003964 <xQueueGenericCreate+0x90>)
 8003956:	f7fe f811 	bl	800197c <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800395a:	69fb      	ldr	r3, [r7, #28]
    }
 800395c:	4618      	mov	r0, r3
 800395e:	3720      	adds	r7, #32
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	080248e4 	.word	0x080248e4

08003968 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d103      	bne.n	8003984 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e002      	b.n	800398a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003996:	2101      	movs	r1, #1
 8003998:	69b8      	ldr	r0, [r7, #24]
 800399a:	f7ff ff15 	bl	80037c8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00e      	beq.n	80039da <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80039ce:	2300      	movs	r3, #0
 80039d0:	2200      	movs	r2, #0
 80039d2:	2100      	movs	r1, #0
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f847 	bl	8003a68 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b086      	sub	sp, #24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80039ec:	2301      	movs	r3, #1
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	461a      	mov	r2, r3
 80039f8:	6939      	ldr	r1, [r7, #16]
 80039fa:	6978      	ldr	r0, [r7, #20]
 80039fc:	f7ff ff6a 	bl	80038d4 <xQueueGenericCreate>
 8003a00:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff ffd3 	bl	80039ae <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8003a08:	68fb      	ldr	r3, [r7, #12]
    }
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d010      	beq.n	8003a4a <xQueueCreateCountingSemaphore+0x36>
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d80c      	bhi.n	8003a4a <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003a30:	2202      	movs	r2, #2
 8003a32:	2100      	movs	r1, #0
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff4d 	bl	80038d4 <xQueueGenericCreate>
 8003a3a:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8003a48:	e007      	b.n	8003a5a <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <xQueueCreateCountingSemaphore+0x46>
 8003a50:	f240 319f 	movw	r1, #927	@ 0x39f
 8003a54:	4803      	ldr	r0, [pc, #12]	@ (8003a64 <xQueueCreateCountingSemaphore+0x50>)
 8003a56:	f7fd ff91 	bl	800197c <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
    }
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	080248e4 	.word	0x080248e4

08003a68 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	@ 0x28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a76:	2300      	movs	r3, #0
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <xQueueGenericSend+0x26>
 8003a84:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8003a88:	4869      	ldr	r0, [pc, #420]	@ (8003c30 <xQueueGenericSend+0x1c8>)
 8003a8a:	f7fd ff77 	bl	800197c <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <xQueueGenericSend+0x34>
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <xQueueGenericSend+0x38>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <xQueueGenericSend+0x3a>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d104      	bne.n	8003ab0 <xQueueGenericSend+0x48>
 8003aa6:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8003aaa:	4861      	ldr	r0, [pc, #388]	@ (8003c30 <xQueueGenericSend+0x1c8>)
 8003aac:	f7fd ff66 	bl	800197c <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d103      	bne.n	8003abe <xQueueGenericSend+0x56>
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <xQueueGenericSend+0x5a>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <xQueueGenericSend+0x5c>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <xQueueGenericSend+0x6a>
 8003ac8:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8003acc:	4858      	ldr	r0, [pc, #352]	@ (8003c30 <xQueueGenericSend+0x1c8>)
 8003ace:	f7fd ff55 	bl	800197c <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ad2:	f001 fd55 	bl	8005580 <xTaskGetSchedulerState>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <xQueueGenericSend+0x7a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <xQueueGenericSend+0x7e>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <xQueueGenericSend+0x80>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <xQueueGenericSend+0x8e>
 8003aec:	f240 31bb 	movw	r1, #955	@ 0x3bb
 8003af0:	484f      	ldr	r0, [pc, #316]	@ (8003c30 <xQueueGenericSend+0x1c8>)
 8003af2:	f7fd ff43 	bl	800197c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003af6:	f002 fda3 	bl	8006640 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <xQueueGenericSend+0xa4>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d129      	bne.n	8003b60 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	6a38      	ldr	r0, [r7, #32]
 8003b12:	f000 fabb 	bl	800408c <prvCopyDataToQueue>
 8003b16:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d010      	beq.n	8003b42 <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	3324      	adds	r3, #36	@ 0x24
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 fa41 	bl	8004fac <xTaskRemoveFromEventList>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003b30:	4b40      	ldr	r3, [pc, #256]	@ (8003c34 <xQueueGenericSend+0x1cc>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	e00a      	b.n	8003b58 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003b48:	4b3a      	ldr	r3, [pc, #232]	@ (8003c34 <xQueueGenericSend+0x1cc>)
 8003b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003b58:	f002 fd9e 	bl	8006698 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e063      	b.n	8003c28 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003b66:	f002 fd97 	bl	8006698 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e05c      	b.n	8003c28 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d106      	bne.n	8003b82 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 fbc1 	bl	8005300 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003b82:	f002 fd89 	bl	8006698 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003b86:	f000 fedd 	bl	8004944 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003b8a:	f002 fd59 	bl	8006640 <vPortEnterCritical>
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b94:	b25b      	sxtb	r3, r3
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d103      	bne.n	8003ba4 <xQueueGenericSend+0x13c>
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003baa:	b25b      	sxtb	r3, r3
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d103      	bne.n	8003bba <xQueueGenericSend+0x152>
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bba:	f002 fd6d 	bl	8006698 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bbe:	1d3a      	adds	r2, r7, #4
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fbb0 	bl	800532c <xTaskCheckForTimeOut>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d124      	bne.n	8003c1c <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bd2:	6a38      	ldr	r0, [r7, #32]
 8003bd4:	f000 fb52 	bl	800427c <prvIsQueueFull>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d018      	beq.n	8003c10 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	3310      	adds	r3, #16
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	4611      	mov	r1, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 f974 	bl	8004ed4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003bec:	6a38      	ldr	r0, [r7, #32]
 8003bee:	f000 fadd 	bl	80041ac <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003bf2:	f000 feb5 	bl	8004960 <xTaskResumeAll>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f47f af7c 	bne.w	8003af6 <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003c34 <xQueueGenericSend+0x1cc>)
 8003c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	e772      	b.n	8003af6 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003c10:	6a38      	ldr	r0, [r7, #32]
 8003c12:	f000 facb 	bl	80041ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003c16:	f000 fea3 	bl	8004960 <xTaskResumeAll>
 8003c1a:	e76c      	b.n	8003af6 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003c1c:	6a38      	ldr	r0, [r7, #32]
 8003c1e:	f000 fac5 	bl	80041ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003c22:	f000 fe9d 	bl	8004960 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8003c26:	2300      	movs	r3, #0
        }
    }
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3728      	adds	r7, #40	@ 0x28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	080248e4 	.word	0x080248e4
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	@ 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d104      	bne.n	8003c5c <xQueueReceive+0x24>
 8003c52:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8003c56:	485e      	ldr	r0, [pc, #376]	@ (8003dd0 <xQueueReceive+0x198>)
 8003c58:	f7fd fe90 	bl	800197c <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <xQueueReceive+0x32>
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <xQueueReceive+0x36>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <xQueueReceive+0x38>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d104      	bne.n	8003c7e <xQueueReceive+0x46>
 8003c74:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8003c78:	4855      	ldr	r0, [pc, #340]	@ (8003dd0 <xQueueReceive+0x198>)
 8003c7a:	f7fd fe7f 	bl	800197c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c7e:	f001 fc7f 	bl	8005580 <xTaskGetSchedulerState>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <xQueueReceive+0x56>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <xQueueReceive+0x5a>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <xQueueReceive+0x5c>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <xQueueReceive+0x6a>
 8003c98:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8003c9c:	484c      	ldr	r0, [pc, #304]	@ (8003dd0 <xQueueReceive+0x198>)
 8003c9e:	f7fd fe6d 	bl	800197c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003ca2:	f002 fccd 	bl	8006640 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003caa:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01f      	beq.n	8003cf2 <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	6a38      	ldr	r0, [r7, #32]
 8003cb6:	f000 fa53 	bl	8004160 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	1e5a      	subs	r2, r3, #1
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00f      	beq.n	8003cea <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	3310      	adds	r3, #16
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 f96c 	bl	8004fac <xTaskRemoveFromEventList>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003cda:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd4 <xQueueReceive+0x19c>)
 8003cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003cea:	f002 fcd5 	bl	8006698 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e069      	b.n	8003dc6 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003cf8:	f002 fcce 	bl	8006698 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e062      	b.n	8003dc6 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d06:	f107 0314 	add.w	r3, r7, #20
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 faf8 	bl	8005300 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003d10:	2301      	movs	r3, #1
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003d14:	f002 fcc0 	bl	8006698 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d18:	f000 fe14 	bl	8004944 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d1c:	f002 fc90 	bl	8006640 <vPortEnterCritical>
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d26:	b25b      	sxtb	r3, r3
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d103      	bne.n	8003d36 <xQueueReceive+0xfe>
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d3c:	b25b      	sxtb	r3, r3
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d103      	bne.n	8003d4c <xQueueReceive+0x114>
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d4c:	f002 fca4 	bl	8006698 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d50:	1d3a      	adds	r2, r7, #4
 8003d52:	f107 0314 	add.w	r3, r7, #20
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f001 fae7 	bl	800532c <xTaskCheckForTimeOut>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d123      	bne.n	8003dac <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d64:	6a38      	ldr	r0, [r7, #32]
 8003d66:	f000 fa73 	bl	8004250 <prvIsQueueEmpty>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d017      	beq.n	8003da0 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	3324      	adds	r3, #36	@ 0x24
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	4611      	mov	r1, r2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f001 f8ab 	bl	8004ed4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003d7e:	6a38      	ldr	r0, [r7, #32]
 8003d80:	f000 fa14 	bl	80041ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003d84:	f000 fdec 	bl	8004960 <xTaskResumeAll>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d189      	bne.n	8003ca2 <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 8003d8e:	4b11      	ldr	r3, [pc, #68]	@ (8003dd4 <xQueueReceive+0x19c>)
 8003d90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	e780      	b.n	8003ca2 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003da0:	6a38      	ldr	r0, [r7, #32]
 8003da2:	f000 fa03 	bl	80041ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003da6:	f000 fddb 	bl	8004960 <xTaskResumeAll>
 8003daa:	e77a      	b.n	8003ca2 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003dac:	6a38      	ldr	r0, [r7, #32]
 8003dae:	f000 f9fd 	bl	80041ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003db2:	f000 fdd5 	bl	8004960 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003db6:	6a38      	ldr	r0, [r7, #32]
 8003db8:	f000 fa4a 	bl	8004250 <prvIsQueueEmpty>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f43f af6f 	beq.w	8003ca2 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003dc4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3728      	adds	r7, #40	@ 0x28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	080248e4 	.word	0x080248e4
 8003dd4:	e000ed04 	.word	0xe000ed04

08003dd8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	@ 0x28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <xQueueSemaphoreTake+0x26>
 8003df4:	f240 6182 	movw	r1, #1666	@ 0x682
 8003df8:	486c      	ldr	r0, [pc, #432]	@ (8003fac <xQueueSemaphoreTake+0x1d4>)
 8003dfa:	f7fd fdbf 	bl	800197c <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <xQueueSemaphoreTake+0x38>
 8003e06:	f240 6186 	movw	r1, #1670	@ 0x686
 8003e0a:	4868      	ldr	r0, [pc, #416]	@ (8003fac <xQueueSemaphoreTake+0x1d4>)
 8003e0c:	f7fd fdb6 	bl	800197c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e10:	f001 fbb6 	bl	8005580 <xTaskGetSchedulerState>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <xQueueSemaphoreTake+0x48>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <xQueueSemaphoreTake+0x4c>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <xQueueSemaphoreTake+0x4e>
 8003e24:	2300      	movs	r3, #0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <xQueueSemaphoreTake+0x5c>
 8003e2a:	f240 618b 	movw	r1, #1675	@ 0x68b
 8003e2e:	485f      	ldr	r0, [pc, #380]	@ (8003fac <xQueueSemaphoreTake+0x1d4>)
 8003e30:	f7fd fda4 	bl	800197c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003e34:	f002 fc04 	bl	8006640 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3c:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d024      	beq.n	8003e8e <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	1e5a      	subs	r2, r3, #1
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e54:	f001 fdb6 	bl	80059c4 <pvTaskIncrementMutexHeldCount>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00f      	beq.n	8003e86 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3310      	adds	r3, #16
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 f89e 	bl	8004fac <xTaskRemoveFromEventList>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e76:	4b4e      	ldr	r3, [pc, #312]	@ (8003fb0 <xQueueSemaphoreTake+0x1d8>)
 8003e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003e86:	f002 fc07 	bl	8006698 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e089      	b.n	8003fa2 <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003e94:	f002 fc00 	bl	8006698 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e082      	b.n	8003fa2 <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ea2:	f107 030c 	add.w	r3, r7, #12
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 fa2a 	bl	8005300 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003eb0:	f002 fbf2 	bl	8006698 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003eb4:	f000 fd46 	bl	8004944 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003eb8:	f002 fbc2 	bl	8006640 <vPortEnterCritical>
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ec2:	b25b      	sxtb	r3, r3
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d103      	bne.n	8003ed2 <xQueueSemaphoreTake+0xfa>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ed8:	b25b      	sxtb	r3, r3
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d103      	bne.n	8003ee8 <xQueueSemaphoreTake+0x110>
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ee8:	f002 fbd6 	bl	8006698 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eec:	463a      	mov	r2, r7
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fa19 	bl	800532c <xTaskCheckForTimeOut>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d132      	bne.n	8003f66 <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f00:	69f8      	ldr	r0, [r7, #28]
 8003f02:	f000 f9a5 	bl	8004250 <prvIsQueueEmpty>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d026      	beq.n	8003f5a <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 8003f14:	f002 fb94 	bl	8006640 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 fb4d 	bl	80055bc <xTaskPriorityInherit>
 8003f22:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8003f24:	f002 fbb8 	bl	8006698 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	3324      	adds	r3, #36	@ 0x24
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 ffcf 	bl	8004ed4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003f36:	69f8      	ldr	r0, [r7, #28]
 8003f38:	f000 f938 	bl	80041ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003f3c:	f000 fd10 	bl	8004960 <xTaskResumeAll>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f47f af76 	bne.w	8003e34 <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <xQueueSemaphoreTake+0x1d8>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	e76c      	b.n	8003e34 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003f5a:	69f8      	ldr	r0, [r7, #28]
 8003f5c:	f000 f926 	bl	80041ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003f60:	f000 fcfe 	bl	8004960 <xTaskResumeAll>
 8003f64:	e766      	b.n	8003e34 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003f66:	69f8      	ldr	r0, [r7, #28]
 8003f68:	f000 f920 	bl	80041ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003f6c:	f000 fcf8 	bl	8004960 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f70:	69f8      	ldr	r0, [r7, #28]
 8003f72:	f000 f96d 	bl	8004250 <prvIsQueueEmpty>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f43f af5b 	beq.w	8003e34 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00d      	beq.n	8003fa0 <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 8003f84:	f002 fb5c 	bl	8006640 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f88:	69f8      	ldr	r0, [r7, #28]
 8003f8a:	f000 f867 	bl	800405c <prvGetDisinheritPriorityAfterTimeout>
 8003f8e:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	6979      	ldr	r1, [r7, #20]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 fc4c 	bl	8005834 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8003f9c:	f002 fb7c 	bl	8006698 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003fa0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3728      	adds	r7, #40	@ 0x28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	080248e4 	.word	0x080248e4
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <uxQueueMessagesWaiting+0x18>
 8003fc2:	f640 019b 	movw	r1, #2203	@ 0x89b
 8003fc6:	4807      	ldr	r0, [pc, #28]	@ (8003fe4 <uxQueueMessagesWaiting+0x30>)
 8003fc8:	f7fd fcd8 	bl	800197c <vAssertCalled>

    taskENTER_CRITICAL();
 8003fcc:	f002 fb38 	bl	8006640 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003fd6:	f002 fb5f 	bl	8006698 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8003fda:	68fb      	ldr	r3, [r7, #12]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	080248e4 	.word	0x080248e4

08003fe8 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d104      	bne.n	8004004 <uxQueueSpacesAvailable+0x1c>
 8003ffa:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 8003ffe:	4809      	ldr	r0, [pc, #36]	@ (8004024 <uxQueueSpacesAvailable+0x3c>)
 8004000:	f7fd fcbc 	bl	800197c <vAssertCalled>

    taskENTER_CRITICAL();
 8004004:	f002 fb1c 	bl	8006640 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 8004014:	f002 fb40 	bl	8006698 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8004018:	68bb      	ldr	r3, [r7, #8]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	080248e4 	.word	0x080248e4

08004028 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d104      	bne.n	8004044 <vQueueDelete+0x1c>
 800403a:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800403e:	4806      	ldr	r0, [pc, #24]	@ (8004058 <vQueueDelete+0x30>)
 8004040:	f7fd fc9c 	bl	800197c <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f979 	bl	800433c <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f002 fcce 	bl	80069ec <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	080248e4 	.word	0x080248e4

0800405c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1c3 0307 	rsb	r3, r3, #7
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e001      	b.n	800407e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800407e:	68fb      	ldr	r3, [r7, #12]
    }
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10d      	bne.n	80040c6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d14d      	bne.n	800414e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 fb20 	bl	80056fc <xTaskPriorityDisinherit>
 80040bc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	e043      	b.n	800414e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d119      	bne.n	8004100 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6858      	ldr	r0, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	461a      	mov	r2, r3
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	f01e fcd0 	bl	8022a7c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e4:	441a      	add	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d32b      	bcc.n	800414e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	e026      	b.n	800414e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68d8      	ldr	r0, [r3, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	461a      	mov	r2, r3
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	f01e fcb6 	bl	8022a7c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	425b      	negs	r3, r3
 800411a:	441a      	add	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d207      	bcs.n	800413c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	425b      	negs	r3, r3
 8004136:	441a      	add	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d105      	bne.n	800414e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	3b01      	subs	r3, #1
 800414c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004156:	697b      	ldr	r3, [r7, #20]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	441a      	add	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	429a      	cmp	r2, r3
 800418a:	d303      	bcc.n	8004194 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68d9      	ldr	r1, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	461a      	mov	r2, r3
 800419e:	6838      	ldr	r0, [r7, #0]
 80041a0:	f01e fc6c 	bl	8022a7c <memcpy>
    }
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80041b4:	f002 fa44 	bl	8006640 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041be:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80041c0:	e011      	b.n	80041e6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d012      	beq.n	80041f0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3324      	adds	r3, #36	@ 0x24
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 feec 	bl	8004fac <xTaskRemoveFromEventList>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80041da:	f001 f903 	bl	80053e4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80041e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	dce9      	bgt.n	80041c2 <prvUnlockQueue+0x16>
 80041ee:	e000      	b.n	80041f2 <prvUnlockQueue+0x46>
                    break;
 80041f0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	22ff      	movs	r2, #255	@ 0xff
 80041f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80041fa:	f002 fa4d 	bl	8006698 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80041fe:	f002 fa1f 	bl	8006640 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004208:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800420a:	e011      	b.n	8004230 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d012      	beq.n	800423a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3310      	adds	r3, #16
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fec7 	bl	8004fac <xTaskRemoveFromEventList>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004224:	f001 f8de 	bl	80053e4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004228:	7bbb      	ldrb	r3, [r7, #14]
 800422a:	3b01      	subs	r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004234:	2b00      	cmp	r3, #0
 8004236:	dce9      	bgt.n	800420c <prvUnlockQueue+0x60>
 8004238:	e000      	b.n	800423c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800423a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	22ff      	movs	r2, #255	@ 0xff
 8004240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004244:	f002 fa28 	bl	8006698 <vPortExitCritical>
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004258:	f002 f9f2 	bl	8006640 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004264:	2301      	movs	r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	e001      	b.n	800426e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800426e:	f002 fa13 	bl	8006698 <vPortExitCritical>

    return xReturn;
 8004272:	68fb      	ldr	r3, [r7, #12]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004284:	f002 f9dc 	bl	8006640 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004290:	429a      	cmp	r2, r3
 8004292:	d102      	bne.n	800429a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004294:	2301      	movs	r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e001      	b.n	800429e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800429e:	f002 f9fb 	bl	8006698 <vPortExitCritical>

    return xReturn;
 80042a2:	68fb      	ldr	r3, [r7, #12]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <vQueueAddToRegistry+0x1e>
 80042c0:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 80042c4:	481b      	ldr	r0, [pc, #108]	@ (8004334 <vQueueAddToRegistry+0x88>)
 80042c6:	f7fd fb59 	bl	800197c <vAssertCalled>

        if( pcQueueName != NULL )
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d024      	beq.n	800431a <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e01e      	b.n	8004314 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80042d6:	4a18      	ldr	r2, [pc, #96]	@ (8004338 <vQueueAddToRegistry+0x8c>)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d105      	bne.n	80042f2 <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4a13      	ldr	r2, [pc, #76]	@ (8004338 <vQueueAddToRegistry+0x8c>)
 80042ec:	4413      	add	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
                    break;
 80042f0:	e013      	b.n	800431a <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <vQueueAddToRegistry+0x62>
 80042f8:	4a0f      	ldr	r2, [pc, #60]	@ (8004338 <vQueueAddToRegistry+0x8c>)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d104      	bne.n	800430e <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4a0b      	ldr	r2, [pc, #44]	@ (8004338 <vQueueAddToRegistry+0x8c>)
 800430a:	4413      	add	r3, r2
 800430c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3301      	adds	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b07      	cmp	r3, #7
 8004318:	d9dd      	bls.n	80042d6 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	080248e4 	.word	0x080248e4
 8004338:	20000dcc 	.word	0x20000dcc

0800433c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d104      	bne.n	8004354 <vQueueUnregisterQueue+0x18>
 800434a:	f640 411d 	movw	r1, #3101	@ 0xc1d
 800434e:	4812      	ldr	r0, [pc, #72]	@ (8004398 <vQueueUnregisterQueue+0x5c>)
 8004350:	f7fd fb14 	bl	800197c <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	e016      	b.n	8004388 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800435a:	4a10      	ldr	r2, [pc, #64]	@ (800439c <vQueueUnregisterQueue+0x60>)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4413      	add	r3, r2
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	429a      	cmp	r2, r3
 8004368:	d10b      	bne.n	8004382 <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800436a:	4a0c      	ldr	r2, [pc, #48]	@ (800439c <vQueueUnregisterQueue+0x60>)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2100      	movs	r1, #0
 8004370:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004374:	4a09      	ldr	r2, [pc, #36]	@ (800439c <vQueueUnregisterQueue+0x60>)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	2200      	movs	r2, #0
 800437e:	605a      	str	r2, [r3, #4]
                break;
 8004380:	e006      	b.n	8004390 <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3301      	adds	r3, #1
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b07      	cmp	r3, #7
 800438c:	d9e5      	bls.n	800435a <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 800438e:	bf00      	nop
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	080248e4 	.word	0x080248e4
 800439c:	20000dcc 	.word	0x20000dcc

080043a0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	@ 0x28
 80043a4:	af04      	add	r7, sp, #16
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f002 fa46 	bl	8006844 <pvPortMalloc>
 80043b8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80043c0:	206c      	movs	r0, #108	@ 0x6c
 80043c2:	f002 fa3f 	bl	8006844 <pvPortMalloc>
 80043c6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80043ce:	226c      	movs	r2, #108	@ 0x6c
 80043d0:	2100      	movs	r1, #0
 80043d2:	6978      	ldr	r0, [r7, #20]
 80043d4:	f01e fc5f 	bl	8022c96 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80043de:	e005      	b.n	80043ec <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80043e0:	6938      	ldr	r0, [r7, #16]
 80043e2:	f002 fb03 	bl	80069ec <vPortFree>
 80043e6:	e001      	b.n	80043ec <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00d      	beq.n	800440e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043f2:	2300      	movs	r3, #0
 80043f4:	9303      	str	r3, [sp, #12]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	9302      	str	r3, [sp, #8]
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f829 	bl	8004460 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800440e:	697b      	ldr	r3, [r7, #20]
    }
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff ffb3 	bl	80043a0 <prvCreateTask>
 800443a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8004442:	6938      	ldr	r0, [r7, #16]
 8004444:	f000 f890 	bl	8004568 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004448:	2301      	movs	r3, #1
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e002      	b.n	8004454 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800444e:	f04f 33ff 	mov.w	r3, #4294967295
 8004452:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8004454:	697b      	ldr	r3, [r7, #20]
    }
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800446e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004470:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	461a      	mov	r2, r3
 8004478:	21a5      	movs	r1, #165	@ 0xa5
 800447a:	f01e fc0c 	bl	8022c96 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004488:	440b      	add	r3, r1
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f023 0307 	bic.w	r3, r3, #7
 8004496:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <prvInitialiseNewTask+0x4c>
 80044a2:	f240 712e 	movw	r1, #1838	@ 0x72e
 80044a6:	482f      	ldr	r0, [pc, #188]	@ (8004564 <prvInitialiseNewTask+0x104>)
 80044a8:	f7fd fa68 	bl	800197c <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01e      	beq.n	80044f0 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e012      	b.n	80044de <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	4413      	add	r3, r2
 80044be:	7819      	ldrb	r1, [r3, #0]
 80044c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	4413      	add	r3, r2
 80044c6:	3334      	adds	r3, #52	@ 0x34
 80044c8:	460a      	mov	r2, r1
 80044ca:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	4413      	add	r3, r2
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d006      	beq.n	80044e6 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	3301      	adds	r3, #1
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b0f      	cmp	r3, #15
 80044e2:	d9e9      	bls.n	80044b8 <prvInitialiseNewTask+0x58>
 80044e4:	e000      	b.n	80044e8 <prvInitialiseNewTask+0x88>
            {
                break;
 80044e6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	2b06      	cmp	r3, #6
 80044f4:	d904      	bls.n	8004500 <prvInitialiseNewTask+0xa0>
 80044f6:	f240 7164 	movw	r1, #1892	@ 0x764
 80044fa:	481a      	ldr	r0, [pc, #104]	@ (8004564 <prvInitialiseNewTask+0x104>)
 80044fc:	f7fd fa3e 	bl	800197c <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	2b06      	cmp	r3, #6
 8004504:	d901      	bls.n	800450a <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004506:	2306      	movs	r3, #6
 8004508:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	6a3a      	ldr	r2, [r7, #32]
 800450e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004512:	6a3a      	ldr	r2, [r7, #32]
 8004514:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004518:	3304      	adds	r3, #4
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff f8c0 	bl	80036a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	3318      	adds	r3, #24
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff f8bb 	bl	80036a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800452a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800452e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	f1c3 0207 	rsb	r2, r3, #7
 8004536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004538:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	68f9      	ldr	r1, [r7, #12]
 8004544:	6938      	ldr	r0, [r7, #16]
 8004546:	f001 ff43 	bl	80063d0 <pxPortInitialiseStack>
 800454a:	4602      	mov	r2, r0
 800454c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800455a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800455c:	bf00      	nop
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	08024908 	.word	0x08024908

08004568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8004570:	f002 f866 	bl	8006640 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8004574:	4b41      	ldr	r3, [pc, #260]	@ (800467c <prvAddNewTaskToReadyList+0x114>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3301      	adds	r3, #1
 800457a:	4a40      	ldr	r2, [pc, #256]	@ (800467c <prvAddNewTaskToReadyList+0x114>)
 800457c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800457e:	4b40      	ldr	r3, [pc, #256]	@ (8004680 <prvAddNewTaskToReadyList+0x118>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8004586:	4a3e      	ldr	r2, [pc, #248]	@ (8004680 <prvAddNewTaskToReadyList+0x118>)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800458c:	4b3b      	ldr	r3, [pc, #236]	@ (800467c <prvAddNewTaskToReadyList+0x114>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d110      	bne.n	80045b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8004594:	f000 ff4a 	bl	800542c <prvInitialiseTaskLists>
 8004598:	e00d      	b.n	80045b6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800459a:	4b3a      	ldr	r3, [pc, #232]	@ (8004684 <prvAddNewTaskToReadyList+0x11c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045a2:	4b37      	ldr	r3, [pc, #220]	@ (8004680 <prvAddNewTaskToReadyList+0x118>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d802      	bhi.n	80045b6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80045b0:	4a33      	ldr	r2, [pc, #204]	@ (8004680 <prvAddNewTaskToReadyList+0x118>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80045b6:	4b34      	ldr	r3, [pc, #208]	@ (8004688 <prvAddNewTaskToReadyList+0x120>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3301      	adds	r3, #1
 80045bc:	4a32      	ldr	r2, [pc, #200]	@ (8004688 <prvAddNewTaskToReadyList+0x120>)
 80045be:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045c0:	4b31      	ldr	r3, [pc, #196]	@ (8004688 <prvAddNewTaskToReadyList+0x120>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	2201      	movs	r2, #1
 80045ce:	409a      	lsls	r2, r3
 80045d0:	4b2e      	ldr	r3, [pc, #184]	@ (800468c <prvAddNewTaskToReadyList+0x124>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	4a2d      	ldr	r2, [pc, #180]	@ (800468c <prvAddNewTaskToReadyList+0x124>)
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045de:	492c      	ldr	r1, [pc, #176]	@ (8004690 <prvAddNewTaskToReadyList+0x128>)
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3304      	adds	r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	609a      	str	r2, [r3, #8]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	3204      	adds	r2, #4
 8004606:	605a      	str	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	1d1a      	adds	r2, r3, #4
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	609a      	str	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4a1c      	ldr	r2, [pc, #112]	@ (8004690 <prvAddNewTaskToReadyList+0x128>)
 800461e:	441a      	add	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	615a      	str	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004628:	4919      	ldr	r1, [pc, #100]	@ (8004690 <prvAddNewTaskToReadyList+0x128>)
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800463a:	1c59      	adds	r1, r3, #1
 800463c:	4814      	ldr	r0, [pc, #80]	@ (8004690 <prvAddNewTaskToReadyList+0x128>)
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4403      	add	r3, r0
 8004648:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800464a:	f002 f825 	bl	8006698 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800464e:	4b0d      	ldr	r3, [pc, #52]	@ (8004684 <prvAddNewTaskToReadyList+0x11c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00e      	beq.n	8004674 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8004656:	4b0a      	ldr	r3, [pc, #40]	@ (8004680 <prvAddNewTaskToReadyList+0x118>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	429a      	cmp	r2, r3
 8004662:	d207      	bcs.n	8004674 <prvAddNewTaskToReadyList+0x10c>
 8004664:	4b0b      	ldr	r3, [pc, #44]	@ (8004694 <prvAddNewTaskToReadyList+0x12c>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000f0c 	.word	0x20000f0c
 8004680:	20000e0c 	.word	0x20000e0c
 8004684:	20000f18 	.word	0x20000f18
 8004688:	20000f28 	.word	0x20000f28
 800468c:	20000f14 	.word	0x20000f14
 8004690:	20000e10 	.word	0x20000e10
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 80046a4:	f001 ffcc 	bl	8006640 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <vTaskDelete+0x1c>
 80046ae:	4b3e      	ldr	r3, [pc, #248]	@ (80047a8 <vTaskDelete+0x110>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	e000      	b.n	80046b6 <vTaskDelete+0x1e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff f859 	bl	8003774 <uxListRemove>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d115      	bne.n	80046f4 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046cc:	4937      	ldr	r1, [pc, #220]	@ (80047ac <vTaskDelete+0x114>)
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <vTaskDelete+0x5c>
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	2201      	movs	r2, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43da      	mvns	r2, r3
 80046ea:	4b31      	ldr	r3, [pc, #196]	@ (80047b0 <vTaskDelete+0x118>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4013      	ands	r3, r2
 80046f0:	4a2f      	ldr	r2, [pc, #188]	@ (80047b0 <vTaskDelete+0x118>)
 80046f2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d004      	beq.n	8004706 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	3318      	adds	r3, #24
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff f837 	bl	8003774 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8004706:	4b2b      	ldr	r3, [pc, #172]	@ (80047b4 <vTaskDelete+0x11c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3301      	adds	r3, #1
 800470c:	4a29      	ldr	r2, [pc, #164]	@ (80047b4 <vTaskDelete+0x11c>)
 800470e:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8004710:	4b25      	ldr	r3, [pc, #148]	@ (80047a8 <vTaskDelete+0x110>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	429a      	cmp	r2, r3
 8004718:	d101      	bne.n	800471e <vTaskDelete+0x86>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <vTaskDelete+0x88>
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8004722:	4b25      	ldr	r3, [pc, #148]	@ (80047b8 <vTaskDelete+0x120>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d010      	beq.n	800474c <vTaskDelete+0xb4>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	3304      	adds	r3, #4
 8004734:	4619      	mov	r1, r3
 8004736:	4821      	ldr	r0, [pc, #132]	@ (80047bc <vTaskDelete+0x124>)
 8004738:	f7fe ffbf 	bl	80036ba <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800473c:	4b20      	ldr	r3, [pc, #128]	@ (80047c0 <vTaskDelete+0x128>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3301      	adds	r3, #1
 8004742:	4a1f      	ldr	r2, [pc, #124]	@ (80047c0 <vTaskDelete+0x128>)
 8004744:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8004746:	2301      	movs	r3, #1
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e006      	b.n	800475a <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800474c:	4b1d      	ldr	r3, [pc, #116]	@ (80047c4 <vTaskDelete+0x12c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3b01      	subs	r3, #1
 8004752:	4a1c      	ldr	r2, [pc, #112]	@ (80047c4 <vTaskDelete+0x12c>)
 8004754:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8004756:	f000 fee7 	bl	8005528 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800475a:	f001 ff9d 	bl	8006698 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d002      	beq.n	800476a <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8004764:	6938      	ldr	r0, [r7, #16]
 8004766:	f000 fecf 	bl	8005508 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 800476a:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <vTaskDelete+0x120>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d015      	beq.n	800479e <vTaskDelete+0x106>
            {
                if( pxTCB == pxCurrentTCB )
 8004772:	4b0d      	ldr	r3, [pc, #52]	@ (80047a8 <vTaskDelete+0x110>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	429a      	cmp	r2, r3
 800477a:	d110      	bne.n	800479e <vTaskDelete+0x106>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 800477c:	4b12      	ldr	r3, [pc, #72]	@ (80047c8 <vTaskDelete+0x130>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d004      	beq.n	800478e <vTaskDelete+0xf6>
 8004784:	f640 1114 	movw	r1, #2324	@ 0x914
 8004788:	4810      	ldr	r0, [pc, #64]	@ (80047cc <vTaskDelete+0x134>)
 800478a:	f7fd f8f7 	bl	800197c <vAssertCalled>
                    taskYIELD_WITHIN_API();
 800478e:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <vTaskDelete+0x138>)
 8004790:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000e0c 	.word	0x20000e0c
 80047ac:	20000e10 	.word	0x20000e10
 80047b0:	20000f14 	.word	0x20000f14
 80047b4:	20000f28 	.word	0x20000f28
 80047b8:	20000f18 	.word	0x20000f18
 80047bc:	20000ee0 	.word	0x20000ee0
 80047c0:	20000ef4 	.word	0x20000ef4
 80047c4:	20000f0c 	.word	0x20000f0c
 80047c8:	20000f34 	.word	0x20000f34
 80047cc:	08024908 	.word	0x08024908
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d011      	beq.n	800480a <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 80047e6:	f000 f8ad 	bl	8004944 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80047ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <vTaskDelay+0x54>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d004      	beq.n	80047fc <vTaskDelay+0x28>
 80047f2:	f640 118e 	movw	r1, #2446	@ 0x98e
 80047f6:	480d      	ldr	r0, [pc, #52]	@ (800482c <vTaskDelay+0x58>)
 80047f8:	f7fd f8c0 	bl	800197c <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047fc:	2100      	movs	r1, #0
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 fd64 	bl	80062cc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004804:	f000 f8ac 	bl	8004960 <xTaskResumeAll>
 8004808:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d107      	bne.n	8004820 <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 8004810:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <vTaskDelay+0x5c>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000f34 	.word	0x20000f34
 800482c:	08024908 	.word	0x08024908
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	@ 0x28
 8004838:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800483a:	2301      	movs	r3, #1
 800483c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e011      	b.n	800486c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8004848:	4a1d      	ldr	r2, [pc, #116]	@ (80048c0 <prvCreateIdleTasks+0x8c>)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	4413      	add	r3, r2
 800484e:	7819      	ldrb	r1, [r3, #0]
 8004850:	463a      	mov	r2, r7
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	4413      	add	r3, r2
 8004856:	460a      	mov	r2, r1
 8004858:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800485a:	463a      	mov	r2, r7
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	4413      	add	r3, r2
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d006      	beq.n	8004874 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	3301      	adds	r3, #1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b0f      	cmp	r3, #15
 8004870:	ddea      	ble.n	8004848 <prvCreateIdleTasks+0x14>
 8004872:	e000      	b.n	8004876 <prvCreateIdleTasks+0x42>
        {
            break;
 8004874:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004876:	2300      	movs	r3, #0
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	e016      	b.n	80048aa <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800487c:	4b11      	ldr	r3, [pc, #68]	@ (80048c4 <prvCreateIdleTasks+0x90>)
 800487e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4a10      	ldr	r2, [pc, #64]	@ (80048c8 <prvCreateIdleTasks+0x94>)
 8004886:	4413      	add	r3, r2
 8004888:	4639      	mov	r1, r7
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	2300      	movs	r3, #0
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2300      	movs	r3, #0
 8004892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004896:	6938      	ldr	r0, [r7, #16]
 8004898:	f7ff fdbe 	bl	8004418 <xTaskCreate>
 800489c:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d006      	beq.n	80048b2 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	dde5      	ble.n	800487c <prvCreateIdleTasks+0x48>
 80048b0:	e000      	b.n	80048b4 <prvCreateIdleTasks+0x80>
        {
            break;
 80048b2:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80048b4:	69fb      	ldr	r3, [r7, #28]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3720      	adds	r7, #32
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	0802492c 	.word	0x0802492c
 80048c4:	080053fd 	.word	0x080053fd
 80048c8:	20000f30 	.word	0x20000f30

080048cc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80048d2:	f7ff ffaf 	bl	8004834 <prvCreateIdleTasks>
 80048d6:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d118      	bne.n	8004910 <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80048de:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80048e2:	b672      	cpsid	i
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	b662      	cpsie	i
 80048f2:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80048f4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80048f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004930 <vTaskStartScheduler+0x64>)
 80048f8:	f04f 32ff 	mov.w	r2, #4294967295
 80048fc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80048fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004934 <vTaskStartScheduler+0x68>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004904:	4b0c      	ldr	r3, [pc, #48]	@ (8004938 <vTaskStartScheduler+0x6c>)
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800490a:	f001 fdeb 	bl	80064e4 <xPortStartScheduler>
 800490e:	e008      	b.n	8004922 <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d104      	bne.n	8004922 <vTaskStartScheduler+0x56>
 8004918:	f640 61a9 	movw	r1, #3753	@ 0xea9
 800491c:	4807      	ldr	r0, [pc, #28]	@ (800493c <vTaskStartScheduler+0x70>)
 800491e:	f7fd f82d 	bl	800197c <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004922:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <vTaskStartScheduler+0x74>)
 8004924:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000f2c 	.word	0x20000f2c
 8004934:	20000f18 	.word	0x20000f18
 8004938:	20000f10 	.word	0x20000f10
 800493c:	08024908 	.word	0x08024908
 8004940:	20000008 	.word	0x20000008

08004944 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004948:	4b04      	ldr	r3, [pc, #16]	@ (800495c <vTaskSuspendAll+0x18>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3301      	adds	r3, #1
 800494e:	4a03      	ldr	r2, [pc, #12]	@ (800495c <vTaskSuspendAll+0x18>)
 8004950:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8004952:	bf00      	nop
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000f34 	.word	0x20000f34

08004960 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800496e:	f001 fe67 	bl	8006640 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8004976:	4b72      	ldr	r3, [pc, #456]	@ (8004b40 <xTaskResumeAll+0x1e0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <xTaskResumeAll+0x28>
 800497e:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8004982:	4870      	ldr	r0, [pc, #448]	@ (8004b44 <xTaskResumeAll+0x1e4>)
 8004984:	f7fc fffa 	bl	800197c <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8004988:	4b6d      	ldr	r3, [pc, #436]	@ (8004b40 <xTaskResumeAll+0x1e0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3b01      	subs	r3, #1
 800498e:	4a6c      	ldr	r2, [pc, #432]	@ (8004b40 <xTaskResumeAll+0x1e0>)
 8004990:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004992:	4b6b      	ldr	r3, [pc, #428]	@ (8004b40 <xTaskResumeAll+0x1e0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f040 80ca 	bne.w	8004b30 <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800499c:	4b6a      	ldr	r3, [pc, #424]	@ (8004b48 <xTaskResumeAll+0x1e8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80c5 	beq.w	8004b30 <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049a6:	e08e      	b.n	8004ac6 <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049a8:	4b68      	ldr	r3, [pc, #416]	@ (8004b4c <xTaskResumeAll+0x1ec>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	6a12      	ldr	r2, [r2, #32]
 80049be:	609a      	str	r2, [r3, #8]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	69d2      	ldr	r2, [r2, #28]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3318      	adds	r3, #24
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d103      	bne.n	80049de <xTaskResumeAll+0x7e>
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	6a1a      	ldr	r2, [r3, #32]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2200      	movs	r2, #0
 80049e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	1e5a      	subs	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	68d2      	ldr	r2, [r2, #12]
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	6892      	ldr	r2, [r2, #8]
 8004a06:	605a      	str	r2, [r3, #4]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d103      	bne.n	8004a1c <xTaskResumeAll+0xbc>
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	605a      	str	r2, [r3, #4]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	615a      	str	r2, [r3, #20]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	1e5a      	subs	r2, r3, #1
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	2201      	movs	r2, #1
 8004a32:	409a      	lsls	r2, r3
 8004a34:	4b46      	ldr	r3, [pc, #280]	@ (8004b50 <xTaskResumeAll+0x1f0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	4a45      	ldr	r2, [pc, #276]	@ (8004b50 <xTaskResumeAll+0x1f0>)
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a42:	4944      	ldr	r1, [pc, #272]	@ (8004b54 <xTaskResumeAll+0x1f4>)
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	3304      	adds	r3, #4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	609a      	str	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	60da      	str	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	3204      	adds	r2, #4
 8004a6a:	605a      	str	r2, [r3, #4]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	1d1a      	adds	r2, r3, #4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	609a      	str	r2, [r3, #8]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4a34      	ldr	r2, [pc, #208]	@ (8004b54 <xTaskResumeAll+0x1f4>)
 8004a82:	441a      	add	r2, r3
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	615a      	str	r2, [r3, #20]
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8c:	4931      	ldr	r1, [pc, #196]	@ (8004b54 <xTaskResumeAll+0x1f4>)
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	440b      	add	r3, r1
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a9e:	1c59      	adds	r1, r3, #1
 8004aa0:	482c      	ldr	r0, [pc, #176]	@ (8004b54 <xTaskResumeAll+0x1f4>)
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4403      	add	r3, r0
 8004aac:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab2:	4b29      	ldr	r3, [pc, #164]	@ (8004b58 <xTaskResumeAll+0x1f8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d904      	bls.n	8004ac6 <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8004abc:	4a27      	ldr	r2, [pc, #156]	@ (8004b5c <xTaskResumeAll+0x1fc>)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ac6:	4b21      	ldr	r3, [pc, #132]	@ (8004b4c <xTaskResumeAll+0x1ec>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f47f af6c 	bne.w	80049a8 <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004ad6:	f000 fd27 	bl	8005528 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ada:	4b21      	ldr	r3, [pc, #132]	@ (8004b60 <xTaskResumeAll+0x200>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d012      	beq.n	8004b0c <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004ae6:	f000 f86d 	bl	8004bc4 <xTaskIncrementTick>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004af0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b5c <xTaskResumeAll+0x1fc>)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2101      	movs	r1, #1
 8004af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1ef      	bne.n	8004ae6 <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 8004b06:	4b16      	ldr	r3, [pc, #88]	@ (8004b60 <xTaskResumeAll+0x200>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004b0c:	4a13      	ldr	r2, [pc, #76]	@ (8004b5c <xTaskResumeAll+0x1fc>)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00b      	beq.n	8004b30 <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b58 <xTaskResumeAll+0x1f8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <xTaskResumeAll+0x204>)
 8004b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b30:	f001 fdb2 	bl	8006698 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8004b34:	69bb      	ldr	r3, [r7, #24]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000f34 	.word	0x20000f34
 8004b44:	08024908 	.word	0x08024908
 8004b48:	20000f0c 	.word	0x20000f0c
 8004b4c:	20000ecc 	.word	0x20000ecc
 8004b50:	20000f14 	.word	0x20000f14
 8004b54:	20000e10 	.word	0x20000e10
 8004b58:	20000e0c 	.word	0x20000e0c
 8004b5c:	20000f20 	.word	0x20000f20
 8004b60:	20000f1c 	.word	0x20000f1c
 8004b64:	e000ed04 	.word	0xe000ed04

08004b68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004b6e:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <xTaskGetTickCount+0x1c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004b74:	687b      	ldr	r3, [r7, #4]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000f10 	.word	0x20000f10

08004b88 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d102      	bne.n	8004b9c <pcTaskGetName+0x14>
 8004b96:	4b09      	ldr	r3, [pc, #36]	@ (8004bbc <pcTaskGetName+0x34>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	e000      	b.n	8004b9e <pcTaskGetName+0x16>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d104      	bne.n	8004bb0 <pcTaskGetName+0x28>
 8004ba6:	f241 0155 	movw	r1, #4181	@ 0x1055
 8004baa:	4805      	ldr	r0, [pc, #20]	@ (8004bc0 <pcTaskGetName+0x38>)
 8004bac:	f7fc fee6 	bl	800197c <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3334      	adds	r3, #52	@ 0x34
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000e0c 	.word	0x20000e0c
 8004bc0:	08024908 	.word	0x08024908

08004bc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004bce:	4b7b      	ldr	r3, [pc, #492]	@ (8004dbc <xTaskIncrementTick+0x1f8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f040 80e8 	bne.w	8004da8 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bd8:	4b79      	ldr	r3, [pc, #484]	@ (8004dc0 <xTaskIncrementTick+0x1fc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004be0:	4a77      	ldr	r2, [pc, #476]	@ (8004dc0 <xTaskIncrementTick+0x1fc>)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d11a      	bne.n	8004c22 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8004bec:	4b75      	ldr	r3, [pc, #468]	@ (8004dc4 <xTaskIncrementTick+0x200>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d004      	beq.n	8004c00 <xTaskIncrementTick+0x3c>
 8004bf6:	f241 215f 	movw	r1, #4703	@ 0x125f
 8004bfa:	4873      	ldr	r0, [pc, #460]	@ (8004dc8 <xTaskIncrementTick+0x204>)
 8004bfc:	f7fc febe 	bl	800197c <vAssertCalled>
 8004c00:	4b70      	ldr	r3, [pc, #448]	@ (8004dc4 <xTaskIncrementTick+0x200>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	4b71      	ldr	r3, [pc, #452]	@ (8004dcc <xTaskIncrementTick+0x208>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc4 <xTaskIncrementTick+0x200>)
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4a6f      	ldr	r2, [pc, #444]	@ (8004dcc <xTaskIncrementTick+0x208>)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b6e      	ldr	r3, [pc, #440]	@ (8004dd0 <xTaskIncrementTick+0x20c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	4a6d      	ldr	r2, [pc, #436]	@ (8004dd0 <xTaskIncrementTick+0x20c>)
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	f000 fc83 	bl	8005528 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004c22:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd4 <xTaskIncrementTick+0x210>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	f0c0 80a8 	bcc.w	8004d7e <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c2e:	4b65      	ldr	r3, [pc, #404]	@ (8004dc4 <xTaskIncrementTick+0x200>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d104      	bne.n	8004c42 <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004c38:	4b66      	ldr	r3, [pc, #408]	@ (8004dd4 <xTaskIncrementTick+0x210>)
 8004c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3e:	601a      	str	r2, [r3, #0]
                    break;
 8004c40:	e09d      	b.n	8004d7e <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c42:	4b60      	ldr	r3, [pc, #384]	@ (8004dc4 <xTaskIncrementTick+0x200>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d203      	bcs.n	8004c62 <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004c5a:	4a5e      	ldr	r2, [pc, #376]	@ (8004dd4 <xTaskIncrementTick+0x210>)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6013      	str	r3, [r2, #0]
                        break;
 8004c60:	e08d      	b.n	8004d7e <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	68d2      	ldr	r2, [r2, #12]
 8004c70:	609a      	str	r2, [r3, #8]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	6892      	ldr	r2, [r2, #8]
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	3304      	adds	r3, #4
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d103      	bne.n	8004c90 <xTaskIncrementTick+0xcc>
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	605a      	str	r2, [r3, #4]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2200      	movs	r2, #0
 8004c94:	615a      	str	r2, [r3, #20]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	1e5a      	subs	r2, r3, #1
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01e      	beq.n	8004ce6 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	6a12      	ldr	r2, [r2, #32]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	69d2      	ldr	r2, [r2, #28]
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	3318      	adds	r3, #24
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d103      	bne.n	8004cd6 <xTaskIncrementTick+0x112>
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	6a1a      	ldr	r2, [r3, #32]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	1e5a      	subs	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cea:	2201      	movs	r2, #1
 8004cec:	409a      	lsls	r2, r3
 8004cee:	4b3a      	ldr	r3, [pc, #232]	@ (8004dd8 <xTaskIncrementTick+0x214>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	4a38      	ldr	r2, [pc, #224]	@ (8004dd8 <xTaskIncrementTick+0x214>)
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfc:	4937      	ldr	r1, [pc, #220]	@ (8004ddc <xTaskIncrementTick+0x218>)
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	3304      	adds	r3, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	60da      	str	r2, [r3, #12]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	3204      	adds	r2, #4
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1d1a      	adds	r2, r3, #4
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	609a      	str	r2, [r3, #8]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4a28      	ldr	r2, [pc, #160]	@ (8004ddc <xTaskIncrementTick+0x218>)
 8004d3c:	441a      	add	r2, r3
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	615a      	str	r2, [r3, #20]
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d46:	4925      	ldr	r1, [pc, #148]	@ (8004ddc <xTaskIncrementTick+0x218>)
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d58:	1c59      	adds	r1, r3, #1
 8004d5a:	4820      	ldr	r0, [pc, #128]	@ (8004ddc <xTaskIncrementTick+0x218>)
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4403      	add	r3, r0
 8004d66:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004de0 <xTaskIncrementTick+0x21c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	429a      	cmp	r2, r3
 8004d74:	f67f af5b 	bls.w	8004c2e <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d7c:	e757      	b.n	8004c2e <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004d7e:	4b18      	ldr	r3, [pc, #96]	@ (8004de0 <xTaskIncrementTick+0x21c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d84:	4915      	ldr	r1, [pc, #84]	@ (8004ddc <xTaskIncrementTick+0x218>)
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d901      	bls.n	8004d9a <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004d9a:	4b12      	ldr	r3, [pc, #72]	@ (8004de4 <xTaskIncrementTick+0x220>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8004da2:	2301      	movs	r3, #1
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	e004      	b.n	8004db2 <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004da8:	4b0f      	ldr	r3, [pc, #60]	@ (8004de8 <xTaskIncrementTick+0x224>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3301      	adds	r3, #1
 8004dae:	4a0e      	ldr	r2, [pc, #56]	@ (8004de8 <xTaskIncrementTick+0x224>)
 8004db0:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004db2:	69fb      	ldr	r3, [r7, #28]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000f34 	.word	0x20000f34
 8004dc0:	20000f10 	.word	0x20000f10
 8004dc4:	20000ec4 	.word	0x20000ec4
 8004dc8:	08024908 	.word	0x08024908
 8004dcc:	20000ec8 	.word	0x20000ec8
 8004dd0:	20000f24 	.word	0x20000f24
 8004dd4:	20000f2c 	.word	0x20000f2c
 8004dd8:	20000f14 	.word	0x20000f14
 8004ddc:	20000e10 	.word	0x20000e10
 8004de0:	20000e0c 	.word	0x20000e0c
 8004de4:	20000f20 	.word	0x20000f20
 8004de8:	20000f1c 	.word	0x20000f1c

08004dec <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004df2:	4b30      	ldr	r3, [pc, #192]	@ (8004eb4 <vTaskSwitchContext+0xc8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004eb8 <vTaskSwitchContext+0xcc>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004e00:	e053      	b.n	8004eaa <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 8004e02:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb8 <vTaskSwitchContext+0xcc>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8004e08:	f7fc fdb0 	bl	800196c <ulGetRunTimeCounterValue>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004ebc <vTaskSwitchContext+0xd0>)
 8004e10:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8004e12:	4b2a      	ldr	r3, [pc, #168]	@ (8004ebc <vTaskSwitchContext+0xd0>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <vTaskSwitchContext+0xd4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d909      	bls.n	8004e32 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 8004e1e:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <vTaskSwitchContext+0xd0>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <vTaskSwitchContext+0xd4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1ad1      	subs	r1, r2, r3
 8004e28:	4b26      	ldr	r3, [pc, #152]	@ (8004ec4 <vTaskSwitchContext+0xd8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004e2e:	440a      	add	r2, r1
 8004e30:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8004e32:	4b22      	ldr	r3, [pc, #136]	@ (8004ebc <vTaskSwitchContext+0xd0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a22      	ldr	r2, [pc, #136]	@ (8004ec0 <vTaskSwitchContext+0xd4>)
 8004e38:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e3a:	4b23      	ldr	r3, [pc, #140]	@ (8004ec8 <vTaskSwitchContext+0xdc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	fab3 f383 	clz	r3, r3
 8004e46:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f1c3 031f 	rsb	r3, r3, #31
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	491e      	ldr	r1, [pc, #120]	@ (8004ecc <vTaskSwitchContext+0xe0>)
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <vTaskSwitchContext+0x82>
 8004e64:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8004e68:	4819      	ldr	r0, [pc, #100]	@ (8004ed0 <vTaskSwitchContext+0xe4>)
 8004e6a:	f7fc fd87 	bl	800197c <vAssertCalled>
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4a14      	ldr	r2, [pc, #80]	@ (8004ecc <vTaskSwitchContext+0xe0>)
 8004e7a:	4413      	add	r3, r2
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	3308      	adds	r3, #8
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d103      	bne.n	8004e9c <vTaskSwitchContext+0xb0>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	605a      	str	r2, [r3, #4]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	4a08      	ldr	r2, [pc, #32]	@ (8004ec4 <vTaskSwitchContext+0xd8>)
 8004ea4:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004ea6:	4b07      	ldr	r3, [pc, #28]	@ (8004ec4 <vTaskSwitchContext+0xd8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
    }
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000f34 	.word	0x20000f34
 8004eb8:	20000f20 	.word	0x20000f20
 8004ebc:	20000f3c 	.word	0x20000f3c
 8004ec0:	20000f38 	.word	0x20000f38
 8004ec4:	20000e0c 	.word	0x20000e0c
 8004ec8:	20000f14 	.word	0x20000f14
 8004ecc:	20000e10 	.word	0x20000e10
 8004ed0:	08024908 	.word	0x08024908

08004ed4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d104      	bne.n	8004eee <vTaskPlaceOnEventList+0x1a>
 8004ee4:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8004ee8:	4808      	ldr	r0, [pc, #32]	@ (8004f0c <vTaskPlaceOnEventList+0x38>)
 8004eea:	f7fc fd47 	bl	800197c <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004eee:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <vTaskPlaceOnEventList+0x3c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3318      	adds	r3, #24
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fe fc03 	bl	8003702 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004efc:	2101      	movs	r1, #1
 8004efe:	6838      	ldr	r0, [r7, #0]
 8004f00:	f001 f9e4 	bl	80062cc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8004f04:	bf00      	nop
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	08024908 	.word	0x08024908
 8004f10:	20000e0c 	.word	0x20000e0c

08004f14 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <vTaskPlaceOnUnorderedEventList+0x1c>
 8004f26:	f241 419e 	movw	r1, #5278	@ 0x149e
 8004f2a:	481d      	ldr	r0, [pc, #116]	@ (8004fa0 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8004f2c:	f7fc fd26 	bl	800197c <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004f30:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa4 <vTaskPlaceOnUnorderedEventList+0x90>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <vTaskPlaceOnUnorderedEventList+0x2e>
 8004f38:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 8004f3c:	4818      	ldr	r0, [pc, #96]	@ (8004fa0 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8004f3e:	f7fc fd1d 	bl	800197c <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004f42:	4b19      	ldr	r3, [pc, #100]	@ (8004fa8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004f4c:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	4b14      	ldr	r3, [pc, #80]	@ (8004fa8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	61da      	str	r2, [r3, #28]
 8004f5c:	4b12      	ldr	r3, [pc, #72]	@ (8004fa8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	6892      	ldr	r2, [r2, #8]
 8004f64:	621a      	str	r2, [r3, #32]
 8004f66:	4b10      	ldr	r3, [pc, #64]	@ (8004fa8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	3218      	adds	r2, #24
 8004f70:	605a      	str	r2, [r3, #4]
 8004f72:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f103 0218 	add.w	r2, r3, #24
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f90:	2101      	movs	r1, #1
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 f99a 	bl	80062cc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8004f98:	bf00      	nop
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	08024908 	.word	0x08024908
 8004fa4:	20000f34 	.word	0x20000f34
 8004fa8:	20000e0c 	.word	0x20000e0c

08004fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <xTaskRemoveFromEventList+0x20>
 8004fc2:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 8004fc6:	485b      	ldr	r0, [pc, #364]	@ (8005134 <xTaskRemoveFromEventList+0x188>)
 8004fc8:	f7fc fcd8 	bl	800197c <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	6a12      	ldr	r2, [r2, #32]
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	69d2      	ldr	r2, [r2, #28]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	3318      	adds	r3, #24
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d103      	bne.n	8004ffa <xTaskRemoveFromEventList+0x4e>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	6a1a      	ldr	r2, [r3, #32]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	629a      	str	r2, [r3, #40]	@ 0x28
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	1e5a      	subs	r2, r3, #1
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800500a:	4b4b      	ldr	r3, [pc, #300]	@ (8005138 <xTaskRemoveFromEventList+0x18c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d160      	bne.n	80050d4 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	68d2      	ldr	r2, [r2, #12]
 8005020:	609a      	str	r2, [r3, #8]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	6892      	ldr	r2, [r2, #8]
 800502a:	605a      	str	r2, [r3, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	3304      	adds	r3, #4
 8005034:	429a      	cmp	r2, r3
 8005036:	d103      	bne.n	8005040 <xTaskRemoveFromEventList+0x94>
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	605a      	str	r2, [r3, #4]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2200      	movs	r2, #0
 8005044:	615a      	str	r2, [r3, #20]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1e5a      	subs	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	2201      	movs	r2, #1
 8005056:	409a      	lsls	r2, r3
 8005058:	4b38      	ldr	r3, [pc, #224]	@ (800513c <xTaskRemoveFromEventList+0x190>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4313      	orrs	r3, r2
 800505e:	4a37      	ldr	r2, [pc, #220]	@ (800513c <xTaskRemoveFromEventList+0x190>)
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005066:	4936      	ldr	r1, [pc, #216]	@ (8005140 <xTaskRemoveFromEventList+0x194>)
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	3304      	adds	r3, #4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	609a      	str	r2, [r3, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	60da      	str	r2, [r3, #12]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	3204      	adds	r2, #4
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	1d1a      	adds	r2, r3, #4
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4a26      	ldr	r2, [pc, #152]	@ (8005140 <xTaskRemoveFromEventList+0x194>)
 80050a6:	441a      	add	r2, r3
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	615a      	str	r2, [r3, #20]
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b0:	4923      	ldr	r1, [pc, #140]	@ (8005140 <xTaskRemoveFromEventList+0x194>)
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80050c2:	1c59      	adds	r1, r3, #1
 80050c4:	481e      	ldr	r0, [pc, #120]	@ (8005140 <xTaskRemoveFromEventList+0x194>)
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4403      	add	r3, r0
 80050d0:	6019      	str	r1, [r3, #0]
 80050d2:	e01b      	b.n	800510c <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005144 <xTaskRemoveFromEventList+0x198>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	61da      	str	r2, [r3, #28]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	621a      	str	r2, [r3, #32]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	3218      	adds	r2, #24
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	f103 0218 	add.w	r2, r3, #24
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	609a      	str	r2, [r3, #8]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4a11      	ldr	r2, [pc, #68]	@ (8005144 <xTaskRemoveFromEventList+0x198>)
 8005100:	629a      	str	r2, [r3, #40]	@ 0x28
 8005102:	4b10      	ldr	r3, [pc, #64]	@ (8005144 <xTaskRemoveFromEventList+0x198>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3301      	adds	r3, #1
 8005108:	4a0e      	ldr	r2, [pc, #56]	@ (8005144 <xTaskRemoveFromEventList+0x198>)
 800510a:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005110:	4b0d      	ldr	r3, [pc, #52]	@ (8005148 <xTaskRemoveFromEventList+0x19c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	429a      	cmp	r2, r3
 8005118:	d905      	bls.n	8005126 <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800511a:	2301      	movs	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800511e:	4b0b      	ldr	r3, [pc, #44]	@ (800514c <xTaskRemoveFromEventList+0x1a0>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	e001      	b.n	800512a <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 800512a:	69fb      	ldr	r3, [r7, #28]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3720      	adds	r7, #32
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	08024908 	.word	0x08024908
 8005138:	20000f34 	.word	0x20000f34
 800513c:	20000f14 	.word	0x20000f14
 8005140:	20000e10 	.word	0x20000e10
 8005144:	20000ecc 	.word	0x20000ecc
 8005148:	20000e0c 	.word	0x20000e0c
 800514c:	20000f20 	.word	0x20000f20

08005150 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800515a:	4b52      	ldr	r3, [pc, #328]	@ (80052a4 <vTaskRemoveFromUnorderedEventList+0x154>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <vTaskRemoveFromUnorderedEventList+0x1c>
 8005162:	f241 5143 	movw	r1, #5443	@ 0x1543
 8005166:	4850      	ldr	r0, [pc, #320]	@ (80052a8 <vTaskRemoveFromUnorderedEventList+0x158>)
 8005168:	f7fc fc08 	bl	800197c <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d104      	bne.n	800518c <vTaskRemoveFromUnorderedEventList+0x3c>
 8005182:	f241 514e 	movw	r1, #5454	@ 0x154e
 8005186:	4848      	ldr	r0, [pc, #288]	@ (80052a8 <vTaskRemoveFromUnorderedEventList+0x158>)
 8005188:	f7fc fbf8 	bl	800197c <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6892      	ldr	r2, [r2, #8]
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6852      	ldr	r2, [r2, #4]
 80051a4:	605a      	str	r2, [r3, #4]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d103      	bne.n	80051b8 <vTaskRemoveFromUnorderedEventList+0x68>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	605a      	str	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	611a      	str	r2, [r3, #16]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	68d2      	ldr	r2, [r2, #12]
 80051d6:	609a      	str	r2, [r3, #8]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	6892      	ldr	r2, [r2, #8]
 80051e0:	605a      	str	r2, [r3, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	3304      	adds	r3, #4
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d103      	bne.n	80051f6 <vTaskRemoveFromUnorderedEventList+0xa6>
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2200      	movs	r2, #0
 80051fa:	615a      	str	r2, [r3, #20]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	1e5a      	subs	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	2201      	movs	r2, #1
 800520c:	409a      	lsls	r2, r3
 800520e:	4b27      	ldr	r3, [pc, #156]	@ (80052ac <vTaskRemoveFromUnorderedEventList+0x15c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4313      	orrs	r3, r2
 8005214:	4a25      	ldr	r2, [pc, #148]	@ (80052ac <vTaskRemoveFromUnorderedEventList+0x15c>)
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521c:	4924      	ldr	r1, [pc, #144]	@ (80052b0 <vTaskRemoveFromUnorderedEventList+0x160>)
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	3304      	adds	r3, #4
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	60da      	str	r2, [r3, #12]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	3204      	adds	r2, #4
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	1d1a      	adds	r2, r3, #4
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	609a      	str	r2, [r3, #8]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4a15      	ldr	r2, [pc, #84]	@ (80052b0 <vTaskRemoveFromUnorderedEventList+0x160>)
 800525c:	441a      	add	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	615a      	str	r2, [r3, #20]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005266:	4912      	ldr	r1, [pc, #72]	@ (80052b0 <vTaskRemoveFromUnorderedEventList+0x160>)
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005278:	1c59      	adds	r1, r3, #1
 800527a:	480d      	ldr	r0, [pc, #52]	@ (80052b0 <vTaskRemoveFromUnorderedEventList+0x160>)
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4403      	add	r3, r0
 8005286:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528c:	4b09      	ldr	r3, [pc, #36]	@ (80052b4 <vTaskRemoveFromUnorderedEventList+0x164>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	429a      	cmp	r2, r3
 8005294:	d902      	bls.n	800529c <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8005296:	4b08      	ldr	r3, [pc, #32]	@ (80052b8 <vTaskRemoveFromUnorderedEventList+0x168>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 800529c:	bf00      	nop
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	20000f34 	.word	0x20000f34
 80052a8:	08024908 	.word	0x08024908
 80052ac:	20000f14 	.word	0x20000f14
 80052b0:	20000e10 	.word	0x20000e10
 80052b4:	20000e0c 	.word	0x20000e0c
 80052b8:	20000f20 	.word	0x20000f20

080052bc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d104      	bne.n	80052d4 <vTaskSetTimeOutState+0x18>
 80052ca:	f241 5186 	movw	r1, #5510	@ 0x1586
 80052ce:	4809      	ldr	r0, [pc, #36]	@ (80052f4 <vTaskSetTimeOutState+0x38>)
 80052d0:	f7fc fb54 	bl	800197c <vAssertCalled>
    taskENTER_CRITICAL();
 80052d4:	f001 f9b4 	bl	8006640 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052d8:	4b07      	ldr	r3, [pc, #28]	@ (80052f8 <vTaskSetTimeOutState+0x3c>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 80052e0:	4b06      	ldr	r3, [pc, #24]	@ (80052fc <vTaskSetTimeOutState+0x40>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 80052e8:	f001 f9d6 	bl	8006698 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 80052ec:	bf00      	nop
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	08024908 	.word	0x08024908
 80052f8:	20000f24 	.word	0x20000f24
 80052fc:	20000f10 	.word	0x20000f10

08005300 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005308:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <vTaskInternalSetTimeOutState+0x24>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <vTaskInternalSetTimeOutState+0x28>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	20000f24 	.word	0x20000f24
 8005328:	20000f10 	.word	0x20000f10

0800532c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <xTaskCheckForTimeOut+0x1a>
 800533c:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8005340:	4825      	ldr	r0, [pc, #148]	@ (80053d8 <xTaskCheckForTimeOut+0xac>)
 8005342:	f7fc fb1b 	bl	800197c <vAssertCalled>
    configASSERT( pxTicksToWait );
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <xTaskCheckForTimeOut+0x2a>
 800534c:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 8005350:	4821      	ldr	r0, [pc, #132]	@ (80053d8 <xTaskCheckForTimeOut+0xac>)
 8005352:	f7fc fb13 	bl	800197c <vAssertCalled>

    taskENTER_CRITICAL();
 8005356:	f001 f973 	bl	8006640 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800535a:	4b20      	ldr	r3, [pc, #128]	@ (80053dc <xTaskCheckForTimeOut+0xb0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d102      	bne.n	800537a <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e026      	b.n	80053c8 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4b18      	ldr	r3, [pc, #96]	@ (80053e0 <xTaskCheckForTimeOut+0xb4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d00a      	beq.n	800539c <xTaskCheckForTimeOut+0x70>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	429a      	cmp	r2, r3
 800538e:	d305      	bcc.n	800539c <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005390:	2301      	movs	r3, #1
 8005392:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e015      	b.n	80053c8 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d20b      	bcs.n	80053be <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1ad2      	subs	r2, r2, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff ffa4 	bl	8005300 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e004      	b.n	80053c8 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80053c8:	f001 f966 	bl	8006698 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80053cc:	697b      	ldr	r3, [r7, #20]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	08024908 	.word	0x08024908
 80053dc:	20000f10 	.word	0x20000f10
 80053e0:	20000f24 	.word	0x20000f24

080053e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80053e8:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <vTaskMissedYield+0x14>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80053ee:	bf00      	nop
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	20000f20 	.word	0x20000f20

080053fc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005404:	f000 f852 	bl	80054ac <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005408:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <prvIdleTask+0x28>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d9f9      	bls.n	8005404 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005410:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <prvIdleTask+0x2c>)
 8005412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005420:	e7f0      	b.n	8005404 <prvIdleTask+0x8>
 8005422:	bf00      	nop
 8005424:	20000e10 	.word	0x20000e10
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	e00c      	b.n	8005452 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4a12      	ldr	r2, [pc, #72]	@ (800548c <prvInitialiseTaskLists+0x60>)
 8005444:	4413      	add	r3, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe f90a 	bl	8003660 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3301      	adds	r3, #1
 8005450:	607b      	str	r3, [r7, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b06      	cmp	r3, #6
 8005456:	d9ef      	bls.n	8005438 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005458:	480d      	ldr	r0, [pc, #52]	@ (8005490 <prvInitialiseTaskLists+0x64>)
 800545a:	f7fe f901 	bl	8003660 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800545e:	480d      	ldr	r0, [pc, #52]	@ (8005494 <prvInitialiseTaskLists+0x68>)
 8005460:	f7fe f8fe 	bl	8003660 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005464:	480c      	ldr	r0, [pc, #48]	@ (8005498 <prvInitialiseTaskLists+0x6c>)
 8005466:	f7fe f8fb 	bl	8003660 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800546a:	480c      	ldr	r0, [pc, #48]	@ (800549c <prvInitialiseTaskLists+0x70>)
 800546c:	f7fe f8f8 	bl	8003660 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005470:	480b      	ldr	r0, [pc, #44]	@ (80054a0 <prvInitialiseTaskLists+0x74>)
 8005472:	f7fe f8f5 	bl	8003660 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005476:	4b0b      	ldr	r3, [pc, #44]	@ (80054a4 <prvInitialiseTaskLists+0x78>)
 8005478:	4a05      	ldr	r2, [pc, #20]	@ (8005490 <prvInitialiseTaskLists+0x64>)
 800547a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800547c:	4b0a      	ldr	r3, [pc, #40]	@ (80054a8 <prvInitialiseTaskLists+0x7c>)
 800547e:	4a05      	ldr	r2, [pc, #20]	@ (8005494 <prvInitialiseTaskLists+0x68>)
 8005480:	601a      	str	r2, [r3, #0]
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000e10 	.word	0x20000e10
 8005490:	20000e9c 	.word	0x20000e9c
 8005494:	20000eb0 	.word	0x20000eb0
 8005498:	20000ecc 	.word	0x20000ecc
 800549c:	20000ee0 	.word	0x20000ee0
 80054a0:	20000ef8 	.word	0x20000ef8
 80054a4:	20000ec4 	.word	0x20000ec4
 80054a8:	20000ec8 	.word	0x20000ec8

080054ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054b2:	e019      	b.n	80054e8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80054b4:	f001 f8c4 	bl	8006640 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80054b8:	4b10      	ldr	r3, [pc, #64]	@ (80054fc <prvCheckTasksWaitingTermination+0x50>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fe f955 	bl	8003774 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80054ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005500 <prvCheckTasksWaitingTermination+0x54>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005500 <prvCheckTasksWaitingTermination+0x54>)
 80054d2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80054d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005504 <prvCheckTasksWaitingTermination+0x58>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3b01      	subs	r3, #1
 80054da:	4a0a      	ldr	r2, [pc, #40]	@ (8005504 <prvCheckTasksWaitingTermination+0x58>)
 80054dc:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80054de:	f001 f8db 	bl	8006698 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f810 	bl	8005508 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054e8:	4b06      	ldr	r3, [pc, #24]	@ (8005504 <prvCheckTasksWaitingTermination+0x58>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e1      	bne.n	80054b4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000ee0 	.word	0x20000ee0
 8005500:	20000f0c 	.word	0x20000f0c
 8005504:	20000ef4 	.word	0x20000ef4

08005508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	4618      	mov	r0, r3
 8005516:	f001 fa69 	bl	80069ec <vPortFree>
            vPortFree( pxTCB );
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f001 fa66 	bl	80069ec <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552c:	4b0a      	ldr	r3, [pc, #40]	@ (8005558 <prvResetNextTaskUnblockTime+0x30>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005536:	4b09      	ldr	r3, [pc, #36]	@ (800555c <prvResetNextTaskUnblockTime+0x34>)
 8005538:	f04f 32ff 	mov.w	r2, #4294967295
 800553c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800553e:	e005      	b.n	800554c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005540:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <prvResetNextTaskUnblockTime+0x30>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a04      	ldr	r2, [pc, #16]	@ (800555c <prvResetNextTaskUnblockTime+0x34>)
 800554a:	6013      	str	r3, [r2, #0]
}
 800554c:	bf00      	nop
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000ec4 	.word	0x20000ec4
 800555c:	20000f2c 	.word	0x20000f2c

08005560 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8005566:	4b05      	ldr	r3, [pc, #20]	@ (800557c <xTaskGetCurrentTaskHandle+0x1c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 800556c:	687b      	ldr	r3, [r7, #4]
        }
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000e0c 	.word	0x20000e0c

08005580 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <xTaskGetSchedulerState+0x34>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800558e:	2301      	movs	r3, #1
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	e008      	b.n	80055a6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005594:	4b08      	ldr	r3, [pc, #32]	@ (80055b8 <xTaskGetSchedulerState+0x38>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800559c:	2302      	movs	r3, #2
 800559e:	607b      	str	r3, [r7, #4]
 80055a0:	e001      	b.n	80055a6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80055a2:	2300      	movs	r3, #0
 80055a4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80055a6:	687b      	ldr	r3, [r7, #4]
    }
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	20000f18 	.word	0x20000f18
 80055b8:	20000f34 	.word	0x20000f34

080055bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8089 	beq.w	80056e6 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d8:	4b45      	ldr	r3, [pc, #276]	@ (80056f0 <xTaskPriorityInherit+0x134>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	429a      	cmp	r2, r3
 80055e0:	d278      	bcs.n	80056d4 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	db06      	blt.n	80055f8 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 80055ea:	4b41      	ldr	r3, [pc, #260]	@ (80056f0 <xTaskPriorityInherit+0x134>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	f1c3 0207 	rsb	r2, r3, #7
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6959      	ldr	r1, [r3, #20]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4a3a      	ldr	r2, [pc, #232]	@ (80056f4 <xTaskPriorityInherit+0x138>)
 800560a:	4413      	add	r3, r2
 800560c:	4299      	cmp	r1, r3
 800560e:	d159      	bne.n	80056c4 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	3304      	adds	r3, #4
 8005614:	4618      	mov	r0, r3
 8005616:	f7fe f8ad 	bl	8003774 <uxListRemove>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005624:	2201      	movs	r2, #1
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43da      	mvns	r2, r3
 800562c:	4b32      	ldr	r3, [pc, #200]	@ (80056f8 <xTaskPriorityInherit+0x13c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4013      	ands	r3, r2
 8005632:	4a31      	ldr	r2, [pc, #196]	@ (80056f8 <xTaskPriorityInherit+0x13c>)
 8005634:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005636:	4b2e      	ldr	r3, [pc, #184]	@ (80056f0 <xTaskPriorityInherit+0x134>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005644:	2201      	movs	r2, #1
 8005646:	409a      	lsls	r2, r3
 8005648:	4b2b      	ldr	r3, [pc, #172]	@ (80056f8 <xTaskPriorityInherit+0x13c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4313      	orrs	r3, r2
 800564e:	4a2a      	ldr	r2, [pc, #168]	@ (80056f8 <xTaskPriorityInherit+0x13c>)
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005656:	4927      	ldr	r1, [pc, #156]	@ (80056f4 <xTaskPriorityInherit+0x138>)
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	3304      	adds	r3, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	609a      	str	r2, [r3, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	60da      	str	r2, [r3, #12]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	3204      	adds	r2, #4
 800567e:	605a      	str	r2, [r3, #4]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1d1a      	adds	r2, r3, #4
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	609a      	str	r2, [r3, #8]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4a17      	ldr	r2, [pc, #92]	@ (80056f4 <xTaskPriorityInherit+0x138>)
 8005696:	441a      	add	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	615a      	str	r2, [r3, #20]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056a0:	4914      	ldr	r1, [pc, #80]	@ (80056f4 <xTaskPriorityInherit+0x138>)
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056b2:	1c59      	adds	r1, r3, #1
 80056b4:	480f      	ldr	r0, [pc, #60]	@ (80056f4 <xTaskPriorityInherit+0x138>)
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4403      	add	r3, r0
 80056c0:	6019      	str	r1, [r3, #0]
 80056c2:	e004      	b.n	80056ce <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056c4:	4b0a      	ldr	r3, [pc, #40]	@ (80056f0 <xTaskPriorityInherit+0x134>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80056ce:	2301      	movs	r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	e008      	b.n	80056e6 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <xTaskPriorityInherit+0x134>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	429a      	cmp	r2, r3
 80056e0:	d201      	bcs.n	80056e6 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80056e2:	2301      	movs	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 80056e6:	697b      	ldr	r3, [r7, #20]
    }
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20000e0c 	.word	0x20000e0c
 80056f4:	20000e10 	.word	0x20000e10
 80056f8:	20000f14 	.word	0x20000f14

080056fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 8082 	beq.w	8005818 <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005714:	4b43      	ldr	r3, [pc, #268]	@ (8005824 <xTaskPriorityDisinherit+0x128>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	429a      	cmp	r2, r3
 800571c:	d004      	beq.n	8005728 <xTaskPriorityDisinherit+0x2c>
 800571e:	f641 2128 	movw	r1, #6696	@ 0x1a28
 8005722:	4841      	ldr	r0, [pc, #260]	@ (8005828 <xTaskPriorityDisinherit+0x12c>)
 8005724:	f7fc f92a 	bl	800197c <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <xTaskPriorityDisinherit+0x3e>
 8005730:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8005734:	483c      	ldr	r0, [pc, #240]	@ (8005828 <xTaskPriorityDisinherit+0x12c>)
 8005736:	f7fc f921 	bl	800197c <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800573e:	1e5a      	subs	r2, r3, #1
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800574c:	429a      	cmp	r2, r3
 800574e:	d063      	beq.n	8005818 <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005754:	2b00      	cmp	r3, #0
 8005756:	d15f      	bne.n	8005818 <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3304      	adds	r3, #4
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe f809 	bl	8003774 <uxListRemove>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	2201      	movs	r2, #1
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43da      	mvns	r2, r3
 8005774:	4b2d      	ldr	r3, [pc, #180]	@ (800582c <xTaskPriorityDisinherit+0x130>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4013      	ands	r3, r2
 800577a:	4a2c      	ldr	r2, [pc, #176]	@ (800582c <xTaskPriorityDisinherit+0x130>)
 800577c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	f1c3 0207 	rsb	r2, r3, #7
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	2201      	movs	r2, #1
 8005798:	409a      	lsls	r2, r3
 800579a:	4b24      	ldr	r3, [pc, #144]	@ (800582c <xTaskPriorityDisinherit+0x130>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4313      	orrs	r3, r2
 80057a0:	4a22      	ldr	r2, [pc, #136]	@ (800582c <xTaskPriorityDisinherit+0x130>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a8:	4921      	ldr	r1, [pc, #132]	@ (8005830 <xTaskPriorityDisinherit+0x134>)
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	3304      	adds	r3, #4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	609a      	str	r2, [r3, #8]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	60da      	str	r2, [r3, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	3204      	adds	r2, #4
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1d1a      	adds	r2, r3, #4
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	609a      	str	r2, [r3, #8]
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4a12      	ldr	r2, [pc, #72]	@ (8005830 <xTaskPriorityDisinherit+0x134>)
 80057e8:	441a      	add	r2, r3
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	615a      	str	r2, [r3, #20]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f2:	490f      	ldr	r1, [pc, #60]	@ (8005830 <xTaskPriorityDisinherit+0x134>)
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005804:	1c59      	adds	r1, r3, #1
 8005806:	480a      	ldr	r0, [pc, #40]	@ (8005830 <xTaskPriorityDisinherit+0x134>)
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4403      	add	r3, r0
 8005812:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005814:	2301      	movs	r3, #1
 8005816:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8005818:	697b      	ldr	r3, [r7, #20]
    }
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000e0c 	.word	0x20000e0c
 8005828:	08024908 	.word	0x08024908
 800582c:	20000f14 	.word	0x20000f14
 8005830:	20000e10 	.word	0x20000e10

08005834 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005842:	2301      	movs	r3, #1
 8005844:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8096 	beq.w	800597a <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005852:	2b00      	cmp	r3, #0
 8005854:	d104      	bne.n	8005860 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8005856:	f641 2186 	movw	r1, #6790	@ 0x1a86
 800585a:	484a      	ldr	r0, [pc, #296]	@ (8005984 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800585c:	f7fc f88e 	bl	800197c <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d902      	bls.n	8005870 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	e002      	b.n	8005876 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005874:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	429a      	cmp	r2, r3
 800587e:	d07c      	beq.n	800597a <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	429a      	cmp	r2, r3
 8005888:	d177      	bne.n	800597a <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800588a:	4b3f      	ldr	r3, [pc, #252]	@ (8005988 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	429a      	cmp	r2, r3
 8005892:	d104      	bne.n	800589e <vTaskPriorityDisinheritAfterTimeout+0x6a>
 8005894:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 8005898:	483a      	ldr	r0, [pc, #232]	@ (8005984 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800589a:	f7fc f86f 	bl	800197c <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	db04      	blt.n	80058bc <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f1c3 0207 	rsb	r2, r3, #7
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	6959      	ldr	r1, [r3, #20]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4a30      	ldr	r2, [pc, #192]	@ (800598c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80058cc:	4413      	add	r3, r2
 80058ce:	4299      	cmp	r1, r3
 80058d0:	d153      	bne.n	800597a <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	3304      	adds	r3, #4
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fd ff4c 	bl	8003774 <uxListRemove>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e6:	2201      	movs	r2, #1
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	43da      	mvns	r2, r3
 80058ee:	4b28      	ldr	r3, [pc, #160]	@ (8005990 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4013      	ands	r3, r2
 80058f4:	4a26      	ldr	r2, [pc, #152]	@ (8005990 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80058f6:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	2201      	movs	r2, #1
 80058fe:	409a      	lsls	r2, r3
 8005900:	4b23      	ldr	r3, [pc, #140]	@ (8005990 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4313      	orrs	r3, r2
 8005906:	4a22      	ldr	r2, [pc, #136]	@ (8005990 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590e:	491f      	ldr	r1, [pc, #124]	@ (800598c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	3304      	adds	r3, #4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	609a      	str	r2, [r3, #8]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	3204      	adds	r2, #4
 8005936:	605a      	str	r2, [r3, #4]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	1d1a      	adds	r2, r3, #4
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	609a      	str	r2, [r3, #8]
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4a0f      	ldr	r2, [pc, #60]	@ (800598c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800594e:	441a      	add	r2, r3
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	615a      	str	r2, [r3, #20]
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005958:	490c      	ldr	r1, [pc, #48]	@ (800598c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800596a:	1c59      	adds	r1, r3, #1
 800596c:	4807      	ldr	r0, [pc, #28]	@ (800598c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4403      	add	r3, r0
 8005978:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 800597a:	bf00      	nop
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	08024908 	.word	0x08024908
 8005988:	20000e0c 	.word	0x20000e0c
 800598c:	20000e10 	.word	0x20000e10
 8005990:	20000f14 	.word	0x20000f14

08005994 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800599a:	4b09      	ldr	r3, [pc, #36]	@ (80059c0 <uxTaskResetEventItemValue+0x2c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 80059a2:	4b07      	ldr	r3, [pc, #28]	@ (80059c0 <uxTaskResetEventItemValue+0x2c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a8:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <uxTaskResetEventItemValue+0x2c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f1c2 0207 	rsb	r2, r2, #7
 80059b0:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 80059b2:	687b      	ldr	r3, [r7, #4]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	20000e0c 	.word	0x20000e0c

080059c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80059ca:	4b09      	ldr	r3, [pc, #36]	@ (80059f0 <pvTaskIncrementMutexHeldCount+0x2c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 80059e0:	687b      	ldr	r3, [r7, #4]
    }
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000e0c 	.word	0x20000e0c

080059f4 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d004      	beq.n	8005a14 <ulTaskGenericNotifyTake+0x20>
 8005a0a:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 8005a0e:	4833      	ldr	r0, [pc, #204]	@ (8005adc <ulTaskGenericNotifyTake+0xe8>)
 8005a10:	f7fb ffb4 	bl	800197c <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005a14:	f7fe ff96 	bl	8004944 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8005a18:	f000 fe12 	bl	8006640 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8005a1c:	4b30      	ldr	r3, [pc, #192]	@ (8005ae0 <ulTaskGenericNotifyTake+0xec>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3318      	adds	r3, #24
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10b      	bne.n	8005a46 <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ae0 <ulTaskGenericNotifyTake+0xec>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	3368      	adds	r3, #104	@ 0x68
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 8005a42:	2301      	movs	r3, #1
 8005a44:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005a46:	f000 fe27 	bl	8006698 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d103      	bne.n	8005a58 <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a50:	2101      	movs	r1, #1
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fc3a 	bl	80062cc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005a58:	f7fe ff82 	bl	8004960 <xTaskResumeAll>
 8005a5c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d10a      	bne.n	8005a7a <ulTaskGenericNotifyTake+0x86>
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d107      	bne.n	8005a7a <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 8005a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ae4 <ulTaskGenericNotifyTake+0xf0>)
 8005a6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005a7a:	f000 fde1 	bl	8006640 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005a7e:	4b18      	ldr	r3, [pc, #96]	@ (8005ae0 <ulTaskGenericNotifyTake+0xec>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3318      	adds	r3, #24
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d014      	beq.n	8005abe <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d008      	beq.n	8005aac <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8005a9a:	4b11      	ldr	r3, [pc, #68]	@ (8005ae0 <ulTaskGenericNotifyTake+0xec>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3318      	adds	r3, #24
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	605a      	str	r2, [r3, #4]
 8005aaa:	e008      	b.n	8005abe <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8005aac:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae0 <ulTaskGenericNotifyTake+0xec>)
 8005aae:	6819      	ldr	r1, [r3, #0]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	1e5a      	subs	r2, r3, #1
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3318      	adds	r3, #24
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005abe:	4b08      	ldr	r3, [pc, #32]	@ (8005ae0 <ulTaskGenericNotifyTake+0xec>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3368      	adds	r3, #104	@ 0x68
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005acc:	f000 fde4 	bl	8006698 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8005ad0:	697b      	ldr	r3, [r7, #20]
    }
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	08024908 	.word	0x08024908
 8005ae0:	20000e0c 	.word	0x20000e0c
 8005ae4:	e000ed04 	.word	0xe000ed04

08005ae8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <xTaskGenericNotifyWait+0x22>
 8005b00:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 8005b04:	483e      	ldr	r0, [pc, #248]	@ (8005c00 <xTaskGenericNotifyWait+0x118>)
 8005b06:	f7fb ff39 	bl	800197c <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005b0a:	f7fe ff1b 	bl	8004944 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8005b0e:	f000 fd97 	bl	8006640 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005b12:	4b3c      	ldr	r3, [pc, #240]	@ (8005c04 <xTaskGenericNotifyWait+0x11c>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	3368      	adds	r3, #104	@ 0x68
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d01a      	beq.n	8005b5a <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8005b24:	4b37      	ldr	r3, [pc, #220]	@ (8005c04 <xTaskGenericNotifyWait+0x11c>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3318      	adds	r3, #24
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	6859      	ldr	r1, [r3, #4]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	4019      	ands	r1, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3318      	adds	r3, #24
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005b42:	4b30      	ldr	r3, [pc, #192]	@ (8005c04 <xTaskGenericNotifyWait+0x11c>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3368      	adds	r3, #104	@ 0x68
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 8005b56:	2301      	movs	r3, #1
 8005b58:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005b5a:	f000 fd9d 	bl	8006698 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d103      	bne.n	8005b6c <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b64:	2101      	movs	r1, #1
 8005b66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b68:	f000 fbb0 	bl	80062cc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005b6c:	f7fe fef8 	bl	8004960 <xTaskResumeAll>
 8005b70:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d10a      	bne.n	8005b8e <xTaskGenericNotifyWait+0xa6>
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d107      	bne.n	8005b8e <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 8005b7e:	4b22      	ldr	r3, [pc, #136]	@ (8005c08 <xTaskGenericNotifyWait+0x120>)
 8005b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005b8e:	f000 fd57 	bl	8006640 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005b98:	4b1a      	ldr	r3, [pc, #104]	@ (8005c04 <xTaskGenericNotifyWait+0x11c>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3318      	adds	r3, #24
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005baa:	4b16      	ldr	r3, [pc, #88]	@ (8005c04 <xTaskGenericNotifyWait+0x11c>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3368      	adds	r3, #104	@ 0x68
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d002      	beq.n	8005bc2 <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	e010      	b.n	8005be4 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8005bc2:	4b10      	ldr	r3, [pc, #64]	@ (8005c04 <xTaskGenericNotifyWait+0x11c>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3318      	adds	r3, #24
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	6859      	ldr	r1, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	4019      	ands	r1, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3318      	adds	r3, #24
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8005be0:	2301      	movs	r3, #1
 8005be2:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005be4:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <xTaskGenericNotifyWait+0x11c>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	3368      	adds	r3, #104	@ 0x68
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005bf2:	f000 fd51 	bl	8006698 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
    }
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	08024908 	.word	0x08024908
 8005c04:	20000e0c 	.word	0x20000e0c
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	@ 0x28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <xTaskGenericNotify+0x22>
 8005c24:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 8005c28:	487b      	ldr	r0, [pc, #492]	@ (8005e18 <xTaskGenericNotify+0x20c>)
 8005c2a:	f7fb fea7 	bl	800197c <vAssertCalled>
        configASSERT( xTaskToNotify );
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <xTaskGenericNotify+0x32>
 8005c34:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 8005c38:	4877      	ldr	r0, [pc, #476]	@ (8005e18 <xTaskGenericNotify+0x20c>)
 8005c3a:	f7fb fe9f 	bl	800197c <vAssertCalled>
        pxTCB = xTaskToNotify;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 8005c42:	f000 fcfd 	bl	8006640 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	3318      	adds	r3, #24
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005c5c:	6a3a      	ldr	r2, [r7, #32]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4413      	add	r3, r2
 8005c62:	3368      	adds	r3, #104	@ 0x68
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005c68:	6a3a      	ldr	r2, [r7, #32]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3368      	adds	r3, #104	@ 0x68
 8005c70:	2202      	movs	r2, #2
 8005c72:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d83f      	bhi.n	8005cfa <xTaskGenericNotify+0xee>
 8005c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <xTaskGenericNotify+0x74>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005d0f 	.word	0x08005d0f
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005cb3 	.word	0x08005cb3
 8005c8c:	08005ccf 	.word	0x08005ccf
 8005c90:	08005cdf 	.word	0x08005cdf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005c94:	6a3a      	ldr	r2, [r7, #32]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	3318      	adds	r3, #24
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	6a39      	ldr	r1, [r7, #32]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	3318      	adds	r3, #24
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	605a      	str	r2, [r3, #4]
                    break;
 8005cb0:	e030      	b.n	8005d14 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005cb2:	6a3a      	ldr	r2, [r7, #32]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	3318      	adds	r3, #24
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	6a39      	ldr	r1, [r7, #32]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	605a      	str	r2, [r3, #4]
                    break;
 8005ccc:	e022      	b.n	8005d14 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005cce:	6a3a      	ldr	r2, [r7, #32]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	3318      	adds	r3, #24
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	605a      	str	r2, [r3, #4]
                    break;
 8005cdc:	e01a      	b.n	8005d14 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005cde:	7ffb      	ldrb	r3, [r7, #31]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d007      	beq.n	8005cf4 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005ce4:	6a3a      	ldr	r2, [r7, #32]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	3318      	adds	r3, #24
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005cf2:	e00f      	b.n	8005d14 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8005cf8:	e00c      	b.n	8005d14 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005cfa:	4b48      	ldr	r3, [pc, #288]	@ (8005e1c <xTaskGenericNotify+0x210>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <xTaskGenericNotify+0x106>
 8005d02:	f641 61da 	movw	r1, #7898	@ 0x1eda
 8005d06:	4844      	ldr	r0, [pc, #272]	@ (8005e18 <xTaskGenericNotify+0x20c>)
 8005d08:	f7fb fe38 	bl	800197c <vAssertCalled>

                    break;
 8005d0c:	e001      	b.n	8005d12 <xTaskGenericNotify+0x106>
                    break;
 8005d0e:	bf00      	nop
 8005d10:	e000      	b.n	8005d14 <xTaskGenericNotify+0x108>
                    break;
 8005d12:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005d14:	7ffb      	ldrb	r3, [r7, #31]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d177      	bne.n	8005e0a <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	61bb      	str	r3, [r7, #24]
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	6a3a      	ldr	r2, [r7, #32]
 8005d26:	68d2      	ldr	r2, [r2, #12]
 8005d28:	609a      	str	r2, [r3, #8]
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	6a3a      	ldr	r2, [r7, #32]
 8005d30:	6892      	ldr	r2, [r2, #8]
 8005d32:	605a      	str	r2, [r3, #4]
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d103      	bne.n	8005d48 <xTaskGenericNotify+0x13c>
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	615a      	str	r2, [r3, #20]
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	1e5a      	subs	r2, r3, #1
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	409a      	lsls	r2, r3
 8005d60:	4b2f      	ldr	r3, [pc, #188]	@ (8005e20 <xTaskGenericNotify+0x214>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	4a2e      	ldr	r2, [pc, #184]	@ (8005e20 <xTaskGenericNotify+0x214>)
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6e:	492d      	ldr	r1, [pc, #180]	@ (8005e24 <xTaskGenericNotify+0x218>)
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	609a      	str	r2, [r3, #8]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	6a3a      	ldr	r2, [r7, #32]
 8005d94:	3204      	adds	r2, #4
 8005d96:	605a      	str	r2, [r3, #4]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	1d1a      	adds	r2, r3, #4
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	609a      	str	r2, [r3, #8]
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4a1d      	ldr	r2, [pc, #116]	@ (8005e24 <xTaskGenericNotify+0x218>)
 8005dae:	441a      	add	r2, r3
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	615a      	str	r2, [r3, #20]
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db8:	491a      	ldr	r1, [pc, #104]	@ (8005e24 <xTaskGenericNotify+0x218>)
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6a3a      	ldr	r2, [r7, #32]
 8005dc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dca:	1c59      	adds	r1, r3, #1
 8005dcc:	4815      	ldr	r0, [pc, #84]	@ (8005e24 <xTaskGenericNotify+0x218>)
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4403      	add	r3, r0
 8005dd8:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <xTaskGenericNotify+0x1e0>
 8005de2:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 8005de6:	480c      	ldr	r0, [pc, #48]	@ (8005e18 <xTaskGenericNotify+0x20c>)
 8005de8:	f7fb fdc8 	bl	800197c <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8005dec:	4b0e      	ldr	r3, [pc, #56]	@ (8005e28 <xTaskGenericNotify+0x21c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d207      	bcs.n	8005e0a <xTaskGenericNotify+0x1fe>
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <xTaskGenericNotify+0x220>)
 8005dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005e0a:	f000 fc45 	bl	8006698 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005e10:	4618      	mov	r0, r3
 8005e12:	3728      	adds	r7, #40	@ 0x28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	08024908 	.word	0x08024908
 8005e1c:	20000f10 	.word	0x20000f10
 8005e20:	20000f14 	.word	0x20000f14
 8005e24:	20000e10 	.word	0x20000e10
 8005e28:	20000e0c 	.word	0x20000e0c
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08e      	sub	sp, #56	@ 0x38
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <xTaskGenericNotifyFromISR+0x22>
 8005e48:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 8005e4c:	4899      	ldr	r0, [pc, #612]	@ (80060b4 <xTaskGenericNotifyFromISR+0x284>)
 8005e4e:	f7fb fd95 	bl	800197c <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <xTaskGenericNotifyFromISR+0x32>
 8005e58:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8005e5c:	4895      	ldr	r0, [pc, #596]	@ (80060b4 <xTaskGenericNotifyFromISR+0x284>)
 8005e5e:	f7fb fd8d 	bl	800197c <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e62:	f000 fcbb 	bl	80067dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8005e6a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e6e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005e72:	b672      	cpsid	i
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	b662      	cpsie	i
 8005e82:	61ba      	str	r2, [r7, #24]
 8005e84:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005e86:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 8005e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	3318      	adds	r3, #24
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e9e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3368      	adds	r3, #104	@ 0x68
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3368      	adds	r3, #104	@ 0x68
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d841      	bhi.n	8005f44 <xTaskGenericNotifyFromISR+0x114>
 8005ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec8 <xTaskGenericNotifyFromISR+0x98>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005f59 	.word	0x08005f59
 8005ecc:	08005edd 	.word	0x08005edd
 8005ed0:	08005efb 	.word	0x08005efb
 8005ed4:	08005f17 	.word	0x08005f17
 8005ed8:	08005f27 	.word	0x08005f27
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	3318      	adds	r3, #24
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3318      	adds	r3, #24
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	605a      	str	r2, [r3, #4]
                    break;
 8005ef8:	e031      	b.n	8005f5e <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	3318      	adds	r3, #24
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	3318      	adds	r3, #24
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	605a      	str	r2, [r3, #4]
                    break;
 8005f14:	e023      	b.n	8005f5e <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	3318      	adds	r3, #24
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	605a      	str	r2, [r3, #4]
                    break;
 8005f24:	e01b      	b.n	8005f5e <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005f26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d007      	beq.n	8005f3e <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	3318      	adds	r3, #24
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005f3c:	e00f      	b.n	8005f5e <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8005f42:	e00c      	b.n	8005f5e <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005f44:	4b5c      	ldr	r3, [pc, #368]	@ (80060b8 <xTaskGenericNotifyFromISR+0x288>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <xTaskGenericNotifyFromISR+0x12c>
 8005f4c:	f641 7169 	movw	r1, #8041	@ 0x1f69
 8005f50:	4858      	ldr	r0, [pc, #352]	@ (80060b4 <xTaskGenericNotifyFromISR+0x284>)
 8005f52:	f7fb fd13 	bl	800197c <vAssertCalled>
                    break;
 8005f56:	e001      	b.n	8005f5c <xTaskGenericNotifyFromISR+0x12c>
                    break;
 8005f58:	bf00      	nop
 8005f5a:	e000      	b.n	8005f5e <xTaskGenericNotifyFromISR+0x12e>
                    break;
 8005f5c:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	f040 809a 	bne.w	800609c <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <xTaskGenericNotifyFromISR+0x14a>
 8005f70:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8005f74:	484f      	ldr	r0, [pc, #316]	@ (80060b4 <xTaskGenericNotifyFromISR+0x284>)
 8005f76:	f7fb fd01 	bl	800197c <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005f7a:	4b50      	ldr	r3, [pc, #320]	@ (80060bc <xTaskGenericNotifyFromISR+0x28c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d160      	bne.n	8006044 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	623b      	str	r3, [r7, #32]
 8005f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f8e:	68d2      	ldr	r2, [r2, #12]
 8005f90:	609a      	str	r2, [r3, #8]
 8005f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f98:	6892      	ldr	r2, [r2, #8]
 8005f9a:	605a      	str	r2, [r3, #4]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d103      	bne.n	8005fb0 <xTaskGenericNotifyFromISR+0x180>
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	605a      	str	r2, [r3, #4]
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	615a      	str	r2, [r3, #20]
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	1e5a      	subs	r2, r3, #1
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80060c0 <xTaskGenericNotifyFromISR+0x290>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	4a3c      	ldr	r2, [pc, #240]	@ (80060c0 <xTaskGenericNotifyFromISR+0x290>)
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd6:	493b      	ldr	r1, [pc, #236]	@ (80060c4 <xTaskGenericNotifyFromISR+0x294>)
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	609a      	str	r2, [r3, #8]
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff4:	60da      	str	r2, [r3, #12]
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ffc:	3204      	adds	r2, #4
 8005ffe:	605a      	str	r2, [r3, #4]
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	1d1a      	adds	r2, r3, #4
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	609a      	str	r2, [r3, #8]
 8006008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4a2b      	ldr	r2, [pc, #172]	@ (80060c4 <xTaskGenericNotifyFromISR+0x294>)
 8006016:	441a      	add	r2, r3
 8006018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601a:	615a      	str	r2, [r3, #20]
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006020:	4928      	ldr	r1, [pc, #160]	@ (80060c4 <xTaskGenericNotifyFromISR+0x294>)
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006030:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006032:	1c59      	adds	r1, r3, #1
 8006034:	4823      	ldr	r0, [pc, #140]	@ (80060c4 <xTaskGenericNotifyFromISR+0x294>)
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4403      	add	r3, r0
 8006040:	6019      	str	r1, [r3, #0]
 8006042:	e01b      	b.n	800607c <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006044:	4b20      	ldr	r3, [pc, #128]	@ (80060c8 <xTaskGenericNotifyFromISR+0x298>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604e:	61da      	str	r2, [r3, #28]
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006056:	621a      	str	r2, [r3, #32]
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800605e:	3218      	adds	r2, #24
 8006060:	605a      	str	r2, [r3, #4]
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	f103 0218 	add.w	r2, r3, #24
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	4a16      	ldr	r2, [pc, #88]	@ (80060c8 <xTaskGenericNotifyFromISR+0x298>)
 8006070:	629a      	str	r2, [r3, #40]	@ 0x28
 8006072:	4b15      	ldr	r3, [pc, #84]	@ (80060c8 <xTaskGenericNotifyFromISR+0x298>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3301      	adds	r3, #1
 8006078:	4a13      	ldr	r2, [pc, #76]	@ (80060c8 <xTaskGenericNotifyFromISR+0x298>)
 800607a:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006080:	4b12      	ldr	r3, [pc, #72]	@ (80060cc <xTaskGenericNotifyFromISR+0x29c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	429a      	cmp	r2, r3
 8006088:	d908      	bls.n	800609c <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800608a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8006090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006092:	2201      	movs	r2, #1
 8006094:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8006096:	4b0e      	ldr	r3, [pc, #56]	@ (80060d0 <xTaskGenericNotifyFromISR+0x2a0>)
 8006098:	2201      	movs	r2, #1
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80060a6:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 80060a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80060aa:	4618      	mov	r0, r3
 80060ac:	3738      	adds	r7, #56	@ 0x38
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	08024908 	.word	0x08024908
 80060b8:	20000f10 	.word	0x20000f10
 80060bc:	20000f34 	.word	0x20000f34
 80060c0:	20000f14 	.word	0x20000f14
 80060c4:	20000e10 	.word	0x20000e10
 80060c8:	20000ecc 	.word	0x20000ecc
 80060cc:	20000e0c 	.word	0x20000e0c
 80060d0:	20000f20 	.word	0x20000f20

080060d4 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08e      	sub	sp, #56	@ 0x38
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <vTaskGenericNotifyGiveFromISR+0x1c>
 80060e6:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 80060ea:	4871      	ldr	r0, [pc, #452]	@ (80062b0 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 80060ec:	f7fb fc46 	bl	800197c <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d004      	beq.n	8006100 <vTaskGenericNotifyGiveFromISR+0x2c>
 80060f6:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 80060fa:	486d      	ldr	r0, [pc, #436]	@ (80062b0 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 80060fc:	f7fb fc3e 	bl	800197c <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006100:	f000 fb6c 	bl	80067dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8006108:	f3ef 8211 	mrs	r2, BASEPRI
 800610c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006110:	b672      	cpsid	i
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	b662      	cpsie	i
 8006120:	61fa      	str	r2, [r7, #28]
 8006122:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8006124:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8006126:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4413      	add	r3, r2
 800612e:	3368      	adds	r3, #104	@ 0x68
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006136:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4413      	add	r3, r2
 800613c:	3368      	adds	r3, #104	@ 0x68
 800613e:	2202      	movs	r2, #2
 8006140:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006142:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	3318      	adds	r3, #24
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3318      	adds	r3, #24
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800615c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006160:	2b01      	cmp	r3, #1
 8006162:	f040 809a 	bne.w	800629a <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <vTaskGenericNotifyGiveFromISR+0xa4>
 800616e:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 8006172:	484f      	ldr	r0, [pc, #316]	@ (80062b0 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8006174:	f7fb fc02 	bl	800197c <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006178:	4b4e      	ldr	r3, [pc, #312]	@ (80062b4 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d160      	bne.n	8006242 <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24
 8006186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800618c:	68d2      	ldr	r2, [r2, #12]
 800618e:	609a      	str	r2, [r3, #8]
 8006190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006196:	6892      	ldr	r2, [r2, #8]
 8006198:	605a      	str	r2, [r3, #4]
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a0:	3304      	adds	r3, #4
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d103      	bne.n	80061ae <vTaskGenericNotifyGiveFromISR+0xda>
 80061a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	605a      	str	r2, [r3, #4]
 80061ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b0:	2200      	movs	r2, #0
 80061b2:	615a      	str	r2, [r3, #20]
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	1e5a      	subs	r2, r3, #1
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80061be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c2:	2201      	movs	r2, #1
 80061c4:	409a      	lsls	r2, r3
 80061c6:	4b3c      	ldr	r3, [pc, #240]	@ (80062b8 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	4a3a      	ldr	r2, [pc, #232]	@ (80062b8 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d4:	4939      	ldr	r1, [pc, #228]	@ (80062bc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	3304      	adds	r3, #4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e8:	6a3a      	ldr	r2, [r7, #32]
 80061ea:	609a      	str	r2, [r3, #8]
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f2:	60da      	str	r2, [r3, #12]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061fa:	3204      	adds	r2, #4
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006200:	1d1a      	adds	r2, r3, #4
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	609a      	str	r2, [r3, #8]
 8006206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4a2a      	ldr	r2, [pc, #168]	@ (80062bc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8006214:	441a      	add	r2, r3
 8006216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006218:	615a      	str	r2, [r3, #20]
 800621a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800621e:	4927      	ldr	r1, [pc, #156]	@ (80062bc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800622e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006230:	1c59      	adds	r1, r3, #1
 8006232:	4822      	ldr	r0, [pc, #136]	@ (80062bc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4403      	add	r3, r0
 800623e:	6019      	str	r1, [r3, #0]
 8006240:	e01b      	b.n	800627a <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006242:	4b1f      	ldr	r3, [pc, #124]	@ (80062c0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800624a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800624c:	61da      	str	r2, [r3, #28]
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006254:	621a      	str	r2, [r3, #32]
 8006256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800625c:	3218      	adds	r2, #24
 800625e:	605a      	str	r2, [r3, #4]
 8006260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006262:	f103 0218 	add.w	r2, r3, #24
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	609a      	str	r2, [r3, #8]
 800626a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626c:	4a14      	ldr	r2, [pc, #80]	@ (80062c0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 800626e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006270:	4b13      	ldr	r3, [pc, #76]	@ (80062c0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	4a12      	ldr	r2, [pc, #72]	@ (80062c0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8006278:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800627a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800627c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800627e:	4b11      	ldr	r3, [pc, #68]	@ (80062c4 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006284:	429a      	cmp	r2, r3
 8006286:	d908      	bls.n	800629a <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8006294:	4b0c      	ldr	r3, [pc, #48]	@ (80062c8 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 8006296:	2201      	movs	r2, #1
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	617b      	str	r3, [r7, #20]
    __asm volatile
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f383 8811 	msr	BASEPRI, r3
}
 80062a4:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 80062a6:	bf00      	nop
 80062a8:	3738      	adds	r7, #56	@ 0x38
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	08024908 	.word	0x08024908
 80062b4:	20000f34 	.word	0x20000f34
 80062b8:	20000f14 	.word	0x20000f14
 80062bc:	20000e10 	.word	0x20000e10
 80062c0:	20000ecc 	.word	0x20000ecc
 80062c4:	20000e0c 	.word	0x20000e0c
 80062c8:	20000f20 	.word	0x20000f20

080062cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80062d6:	4b37      	ldr	r3, [pc, #220]	@ (80063b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80062dc:	4b36      	ldr	r3, [pc, #216]	@ (80063b8 <prvAddCurrentTaskToDelayedList+0xec>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80062e2:	4b36      	ldr	r3, [pc, #216]	@ (80063bc <prvAddCurrentTaskToDelayedList+0xf0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062e8:	4b35      	ldr	r3, [pc, #212]	@ (80063c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fd fa40 	bl	8003774 <uxListRemove>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10b      	bne.n	8006312 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80062fa:	4b31      	ldr	r3, [pc, #196]	@ (80063c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	2201      	movs	r2, #1
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	43da      	mvns	r2, r3
 8006308:	4b2e      	ldr	r3, [pc, #184]	@ (80063c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4013      	ands	r3, r2
 800630e:	4a2d      	ldr	r2, [pc, #180]	@ (80063c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006310:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d124      	bne.n	8006364 <prvAddCurrentTaskToDelayedList+0x98>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d021      	beq.n	8006364 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006320:	4b29      	ldr	r3, [pc, #164]	@ (80063c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	4b26      	ldr	r3, [pc, #152]	@ (80063c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	609a      	str	r2, [r3, #8]
 800632e:	4b24      	ldr	r3, [pc, #144]	@ (80063c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	6892      	ldr	r2, [r2, #8]
 8006336:	60da      	str	r2, [r3, #12]
 8006338:	4b21      	ldr	r3, [pc, #132]	@ (80063c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	3204      	adds	r2, #4
 8006342:	605a      	str	r2, [r3, #4]
 8006344:	4b1e      	ldr	r3, [pc, #120]	@ (80063c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	1d1a      	adds	r2, r3, #4
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	609a      	str	r2, [r3, #8]
 800634e:	4b1c      	ldr	r3, [pc, #112]	@ (80063c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1d      	ldr	r2, [pc, #116]	@ (80063c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006354:	615a      	str	r2, [r3, #20]
 8006356:	4b1c      	ldr	r3, [pc, #112]	@ (80063c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	4a1a      	ldr	r2, [pc, #104]	@ (80063c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006362:	e022      	b.n	80063aa <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4413      	add	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800636c:	4b14      	ldr	r3, [pc, #80]	@ (80063c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	429a      	cmp	r2, r3
 800637a:	d207      	bcs.n	800638c <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800637c:	4b10      	ldr	r3, [pc, #64]	@ (80063c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3304      	adds	r3, #4
 8006382:	4619      	mov	r1, r3
 8006384:	6978      	ldr	r0, [r7, #20]
 8006386:	f7fd f9bc 	bl	8003702 <vListInsert>
}
 800638a:	e00e      	b.n	80063aa <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800638c:	4b0c      	ldr	r3, [pc, #48]	@ (80063c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	69b8      	ldr	r0, [r7, #24]
 8006396:	f7fd f9b4 	bl	8003702 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800639a:	4b0c      	ldr	r3, [pc, #48]	@ (80063cc <prvAddCurrentTaskToDelayedList+0x100>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d202      	bcs.n	80063aa <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80063a4:	4a09      	ldr	r2, [pc, #36]	@ (80063cc <prvAddCurrentTaskToDelayedList+0x100>)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6013      	str	r3, [r2, #0]
}
 80063aa:	bf00      	nop
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000f10 	.word	0x20000f10
 80063b8:	20000ec4 	.word	0x20000ec4
 80063bc:	20000ec8 	.word	0x20000ec8
 80063c0:	20000e0c 	.word	0x20000e0c
 80063c4:	20000f14 	.word	0x20000f14
 80063c8:	20000ef8 	.word	0x20000ef8
 80063cc:	20000f2c 	.word	0x20000f2c

080063d0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3b04      	subs	r3, #4
 80063e0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3b04      	subs	r3, #4
 80063ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f023 0201 	bic.w	r2, r3, #1
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3b04      	subs	r3, #4
 80063fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006400:	4a0c      	ldr	r2, [pc, #48]	@ (8006434 <pxPortInitialiseStack+0x64>)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3b14      	subs	r3, #20
 800640a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3b04      	subs	r3, #4
 8006416:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f06f 0202 	mvn.w	r2, #2
 800641e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3b20      	subs	r3, #32
 8006424:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006426:	68fb      	ldr	r3, [r7, #12]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	08006439 	.word	0x08006439

08006438 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006442:	4b0f      	ldr	r3, [pc, #60]	@ (8006480 <prvTaskExitError+0x48>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d003      	beq.n	8006454 <prvTaskExitError+0x1c>
 800644c:	21ee      	movs	r1, #238	@ 0xee
 800644e:	480d      	ldr	r0, [pc, #52]	@ (8006484 <prvTaskExitError+0x4c>)
 8006450:	f7fb fa94 	bl	800197c <vAssertCalled>
    __asm volatile
 8006454:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006458:	b672      	cpsid	i
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	b662      	cpsie	i
 8006468:	607b      	str	r3, [r7, #4]
}
 800646a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800646c:	bf00      	nop
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0fc      	beq.n	800646e <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	2000000c 	.word	0x2000000c
 8006484:	08024934 	.word	0x08024934
	...

08006490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006490:	4b07      	ldr	r3, [pc, #28]	@ (80064b0 <pxCurrentTCBConst2>)
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	6808      	ldr	r0, [r1, #0]
 8006496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649a:	f380 8809 	msr	PSP, r0
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f380 8811 	msr	BASEPRI, r0
 80064aa:	4770      	bx	lr
 80064ac:	f3af 8000 	nop.w

080064b0 <pxCurrentTCBConst2>:
 80064b0:	20000e0c 	.word	0x20000e0c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80064b8:	4808      	ldr	r0, [pc, #32]	@ (80064dc <prvPortStartFirstTask+0x24>)
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f380 8808 	msr	MSP, r0
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f380 8814 	msr	CONTROL, r0
 80064ca:	b662      	cpsie	i
 80064cc:	b661      	cpsie	f
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	df00      	svc	0
 80064d8:	bf00      	nop
 80064da:	0000      	.short	0x0000
 80064dc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop

080064e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80064ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006614 <xPortStartScheduler+0x130>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	332c      	adds	r3, #44	@ 0x2c
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a48      	ldr	r2, [pc, #288]	@ (8006618 <xPortStartScheduler+0x134>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <xPortStartScheduler+0x22>
 80064fc:	f240 114b 	movw	r1, #331	@ 0x14b
 8006500:	4846      	ldr	r0, [pc, #280]	@ (800661c <xPortStartScheduler+0x138>)
 8006502:	f7fb fa3b 	bl	800197c <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	3338      	adds	r3, #56	@ 0x38
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a44      	ldr	r2, [pc, #272]	@ (8006620 <xPortStartScheduler+0x13c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <xPortStartScheduler+0x38>
 8006512:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8006516:	4841      	ldr	r0, [pc, #260]	@ (800661c <xPortStartScheduler+0x138>)
 8006518:	f7fb fa30 	bl	800197c <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006520:	4b40      	ldr	r3, [pc, #256]	@ (8006624 <xPortStartScheduler+0x140>)
 8006522:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	22ff      	movs	r2, #255	@ 0xff
 8006530:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006542:	b2da      	uxtb	r2, r3
 8006544:	4b38      	ldr	r3, [pc, #224]	@ (8006628 <xPortStartScheduler+0x144>)
 8006546:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8006548:	4b37      	ldr	r3, [pc, #220]	@ (8006628 <xPortStartScheduler+0x144>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d104      	bne.n	800655a <xPortStartScheduler+0x76>
 8006550:	f240 116f 	movw	r1, #367	@ 0x16f
 8006554:	4831      	ldr	r0, [pc, #196]	@ (800661c <xPortStartScheduler+0x138>)
 8006556:	f7fb fa11 	bl	800197c <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	43db      	mvns	r3, r3
 8006560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00d      	beq.n	8006584 <xPortStartScheduler+0xa0>
 8006568:	f240 1173 	movw	r1, #371	@ 0x173
 800656c:	482b      	ldr	r0, [pc, #172]	@ (800661c <xPortStartScheduler+0x138>)
 800656e:	f7fb fa05 	bl	800197c <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006572:	e007      	b.n	8006584 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	3301      	adds	r3, #1
 8006578:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	b2db      	uxtb	r3, r3
 8006582:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006584:	79fb      	ldrb	r3, [r7, #7]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658c:	2b80      	cmp	r3, #128	@ 0x80
 800658e:	d0f1      	beq.n	8006574 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b08      	cmp	r3, #8
 8006594:	d103      	bne.n	800659e <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8006596:	4b25      	ldr	r3, [pc, #148]	@ (800662c <xPortStartScheduler+0x148>)
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e004      	b.n	80065a8 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f1c3 0307 	rsb	r3, r3, #7
 80065a4:	4a21      	ldr	r2, [pc, #132]	@ (800662c <xPortStartScheduler+0x148>)
 80065a6:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065a8:	4b20      	ldr	r3, [pc, #128]	@ (800662c <xPortStartScheduler+0x148>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	4a1f      	ldr	r2, [pc, #124]	@ (800662c <xPortStartScheduler+0x148>)
 80065b0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065b2:	4b1e      	ldr	r3, [pc, #120]	@ (800662c <xPortStartScheduler+0x148>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065ba:	4a1c      	ldr	r2, [pc, #112]	@ (800662c <xPortStartScheduler+0x148>)
 80065bc:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80065c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006630 <xPortStartScheduler+0x14c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a19      	ldr	r2, [pc, #100]	@ (8006630 <xPortStartScheduler+0x14c>)
 80065cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065d0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80065d2:	4b17      	ldr	r3, [pc, #92]	@ (8006630 <xPortStartScheduler+0x14c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a16      	ldr	r2, [pc, #88]	@ (8006630 <xPortStartScheduler+0x14c>)
 80065d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065dc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80065de:	4b15      	ldr	r3, [pc, #84]	@ (8006634 <xPortStartScheduler+0x150>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80065e4:	f000 f8d4 	bl	8006790 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80065e8:	4b13      	ldr	r3, [pc, #76]	@ (8006638 <xPortStartScheduler+0x154>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80065ee:	f000 f8e9 	bl	80067c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065f2:	4b12      	ldr	r3, [pc, #72]	@ (800663c <xPortStartScheduler+0x158>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a11      	ldr	r2, [pc, #68]	@ (800663c <xPortStartScheduler+0x158>)
 80065f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80065fc:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80065fe:	f7ff ff5b 	bl	80064b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006602:	f7fe fbf3 	bl	8004dec <vTaskSwitchContext>
    prvTaskExitError();
 8006606:	f7ff ff17 	bl	8006438 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	e000ed08 	.word	0xe000ed08
 8006618:	08006491 	.word	0x08006491
 800661c:	08024934 	.word	0x08024934
 8006620:	080066e1 	.word	0x080066e1
 8006624:	e000e400 	.word	0xe000e400
 8006628:	20000f40 	.word	0x20000f40
 800662c:	20000f44 	.word	0x20000f44
 8006630:	e000ed20 	.word	0xe000ed20
 8006634:	e000ed1c 	.word	0xe000ed1c
 8006638:	2000000c 	.word	0x2000000c
 800663c:	e000ef34 	.word	0xe000ef34

08006640 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
    __asm volatile
 8006646:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800664a:	b672      	cpsid	i
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	b662      	cpsie	i
 800665a:	607b      	str	r3, [r7, #4]
}
 800665c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800665e:	4b0b      	ldr	r3, [pc, #44]	@ (800668c <vPortEnterCritical+0x4c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	4a09      	ldr	r2, [pc, #36]	@ (800668c <vPortEnterCritical+0x4c>)
 8006666:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006668:	4b08      	ldr	r3, [pc, #32]	@ (800668c <vPortEnterCritical+0x4c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d109      	bne.n	8006684 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006670:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <vPortEnterCritical+0x50>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d004      	beq.n	8006684 <vPortEnterCritical+0x44>
 800667a:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800667e:	4805      	ldr	r0, [pc, #20]	@ (8006694 <vPortEnterCritical+0x54>)
 8006680:	f7fb f97c 	bl	800197c <vAssertCalled>
    }
}
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	2000000c 	.word	0x2000000c
 8006690:	e000ed04 	.word	0xe000ed04
 8006694:	08024934 	.word	0x08024934

08006698 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800669e:	4b0e      	ldr	r3, [pc, #56]	@ (80066d8 <vPortExitCritical+0x40>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <vPortExitCritical+0x18>
 80066a6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80066aa:	480c      	ldr	r0, [pc, #48]	@ (80066dc <vPortExitCritical+0x44>)
 80066ac:	f7fb f966 	bl	800197c <vAssertCalled>
    uxCriticalNesting--;
 80066b0:	4b09      	ldr	r3, [pc, #36]	@ (80066d8 <vPortExitCritical+0x40>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	4a08      	ldr	r2, [pc, #32]	@ (80066d8 <vPortExitCritical+0x40>)
 80066b8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80066ba:	4b07      	ldr	r3, [pc, #28]	@ (80066d8 <vPortExitCritical+0x40>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <vPortExitCritical+0x36>
 80066c2:	2300      	movs	r3, #0
 80066c4:	607b      	str	r3, [r7, #4]
    __asm volatile
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f383 8811 	msr	BASEPRI, r3
}
 80066cc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2000000c 	.word	0x2000000c
 80066dc:	08024934 	.word	0x08024934

080066e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80066e0:	f3ef 8009 	mrs	r0, PSP
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	4b15      	ldr	r3, [pc, #84]	@ (8006740 <pxCurrentTCBConst>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f01e 0f10 	tst.w	lr, #16
 80066f0:	bf08      	it	eq
 80066f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fa:	6010      	str	r0, [r2, #0]
 80066fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006700:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8006704:	b672      	cpsid	i
 8006706:	f380 8811 	msr	BASEPRI, r0
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	b662      	cpsie	i
 8006714:	f7fe fb6a 	bl	8004dec <vTaskSwitchContext>
 8006718:	f04f 0000 	mov.w	r0, #0
 800671c:	f380 8811 	msr	BASEPRI, r0
 8006720:	bc09      	pop	{r0, r3}
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	6808      	ldr	r0, [r1, #0]
 8006726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672a:	f01e 0f10 	tst.w	lr, #16
 800672e:	bf08      	it	eq
 8006730:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006734:	f380 8809 	msr	PSP, r0
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <pxCurrentTCBConst>:
 8006740:	20000e0c 	.word	0x20000e0c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
    __asm volatile
 800674e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006752:	b672      	cpsid	i
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	b662      	cpsie	i
 8006762:	607b      	str	r3, [r7, #4]
}
 8006764:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006766:	f7fe fa2d 	bl	8004bc4 <xTaskIncrementTick>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006770:	4b06      	ldr	r3, [pc, #24]	@ (800678c <xPortSysTickHandler+0x44>)
 8006772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	2300      	movs	r3, #0
 800677a:	603b      	str	r3, [r7, #0]
    __asm volatile
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f383 8811 	msr	BASEPRI, r3
}
 8006782:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	e000ed04 	.word	0xe000ed04

08006790 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006794:	4b08      	ldr	r3, [pc, #32]	@ (80067b8 <vPortSetupTimerInterrupt+0x28>)
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800679a:	4b08      	ldr	r3, [pc, #32]	@ (80067bc <vPortSetupTimerInterrupt+0x2c>)
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067a0:	4b07      	ldr	r3, [pc, #28]	@ (80067c0 <vPortSetupTimerInterrupt+0x30>)
 80067a2:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80067a6:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067a8:	4b03      	ldr	r3, [pc, #12]	@ (80067b8 <vPortSetupTimerInterrupt+0x28>)
 80067aa:	2203      	movs	r2, #3
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	bf00      	nop
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	e000e010 	.word	0xe000e010
 80067bc:	e000e018 	.word	0xe000e018
 80067c0:	e000e014 	.word	0xe000e014

080067c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80067c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80067d4 <vPortEnableVFP+0x10>
 80067c8:	6801      	ldr	r1, [r0, #0]
 80067ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80067ce:	6001      	str	r1, [r0, #0]
 80067d0:	4770      	bx	lr
 80067d2:	0000      	.short	0x0000
 80067d4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop

080067dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80067e2:	f3ef 8305 	mrs	r3, IPSR
 80067e6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b0f      	cmp	r3, #15
 80067ec:	d90e      	bls.n	800680c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067ee:	4a10      	ldr	r2, [pc, #64]	@ (8006830 <vPortValidateInterruptPriority+0x54>)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4413      	add	r3, r2
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006834 <vPortValidateInterruptPriority+0x58>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	78fa      	ldrb	r2, [r7, #3]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d204      	bcs.n	800680c <vPortValidateInterruptPriority+0x30>
 8006802:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8006806:	480c      	ldr	r0, [pc, #48]	@ (8006838 <vPortValidateInterruptPriority+0x5c>)
 8006808:	f7fb f8b8 	bl	800197c <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800680c:	4b0b      	ldr	r3, [pc, #44]	@ (800683c <vPortValidateInterruptPriority+0x60>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006814:	4b0a      	ldr	r3, [pc, #40]	@ (8006840 <vPortValidateInterruptPriority+0x64>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d904      	bls.n	8006826 <vPortValidateInterruptPriority+0x4a>
 800681c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8006820:	4805      	ldr	r0, [pc, #20]	@ (8006838 <vPortValidateInterruptPriority+0x5c>)
 8006822:	f7fb f8ab 	bl	800197c <vAssertCalled>
    }
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	e000e3f0 	.word	0xe000e3f0
 8006834:	20000f40 	.word	0x20000f40
 8006838:	08024934 	.word	0x08024934
 800683c:	e000ed0c 	.word	0xe000ed0c
 8006840:	20000f44 	.word	0x20000f44

08006844 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800684c:	2300      	movs	r3, #0
 800684e:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8006850:	4b60      	ldr	r3, [pc, #384]	@ (80069d4 <pvPortMalloc+0x190>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d103      	bne.n	8006860 <pvPortMalloc+0x1c>
 8006858:	21da      	movs	r1, #218	@ 0xda
 800685a:	485f      	ldr	r0, [pc, #380]	@ (80069d8 <pvPortMalloc+0x194>)
 800685c:	f7fb f88e 	bl	800197c <vAssertCalled>

    if( xWantedSize > 0 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d022      	beq.n	80068ac <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8006866:	2308      	movs	r3, #8
 8006868:	43db      	mvns	r3, r3
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	429a      	cmp	r2, r3
 800686e:	d81b      	bhi.n	80068a8 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 8006870:	2208      	movs	r2, #8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4413      	add	r3, r2
 8006876:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	2b00      	cmp	r3, #0
 8006880:	d014      	beq.n	80068ac <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	f1c3 0308 	rsb	r3, r3, #8
 800688c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	43db      	mvns	r3, r3
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d804      	bhi.n	80068a2 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4413      	add	r3, r2
 800689e:	607b      	str	r3, [r7, #4]
 80068a0:	e004      	b.n	80068ac <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	607b      	str	r3, [r7, #4]
 80068a6:	e001      	b.n	80068ac <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80068ac:	f7fe f84a 	bl	8004944 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	db78      	blt.n	80069a8 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d075      	beq.n	80069a8 <pvPortMalloc+0x164>
 80068bc:	4b47      	ldr	r3, [pc, #284]	@ (80069dc <pvPortMalloc+0x198>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d870      	bhi.n	80069a8 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80068c6:	4b46      	ldr	r3, [pc, #280]	@ (80069e0 <pvPortMalloc+0x19c>)
 80068c8:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80068ca:	4b45      	ldr	r3, [pc, #276]	@ (80069e0 <pvPortMalloc+0x19c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80068d0:	e004      	b.n	80068dc <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d903      	bls.n	80068ee <pvPortMalloc+0xaa>
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f1      	bne.n	80068d2 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80068ee:	4b39      	ldr	r3, [pc, #228]	@ (80069d4 <pvPortMalloc+0x190>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d057      	beq.n	80069a8 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2208      	movs	r2, #8
 80068fe:	4413      	add	r3, r2
 8006900:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d904      	bls.n	800691e <pvPortMalloc+0xda>
 8006914:	f240 1129 	movw	r1, #297	@ 0x129
 8006918:	482f      	ldr	r0, [pc, #188]	@ (80069d8 <pvPortMalloc+0x194>)
 800691a:	f7fb f82f 	bl	800197c <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	1ad2      	subs	r2, r2, r3
 8006926:	2308      	movs	r3, #8
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	429a      	cmp	r2, r3
 800692c:	d91d      	bls.n	800696a <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4413      	add	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <pvPortMalloc+0x106>
 8006940:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8006944:	4824      	ldr	r0, [pc, #144]	@ (80069d8 <pvPortMalloc+0x194>)
 8006946:	f7fb f819 	bl	800197c <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	1ad2      	subs	r2, r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800696a:	4b1c      	ldr	r3, [pc, #112]	@ (80069dc <pvPortMalloc+0x198>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	4a19      	ldr	r2, [pc, #100]	@ (80069dc <pvPortMalloc+0x198>)
 8006976:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006978:	4b18      	ldr	r3, [pc, #96]	@ (80069dc <pvPortMalloc+0x198>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b19      	ldr	r3, [pc, #100]	@ (80069e4 <pvPortMalloc+0x1a0>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d203      	bcs.n	800698c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006984:	4b15      	ldr	r3, [pc, #84]	@ (80069dc <pvPortMalloc+0x198>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a16      	ldr	r2, [pc, #88]	@ (80069e4 <pvPortMalloc+0x1a0>)
 800698a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800699e:	4b12      	ldr	r3, [pc, #72]	@ (80069e8 <pvPortMalloc+0x1a4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3301      	adds	r3, #1
 80069a4:	4a10      	ldr	r2, [pc, #64]	@ (80069e8 <pvPortMalloc+0x1a4>)
 80069a6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80069a8:	f7fd ffda 	bl	8004960 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 80069b2:	f7fa fff7 	bl	80019a4 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <pvPortMalloc+0x186>
 80069c0:	f240 1173 	movw	r1, #371	@ 0x173
 80069c4:	4804      	ldr	r0, [pc, #16]	@ (80069d8 <pvPortMalloc+0x194>)
 80069c6:	f7fa ffd9 	bl	800197c <vAssertCalled>
    return pvReturn;
 80069ca:	697b      	ldr	r3, [r7, #20]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3720      	adds	r7, #32
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20000f50 	.word	0x20000f50
 80069d8:	08024970 	.word	0x08024970
 80069dc:	20000f54 	.word	0x20000f54
 80069e0:	20000f48 	.word	0x20000f48
 80069e4:	20000f58 	.word	0x20000f58
 80069e8:	20000f5c 	.word	0x20000f5c

080069ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d03d      	beq.n	8006a7a <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80069fe:	2308      	movs	r3, #8
 8006a00:	425b      	negs	r3, r3
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4413      	add	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	db04      	blt.n	8006a1e <vPortFree+0x32>
 8006a14:	f240 1187 	movw	r1, #391	@ 0x187
 8006a18:	481a      	ldr	r0, [pc, #104]	@ (8006a84 <vPortFree+0x98>)
 8006a1a:	f7fa ffaf 	bl	800197c <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d004      	beq.n	8006a30 <vPortFree+0x44>
 8006a26:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8006a2a:	4816      	ldr	r0, [pc, #88]	@ (8006a84 <vPortFree+0x98>)
 8006a2c:	f7fa ffa6 	bl	800197c <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	0fdb      	lsrs	r3, r3, #31
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01c      	beq.n	8006a7a <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d118      	bne.n	8006a7a <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8006a54:	f7fd ff76 	bl	8004944 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a88 <vPortFree+0x9c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4413      	add	r3, r2
 8006a62:	4a09      	ldr	r2, [pc, #36]	@ (8006a88 <vPortFree+0x9c>)
 8006a64:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a66:	68b8      	ldr	r0, [r7, #8]
 8006a68:	f000 f82a 	bl	8006ac0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006a6c:	4b07      	ldr	r3, [pc, #28]	@ (8006a8c <vPortFree+0xa0>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	4a06      	ldr	r2, [pc, #24]	@ (8006a8c <vPortFree+0xa0>)
 8006a74:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006a76:	f7fd ff73 	bl	8004960 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	08024970 	.word	0x08024970
 8006a88:	20000f54 	.word	0x20000f54
 8006a8c:	20000f60 	.word	0x20000f60

08006a90 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8006a94:	4b03      	ldr	r3, [pc, #12]	@ (8006aa4 <xPortGetFreeHeapSize+0x14>)
 8006a96:	681b      	ldr	r3, [r3, #0]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20000f54 	.word	0x20000f54

08006aa8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8006aac:	4b03      	ldr	r3, [pc, #12]	@ (8006abc <xPortGetMinimumEverFreeHeapSize+0x14>)
 8006aae:	681b      	ldr	r3, [r3, #0]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000f58 	.word	0x20000f58

08006ac0 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006ac8:	4b28      	ldr	r3, [pc, #160]	@ (8006b6c <prvInsertBlockIntoFreeList+0xac>)
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	e002      	b.n	8006ad4 <prvInsertBlockIntoFreeList+0x14>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d8f7      	bhi.n	8006ace <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	4413      	add	r3, r2
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d108      	bne.n	8006b02 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	441a      	add	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	441a      	add	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d118      	bne.n	8006b48 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	4b15      	ldr	r3, [pc, #84]	@ (8006b70 <prvInsertBlockIntoFreeList+0xb0>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d00d      	beq.n	8006b3e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	441a      	add	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	e008      	b.n	8006b50 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b70 <prvInsertBlockIntoFreeList+0xb0>)
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	e003      	b.n	8006b50 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d002      	beq.n	8006b5e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	20000f48 	.word	0x20000f48
 8006b70:	20000f50 	.word	0x20000f50

08006b74 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08a      	sub	sp, #40	@ 0x28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8006b88:	4b4b      	ldr	r3, [pc, #300]	@ (8006cb8 <vPortDefineHeapRegions+0x144>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <vPortDefineHeapRegions+0x26>
 8006b90:	f240 2121 	movw	r1, #545	@ 0x221
 8006b94:	4849      	ldr	r0, [pc, #292]	@ (8006cbc <vPortDefineHeapRegions+0x148>)
 8006b96:	f7fa fef1 	bl	800197c <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8006ba4:	e071      	b.n	8006c8a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00e      	beq.n	8006bda <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	3307      	adds	r3, #7
 8006bc0:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	f023 0307 	bic.w	r3, r3, #7
 8006bc8:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd6:	4413      	add	r3, r2
 8006bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d106      	bne.n	8006bf2 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4a36      	ldr	r2, [pc, #216]	@ (8006cc0 <vPortDefineHeapRegions+0x14c>)
 8006be8:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 8006bea:	4b35      	ldr	r3, [pc, #212]	@ (8006cc0 <vPortDefineHeapRegions+0x14c>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	605a      	str	r2, [r3, #4]
 8006bf0:	e013      	b.n	8006c1a <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 8006bf2:	4b31      	ldr	r3, [pc, #196]	@ (8006cb8 <vPortDefineHeapRegions+0x144>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d104      	bne.n	8006c04 <vPortDefineHeapRegions+0x90>
 8006bfa:	f240 2149 	movw	r1, #585	@ 0x249
 8006bfe:	482f      	ldr	r0, [pc, #188]	@ (8006cbc <vPortDefineHeapRegions+0x148>)
 8006c00:	f7fa febc 	bl	800197c <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8006c04:	4b2c      	ldr	r3, [pc, #176]	@ (8006cb8 <vPortDefineHeapRegions+0x144>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d804      	bhi.n	8006c1a <vPortDefineHeapRegions+0xa6>
 8006c10:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8006c14:	4829      	ldr	r0, [pc, #164]	@ (8006cbc <vPortDefineHeapRegions+0x148>)
 8006c16:	f7fa feb1 	bl	800197c <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 8006c1a:	4b27      	ldr	r3, [pc, #156]	@ (8006cb8 <vPortDefineHeapRegions+0x144>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	4413      	add	r3, r2
 8006c26:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006c28:	2208      	movs	r2, #8
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f023 0307 	bic.w	r3, r3, #7
 8006c36:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006cb8 <vPortDefineHeapRegions+0x144>)
 8006c3c:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 8006c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8006cb8 <vPortDefineHeapRegions+0x144>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2200      	movs	r2, #0
 8006c44:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006c46:	4b1c      	ldr	r3, [pc, #112]	@ (8006cb8 <vPortDefineHeapRegions+0x144>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	1ad2      	subs	r2, r2, r3
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006c5c:	4b16      	ldr	r3, [pc, #88]	@ (8006cb8 <vPortDefineHeapRegions+0x144>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	6a3a      	ldr	r2, [r7, #32]
 8006c76:	4413      	add	r3, r2
 8006c78:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	4413      	add	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d189      	bne.n	8006ba6 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8006c92:	4a0c      	ldr	r2, [pc, #48]	@ (8006cc4 <vPortDefineHeapRegions+0x150>)
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8006c98:	4a0b      	ldr	r2, [pc, #44]	@ (8006cc8 <vPortDefineHeapRegions+0x154>)
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d104      	bne.n	8006cae <vPortDefineHeapRegions+0x13a>
 8006ca4:	f240 2189 	movw	r1, #649	@ 0x289
 8006ca8:	4804      	ldr	r0, [pc, #16]	@ (8006cbc <vPortDefineHeapRegions+0x148>)
 8006caa:	f7fa fe67 	bl	800197c <vAssertCalled>
}
 8006cae:	bf00      	nop
 8006cb0:	3728      	adds	r7, #40	@ 0x28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000f50 	.word	0x20000f50
 8006cbc:	08024970 	.word	0x08024970
 8006cc0:	20000f48 	.word	0x20000f48
 8006cc4:	20000f58 	.word	0x20000f58
 8006cc8:	20000f54 	.word	0x20000f54

08006ccc <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b090      	sub	sp, #64	@ 0x40
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce4:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce8:	330e      	adds	r3, #14
 8006cea:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf6:	f040 81bb 	bne.w	8007070 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfc:	885b      	ldrh	r3, [r3, #2]
 8006cfe:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	f040 81b5 	bne.w	8007070 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d08:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8006d0a:	2b06      	cmp	r3, #6
 8006d0c:	f040 81b0 	bne.w	8007070 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	f040 81ab 	bne.w	8007070 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	330e      	adds	r3, #14
 8006d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8006d20:	f107 0320 	add.w	r3, r7, #32
 8006d24:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8006d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2e:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 8006d36:	4b9c      	ldr	r3, [pc, #624]	@ (8006fa8 <eARPProcessPacket+0x2dc>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 8006d3e:	499b      	ldr	r1, [pc, #620]	@ (8006fac <eARPProcessPacket+0x2e0>)
 8006d40:	489b      	ldr	r0, [pc, #620]	@ (8006fb0 <eARPProcessPacket+0x2e4>)
 8006d42:	f7fe faf3 	bl	800532c <xTaskCheckForTimeOut>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d102      	bne.n	8006d52 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 8006d4c:	4b96      	ldr	r3, [pc, #600]	@ (8006fa8 <eARPProcessPacket+0x2dc>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	7a1b      	ldrb	r3, [r3, #8]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f040 8188 	bne.w	8007070 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	061a      	lsls	r2, r3, #24
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	0a1b      	lsrs	r3, r3, #8
 8006d72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006d76:	431a      	orrs	r2, r3
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	0e1b      	lsrs	r3, r3, #24
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006d82:	d311      	bcc.n	8006da8 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	061a      	lsls	r2, r3, #24
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d90:	431a      	orrs	r2, r3
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	0a1b      	lsrs	r3, r3, #8
 8006d96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	0e1b      	lsrs	r3, r3, #24
 8006da0:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f280 8164 	bge.w	8007070 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8006da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d021      	beq.n	8006df2 <eARPProcessPacket+0x126>
 8006dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d11c      	bne.n	8006df2 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006db8:	4b7b      	ldr	r3, [pc, #492]	@ (8006fa8 <eARPProcessPacket+0x2dc>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 8157 	bne.w	8007070 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 8006dc2:	4b79      	ldr	r3, [pc, #484]	@ (8006fa8 <eARPProcessPacket+0x2dc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	4a77      	ldr	r2, [pc, #476]	@ (8006fa8 <eARPProcessPacket+0x2dc>)
 8006dca:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006dd4:	f000 fe32 	bl	8007a3c <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8006dd8:	f7fd fec6 	bl	8004b68 <xTaskGetTickCount>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4a75      	ldr	r2, [pc, #468]	@ (8006fb4 <eARPProcessPacket+0x2e8>)
 8006de0:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 8006de2:	4873      	ldr	r0, [pc, #460]	@ (8006fb0 <eARPProcessPacket+0x2e4>)
 8006de4:	f7fe fa6a 	bl	80052bc <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8006de8:	4b70      	ldr	r3, [pc, #448]	@ (8006fac <eARPProcessPacket+0x2e0>)
 8006dea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006dee:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006df0:	e13e      	b.n	8007070 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8006df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df4:	88db      	ldrh	r3, [r3, #6]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dfc:	d14a      	bne.n	8006e94 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	061a      	lsls	r2, r3, #24
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	0a1b      	lsrs	r3, r3, #8
 8006e10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006e14:	431a      	orrs	r2, r3
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	0e1b      	lsrs	r3, r3, #24
 8006e1a:	ea42 0103 	orr.w	r1, r2, r3
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e20:	061a      	lsls	r2, r3, #24
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006e34:	431a      	orrs	r2, r3
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	0e1b      	lsrs	r3, r3, #24
 8006e3a:	ea42 0003 	orr.w	r0, r2, r3
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <eARPProcessPacket+0x180>
 8006e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	061a      	lsls	r2, r3, #24
 8006e4a:	e000      	b.n	8006e4e <eARPProcessPacket+0x182>
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <eARPProcessPacket+0x194>
 8006e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	021b      	lsls	r3, r3, #8
 8006e5a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e5e:	e000      	b.n	8006e62 <eARPProcessPacket+0x196>
 8006e60:	2300      	movs	r3, #0
 8006e62:	431a      	orrs	r2, r3
 8006e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d005      	beq.n	8006e76 <eARPProcessPacket+0x1aa>
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	0a1b      	lsrs	r3, r3, #8
 8006e70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006e74:	e000      	b.n	8006e78 <eARPProcessPacket+0x1ac>
 8006e76:	2300      	movs	r3, #0
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <eARPProcessPacket+0x1bc>
 8006e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	0e1b      	lsrs	r3, r3, #24
 8006e86:	e000      	b.n	8006e8a <eARPProcessPacket+0x1be>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	484a      	ldr	r0, [pc, #296]	@ (8006fb8 <eARPProcessPacket+0x2ec>)
 8006e90:	f01b fbd8 	bl	8022644 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e96:	88db      	ldrh	r3, [r3, #6]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e9e:	d151      	bne.n	8006f44 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d04d      	beq.n	8006f44 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d04a      	beq.n	8006f44 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	061a      	lsls	r2, r3, #24
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	0e1b      	lsrs	r3, r3, #24
 8006eca:	ea42 0103 	orr.w	r1, r2, r3
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	061a      	lsls	r2, r3, #24
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006eda:	431a      	orrs	r2, r3
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	0a1b      	lsrs	r3, r3, #8
 8006ee0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	0e1b      	lsrs	r3, r3, #24
 8006eea:	ea42 0003 	orr.w	r0, r2, r3
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <eARPProcessPacket+0x230>
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	061a      	lsls	r2, r3, #24
 8006efa:	e000      	b.n	8006efe <eARPProcessPacket+0x232>
 8006efc:	2200      	movs	r2, #0
 8006efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <eARPProcessPacket+0x244>
 8006f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f0e:	e000      	b.n	8006f12 <eARPProcessPacket+0x246>
 8006f10:	2300      	movs	r3, #0
 8006f12:	431a      	orrs	r2, r3
 8006f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d005      	beq.n	8006f26 <eARPProcessPacket+0x25a>
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f24:	e000      	b.n	8006f28 <eARPProcessPacket+0x25c>
 8006f26:	2300      	movs	r3, #0
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <eARPProcessPacket+0x26c>
 8006f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	0e1b      	lsrs	r3, r3, #24
 8006f36:	e000      	b.n	8006f3a <eARPProcessPacket+0x26e>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	481f      	ldr	r0, [pc, #124]	@ (8006fbc <eARPProcessPacket+0x2f0>)
 8006f40:	f01b fb80 	bl	8022644 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8006f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 8092 	beq.w	8007070 <eARPProcessPacket+0x3a4>
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006f52:	f003 0310 	and.w	r3, r3, #16
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 8089 	beq.w	8007070 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	88db      	ldrh	r3, [r3, #6]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f68:	d003      	beq.n	8006f72 <eARPProcessPacket+0x2a6>
 8006f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f6e:	d077      	beq.n	8007060 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8006f70:	e07e      	b.n	8007070 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8006f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d121      	bne.n	8006fc0 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8006f86:	2206      	movs	r2, #6
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f01c fd0c 	bl	80239a6 <memcmp>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d06c      	beq.n	800706e <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	461a      	mov	r2, r3
 8006f98:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f9c:	f000 f872 	bl	8007084 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8006fa6:	e062      	b.n	800706e <eARPProcessPacket+0x3a2>
 8006fa8:	20000fc8 	.word	0x20000fc8
 8006fac:	20000010 	.word	0x20000010
 8006fb0:	20000fcc 	.word	0x20000fcc
 8006fb4:	20000fc4 	.word	0x20000fc4
 8006fb8:	080249a8 	.word	0x080249a8
 8006fbc:	080249d8 	.word	0x080249d8
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d152      	bne.n	800706e <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 8006fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	405a      	eors	r2, r3
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d149      	bne.n	800706e <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 8006fda:	4a28      	ldr	r2, [pc, #160]	@ (800707c <eARPProcessPacket+0x3b0>)
 8006fdc:	f107 0318 	add.w	r3, r7, #24
 8006fe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fe4:	6018      	str	r0, [r3, #0]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8006fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fec:	3312      	adds	r3, #18
 8006fee:	2206      	movs	r2, #6
 8006ff0:	4923      	ldr	r1, [pc, #140]	@ (8007080 <eARPProcessPacket+0x3b4>)
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f01c fcd7 	bl	80239a6 <memcmp>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	3312      	adds	r3, #18
 8007002:	f107 0118 	add.w	r1, r7, #24
 8007006:	2206      	movs	r2, #6
 8007008:	4618      	mov	r0, r3
 800700a:	f01c fccc 	bl	80239a6 <memcmp>
 800700e:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8007010:	2b00      	cmp	r3, #0
 8007012:	d12c      	bne.n	800706e <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 8007014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007016:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	3308      	adds	r3, #8
 800701e:	2206      	movs	r2, #6
 8007020:	4619      	mov	r1, r3
 8007022:	f01c fcc0 	bl	80239a6 <memcmp>
 8007026:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8007028:	2b00      	cmp	r3, #0
 800702a:	d020      	beq.n	800706e <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 8007030:	f107 020c 	add.w	r2, r7, #12
 8007034:	f107 0110 	add.w	r1, r7, #16
 8007038:	f107 0320 	add.w	r3, r7, #32
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fb11 	bl	8007664 <eARPGetCacheEntry>
 8007042:	4603      	mov	r3, r0
 8007044:	2b01      	cmp	r3, #1
 8007046:	d112      	bne.n	800706e <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800704c:	429a      	cmp	r2, r3
 800704e:	d10e      	bne.n	800706e <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8007050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007052:	3308      	adds	r3, #8
 8007054:	6a39      	ldr	r1, [r7, #32]
 8007056:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007058:	4618      	mov	r0, r3
 800705a:	f000 f9ef 	bl	800743c <vARPRefreshCacheEntry>
                            break;
 800705e:	e006      	b.n	800706e <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	461a      	mov	r2, r3
 8007064:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007066:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007068:	f000 f84a 	bl	8007100 <vARPProcessPacketReply>
                            break;
 800706c:	e000      	b.n	8007070 <eARPProcessPacket+0x3a4>
                            break;
 800706e:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8007070:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8007074:	4618      	mov	r0, r3
 8007076:	3740      	adds	r7, #64	@ 0x40
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	08024a08 	.word	0x08024a08
 8007080:	08027d54 	.word	0x08027d54

08007084 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	330e      	adds	r3, #14
 8007094:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	3308      	adds	r3, #8
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f9cc 	bl	800743c <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2200      	movs	r2, #0
 80070a8:	719a      	strb	r2, [r3, #6]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f042 0202 	orr.w	r2, r2, #2
 80070b0:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	3308      	adds	r3, #8
 80070b6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	3312      	adds	r3, #18
 80070bc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80070be:	2206      	movs	r2, #6
 80070c0:	69b9      	ldr	r1, [r7, #24]
 80070c2:	6978      	ldr	r0, [r7, #20]
 80070c4:	f01b fcda 	bl	8022a7c <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	33e8      	adds	r3, #232	@ 0xe8
 80070d2:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	3308      	adds	r3, #8
 80070d8:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80070da:	2206      	movs	r2, #6
 80070dc:	69b9      	ldr	r1, [r7, #24]
 80070de:	6978      	ldr	r0, [r7, #20]
 80070e0:	f01b fccc 	bl	8022a7c <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	330e      	adds	r3, #14
 80070ec:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	601a      	str	r2, [r3, #0]
    }
 80070f8:	bf00      	nop
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8007100:	b580      	push	{r7, lr}
 8007102:	b08c      	sub	sp, #48	@ 0x30
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	330e      	adds	r3, #14
 8007110:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800711e:	429a      	cmp	r2, r3
 8007120:	d005      	beq.n	800712e <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f844 	bl	80071b0 <xIsIPInARPCache>
 8007128:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 800712a:	2b01      	cmp	r3, #1
 800712c:	d106      	bne.n	800713c <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 800712e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007130:	3308      	adds	r3, #8
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 f980 	bl	800743c <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800713c:	4b1b      	ldr	r3, [pc, #108]	@ (80071ac <vARPProcessPacketReply+0xac>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d02e      	beq.n	80071a2 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8007144:	4b19      	ldr	r3, [pc, #100]	@ (80071ac <vARPProcessPacketReply+0xac>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f003 f8a5 	bl	800a298 <uxIPHeaderSizePacket>
 800714e:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8007150:	2b14      	cmp	r3, #20
 8007152:	d126      	bne.n	80071a2 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8007154:	4b15      	ldr	r3, [pc, #84]	@ (80071ac <vARPProcessPacketReply+0xac>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715a:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	330e      	adds	r3, #14
 8007160:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	429a      	cmp	r2, r3
 800716a:	d11a      	bne.n	80071a2 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 800716c:	2300      	movs	r3, #0
 800716e:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8007170:	2301      	movs	r3, #1
 8007172:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8007174:	4b0d      	ldr	r3, [pc, #52]	@ (80071ac <vARPProcessPacketReply+0xac>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800717a:	f107 0314 	add.w	r3, r7, #20
 800717e:	69f9      	ldr	r1, [r7, #28]
 8007180:	4618      	mov	r0, r3
 8007182:	f002 fcd5 	bl	8009b30 <xSendEventStructToIPTask>
 8007186:	4603      	mov	r3, r0
 8007188:	2b01      	cmp	r3, #1
 800718a:	d004      	beq.n	8007196 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800718c:	4b07      	ldr	r3, [pc, #28]	@ (80071ac <vARPProcessPacketReply+0xac>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4618      	mov	r0, r3
 8007192:	f010 fbaf 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8007196:	4b05      	ldr	r3, [pc, #20]	@ (80071ac <vARPProcessPacketReply+0xac>)
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 800719c:	2000      	movs	r0, #0
 800719e:	f003 fabd 	bl	800a71c <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 80071a2:	bf00      	nop
 80071a4:	3730      	adds	r7, #48	@ 0x30
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	2000119c 	.word	0x2000119c

080071b0 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e017      	b.n	80071f2 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80071c2:	4a12      	ldr	r2, [pc, #72]	@ (800720c <xIsIPInARPCache+0x5c>)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	4413      	add	r3, r2
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d10c      	bne.n	80071ec <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 80071d2:	2301      	movs	r3, #1
 80071d4:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80071d6:	4a0d      	ldr	r2, [pc, #52]	@ (800720c <xIsIPInARPCache+0x5c>)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	4413      	add	r3, r2
 80071de:	330b      	adds	r3, #11
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 80071e6:	2300      	movs	r3, #0
 80071e8:	60bb      	str	r3, [r7, #8]
            }

            break;
 80071ea:	e006      	b.n	80071fa <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b05      	cmp	r3, #5
 80071f6:	dde4      	ble.n	80071c2 <xIsIPInARPCache+0x12>
 80071f8:	e000      	b.n	80071fc <xIsIPInARPCache+0x4c>
            break;
 80071fa:	bf00      	nop
        }
    }

    return xReturn;
 80071fc:	68bb      	ldr	r3, [r7, #8]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	20000f64 	.word	0x20000f64

08007210 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8007210:	b590      	push	{r4, r7, lr}
 8007212:	b0a5      	sub	sp, #148	@ 0x94
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 8007218:	2300      	movs	r3, #0
 800721a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f003 f83a 	bl	800a298 <uxIPHeaderSizePacket>
 8007224:	4603      	mov	r3, r0
 8007226:	2b14      	cmp	r3, #20
 8007228:	d002      	beq.n	8007230 <xCheckRequiresARPResolution+0x20>
 800722a:	2b28      	cmp	r3, #40	@ 0x28
 800722c:	d029      	beq.n	8007282 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 800722e:	e0b6      	b.n	800739e <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8007236:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007238:	330e      	adds	r3, #14
 800723a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007240:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8007242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	405a      	eors	r2, r3
 800724c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	4013      	ands	r3, r2
 8007252:	2b00      	cmp	r3, #0
 8007254:	f040 80a0 	bne.w	8007398 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8007258:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff ffa7 	bl	80071b0 <xIsIPInARPCache>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	f040 8097 	bne.w	8007398 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800726e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f000 fbe1 	bl	8007a3c <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 800727a:	2301      	movs	r3, #1
 800727c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8007280:	e08a      	b.n	8007398 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800728a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800728e:	330e      	adds	r3, #14
 8007290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 8007294:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007298:	3308      	adds	r3, #8
 800729a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 800729e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072a2:	799b      	ldrb	r3, [r3, #6]
 80072a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 80072a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80072ac:	2b06      	cmp	r3, #6
 80072ae:	d003      	beq.n	80072b8 <xCheckRequiresARPResolution+0xa8>
 80072b0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80072b4:	2b11      	cmp	r3, #17
 80072b6:	d171      	bne.n	800739c <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 80072b8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80072bc:	f006 ff68 	bl	800e190 <xIPv6_GetIPType>
 80072c0:	4603      	mov	r3, r0
 80072c2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 80072c6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80072ca:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00d      	beq.n	80072ee <xCheckRequiresARPResolution+0xde>
 80072d2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d007      	beq.n	80072ea <xCheckRequiresARPResolution+0xda>
 80072da:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d101      	bne.n	80072e6 <xCheckRequiresARPResolution+0xd6>
 80072e2:	4b32      	ldr	r3, [pc, #200]	@ (80073ac <xCheckRequiresARPResolution+0x19c>)
 80072e4:	e004      	b.n	80072f0 <xCheckRequiresARPResolution+0xe0>
 80072e6:	4b32      	ldr	r3, [pc, #200]	@ (80073b0 <xCheckRequiresARPResolution+0x1a0>)
 80072e8:	e002      	b.n	80072f0 <xCheckRequiresARPResolution+0xe0>
 80072ea:	4b32      	ldr	r3, [pc, #200]	@ (80073b4 <xCheckRequiresARPResolution+0x1a4>)
 80072ec:	e000      	b.n	80072f0 <xCheckRequiresARPResolution+0xe0>
 80072ee:	4b32      	ldr	r3, [pc, #200]	@ (80073b8 <xCheckRequiresARPResolution+0x1a8>)
 80072f0:	461a      	mov	r2, r3
 80072f2:	4832      	ldr	r0, [pc, #200]	@ (80073bc <xCheckRequiresARPResolution+0x1ac>)
 80072f4:	f01b f9a6 	bl	8022644 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 80072f8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d14d      	bne.n	800739c <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8007300:	f107 030c 	add.w	r3, r7, #12
 8007304:	2250      	movs	r2, #80	@ 0x50
 8007306:	2100      	movs	r1, #0
 8007308:	4618      	mov	r0, r3
 800730a:	f01b fcc4 	bl	8022c96 <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 800730e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8007312:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007316:	4619      	mov	r1, r3
 8007318:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800731c:	f004 fe0e 	bl	800bf3c <eNDGetCacheEntry>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 8007326:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800732a:	2b00      	cmp	r3, #0
 800732c:	d007      	beq.n	800733e <xCheckRequiresARPResolution+0x12e>
 800732e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8007332:	2b01      	cmp	r3, #1
 8007334:	d101      	bne.n	800733a <xCheckRequiresARPResolution+0x12a>
 8007336:	4c22      	ldr	r4, [pc, #136]	@ (80073c0 <xCheckRequiresARPResolution+0x1b0>)
 8007338:	e002      	b.n	8007340 <xCheckRequiresARPResolution+0x130>
 800733a:	4c22      	ldr	r4, [pc, #136]	@ (80073c4 <xCheckRequiresARPResolution+0x1b4>)
 800733c:	e000      	b.n	8007340 <xCheckRequiresARPResolution+0x130>
 800733e:	4c22      	ldr	r4, [pc, #136]	@ (80073c8 <xCheckRequiresARPResolution+0x1b8>)
 8007340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007342:	f107 010c 	add.w	r1, r7, #12
 8007346:	2250      	movs	r2, #80	@ 0x50
 8007348:	4618      	mov	r0, r3
 800734a:	f006 ff79 	bl	800e240 <pcEndpointName>
 800734e:	4603      	mov	r3, r0
 8007350:	461a      	mov	r2, r3
 8007352:	4621      	mov	r1, r4
 8007354:	481d      	ldr	r0, [pc, #116]	@ (80073cc <xCheckRequiresARPResolution+0x1bc>)
 8007356:	f01b f975 	bl	8022644 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 800735a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800735e:	2b00      	cmp	r3, #0
 8007360:	d11c      	bne.n	800739c <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 8007362:	2356      	movs	r3, #86	@ 0x56
 8007364:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 8007366:	2100      	movs	r1, #0
 8007368:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800736a:	f010 fa5b 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 800736e:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 8007370:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00c      	beq.n	8007390 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800737a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800737c:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007382:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007384:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8007386:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800738a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800738c:	f005 f842 	bl	800c414 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 8007390:	2301      	movs	r3, #1
 8007392:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8007396:	e001      	b.n	800739c <xCheckRequiresARPResolution+0x18c>
                   break;
 8007398:	bf00      	nop
 800739a:	e000      	b.n	800739e <xCheckRequiresARPResolution+0x18e>
                   break;
 800739c:	bf00      	nop
    }

    return xNeedsARPResolution;
 800739e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3794      	adds	r7, #148	@ 0x94
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd90      	pop	{r4, r7, pc}
 80073aa:	bf00      	nop
 80073ac:	08024a10 	.word	0x08024a10
 80073b0:	08024a1c 	.word	0x08024a1c
 80073b4:	08024a24 	.word	0x08024a24
 80073b8:	08024a30 	.word	0x08024a30
 80073bc:	08024a38 	.word	0x08024a38
 80073c0:	08024a64 	.word	0x08024a64
 80073c4:	08024a68 	.word	0x08024a68
 80073c8:	08024a70 	.word	0x08024a70
 80073cc:	08024a78 	.word	0x08024a78

080073d0 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d026      	beq.n	800742e <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e020      	b.n	8007428 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80073e6:	4a14      	ldr	r2, [pc, #80]	@ (8007438 <vARPRefreshCacheEntryAge+0x68>)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	4413      	add	r3, r2
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d115      	bne.n	8007422 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	4a0f      	ldr	r2, [pc, #60]	@ (8007438 <vARPRefreshCacheEntryAge+0x68>)
 80073fc:	4413      	add	r3, r2
 80073fe:	3304      	adds	r3, #4
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	2206      	movs	r2, #6
 8007404:	4618      	mov	r0, r3
 8007406:	f01c face 	bl	80239a6 <memcmp>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d108      	bne.n	8007422 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007410:	4a09      	ldr	r2, [pc, #36]	@ (8007438 <vARPRefreshCacheEntryAge+0x68>)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	4413      	add	r3, r2
 8007418:	330a      	adds	r3, #10
 800741a:	2296      	movs	r2, #150	@ 0x96
 800741c:	701a      	strb	r2, [r3, #0]
                    break;
 800741e:	bf00      	nop
                }
            }
        }
    }
}
 8007420:	e005      	b.n	800742e <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3301      	adds	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b05      	cmp	r3, #5
 800742c:	dddb      	ble.n	80073e6 <vARPRefreshCacheEntryAge+0x16>
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	20000f64 	.word	0x20000f64

0800743c <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 8007448:	f107 0310 	add.w	r3, r7, #16
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 f85b 	bl	800750c <prvFindCacheEntry>
 8007456:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d150      	bne.n	8007500 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	db0e      	blt.n	8007482 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	db0e      	blt.n	800748c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	4a25      	ldr	r2, [pc, #148]	@ (8007508 <vARPRefreshCacheEntry+0xcc>)
 8007474:	4413      	add	r3, r2
 8007476:	2210      	movs	r2, #16
 8007478:	2100      	movs	r1, #0
 800747a:	4618      	mov	r0, r3
 800747c:	f01b fc0b 	bl	8022c96 <memset>
 8007480:	e004      	b.n	800748c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	db01      	blt.n	800748c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	4a1e      	ldr	r2, [pc, #120]	@ (8007508 <vARPRefreshCacheEntry+0xcc>)
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	4413      	add	r3, r2
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d01f      	beq.n	80074de <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	4a19      	ldr	r2, [pc, #100]	@ (8007508 <vARPRefreshCacheEntry+0xcc>)
 80074a4:	4413      	add	r3, r2
 80074a6:	3304      	adds	r3, #4
 80074a8:	68f9      	ldr	r1, [r7, #12]
 80074aa:	2206      	movs	r2, #6
 80074ac:	4618      	mov	r0, r3
 80074ae:	f01b fae5 	bl	8022a7c <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	4a14      	ldr	r2, [pc, #80]	@ (8007508 <vARPRefreshCacheEntry+0xcc>)
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	4413      	add	r3, r2
 80074ba:	330a      	adds	r3, #10
 80074bc:	2296      	movs	r2, #150	@ 0x96
 80074be:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	4a11      	ldr	r2, [pc, #68]	@ (8007508 <vARPRefreshCacheEntry+0xcc>)
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	4413      	add	r3, r2
 80074c8:	330b      	adds	r3, #11
 80074ca:	2201      	movs	r2, #1
 80074cc:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	4a0d      	ldr	r2, [pc, #52]	@ (8007508 <vARPRefreshCacheEntry+0xcc>)
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	4413      	add	r3, r2
 80074d6:	330c      	adds	r3, #12
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 80074dc:	e010      	b.n	8007500 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	da0d      	bge.n	8007500 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	4a08      	ldr	r2, [pc, #32]	@ (8007508 <vARPRefreshCacheEntry+0xcc>)
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	4413      	add	r3, r2
 80074ec:	330a      	adds	r3, #10
 80074ee:	2205      	movs	r2, #5
 80074f0:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	4a04      	ldr	r2, [pc, #16]	@ (8007508 <vARPRefreshCacheEntry+0xcc>)
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	4413      	add	r3, r2
 80074fa:	330b      	adds	r3, #11
 80074fc:	2200      	movs	r2, #0
 80074fe:	701a      	strb	r2, [r3, #0]
}
 8007500:	bf00      	nop
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20000f64 	.word	0x20000f64

0800750c <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08a      	sub	sp, #40	@ 0x28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 8007524:	2300      	movs	r3, #0
 8007526:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007528:	2102      	movs	r1, #2
 800752a:	68b8      	ldr	r0, [r7, #8]
 800752c:	f006 fb24 	bl	800db78 <FreeRTOS_FindEndPointOnNetMask>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	bf14      	ite	ne
 8007536:	2301      	movne	r3, #1
 8007538:	2300      	moveq	r3, #0
 800753a:	b2db      	uxtb	r3, r3
 800753c:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 800753e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007542:	3b01      	subs	r3, #1
 8007544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f04f 32ff 	mov.w	r2, #4294967295
 800754e:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	f04f 32ff 	mov.w	r2, #4294967295
 8007556:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2200      	movs	r2, #0
 800755c:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800755e:	2300      	movs	r3, #0
 8007560:	627b      	str	r3, [r7, #36]	@ 0x24
 8007562:	e074      	b.n	800764e <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 8007564:	2300      	movs	r3, #0
 8007566:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00e      	beq.n	800758c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	4a3b      	ldr	r2, [pc, #236]	@ (8007660 <prvFindCacheEntry+0x154>)
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	68f9      	ldr	r1, [r7, #12]
 800757a:	2206      	movs	r2, #6
 800757c:	4618      	mov	r0, r3
 800757e:	f01c fa12 	bl	80239a6 <memcmp>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8007588:	2301      	movs	r3, #1
 800758a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800758c:	4a34      	ldr	r2, [pc, #208]	@ (8007660 <prvFindCacheEntry+0x154>)
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	4413      	add	r3, r2
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	429a      	cmp	r2, r3
 800759a:	d125      	bne.n	80075e8 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d103      	bne.n	80075aa <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a6:	601a      	str	r2, [r3, #0]
                break;
 80075a8:	e054      	b.n	8007654 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d017      	beq.n	80075e0 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80075b0:	4a2b      	ldr	r2, [pc, #172]	@ (8007660 <prvFindCacheEntry+0x154>)
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	4413      	add	r3, r2
 80075b8:	330a      	adds	r3, #10
 80075ba:	2296      	movs	r2, #150	@ 0x96
 80075bc:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 80075be:	4a28      	ldr	r2, [pc, #160]	@ (8007660 <prvFindCacheEntry+0x154>)
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	4413      	add	r3, r2
 80075c6:	330b      	adds	r3, #11
 80075c8:	2201      	movs	r2, #1
 80075ca:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 80075cc:	4a24      	ldr	r2, [pc, #144]	@ (8007660 <prvFindCacheEntry+0x154>)
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	4413      	add	r3, r2
 80075d4:	330c      	adds	r3, #12
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 80075da:	2301      	movs	r3, #1
 80075dc:	61fb      	str	r3, [r7, #28]
                break;
 80075de:	e039      	b.n	8007654 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	e02f      	b.n	8007648 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d017      	beq.n	800761e <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 80075ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007660 <prvFindCacheEntry+0x154>)
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	4413      	add	r3, r2
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2103      	movs	r1, #3
 80075fa:	4618      	mov	r0, r3
 80075fc:	f006 fabc 	bl	800db78 <FreeRTOS_FindEndPointOnNetMask>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	bf14      	ite	ne
 8007606:	2301      	movne	r3, #1
 8007608:	2300      	moveq	r3, #0
 800760a:	b2db      	uxtb	r3, r3
 800760c:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	429a      	cmp	r2, r3
 8007614:	d118      	bne.n	8007648 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800761a:	605a      	str	r2, [r3, #4]
 800761c:	e014      	b.n	8007648 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800761e:	4a10      	ldr	r2, [pc, #64]	@ (8007660 <prvFindCacheEntry+0x154>)
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	4413      	add	r3, r2
 8007626:	330a      	adds	r3, #10
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800762e:	429a      	cmp	r2, r3
 8007630:	d90a      	bls.n	8007648 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8007632:	4a0b      	ldr	r2, [pc, #44]	@ (8007660 <prvFindCacheEntry+0x154>)
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	4413      	add	r3, r2
 800763a:	330a      	adds	r3, #10
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007646:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	3301      	adds	r3, #1
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	2b05      	cmp	r3, #5
 8007652:	dd87      	ble.n	8007564 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 8007654:	69fb      	ldr	r3, [r7, #28]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3728      	adds	r7, #40	@ 0x28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000f64 	.word	0x20000f64

08007664 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8007670:	2300      	movs	r3, #0
 8007672:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <eARPGetCacheEntry+0x20>
 800767a:	f240 31c9 	movw	r1, #969	@ 0x3c9
 800767e:	483c      	ldr	r0, [pc, #240]	@ (8007770 <eARPGetCacheEntry+0x10c>)
 8007680:	f7fa f97c 	bl	800197c <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d104      	bne.n	8007694 <eARPGetCacheEntry+0x30>
 800768a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 800768e:	4838      	ldr	r0, [pc, #224]	@ (8007770 <eARPGetCacheEntry+0x10c>)
 8007690:	f7fa f974 	bl	800197c <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <eARPGetCacheEntry+0x40>
 800769a:	f240 31cb 	movw	r1, #971	@ 0x3cb
 800769e:	4834      	ldr	r0, [pc, #208]	@ (8007770 <eARPGetCacheEntry+0x10c>)
 80076a0:	f7fa f96c 	bl	800197c <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 80076b0:	2100      	movs	r1, #0
 80076b2:	6978      	ldr	r0, [r7, #20]
 80076b4:	f006 f9d4 	bl	800da60 <FreeRTOS_FindEndPointOnIP_IPv4>
 80076b8:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 80076ba:	6978      	ldr	r0, [r7, #20]
 80076bc:	f003 fc3c 	bl	800af38 <xIsIPv4Multicast>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d021      	beq.n	800770a <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	6978      	ldr	r0, [r7, #20]
 80076ca:	f003 fd63 	bl	800b194 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 80076ce:	2302      	movs	r3, #2
 80076d0:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80076d2:	2000      	movs	r0, #0
 80076d4:	f006 f978 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 80076d8:	61b8      	str	r0, [r7, #24]

            for( ;
 80076da:	e012      	b.n	8007702 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80076e2:	f003 0304 	and.w	r3, r3, #4
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d105      	bne.n	80076f8 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 80076f2:	2301      	movs	r3, #1
 80076f4:	77fb      	strb	r3, [r7, #31]
                    break;
 80076f6:	e035      	b.n	8007764 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 80076f8:	69b9      	ldr	r1, [r7, #24]
 80076fa:	2000      	movs	r0, #0
 80076fc:	f006 f986 	bl	800da0c <FreeRTOS_NextEndPoint>
 8007700:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e9      	bne.n	80076dc <eARPGetCacheEntry+0x78>
 8007708:	e02c      	b.n	8007764 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	061a      	lsls	r2, r3, #24
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007716:	431a      	orrs	r2, r3
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	0a1b      	lsrs	r3, r3, #8
 800771c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007720:	431a      	orrs	r2, r3
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	0e1b      	lsrs	r3, r3, #24
 8007726:	4313      	orrs	r3, r2
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2bff      	cmp	r3, #255	@ 0xff
 800772c:	d113      	bne.n	8007756 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4a10      	ldr	r2, [pc, #64]	@ (8007774 <eARPGetCacheEntry+0x110>)
 8007732:	6811      	ldr	r1, [r2, #0]
 8007734:	6019      	str	r1, [r3, #0]
 8007736:	8892      	ldrh	r2, [r2, #4]
 8007738:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 800773a:	2104      	movs	r1, #4
 800773c:	6978      	ldr	r0, [r7, #20]
 800773e:	f006 fa1b 	bl	800db78 <FreeRTOS_FindEndPointOnNetMask>
 8007742:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 8007750:	2301      	movs	r3, #1
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e006      	b.n	8007764 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	68b9      	ldr	r1, [r7, #8]
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 f80c 	bl	8007778 <eARPGetCacheEntryGateWay>
 8007760:	4603      	mov	r3, r0
 8007762:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 8007764:	7ffb      	ldrb	r3, [r7, #31]
    }
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	08024aac 	.word	0x08024aac
 8007774:	08027d54 	.word	0x08027d54

08007778 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8007784:	2300      	movs	r3, #0
 8007786:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8007794:	2104      	movs	r1, #4
 8007796:	69b8      	ldr	r0, [r7, #24]
 8007798:	f006 f9ee 	bl	800db78 <FreeRTOS_FindEndPointOnNetMask>
 800779c:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d11b      	bne.n	80077dc <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	69b8      	ldr	r0, [r7, #24]
 80077aa:	f000 f86b 	bl	8007884 <prvCacheLookup>
 80077ae:	4603      	mov	r3, r0
 80077b0:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 80077b2:	7ffb      	ldrb	r3, [r7, #31]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d017      	beq.n	80077e8 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 80077b8:	2040      	movs	r0, #64	@ 0x40
 80077ba:	f006 fca9 	bl	800e110 <FreeRTOS_FindGateWay>
 80077be:	4602      	mov	r2, r0
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d004      	beq.n	80077d6 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	61bb      	str	r3, [r7, #24]
 80077d4:	e008      	b.n	80077e8 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61bb      	str	r3, [r7, #24]
 80077da:	e005      	b.n	80077e8 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 80077e8:	7ffb      	ldrb	r3, [r7, #31]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d13f      	bne.n	800786e <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d102      	bne.n	80077fa <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 80077f4:	2302      	movs	r3, #2
 80077f6:	77fb      	strb	r3, [r7, #31]
 80077f8:	e039      	b.n	800786e <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	69b8      	ldr	r0, [r7, #24]
 8007800:	f000 f840 	bl	8007884 <prvCacheLookup>
 8007804:	4603      	mov	r3, r0
 8007806:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8007808:	7ffb      	ldrb	r3, [r7, #31]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d103      	bne.n	8007816 <eARPGetCacheEntryGateWay+0x9e>
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	429a      	cmp	r2, r3
 8007814:	d028      	beq.n	8007868 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	061a      	lsls	r2, r3, #24
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007822:	431a      	orrs	r2, r3
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	0a1b      	lsrs	r3, r3, #8
 8007828:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800782c:	431a      	orrs	r2, r3
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	0e1b      	lsrs	r3, r3, #24
 8007832:	ea42 0103 	orr.w	r1, r2, r3
 8007836:	7ffb      	ldrb	r3, [r7, #31]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <eARPGetCacheEntryGateWay+0xc8>
 800783c:	480e      	ldr	r0, [pc, #56]	@ (8007878 <eARPGetCacheEntryGateWay+0x100>)
 800783e:	e000      	b.n	8007842 <eARPGetCacheEntryGateWay+0xca>
 8007840:	480e      	ldr	r0, [pc, #56]	@ (800787c <eARPGetCacheEntryGateWay+0x104>)
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	061a      	lsls	r2, r3, #24
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800784e:	431a      	orrs	r2, r3
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	0a1b      	lsrs	r3, r3, #8
 8007854:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007858:	431a      	orrs	r2, r3
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	0e1b      	lsrs	r3, r3, #24
 800785e:	4313      	orrs	r3, r2
 8007860:	4602      	mov	r2, r0
 8007862:	4807      	ldr	r0, [pc, #28]	@ (8007880 <eARPGetCacheEntryGateWay+0x108>)
 8007864:	f01a feee 	bl	8022644 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800786e:	7ffb      	ldrb	r3, [r7, #31]
    }
 8007870:	4618      	mov	r0, r3
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	08024ad8 	.word	0x08024ad8
 800787c:	08024adc 	.word	0x08024adc
 8007880:	08024ae4 	.word	0x08024ae4

08007884 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8007890:	2300      	movs	r3, #0
 8007892:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	e02a      	b.n	80078f0 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800789a:	4a19      	ldr	r2, [pc, #100]	@ (8007900 <prvCacheLookup+0x7c>)
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	4413      	add	r3, r2
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d11f      	bne.n	80078ea <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80078aa:	4a15      	ldr	r2, [pc, #84]	@ (8007900 <prvCacheLookup+0x7c>)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	4413      	add	r3, r2
 80078b2:	330b      	adds	r3, #11
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 80078ba:	2302      	movs	r3, #2
 80078bc:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 80078be:	e01a      	b.n	80078f6 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80078c0:	68b8      	ldr	r0, [r7, #8]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	4a0e      	ldr	r2, [pc, #56]	@ (8007900 <prvCacheLookup+0x7c>)
 80078c8:	4413      	add	r3, r2
 80078ca:	3304      	adds	r3, #4
 80078cc:	2206      	movs	r2, #6
 80078ce:	4619      	mov	r1, r3
 80078d0:	f01b f8d4 	bl	8022a7c <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 80078d4:	4a0a      	ldr	r2, [pc, #40]	@ (8007900 <prvCacheLookup+0x7c>)
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	011b      	lsls	r3, r3, #4
 80078da:	4413      	add	r3, r2
 80078dc:	330c      	adds	r3, #12
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 80078e4:	2301      	movs	r3, #1
 80078e6:	74fb      	strb	r3, [r7, #19]
                break;
 80078e8:	e005      	b.n	80078f6 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	3301      	adds	r3, #1
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b05      	cmp	r3, #5
 80078f4:	ddd1      	ble.n	800789a <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 80078f6:	7cfb      	ldrb	r3, [r7, #19]
    }
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20000f64 	.word	0x20000f64

08007904 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	e048      	b.n	80079a2 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8007910:	4a47      	ldr	r2, [pc, #284]	@ (8007a30 <vARPAgeCache+0x12c>)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	4413      	add	r3, r2
 8007918:	330a      	adds	r3, #10
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d03d      	beq.n	800799c <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8007920:	4a43      	ldr	r2, [pc, #268]	@ (8007a30 <vARPAgeCache+0x12c>)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	011b      	lsls	r3, r3, #4
 8007926:	4413      	add	r3, r2
 8007928:	330a      	adds	r3, #10
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	3b01      	subs	r3, #1
 800792e:	b2d9      	uxtb	r1, r3
 8007930:	4a3f      	ldr	r2, [pc, #252]	@ (8007a30 <vARPAgeCache+0x12c>)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	4413      	add	r3, r2
 8007938:	330a      	adds	r3, #10
 800793a:	460a      	mov	r2, r1
 800793c:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800793e:	4a3c      	ldr	r2, [pc, #240]	@ (8007a30 <vARPAgeCache+0x12c>)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	011b      	lsls	r3, r3, #4
 8007944:	4413      	add	r3, r2
 8007946:	330b      	adds	r3, #11
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d108      	bne.n	8007960 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800794e:	4a38      	ldr	r2, [pc, #224]	@ (8007a30 <vARPAgeCache+0x12c>)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	4413      	add	r3, r2
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4618      	mov	r0, r3
 800795a:	f000 f8d7 	bl	8007b0c <FreeRTOS_OutputARPRequest>
 800795e:	e00f      	b.n	8007980 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007960:	4a33      	ldr	r2, [pc, #204]	@ (8007a30 <vARPAgeCache+0x12c>)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	4413      	add	r3, r2
 8007968:	330a      	adds	r3, #10
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b03      	cmp	r3, #3
 800796e:	d807      	bhi.n	8007980 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007970:	4a2f      	ldr	r2, [pc, #188]	@ (8007a30 <vARPAgeCache+0x12c>)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	4413      	add	r3, r2
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f000 f8c6 	bl	8007b0c <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8007980:	4a2b      	ldr	r2, [pc, #172]	@ (8007a30 <vARPAgeCache+0x12c>)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	011b      	lsls	r3, r3, #4
 8007986:	4413      	add	r3, r2
 8007988:	330a      	adds	r3, #10
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d105      	bne.n	800799c <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8007990:	4a27      	ldr	r2, [pc, #156]	@ (8007a30 <vARPAgeCache+0x12c>)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	4413      	add	r3, r2
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3301      	adds	r3, #1
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b05      	cmp	r3, #5
 80079a6:	ddb3      	ble.n	8007910 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 80079a8:	f7fd f8de 	bl	8004b68 <xTaskGetTickCount>
 80079ac:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 80079ae:	4b21      	ldr	r3, [pc, #132]	@ (8007a34 <vARPAgeCache+0x130>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <vARPAgeCache+0xc2>
 80079b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007a34 <vARPAgeCache+0x130>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d92f      	bls.n	8007a26 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 80079c6:	4b1c      	ldr	r3, [pc, #112]	@ (8007a38 <vARPAgeCache+0x134>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 80079cc:	e025      	b.n	8007a1a <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80079d4:	f003 0310 	and.w	r3, r3, #16
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d019      	beq.n	8007a12 <vARPAgeCache+0x10e>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d015      	beq.n	8007a12 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80079ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <vARPAgeCache+0xf8>
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d007      	beq.n	8007a0a <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 80079fa:	e00a      	b.n	8007a12 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4619      	mov	r1, r3
 8007a02:	68b8      	ldr	r0, [r7, #8]
 8007a04:	f000 f81a 	bl	8007a3c <FreeRTOS_OutputARPRequest_Multi>
                                break;
 8007a08:	e003      	b.n	8007a12 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 8007a0a:	68b8      	ldr	r0, [r7, #8]
 8007a0c:	f005 f822 	bl	800ca54 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8007a10:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007a18:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1d6      	bne.n	80079ce <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8007a20:	4a04      	ldr	r2, [pc, #16]	@ (8007a34 <vARPAgeCache+0x130>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6013      	str	r3, [r2, #0]
        }
    }
 8007a26:	bf00      	nop
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000f64 	.word	0x20000f64
 8007a34:	20000fc4 	.word	0x20000fc4
 8007a38:	20001528 	.word	0x20001528

08007a3c <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d156      	bne.n	8007b04 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d052      	beq.n	8007b04 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8007a5e:	2100      	movs	r1, #0
 8007a60:	202a      	movs	r0, #42	@ 0x2a
 8007a62:	f00f fedf 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 8007a66:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d04a      	beq.n	8007b04 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8007a84:	6938      	ldr	r0, [r7, #16]
 8007a86:	f000 f855 	bl	8007b34 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8e:	2b3b      	cmp	r3, #59	@ 0x3b
 8007a90:	d812      	bhi.n	8007ab8 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	e008      	b.n	8007aac <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2b3b      	cmp	r3, #59	@ 0x3b
 8007ab0:	ddf3      	ble.n	8007a9a <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	223c      	movs	r2, #60	@ 0x3c
 8007ab6:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8007ab8:	f002 ff7c 	bl	800a9b4 <xIsCallingFromIPTask>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00f      	beq.n	8007ae2 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01b      	beq.n	8007b04 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 8007ada:	2201      	movs	r2, #1
 8007adc:	6939      	ldr	r1, [r7, #16]
 8007ade:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8007ae0:	e010      	b.n	8007b04 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8007aea:	f107 0308 	add.w	r3, r7, #8
 8007aee:	f04f 31ff 	mov.w	r1, #4294967295
 8007af2:	4618      	mov	r0, r3
 8007af4:	f002 f81c 	bl	8009b30 <xSendEventStructToIPTask>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007afe:	6938      	ldr	r0, [r7, #16]
 8007b00:	f00f fef8 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
    }
 8007b04:	bf00      	nop
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 8007b14:	210c      	movs	r1, #12
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f006 f82e 	bl	800db78 <FreeRTOS_FindEndPointOnNetMask>
 8007b1c:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8007b24:	6879      	ldr	r1, [r7, #4]
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff ff88 	bl	8007a3c <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d104      	bne.n	8007b4c <vARPGenerateRequestPacket+0x18>
 8007b42:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8007b46:	4828      	ldr	r0, [pc, #160]	@ (8007be8 <vARPGenerateRequestPacket+0xb4>)
 8007b48:	f7f9 ff18 	bl	800197c <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b50:	2b29      	cmp	r3, #41	@ 0x29
 8007b52:	d804      	bhi.n	8007b5e <vARPGenerateRequestPacket+0x2a>
 8007b54:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8007b58:	4823      	ldr	r0, [pc, #140]	@ (8007be8 <vARPGenerateRequestPacket+0xb4>)
 8007b5a:	f7f9 ff0f 	bl	800197c <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d104      	bne.n	8007b70 <vARPGenerateRequestPacket+0x3c>
 8007b66:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8007b6a:	481f      	ldr	r0, [pc, #124]	@ (8007be8 <vARPGenerateRequestPacket+0xb4>)
 8007b6c:	f7f9 ff06 	bl	800197c <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b74:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8007b76:	4b1d      	ldr	r3, [pc, #116]	@ (8007bec <vARPGenerateRequestPacket+0xb8>)
 8007b78:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8007b7e:	2226      	movs	r2, #38	@ 0x26
 8007b80:	6939      	ldr	r1, [r7, #16]
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f01a ff7a 	bl	8022a7c <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8c:	33e8      	adds	r3, #232	@ 0xe8
 8007b8e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	3306      	adds	r3, #6
 8007b94:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007b96:	2206      	movs	r2, #6
 8007b98:	6939      	ldr	r1, [r7, #16]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f01a ff6e 	bl	8022a7c <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba4:	33e8      	adds	r3, #232	@ 0xe8
 8007ba6:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	3316      	adds	r3, #22
 8007bac:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007bae:	2206      	movs	r2, #6
 8007bb0:	6939      	ldr	r1, [r7, #16]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f01a ff62 	bl	8022a7c <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bbc:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	331c      	adds	r3, #28
 8007bc2:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695a      	ldr	r2, [r3, #20]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	222a      	movs	r2, #42	@ 0x2a
 8007bdc:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 8007bde:	bf00      	nop
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	08024aac 	.word	0x08024aac
 8007bec:	08027d1c 	.word	0x08027d1c

08007bf0 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d01b      	beq.n	8007c36 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	e014      	b.n	8007c2e <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 8007c04:	4a10      	ldr	r2, [pc, #64]	@ (8007c48 <FreeRTOS_ClearARP+0x58>)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	4413      	add	r3, r2
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d108      	bne.n	8007c28 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8007c48 <FreeRTOS_ClearARP+0x58>)
 8007c1c:	4413      	add	r3, r2
 8007c1e:	2210      	movs	r2, #16
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f01b f837 	bl	8022c96 <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b05      	cmp	r3, #5
 8007c32:	dde7      	ble.n	8007c04 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 8007c34:	e004      	b.n	8007c40 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8007c36:	2260      	movs	r2, #96	@ 0x60
 8007c38:	2100      	movs	r1, #0
 8007c3a:	4803      	ldr	r0, [pc, #12]	@ (8007c48 <FreeRTOS_ClearARP+0x58>)
 8007c3c:	f01b f82b 	bl	8022c96 <memset>
}
 8007c40:	bf00      	nop
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20000f64 	.word	0x20000f64

08007c4c <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8007c50:	f000 fc8a 	bl	8008568 <vDNSCallbackInitialise>
        }
 8007c54:	bf00      	nop
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8007c68:	2048      	movs	r0, #72	@ 0x48
 8007c6a:	f7fe fdeb 	bl	8006844 <pvPortMalloc>
 8007c6e:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d057      	beq.n	8007d26 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 8007c7a:	2248      	movs	r2, #72	@ 0x48
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	69f8      	ldr	r0, [r7, #28]
 8007c80:	f01b f809 	bl	8022c96 <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	3338      	adds	r3, #56	@ 0x38
 8007c92:	220f      	movs	r2, #15
 8007c94:	68f9      	ldr	r1, [r7, #12]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f01b fedc 	bl	8023a54 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f103 0220 	add.w	r2, r3, #32
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d003      	beq.n	8007cbc <pxNew_AddrInfo+0x64>
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2b0a      	cmp	r3, #10
 8007cb8:	d01e      	beq.n	8007cf8 <pxNew_AddrInfo+0xa0>
 8007cba:	e02b      	b.n	8007d14 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f003 f87d 	bl	800adbc <ulChar2u32>
 8007cc2:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	061a      	lsls	r2, r3, #24
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	0a1b      	lsrs	r3, r3, #8
 8007cd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007cda:	ea42 0103 	orr.w	r1, r2, r3
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	0e1a      	lsrs	r2, r3, #24
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	2202      	movs	r2, #2
 8007cee:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	611a      	str	r2, [r3, #16]
                       }
                       break;
 8007cf6:	e016      	b.n	8007d26 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	220a      	movs	r2, #10
 8007cfc:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	2210      	movs	r2, #16
 8007d02:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	3328      	adds	r3, #40	@ 0x28
 8007d08:	2210      	movs	r2, #16
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f01a feb5 	bl	8022a7c <memcpy>
                        break;
 8007d12:	e008      	b.n	8007d26 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 8007d14:	4806      	ldr	r0, [pc, #24]	@ (8007d30 <pxNew_AddrInfo+0xd8>)
 8007d16:	f01a fc95 	bl	8022644 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 8007d1a:	69b8      	ldr	r0, [r7, #24]
 8007d1c:	f7fe fe66 	bl	80069ec <vPortFree>
                    pxAddrInfo = NULL;
 8007d20:	2300      	movs	r3, #0
 8007d22:	61fb      	str	r3, [r7, #28]

                    break;
 8007d24:	bf00      	nop
            }
        }

        return pxAddrInfo;
 8007d26:	69fb      	ldr	r3, [r7, #28]
    }
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3720      	adds	r7, #32
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	08024b50 	.word	0x08024b50

08007d34 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00b      	beq.n	8007d5e <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 8007d46:	e007      	b.n	8007d58 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7fe fe4c 	bl	80069ec <vPortFree>
                pxIterator = pxNext;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1f4      	bne.n	8007d48 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b088      	sub	sp, #32
 8007d6a:	af02      	add	r7, sp, #8
 8007d6c:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f002 fa92 	bl	800a298 <uxIPHeaderSizePacket>
 8007d74:	4603      	mov	r3, r0
 8007d76:	3316      	adds	r3, #22
 8007d78:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d829      	bhi.n	8007dd8 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b0b      	cmp	r3, #11
 8007d92:	d921      	bls.n	8007dd8 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	4413      	add	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007da6:	021b      	lsls	r3, r3, #8
 8007da8:	b21a      	sxth	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007dae:	0a1b      	lsrs	r3, r3, #8
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	b21b      	sxth	r3, r3
 8007db4:	4313      	orrs	r3, r2
 8007db6:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f107 0208 	add.w	r2, r7, #8
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	6939      	ldr	r1, [r7, #16]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 fcb5 	bl	8008734 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff ffae 	bl	8007d34 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8007dd8:	2300      	movs	r3, #0
    }
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b086      	sub	sp, #24
 8007de6:	af02      	add	r7, sp, #8
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	68b9      	ldr	r1, [r7, #8]
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 f818 	bl	8007e30 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8007e00:	2301      	movs	r3, #1
    }
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 8007e10:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8007e14:	2100      	movs	r1, #0
 8007e16:	4804      	ldr	r0, [pc, #16]	@ (8007e28 <FreeRTOS_dnsclear+0x1c>)
 8007e18:	f01a ff3d 	bl	8022c96 <memset>
        uxFreeEntry = 0U;
 8007e1c:	4b03      	ldr	r3, [pc, #12]	@ (8007e2c <FreeRTOS_dnsclear+0x20>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	601a      	str	r2, [r3, #0]
    }
 8007e22:	bf00      	nop
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000fd4 	.word	0x20000fd4
 8007e2c:	20001184 	.word	0x20001184

08007e30 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007e30:	b590      	push	{r4, r7, lr}
 8007e32:	b09b      	sub	sp, #108	@ 0x6c
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 8007e3e:	f7fc fe93 	bl	8004b68 <xTaskGetTickCount>
 8007e42:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d103      	bne.n	8007e52 <FreeRTOS_ProcessDNSCache+0x22>
 8007e4a:	21d8      	movs	r1, #216	@ 0xd8
 8007e4c:	4841      	ldr	r0, [pc, #260]	@ (8007f54 <FreeRTOS_ProcessDNSCache+0x124>)
 8007e4e:	f7f9 fd95 	bl	800197c <vAssertCalled>

        if( xLookUp != pdFALSE )
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 8007e5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e60:	4a3d      	ldr	r2, [pc, #244]	@ (8007f58 <FreeRTOS_ProcessDNSCache+0x128>)
 8007e62:	fba2 2303 	umull	r2, r3, r2, r3
 8007e66:	099b      	lsrs	r3, r3, #6
 8007e68:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 8007e6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007e6e:	461a      	mov	r2, r3
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 f87a 	bl	8007f6c <prvFindEntryIndex>
 8007e78:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 8007e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d110      	bne.n	8007ea2 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d106      	bne.n	8007e94 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8007e86:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007e88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e8c:	68b9      	ldr	r1, [r7, #8]
 8007e8e:	f000 f8b1 	bl	8007ff4 <prvGetCacheIPEntry>
 8007e92:	e013      	b.n	8007ebc <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8007e94:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	f000 f94a 	bl	8008134 <prvUpdateCacheEntry>
 8007ea0:	e00c      	b.n	8007ebc <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d103      	bne.n	8007eb0 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	e005      	b.n	8007ebc <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8007eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f994 	bl	80081e4 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <FreeRTOS_ProcessDNSCache+0x9a>
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d03f      	beq.n	8007f4a <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 8007eca:	2302      	movs	r3, #2
 8007ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00c      	beq.n	8007ef0 <FreeRTOS_ProcessDNSCache+0xc0>
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d10e      	bne.n	8007ef8 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	6859      	ldr	r1, [r3, #4]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 8007eea:	230a      	movs	r3, #10
 8007eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 8007eee:	e007      	b.n	8007f00 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8007ef6:	e003      	b.n	8007f00 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 8007ef8:	4818      	ldr	r0, [pc, #96]	@ (8007f5c <FreeRTOS_ProcessDNSCache+0x12c>)
 8007efa:	f01a fba3 	bl	8022644 <lUDPLoggingPrintf>
                        break;
 8007efe:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8007f00:	f107 0214 	add.w	r2, r7, #20
 8007f04:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8007f08:	2328      	movs	r3, #40	@ 0x28
 8007f0a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8007f0c:	f007 fc62 	bl	800f7d4 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <FreeRTOS_ProcessDNSCache+0xea>
 8007f16:	4912      	ldr	r1, [pc, #72]	@ (8007f60 <FreeRTOS_ProcessDNSCache+0x130>)
 8007f18:	e000      	b.n	8007f1c <FreeRTOS_ProcessDNSCache+0xec>
 8007f1a:	4912      	ldr	r1, [pc, #72]	@ (8007f64 <FreeRTOS_ProcessDNSCache+0x134>)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	061a      	lsls	r2, r3, #24
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	0a1b      	lsrs	r3, r3, #8
 8007f2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	0e1b      	lsrs	r3, r3, #24
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	f107 0214 	add.w	r2, r7, #20
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	4613      	mov	r3, r2
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4808      	ldr	r0, [pc, #32]	@ (8007f68 <FreeRTOS_ProcessDNSCache+0x138>)
 8007f46:	f01a fb7d 	bl	8022644 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 8007f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3764      	adds	r7, #100	@ 0x64
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd90      	pop	{r4, r7, pc}
 8007f54:	08024dcc 	.word	0x08024dcc
 8007f58:	10624dd3 	.word	0x10624dd3
 8007f5c:	08024e00 	.word	0x08024e00
 8007f60:	08024e30 	.word	0x08024e30
 8007f64:	08024e38 	.word	0x08024e38
 8007f68:	08024e3c 	.word	0x08024e3c

08007f6c <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	613b      	str	r3, [r7, #16]
 8007f80:	e02d      	b.n	8007fde <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8007f82:	4a1b      	ldr	r2, [pc, #108]	@ (8007ff0 <prvFindEntryIndex+0x84>)
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	216c      	movs	r1, #108	@ 0x6c
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3350      	adds	r3, #80	@ 0x50
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d01f      	beq.n	8007fd6 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	226c      	movs	r2, #108	@ 0x6c
 8007f9a:	fb02 f303 	mul.w	r3, r2, r3
 8007f9e:	3350      	adds	r3, #80	@ 0x50
 8007fa0:	4a13      	ldr	r2, [pc, #76]	@ (8007ff0 <prvFindEntryIndex+0x84>)
 8007fa2:	4413      	add	r3, r2
 8007fa4:	68f9      	ldr	r1, [r7, #12]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7f8 f99a 	bl	80002e0 <strcmp>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d112      	bne.n	8007fd8 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	490e      	ldr	r1, [pc, #56]	@ (8007ff0 <prvFindEntryIndex+0x84>)
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	206c      	movs	r0, #108	@ 0x6c
 8007fbc:	fb00 f303 	mul.w	r3, r0, r3
 8007fc0:	440b      	add	r3, r1
 8007fc2:	3310      	adds	r3, #16
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d106      	bne.n	8007fd8 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	601a      	str	r2, [r3, #0]
                    break;
 8007fd4:	e006      	b.n	8007fe4 <prvFindEntryIndex+0x78>
                continue;
 8007fd6:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	613b      	str	r3, [r7, #16]
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d9ce      	bls.n	8007f82 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8007fe4:	697b      	ldr	r3, [r7, #20]
    }
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000fd4 	.word	0x20000fd4

08007ff4 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8008006:	4a4a      	ldr	r2, [pc, #296]	@ (8008130 <prvGetCacheIPEntry+0x13c>)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	216c      	movs	r1, #108	@ 0x6c
 800800c:	fb01 f303 	mul.w	r3, r1, r3
 8008010:	4413      	add	r3, r2
 8008012:	3364      	adds	r3, #100	@ 0x64
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 800801c:	4a44      	ldr	r2, [pc, #272]	@ (8008130 <prvGetCacheIPEntry+0x13c>)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	216c      	movs	r1, #108	@ 0x6c
 8008022:	fb01 f303 	mul.w	r3, r1, r3
 8008026:	4413      	add	r3, r2
 8008028:	3360      	adds	r3, #96	@ 0x60
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	061a      	lsls	r2, r3, #24
 800802e:	4940      	ldr	r1, [pc, #256]	@ (8008130 <prvGetCacheIPEntry+0x13c>)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	206c      	movs	r0, #108	@ 0x6c
 8008034:	fb00 f303 	mul.w	r3, r0, r3
 8008038:	440b      	add	r3, r1
 800803a:	3360      	adds	r3, #96	@ 0x60
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	021b      	lsls	r3, r3, #8
 8008040:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008044:	431a      	orrs	r2, r3
 8008046:	493a      	ldr	r1, [pc, #232]	@ (8008130 <prvGetCacheIPEntry+0x13c>)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	206c      	movs	r0, #108	@ 0x6c
 800804c:	fb00 f303 	mul.w	r3, r0, r3
 8008050:	440b      	add	r3, r1
 8008052:	3360      	adds	r3, #96	@ 0x60
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	0a1b      	lsrs	r3, r3, #8
 8008058:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800805c:	431a      	orrs	r2, r3
 800805e:	4934      	ldr	r1, [pc, #208]	@ (8008130 <prvGetCacheIPEntry+0x13c>)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	206c      	movs	r0, #108	@ 0x6c
 8008064:	fb00 f303 	mul.w	r3, r0, r3
 8008068:	440b      	add	r3, r1
 800806a:	3360      	adds	r3, #96	@ 0x60
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	0e1b      	lsrs	r3, r3, #24
 8008070:	4313      	orrs	r3, r2
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	429a      	cmp	r2, r3
 8008076:	d24a      	bcs.n	800810e <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8008078:	4a2d      	ldr	r2, [pc, #180]	@ (8008130 <prvGetCacheIPEntry+0x13c>)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	216c      	movs	r1, #108	@ 0x6c
 800807e:	fb01 f303 	mul.w	r3, r1, r3
 8008082:	4413      	add	r3, r2
 8008084:	3369      	adds	r3, #105	@ 0x69
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	4929      	ldr	r1, [pc, #164]	@ (8008130 <prvGetCacheIPEntry+0x13c>)
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	206c      	movs	r0, #108	@ 0x6c
 800808e:	fb00 f202 	mul.w	r2, r0, r2
 8008092:	440a      	add	r2, r1
 8008094:	3268      	adds	r2, #104	@ 0x68
 8008096:	7812      	ldrb	r2, [r2, #0]
 8008098:	fbb3 f1f2 	udiv	r1, r3, r2
 800809c:	fb01 f202 	mul.w	r2, r1, r2
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 80080a4:	7cfb      	ldrb	r3, [r7, #19]
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 80080ac:	7cfb      	ldrb	r3, [r7, #19]
 80080ae:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 80080b0:	4a1f      	ldr	r2, [pc, #124]	@ (8008130 <prvGetCacheIPEntry+0x13c>)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	216c      	movs	r1, #108	@ 0x6c
 80080b6:	fb01 f303 	mul.w	r3, r1, r3
 80080ba:	4413      	add	r3, r2
 80080bc:	3369      	adds	r3, #105	@ 0x69
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	3301      	adds	r3, #1
 80080c2:	b2d8      	uxtb	r0, r3
 80080c4:	4a1a      	ldr	r2, [pc, #104]	@ (8008130 <prvGetCacheIPEntry+0x13c>)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	216c      	movs	r1, #108	@ 0x6c
 80080ca:	fb01 f303 	mul.w	r3, r1, r3
 80080ce:	4413      	add	r3, r2
 80080d0:	3369      	adds	r3, #105	@ 0x69
 80080d2:	4602      	mov	r2, r0
 80080d4:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	216c      	movs	r1, #108	@ 0x6c
 80080e4:	fb01 f202 	mul.w	r2, r1, r2
 80080e8:	4413      	add	r3, r2
 80080ea:	4a11      	ldr	r2, [pc, #68]	@ (8008130 <prvGetCacheIPEntry+0x13c>)
 80080ec:	4413      	add	r3, r2
 80080ee:	2214      	movs	r2, #20
 80080f0:	4619      	mov	r1, r3
 80080f2:	68b8      	ldr	r0, [r7, #8]
 80080f4:	f01a fcc2 	bl	8022a7c <memcpy>
            isRead = pdTRUE;
 80080f8:	2301      	movs	r3, #1
 80080fa:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d010      	beq.n	8008124 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f000 f8dc 	bl	80082c4 <prvReadDNSCache>
 800810c:	e00a      	b.n	8008124 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 800810e:	4a08      	ldr	r2, [pc, #32]	@ (8008130 <prvGetCacheIPEntry+0x13c>)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	216c      	movs	r1, #108	@ 0x6c
 8008114:	fb01 f303 	mul.w	r3, r1, r3
 8008118:	4413      	add	r3, r2
 800811a:	3350      	adds	r3, #80	@ 0x50
 800811c:	2200      	movs	r2, #0
 800811e:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 8008120:	2300      	movs	r3, #0
 8008122:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 8008124:	69fb      	ldr	r3, [r7, #28]
    }
 8008126:	4618      	mov	r0, r3
 8008128:	3720      	adds	r7, #32
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20000fd4 	.word	0x20000fd4

08008134 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 8008146:	4a26      	ldr	r2, [pc, #152]	@ (80081e0 <prvUpdateCacheEntry+0xac>)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	216c      	movs	r1, #108	@ 0x6c
 800814c:	fb01 f303 	mul.w	r3, r1, r3
 8008150:	4413      	add	r3, r2
 8008152:	3368      	adds	r3, #104	@ 0x68
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d81b      	bhi.n	8008192 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 800815a:	4a21      	ldr	r2, [pc, #132]	@ (80081e0 <prvUpdateCacheEntry+0xac>)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	216c      	movs	r1, #108	@ 0x6c
 8008160:	fb01 f303 	mul.w	r3, r1, r3
 8008164:	4413      	add	r3, r2
 8008166:	3368      	adds	r3, #104	@ 0x68
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 800816c:	4a1c      	ldr	r2, [pc, #112]	@ (80081e0 <prvUpdateCacheEntry+0xac>)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	216c      	movs	r1, #108	@ 0x6c
 8008172:	fb01 f303 	mul.w	r3, r1, r3
 8008176:	4413      	add	r3, r2
 8008178:	3368      	adds	r3, #104	@ 0x68
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	3301      	adds	r3, #1
 800817e:	b2d8      	uxtb	r0, r3
 8008180:	4a17      	ldr	r2, [pc, #92]	@ (80081e0 <prvUpdateCacheEntry+0xac>)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	216c      	movs	r1, #108	@ 0x6c
 8008186:	fb01 f303 	mul.w	r3, r1, r3
 800818a:	4413      	add	r3, r2
 800818c:	3368      	adds	r3, #104	@ 0x68
 800818e:	4602      	mov	r2, r0
 8008190:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	4613      	mov	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	216c      	movs	r1, #108	@ 0x6c
 80081a0:	fb01 f202 	mul.w	r2, r1, r2
 80081a4:	4413      	add	r3, r2
 80081a6:	4a0e      	ldr	r2, [pc, #56]	@ (80081e0 <prvUpdateCacheEntry+0xac>)
 80081a8:	4413      	add	r3, r2
 80081aa:	2214      	movs	r2, #20
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f01a fc64 	bl	8022a7c <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 80081b4:	4a0a      	ldr	r2, [pc, #40]	@ (80081e0 <prvUpdateCacheEntry+0xac>)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	216c      	movs	r1, #108	@ 0x6c
 80081ba:	fb01 f303 	mul.w	r3, r1, r3
 80081be:	4413      	add	r3, r2
 80081c0:	3360      	adds	r3, #96	@ 0x60
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80081c6:	4a06      	ldr	r2, [pc, #24]	@ (80081e0 <prvUpdateCacheEntry+0xac>)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	216c      	movs	r1, #108	@ 0x6c
 80081cc:	fb01 f303 	mul.w	r3, r1, r3
 80081d0:	4413      	add	r3, r2
 80081d2:	3364      	adds	r3, #100	@ 0x64
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	601a      	str	r2, [r3, #0]
    }
 80081d8:	bf00      	nop
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000fd4 	.word	0x20000fd4

080081e4 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f7f8 f87e 	bl	80002f4 <strlen>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b0f      	cmp	r3, #15
 80081fc:	d859      	bhi.n	80082b2 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 80081fe:	4b2f      	ldr	r3, [pc, #188]	@ (80082bc <prvInsertCacheEntry+0xd8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	226c      	movs	r2, #108	@ 0x6c
 8008204:	fb02 f303 	mul.w	r3, r2, r3
 8008208:	3350      	adds	r3, #80	@ 0x50
 800820a:	4a2d      	ldr	r2, [pc, #180]	@ (80082c0 <prvInsertCacheEntry+0xdc>)
 800820c:	4413      	add	r3, r2
 800820e:	2210      	movs	r2, #16
 8008210:	68f9      	ldr	r1, [r7, #12]
 8008212:	4618      	mov	r0, r3
 8008214:	f01b fc1e 	bl	8023a54 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8008218:	4b28      	ldr	r3, [pc, #160]	@ (80082bc <prvInsertCacheEntry+0xd8>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	226c      	movs	r2, #108	@ 0x6c
 800821e:	fb02 f303 	mul.w	r3, r2, r3
 8008222:	4a27      	ldr	r2, [pc, #156]	@ (80082c0 <prvInsertCacheEntry+0xdc>)
 8008224:	4413      	add	r3, r2
 8008226:	2214      	movs	r2, #20
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4618      	mov	r0, r3
 800822c:	f01a fc26 	bl	8022a7c <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 8008230:	4b22      	ldr	r3, [pc, #136]	@ (80082bc <prvInsertCacheEntry+0xd8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a22      	ldr	r2, [pc, #136]	@ (80082c0 <prvInsertCacheEntry+0xdc>)
 8008236:	216c      	movs	r1, #108	@ 0x6c
 8008238:	fb01 f303 	mul.w	r3, r1, r3
 800823c:	4413      	add	r3, r2
 800823e:	3360      	adds	r3, #96	@ 0x60
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008244:	4b1d      	ldr	r3, [pc, #116]	@ (80082bc <prvInsertCacheEntry+0xd8>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a1d      	ldr	r2, [pc, #116]	@ (80082c0 <prvInsertCacheEntry+0xdc>)
 800824a:	216c      	movs	r1, #108	@ 0x6c
 800824c:	fb01 f303 	mul.w	r3, r1, r3
 8008250:	4413      	add	r3, r2
 8008252:	3364      	adds	r3, #100	@ 0x64
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 8008258:	4b18      	ldr	r3, [pc, #96]	@ (80082bc <prvInsertCacheEntry+0xd8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a18      	ldr	r2, [pc, #96]	@ (80082c0 <prvInsertCacheEntry+0xdc>)
 800825e:	216c      	movs	r1, #108	@ 0x6c
 8008260:	fb01 f303 	mul.w	r3, r1, r3
 8008264:	4413      	add	r3, r2
 8008266:	3368      	adds	r3, #104	@ 0x68
 8008268:	2201      	movs	r2, #1
 800826a:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 800826c:	4b13      	ldr	r3, [pc, #76]	@ (80082bc <prvInsertCacheEntry+0xd8>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a13      	ldr	r2, [pc, #76]	@ (80082c0 <prvInsertCacheEntry+0xdc>)
 8008272:	216c      	movs	r1, #108	@ 0x6c
 8008274:	fb01 f303 	mul.w	r3, r1, r3
 8008278:	4413      	add	r3, r2
 800827a:	3369      	adds	r3, #105	@ 0x69
 800827c:	2200      	movs	r2, #0
 800827e:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8008280:	4b0e      	ldr	r3, [pc, #56]	@ (80082bc <prvInsertCacheEntry+0xd8>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	226c      	movs	r2, #108	@ 0x6c
 8008286:	fb02 f303 	mul.w	r3, r2, r3
 800828a:	3314      	adds	r3, #20
 800828c:	4a0c      	ldr	r2, [pc, #48]	@ (80082c0 <prvInsertCacheEntry+0xdc>)
 800828e:	4413      	add	r3, r2
 8008290:	223c      	movs	r2, #60	@ 0x3c
 8008292:	2100      	movs	r1, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f01a fcfe 	bl	8022c96 <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 800829a:	4b08      	ldr	r3, [pc, #32]	@ (80082bc <prvInsertCacheEntry+0xd8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3301      	adds	r3, #1
 80082a0:	4a06      	ldr	r2, [pc, #24]	@ (80082bc <prvInsertCacheEntry+0xd8>)
 80082a2:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 80082a4:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <prvInsertCacheEntry+0xd8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d102      	bne.n	80082b2 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 80082ac:	4b03      	ldr	r3, [pc, #12]	@ (80082bc <prvInsertCacheEntry+0xd8>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]
            }
        }
    }
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20001184 	.word	0x20001184
 80082c0:	20000fd4 	.word	0x20000fd4

080082c4 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 80082ce:	2301      	movs	r3, #1
 80082d0:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 80082da:	4a2e      	ldr	r2, [pc, #184]	@ (8008394 <prvReadDNSCache+0xd0>)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	216c      	movs	r1, #108	@ 0x6c
 80082e0:	fb01 f303 	mul.w	r3, r1, r3
 80082e4:	4413      	add	r3, r2
 80082e6:	3368      	adds	r3, #104	@ 0x68
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d901      	bls.n	80082f6 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 80082f2:	2304      	movs	r3, #4
 80082f4:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 80082f6:	2300      	movs	r3, #0
 80082f8:	61fb      	str	r3, [r7, #28]
 80082fa:	e041      	b.n	8008380 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	216c      	movs	r1, #108	@ 0x6c
 800830a:	fb01 f202 	mul.w	r2, r1, r2
 800830e:	4413      	add	r3, r2
 8008310:	4a20      	ldr	r2, [pc, #128]	@ (8008394 <prvReadDNSCache+0xd0>)
 8008312:	4413      	add	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <prvReadDNSCache+0x60>
 800831e:	2b01      	cmp	r3, #1
 8008320:	d010      	beq.n	8008344 <prvReadDNSCache+0x80>
 8008322:	e01d      	b.n	8008360 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	226c      	movs	r2, #108	@ 0x6c
 800832c:	fb02 f303 	mul.w	r3, r2, r3
 8008330:	3350      	adds	r3, #80	@ 0x50
 8008332:	4a18      	ldr	r2, [pc, #96]	@ (8008394 <prvReadDNSCache+0xd0>)
 8008334:	4413      	add	r3, r2
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	2102      	movs	r1, #2
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff fc8c 	bl	8007c58 <pxNew_AddrInfo>
 8008340:	6178      	str	r0, [r7, #20]
                       }
                       break;
 8008342:	e011      	b.n	8008368 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	226c      	movs	r2, #108	@ 0x6c
 8008348:	fb02 f303 	mul.w	r3, r2, r3
 800834c:	3350      	adds	r3, #80	@ 0x50
 800834e:	4a11      	ldr	r2, [pc, #68]	@ (8008394 <prvReadDNSCache+0xd0>)
 8008350:	4413      	add	r3, r2
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	210a      	movs	r1, #10
 8008356:	4618      	mov	r0, r3
 8008358:	f7ff fc7e 	bl	8007c58 <pxNew_AddrInfo>
 800835c:	6178      	str	r0, [r7, #20]
                        break;
 800835e:	e003      	b.n	8008368 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 8008360:	480d      	ldr	r0, [pc, #52]	@ (8008398 <prvReadDNSCache+0xd4>)
 8008362:	f01a f96f 	bl	8022644 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 8008366:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00d      	beq.n	800838a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	331c      	adds	r3, #28
 8008378:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	3301      	adds	r3, #1
 800837e:	61fb      	str	r3, [r7, #28]
 8008380:	69fa      	ldr	r2, [r7, #28]
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	429a      	cmp	r2, r3
 8008386:	d3b9      	bcc.n	80082fc <prvReadDNSCache+0x38>
        }
    }
 8008388:	e000      	b.n	800838c <prvReadDNSCache+0xc8>
                break;
 800838a:	bf00      	nop
    }
 800838c:	bf00      	nop
 800838e:	3720      	adds	r7, #32
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20000fd4 	.word	0x20000fd4
 8008398:	08024e70 	.word	0x08024e70

0800839c <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 800839c:	b580      	push	{r7, lr}
 800839e:	b08a      	sub	sp, #40	@ 0x28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 80083aa:	4b28      	ldr	r3, [pc, #160]	@ (800844c <xDNSDoCallback+0xb0>)
 80083ac:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 80083b8:	2300      	movs	r3, #0
 80083ba:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 80083bc:	2300      	movs	r3, #0
 80083be:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 80083c0:	f7fc fac0 	bl	8004944 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	623b      	str	r3, [r7, #32]
 80083ca:	e029      	b.n	8008420 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d101      	bne.n	80083e0 <xDNSDoCallback+0x44>
 80083dc:	2301      	movs	r3, #1
 80083de:	e000      	b.n	80083e2 <xDNSDoCallback+0x46>
 80083e0:	2300      	movs	r3, #0
 80083e2:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d117      	bne.n	800841a <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3314      	adds	r3, #20
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fb f9ba 	bl	8003774 <uxListRemove>
                    vPortFree( pxCallback );
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f7fe faf3 	bl	80069ec <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008406:	4b12      	ldr	r3, [pc, #72]	@ (8008450 <xDNSDoCallback+0xb4>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d102      	bne.n	8008414 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 800840e:	2000      	movs	r0, #0
 8008410:	f002 f9ca 	bl	800a7a8 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8008414:	2301      	movs	r3, #1
 8008416:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8008418:	e006      	b.n	8008428 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 8008420:	6a3a      	ldr	r2, [r7, #32]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	429a      	cmp	r2, r3
 8008426:	d1d1      	bne.n	80083cc <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8008428:	f7fc fa9a 	bl	8004960 <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d006      	beq.n	8008440 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	69b9      	ldr	r1, [r7, #24]
 800843e:	4798      	blx	r3
        }

        return xResult;
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8008442:	4618      	mov	r0, r3
 8008444:	3728      	adds	r7, #40	@ 0x28
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20001190 	.word	0x20001190
 8008450:	20001188 	.word	0x20001188

08008454 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 8008454:	b580      	push	{r7, lr}
 8008456:	b08c      	sub	sp, #48	@ 0x30
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800845c:	4b40      	ldr	r3, [pc, #256]	@ (8008560 <vDNSCheckCallBack+0x10c>)
 800845e:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8008460:	f107 030c 	add.w	r3, r7, #12
 8008464:	4618      	mov	r0, r3
 8008466:	f7fb f8fb 	bl	8003660 <vListInitialise>

        vTaskSuspendAll();
 800846a:	f7fc fa6b 	bl	8004944 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800846e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008474:	e02e      	b.n	80084d4 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800847c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00d      	beq.n	80084a4 <vDNSCheckCallBack+0x50>
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	429a      	cmp	r2, r3
 8008490:	d108      	bne.n	80084a4 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	3314      	adds	r3, #20
 8008496:	4618      	mov	r0, r3
 8008498:	f7fb f96c 	bl	8003774 <uxListRemove>
                    vPortFree( pxCallback );
 800849c:	6a38      	ldr	r0, [r7, #32]
 800849e:	f7fe faa5 	bl	80069ec <vPortFree>
 80084a2:	e017      	b.n	80084d4 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	3308      	adds	r3, #8
 80084a8:	6a3a      	ldr	r2, [r7, #32]
 80084aa:	4611      	mov	r1, r2
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fc ff3d 	bl	800532c <xTaskCheckForTimeOut>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00d      	beq.n	80084d4 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	3314      	adds	r3, #20
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fb f959 	bl	8003774 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	f103 0214 	add.w	r2, r3, #20
 80084c8:	f107 030c 	add.w	r3, r7, #12
 80084cc:	4611      	mov	r1, r2
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fb f8f3 	bl	80036ba <vListInsertEnd>
                 pxIterator != xEnd; )
 80084d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d8:	429a      	cmp	r2, r3
 80084da:	d1cc      	bne.n	8008476 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 80084dc:	f7fc fa40 	bl	8004960 <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d030      	beq.n	8008548 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	3308      	adds	r3, #8
 80084ec:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80084ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084f4:	e024      	b.n	8008540 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80084f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80084fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008506:	2b00      	cmp	r3, #0
 8008508:	d009      	beq.n	800851e <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008510:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008516:	6911      	ldr	r1, [r2, #16]
 8008518:	2200      	movs	r2, #0
 800851a:	4798      	blx	r3
 800851c:	e008      	b.n	8008530 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 800851e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008524:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800852a:	6911      	ldr	r1, [r2, #16]
 800852c:	2200      	movs	r2, #0
 800852e:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008532:	3314      	adds	r3, #20
 8008534:	4618      	mov	r0, r3
 8008536:	f7fb f91d 	bl	8003774 <uxListRemove>
                vPortFree( pxCallback );
 800853a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800853c:	f7fe fa56 	bl	80069ec <vPortFree>
                 pxIterator != xEnd;
 8008540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008544:	429a      	cmp	r2, r3
 8008546:	d1d6      	bne.n	80084f6 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008548:	4b06      	ldr	r3, [pc, #24]	@ (8008564 <vDNSCheckCallBack+0x110>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d102      	bne.n	8008556 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8008550:	2000      	movs	r0, #0
 8008552:	f002 f929 	bl	800a7a8 <vIPSetDNSTimerEnableState>
        }
    }
 8008556:	bf00      	nop
 8008558:	3730      	adds	r7, #48	@ 0x30
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20001190 	.word	0x20001190
 8008564:	20001188 	.word	0x20001188

08008568 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 800856c:	4802      	ldr	r0, [pc, #8]	@ (8008578 <vDNSCallbackInitialise+0x10>)
 800856e:	f7fb f877 	bl	8003660 <vListInitialise>
    }
 8008572:	bf00      	nop
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20001188 	.word	0x20001188

0800857c <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 800857c:	b480      	push	{r7}
 800857e:	b089      	sub	sp, #36	@ 0x24
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d102      	bne.n	80085a6 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	61bb      	str	r3, [r7, #24]
 80085a4:	e069      	b.n	800867a <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	4413      	add	r3, r2
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80085b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80085b4:	d144      	bne.n	8008640 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d903      	bls.n	80085c4 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	3302      	adds	r3, #2
 80085c0:	61bb      	str	r3, [r7, #24]
 80085c2:	e05a      	b.n	800867a <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	61bb      	str	r3, [r7, #24]
 80085c8:	e057      	b.n	800867a <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d008      	beq.n	80085e2 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	4413      	add	r3, r2
 80085d6:	3334      	adds	r3, #52	@ 0x34
 80085d8:	222e      	movs	r2, #46	@ 0x2e
 80085da:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	3301      	adds	r3, #1
 80085e0:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	4413      	add	r3, r2
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	3301      	adds	r3, #1
 80085f0:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	4413      	add	r3, r2
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d202      	bcs.n	8008604 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	61bb      	str	r3, [r7, #24]
                    break;
 8008602:	e027      	b.n	8008654 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	4413      	add	r3, r2
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d812      	bhi.n	8008636 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	61bb      	str	r3, [r7, #24]
                    break;
 8008614:	e01e      	b.n	8008654 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	4413      	add	r3, r2
 800861c:	7819      	ldrb	r1, [r3, #0]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	4413      	add	r3, r2
 8008624:	3334      	adds	r3, #52	@ 0x34
 8008626:	460a      	mov	r2, r1
 8008628:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	3301      	adds	r3, #1
 800862e:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	3301      	adds	r3, #1
 8008634:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	1e5a      	subs	r2, r3, #1
 800863a:	617a      	str	r2, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1ea      	bne.n	8008616 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	429a      	cmp	r2, r3
 8008646:	d205      	bcs.n	8008654 <DNS_ReadNameField+0xd8>
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	4413      	add	r3, r2
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1ba      	bne.n	80085ca <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00f      	beq.n	800867a <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	429a      	cmp	r2, r3
 8008660:	d209      	bcs.n	8008676 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	4413      	add	r3, r2
 8008668:	3334      	adds	r3, #52	@ 0x34
 800866a:	2200      	movs	r2, #0
 800866c:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	3301      	adds	r3, #1
 8008672:	61bb      	str	r3, [r7, #24]
 8008674:	e001      	b.n	800867a <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 800867a:	69bb      	ldr	r3, [r7, #24]
    }
 800867c:	4618      	mov	r0, r3
 800867e:	3724      	adds	r7, #36	@ 0x24
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	613b      	str	r3, [r7, #16]
 80086a4:	e03f      	b.n	8008726 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	4413      	add	r3, r2
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80086b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80086b4:	d11f      	bne.n	80086f6 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d903      	bls.n	80086c4 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	3302      	adds	r3, #2
 80086c0:	613b      	str	r3, [r7, #16]
 80086c2:	e030      	b.n	8008726 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	613b      	str	r3, [r7, #16]
 80086c8:	e02d      	b.n	8008726 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	4413      	add	r3, r2
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	3301      	adds	r3, #1
 80086d4:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d908      	bls.n	80086f0 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4413      	add	r3, r2
 80086ec:	613b      	str	r3, [r7, #16]
 80086ee:	e002      	b.n	80086f6 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	613b      	str	r3, [r7, #16]
                    break;
 80086f4:	e008      	b.n	8008708 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	4413      	add	r3, r2
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <DNS_SkipNameField+0x80>
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d8e0      	bhi.n	80086ca <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00b      	beq.n	8008726 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	4413      	add	r3, r2
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d103      	bne.n	8008722 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	3301      	adds	r3, #1
 800871e:	613b      	str	r3, [r7, #16]
 8008720:	e001      	b.n	8008726 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8008726:	693b      	ldr	r3, [r7, #16]
    }
 8008728:	4618      	mov	r0, r3
 800872a:	371c      	adds	r7, #28
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8008734:	b5b0      	push	{r4, r5, r7, lr}
 8008736:	b0f6      	sub	sp, #472	@ 0x1d8
 8008738:	af00      	add	r7, sp, #0
 800873a:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 800873e:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8008742:	6020      	str	r0, [r4, #0]
 8008744:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8008748:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 800874c:	6001      	str	r1, [r0, #0]
 800874e:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008752:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8008756:	600a      	str	r2, [r1, #0]
 8008758:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800875c:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8008760:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8008762:	2301      	movs	r3, #1
 8008764:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800876e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008772:	224c      	movs	r2, #76	@ 0x4c
 8008774:	2100      	movs	r1, #0
 8008776:	4618      	mov	r0, r3
 8008778:	f01a fa8d 	bl	8022c96 <memset>
        xSet.usPortNumber = usPort;
 800877c:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8008780:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8008784:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008788:	3344      	adds	r3, #68	@ 0x44
 800878a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 800878e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008792:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 800879c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087a0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b0b      	cmp	r3, #11
 80087a8:	d803      	bhi.n	80087b2 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 80087aa:	2300      	movs	r3, #0
 80087ac:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80087b0:	e35a      	b.n	8008e68 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 80087b2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087b6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 80087c0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087c4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 80087ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087d2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 80087e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087ec:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 80087f6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087fa:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	330c      	adds	r3, #12
 8008802:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8008806:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800880a:	3b0c      	subs	r3, #12
 800880c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8008810:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008814:	889b      	ldrh	r3, [r3, #4]
 8008816:	b29b      	uxth	r3, r3
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	b21a      	sxth	r2, r3
 800881c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008820:	889b      	ldrh	r3, [r3, #4]
 8008822:	b29b      	uxth	r3, r3
 8008824:	0a1b      	lsrs	r3, r3, #8
 8008826:	b29b      	uxth	r3, r3
 8008828:	b21b      	sxth	r3, r3
 800882a:	4313      	orrs	r3, r2
 800882c:	b21b      	sxth	r3, r3
 800882e:	b29b      	uxth	r3, r3
 8008830:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8008834:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008838:	88db      	ldrh	r3, [r3, #6]
 800883a:	b29b      	uxth	r3, r3
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	b21a      	sxth	r2, r3
 8008840:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008844:	88db      	ldrh	r3, [r3, #6]
 8008846:	b29b      	uxth	r3, r3
 8008848:	0a1b      	lsrs	r3, r3, #8
 800884a:	b29b      	uxth	r3, r3
 800884c:	b21b      	sxth	r3, r3
 800884e:	4313      	orrs	r3, r2
 8008850:	b21b      	sxth	r3, r3
 8008852:	b29b      	uxth	r3, r3
 8008854:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8008858:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800885c:	885b      	ldrh	r3, [r3, #2]
 800885e:	b29b      	uxth	r3, r3
 8008860:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8008864:	2b80      	cmp	r3, #128	@ 0x80
 8008866:	d11b      	bne.n	80088a0 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 8008868:	2301      	movs	r3, #1
 800886a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 800886e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8008872:	2b00      	cmp	r3, #0
 8008874:	d103      	bne.n	800887e <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8008876:	2300      	movs	r3, #0
 8008878:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 800887c:	e2f4      	b.n	8008e68 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 800887e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008882:	2b00      	cmp	r3, #0
 8008884:	d114      	bne.n	80088b0 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8008886:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800888a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 800888e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008892:	2110      	movs	r1, #16
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff fe71 	bl	800857c <DNS_ReadNameField>
 800889a:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 800889e:	e007      	b.n	80088b0 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 80088a0:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d103      	bne.n	80088b0 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 80088a8:	2300      	movs	r3, #0
 80088aa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80088ae:	e2db      	b.n	8008e68 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 80088b0:	2300      	movs	r3, #0
 80088b2:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 80088b6:	e064      	b.n	8008982 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 80088b8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d103      	bne.n	80088c8 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 80088c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088c4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 80088c8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d108      	bne.n	80088e2 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 80088d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80088d4:	2110      	movs	r1, #16
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff fe50 	bl	800857c <DNS_ReadNameField>
 80088dc:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 80088e0:	e009      	b.n	80088f6 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 80088e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088e6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7ff fecb 	bl	8008688 <DNS_SkipNameField>
 80088f2:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 80088f6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d103      	bne.n	8008906 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 80088fe:	2300      	movs	r3, #0
 8008900:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008904:	e043      	b.n	800898e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 8008906:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800890a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800890e:	4413      	add	r3, r2
 8008910:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8008914:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008918:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800891c:	4413      	add	r3, r2
 800891e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8008922:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8008926:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008930:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008934:	2b03      	cmp	r3, #3
 8008936:	d91b      	bls.n	8008970 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8008938:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800893c:	4618      	mov	r0, r3
 800893e:	f002 fa58 	bl	800adf2 <usChar2u16>
 8008942:	4603      	mov	r3, r0
 8008944:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8008948:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800894c:	3302      	adds	r3, #2
 800894e:	4618      	mov	r0, r3
 8008950:	f002 fa4f 	bl	800adf2 <usChar2u16>
 8008954:	4603      	mov	r3, r0
 8008956:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 800895a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800895e:	3304      	adds	r3, #4
 8008960:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8008964:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008968:	3b04      	subs	r3, #4
 800896a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800896e:	e003      	b.n	8008978 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8008970:	2300      	movs	r3, #0
 8008972:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008976:	e00a      	b.n	800898e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8008978:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800897c:	3301      	adds	r3, #1
 800897e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8008982:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008986:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 800898a:	429a      	cmp	r2, r3
 800898c:	d394      	bcc.n	80088b8 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 800898e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 8265 	beq.w	8008e62 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8008998:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800899c:	2b01      	cmp	r3, #1
 800899e:	d10d      	bne.n	80089bc <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 80089a0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80089a4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80089a8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80089ac:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80089b0:	6819      	ldr	r1, [r3, #0]
 80089b2:	f000 fa73 	bl	8008e9c <parseDNSAnswer>
 80089b6:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 80089ba:	e255      	b.n	8008e68 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 80089bc:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d004      	beq.n	80089ce <DNS_ParseDNSReply+0x29a>
 80089c4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80089c8:	2b1c      	cmp	r3, #28
 80089ca:	f040 824d 	bne.w	8008e68 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 80089ce:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	f040 8248 	bne.w	8008e68 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 80089d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80089dc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	f001 ff9f 	bl	800a924 <pxUDPPayloadBuffer_to_NetworkBuffer>
 80089e6:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 80089ea:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d103      	bne.n	80089fa <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 80089f2:	48c4      	ldr	r0, [pc, #784]	@ (8008d04 <DNS_ParseDNSReply+0x5d0>)
 80089f4:	f019 fe26 	bl	8022644 <lUDPLoggingPrintf>
                            break;
 80089f8:	e236      	b.n	8008e68 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 80089fa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80089fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a00:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008a04:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8008a08:	6812      	ldr	r2, [r2, #0]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8008a10:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a16:	d003      	beq.n	8008a20 <DNS_ParseDNSReply+0x2ec>
 8008a18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008a1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a1e:	d101      	bne.n	8008a24 <DNS_ParseDNSReply+0x2f0>
 8008a20:	2301      	movs	r3, #1
 8008a22:	e000      	b.n	8008a26 <DNS_ParseDNSReply+0x2f2>
 8008a24:	2300      	movs	r3, #0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d104      	bne.n	8008a34 <DNS_ParseDNSReply+0x300>
 8008a2a:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8008a2e:	48b6      	ldr	r0, [pc, #728]	@ (8008d08 <DNS_ParseDNSReply+0x5d4>)
 8008a30:	f7f8 ffa4 	bl	800197c <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8008a34:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 8213 	beq.w	8008e66 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008a40:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a46:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 8008a4a:	f107 0314 	add.w	r3, r7, #20
 8008a4e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008a52:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8008a56:	4618      	mov	r0, r3
 8008a58:	f01a f810 	bl	8022a7c <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 8008a5c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008a60:	461a      	mov	r2, r3
 8008a62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008a66:	3334      	adds	r3, #52	@ 0x34
 8008a68:	4619      	mov	r1, r3
 8008a6a:	48a8      	ldr	r0, [pc, #672]	@ (8008d0c <DNS_ParseDNSReply+0x5d8>)
 8008a6c:	f019 fdea 	bl	8022644 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8008a70:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008a7a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008a7e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8008a82:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008a86:	3334      	adds	r3, #52	@ 0x34
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7f9 f80b 	bl	8001aa4 <xApplicationDNSQueryHook>
 8008a8e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8008a92:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d014      	beq.n	8008ac4 <DNS_ParseDNSReply+0x390>
 8008a9a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008a9e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008aa2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008aa6:	f003 0304 	and.w	r3, r3, #4
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d109      	bne.n	8008ac4 <DNS_ParseDNSReply+0x390>
 8008ab0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ab4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d102      	bne.n	8008ac4 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 8008ac4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 81cd 	beq.w	8008e68 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 8008ada:	4b8d      	ldr	r3, [pc, #564]	@ (8008d10 <DNS_ParseDNSReply+0x5dc>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d164      	bne.n	8008bac <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 8008ae2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008ae6:	f001 fbd7 	bl	800a298 <uxIPHeaderSizePacket>
 8008aea:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 8008aec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008af0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 8008af8:	3316      	adds	r3, #22
 8008afa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008afe:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008b02:	2b1c      	cmp	r3, #28
 8008b04:	d103      	bne.n	8008b0e <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 8008b06:	231c      	movs	r3, #28
 8008b08:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8008b0c:	e002      	b.n	8008b14 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 8008b0e:	2310      	movs	r3, #16
 8008b10:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8008b14:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008b18:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008b1c:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 8008b1e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008b22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8008b26:	4413      	add	r3, r2
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008b2e:	f001 fe65 	bl	800a7fc <pxDuplicateNetworkBufferWithDescriptor>
 8008b32:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8008b36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d032      	beq.n	8008ba4 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 8008b3e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008b42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b46:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8008b52:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008b56:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b5a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8008b66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008b6a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8008b6e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008b72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b74:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008b78:	4413      	add	r3, r2
 8008b7a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 8008b7e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008b82:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008b86:	4413      	add	r3, r2
 8008b88:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 8008b8c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008b90:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008b94:	4413      	add	r3, r2
 8008b96:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 8008b9a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008b9e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008ba2:	e00b      	b.n	8008bbc <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8008baa:	e007      	b.n	8008bbc <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8008bac:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bb2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 8008bbc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 8151 	beq.w	8008e68 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 8008bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bca:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 8008bce:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008bd2:	3302      	adds	r3, #2
 8008bd4:	2280      	movs	r2, #128	@ 0x80
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008bdc:	3303      	adds	r3, #3
 8008bde:	2200      	movs	r2, #0
 8008be0:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 8008be2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008be6:	3306      	adds	r3, #6
 8008be8:	2200      	movs	r2, #0
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008bf0:	3307      	adds	r3, #7
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 8008bf6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008c04:	3309      	adds	r3, #9
 8008c06:	2200      	movs	r2, #0
 8008c08:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 8008c0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008c0e:	330a      	adds	r3, #10
 8008c10:	2200      	movs	r2, #0
 8008c12:	701a      	strb	r2, [r3, #0]
 8008c14:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008c18:	330b      	adds	r3, #11
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8008c1e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008c22:	22c0      	movs	r2, #192	@ 0xc0
 8008c24:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 8008c26:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008c2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008c36:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 8008c38:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008c3c:	0a1b      	lsrs	r3, r3, #8
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008c44:	3302      	adds	r3, #2
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 8008c4e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008c52:	3303      	adds	r3, #3
 8008c54:	b2d2      	uxtb	r2, r2
 8008c56:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 8008c58:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	2200      	movs	r2, #0
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008c66:	3305      	adds	r3, #5
 8008c68:	2201      	movs	r2, #1
 8008c6a:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8008c6c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008c70:	3306      	adds	r3, #6
 8008c72:	2200      	movs	r2, #0
 8008c74:	701a      	strb	r2, [r3, #0]
 8008c76:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008c7a:	3307      	adds	r3, #7
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	701a      	strb	r2, [r3, #0]
 8008c80:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008c84:	3308      	adds	r3, #8
 8008c86:	2201      	movs	r2, #1
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008c8e:	3309      	adds	r3, #9
 8008c90:	222c      	movs	r2, #44	@ 0x2c
 8008c92:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8008c94:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008c98:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	3310      	adds	r3, #16
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008ca8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008cac:	2b1c      	cmp	r3, #28
 8008cae:	d131      	bne.n	8008d14 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 8008cb0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008cb4:	330a      	adds	r3, #10
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	701a      	strb	r2, [r3, #0]
 8008cba:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008cbe:	330b      	adds	r3, #11
 8008cc0:	2210      	movs	r2, #16
 8008cc2:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008cc4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008cc8:	f103 020c 	add.w	r2, r3, #12
 8008ccc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008cd0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008cd4:	4615      	mov	r5, r2
 8008cd6:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8008cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cdc:	6028      	str	r0, [r5, #0]
 8008cde:	6069      	str	r1, [r5, #4]
 8008ce0:	60aa      	str	r2, [r5, #8]
 8008ce2:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008ce4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008ce8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 8008cf2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	331c      	adds	r3, #28
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 8008d00:	e09a      	b.n	8008e38 <DNS_ParseDNSReply+0x704>
 8008d02:	bf00      	nop
 8008d04:	08024f18 	.word	0x08024f18
 8008d08:	08024f4c 	.word	0x08024f4c
 8008d0c:	08024f80 	.word	0x08024f80
 8008d10:	08027e40 	.word	0x08027e40
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 8008d14:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d18:	330a      	adds	r3, #10
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d22:	330b      	adds	r3, #11
 8008d24:	2204      	movs	r2, #4
 8008d26:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 8008d28:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008d2c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	061a      	lsls	r2, r3, #24
 8008d34:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008d38:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	021b      	lsls	r3, r3, #8
 8008d40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d44:	431a      	orrs	r2, r3
 8008d46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008d4a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	0a1b      	lsrs	r3, r3, #8
 8008d52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008d56:	431a      	orrs	r2, r3
 8008d58:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008d5c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	0e1b      	lsrs	r3, r3, #24
 8008d64:	4313      	orrs	r3, r2
 8008d66:	0e1a      	lsrs	r2, r3, #24
 8008d68:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d6c:	330c      	adds	r3, #12
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008d76:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	061a      	lsls	r2, r3, #24
 8008d7e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008d82:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	021b      	lsls	r3, r3, #8
 8008d8a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008d94:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	0a1b      	lsrs	r3, r3, #8
 8008d9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008da0:	431a      	orrs	r2, r3
 8008da2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008da6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	0e1b      	lsrs	r3, r3, #24
 8008dae:	4313      	orrs	r3, r2
 8008db0:	0c1a      	lsrs	r2, r3, #16
 8008db2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008db6:	330d      	adds	r3, #13
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	701a      	strb	r2, [r3, #0]
 8008dbc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008dc0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	061a      	lsls	r2, r3, #24
 8008dc8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008dcc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	021b      	lsls	r3, r3, #8
 8008dd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008dde:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	0a1b      	lsrs	r3, r3, #8
 8008de6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008dea:	431a      	orrs	r2, r3
 8008dec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008df0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	0e1b      	lsrs	r3, r3, #24
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	0a1a      	lsrs	r2, r3, #8
 8008dfc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e00:	330e      	adds	r3, #14
 8008e02:	b2d2      	uxtb	r2, r2
 8008e04:	701a      	strb	r2, [r3, #0]
 8008e06:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e0a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	0e1a      	lsrs	r2, r3, #24
 8008e12:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e16:	330f      	adds	r3, #15
 8008e18:	b2d2      	uxtb	r2, r2
 8008e1a:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008e1c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008e20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 8008e2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	3310      	adds	r3, #16
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 8008e38:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008e42:	f000 fa21 	bl	8009288 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8008e46:	2100      	movs	r1, #0
 8008e48:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008e4c:	f001 f924 	bl	800a098 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8008e50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d007      	beq.n	8008e68 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8008e58:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8008e5c:	f00e fd4a 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
 8008e60:	e002      	b.n	8008e68 <DNS_ParseDNSReply+0x734>
                    break;
 8008e62:	bf00      	nop
 8008e64:	e000      	b.n	8008e68 <DNS_ParseDNSReply+0x734>
                            break;
 8008e66:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8008e68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d103      	bne.n	8008e78 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008e70:	2300      	movs	r3, #0
 8008e72:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008e76:	e009      	b.n	8008e8c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8008e78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e7c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d102      	bne.n	8008e8c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 8008e8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8008e90:	4618      	mov	r0, r3
 8008e92:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bdb0      	pop	{r4, r5, r7, pc}
 8008e9a:	bf00      	nop

08008e9c <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 8008e9c:	b590      	push	{r4, r7, lr}
 8008e9e:	b0a7      	sub	sp, #156	@ 0x9c
 8008ea0:	af02      	add	r7, sp, #8
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008eae:	2304      	movs	r3, #4
 8008eb0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008ec6:	e1c1      	b.n	800924c <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008ed0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	f240 81c1 	bls.w	800925c <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	68da      	ldr	r2, [r3, #12]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f7ff fbcf 	bl	8008688 <DNS_SkipNameField>
 8008eea:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 8008eec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d103      	bne.n	8008efa <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008ef8:	e1b1      	b.n	800925e <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f06:	441a      	add	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f12:	441a      	add	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	695a      	ldr	r2, [r3, #20]
 8008f1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f1e:	1ad2      	subs	r2, r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d803      	bhi.n	8008f34 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008f32:	e194      	b.n	800925e <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 ff5a 	bl	800adf2 <usChar2u16>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	461a      	mov	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	8b1b      	ldrh	r3, [r3, #24]
 8008f4a:	2b1c      	cmp	r3, #28
 8008f4c:	d10c      	bne.n	8008f68 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2210      	movs	r2, #16
 8008f52:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	695a      	ldr	r2, [r3, #20]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	330a      	adds	r3, #10
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d323      	bcc.n	8008faa <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8008f62:	2301      	movs	r3, #1
 8008f64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f66:	e020      	b.n	8008faa <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8b1b      	ldrh	r3, [r3, #24]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d11c      	bne.n	8008faa <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2204      	movs	r2, #4
 8008f74:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	330a      	adds	r3, #10
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d312      	bcc.n	8008faa <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	330a      	adds	r3, #10
 8008f8a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 8008f8c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008f90:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008f9a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008f9c:	f019 fd6e 	bl	8022a7c <memcpy>

                    if( ulTestAddress != 0U )
 8008fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 8008faa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 810d 	beq.w	80091cc <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008fb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fba:	891b      	ldrh	r3, [r3, #8]
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	b21a      	sxth	r2, r3
 8008fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fc4:	891b      	ldrh	r3, [r3, #8]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	0a1b      	lsrs	r3, r3, #8
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	b21b      	sxth	r3, r3
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008fd6:	b21b      	sxth	r3, r3
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	f040 80d0 	bne.w	800917e <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	2b10      	cmp	r3, #16
 8008fe4:	d11c      	bne.n	8009020 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 8008fec:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8008ff0:	6818      	ldr	r0, [r3, #0]
 8008ff2:	6859      	ldr	r1, [r3, #4]
 8008ff4:	689a      	ldr	r2, [r3, #8]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d009      	beq.n	8009014 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3334      	adds	r3, #52	@ 0x34
 8009004:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009008:	210a      	movs	r1, #10
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe fe24 	bl	8007c58 <pxNew_AddrInfo>
 8009010:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2201      	movs	r2, #1
 800901c:	61da      	str	r2, [r3, #28]
 800901e:	e021      	b.n	8009064 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	330a      	adds	r3, #10
 8009026:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	331c      	adds	r3, #28
 800902c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	461a      	mov	r2, r3
 8009034:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009036:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009038:	f019 fd20 	bl	8022a7c <memcpy>

                        if( ppxAddressInfo != NULL )
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	331c      	adds	r3, #28
 8009046:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	3334      	adds	r3, #52	@ 0x34
 800904c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800904e:	2102      	movs	r1, #2
 8009050:	4618      	mov	r0, r3
 8009052:	f7fe fe01 	bl	8007c58 <pxNew_AddrInfo>
 8009056:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 8009060:	2300      	movs	r3, #0
 8009062:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 8009064:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009068:	2b00      	cmp	r3, #0
 800906a:	d013      	beq.n	8009094 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	e004      	b.n	8009088 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009082:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009086:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8009088:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800908c:	f103 021c 	add.w	r2, r3, #28
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <parseDNSAnswer+0x204>
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	e000      	b.n	80090a2 <parseDNSAnswer+0x206>
 80090a0:	2300      	movs	r3, #0
 80090a2:	4619      	mov	r1, r3
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff f979 	bl	800839c <xDNSDoCallback>
 80090aa:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 80090ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2201      	movs	r2, #1
 80090b6:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d011      	beq.n	80090e4 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 80090c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090c8:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 80090ca:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80090ce:	2300      	movs	r3, #0
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	2300      	movs	r3, #0
 80090d4:	f7fe fe85 	bl	8007de2 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80090dc:	3301      	adds	r3, #1
 80090de:	b29a      	uxth	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	8b1b      	ldrh	r3, [r3, #24]
 80090e8:	2b1c      	cmp	r3, #28
 80090ea:	d11f      	bne.n	800912c <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 80090ec:	f107 0214 	add.w	r2, r7, #20
 80090f0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80090f4:	2328      	movs	r3, #40	@ 0x28
 80090f6:	200a      	movs	r0, #10
 80090f8:	f006 fb6c 	bl	800f7d4 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	b29b      	uxth	r3, r3
 8009104:	4618      	mov	r0, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <parseDNSAnswer+0x27c>
 8009114:	4b58      	ldr	r3, [pc, #352]	@ (8009278 <parseDNSAnswer+0x3dc>)
 8009116:	e000      	b.n	800911a <parseDNSAnswer+0x27e>
 8009118:	4b58      	ldr	r3, [pc, #352]	@ (800927c <parseDNSAnswer+0x3e0>)
 800911a:	f107 0114 	add.w	r1, r7, #20
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	460b      	mov	r3, r1
 8009122:	4601      	mov	r1, r0
 8009124:	4856      	ldr	r0, [pc, #344]	@ (8009280 <parseDNSAnswer+0x3e4>)
 8009126:	f019 fa8d 	bl	8022644 <lUDPLoggingPrintf>
 800912a:	e01f      	b.n	800916c <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 8009132:	f107 0214 	add.w	r2, r7, #20
 8009136:	2328      	movs	r3, #40	@ 0x28
 8009138:	2002      	movs	r0, #2
 800913a:	f006 fb4b 	bl	800f7d4 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	b29b      	uxth	r3, r3
 8009146:	4618      	mov	r0, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <parseDNSAnswer+0x2be>
 8009156:	4b48      	ldr	r3, [pc, #288]	@ (8009278 <parseDNSAnswer+0x3dc>)
 8009158:	e000      	b.n	800915c <parseDNSAnswer+0x2c0>
 800915a:	4b48      	ldr	r3, [pc, #288]	@ (800927c <parseDNSAnswer+0x3e0>)
 800915c:	f107 0114 	add.w	r1, r7, #20
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	460b      	mov	r3, r1
 8009164:	4601      	mov	r1, r0
 8009166:	4846      	ldr	r0, [pc, #280]	@ (8009280 <parseDNSAnswer+0x3e4>)
 8009168:	f019 fa6c 	bl	8022644 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 800916c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009170:	2b00      	cmp	r3, #0
 8009172:	d119      	bne.n	80091a8 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800917c:	e014      	b.n	80091a8 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 800917e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009180:	891b      	ldrh	r3, [r3, #8]
 8009182:	b29b      	uxth	r3, r3
 8009184:	021b      	lsls	r3, r3, #8
 8009186:	b21a      	sxth	r2, r3
 8009188:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800918a:	891b      	ldrh	r3, [r3, #8]
 800918c:	b29b      	uxth	r3, r3
 800918e:	0a1b      	lsrs	r3, r3, #8
 8009190:	b29b      	uxth	r3, r3
 8009192:	b21b      	sxth	r3, r3
 8009194:	4313      	orrs	r3, r2
 8009196:	b21b      	sxth	r3, r3
 8009198:	b29b      	uxth	r3, r3
 800919a:	4619      	mov	r1, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	461a      	mov	r2, r3
 80091a2:	4838      	ldr	r0, [pc, #224]	@ (8009284 <parseDNSAnswer+0x3e8>)
 80091a4:	f019 fa4e 	bl	8022644 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	330a      	adds	r3, #10
 80091b2:	441a      	add	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	695a      	ldr	r2, [r3, #20]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	f1a3 020a 	sub.w	r2, r3, #10
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	615a      	str	r2, [r3, #20]
 80091ca:	e03a      	b.n	8009242 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	695b      	ldr	r3, [r3, #20]
 80091d0:	2b09      	cmp	r3, #9
 80091d2:	d936      	bls.n	8009242 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f103 020a 	add.w	r2, r3, #10
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	f1a3 020a 	sub.w	r2, r3, #10
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 80091f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091f4:	891b      	ldrh	r3, [r3, #8]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	021b      	lsls	r3, r3, #8
 80091fa:	b21a      	sxth	r2, r3
 80091fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091fe:	891b      	ldrh	r3, [r3, #8]
 8009200:	b29b      	uxth	r3, r3
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	b29b      	uxth	r3, r3
 8009206:	b21b      	sxth	r3, r3
 8009208:	4313      	orrs	r3, r2
 800920a:	b21b      	sxth	r3, r3
 800920c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	695a      	ldr	r2, [r3, #20]
 8009214:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009218:	429a      	cmp	r2, r3
 800921a:	d30e      	bcc.n	800923a <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	68da      	ldr	r2, [r3, #12]
 8009220:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009224:	441a      	add	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	695a      	ldr	r2, [r3, #20]
 800922e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009232:	1ad2      	subs	r2, r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	615a      	str	r2, [r3, #20]
 8009238:	e003      	b.n	8009242 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 800923a:	2300      	movs	r3, #0
 800923c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 8009240:	e00d      	b.n	800925e <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 8009242:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009246:	3301      	adds	r3, #1
 8009248:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	88db      	ldrh	r3, [r3, #6]
 8009250:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009254:	429a      	cmp	r2, r3
 8009256:	f4ff ae37 	bcc.w	8008ec8 <parseDNSAnswer+0x2c>
 800925a:	e000      	b.n	800925e <parseDNSAnswer+0x3c2>
                break;
 800925c:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 800925e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009262:	2b00      	cmp	r3, #0
 8009264:	d002      	beq.n	800926c <parseDNSAnswer+0x3d0>
 8009266:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800926a:	e000      	b.n	800926e <parseDNSAnswer+0x3d2>
 800926c:	2300      	movs	r3, #0
    }
 800926e:	4618      	mov	r0, r3
 8009270:	3794      	adds	r7, #148	@ 0x94
 8009272:	46bd      	mov	sp, r7
 8009274:	bd90      	pop	{r4, r7, pc}
 8009276:	bf00      	nop
 8009278:	08024fb0 	.word	0x08024fb0
 800927c:	08024fb4 	.word	0x08024fb4
 8009280:	08024fbc 	.word	0x08024fbc
 8009284:	08024ff4 	.word	0x08024ff4

08009288 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8009288:	b580      	push	{r7, lr}
 800928a:	b08c      	sub	sp, #48	@ 0x30
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009296:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fffd 	bl	800a298 <uxIPHeaderSizePacket>
 800929e:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 80092a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d104      	bne.n	80092b0 <prepareReplyDNSMessage+0x28>
 80092a6:	f240 319f 	movw	r1, #927	@ 0x39f
 80092aa:	4865      	ldr	r0, [pc, #404]	@ (8009440 <prepareReplyDNSMessage+0x1b8>)
 80092ac:	f7f8 fb66 	bl	800197c <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b4:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	330e      	adds	r3, #14
 80092ba:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 80092bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092be:	2b28      	cmp	r3, #40	@ 0x28
 80092c0:	d150      	bne.n	8009364 <prepareReplyDNSMessage+0xdc>
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80092ca:	2b60      	cmp	r3, #96	@ 0x60
 80092cc:	d14a      	bne.n	8009364 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d2:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	330e      	adds	r3, #14
 80092d8:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	3336      	adds	r3, #54	@ 0x36
 80092de:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	3308      	adds	r3, #8
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	021b      	lsls	r3, r3, #8
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	3308      	adds	r3, #8
 80092f2:	0a1b      	lsrs	r3, r3, #8
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	4313      	orrs	r3, r2
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f103 0018 	add.w	r0, r3, #24
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	3308      	adds	r3, #8
 8009308:	2210      	movs	r2, #16
 800930a:	4619      	mov	r1, r3
 800930c:	f019 fbb6 	bl	8022a7c <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	f103 0008 	add.w	r0, r3, #8
 8009316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009318:	3338      	adds	r3, #56	@ 0x38
 800931a:	2210      	movs	r2, #16
 800931c:	4619      	mov	r1, r3
 800931e:	f019 fbad 	bl	8022a7c <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	b29b      	uxth	r3, r3
 8009326:	3308      	adds	r3, #8
 8009328:	b29b      	uxth	r3, r3
 800932a:	021b      	lsls	r3, r3, #8
 800932c:	b29a      	uxth	r2, r3
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	b29b      	uxth	r3, r3
 8009332:	3308      	adds	r3, #8
 8009334:	0a1b      	lsrs	r3, r3, #8
 8009336:	b29b      	uxth	r3, r3
 8009338:	4313      	orrs	r3, r2
 800933a:	b29a      	uxth	r2, r3
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	021b      	lsls	r3, r3, #8
 8009348:	4313      	orrs	r3, r2
 800934a:	81fb      	strh	r3, [r7, #14]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	885b      	ldrh	r3, [r3, #2]
 8009350:	b29a      	uxth	r2, r3
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	801a      	strh	r2, [r3, #0]
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	89fa      	ldrh	r2, [r7, #14]
 800935a:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	333e      	adds	r3, #62	@ 0x3e
 8009360:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 8009362:	e066      	b.n	8009432 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	3322      	adds	r3, #34	@ 0x22
 8009368:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	b29a      	uxth	r2, r3
 800936e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009370:	b29b      	uxth	r3, r3
 8009372:	4413      	add	r3, r2
 8009374:	b29b      	uxth	r3, r3
 8009376:	3308      	adds	r3, #8
 8009378:	b29b      	uxth	r3, r3
 800937a:	021b      	lsls	r3, r3, #8
 800937c:	b29a      	uxth	r2, r3
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	b29b      	uxth	r3, r3
 8009382:	4619      	mov	r1, r3
 8009384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009386:	440b      	add	r3, r1
 8009388:	3308      	adds	r3, #8
 800938a:	0a1b      	lsrs	r3, r3, #8
 800938c:	b29b      	uxth	r3, r3
 800938e:	4313      	orrs	r3, r2
 8009390:	b29a      	uxth	r2, r3
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	4a2a      	ldr	r2, [pc, #168]	@ (8009444 <prepareReplyDNSMessage+0x1bc>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d103      	bne.n	80093a8 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	22ff      	movs	r2, #255	@ 0xff
 80093a4:	721a      	strb	r2, [r3, #8]
 80093a6:	e006      	b.n	80093b6 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	68da      	ldr	r2, [r3, #12]
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	2280      	movs	r2, #128	@ 0x80
 80093b4:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 80093b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80093be:	4b22      	ldr	r3, [pc, #136]	@ (8009448 <prepareReplyDNSMessage+0x1c0>)
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	021b      	lsls	r3, r3, #8
 80093c4:	b21a      	sxth	r2, r3
 80093c6:	4b20      	ldr	r3, [pc, #128]	@ (8009448 <prepareReplyDNSMessage+0x1c0>)
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	0a1b      	lsrs	r3, r3, #8
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	b21b      	sxth	r3, r3
 80093d0:	4313      	orrs	r3, r2
 80093d2:	b21b      	sxth	r3, r3
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	2200      	movs	r2, #0
 80093de:	719a      	strb	r2, [r3, #6]
 80093e0:	2200      	movs	r2, #0
 80093e2:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 80093e4:	4b18      	ldr	r3, [pc, #96]	@ (8009448 <prepareReplyDNSMessage+0x1c0>)
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	3301      	adds	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	4b16      	ldr	r3, [pc, #88]	@ (8009448 <prepareReplyDNSMessage+0x1c0>)
 80093ee:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	3308      	adds	r3, #8
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	021b      	lsls	r3, r3, #8
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	3308      	adds	r3, #8
 8009400:	0a1b      	lsrs	r3, r3, #8
 8009402:	b29b      	uxth	r3, r3
 8009404:	4313      	orrs	r3, r2
 8009406:	b29a      	uxth	r2, r3
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	781a      	ldrb	r2, [r3, #0]
 8009410:	785b      	ldrb	r3, [r3, #1]
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	4313      	orrs	r3, r2
 8009416:	81bb      	strh	r3, [r7, #12]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	885b      	ldrh	r3, [r3, #2]
 800941c:	b29a      	uxth	r2, r3
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	801a      	strh	r2, [r3, #0]
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	89ba      	ldrh	r2, [r7, #12]
 8009426:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942c:	4413      	add	r3, r2
 800942e:	3316      	adds	r3, #22
 8009430:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009436:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 8009438:	bf00      	nop
 800943a:	3730      	adds	r7, #48	@ 0x30
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	08024f4c 	.word	0x08024f4c
 8009444:	fb0000e0 	.word	0xfb0000e0
 8009448:	200011a4 	.word	0x200011a4

0800944c <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009454:	2300      	movs	r3, #0
 8009456:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800945c:	2b29      	cmp	r3, #41	@ 0x29
 800945e:	d803      	bhi.n	8009468 <ProcessICMPPacket+0x1c>
 8009460:	2159      	movs	r1, #89	@ 0x59
 8009462:	4811      	ldr	r0, [pc, #68]	@ (80094a8 <ProcessICMPPacket+0x5c>)
 8009464:	f7f8 fa8a 	bl	800197c <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946c:	2b29      	cmp	r3, #41	@ 0x29
 800946e:	d915      	bls.n	800949c <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009474:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800947c:	2b00      	cmp	r3, #0
 800947e:	d008      	beq.n	8009492 <ProcessICMPPacket+0x46>
 8009480:	2b08      	cmp	r3, #8
 8009482:	d10a      	bne.n	800949a <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8009484:	6879      	ldr	r1, [r7, #4]
 8009486:	68b8      	ldr	r0, [r7, #8]
 8009488:	f000 f810 	bl	80094ac <prvProcessICMPEchoRequest>
 800948c:	4603      	mov	r3, r0
 800948e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 8009490:	e004      	b.n	800949c <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 8009492:	68b8      	ldr	r0, [r7, #8]
 8009494:	f000 f836 	bl	8009504 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 8009498:	e000      	b.n	800949c <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 800949a:	bf00      	nop
            }
        }

        return eReturn;
 800949c:	7bfb      	ldrb	r3, [r7, #15]
    }
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	08025018 	.word	0x08025018

080094ac <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	3322      	adds	r3, #34	@ 0x22
 80094ba:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	330e      	adds	r3, #14
 80094c0:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2200      	movs	r2, #0
 80094c6:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	68da      	ldr	r2, [r3, #12]
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2240      	movs	r2, #64	@ 0x40
 80094e0:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2200      	movs	r2, #0
 80094e6:	719a      	strb	r2, [r3, #6]
 80094e8:	2200      	movs	r2, #0
 80094ea:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2200      	movs	r2, #0
 80094f0:	709a      	strb	r2, [r3, #2]
 80094f2:	2200      	movs	r2, #0
 80094f4:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 80094f6:	2302      	movs	r3, #2
    }
 80094f8:	4618      	mov	r0, r3
 80094fa:	371c      	adds	r7, #28
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 800950c:	2300      	movs	r3, #0
 800950e:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	7c1a      	ldrb	r2, [r3, #16]
 8009514:	7c5b      	ldrb	r3, [r3, #17]
 8009516:	021b      	lsls	r3, r3, #8
 8009518:	4313      	orrs	r3, r2
 800951a:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 800951c:	89fb      	ldrh	r3, [r7, #14]
 800951e:	021b      	lsls	r3, r3, #8
 8009520:	b21a      	sxth	r2, r3
 8009522:	89fb      	ldrh	r3, [r7, #14]
 8009524:	0a1b      	lsrs	r3, r3, #8
 8009526:	b29b      	uxth	r3, r3
 8009528:	b21b      	sxth	r3, r3
 800952a:	4313      	orrs	r3, r2
 800952c:	b21b      	sxth	r3, r3
 800952e:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 8009530:	89fb      	ldrh	r3, [r7, #14]
 8009532:	3b14      	subs	r3, #20
 8009534:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 8009536:	89fb      	ldrh	r3, [r7, #14]
 8009538:	3b08      	subs	r3, #8
 800953a:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	332a      	adds	r3, #42	@ 0x2a
 8009544:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8009546:	2300      	movs	r3, #0
 8009548:	82bb      	strh	r3, [r7, #20]
 800954a:	e00c      	b.n	8009566 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b78      	cmp	r3, #120	@ 0x78
 8009552:	d002      	beq.n	800955a <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 8009554:	2302      	movs	r3, #2
 8009556:	75fb      	strb	r3, [r7, #23]
                break;
 8009558:	e009      	b.n	800956e <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	3301      	adds	r3, #1
 800955e:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8009560:	8abb      	ldrh	r3, [r7, #20]
 8009562:	3301      	adds	r3, #1
 8009564:	82bb      	strh	r3, [r7, #20]
 8009566:	8aba      	ldrh	r2, [r7, #20]
 8009568:	89fb      	ldrh	r3, [r7, #14]
 800956a:	429a      	cmp	r2, r3
 800956c:	d3ee      	bcc.n	800954c <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009572:	b29a      	uxth	r2, r3
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f7f8 fab5 	bl	8001ae8 <vApplicationPingReplyHook>
    }
 800957e:	bf00      	nop
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
	...

08009588 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 8009590:	f000 f90e 	bl	80097b0 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8009594:	4802      	ldr	r0, [pc, #8]	@ (80095a0 <prvIPTask+0x18>)
 8009596:	f019 f855 	bl	8022644 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 800959a:	f000 f803 	bl	80095a4 <prvProcessIPEventsAndTimers>
 800959e:	e7fc      	b.n	800959a <prvIPTask+0x12>
 80095a0:	08025048 	.word	0x08025048

080095a4 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 80095a4:	b590      	push	{r4, r7, lr}
 80095a6:	b08d      	sub	sp, #52	@ 0x34
 80095a8:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 80095aa:	f000 ff09 	bl	800a3c0 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 80095ae:	f000 fea7 	bl	800a300 <xCalculateSleepTime>
 80095b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 80095b4:	4b7c      	ldr	r3, [pc, #496]	@ (80097a8 <prvProcessIPEventsAndTimers+0x204>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f107 0118 	add.w	r1, r7, #24
 80095bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fa fb3a 	bl	8003c38 <xQueueReceive>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 80095ca:	23ff      	movs	r3, #255	@ 0xff
 80095cc:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 80095ce:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d6:	d00d      	beq.n	80095f4 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 80095d8:	4b73      	ldr	r3, [pc, #460]	@ (80097a8 <prvProcessIPEventsAndTimers+0x204>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fa fd03 	bl	8003fe8 <uxQueueSpacesAvailable>
 80095e2:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 80095e4:	4b71      	ldr	r3, [pc, #452]	@ (80097ac <prvProcessIPEventsAndTimers+0x208>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d202      	bcs.n	80095f4 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 80095ee:	4a6f      	ldr	r2, [pc, #444]	@ (80097ac <prvProcessIPEventsAndTimers+0x208>)
 80095f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f2:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 80095f4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80095f8:	3301      	adds	r3, #1
 80095fa:	2b0e      	cmp	r3, #14
 80095fc:	f200 80ca 	bhi.w	8009794 <prvProcessIPEventsAndTimers+0x1f0>
 8009600:	a201      	add	r2, pc, #4	@ (adr r2, 8009608 <prvProcessIPEventsAndTimers+0x64>)
 8009602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009606:	bf00      	nop
 8009608:	08009795 	.word	0x08009795
 800960c:	08009645 	.word	0x08009645
 8009610:	0800964f 	.word	0x0800964f
 8009614:	08009659 	.word	0x08009659
 8009618:	08009665 	.word	0x08009665
 800961c:	0800972f 	.word	0x0800972f
 8009620:	08009739 	.word	0x08009739
 8009624:	0800974d 	.word	0x0800974d
 8009628:	08009755 	.word	0x08009755
 800962c:	08009779 	.word	0x08009779
 8009630:	0800966f 	.word	0x0800966f
 8009634:	08009725 	.word	0x08009725
 8009638:	08009743 	.word	0x08009743
 800963c:	08009795 	.word	0x08009795
 8009640:	0800977f 	.word	0x0800977f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	4618      	mov	r0, r3
 8009648:	f001 f9cc 	bl	800a9e4 <prvProcessNetworkDownEvent>
            break;
 800964c:	e0a5      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	4618      	mov	r0, r3
 8009652:	f000 f955 	bl	8009900 <prvHandleEthernetPacket>
            break;
 8009656:	e0a0      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	2101      	movs	r1, #1
 800965c:	4618      	mov	r0, r3
 800965e:	f000 f95d 	bl	800991c <prvForwardTxPacket>
            break;
 8009662:	e09a      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 8009664:	f7fe f94e 	bl	8007904 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 8009668:	f002 fdb6 	bl	800c1d8 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 800966c:	e095      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8009672:	2318      	movs	r3, #24
 8009674:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	7a1b      	ldrb	r3, [r3, #8]
 800967a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <prvProcessIPEventsAndTimers+0xe6>
 8009684:	2b01      	cmp	r3, #1
 8009686:	d01a      	beq.n	80096be <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8009688:	e02c      	b.n	80096e4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 800968a:	2302      	movs	r3, #2
 800968c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800968e:	6a3b      	ldr	r3, [r7, #32]
 8009690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009692:	061a      	lsls	r2, r3, #24
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009698:	021b      	lsls	r3, r3, #8
 800969a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800969e:	431a      	orrs	r2, r3
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a4:	0a1b      	lsrs	r3, r3, #8
 80096a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80096aa:	431a      	orrs	r2, r3
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b0:	0e1b      	lsrs	r3, r3, #24
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	2200      	movs	r2, #0
 80096ba:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 80096bc:	e012      	b.n	80096e4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 80096be:	230a      	movs	r3, #10
 80096c0:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	3328      	adds	r3, #40	@ 0x28
 80096c6:	f107 0408 	add.w	r4, r7, #8
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	6859      	ldr	r1, [r3, #4]
 80096ce:	689a      	ldr	r2, [r3, #8]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	3328      	adds	r3, #40	@ 0x28
 80096d8:	2210      	movs	r2, #16
 80096da:	2100      	movs	r1, #0
 80096dc:	4618      	mov	r0, r3
 80096de:	f019 fada 	bl	8022c96 <memset>
                        break;
 80096e2:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80096e8:	021b      	lsls	r3, r3, #8
 80096ea:	b21a      	sxth	r2, r3
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80096f0:	0a1b      	lsrs	r3, r3, #8
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	b21b      	sxth	r3, r3
 80096f6:	4313      	orrs	r3, r2
 80096f8:	b21b      	sxth	r3, r3
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	2200      	movs	r2, #0
 8009702:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009704:	4639      	mov	r1, r7
 8009706:	2300      	movs	r3, #0
 8009708:	2218      	movs	r2, #24
 800970a:	6a38      	ldr	r0, [r7, #32]
 800970c:	f005 fa32 	bl	800eb74 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f043 0210 	orr.w	r2, r3, #16
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 800971c:	6a38      	ldr	r0, [r7, #32]
 800971e:	f006 f8d8 	bl	800f8d2 <vSocketWakeUpUser>
            break;
 8009722:	e03a      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	4618      	mov	r0, r3
 8009728:	f005 fad8 	bl	800ecdc <vSocketClose>
            break;
 800972c:	e035      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	4618      	mov	r0, r3
 8009732:	f00d facf 	bl	8016cd4 <vProcessGeneratedUDPPacket>
            break;
 8009736:	e030      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f88c 	bl	8009858 <prvCallDHCP_RA_Handler>
            break;
 8009740:	e02b      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	4618      	mov	r0, r3
 8009746:	f007 fbd1 	bl	8010eec <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 800974a:	e026      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 800974c:	2001      	movs	r0, #1
 800974e:	f000 ffab 	bl	800a6a8 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8009752:	e022      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8009758:	6a38      	ldr	r0, [r7, #32]
 800975a:	f008 fd0b 	bl	8012174 <xTCPCheckNewClient>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d019      	beq.n	8009798 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f043 0204 	orr.w	r2, r3, #4
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8009770:	6a38      	ldr	r0, [r7, #32]
 8009772:	f006 f8ae 	bl	800f8d2 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8009776:	e00f      	b.n	8009798 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8009778:	f007 faa2 	bl	8010cc0 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 800977c:	e00d      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8009782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4618      	mov	r0, r3
 8009788:	f7f9 ff12 	bl	80035b0 <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 800978c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800978e:	f7fd f92d 	bl	80069ec <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8009792:	e002      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 8009794:	bf00      	nop
 8009796:	e000      	b.n	800979a <prvProcessIPEventsAndTimers+0x1f6>
            break;
 8009798:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 800979a:	f000 f833 	bl	8009804 <prvIPTask_CheckPendingEvents>
}
 800979e:	bf00      	nop
 80097a0:	3734      	adds	r7, #52	@ 0x34
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd90      	pop	{r4, r7, pc}
 80097a6:	bf00      	nop
 80097a8:	200011a0 	.word	0x200011a0
 80097ac:	20000014 	.word	0x20000014

080097b0 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 80097b6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80097ba:	f000 ff2b 	bl	800a614 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80097be:	4b0f      	ldr	r3, [pc, #60]	@ (80097fc <prvIPTask_Initialise+0x4c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	607b      	str	r3, [r7, #4]
 80097c4:	e005      	b.n	80097d2 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f8be 	bl	8009948 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d0:	607b      	str	r3, [r7, #4]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1f6      	bne.n	80097c6 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 80097d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80097dc:	f000 fee8 	bl	800a5b0 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 80097e0:	2000      	movs	r0, #0
 80097e2:	f000 ff9b 	bl	800a71c <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 80097e6:	f7fe fa31 	bl	8007c4c <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 80097ea:	f7fe fb0f 	bl	8007e0c <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 80097ee:	4b04      	ldr	r3, [pc, #16]	@ (8009800 <prvIPTask_Initialise+0x50>)
 80097f0:	2201      	movs	r2, #1
 80097f2:	601a      	str	r2, [r3, #0]
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	2000152c 	.word	0x2000152c
 8009800:	200011b0 	.word	0x200011b0

08009804 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 800980a:	4b12      	ldr	r3, [pc, #72]	@ (8009854 <prvIPTask_CheckPendingEvents+0x50>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01c      	beq.n	800984c <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8009812:	4b10      	ldr	r3, [pc, #64]	@ (8009854 <prvIPTask_CheckPendingEvents+0x50>)
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8009818:	f004 f836 	bl	800d888 <FreeRTOS_FirstNetworkInterface>
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	e012      	b.n	8009846 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	7f1b      	ldrb	r3, [r3, #28]
 8009824:	f003 0302 	and.w	r3, r3, #2
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d007      	beq.n	800983e <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 f8d8 	bl	800a9e4 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7f13      	ldrb	r3, [r2, #28]
 8009838:	f36f 0341 	bfc	r3, #1, #1
 800983c:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f004 f82e 	bl	800d8a0 <FreeRTOS_NextNetworkInterface>
 8009844:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e9      	bne.n	8009820 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	200011a8 	.word	0x200011a8

08009858 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800986a:	f003 0304 	and.w	r3, r3, #4
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8009874:	2301      	movs	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d10b      	bne.n	8009896 <prvCallDHCP_RA_Handler+0x3e>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009884:	f003 0302 	and.w	r3, r3, #2
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	2000      	movs	r0, #0
 8009892:	f003 fecd 	bl	800d630 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 80098a0:	b480      	push	{r7}
 80098a2:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 80098a4:	4b03      	ldr	r3, [pc, #12]	@ (80098b4 <FreeRTOS_GetIPTaskHandle+0x14>)
 80098a6:	681b      	ldr	r3, [r3, #0]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	200011ac 	.word	0x200011ac

080098b8 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80098c6:	f003 0304 	and.w	r3, r3, #4
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 80098d0:	2101      	movs	r1, #1
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f002 fa7e 	bl	800bdd4 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 80098de:	f043 0310 	orr.w	r3, r3, #16
 80098e2:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 80098e6:	2000      	movs	r0, #0
 80098e8:	f7f8 f87c 	bl	80019e4 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 80098ec:	f7fe f9ae 	bl	8007c4c <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 80098f0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80098f4:	f000 fe6a 	bl	800a5cc <vARPTimerReload>
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f9c8 	bl	8009ca4 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d007      	beq.n	800993e <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	4798      	blx	r3
    }
}
 800993e:	bf00      	nop
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009950:	2300      	movs	r3, #0
 8009952:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	7f13      	ldrb	r3, [r2, #28]
 8009958:	f36f 0300 	bfc	r3, #0, #1
 800995c:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 800995e:	2300      	movs	r3, #0
 8009960:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8009966:	f107 030c 	add.w	r3, r7, #12
 800996a:	6979      	ldr	r1, [r7, #20]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f8df 	bl	8009b30 <xSendEventStructToIPTask>
 8009972:	4603      	mov	r3, r0
 8009974:	2b01      	cmp	r3, #1
 8009976:	d008      	beq.n	800998a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	7f13      	ldrb	r3, [r2, #28]
 800997c:	f043 0302 	orr.w	r3, r3, #2
 8009980:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8009982:	4b06      	ldr	r3, [pc, #24]	@ (800999c <FreeRTOS_NetworkDown+0x54>)
 8009984:	2201      	movs	r2, #1
 8009986:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8009988:	e004      	b.n	8009994 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	7f13      	ldrb	r3, [r2, #28]
 800998e:	f36f 0341 	bfc	r3, #1, #1
 8009992:	7713      	strb	r3, [r2, #28]
}
 8009994:	bf00      	nop
 8009996:	3718      	adds	r7, #24
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	200011a8 	.word	0x200011a8

080099a0 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 80099a6:	2300      	movs	r3, #0
 80099a8:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 80099aa:	f003 ff6d 	bl	800d888 <FreeRTOS_FirstNetworkInterface>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d104      	bne.n	80099be <FreeRTOS_IPInit_Multi+0x1e>
 80099b4:	f240 31b5 	movw	r1, #949	@ 0x3b5
 80099b8:	4823      	ldr	r0, [pc, #140]	@ (8009a48 <FreeRTOS_IPInit_Multi+0xa8>)
 80099ba:	f7f7 ffdf 	bl	800197c <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 80099be:	f001 f8cb 	bl	800ab58 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 80099c2:	2200      	movs	r2, #0
 80099c4:	2108      	movs	r1, #8
 80099c6:	2045      	movs	r0, #69	@ 0x45
 80099c8:	f7f9 ff84 	bl	80038d4 <xQueueGenericCreate>
 80099cc:	4603      	mov	r3, r0
 80099ce:	4a1f      	ldr	r2, [pc, #124]	@ (8009a4c <FreeRTOS_IPInit_Multi+0xac>)
 80099d0:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 80099d2:	4b1e      	ldr	r3, [pc, #120]	@ (8009a4c <FreeRTOS_IPInit_Multi+0xac>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d104      	bne.n	80099e4 <FreeRTOS_IPInit_Multi+0x44>
 80099da:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 80099de:	481a      	ldr	r0, [pc, #104]	@ (8009a48 <FreeRTOS_IPInit_Multi+0xa8>)
 80099e0:	f7f7 ffcc 	bl	800197c <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 80099e4:	4b19      	ldr	r3, [pc, #100]	@ (8009a4c <FreeRTOS_IPInit_Multi+0xac>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d025      	beq.n	8009a38 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 80099ec:	4b17      	ldr	r3, [pc, #92]	@ (8009a4c <FreeRTOS_IPInit_Multi+0xac>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4917      	ldr	r1, [pc, #92]	@ (8009a50 <FreeRTOS_IPInit_Multi+0xb0>)
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fa fc5a 	bl	80042ac <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 80099f8:	f00d feaa 	bl	8017750 <xNetworkBuffersInitialise>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d10e      	bne.n	8009a20 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8009a02:	f004 fc7f 	bl	800e304 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 8009a06:	4b13      	ldr	r3, [pc, #76]	@ (8009a54 <FreeRTOS_IPInit_Multi+0xb4>)
 8009a08:	9301      	str	r3, [sp, #4]
 8009a0a:	2304      	movs	r3, #4
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8009a14:	4910      	ldr	r1, [pc, #64]	@ (8009a58 <FreeRTOS_IPInit_Multi+0xb8>)
 8009a16:	4811      	ldr	r0, [pc, #68]	@ (8009a5c <FreeRTOS_IPInit_Multi+0xbc>)
 8009a18:	f7fa fcfe 	bl	8004418 <xTaskCreate>
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	e00e      	b.n	8009a3e <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8009a20:	480f      	ldr	r0, [pc, #60]	@ (8009a60 <FreeRTOS_IPInit_Multi+0xc0>)
 8009a22:	f018 fe0f 	bl	8022644 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8009a26:	4b09      	ldr	r3, [pc, #36]	@ (8009a4c <FreeRTOS_IPInit_Multi+0xac>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fa fafc 	bl	8004028 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8009a30:	4b06      	ldr	r3, [pc, #24]	@ (8009a4c <FreeRTOS_IPInit_Multi+0xac>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	e002      	b.n	8009a3e <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8009a38:	480a      	ldr	r0, [pc, #40]	@ (8009a64 <FreeRTOS_IPInit_Multi+0xc4>)
 8009a3a:	f018 fe03 	bl	8022644 <lUDPLoggingPrintf>
    }

    return xReturn;
 8009a3e:	687b      	ldr	r3, [r7, #4]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	0802505c 	.word	0x0802505c
 8009a4c:	200011a0 	.word	0x200011a0
 8009a50:	08025088 	.word	0x08025088
 8009a54:	200011ac 	.word	0x200011ac
 8009a58:	08025090 	.word	0x08025090
 8009a5c:	08009589 	.word	0x08009589
 8009a60:	08025098 	.word	0x08025098
 8009a64:	080250d4 	.word	0x080250d4

08009a68 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d023      	beq.n	8009ac4 <FreeRTOS_GetEndPointConfiguration+0x5c>
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009a82:	f003 0304 	and.w	r3, r3, #4
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d11b      	bne.n	8009ac4 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d003      	beq.n	8009aa8 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	689a      	ldr	r2, [r3, #8]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d003      	beq.n	8009ac4 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	68da      	ldr	r2, [r3, #12]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8009ac4:	bf00      	nop
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b088      	sub	sp, #32
 8009ad4:	af02      	add	r7, sp, #8
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8009ade:	2000      	movs	r0, #0
 8009ae0:	f003 ff72 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 8009ae4:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d007      	beq.n	8009afc <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f7ff ffb6 	bl	8009a68 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 8009afc:	bf00      	nop
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8009b12:	79fb      	ldrb	r3, [r7, #7]
 8009b14:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8009b1a:	f107 030c 	add.w	r3, r7, #12
 8009b1e:	6979      	ldr	r1, [r7, #20]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 f805 	bl	8009b30 <xSendEventStructToIPTask>
 8009b26:	4603      	mov	r3, r0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8009b3e:	f000 fb93 	bl	800a268 <xIPIsNetworkTaskReady>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d107      	bne.n	8009b58 <xSendEventStructToIPTask+0x28>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f993 3000 	ldrsb.w	r3, [r3]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d002      	beq.n	8009b58 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8009b52:	2300      	movs	r3, #0
 8009b54:	617b      	str	r3, [r7, #20]
 8009b56:	e035      	b.n	8009bc4 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f993 3000 	ldrsb.w	r3, [r3]
 8009b62:	2b06      	cmp	r3, #6
 8009b64:	d10c      	bne.n	8009b80 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8009b66:	2001      	movs	r0, #1
 8009b68:	f000 fd9e 	bl	800a6a8 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8009b6c:	4b18      	ldr	r3, [pc, #96]	@ (8009bd0 <xSendEventStructToIPTask+0xa0>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fa fa1f 	bl	8003fb4 <uxQueueMessagesWaiting>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d001      	beq.n	8009b80 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d01c      	beq.n	8009bc0 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009b86:	f000 ff15 	bl	800a9b4 <xIsCallingFromIPTask>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d104      	bne.n	8009b9a <xSendEventStructToIPTask+0x6a>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8009b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd0 <xSendEventStructToIPTask+0xa0>)
 8009b9c:	6818      	ldr	r0, [r3, #0]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	f7f9 ff60 	bl	8003a68 <xQueueGenericSend>
 8009ba8:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d109      	bne.n	8009bc4 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f993 3000 	ldrsb.w	r3, [r3]
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	4806      	ldr	r0, [pc, #24]	@ (8009bd4 <xSendEventStructToIPTask+0xa4>)
 8009bba:	f018 fd43 	bl	8022644 <lUDPLoggingPrintf>
 8009bbe:	e001      	b.n	8009bc4 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009bc4:	697b      	ldr	r3, [r7, #20]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	200011a0 	.word	0x200011a0
 8009bd4:	08025118 	.word	0x08025118

08009bd8 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009be0:	2301      	movs	r3, #1
 8009be2:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d102      	bne.n	8009bf8 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	75fb      	strb	r3, [r7, #23]
 8009bf6:	e032      	b.n	8009c5e <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	2100      	movs	r1, #0
 8009c00:	4618      	mov	r0, r3
 8009c02:	f003 ff81 	bl	800db08 <FreeRTOS_FindEndPointOnMAC>
 8009c06:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d002      	beq.n	8009c14 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	75fb      	strb	r3, [r7, #23]
 8009c12:	e024      	b.n	8009c5e <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2206      	movs	r2, #6
 8009c18:	4619      	mov	r1, r3
 8009c1a:	4820      	ldr	r0, [pc, #128]	@ (8009c9c <eConsiderFrameForProcessing+0xc4>)
 8009c1c:	f019 fec3 	bl	80239a6 <memcmp>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d102      	bne.n	8009c2c <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 8009c26:	2301      	movs	r3, #1
 8009c28:	75fb      	strb	r3, [r7, #23]
 8009c2a:	e018      	b.n	8009c5e <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	2206      	movs	r2, #6
 8009c30:	4619      	mov	r1, r3
 8009c32:	481b      	ldr	r0, [pc, #108]	@ (8009ca0 <eConsiderFrameForProcessing+0xc8>)
 8009c34:	f019 feb7 	bl	80239a6 <memcmp>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d102      	bne.n	8009c44 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	75fb      	strb	r3, [r7, #23]
 8009c42:	e00c      	b.n	8009c5e <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b33      	cmp	r3, #51	@ 0x33
 8009c4a:	d106      	bne.n	8009c5a <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009c50:	2b33      	cmp	r3, #51	@ 0x33
 8009c52:	d102      	bne.n	8009c5a <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 8009c54:	2301      	movs	r3, #1
 8009c56:	75fb      	strb	r3, [r7, #23]
 8009c58:	e001      	b.n	8009c5e <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d115      	bne.n	8009c90 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	7b1a      	ldrb	r2, [r3, #12]
 8009c68:	7b5b      	ldrb	r3, [r3, #13]
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8009c70:	897b      	ldrh	r3, [r7, #10]
 8009c72:	021b      	lsls	r3, r3, #8
 8009c74:	b21a      	sxth	r2, r3
 8009c76:	897b      	ldrh	r3, [r7, #10]
 8009c78:	0a1b      	lsrs	r3, r3, #8
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	b21b      	sxth	r3, r3
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	b21b      	sxth	r3, r3
 8009c82:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8009c84:	897b      	ldrh	r3, [r7, #10]
 8009c86:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009c8a:	d801      	bhi.n	8009c90 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8009c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	08027d54 	.word	0x08027d54
 8009ca0:	08027d44 	.word	0x08027d44

08009ca4 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d03d      	beq.n	8009d34 <prvProcessEthernetPacket+0x90>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d039      	beq.n	8009d34 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc4:	2b0d      	cmp	r3, #13
 8009cc6:	d934      	bls.n	8009d32 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009cc8:	2301      	movs	r3, #1
 8009cca:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd0:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	899b      	ldrh	r3, [r3, #12]
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d015      	beq.n	8009d0c <prvProcessEthernetPacket+0x68>
 8009ce0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	dc21      	bgt.n	8009d2c <prvProcessEthernetPacket+0x88>
 8009ce8:	2b08      	cmp	r3, #8
 8009cea:	d00f      	beq.n	8009d0c <prvProcessEthernetPacket+0x68>
 8009cec:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8009cf0:	d11c      	bne.n	8009d2c <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf6:	2b29      	cmp	r3, #41	@ 0x29
 8009cf8:	d905      	bls.n	8009d06 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7fc ffe6 	bl	8006ccc <eARPProcessPacket>
 8009d00:	4603      	mov	r3, r0
 8009d02:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 8009d04:	e016      	b.n	8009d34 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]
                        break;
 8009d0a:	e013      	b.n	8009d34 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d10:	2b21      	cmp	r3, #33	@ 0x21
 8009d12:	d908      	bls.n	8009d26 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 f8c6 	bl	8009eac <prvProcessIPPacket>
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8009d24:	e006      	b.n	8009d34 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
                    break;
 8009d2a:	e003      	b.n	8009d34 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 8009d30:	e000      	b.n	8009d34 <prvProcessEthernetPacket+0x90>
            break;
 8009d32:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	d00b      	beq.n	8009d52 <prvProcessEthernetPacket+0xae>
 8009d3a:	2b04      	cmp	r3, #4
 8009d3c:	dc19      	bgt.n	8009d72 <prvProcessEthernetPacket+0xce>
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d002      	beq.n	8009d48 <prvProcessEthernetPacket+0xa4>
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	d019      	beq.n	8009d7a <prvProcessEthernetPacket+0xd6>
 8009d46:	e014      	b.n	8009d72 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8009d48:	2101      	movs	r1, #1
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f9a4 	bl	800a098 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8009d50:	e014      	b.n	8009d7c <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 8009d52:	4b0c      	ldr	r3, [pc, #48]	@ (8009d84 <prvProcessEthernetPacket+0xe0>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d107      	bne.n	8009d6a <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 8009d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8009d84 <prvProcessEthernetPacket+0xe0>)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8009d60:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009d64:	f000 fc06 	bl	800a574 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 8009d68:	e008      	b.n	8009d7c <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f00d fdc2 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009d70:	e004      	b.n	8009d7c <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f00d fdbe 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009d78:	e000      	b.n	8009d7c <prvProcessEthernetPacket+0xd8>
            break;
 8009d7a:	bf00      	nop
    }
}
 8009d7c:	bf00      	nop
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	2000119c 	.word	0x2000119c

08009d88 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009d88:	b5b0      	push	{r4, r5, r7, lr}
 8009d8a:	b08c      	sub	sp, #48	@ 0x30
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009d90:	2300      	movs	r3, #0
 8009d92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8009d96:	2300      	movs	r3, #0
 8009d98:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da2:	3322      	adds	r3, #34	@ 0x22
 8009da4:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fa76 	bl	800a298 <uxIPHeaderSizePacket>
 8009dac:	4603      	mov	r3, r0
 8009dae:	3316      	adds	r3, #22
 8009db0:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8009db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db4:	899b      	ldrh	r3, [r3, #12]
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d105      	bne.n	8009dcc <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc4:	3336      	adds	r3, #54	@ 0x36
 8009dc6:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 8009dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dce:	889b      	ldrh	r3, [r3, #4]
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	021b      	lsls	r3, r3, #8
 8009dd4:	b21a      	sxth	r2, r3
 8009dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd8:	889b      	ldrh	r3, [r3, #4]
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	0a1b      	lsrs	r3, r3, #8
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	b21b      	sxth	r3, r3
 8009de2:	4313      	orrs	r3, r2
 8009de4:	b21b      	sxth	r3, r3
 8009de6:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 8009de8:	8b7b      	ldrh	r3, [r7, #26]
 8009dea:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dee:	899b      	ldrh	r3, [r3, #12]
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	2b08      	cmp	r3, #8
 8009df4:	d11a      	bne.n	8009e2c <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8009df6:	8b7c      	ldrh	r4, [r7, #26]
 8009df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfa:	8a1b      	ldrh	r3, [r3, #16]
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	021b      	lsls	r3, r3, #8
 8009e00:	b21a      	sxth	r2, r3
 8009e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e04:	8a1b      	ldrh	r3, [r3, #16]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	0a1b      	lsrs	r3, r3, #8
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	b21b      	sxth	r3, r3
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	b21b      	sxth	r3, r3
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	461d      	mov	r5, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fa3e 	bl	800a298 <uxIPHeaderSizePacket>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009e20:	429c      	cmp	r4, r3
 8009e22:	d903      	bls.n	8009e2c <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 8009e24:	2300      	movs	r3, #0
 8009e26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009e2a:	e038      	b.n	8009e9e <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e30:	6a3a      	ldr	r2, [r7, #32]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d833      	bhi.n	8009e9e <prvProcessUDPPacket+0x116>
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	2b07      	cmp	r3, #7
 8009e3a:	d930      	bls.n	8009e9e <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e40:	6a3b      	ldr	r3, [r7, #32]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	3b08      	subs	r3, #8
 8009e4a:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d904      	bls.n	8009e5e <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	441a      	add	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 8009e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6a:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e74:	885b      	ldrh	r3, [r3, #2]
 8009e76:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009e78:	f107 0208 	add.w	r2, r7, #8
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f00c ff48 	bl	8016d14 <xProcessReceivedUDPPacket>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d103      	bne.n	8009e92 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009e90:	e005      	b.n	8009e9e <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d102      	bne.n	8009e9e <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8009e98:	2304      	movs	r3, #4
 8009e9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 8009e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3730      	adds	r7, #48	@ 0x30
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009eac <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b088      	sub	sp, #32
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8009eb6:	2314      	movs	r3, #20
 8009eb8:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	330e      	adds	r3, #14
 8009ec6:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	899b      	ldrh	r3, [r3, #12]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	2b08      	cmp	r3, #8
 8009ed0:	d023      	beq.n	8009f1a <prvProcessIPPacket+0x6e>
 8009ed2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d144      	bne.n	8009f64 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ede:	2b35      	cmp	r3, #53	@ 0x35
 8009ee0:	d802      	bhi.n	8009ee8 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 8009ee6:	e043      	b.n	8009f70 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eec:	330e      	adds	r3, #14
 8009eee:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 8009ef0:	2328      	movs	r3, #40	@ 0x28
 8009ef2:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	799b      	ldrb	r3, [r3, #6]
 8009ef8:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	330e      	adds	r3, #14
 8009efe:	69ba      	ldr	r2, [r7, #24]
 8009f00:	6839      	ldr	r1, [r7, #0]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 fb6c 	bl	800b5e0 <prvAllowIPPacketIPv6>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f10:	3b06      	subs	r3, #6
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	7812      	ldrb	r2, [r2, #0]
 8009f16:	701a      	strb	r2, [r3, #0]
                break;
 8009f18:	e02a      	b.n	8009f70 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009f28:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2e:	3b0e      	subs	r3, #14
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d802      	bhi.n	8009f3c <prvProcessIPPacket+0x90>
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	2b13      	cmp	r3, #19
 8009f3a:	d802      	bhi.n	8009f42 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 8009f40:	e016      	b.n	8009f70 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	7ddb      	ldrb	r3, [r3, #23]
 8009f46:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 f81b 	bl	800af88 <prvAllowIPPacketIPv4>
 8009f52:	4603      	mov	r3, r0
 8009f54:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f5a:	3b06      	subs	r3, #6
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	7812      	ldrb	r2, [r2, #0]
 8009f60:	701a      	strb	r2, [r3, #0]
                   break;
 8009f62:	e005      	b.n	8009f70 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 8009f64:	2300      	movs	r3, #0
 8009f66:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 8009f68:	484a      	ldr	r0, [pc, #296]	@ (800a094 <prvProcessIPPacket+0x1e8>)
 8009f6a:	f018 fb6b 	bl	8022644 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 8009f6e:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8009f70:	7ffb      	ldrb	r3, [r7, #31]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	f040 8088 	bne.w	800a088 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	899b      	ldrh	r3, [r3, #12]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	2b08      	cmp	r3, #8
 8009f80:	d004      	beq.n	8009f8c <prvProcessIPPacket+0xe0>
 8009f82:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d009      	beq.n	8009f9e <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8009f8a:	e020      	b.n	8009fce <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	2b14      	cmp	r3, #20
 8009f90:	d91a      	bls.n	8009fc8 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 8009f92:	6838      	ldr	r0, [r7, #0]
 8009f94:	f001 f852 	bl	800b03c <prvCheckIP4HeaderOptions>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	77fb      	strb	r3, [r7, #31]
                    break;
 8009f9c:	e014      	b.n	8009fc8 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f001 fb3a 	bl	800b61c <xGetExtensionOrder>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	dd0e      	ble.n	8009fcc <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 8009fae:	2101      	movs	r1, #1
 8009fb0:	6838      	ldr	r0, [r7, #0]
 8009fb2:	f001 fb99 	bl	800b6e8 <eHandleIPv6ExtensionHeaders>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 8009fba:	7ffb      	ldrb	r3, [r7, #31]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d005      	beq.n	8009fcc <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	799b      	ldrb	r3, [r3, #6]
 8009fc4:	75fb      	strb	r3, [r7, #23]
                    break;
 8009fc6:	e001      	b.n	8009fcc <prvProcessIPPacket+0x120>
                    break;
 8009fc8:	bf00      	nop
 8009fca:	e000      	b.n	8009fce <prvProcessIPPacket+0x122>
                    break;
 8009fcc:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 8009fce:	7ffb      	ldrb	r3, [r7, #31]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d059      	beq.n	800a088 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009fd4:	7dfb      	ldrb	r3, [r7, #23]
 8009fd6:	2b11      	cmp	r3, #17
 8009fd8:	d026      	beq.n	800a028 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8009fda:	6838      	ldr	r0, [r7, #0]
 8009fdc:	f7fd f918 	bl	8007210 <xCheckRequiresARPResolution>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d102      	bne.n	8009fec <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 8009fe6:	2304      	movs	r3, #4
 8009fe8:	77fb      	strb	r3, [r7, #31]
 8009fea:	e01d      	b.n	800a028 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	899b      	ldrh	r3, [r3, #12]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	2b08      	cmp	r3, #8
 8009ff4:	d00e      	beq.n	800a014 <prvProcessIPPacket+0x168>
 8009ff6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d113      	bne.n	800a026 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	1d98      	adds	r0, r3, #6
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f103 0108 	add.w	r1, r3, #8
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00c:	461a      	mov	r2, r3
 800a00e:	f002 f843 	bl	800c098 <vNDRefreshCacheEntry>
                                break;
 800a012:	e009      	b.n	800a028 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	1d9a      	adds	r2, r3, #6
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	4619      	mov	r1, r3
 800a01e:	4610      	mov	r0, r2
 800a020:	f7fd f9d6 	bl	80073d0 <vARPRefreshCacheEntryAge>
                                break;
 800a024:	e000      	b.n	800a028 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 800a026:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 800a028:	7ffb      	ldrb	r3, [r7, #31]
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d02c      	beq.n	800a088 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	2b3a      	cmp	r3, #58	@ 0x3a
 800a032:	d010      	beq.n	800a056 <prvProcessIPPacket+0x1aa>
 800a034:	2b3a      	cmp	r3, #58	@ 0x3a
 800a036:	dc23      	bgt.n	800a080 <prvProcessIPPacket+0x1d4>
 800a038:	2b11      	cmp	r3, #17
 800a03a:	d012      	beq.n	800a062 <prvProcessIPPacket+0x1b6>
 800a03c:	2b11      	cmp	r3, #17
 800a03e:	dc1f      	bgt.n	800a080 <prvProcessIPPacket+0x1d4>
 800a040:	2b01      	cmp	r3, #1
 800a042:	d002      	beq.n	800a04a <prvProcessIPPacket+0x19e>
 800a044:	2b06      	cmp	r3, #6
 800a046:	d012      	beq.n	800a06e <prvProcessIPPacket+0x1c2>
 800a048:	e01a      	b.n	800a080 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 800a04a:	6838      	ldr	r0, [r7, #0]
 800a04c:	f7ff f9fe 	bl	800944c <ProcessICMPPacket>
 800a050:	4603      	mov	r3, r0
 800a052:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 800a054:	e018      	b.n	800a088 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 800a056:	6838      	ldr	r0, [r7, #0]
 800a058:	f002 fb6e 	bl	800c738 <prvProcessICMPMessage_IPv6>
 800a05c:	4603      	mov	r3, r0
 800a05e:	77fb      	strb	r3, [r7, #31]
                            break;
 800a060:	e012      	b.n	800a088 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 800a062:	6838      	ldr	r0, [r7, #0]
 800a064:	f7ff fe90 	bl	8009d88 <prvProcessUDPPacket>
 800a068:	4603      	mov	r3, r0
 800a06a:	77fb      	strb	r3, [r7, #31]
                        break;
 800a06c:	e00c      	b.n	800a088 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800a06e:	6838      	ldr	r0, [r7, #0]
 800a070:	f007 febe 	bl	8011df0 <xProcessReceivedTCPPacket>
 800a074:	4603      	mov	r3, r0
 800a076:	2b01      	cmp	r3, #1
 800a078:	d105      	bne.n	800a086 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 800a07a:	2303      	movs	r3, #3
 800a07c:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 800a07e:	e002      	b.n	800a086 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 800a080:	2300      	movs	r3, #0
 800a082:	77fb      	strb	r3, [r7, #31]
                        break;
 800a084:	e000      	b.n	800a088 <prvProcessIPPacket+0x1dc>
                                break;
 800a086:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 800a088:	7ffb      	ldrb	r3, [r7, #31]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3720      	adds	r7, #32
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	08025144 	.word	0x08025144

0800a098 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08e      	sub	sp, #56	@ 0x38
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a6:	2b3b      	cmp	r3, #59	@ 0x3b
 800a0a8:	d818      	bhi.n	800a0dc <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	486a      	ldr	r0, [pc, #424]	@ (800a25c <vReturnEthernetFrame+0x1c4>)
 800a0b2:	f018 fac7 	bl	8022644 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0bc:	e008      	b.n	800a0d0 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c4:	4413      	add	r3, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d2:	2b3b      	cmp	r3, #59	@ 0x3b
 800a0d4:	ddf3      	ble.n	800a0be <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	223c      	movs	r2, #60	@ 0x3c
 800a0da:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d111      	bne.n	800a106 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fb87 	bl	800a7fc <pxDuplicateNetworkBufferWithDescriptor>
 800a0ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 800a0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d005      	beq.n	800a102 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a100:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 800a102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a104:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 80a3 	beq.w	800a254 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a112:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 800a114:	2300      	movs	r3, #0
 800a116:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 800a118:	2300      	movs	r3, #0
 800a11a:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a120:	2b00      	cmp	r3, #0
 800a122:	d12f      	bne.n	800a184 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 800a124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a126:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a12a:	061a      	lsls	r2, r3, #24
 800a12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a132:	021b      	lsls	r3, r3, #8
 800a134:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a138:	431a      	orrs	r2, r3
 800a13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a140:	0a1b      	lsrs	r3, r3, #8
 800a142:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a146:	431a      	orrs	r2, r3
 800a148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14a:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a14e:	0e1b      	lsrs	r3, r3, #24
 800a150:	4313      	orrs	r3, r2
 800a152:	4619      	mov	r1, r3
 800a154:	4842      	ldr	r0, [pc, #264]	@ (800a260 <vReturnEthernetFrame+0x1c8>)
 800a156:	f018 fa75 	bl	8022644 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15e:	899b      	ldrh	r3, [r3, #12]
 800a160:	b29b      	uxth	r3, r3
 800a162:	2b08      	cmp	r3, #8
 800a164:	d003      	beq.n	800a16e <vReturnEthernetFrame+0xd6>
 800a166:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a16a:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800a16c:	e00a      	b.n	800a184 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 800a16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a170:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a174:	2107      	movs	r1, #7
 800a176:	4618      	mov	r0, r3
 800a178:	f003 fcfe 	bl	800db78 <FreeRTOS_FindEndPointOnNetMask>
 800a17c:	4602      	mov	r2, r0
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 800a182:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d063      	beq.n	800a254 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a190:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800a194:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 800a196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a198:	899b      	ldrh	r3, [r3, #12]
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	d11c      	bne.n	800a1da <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 800a1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a2:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a1a6:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1ae:	f107 0114 	add.w	r1, r7, #20
 800a1b2:	f107 0310 	add.w	r3, r7, #16
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fd fa54 	bl	8007664 <eARPGetCacheEntry>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 800a1c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d103      	bne.n	800a1d2 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 800a1ca:	f107 0314 	add.w	r3, r7, #20
 800a1ce:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 800a1d0:	e007      	b.n	800a1e2 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d4:	3306      	adds	r3, #6
 800a1d6:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 800a1d8:	e003      	b.n	800a1e2 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1dc:	3306      	adds	r3, #6
 800a1de:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 800a1e0:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 800a1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e4:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 800a1e6:	2206      	movs	r2, #6
 800a1e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1ea:	69f8      	ldr	r0, [r7, #28]
 800a1ec:	f018 fc46 	bl	8022a7c <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1f4:	33e8      	adds	r3, #232	@ 0xe8
 800a1f6:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fa:	3306      	adds	r3, #6
 800a1fc:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a1fe:	2206      	movs	r2, #6
 800a200:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a202:	69f8      	ldr	r0, [r7, #28]
 800a204:	f018 fc3a 	bl	8022a7c <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 800a208:	f000 fbd4 	bl	800a9b4 <xIsCallingFromIPTask>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d106      	bne.n	800a220 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800a212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	6879      	ldr	r1, [r7, #4]
 800a21a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a21c:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 800a21e:	e019      	b.n	800a254 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d011      	beq.n	800a24a <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 800a226:	2302      	movs	r3, #2
 800a228:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800a22e:	f107 0308 	add.w	r3, r7, #8
 800a232:	f04f 31ff 	mov.w	r1, #4294967295
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff fc7a 	bl	8009b30 <xSendEventStructToIPTask>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d108      	bne.n	800a254 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f00d fb56 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
}
 800a248:	e004      	b.n	800a254 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 800a24a:	f640 019f 	movw	r1, #2207	@ 0x89f
 800a24e:	4805      	ldr	r0, [pc, #20]	@ (800a264 <vReturnEthernetFrame+0x1cc>)
 800a250:	f7f7 fb94 	bl	800197c <vAssertCalled>
}
 800a254:	bf00      	nop
 800a256:	3738      	adds	r7, #56	@ 0x38
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	08025170 	.word	0x08025170
 800a260:	08025194 	.word	0x08025194
 800a264:	0802505c 	.word	0x0802505c

0800a268 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 800a268:	b480      	push	{r7}
 800a26a:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 800a26c:	4b03      	ldr	r3, [pc, #12]	@ (800a27c <xIPIsNetworkTaskReady+0x14>)
 800a26e:	681b      	ldr	r3, [r3, #0]
}
 800a270:	4618      	mov	r0, r3
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	200011b0 	.word	0x200011b0

0800a280 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 800a280:	b480      	push	{r7}
 800a282:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 800a284:	4b03      	ldr	r3, [pc, #12]	@ (800a294 <uxGetMinimumIPQueueSpace+0x14>)
 800a286:	681b      	ldr	r3, [r3, #0]
    }
 800a288:	4618      	mov	r0, r3
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20000014 	.word	0x20000014

0800a298 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2a4:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	899b      	ldrh	r3, [r3, #12]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d102      	bne.n	800a2ba <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800a2b4:	2328      	movs	r3, #40	@ 0x28
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	e001      	b.n	800a2be <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800a2ba:	2314      	movs	r3, #20
 800a2bc:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800a2be:	68fb      	ldr	r3, [r7, #12]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d009      	beq.n	800a2ee <uxIPHeaderSizeSocket+0x22>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	7a1b      	ldrb	r3, [r3, #8]
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800a2e8:	2328      	movs	r3, #40	@ 0x28
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	e001      	b.n	800a2f2 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800a2ee:	2314      	movs	r3, #20
 800a2f0:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800a306:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a30a:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800a30c:	4b28      	ldr	r3, [pc, #160]	@ (800a3b0 <xCalculateSleepTime+0xb0>)
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d007      	beq.n	800a32a <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a31a:	4b25      	ldr	r3, [pc, #148]	@ (800a3b0 <xCalculateSleepTime+0xb0>)
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	429a      	cmp	r2, r3
 800a322:	d902      	bls.n	800a32a <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 800a324:	4b22      	ldr	r3, [pc, #136]	@ (800a3b0 <xCalculateSleepTime+0xb0>)
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a32a:	4b22      	ldr	r3, [pc, #136]	@ (800a3b4 <xCalculateSleepTime+0xb4>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 800a330:	e015      	b.n	800a35e <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 800a338:	f003 0301 	and.w	r3, r3, #1
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d009      	beq.n	800a356 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d903      	bls.n	800a356 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a354:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a35c:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1e6      	bne.n	800a332 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 800a364:	4b14      	ldr	r3, [pc, #80]	@ (800a3b8 <xCalculateSleepTime+0xb8>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d007      	beq.n	800a382 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a372:	4b11      	ldr	r3, [pc, #68]	@ (800a3b8 <xCalculateSleepTime+0xb8>)
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d902      	bls.n	800a382 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800a37c:	4b0e      	ldr	r3, [pc, #56]	@ (800a3b8 <xCalculateSleepTime+0xb8>)
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 800a382:	4b0e      	ldr	r3, [pc, #56]	@ (800a3bc <xCalculateSleepTime+0xbc>)
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	f003 0301 	and.w	r3, r3, #1
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d007      	beq.n	800a3a0 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 800a390:	4b0a      	ldr	r3, [pc, #40]	@ (800a3bc <xCalculateSleepTime+0xbc>)
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	429a      	cmp	r2, r3
 800a398:	d902      	bls.n	800a3a0 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800a39a:	4b08      	ldr	r3, [pc, #32]	@ (800a3bc <xCalculateSleepTime+0xbc>)
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 800a3a0:	687b      	ldr	r3, [r7, #4]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	200011cc 	.word	0x200011cc
 800a3b4:	20001528 	.word	0x20001528
 800a3b8:	200011e0 	.word	0x200011e0
 800a3bc:	200011f4 	.word	0x200011f4

0800a3c0 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800a3c6:	484f      	ldr	r0, [pc, #316]	@ (800a504 <vCheckNetworkTimers+0x144>)
 800a3c8:	f000 f932 	bl	800a630 <prvIPTimerCheck>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 800a3d2:	2003      	movs	r0, #3
 800a3d4:	f7ff fb96 	bl	8009b04 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 800a3d8:	484b      	ldr	r0, [pc, #300]	@ (800a508 <vCheckNetworkTimers+0x148>)
 800a3da:	f000 f929 	bl	800a630 <prvIPTimerCheck>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00e      	beq.n	800a402 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 800a3e4:	4b49      	ldr	r3, [pc, #292]	@ (800a50c <vCheckNetworkTimers+0x14c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00a      	beq.n	800a402 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	f000 f995 	bl	800a71c <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800a3f2:	4b46      	ldr	r3, [pc, #280]	@ (800a50c <vCheckNetworkTimers+0x14c>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f00d fa7c 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 800a3fc:	4b43      	ldr	r3, [pc, #268]	@ (800a50c <vCheckNetworkTimers+0x14c>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a402:	4b43      	ldr	r3, [pc, #268]	@ (800a510 <vCheckNetworkTimers+0x150>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 800a408:	e01f      	b.n	800a44a <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	33f8      	adds	r3, #248	@ 0xf8
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 f90e 	bl	800a630 <prvIPTimerCheck>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d013      	beq.n	800a442 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a420:	f003 0304 	and.w	r3, r3, #4
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00b      	beq.n	800a442 <vCheckNetworkTimers+0x82>
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 800a43a:	6939      	ldr	r1, [r7, #16]
 800a43c:	2000      	movs	r0, #0
 800a43e:	f003 f8f7 	bl	800d630 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a448:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1dc      	bne.n	800a40a <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800a450:	4830      	ldr	r0, [pc, #192]	@ (800a514 <vCheckNetworkTimers+0x154>)
 800a452:	f000 f8ed 	bl	800a630 <prvIPTimerCheck>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 800a45c:	2000      	movs	r0, #0
 800a45e:	f7fd fff9 	bl	8008454 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800a462:	4b2d      	ldr	r3, [pc, #180]	@ (800a518 <vCheckNetworkTimers+0x158>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4618      	mov	r0, r3
 800a468:	f7f9 fda4 	bl	8003fb4 <uxQueueMessagesWaiting>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d102      	bne.n	800a478 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 800a472:	2301      	movs	r3, #1
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	e001      	b.n	800a47c <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800a47c:	4827      	ldr	r0, [pc, #156]	@ (800a51c <vCheckNetworkTimers+0x15c>)
 800a47e:	f000 f8d7 	bl	800a630 <prvIPTimerCheck>
 800a482:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 800a48a:	2301      	movs	r3, #1
 800a48c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d007      	beq.n	800a4a4 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f006 f85d 	bl	8010554 <xTCPTimerCheck>
 800a49a:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	481f      	ldr	r0, [pc, #124]	@ (800a51c <vCheckNetworkTimers+0x15c>)
 800a4a0:	f000 f844 	bl	800a52c <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f006 ff8d 	bl	80113c4 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	f006 ffa6 	bl	80113fc <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 800a4b0:	4b1b      	ldr	r3, [pc, #108]	@ (800a520 <vCheckNetworkTimers+0x160>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d120      	bne.n	800a4fa <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 800a4b8:	481a      	ldr	r0, [pc, #104]	@ (800a524 <vCheckNetworkTimers+0x164>)
 800a4ba:	f000 f8b9 	bl	800a630 <prvIPTimerCheck>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d01a      	beq.n	800a4fa <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a4c8:	4b17      	ldr	r3, [pc, #92]	@ (800a528 <vCheckNetworkTimers+0x168>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	617b      	str	r3, [r7, #20]
 800a4ce:	e00e      	b.n	800a4ee <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	7f1b      	ldrb	r3, [r3, #28]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d104      	bne.n	800a4e8 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 800a4e2:	6978      	ldr	r0, [r7, #20]
 800a4e4:	f7ff fa30 	bl	8009948 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ec:	617b      	str	r3, [r7, #20]
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1ed      	bne.n	800a4d0 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f971 	bl	800a7dc <vSetAllNetworksUp>
        }
    }
}
 800a4fa:	bf00      	nop
 800a4fc:	3718      	adds	r7, #24
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	200011cc 	.word	0x200011cc
 800a508:	200011b8 	.word	0x200011b8
 800a50c:	2000119c 	.word	0x2000119c
 800a510:	20001528 	.word	0x20001528
 800a514:	200011f4 	.word	0x200011f4
 800a518:	200011a0 	.word	0x200011a0
 800a51c:	200011e0 	.word	0x200011e0
 800a520:	200011b4 	.word	0x200011b4
 800a524:	20001208 	.word	0x20001208
 800a528:	2000152c 	.word	0x2000152c

0800a52c <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	3304      	adds	r3, #4
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fa febe 	bl	80052bc <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d105      	bne.n	800a558 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	7813      	ldrb	r3, [r2, #0]
 800a550:	f043 0302 	orr.w	r3, r3, #2
 800a554:	7013      	strb	r3, [r2, #0]
 800a556:	e004      	b.n	800a562 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	7813      	ldrb	r3, [r2, #0]
 800a55c:	f36f 0341 	bfc	r3, #1, #1
 800a560:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	7813      	ldrb	r3, [r2, #0]
 800a566:	f043 0301 	orr.w	r3, r3, #1
 800a56a:	7013      	strb	r3, [r2, #0]
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800a57c:	6879      	ldr	r1, [r7, #4]
 800a57e:	4803      	ldr	r0, [pc, #12]	@ (800a58c <vIPTimerStartARPResolution+0x18>)
 800a580:	f7ff ffd4 	bl	800a52c <prvIPTimerStart>
}
 800a584:	bf00      	nop
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	200011b8 	.word	0x200011b8

0800a590 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	683a      	ldr	r2, [r7, #0]
 800a59e:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff ffc2 	bl	800a52c <prvIPTimerStart>
}
 800a5a8:	bf00      	nop
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 800a5b8:	6879      	ldr	r1, [r7, #4]
 800a5ba:	4803      	ldr	r0, [pc, #12]	@ (800a5c8 <vTCPTimerReload+0x18>)
 800a5bc:	f7ff ffe8 	bl	800a590 <prvIPTimerReload>
    }
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	200011e0 	.word	0x200011e0

0800a5cc <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 800a5d4:	6879      	ldr	r1, [r7, #4]
 800a5d6:	4803      	ldr	r0, [pc, #12]	@ (800a5e4 <vARPTimerReload+0x18>)
 800a5d8:	f7ff ffda 	bl	800a590 <prvIPTimerReload>
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	200011cc 	.word	0x200011cc

0800a5e8 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	4806      	ldr	r0, [pc, #24]	@ (800a610 <vDHCP_RATimerReload+0x28>)
 800a5f6:	f018 f825 	bl	8022644 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	33f8      	adds	r3, #248	@ 0xf8
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff ffc5 	bl	800a590 <prvIPTimerReload>
    }
 800a606:	bf00      	nop
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	080251c8 	.word	0x080251c8

0800a614 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800a61c:	6879      	ldr	r1, [r7, #4]
 800a61e:	4803      	ldr	r0, [pc, #12]	@ (800a62c <vNetworkTimerReload+0x18>)
 800a620:	f7ff ffb6 	bl	800a590 <prvIPTimerReload>
}
 800a624:	bf00      	nop
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	20001208 	.word	0x20001208

0800a630 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b00      	cmp	r3, #0
 800a644:	d102      	bne.n	800a64c <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800a646:	2300      	movs	r3, #0
 800a648:	60fb      	str	r3, [r7, #12]
 800a64a:	e028      	b.n	800a69e <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	f003 0302 	and.w	r3, r3, #2
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10f      	bne.n	800a67a <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	1d1a      	adds	r2, r3, #4
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	330c      	adds	r3, #12
 800a662:	4619      	mov	r1, r3
 800a664:	4610      	mov	r0, r2
 800a666:	f7fa fe61 	bl	800532c <xTaskCheckForTimeOut>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d004      	beq.n	800a67a <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	7813      	ldrb	r3, [r2, #0]
 800a674:	f043 0302 	orr.w	r3, r3, #2
 800a678:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	f003 0302 	and.w	r3, r3, #2
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	d008      	beq.n	800a69a <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff ff4c 	bl	800a52c <prvIPTimerStart>
            xReturn = pdTRUE;
 800a694:	2301      	movs	r3, #1
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	e001      	b.n	800a69e <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800a69a:	2300      	movs	r3, #0
 800a69c:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800a69e:	68fb      	ldr	r3, [r7, #12]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 800a6b0:	4a0c      	ldr	r2, [pc, #48]	@ (800a6e4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a6b2:	7813      	ldrb	r3, [r2, #0]
 800a6b4:	f043 0301 	orr.w	r3, r3, #1
 800a6b8:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d005      	beq.n	800a6cc <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a6c0:	4a08      	ldr	r2, [pc, #32]	@ (800a6e4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a6c2:	7813      	ldrb	r3, [r2, #0]
 800a6c4:	f043 0302 	orr.w	r3, r3, #2
 800a6c8:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 800a6ca:	e004      	b.n	800a6d6 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 800a6cc:	4a05      	ldr	r2, [pc, #20]	@ (800a6e4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a6ce:	7813      	ldrb	r3, [r2, #0]
 800a6d0:	f36f 0341 	bfc	r3, #1, #1
 800a6d4:	7013      	strb	r3, [r2, #0]
    }
 800a6d6:	bf00      	nop
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	200011e0 	.word	0x200011e0

0800a6e8 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d005      	beq.n	800a702 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 800a6f6:	4a08      	ldr	r2, [pc, #32]	@ (800a718 <vIPSetARPTimerEnableState+0x30>)
 800a6f8:	7813      	ldrb	r3, [r2, #0]
 800a6fa:	f043 0301 	orr.w	r3, r3, #1
 800a6fe:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a700:	e004      	b.n	800a70c <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 800a702:	4a05      	ldr	r2, [pc, #20]	@ (800a718 <vIPSetARPTimerEnableState+0x30>)
 800a704:	7813      	ldrb	r3, [r2, #0]
 800a706:	f36f 0300 	bfc	r3, #0, #1
 800a70a:	7013      	strb	r3, [r2, #0]
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	200011cc 	.word	0x200011cc

0800a71c <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d005      	beq.n	800a736 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800a72a:	4a08      	ldr	r2, [pc, #32]	@ (800a74c <vIPSetARPResolutionTimerEnableState+0x30>)
 800a72c:	7813      	ldrb	r3, [r2, #0]
 800a72e:	f043 0301 	orr.w	r3, r3, #1
 800a732:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a734:	e004      	b.n	800a740 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 800a736:	4a05      	ldr	r2, [pc, #20]	@ (800a74c <vIPSetARPResolutionTimerEnableState+0x30>)
 800a738:	7813      	ldrb	r3, [r2, #0]
 800a73a:	f36f 0300 	bfc	r3, #0, #1
 800a73e:	7013      	strb	r3, [r2, #0]
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	200011b8 	.word	0x200011b8

0800a750 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <vIPSetDHCP_RATimerEnableState+0x14>
 800a760:	4b0e      	ldr	r3, [pc, #56]	@ (800a79c <vIPSetDHCP_RATimerEnableState+0x4c>)
 800a762:	e000      	b.n	800a766 <vIPSetDHCP_RATimerEnableState+0x16>
 800a764:	4b0e      	ldr	r3, [pc, #56]	@ (800a7a0 <vIPSetDHCP_RATimerEnableState+0x50>)
 800a766:	4619      	mov	r1, r3
 800a768:	480e      	ldr	r0, [pc, #56]	@ (800a7a4 <vIPSetDHCP_RATimerEnableState+0x54>)
 800a76a:	f017 ff6b 	bl	8022644 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d007      	beq.n	800a784 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a77a:	f043 0301 	orr.w	r3, r3, #1
 800a77e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a782:	e006      	b.n	800a792 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a78a:	f36f 0300 	bfc	r3, #0, #1
 800a78e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 800a792:	bf00      	nop
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	080251e4 	.word	0x080251e4
 800a7a0:	080251e8 	.word	0x080251e8
 800a7a4:	080251ec 	.word	0x080251ec

0800a7a8 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d005      	beq.n	800a7c2 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 800a7b6:	4a08      	ldr	r2, [pc, #32]	@ (800a7d8 <vIPSetDNSTimerEnableState+0x30>)
 800a7b8:	7813      	ldrb	r3, [r2, #0]
 800a7ba:	f043 0301 	orr.w	r3, r3, #1
 800a7be:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a7c0:	e004      	b.n	800a7cc <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 800a7c2:	4a05      	ldr	r2, [pc, #20]	@ (800a7d8 <vIPSetDNSTimerEnableState+0x30>)
 800a7c4:	7813      	ldrb	r3, [r2, #0]
 800a7c6:	f36f 0300 	bfc	r3, #0, #1
 800a7ca:	7013      	strb	r3, [r2, #0]
    }
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr
 800a7d8:	200011f4 	.word	0x200011f4

0800a7dc <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 800a7e4:	4a04      	ldr	r2, [pc, #16]	@ (800a7f8 <vSetAllNetworksUp+0x1c>)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6013      	str	r3, [r2, #0]
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	200011b4 	.word	0x200011b4

0800a7fc <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800a80a:	2100      	movs	r1, #0
 800a80c:	6838      	ldr	r0, [r7, #0]
 800a80e:	f00d f809 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 800a812:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d03e      	beq.n	800a898 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d104      	bne.n	800a82c <pxDuplicateNetworkBufferWithDescriptor+0x30>
 800a822:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800a826:	481f      	ldr	r0, [pc, #124]	@ (800a8a4 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 800a828:	f7f7 f8a8 	bl	800197c <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	429a      	cmp	r2, r3
 800a834:	d902      	bls.n	800a83c <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a83a:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	695a      	ldr	r2, [r3, #20]
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	4619      	mov	r1, r3
 800a876:	f018 f901 	bl	8022a7c <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 800a87a:	68b8      	ldr	r0, [r7, #8]
 800a87c:	f7ff fd0c 	bl	800a298 <uxIPHeaderSizePacket>
 800a880:	4603      	mov	r3, r0
 800a882:	2b28      	cmp	r3, #40	@ 0x28
 800a884:	d108      	bne.n	800a898 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	f103 0014 	add.w	r0, r3, #20
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3314      	adds	r3, #20
 800a890:	2210      	movs	r2, #16
 800a892:	4619      	mov	r1, r3
 800a894:	f018 f8f2 	bl	8022a7c <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 800a898:	68bb      	ldr	r3, [r7, #8]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	08025210 	.word	0x08025210

0800a8a8 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d102      	bne.n	800a8be <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	e013      	b.n	800a8e6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f816 	bl	800a8f0 <void_ptr_to_uintptr>
 800a8c4:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	3b0a      	subs	r3, #10
 800a8ce:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d103      	bne.n	800a8e2 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	e001      	b.n	800a8e6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b082      	sub	sp, #8
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 800a912:	2100      	movs	r1, #0
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7ff ffc7 	bl	800a8a8 <prvPacketBuffer_to_NetworkBuffer>
 800a91a:	4603      	mov	r3, r0
    }
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b088      	sub	sp, #32
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d102      	bne.n	800a938 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 800a932:	2300      	movs	r3, #0
 800a934:	61fb      	str	r3, [r7, #28]
 800a936:	e033      	b.n	800a9a0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7ff ffd9 	bl	800a8f0 <void_ptr_to_uintptr>
 800a93e:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	3b30      	subs	r3, #48	@ 0x30
 800a944:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	f023 030f 	bic.w	r3, r3, #15
 800a952:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	2b40      	cmp	r3, #64	@ 0x40
 800a958:	d002      	beq.n	800a960 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
 800a95c:	2b60      	cmp	r3, #96	@ 0x60
 800a95e:	d101      	bne.n	800a964 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 800a960:	2301      	movs	r3, #1
 800a962:	e000      	b.n	800a966 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 800a964:	2300      	movs	r3, #0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d104      	bne.n	800a974 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 800a96a:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800a96e:	480f      	ldr	r0, [pc, #60]	@ (800a9ac <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 800a970:	f7f7 f804 	bl	800197c <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 800a974:	7bfb      	ldrb	r3, [r7, #15]
 800a976:	2b40      	cmp	r3, #64	@ 0x40
 800a978:	d004      	beq.n	800a984 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 800a97a:	2b60      	cmp	r3, #96	@ 0x60
 800a97c:	d105      	bne.n	800a98a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 800a97e:	233e      	movs	r3, #62	@ 0x3e
 800a980:	61bb      	str	r3, [r7, #24]
                    break;
 800a982:	e008      	b.n	800a996 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 800a984:	232a      	movs	r3, #42	@ 0x2a
 800a986:	61bb      	str	r3, [r7, #24]
                    break;
 800a988:	e005      	b.n	800a996 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 800a98a:	4809      	ldr	r0, [pc, #36]	@ (800a9b0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 800a98c:	f017 fe5a 	bl	8022644 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 800a990:	232a      	movs	r3, #42	@ 0x2a
 800a992:	61bb      	str	r3, [r7, #24]
                break;
 800a994:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 800a996:	69b9      	ldr	r1, [r7, #24]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7ff ff85 	bl	800a8a8 <prvPacketBuffer_to_NetworkBuffer>
 800a99e:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 800a9a0:	69fb      	ldr	r3, [r7, #28]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3720      	adds	r7, #32
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	08025210 	.word	0x08025210
 800a9b0:	080252e8 	.word	0x080252e8

0800a9b4 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800a9ba:	f7fa fdd1 	bl	8005560 <xTaskGetCurrentTaskHandle>
 800a9be:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 800a9c0:	f7fe ff6e 	bl	80098a0 <FreeRTOS_GetIPTaskHandle>
 800a9c4:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d102      	bne.n	800a9d4 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	e001      	b.n	800a9d8 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
	...

0800a9e4 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d104      	bne.n	800a9fc <prvProcessNetworkDownEvent+0x18>
 800a9f2:	f240 3137 	movw	r1, #823	@ 0x337
 800a9f6:	4857      	ldr	r0, [pc, #348]	@ (800ab54 <prvProcessNetworkDownEvent+0x170>)
 800a9f8:	f7f6 ffc0 	bl	800197c <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d104      	bne.n	800aa0e <prvProcessNetworkDownEvent+0x2a>
 800aa04:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800aa08:	4852      	ldr	r0, [pc, #328]	@ (800ab54 <prvProcessNetworkDownEvent+0x170>)
 800aa0a:	f7f6 ffb7 	bl	800197c <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 800aa0e:	2000      	movs	r0, #0
 800aa10:	f7ff fe6a 	bl	800a6e8 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f002 ffd7 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	e041      	b.n	800aaa2 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800aa24:	f36f 1304 	bfc	r3, #4, #1
 800aa28:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800aa32:	f003 0304 	and.w	r3, r3, #4
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d003      	beq.n	800aa44 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f001 f9c8 	bl	800bdd4 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800aa4a:	f003 0308 	and.w	r3, r3, #8
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d003      	beq.n	800aa5c <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 800aa54:	2001      	movs	r0, #1
 800aa56:	f7f6 ffc5 	bl	80019e4 <vApplicationIPNetworkEventHook>
 800aa5a:	e006      	b.n	800aa6a <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800aa62:	f043 0308 	orr.w	r3, r3, #8
 800aa66:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f7fd f8c0 	bl	8007bf0 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800aa76:	f003 0304 	and.w	r3, r3, #4
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00b      	beq.n	800aa98 <prvProcessNetworkDownEvent+0xb4>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800aa90:	2100      	movs	r1, #0
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7ff fe5c 	bl	800a750 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800aa98:	68f9      	ldr	r1, [r7, #12]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f002 ffb6 	bl	800da0c <FreeRTOS_NextEndPoint>
 800aaa0:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1ba      	bne.n	800aa1e <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	4798      	blx	r3
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d147      	bne.n	800ab46 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	7f13      	ldrb	r3, [r2, #28]
 800aaba:	f043 0301 	orr.w	r3, r3, #1
 800aabe:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f002 ff81 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	e039      	b.n	800ab3e <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800aad0:	f003 0304 	and.w	r3, r3, #4
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00c      	beq.n	800aaf4 <prvProcessNetworkDownEvent+0x110>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800aae0:	f003 0302 	and.w	r3, r3, #2
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d004      	beq.n	800aaf4 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 800aaea:	68f9      	ldr	r1, [r7, #12]
 800aaec:	2001      	movs	r0, #1
 800aaee:	f002 fd9f 	bl	800d630 <vRAProcess>
 800aaf2:	e01f      	b.n	800ab34 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800aafa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <prvProcessNetworkDownEvent+0x126>
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d008      	beq.n	800ab1a <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800ab08:	e011      	b.n	800ab2e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	331c      	adds	r3, #28
 800ab10:	221c      	movs	r2, #28
 800ab12:	4619      	mov	r1, r3
 800ab14:	f017 ffb2 	bl	8022a7c <memcpy>
                            break;
 800ab18:	e009      	b.n	800ab2e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3390      	adds	r3, #144	@ 0x90
 800ab24:	2258      	movs	r2, #88	@ 0x58
 800ab26:	4619      	mov	r1, r3
 800ab28:	f017 ffa8 	bl	8022a7c <memcpy>
                            break;
 800ab2c:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f7fe fec2 	bl	80098b8 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800ab34:	68f9      	ldr	r1, [r7, #12]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f002 ff68 	bl	800da0c <FreeRTOS_NextEndPoint>
 800ab3c:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1c2      	bne.n	800aaca <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800ab44:	e002      	b.n	800ab4c <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 800ab46:	2000      	movs	r0, #0
 800ab48:	f7ff fe48 	bl	800a7dc <vSetAllNetworksUp>
}
 800ab4c:	bf00      	nop
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	08025210 	.word	0x08025210

0800ab58 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800ab5e:	f7ff fb83 	bl	800a268 <xIPIsNetworkTaskReady>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d004      	beq.n	800ab72 <vPreCheckConfigs+0x1a>
 800ab68:	f240 31db 	movw	r1, #987	@ 0x3db
 800ab6c:	4831      	ldr	r0, [pc, #196]	@ (800ac34 <vPreCheckConfigs+0xdc>)
 800ab6e:	f7f6 ff05 	bl	800197c <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800ab72:	4b31      	ldr	r3, [pc, #196]	@ (800ac38 <vPreCheckConfigs+0xe0>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d004      	beq.n	800ab84 <vPreCheckConfigs+0x2c>
 800ab7a:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800ab7e:	482d      	ldr	r0, [pc, #180]	@ (800ac34 <vPreCheckConfigs+0xdc>)
 800ab80:	f7f6 fefc 	bl	800197c <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800ab84:	f7fe fe8c 	bl	80098a0 <FreeRTOS_GetIPTaskHandle>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d004      	beq.n	800ab98 <vPreCheckConfigs+0x40>
 800ab8e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800ab92:	4828      	ldr	r0, [pc, #160]	@ (800ac34 <vPreCheckConfigs+0xdc>)
 800ab94:	f7f6 fef2 	bl	800197c <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800ab98:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800ab9c:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f240 52db 	movw	r2, #1499	@ 0x5db
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d804      	bhi.n	800abb2 <vPreCheckConfigs+0x5a>
 800aba8:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800abac:	4821      	ldr	r0, [pc, #132]	@ (800ac34 <vPreCheckConfigs+0xdc>)
 800abae:	f7f6 fee5 	bl	800197c <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 800abb2:	230e      	movs	r3, #14
 800abb4:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b0e      	cmp	r3, #14
 800abba:	d004      	beq.n	800abc6 <vPreCheckConfigs+0x6e>
 800abbc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800abc0:	481c      	ldr	r0, [pc, #112]	@ (800ac34 <vPreCheckConfigs+0xdc>)
 800abc2:	f7f6 fedb 	bl	800197c <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 800abc6:	231c      	movs	r3, #28
 800abc8:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b1c      	cmp	r3, #28
 800abce:	d004      	beq.n	800abda <vPreCheckConfigs+0x82>
 800abd0:	f240 4102 	movw	r1, #1026	@ 0x402
 800abd4:	4817      	ldr	r0, [pc, #92]	@ (800ac34 <vPreCheckConfigs+0xdc>)
 800abd6:	f7f6 fed1 	bl	800197c <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800abda:	2314      	movs	r3, #20
 800abdc:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b14      	cmp	r3, #20
 800abe2:	d004      	beq.n	800abee <vPreCheckConfigs+0x96>
 800abe4:	f240 4105 	movw	r1, #1029	@ 0x405
 800abe8:	4812      	ldr	r0, [pc, #72]	@ (800ac34 <vPreCheckConfigs+0xdc>)
 800abea:	f7f6 fec7 	bl	800197c <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800abee:	2308      	movs	r3, #8
 800abf0:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b08      	cmp	r3, #8
 800abf6:	d004      	beq.n	800ac02 <vPreCheckConfigs+0xaa>
 800abf8:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800abfc:	480d      	ldr	r0, [pc, #52]	@ (800ac34 <vPreCheckConfigs+0xdc>)
 800abfe:	f7f6 febd 	bl	800197c <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 800ac02:	2308      	movs	r3, #8
 800ac04:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d004      	beq.n	800ac16 <vPreCheckConfigs+0xbe>
 800ac0c:	f240 410b 	movw	r1, #1035	@ 0x40b
 800ac10:	4808      	ldr	r0, [pc, #32]	@ (800ac34 <vPreCheckConfigs+0xdc>)
 800ac12:	f7f6 feb3 	bl	800197c <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800ac16:	2324      	movs	r3, #36	@ 0x24
 800ac18:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b24      	cmp	r3, #36	@ 0x24
 800ac1e:	d004      	beq.n	800ac2a <vPreCheckConfigs+0xd2>
 800ac20:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800ac24:	4803      	ldr	r0, [pc, #12]	@ (800ac34 <vPreCheckConfigs+0xdc>)
 800ac26:	f7f6 fea9 	bl	800197c <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800ac2a:	bf00      	nop
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	08025210 	.word	0x08025210
 800ac38:	200011a0 	.word	0x200011a0

0800ac3c <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800ac42:	f00c fe9d 	bl	8017980 <uxGetMinimumFreeNetworkBuffers>
 800ac46:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800ac48:	4b24      	ldr	r3, [pc, #144]	@ (800acdc <vPrintResourceStats+0xa0>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d20a      	bcs.n	800ac68 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800ac52:	4a22      	ldr	r2, [pc, #136]	@ (800acdc <vPrintResourceStats+0xa0>)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800ac58:	f00c fe9e 	bl	8017998 <uxGetNumberOfFreeNetworkBuffers>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	4619      	mov	r1, r3
 800ac62:	481f      	ldr	r0, [pc, #124]	@ (800ace0 <vPrintResourceStats+0xa4>)
 800ac64:	f017 fcee 	bl	8022644 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800ac68:	f7fb ff1e 	bl	8006aa8 <xPortGetMinimumEverFreeHeapSize>
 800ac6c:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800ac6e:	4b1d      	ldr	r3, [pc, #116]	@ (800ace4 <vPrintResourceStats+0xa8>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d103      	bne.n	800ac7e <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800ac76:	4a1b      	ldr	r2, [pc, #108]	@ (800ace4 <vPrintResourceStats+0xa8>)
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	e019      	b.n	800acb2 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac84:	d215      	bcs.n	800acb2 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800ac86:	4b17      	ldr	r3, [pc, #92]	@ (800ace4 <vPrintResourceStats+0xa8>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	225a      	movs	r2, #90	@ 0x5a
 800ac8c:	fb03 f202 	mul.w	r2, r3, r2
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2164      	movs	r1, #100	@ 0x64
 800ac94:	fb01 f303 	mul.w	r3, r1, r3
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d90a      	bls.n	800acb2 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800ac9c:	4a11      	ldr	r2, [pc, #68]	@ (800ace4 <vPrintResourceStats+0xa8>)
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 800aca2:	f7fb fef5 	bl	8006a90 <xPortGetFreeHeapSize>
 800aca6:	4603      	mov	r3, r0
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	4619      	mov	r1, r3
 800acac:	480e      	ldr	r0, [pc, #56]	@ (800ace8 <vPrintResourceStats+0xac>)
 800acae:	f017 fcc9 	bl	8022644 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 800acb2:	2300      	movs	r3, #0
 800acb4:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 800acb6:	f7ff fae3 	bl	800a280 <uxGetMinimumIPQueueSpace>
 800acba:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800acbc:	4b0b      	ldr	r3, [pc, #44]	@ (800acec <vPrintResourceStats+0xb0>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d006      	beq.n	800acd4 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 800acc6:	4a09      	ldr	r2, [pc, #36]	@ (800acec <vPrintResourceStats+0xb0>)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	4808      	ldr	r0, [pc, #32]	@ (800acf0 <vPrintResourceStats+0xb4>)
 800acd0:	f017 fcb8 	bl	8022644 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800acd4:	bf00      	nop
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	20000018 	.word	0x20000018
 800ace0:	08025380 	.word	0x08025380
 800ace4:	2000121c 	.word	0x2000121c
 800ace8:	080253a4 	.word	0x080253a4
 800acec:	20001220 	.word	0x20001220
 800acf0:	080253c0 	.word	0x080253c0

0800acf4 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	4293      	cmp	r3, r2
 800ad04:	bf38      	it	cc
 800ad06:	4613      	movcc	r3, r2
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	4293      	cmp	r3, r2
 800ad24:	bfa8      	it	ge
 800ad26:	4613      	movge	r3, r2
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	4293      	cmp	r3, r2
 800ad44:	bf28      	it	cs
 800ad46:	4613      	movcs	r3, r2
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	4293      	cmp	r3, r2
 800ad64:	bf28      	it	cs
 800ad66:	4613      	movcs	r3, r2
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d104      	bne.n	800ad92 <FreeRTOS_round_up+0x1e>
 800ad88:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800ad8c:	480a      	ldr	r0, [pc, #40]	@ (800adb8 <FreeRTOS_round_up+0x44>)
 800ad8e:	f7f6 fdf5 	bl	800197c <vAssertCalled>

    if( d != 0U )
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00a      	beq.n	800adae <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	1e5a      	subs	r2, r3, #1
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	fbb2 f2f3 	udiv	r2, r2, r3
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	fb02 f303 	mul.w	r3, r2, r3
 800adac:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800adae:	68fb      	ldr	r3, [r7, #12]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	08025210 	.word	0x08025210

0800adbc <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3301      	adds	r3, #1
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800add2:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3302      	adds	r3, #2
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800addc:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	3203      	adds	r2, #3
 800ade2:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800ade4:	4313      	orrs	r3, r2
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800adf2:	b480      	push	{r7}
 800adf4:	b083      	sub	sp, #12
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	021b      	lsls	r3, r3, #8
 800ae00:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	3201      	adds	r2, #1
 800ae06:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	b29b      	uxth	r3, r3
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08a      	sub	sp, #40	@ 0x28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800ae22:	2300      	movs	r3, #0
 800ae24:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b21      	cmp	r3, #33	@ 0x21
 800ae32:	d802      	bhi.n	800ae3a <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800ae34:	2301      	movs	r3, #1
 800ae36:	61fb      	str	r3, [r7, #28]
                break;
 800ae38:	e06f      	b.n	800af1a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	7b9b      	ldrb	r3, [r3, #14]
 800ae3e:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800ae40:	8afb      	ldrh	r3, [r7, #22]
 800ae42:	2b44      	cmp	r3, #68	@ 0x44
 800ae44:	d902      	bls.n	800ae4c <xCheckIPv4SizeFields+0x34>
 800ae46:	8afb      	ldrh	r3, [r7, #22]
 800ae48:	2b4f      	cmp	r3, #79	@ 0x4f
 800ae4a:	d902      	bls.n	800ae52 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	61fb      	str	r3, [r7, #28]
                break;
 800ae50:	e063      	b.n	800af1a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800ae52:	8afb      	ldrh	r3, [r7, #22]
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800ae5c:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800ae5e:	8afb      	ldrh	r3, [r7, #22]
 800ae60:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	330e      	adds	r3, #14
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d202      	bcs.n	800ae72 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	61fb      	str	r3, [r7, #28]
                break;
 800ae70:	e053      	b.n	800af1a <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	7c1a      	ldrb	r2, [r3, #16]
 800ae76:	7c5b      	ldrb	r3, [r3, #17]
 800ae78:	021b      	lsls	r3, r3, #8
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 800ae7e:	89fb      	ldrh	r3, [r7, #14]
 800ae80:	021b      	lsls	r3, r3, #8
 800ae82:	b21a      	sxth	r2, r3
 800ae84:	89fb      	ldrh	r3, [r7, #14]
 800ae86:	0a1b      	lsrs	r3, r3, #8
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	b21b      	sxth	r3, r3
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	b21b      	sxth	r3, r3
 800ae90:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800ae92:	89fb      	ldrh	r3, [r7, #14]
 800ae94:	330e      	adds	r3, #14
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d202      	bcs.n	800aea2 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800ae9c:	2304      	movs	r3, #4
 800ae9e:	61fb      	str	r3, [r7, #28]
                break;
 800aea0:	e03b      	b.n	800af1a <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	7ddb      	ldrb	r3, [r3, #23]
 800aea6:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800aea8:	7b7b      	ldrb	r3, [r7, #13]
 800aeaa:	2b11      	cmp	r3, #17
 800aeac:	d103      	bne.n	800aeb6 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	3316      	adds	r3, #22
 800aeb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeb4:	e013      	b.n	800aede <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800aeb6:	7b7b      	ldrb	r3, [r7, #13]
 800aeb8:	2b06      	cmp	r3, #6
 800aeba:	d103      	bne.n	800aec4 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	3322      	adds	r3, #34	@ 0x22
 800aec0:	627b      	str	r3, [r7, #36]	@ 0x24
 800aec2:	e00c      	b.n	800aede <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800aec4:	7b7b      	ldrb	r3, [r7, #13]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d002      	beq.n	800aed0 <xCheckIPv4SizeFields+0xb8>
 800aeca:	7b7b      	ldrb	r3, [r7, #13]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d103      	bne.n	800aed8 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	3316      	adds	r3, #22
 800aed4:	627b      	str	r3, [r7, #36]	@ 0x24
 800aed6:	e002      	b.n	800aede <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800aed8:	2305      	movs	r3, #5
 800aeda:	61fb      	str	r3, [r7, #28]
                break;
 800aedc:	e01d      	b.n	800af1a <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d202      	bcs.n	800aeec <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800aee6:	2306      	movs	r3, #6
 800aee8:	61fb      	str	r3, [r7, #28]
                break;
 800aeea:	e016      	b.n	800af1a <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 800aeec:	89fb      	ldrh	r3, [r7, #14]
 800aeee:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	461a      	mov	r2, r3
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	1a9b      	subs	r3, r3, r2
 800aefa:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2b07      	cmp	r3, #7
 800af00:	d906      	bls.n	800af10 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800af08:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d902      	bls.n	800af16 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800af10:	2307      	movs	r3, #7
 800af12:	61fb      	str	r3, [r7, #28]
                break;
 800af14:	e001      	b.n	800af1a <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800af16:	2301      	movs	r3, #1
 800af18:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800af1a:	6a3b      	ldr	r3, [r7, #32]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d003      	beq.n	800af28 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800af20:	69f9      	ldr	r1, [r7, #28]
 800af22:	4804      	ldr	r0, [pc, #16]	@ (800af34 <xCheckIPv4SizeFields+0x11c>)
 800af24:	f017 fb8e 	bl	8022644 <lUDPLoggingPrintf>
        }

        return xResult;
 800af28:	6a3b      	ldr	r3, [r7, #32]
    }
 800af2a:	4618      	mov	r0, r3
 800af2c:	3728      	adds	r7, #40	@ 0x28
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	0802548c 	.word	0x0802548c

0800af38 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	061a      	lsls	r2, r3, #24
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	021b      	lsls	r3, r3, #8
 800af48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800af4c:	431a      	orrs	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	0a1b      	lsrs	r3, r3, #8
 800af52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800af56:	431a      	orrs	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	0e1b      	lsrs	r3, r3, #24
 800af5c:	4313      	orrs	r3, r2
 800af5e:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800af66:	d306      	bcc.n	800af76 <xIsIPv4Multicast+0x3e>
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800af6e:	d202      	bcs.n	800af76 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800af70:	2301      	movs	r3, #1
 800af72:	60fb      	str	r3, [r7, #12]
 800af74:	e001      	b.n	800af7a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800af7a:	68fb      	ldr	r3, [r7, #12]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3714      	adds	r7, #20
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800af94:	2301      	movs	r3, #1
 800af96:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800af98:	7dfb      	ldrb	r3, [r7, #23]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d10c      	bne.n	800afb8 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa6:	4619      	mov	r1, r3
 800afa8:	4610      	mov	r0, r2
 800afaa:	f7ff ff35 	bl	800ae18 <xCheckIPv4SizeFields>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d001      	beq.n	800afb8 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800afb4:	2300      	movs	r3, #0
 800afb6:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d134      	bne.n	800b028 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	7ddb      	ldrb	r3, [r3, #23]
 800afc2:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc8:	3322      	adds	r3, #34	@ 0x22
 800afca:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800afcc:	7dbb      	ldrb	r3, [r7, #22]
 800afce:	2b11      	cmp	r3, #17
 800afd0:	d12a      	bne.n	800b028 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	88db      	ldrh	r3, [r3, #6]
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d125      	bne.n	800b028 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800afdc:	4b15      	ldr	r3, [pc, #84]	@ (800b034 <prvAllowIPPacketIPv4+0xac>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	dc1f      	bgt.n	800b024 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800afea:	061a      	lsls	r2, r3, #24
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800aff2:	021b      	lsls	r3, r3, #8
 800aff4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aff8:	431a      	orrs	r2, r3
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b000:	0a1b      	lsrs	r3, r3, #8
 800b002:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b006:	431a      	orrs	r2, r3
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b00e:	0e1b      	lsrs	r3, r3, #24
 800b010:	4313      	orrs	r3, r2
 800b012:	4619      	mov	r1, r3
 800b014:	4808      	ldr	r0, [pc, #32]	@ (800b038 <prvAllowIPPacketIPv4+0xb0>)
 800b016:	f017 fb15 	bl	8022644 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800b01a:	4b06      	ldr	r3, [pc, #24]	@ (800b034 <prvAllowIPPacketIPv4+0xac>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	3301      	adds	r3, #1
 800b020:	4a04      	ldr	r2, [pc, #16]	@ (800b034 <prvAllowIPPacketIPv4+0xac>)
 800b022:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800b024:	2300      	movs	r3, #0
 800b026:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800b028:	7dfb      	ldrb	r3, [r7, #23]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20001224 	.word	0x20001224
 800b038:	080254b0 	.word	0x080254b0

0800b03c <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08a      	sub	sp, #40	@ 0x28
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800b044:	2301      	movs	r3, #1
 800b046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b04e:	330e      	adds	r3, #14
 800b050:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800b052:	6a3b      	ldr	r3, [r7, #32]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800b060:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	3b14      	subs	r3, #20
 800b066:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	330e      	adds	r3, #14
 800b070:	4413      	add	r3, r2
 800b072:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b078:	3322      	adds	r3, #34	@ 0x22
 800b07a:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	3b22      	subs	r3, #34	@ 0x22
 800b086:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	6939      	ldr	r1, [r7, #16]
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f018 fc9a 	bl	80239c6 <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	1ad2      	subs	r2, r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800b09e:	6a3b      	ldr	r3, [r7, #32]
 800b0a0:	885b      	ldrh	r3, [r3, #2]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	021b      	lsls	r3, r3, #8
 800b0a6:	b21a      	sxth	r2, r3
 800b0a8:	6a3b      	ldr	r3, [r7, #32]
 800b0aa:	885b      	ldrh	r3, [r3, #2]
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	0a1b      	lsrs	r3, r3, #8
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	b21b      	sxth	r3, r3
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	b21b      	sxth	r3, r3
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	021b      	lsls	r3, r3, #8
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	6a3b      	ldr	r3, [r7, #32]
 800b0c8:	885b      	ldrh	r3, [r3, #2]
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	021b      	lsls	r3, r3, #8
 800b0ce:	b219      	sxth	r1, r3
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	885b      	ldrh	r3, [r3, #2]
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	0a1b      	lsrs	r3, r3, #8
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	b21b      	sxth	r3, r3
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	b21b      	sxth	r3, r3
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	1acb      	subs	r3, r1, r3
 800b0e8:	0a1b      	lsrs	r3, r3, #8
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	6a3b      	ldr	r3, [r7, #32]
 800b0f2:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	f023 030f 	bic.w	r3, r3, #15
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	f043 0305 	orr.w	r3, r3, #5
 800b102:	b2da      	uxtb	r2, r3
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800b108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3728      	adds	r7, #40	@ 0x28
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b0f      	cmp	r3, #15
 800b124:	d802      	bhi.n	800b12c <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800b126:	2300      	movs	r3, #0
 800b128:	61fb      	str	r3, [r7, #28]
 800b12a:	e00e      	b.n	800b14a <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800b12c:	f107 0314 	add.w	r3, r7, #20
 800b130:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	68b9      	ldr	r1, [r7, #8]
 800b140:	4618      	mov	r0, r3
 800b142:	f004 fac9 	bl	800f6d8 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800b14a:	69fb      	ldr	r3, [r7, #28]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3720      	adds	r7, #32
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d010      	beq.n	800b186 <xSend_UDP_Update_IPv4+0x32>
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00d      	beq.n	800b186 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16e:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	689a      	ldr	r2, [r3, #8]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f042 0208 	orr.w	r2, r2, #8
 800b180:	731a      	strb	r2, [r3, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	061a      	lsls	r2, r3, #24
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	021b      	lsls	r3, r3, #8
 800b1a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	0a1b      	lsrs	r3, r3, #8
 800b1b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b1b4:	431a      	orrs	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	0e1b      	lsrs	r3, r3, #24
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	225e      	movs	r2, #94	@ 0x5e
 800b1ce:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	0c1b      	lsrs	r3, r3, #16
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	0a1b      	lsrs	r3, r3, #8
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	b2da      	uxtb	r2, r3
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	715a      	strb	r2, [r3, #5]
}
 800b1f2:	bf00      	nop
 800b1f4:	3714      	adds	r7, #20
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr
	...

0800b200 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800b200:	b580      	push	{r7, lr}
 800b202:	b08c      	sub	sp, #48	@ 0x30
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800b212:	2300      	movs	r3, #0
 800b214:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800b21e:	2300      	movs	r3, #0
 800b220:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b27      	cmp	r3, #39	@ 0x27
 800b226:	d802      	bhi.n	800b22e <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800b228:	2301      	movs	r3, #1
 800b22a:	61fb      	str	r3, [r7, #28]
                break;
 800b22c:	e098      	b.n	800b360 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	7b9b      	ldrb	r3, [r3, #14]
 800b232:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800b234:	89fb      	ldrh	r3, [r7, #14]
 800b236:	111b      	asrs	r3, r3, #4
 800b238:	f003 030f 	and.w	r3, r3, #15
 800b23c:	2b06      	cmp	r3, #6
 800b23e:	d002      	beq.n	800b246 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800b240:	2302      	movs	r3, #2
 800b242:	61fb      	str	r3, [r7, #28]
                break;
 800b244:	e08c      	b.n	800b360 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	2b35      	cmp	r3, #53	@ 0x35
 800b24a:	d802      	bhi.n	800b252 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800b24c:	2303      	movs	r3, #3
 800b24e:	61fb      	str	r3, [r7, #28]
                break;
 800b250:	e086      	b.n	800b360 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	8a5b      	ldrh	r3, [r3, #18]
 800b256:	b29b      	uxth	r3, r3
 800b258:	021b      	lsls	r3, r3, #8
 800b25a:	b21a      	sxth	r2, r3
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	8a5b      	ldrh	r3, [r3, #18]
 800b260:	b29b      	uxth	r3, r3
 800b262:	0a1b      	lsrs	r3, r3, #8
 800b264:	b29b      	uxth	r3, r3
 800b266:	b21b      	sxth	r3, r3
 800b268:	4313      	orrs	r3, r2
 800b26a:	b21b      	sxth	r3, r3
 800b26c:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800b26e:	89bb      	ldrh	r3, [r7, #12]
 800b270:	3336      	adds	r3, #54	@ 0x36
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	429a      	cmp	r2, r3
 800b276:	d002      	beq.n	800b27e <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800b278:	2304      	movs	r3, #4
 800b27a:	61fb      	str	r3, [r7, #28]
                break;
 800b27c:	e070      	b.n	800b360 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	7d1b      	ldrb	r3, [r3, #20]
 800b282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800b286:	e015      	b.n	800b2b4 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	3336      	adds	r3, #54	@ 0x36
 800b28c:	697a      	ldr	r2, [r7, #20]
 800b28e:	4413      	add	r3, r2
 800b290:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	785b      	ldrb	r3, [r3, #1]
 800b296:	3301      	adds	r3, #1
 800b298:	00db      	lsls	r3, r3, #3
 800b29a:	461a      	mov	r2, r3
 800b29c:	6a3b      	ldr	r3, [r7, #32]
 800b29e:	4413      	add	r3, r2
 800b2a0:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	3336      	adds	r3, #54	@ 0x36
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d908      	bls.n	800b2c6 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800b2b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 f85f 	bl	800b37c <xIsExtHeader>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e1      	bne.n	800b288 <xCheckIPv6SizeFields+0x88>
 800b2c4:	e000      	b.n	800b2c8 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800b2c6:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	3336      	adds	r3, #54	@ 0x36
 800b2cc:	683a      	ldr	r2, [r7, #0]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d802      	bhi.n	800b2d8 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800b2d2:	2307      	movs	r3, #7
 800b2d4:	61fb      	str	r3, [r7, #28]
                break;
 800b2d6:	e043      	b.n	800b360 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800b2d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2dc:	2b11      	cmp	r3, #17
 800b2de:	d103      	bne.n	800b2e8 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
 800b2e2:	333e      	adds	r3, #62	@ 0x3e
 800b2e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2e6:	e032      	b.n	800b34e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800b2e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2ec:	2b06      	cmp	r3, #6
 800b2ee:	d103      	bne.n	800b2f8 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	334a      	adds	r3, #74	@ 0x4a
 800b2f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2f6:	e02a      	b.n	800b34e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800b2f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2fc:	2b3a      	cmp	r3, #58	@ 0x3a
 800b2fe:	d123      	bne.n	800b348 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	3336      	adds	r3, #54	@ 0x36
 800b304:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30a:	4413      	add	r3, r2
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800b310:	7afb      	ldrb	r3, [r7, #11]
 800b312:	2b80      	cmp	r3, #128	@ 0x80
 800b314:	d002      	beq.n	800b31c <xCheckIPv6SizeFields+0x11c>
 800b316:	7afb      	ldrb	r3, [r7, #11]
 800b318:	2b81      	cmp	r3, #129	@ 0x81
 800b31a:	d103      	bne.n	800b324 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800b31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31e:	3308      	adds	r3, #8
 800b320:	627b      	str	r3, [r7, #36]	@ 0x24
 800b322:	e014      	b.n	800b34e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800b324:	7afb      	ldrb	r3, [r7, #11]
 800b326:	2b85      	cmp	r3, #133	@ 0x85
 800b328:	d103      	bne.n	800b332 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800b32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b32c:	3308      	adds	r3, #8
 800b32e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b330:	e00d      	b.n	800b34e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800b332:	7afb      	ldrb	r3, [r7, #11]
 800b334:	2b86      	cmp	r3, #134	@ 0x86
 800b336:	d103      	bne.n	800b340 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800b338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33a:	3310      	adds	r3, #16
 800b33c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b33e:	e006      	b.n	800b34e <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800b340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b342:	3318      	adds	r3, #24
 800b344:	627b      	str	r3, [r7, #36]	@ 0x24
 800b346:	e002      	b.n	800b34e <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800b348:	2305      	movs	r3, #5
 800b34a:	61fb      	str	r3, [r7, #28]
                break;
 800b34c:	e008      	b.n	800b360 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b352:	429a      	cmp	r2, r3
 800b354:	d202      	bcs.n	800b35c <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800b356:	2306      	movs	r3, #6
 800b358:	61fb      	str	r3, [r7, #28]
                break;
 800b35a:	e001      	b.n	800b360 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800b35c:	2301      	movs	r3, #1
 800b35e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800b360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b362:	2b01      	cmp	r3, #1
 800b364:	d003      	beq.n	800b36e <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800b366:	69f9      	ldr	r1, [r7, #28]
 800b368:	4803      	ldr	r0, [pc, #12]	@ (800b378 <xCheckIPv6SizeFields+0x178>)
 800b36a:	f017 f96b 	bl	8022644 <lUDPLoggingPrintf>
        }

        return xResult;
 800b36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800b370:	4618      	mov	r0, r3
 800b372:	3730      	adds	r7, #48	@ 0x30
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	080254ec 	.word	0x080254ec

0800b37c <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	2b87      	cmp	r3, #135	@ 0x87
 800b38e:	d016      	beq.n	800b3be <xIsExtHeader+0x42>
 800b390:	2b87      	cmp	r3, #135	@ 0x87
 800b392:	dc16      	bgt.n	800b3c2 <xIsExtHeader+0x46>
 800b394:	2b00      	cmp	r3, #0
 800b396:	d012      	beq.n	800b3be <xIsExtHeader+0x42>
 800b398:	2b00      	cmp	r3, #0
 800b39a:	db12      	blt.n	800b3c2 <xIsExtHeader+0x46>
 800b39c:	2b3c      	cmp	r3, #60	@ 0x3c
 800b39e:	dc10      	bgt.n	800b3c2 <xIsExtHeader+0x46>
 800b3a0:	2b2b      	cmp	r3, #43	@ 0x2b
 800b3a2:	db0e      	blt.n	800b3c2 <xIsExtHeader+0x46>
 800b3a4:	3b2b      	subs	r3, #43	@ 0x2b
 800b3a6:	4a0a      	ldr	r2, [pc, #40]	@ (800b3d0 <xIsExtHeader+0x54>)
 800b3a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	bf14      	ite	ne
 800b3b4:	2301      	movne	r3, #1
 800b3b6:	2300      	moveq	r3, #0
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
    }
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	00020183 	.word	0x00020183

0800b3d4 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d104      	bne.n	800b3ee <xGetIPv6MulticastGroupID+0x1a>
 800b3e4:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800b3e8:	480e      	ldr	r0, [pc, #56]	@ (800b424 <xGetIPv6MulticastGroupID+0x50>)
 800b3ea:	f7f6 fac7 	bl	800197c <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d104      	bne.n	800b3fe <xGetIPv6MulticastGroupID+0x2a>
 800b3f4:	f240 1113 	movw	r1, #275	@ 0x113
 800b3f8:	480a      	ldr	r0, [pc, #40]	@ (800b424 <xGetIPv6MulticastGroupID+0x50>)
 800b3fa:	f7f6 fabf 	bl	800197c <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	2200      	movs	r2, #0
 800b402:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	2200      	movs	r2, #0
 800b408:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	1c98      	adds	r0, r3, #2
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3302      	adds	r3, #2
 800b412:	220e      	movs	r2, #14
 800b414:	4619      	mov	r1, r3
 800b416:	f017 fb31 	bl	8022a7c <memcpy>
}
 800b41a:	bf00      	nop
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	08025510 	.word	0x08025510

0800b428 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b430:	2300      	movs	r3, #0
 800b432:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2210      	movs	r2, #16
 800b438:	4906      	ldr	r1, [pc, #24]	@ (800b454 <xIsIPv6Loopback+0x2c>)
 800b43a:	4618      	mov	r0, r3
 800b43c:	f018 fab3 	bl	80239a6 <memcmp>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d101      	bne.n	800b44a <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800b446:	2301      	movs	r3, #1
 800b448:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b44a:	68fb      	ldr	r3, [r7, #12]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	08027d6c 	.word	0x08027d6c

0800b458 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b460:	2300      	movs	r3, #0
 800b462:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	2bff      	cmp	r3, #255	@ 0xff
 800b46a:	d123      	bne.n	800b4b4 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800b46c:	f107 030c 	add.w	r3, r7, #12
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff ffae 	bl	800b3d4 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	785b      	ldrb	r3, [r3, #1]
 800b47c:	f003 030f 	and.w	r3, r3, #15
 800b480:	2b00      	cmp	r3, #0
 800b482:	d102      	bne.n	800b48a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800b484:	2300      	movs	r3, #0
 800b486:	61fb      	str	r3, [r7, #28]
 800b488:	e014      	b.n	800b4b4 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	785b      	ldrb	r3, [r3, #1]
 800b48e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10c      	bne.n	800b4b0 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800b496:	f107 030c 	add.w	r3, r7, #12
 800b49a:	2210      	movs	r2, #16
 800b49c:	4908      	ldr	r1, [pc, #32]	@ (800b4c0 <xIsIPv6AllowedMulticast+0x68>)
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f018 fa81 	bl	80239a6 <memcmp>
 800b4a4:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d102      	bne.n	800b4b0 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	61fb      	str	r3, [r7, #28]
 800b4ae:	e001      	b.n	800b4b4 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b4b4:	69fb      	ldr	r3, [r7, #28]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3720      	adds	r7, #32
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	08027d5c 	.word	0x08027d5c

0800b4c4 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08a      	sub	sp, #40	@ 0x28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	2bff      	cmp	r3, #255	@ 0xff
 800b4d6:	d112      	bne.n	800b4fe <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d10e      	bne.n	800b4fe <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b4e4:	2bff      	cmp	r3, #255	@ 0xff
 800b4e6:	d10a      	bne.n	800b4fe <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f103 000d 	add.w	r0, r3, #13
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	330d      	adds	r3, #13
 800b4f2:	2203      	movs	r2, #3
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	f018 fa56 	bl	80239a6 <memcmp>
 800b4fa:	6278      	str	r0, [r7, #36]	@ 0x24
 800b4fc:	e069      	b.n	800b5d2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	2210      	movs	r2, #16
 800b502:	4936      	ldr	r1, [pc, #216]	@ (800b5dc <xCompareIPv6_Address+0x118>)
 800b504:	4618      	mov	r0, r3
 800b506:	f018 fa4e 	bl	80239a6 <memcmp>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d102      	bne.n	800b516 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800b510:	2300      	movs	r3, #0
 800b512:	627b      	str	r3, [r7, #36]	@ 0x24
 800b514:	e05d      	b.n	800b5d2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b51c:	d10e      	bne.n	800b53c <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b522:	2b80      	cmp	r3, #128	@ 0x80
 800b524:	d10a      	bne.n	800b53c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b52a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b52c:	d106      	bne.n	800b53c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b532:	2b80      	cmp	r3, #128	@ 0x80
 800b534:	d102      	bne.n	800b53c <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	627b      	str	r3, [r7, #36]	@ 0x24
 800b53a:	e04a      	b.n	800b5d2 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d102      	bne.n	800b548 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800b542:	2300      	movs	r3, #0
 800b544:	627b      	str	r3, [r7, #36]	@ 0x24
 800b546:	e044      	b.n	800b5d2 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b80      	cmp	r3, #128	@ 0x80
 800b54c:	d107      	bne.n	800b55e <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	68b9      	ldr	r1, [r7, #8]
 800b552:	2210      	movs	r2, #16
 800b554:	4618      	mov	r0, r3
 800b556:	f018 fa26 	bl	80239a6 <memcmp>
 800b55a:	6278      	str	r0, [r7, #36]	@ 0x24
 800b55c:	e039      	b.n	800b5d2 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	08db      	lsrs	r3, r3, #3
 800b562:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d006      	beq.n	800b57c <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	68b9      	ldr	r1, [r7, #8]
 800b572:	6a3a      	ldr	r2, [r7, #32]
 800b574:	4618      	mov	r0, r3
 800b576:	f018 fa16 	bl	80239a6 <memcmp>
 800b57a:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800b57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d127      	bne.n	800b5d2 <xCompareIPv6_Address+0x10e>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f003 0307 	and.w	r3, r3, #7
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d022      	beq.n	800b5d2 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f003 0307 	and.w	r3, r3, #7
 800b592:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	f1c3 0308 	rsb	r3, r3, #8
 800b59a:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800b59c:	2201      	movs	r2, #1
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	43db      	mvns	r3, r3
 800b5ae:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	6a3b      	ldr	r3, [r7, #32]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	781a      	ldrb	r2, [r3, #0]
 800b5b8:	68b9      	ldr	r1, [r7, #8]
 800b5ba:	6a3b      	ldr	r3, [r7, #32]
 800b5bc:	440b      	add	r3, r1
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	4053      	eors	r3, r2
 800b5c2:	b2da      	uxtb	r2, r3
 800b5c4:	7cfb      	ldrb	r3, [r7, #19]
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3728      	adds	r7, #40	@ 0x28
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	08027d7c 	.word	0x08027d7c

0800b5e0 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800b5f0:	7dfb      	ldrb	r3, [r7, #23]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d10c      	bne.n	800b610 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5fe:	4619      	mov	r1, r3
 800b600:	4610      	mov	r0, r2
 800b602:	f7ff fdfd 	bl	800b200 <xCheckIPv6SizeFields>
 800b606:	4603      	mov	r3, r0
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d001      	beq.n	800b610 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800b60c:	2300      	movs	r3, #0
 800b60e:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800b610:	7dfb      	ldrb	r3, [r7, #23]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3718      	adds	r7, #24
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	460a      	mov	r2, r1
 800b626:	71fb      	strb	r3, [r7, #7]
 800b628:	4613      	mov	r3, r2
 800b62a:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800b62c:	79fb      	ldrb	r3, [r7, #7]
 800b62e:	2b87      	cmp	r3, #135	@ 0x87
 800b630:	d04b      	beq.n	800b6ca <xGetExtensionOrder+0xae>
 800b632:	2b87      	cmp	r3, #135	@ 0x87
 800b634:	dc4c      	bgt.n	800b6d0 <xGetExtensionOrder+0xb4>
 800b636:	2b00      	cmp	r3, #0
 800b638:	d030      	beq.n	800b69c <xGetExtensionOrder+0x80>
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	db48      	blt.n	800b6d0 <xGetExtensionOrder+0xb4>
 800b63e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b640:	dc46      	bgt.n	800b6d0 <xGetExtensionOrder+0xb4>
 800b642:	2b2b      	cmp	r3, #43	@ 0x2b
 800b644:	db44      	blt.n	800b6d0 <xGetExtensionOrder+0xb4>
 800b646:	3b2b      	subs	r3, #43	@ 0x2b
 800b648:	2b11      	cmp	r3, #17
 800b64a:	d841      	bhi.n	800b6d0 <xGetExtensionOrder+0xb4>
 800b64c:	a201      	add	r2, pc, #4	@ (adr r2, 800b654 <xGetExtensionOrder+0x38>)
 800b64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b652:	bf00      	nop
 800b654:	0800b6b3 	.word	0x0800b6b3
 800b658:	0800b6b9 	.word	0x0800b6b9
 800b65c:	0800b6d1 	.word	0x0800b6d1
 800b660:	0800b6d1 	.word	0x0800b6d1
 800b664:	0800b6d1 	.word	0x0800b6d1
 800b668:	0800b6d1 	.word	0x0800b6d1
 800b66c:	0800b6d1 	.word	0x0800b6d1
 800b670:	0800b6c5 	.word	0x0800b6c5
 800b674:	0800b6bf 	.word	0x0800b6bf
 800b678:	0800b6d1 	.word	0x0800b6d1
 800b67c:	0800b6d1 	.word	0x0800b6d1
 800b680:	0800b6d1 	.word	0x0800b6d1
 800b684:	0800b6d1 	.word	0x0800b6d1
 800b688:	0800b6d1 	.word	0x0800b6d1
 800b68c:	0800b6d1 	.word	0x0800b6d1
 800b690:	0800b6d1 	.word	0x0800b6d1
 800b694:	0800b6d1 	.word	0x0800b6d1
 800b698:	0800b6a3 	.word	0x0800b6a3
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800b69c:	2301      	movs	r3, #1
 800b69e:	60fb      	str	r3, [r7, #12]
            break;
 800b6a0:	e01b      	b.n	800b6da <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800b6a2:	2307      	movs	r3, #7
 800b6a4:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800b6a6:	79bb      	ldrb	r3, [r7, #6]
 800b6a8:	2b2b      	cmp	r3, #43	@ 0x2b
 800b6aa:	d115      	bne.n	800b6d8 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	60fb      	str	r3, [r7, #12]
            }

            break;
 800b6b0:	e012      	b.n	800b6d8 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	60fb      	str	r3, [r7, #12]
            break;
 800b6b6:	e010      	b.n	800b6da <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800b6b8:	2304      	movs	r3, #4
 800b6ba:	60fb      	str	r3, [r7, #12]
            break;
 800b6bc:	e00d      	b.n	800b6da <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800b6be:	2305      	movs	r3, #5
 800b6c0:	60fb      	str	r3, [r7, #12]
            break;
 800b6c2:	e00a      	b.n	800b6da <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800b6c4:	2306      	movs	r3, #6
 800b6c6:	60fb      	str	r3, [r7, #12]
            break;
 800b6c8:	e007      	b.n	800b6da <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800b6ca:	2308      	movs	r3, #8
 800b6cc:	60fb      	str	r3, [r7, #12]
            break;
 800b6ce:	e004      	b.n	800b6da <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800b6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d4:	60fb      	str	r3, [r7, #12]
            break;
 800b6d6:	e000      	b.n	800b6da <xGetExtensionOrder+0xbe>
            break;
 800b6d8:	bf00      	nop
    }

    return xReturn;
 800b6da:	68fb      	ldr	r3, [r7, #12]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b08e      	sub	sp, #56	@ 0x38
 800b6ec:	af02      	add	r7, sp, #8
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b702:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800b708:	2300      	movs	r3, #0
 800b70a:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800b710:	2300      	movs	r3, #0
 800b712:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71c:	f107 020b 	add.w	r2, r7, #11
 800b720:	4619      	mov	r1, r3
 800b722:	f000 faa5 	bl	800bc70 <usGetExtensionHeaderLength>
 800b726:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	3336      	adds	r3, #54	@ 0x36
 800b72c:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800b72e:	69ba      	ldr	r2, [r7, #24]
 800b730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b732:	429a      	cmp	r2, r3
 800b734:	d243      	bcs.n	800b7be <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	8a5b      	ldrh	r3, [r3, #18]
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	021b      	lsls	r3, r3, #8
 800b73e:	b21a      	sxth	r2, r3
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	8a5b      	ldrh	r3, [r3, #18]
 800b744:	b29b      	uxth	r3, r3
 800b746:	0a1b      	lsrs	r3, r3, #8
 800b748:	b29b      	uxth	r3, r3
 800b74a:	b21b      	sxth	r3, r3
 800b74c:	4313      	orrs	r3, r2
 800b74e:	b21b      	sxth	r3, r3
 800b750:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800b752:	8afb      	ldrh	r3, [r7, #22]
 800b754:	69fa      	ldr	r2, [r7, #28]
 800b756:	429a      	cmp	r2, r3
 800b758:	d231      	bcs.n	800b7be <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d12e      	bne.n	800b7be <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800b760:	7afa      	ldrb	r2, [r7, #11]
 800b762:	6a3b      	ldr	r3, [r7, #32]
 800b764:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b76a:	3336      	adds	r3, #54	@ 0x36
 800b76c:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	4413      	add	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800b778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800b780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b782:	68f9      	ldr	r1, [r7, #12]
 800b784:	6938      	ldr	r0, [r7, #16]
 800b786:	f018 f91e 	bl	80239c6 <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	1ad2      	subs	r2, r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	b29b      	uxth	r3, r3
 800b79a:	8afa      	ldrh	r2, [r7, #22]
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800b7a0:	8afb      	ldrh	r3, [r7, #22]
 800b7a2:	021b      	lsls	r3, r3, #8
 800b7a4:	b21a      	sxth	r2, r3
 800b7a6:	8afb      	ldrh	r3, [r7, #22]
 800b7a8:	0a1b      	lsrs	r3, r3, #8
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	b21b      	sxth	r3, r3
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	b21b      	sxth	r3, r3
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800b7be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d101      	bne.n	800b7ca <eHandleIPv6ExtensionHeaders+0xe2>
 800b7c6:	4910      	ldr	r1, [pc, #64]	@ (800b808 <eHandleIPv6ExtensionHeaders+0x120>)
 800b7c8:	e000      	b.n	800b7cc <eHandleIPv6ExtensionHeaders+0xe4>
 800b7ca:	4910      	ldr	r1, [pc, #64]	@ (800b80c <eHandleIPv6ExtensionHeaders+0x124>)
 800b7cc:	6a3b      	ldr	r3, [r7, #32]
 800b7ce:	8a5b      	ldrh	r3, [r3, #18]
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	021b      	lsls	r3, r3, #8
 800b7d4:	b21a      	sxth	r2, r3
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	8a5b      	ldrh	r3, [r3, #18]
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	0a1b      	lsrs	r3, r3, #8
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	b21b      	sxth	r3, r3
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	b21b      	sxth	r3, r3
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ee:	9301      	str	r3, [sp, #4]
 800b7f0:	9200      	str	r2, [sp, #0]
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7f6:	4806      	ldr	r0, [pc, #24]	@ (800b810 <eHandleIPv6ExtensionHeaders+0x128>)
 800b7f8:	f016 ff24 	bl	8022644 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800b7fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b800:	4618      	mov	r0, r3
 800b802:	3730      	adds	r7, #48	@ 0x30
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	08025540 	.word	0x08025540
 800b80c:	08025548 	.word	0x08025548
 800b810:	0802554c 	.word	0x0802554c

0800b814 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800b81e:	2300      	movs	r3, #0
 800b820:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d026      	beq.n	800b876 <pxTCPSocketLookup_IPv6+0x62>
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d023      	beq.n	800b876 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	7a1b      	ldrb	r3, [r3, #8]
 800b832:	f003 0301 	and.w	r3, r3, #1
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d010      	beq.n	800b85e <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d018      	beq.n	800b876 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3354      	adds	r3, #84	@ 0x54
 800b848:	6839      	ldr	r1, [r7, #0]
 800b84a:	2210      	movs	r2, #16
 800b84c:	4618      	mov	r0, r3
 800b84e:	f018 f8aa 	bl	80239a6 <memcmp>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10e      	bne.n	800b876 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	60fb      	str	r3, [r7, #12]
 800b85c:	e00b      	b.n	800b876 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d107      	bne.n	800b876 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d101      	bne.n	800b876 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800b876:	68fb      	ldr	r3, [r7, #12]
    }
 800b878:	4618      	mov	r0, r3
 800b87a:	3710      	adds	r7, #16
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b88e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d103      	bne.n	800b8a4 <xSend_UDP_Update_IPv6+0x24>
 800b89c:	2173      	movs	r1, #115	@ 0x73
 800b89e:	4811      	ldr	r0, [pc, #68]	@ (800b8e4 <xSend_UDP_Update_IPv6+0x64>)
 800b8a0:	f7f6 f86c 	bl	800197c <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	3308      	adds	r3, #8
 800b8ae:	2210      	movs	r2, #16
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	f017 f8e3 	bl	8022a7c <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f103 0014 	add.w	r0, r3, #20
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	3308      	adds	r3, #8
 800b8c0:	2210      	movs	r2, #16
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	f017 f8da 	bl	8022a7c <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b8d0:	731a      	strb	r2, [r3, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b8d8:	735a      	strb	r2, [r3, #13]

    return NULL;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	080255a4 	.word	0x080255a4

0800b8e8 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800b8f2:	2330      	movs	r3, #48	@ 0x30
 800b8f4:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800b8f6:	88fb      	ldrh	r3, [r7, #6]
 800b8f8:	2b09      	cmp	r3, #9
 800b8fa:	d805      	bhi.n	800b908 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800b8fc:	88fb      	ldrh	r3, [r7, #6]
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	4413      	add	r3, r2
 800b904:	73fb      	strb	r3, [r7, #15]
 800b906:	e010      	b.n	800b92a <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800b908:	88fb      	ldrh	r3, [r7, #6]
 800b90a:	2b0f      	cmp	r3, #15
 800b90c:	d809      	bhi.n	800b922 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800b90e:	2361      	movs	r3, #97	@ 0x61
 800b910:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800b912:	88fb      	ldrh	r3, [r7, #6]
 800b914:	b2da      	uxtb	r2, r3
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	4413      	add	r3, r2
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	3b0a      	subs	r3, #10
 800b91e:	73fb      	strb	r3, [r7, #15]
 800b920:	e003      	b.n	800b92a <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800b922:	21b3      	movs	r1, #179	@ 0xb3
 800b924:	4803      	ldr	r0, [pc, #12]	@ (800b934 <cHexToChar+0x4c>)
 800b926:	f7f6 f829 	bl	800197c <vAssertCalled>
    }

    return cReturn;
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	080255a4 	.word	0x080255a4

0800b938 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800b938:	b590      	push	{r4, r7, lr}
 800b93a:	b08b      	sub	sp, #44	@ 0x2c
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	4613      	mov	r3, r2
 800b944:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800b946:	2304      	movs	r3, #4
 800b948:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800b94e:	88fb      	ldrh	r3, [r7, #6]
 800b950:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800b952:	2300      	movs	r3, #0
 800b954:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800b956:	2300      	movs	r3, #0
 800b958:	627b      	str	r3, [r7, #36]	@ 0x24
 800b95a:	e026      	b.n	800b9aa <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800b95c:	8bfb      	ldrh	r3, [r7, #30]
 800b95e:	0b1b      	lsrs	r3, r3, #12
 800b960:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800b962:	8a7b      	ldrh	r3, [r7, #18]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800b968:	2301      	movs	r3, #1
 800b96a:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d104      	bne.n	800b97c <uxHexPrintShort+0x44>
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	3b01      	subs	r3, #1
 800b976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b978:	429a      	cmp	r2, r3
 800b97a:	d110      	bne.n	800b99e <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	3b01      	subs	r3, #1
 800b980:	6a3a      	ldr	r2, [r7, #32]
 800b982:	429a      	cmp	r2, r3
 800b984:	d216      	bcs.n	800b9b4 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	6a3b      	ldr	r3, [r7, #32]
 800b98a:	18d4      	adds	r4, r2, r3
 800b98c:	8a7b      	ldrh	r3, [r7, #18]
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff ffaa 	bl	800b8e8 <cHexToChar>
 800b994:	4603      	mov	r3, r0
 800b996:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	3301      	adds	r3, #1
 800b99c:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800b99e:	8bfb      	ldrh	r3, [r7, #30]
 800b9a0:	011b      	lsls	r3, r3, #4
 800b9a2:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d3d4      	bcc.n	800b95c <uxHexPrintShort+0x24>
 800b9b2:	e000      	b.n	800b9b6 <uxHexPrintShort+0x7e>
                break;
 800b9b4:	bf00      	nop
    }

    return uxIndex;
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	372c      	adds	r7, #44	@ 0x2c
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd90      	pop	{r4, r7, pc}

0800b9c0 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b089      	sub	sp, #36	@ 0x24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800b9d4:	2308      	movs	r3, #8
 800b9d6:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f04f 32ff 	mov.w	r2, #4294967295
 800b9de:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800b9e0:	e02c      	b.n	800ba3c <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	4413      	add	r3, r2
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800b9f0:	89fb      	ldrh	r3, [r7, #14]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d107      	bne.n	800ba06 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	3301      	adds	r3, #1
 800ba04:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800ba06:	89fb      	ldrh	r3, [r7, #14]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d104      	bne.n	800ba16 <prv_ntop6_search_zeros+0x56>
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	69fa      	ldr	r2, [r7, #28]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d10f      	bne.n	800ba36 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	dd0a      	ble.n	800ba32 <prv_ntop6_search_zeros+0x72>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	dd05      	ble.n	800ba32 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	61fb      	str	r3, [r7, #28]
 800ba3c:	69fa      	ldr	r2, [r7, #28]
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	dbce      	blt.n	800b9e2 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800ba44:	bf00      	nop
 800ba46:	bf00      	nop
 800ba48:	3724      	adds	r7, #36	@ 0x24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800ba52:	b480      	push	{r7}
 800ba54:	b087      	sub	sp, #28
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800ba62:	2308      	movs	r3, #8
 800ba64:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	691a      	ldr	r2, [r3, #16]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d827      	bhi.n	800bac2 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	4413      	add	r3, r2
 800ba7a:	223a      	movs	r2, #58	@ 0x3a
 800ba7c:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68da      	ldr	r2, [r3, #12]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	4413      	add	r3, r2
 800ba92:	693a      	ldr	r2, [r7, #16]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d116      	bne.n	800bac6 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	691a      	ldr	r2, [r3, #16]
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d80b      	bhi.n	800babc <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	4413      	add	r3, r2
 800baac:	223a      	movs	r2, #58	@ 0x3a
 800baae:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	691b      	ldr	r3, [r3, #16]
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	611a      	str	r2, [r3, #16]
 800baba:	e004      	b.n	800bac6 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800babc:	2300      	movs	r3, #0
 800babe:	617b      	str	r3, [r7, #20]
 800bac0:	e001      	b.n	800bac6 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800bac6:	697b      	ldr	r3, [r7, #20]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	371c      	adds	r7, #28
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800bad4:	b590      	push	{r4, r7, lr}
 800bad6:	b089      	sub	sp, #36	@ 0x24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800bae0:	2301      	movs	r3, #1
 800bae2:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800bae4:	2304      	movs	r3, #4
 800bae6:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	dd13      	ble.n	800bb18 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	691a      	ldr	r2, [r3, #16]
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	3b01      	subs	r3, #1
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d302      	bcc.n	800bb02 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800bafc:	2300      	movs	r3, #0
 800bafe:	61fb      	str	r3, [r7, #28]
 800bb00:	e00a      	b.n	800bb18 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	4413      	add	r3, r2
 800bb0a:	223a      	movs	r2, #58	@ 0x3a
 800bb0c:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d130      	bne.n	800bb80 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	691a      	ldr	r2, [r3, #16]
 800bb22:	68b9      	ldr	r1, [r7, #8]
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	1acb      	subs	r3, r1, r3
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d827      	bhi.n	800bb7c <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	18d0      	adds	r0, r2, r3
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	005b      	lsls	r3, r3, #1
 800bb42:	4413      	add	r3, r2
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	021b      	lsls	r3, r3, #8
 800bb48:	b21a      	sxth	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6819      	ldr	r1, [r3, #0]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	440b      	add	r3, r1
 800bb56:	881b      	ldrh	r3, [r3, #0]
 800bb58:	0a1b      	lsrs	r3, r3, #8
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	b21b      	sxth	r3, r3
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	461a      	mov	r2, r3
 800bb66:	4621      	mov	r1, r4
 800bb68:	f7ff fee6 	bl	800b938 <uxHexPrintShort>
 800bb6c:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	691a      	ldr	r2, [r3, #16]
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	441a      	add	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	611a      	str	r2, [r3, #16]
 800bb7a:	e001      	b.n	800bb80 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800bb80:	69fb      	ldr	r3, [r7, #28]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3724      	adds	r7, #36	@ 0x24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd90      	pop	{r4, r7, pc}

0800bb8a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b08a      	sub	sp, #40	@ 0x28
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800bb96:	f107 0310 	add.w	r3, r7, #16
 800bb9a:	2214      	movs	r2, #20
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f017 f879 	bl	8022c96 <memset>

    xSet.pusAddress = pvSource;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d92c      	bls.n	800bc08 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800bbae:	f107 0310 	add.w	r3, r7, #16
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7ff ff04 	bl	800b9c0 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800bbb8:	e01f      	b.n	800bbfa <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800bbba:	69fa      	ldr	r2, [r7, #28]
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d10e      	bne.n	800bbe0 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800bbc2:	f107 0310 	add.w	r3, r7, #16
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	6879      	ldr	r1, [r7, #4]
 800bbca:	68b8      	ldr	r0, [r7, #8]
 800bbcc:	f7ff ff41 	bl	800ba52 <prv_ntop6_write_zeros>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d015      	beq.n	800bc02 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800bbd6:	69fa      	ldr	r2, [r7, #28]
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	4413      	add	r3, r2
 800bbdc:	61fb      	str	r3, [r7, #28]
 800bbde:	e00c      	b.n	800bbfa <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800bbe0:	f107 0310 	add.w	r3, r7, #16
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	68b8      	ldr	r0, [r7, #8]
 800bbea:	f7ff ff73 	bl	800bad4 <prv_ntop6_write_short>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d008      	beq.n	800bc06 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	2b07      	cmp	r3, #7
 800bbfe:	dddc      	ble.n	800bbba <FreeRTOS_inet_ntop6+0x30>
 800bc00:	e002      	b.n	800bc08 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800bc02:	bf00      	nop
 800bc04:	e000      	b.n	800bc08 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800bc06:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	2b07      	cmp	r3, #7
 800bc0c:	dc02      	bgt.n	800bc14 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc12:	e006      	b.n	800bc22 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800bc14:	6a3b      	ldr	r3, [r7, #32]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	4413      	add	r3, r2
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800bc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3728      	adds	r7, #40	@ 0x28
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	2233      	movs	r2, #51	@ 0x33
 800bc3a:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	2233      	movs	r2, #51	@ 0x33
 800bc40:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	7b1a      	ldrb	r2, [r3, #12]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	7b5a      	ldrb	r2, [r3, #13]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	7b9a      	ldrb	r2, [r3, #14]
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	7bda      	ldrb	r2, [r3, #15]
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	715a      	strb	r2, [r3, #5]
}
 800bc62:	bf00      	nop
 800bc64:	370c      	adds	r7, #12
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
	...

0800bc70 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b08e      	sub	sp, #56	@ 0x38
 800bc74:	af02      	add	r7, sp, #8
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800bc82:	2336      	movs	r3, #54	@ 0x36
 800bc84:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f000 808c 	beq.w	800bdb6 <usGetExtensionHeaderLength+0x146>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f000 8088 	beq.w	800bdb6 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	7d1b      	ldrb	r3, [r3, #20]
 800bcae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800bcb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fcaf 	bl	800b61c <xGetExtensionOrder>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	dd72      	ble.n	800bdaa <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800bcc4:	e06b      	b.n	800bd9e <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcca:	4413      	add	r3, r2
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800bcd2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800bcd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bcda:	4611      	mov	r1, r2
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7ff fc9d 	bl	800b61c <xGetExtensionOrder>
 800bce2:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800bce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce6:	3301      	adds	r3, #1
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	4413      	add	r3, r2
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	00db      	lsls	r3, r3, #3
 800bcf6:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800bcf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d806      	bhi.n	800bd12 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	69fa      	ldr	r2, [r7, #28]
 800bd08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd0a:	482d      	ldr	r0, [pc, #180]	@ (800bdc0 <usGetExtensionHeaderLength+0x150>)
 800bd0c:	f016 fc9a 	bl	8022644 <lUDPLoggingPrintf>
                    break;
 800bd10:	e051      	b.n	800bdb6 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800bd12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	4413      	add	r3, r2
 800bd18:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800bd1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bd1e:	2b06      	cmp	r3, #6
 800bd20:	d007      	beq.n	800bd32 <usGetExtensionHeaderLength+0xc2>
 800bd22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bd26:	2b11      	cmp	r3, #17
 800bd28:	d003      	beq.n	800bd32 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800bd2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bd2e:	2b3a      	cmp	r3, #58	@ 0x3a
 800bd30:	d10d      	bne.n	800bd4e <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800bd32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bd36:	4619      	mov	r1, r3
 800bd38:	4822      	ldr	r0, [pc, #136]	@ (800bdc4 <usGetExtensionHeaderLength+0x154>)
 800bd3a:	f016 fc83 	bl	8022644 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800bd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd40:	3b36      	subs	r3, #54	@ 0x36
 800bd42:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800bd4a:	701a      	strb	r2, [r3, #0]
                    break;
 800bd4c:	e033      	b.n	800bdb6 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd52:	4413      	add	r3, r2
 800bd54:	781a      	ldrb	r2, [r3, #0]
 800bd56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bd5a:	4611      	mov	r1, r2
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7ff fc5d 	bl	800b61c <xGetExtensionOrder>
 800bd62:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800bd64:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800bd68:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	4613      	mov	r3, r2
 800bd72:	69ba      	ldr	r2, [r7, #24]
 800bd74:	4814      	ldr	r0, [pc, #80]	@ (800bdc8 <usGetExtensionHeaderLength+0x158>)
 800bd76:	f016 fc65 	bl	8022644 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d103      	bne.n	800bd88 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800bd80:	4812      	ldr	r0, [pc, #72]	@ (800bdcc <usGetExtensionHeaderLength+0x15c>)
 800bd82:	f016 fc5f 	bl	8022644 <lUDPLoggingPrintf>
                    break;
 800bd86:	e016      	b.n	800bdb6 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	da03      	bge.n	800bd96 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800bd8e:	4810      	ldr	r0, [pc, #64]	@ (800bdd0 <usGetExtensionHeaderLength+0x160>)
 800bd90:	f016 fc58 	bl	8022644 <lUDPLoggingPrintf>
                    break;
 800bd94:	e00f      	b.n	800bdb6 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800bd96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bd9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800bd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda0:	3308      	adds	r3, #8
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d88e      	bhi.n	800bcc6 <usGetExtensionHeaderLength+0x56>
 800bda8:	e005      	b.n	800bdb6 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bdb0:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3730      	adds	r7, #48	@ 0x30
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	080255ec 	.word	0x080255ec
 800bdc4:	08025634 	.word	0x08025634
 800bdc8:	08025648 	.word	0x08025648
 800bdcc:	08025670 	.word	0x08025670
 800bdd0:	080256d0 	.word	0x080256d0

0800bdd4 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d104      	bne.n	800bdee <vManageSolicitedNodeAddress+0x1a>
 800bde4:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800bde8:	482d      	ldr	r0, [pc, #180]	@ (800bea0 <vManageSolicitedNodeAddress+0xcc>)
 800bdea:	f7f5 fdc7 	bl	800197c <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d104      	bne.n	800be02 <vManageSolicitedNodeAddress+0x2e>
 800bdf8:	f240 1133 	movw	r1, #307	@ 0x133
 800bdfc:	4828      	ldr	r0, [pc, #160]	@ (800bea0 <vManageSolicitedNodeAddress+0xcc>)
 800bdfe:	f7f5 fdbd 	bl	800197c <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	3338      	adds	r3, #56	@ 0x38
 800be06:	4618      	mov	r0, r3
 800be08:	f002 f9c2 	bl	800e190 <xIPv6_GetIPType>
 800be0c:	4603      	mov	r3, r0
 800be0e:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800be10:	7bfb      	ldrb	r3, [r7, #15]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d005      	beq.n	800be22 <vManageSolicitedNodeAddress+0x4e>
 800be16:	7bfb      	ldrb	r3, [r7, #15]
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d002      	beq.n	800be22 <vManageSolicitedNodeAddress+0x4e>
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d138      	bne.n	800be94 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800be22:	2333      	movs	r3, #51	@ 0x33
 800be24:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800be26:	2333      	movs	r3, #51	@ 0x33
 800be28:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800be2a:	23ff      	movs	r3, #255	@ 0xff
 800be2c:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be34:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800be3c:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800be44:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d111      	bne.n	800be70 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d01e      	beq.n	800be96 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800be66:	f107 0108 	add.w	r1, r7, #8
 800be6a:	4610      	mov	r0, r2
 800be6c:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800be6e:	e012      	b.n	800be96 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00c      	beq.n	800be96 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800be8a:	f107 0108 	add.w	r1, r7, #8
 800be8e:	4610      	mov	r0, r2
 800be90:	4798      	blx	r3
}
 800be92:	e000      	b.n	800be96 <vManageSolicitedNodeAddress+0xc2>
            break;
 800be94:	bf00      	nop
}
 800be96:	bf00      	nop
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	080256f4 	.word	0x080256f4

0800bea4 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800beaa:	2000      	movs	r0, #0
 800beac:	f001 fd8c 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 800beb0:	6078      	str	r0, [r7, #4]
 800beb2:	e016      	b.n	800bee2 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800beba:	f003 0304 	and.w	r3, r3, #4
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d009      	beq.n	800bed8 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	3338      	adds	r3, #56	@ 0x38
 800bec8:	4618      	mov	r0, r3
 800beca:	f002 f961 	bl	800e190 <xIPv6_GetIPType>
 800bece:	4603      	mov	r3, r0
 800bed0:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800bed2:	78fb      	ldrb	r3, [r7, #3]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d008      	beq.n	800beea <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800bed8:	6879      	ldr	r1, [r7, #4]
 800beda:	2000      	movs	r0, #0
 800bedc:	f001 fd96 	bl	800da0c <FreeRTOS_NextEndPoint>
 800bee0:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1e5      	bne.n	800beb4 <pxFindLocalEndpoint+0x10>
 800bee8:	e000      	b.n	800beec <pxFindLocalEndpoint+0x48>
                {
                    break;
 800beea:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800beec:	687b      	ldr	r3, [r7, #4]
    }
 800beee:	4618      	mov	r0, r3
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b086      	sub	sp, #24
 800befa:	af00      	add	r7, sp, #0
 800befc:	60f8      	str	r0, [r7, #12]
 800befe:	60b9      	str	r1, [r7, #8]
 800bf00:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f7ff faa8 	bl	800b458 <xIsIPv6AllowedMulticast>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00e      	beq.n	800bf2c <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800bf0e:	68b9      	ldr	r1, [r7, #8]
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f7ff fe8b 	bl	800bc2c <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d004      	beq.n	800bf26 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800bf1c:	f7ff ffc2 	bl	800bea4 <pxFindLocalEndpoint>
 800bf20:	4602      	mov	r2, r0
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800bf26:	2301      	movs	r3, #1
 800bf28:	75fb      	strb	r3, [r7, #23]
 800bf2a:	e001      	b.n	800bf30 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
    }
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
	...

0800bf3c <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b088      	sub	sp, #32
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f7ff ffd2 	bl	800bef6 <prvMACResolve>
 800bf52:	4603      	mov	r3, r0
 800bf54:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800bf56:	7ffb      	ldrb	r3, [r7, #31]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d106      	bne.n	800bf6a <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	68b9      	ldr	r1, [r7, #8]
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f000 f9a9 	bl	800c2b8 <prvNDCacheLookup>
 800bf66:	4603      	mov	r3, r0
 800bf68:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800bf6a:	7ffb      	ldrb	r3, [r7, #31]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d104      	bne.n	800bf7a <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	4619      	mov	r1, r3
 800bf74:	4840      	ldr	r0, [pc, #256]	@ (800c078 <eNDGetCacheEntry+0x13c>)
 800bf76:	f016 fb65 	bl	8022644 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800bf7a:	7ffb      	ldrb	r3, [r7, #31]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d176      	bne.n	800c06e <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f002 f905 	bl	800e190 <xIPv6_GetIPType>
 800bf86:	4603      	mov	r3, r0
 800bf88:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f001 fdae 	bl	800daec <FreeRTOS_FindEndPointOnIP_IPv6>
 800bf90:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00d      	beq.n	800bfb4 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	69ba      	ldr	r2, [r7, #24]
 800bfa2:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800bfa4:	68f9      	ldr	r1, [r7, #12]
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	3338      	adds	r3, #56	@ 0x38
 800bfaa:	461a      	mov	r2, r3
 800bfac:	4833      	ldr	r0, [pc, #204]	@ (800c07c <eNDGetCacheEntry+0x140>)
 800bfae:	f016 fb49 	bl	8022644 <lUDPLoggingPrintf>
 800bfb2:	e05c      	b.n	800c06e <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800bfb4:	7dfb      	ldrb	r3, [r7, #23]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d12b      	bne.n	800c012 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800bfba:	2000      	movs	r0, #0
 800bfbc:	f001 fd04 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 800bfc0:	61b8      	str	r0, [r7, #24]
 800bfc2:	e017      	b.n	800bff4 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	3338      	adds	r3, #56	@ 0x38
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f002 f8e1 	bl	800e190 <xIPv6_GetIPType>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800bfd2:	7dba      	ldrb	r2, [r7, #22]
 800bfd4:	7dfb      	ldrb	r3, [r7, #23]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d107      	bne.n	800bfea <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	68b9      	ldr	r1, [r7, #8]
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f000 f96a 	bl	800c2b8 <prvNDCacheLookup>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	77fb      	strb	r3, [r7, #31]
                            break;
 800bfe8:	e007      	b.n	800bffa <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800bfea:	69b9      	ldr	r1, [r7, #24]
 800bfec:	2000      	movs	r0, #0
 800bfee:	f001 fd0d 	bl	800da0c <FreeRTOS_NextEndPoint>
 800bff2:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1e4      	bne.n	800bfc4 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800bffa:	68f9      	ldr	r1, [r7, #12]
 800bffc:	7ffb      	ldrb	r3, [r7, #31]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d101      	bne.n	800c006 <eNDGetCacheEntry+0xca>
 800c002:	4b1f      	ldr	r3, [pc, #124]	@ (800c080 <eNDGetCacheEntry+0x144>)
 800c004:	e000      	b.n	800c008 <eNDGetCacheEntry+0xcc>
 800c006:	4b1f      	ldr	r3, [pc, #124]	@ (800c084 <eNDGetCacheEntry+0x148>)
 800c008:	461a      	mov	r2, r3
 800c00a:	481f      	ldr	r0, [pc, #124]	@ (800c088 <eNDGetCacheEntry+0x14c>)
 800c00c:	f016 fb1a 	bl	8022644 <lUDPLoggingPrintf>
 800c010:	e02d      	b.n	800c06e <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800c012:	2060      	movs	r0, #96	@ 0x60
 800c014:	f002 f87c 	bl	800e110 <FreeRTOS_FindGateWay>
 800c018:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d026      	beq.n	800c06e <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	335c      	adds	r3, #92	@ 0x5c
 800c026:	2210      	movs	r2, #16
 800c028:	4619      	mov	r1, r3
 800c02a:	f016 fd27 	bl	8022a7c <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	4619      	mov	r1, r3
 800c032:	4816      	ldr	r0, [pc, #88]	@ (800c08c <eNDGetCacheEntry+0x150>)
 800c034:	f016 fb06 	bl	8022644 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	3338      	adds	r3, #56	@ 0x38
 800c03c:	4619      	mov	r1, r3
 800c03e:	4814      	ldr	r0, [pc, #80]	@ (800c090 <eNDGetCacheEntry+0x154>)
 800c040:	f016 fb00 	bl	8022644 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	68b9      	ldr	r1, [r7, #8]
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f000 f935 	bl	800c2b8 <prvNDCacheLookup>
 800c04e:	4603      	mov	r3, r0
 800c050:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d006      	beq.n	800c068 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3338      	adds	r3, #56	@ 0x38
 800c060:	4619      	mov	r1, r3
 800c062:	480c      	ldr	r0, [pc, #48]	@ (800c094 <eNDGetCacheEntry+0x158>)
 800c064:	f016 faee 	bl	8022644 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	69ba      	ldr	r2, [r7, #24]
 800c06c:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800c06e:	7ffb      	ldrb	r3, [r7, #31]
    }
 800c070:	4618      	mov	r0, r3
 800c072:	3720      	adds	r7, #32
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	08025728 	.word	0x08025728
 800c07c:	0802574c 	.word	0x0802574c
 800c080:	08025790 	.word	0x08025790
 800c084:	08025794 	.word	0x08025794
 800c088:	0802579c 	.word	0x0802579c
 800c08c:	080257c4 	.word	0x080257c4
 800c090:	080257e8 	.word	0x080257e8
 800c094:	0802580c 	.word	0x0802580c

0800c098 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800c098:	b5b0      	push	{r4, r5, r7, lr}
 800c09a:	b08e      	sub	sp, #56	@ 0x38
 800c09c:	af04      	add	r7, sp, #16
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800c0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a8:	623b      	str	r3, [r7, #32]
 800c0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ae:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800c0b0:	2397      	movs	r3, #151	@ 0x97
 800c0b2:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0bc:	e033      	b.n	800c126 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c0be:	4a44      	ldr	r2, [pc, #272]	@ (800c1d0 <vNDRefreshCacheEntry+0x138>)
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c2:	015b      	lsls	r3, r3, #5
 800c0c4:	4413      	add	r3, r2
 800c0c6:	331d      	adds	r3, #29
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d106      	bne.n	800c0dc <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800c0ce:	6a3b      	ldr	r3, [r7, #32]
 800c0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d4:	d124      	bne.n	800c120 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d8:	623b      	str	r3, [r7, #32]
 800c0da:	e021      	b.n	800c120 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0de:	015b      	lsls	r3, r3, #5
 800c0e0:	4a3b      	ldr	r2, [pc, #236]	@ (800c1d0 <vNDRefreshCacheEntry+0x138>)
 800c0e2:	4413      	add	r3, r2
 800c0e4:	68b9      	ldr	r1, [r7, #8]
 800c0e6:	2210      	movs	r2, #16
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f017 fc5c 	bl	80239a6 <memcmp>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d102      	bne.n	800c0fa <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f6:	61fb      	str	r3, [r7, #28]
                break;
 800c0f8:	e018      	b.n	800c12c <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800c0fa:	4a35      	ldr	r2, [pc, #212]	@ (800c1d0 <vNDRefreshCacheEntry+0x138>)
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fe:	015b      	lsls	r3, r3, #5
 800c100:	4413      	add	r3, r2
 800c102:	331c      	adds	r3, #28
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	461a      	mov	r2, r3
 800c108:	8b7b      	ldrh	r3, [r7, #26]
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d908      	bls.n	800c120 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800c10e:	4a30      	ldr	r2, [pc, #192]	@ (800c1d0 <vNDRefreshCacheEntry+0x138>)
 800c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c112:	015b      	lsls	r3, r3, #5
 800c114:	4413      	add	r3, r2
 800c116:	331c      	adds	r3, #28
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800c11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11e:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c122:	3301      	adds	r3, #1
 800c124:	627b      	str	r3, [r7, #36]	@ 0x24
 800c126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c128:	2b17      	cmp	r3, #23
 800c12a:	ddc8      	ble.n	800c0be <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	da22      	bge.n	800c178 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800c132:	6a3b      	ldr	r3, [r7, #32]
 800c134:	2b00      	cmp	r3, #0
 800c136:	db02      	blt.n	800c13e <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800c138:	6a3b      	ldr	r3, [r7, #32]
 800c13a:	61fb      	str	r3, [r7, #28]
 800c13c:	e01c      	b.n	800c178 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	461c      	mov	r4, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	785b      	ldrb	r3, [r3, #1]
 800c14c:	461d      	mov	r5, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	789b      	ldrb	r3, [r3, #2]
 800c152:	461a      	mov	r2, r3
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	78db      	ldrb	r3, [r3, #3]
 800c158:	4619      	mov	r1, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	791b      	ldrb	r3, [r3, #4]
 800c15e:	4618      	mov	r0, r3
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	795b      	ldrb	r3, [r3, #5]
 800c164:	9303      	str	r3, [sp, #12]
 800c166:	9002      	str	r0, [sp, #8]
 800c168:	9101      	str	r1, [sp, #4]
 800c16a:	9200      	str	r2, [sp, #0]
 800c16c:	462b      	mov	r3, r5
 800c16e:	4622      	mov	r2, r4
 800c170:	69f9      	ldr	r1, [r7, #28]
 800c172:	4818      	ldr	r0, [pc, #96]	@ (800c1d4 <vNDRefreshCacheEntry+0x13c>)
 800c174:	f016 fa66 	bl	8022644 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	015b      	lsls	r3, r3, #5
 800c17c:	4a14      	ldr	r2, [pc, #80]	@ (800c1d0 <vNDRefreshCacheEntry+0x138>)
 800c17e:	4413      	add	r3, r2
 800c180:	68b9      	ldr	r1, [r7, #8]
 800c182:	2210      	movs	r2, #16
 800c184:	4618      	mov	r0, r3
 800c186:	f016 fc79 	bl	8022a7c <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	015b      	lsls	r3, r3, #5
 800c18e:	3310      	adds	r3, #16
 800c190:	4a0f      	ldr	r2, [pc, #60]	@ (800c1d0 <vNDRefreshCacheEntry+0x138>)
 800c192:	4413      	add	r3, r2
 800c194:	68f9      	ldr	r1, [r7, #12]
 800c196:	2206      	movs	r2, #6
 800c198:	4618      	mov	r0, r3
 800c19a:	f016 fc6f 	bl	8022a7c <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800c19e:	4a0c      	ldr	r2, [pc, #48]	@ (800c1d0 <vNDRefreshCacheEntry+0x138>)
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	015b      	lsls	r3, r3, #5
 800c1a4:	4413      	add	r3, r2
 800c1a6:	3318      	adds	r3, #24
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800c1ac:	4a08      	ldr	r2, [pc, #32]	@ (800c1d0 <vNDRefreshCacheEntry+0x138>)
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	015b      	lsls	r3, r3, #5
 800c1b2:	4413      	add	r3, r2
 800c1b4:	331c      	adds	r3, #28
 800c1b6:	2296      	movs	r2, #150	@ 0x96
 800c1b8:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800c1ba:	4a05      	ldr	r2, [pc, #20]	@ (800c1d0 <vNDRefreshCacheEntry+0x138>)
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	015b      	lsls	r3, r3, #5
 800c1c0:	4413      	add	r3, r2
 800c1c2:	331d      	adds	r3, #29
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	701a      	strb	r2, [r3, #0]
    }
 800c1c8:	bf00      	nop
 800c1ca:	3728      	adds	r7, #40	@ 0x28
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bdb0      	pop	{r4, r5, r7, pc}
 800c1d0:	20001228 	.word	0x20001228
 800c1d4:	08025834 	.word	0x08025834

0800c1d8 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]
 800c1e2:	e05f      	b.n	800c2a4 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800c1e8:	4a32      	ldr	r2, [pc, #200]	@ (800c2b4 <vNDAgeCache+0xdc>)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	015b      	lsls	r3, r3, #5
 800c1ee:	4413      	add	r3, r2
 800c1f0:	331c      	adds	r3, #28
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d052      	beq.n	800c29e <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800c1f8:	4a2e      	ldr	r2, [pc, #184]	@ (800c2b4 <vNDAgeCache+0xdc>)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	015b      	lsls	r3, r3, #5
 800c1fe:	4413      	add	r3, r2
 800c200:	331c      	adds	r3, #28
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	3b01      	subs	r3, #1
 800c206:	b2d9      	uxtb	r1, r3
 800c208:	4a2a      	ldr	r2, [pc, #168]	@ (800c2b4 <vNDAgeCache+0xdc>)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	015b      	lsls	r3, r3, #5
 800c20e:	4413      	add	r3, r2
 800c210:	331c      	adds	r3, #28
 800c212:	460a      	mov	r2, r1
 800c214:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800c216:	4a27      	ldr	r2, [pc, #156]	@ (800c2b4 <vNDAgeCache+0xdc>)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	015b      	lsls	r3, r3, #5
 800c21c:	4413      	add	r3, r2
 800c21e:	331c      	adds	r3, #28
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d109      	bne.n	800c23a <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	015b      	lsls	r3, r3, #5
 800c22a:	4a22      	ldr	r2, [pc, #136]	@ (800c2b4 <vNDAgeCache+0xdc>)
 800c22c:	4413      	add	r3, r2
 800c22e:	2220      	movs	r2, #32
 800c230:	2100      	movs	r1, #0
 800c232:	4618      	mov	r0, r3
 800c234:	f016 fd2f 	bl	8022c96 <memset>
 800c238:	e031      	b.n	800c29e <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c23a:	4a1e      	ldr	r2, [pc, #120]	@ (800c2b4 <vNDAgeCache+0xdc>)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	015b      	lsls	r3, r3, #5
 800c240:	4413      	add	r3, r2
 800c242:	331d      	adds	r3, #29
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d102      	bne.n	800c250 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800c24a:	2301      	movs	r3, #1
 800c24c:	60bb      	str	r3, [r7, #8]
 800c24e:	e009      	b.n	800c264 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800c250:	4a18      	ldr	r2, [pc, #96]	@ (800c2b4 <vNDAgeCache+0xdc>)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	015b      	lsls	r3, r3, #5
 800c256:	4413      	add	r3, r2
 800c258:	331c      	adds	r3, #28
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	2b03      	cmp	r3, #3
 800c25e:	d801      	bhi.n	800c264 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800c260:	2301      	movs	r3, #1
 800c262:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d019      	beq.n	800c29e <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c26a:	2356      	movs	r3, #86	@ 0x56
 800c26c:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800c26e:	2100      	movs	r1, #0
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f00b fad7 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 800c276:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00f      	beq.n	800c29e <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800c27e:	4a0d      	ldr	r2, [pc, #52]	@ (800c2b4 <vNDAgeCache+0xdc>)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	015b      	lsls	r3, r3, #5
 800c284:	4413      	add	r3, r2
 800c286:	3318      	adds	r3, #24
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	015b      	lsls	r3, r3, #5
 800c292:	4a08      	ldr	r2, [pc, #32]	@ (800c2b4 <vNDAgeCache+0xdc>)
 800c294:	4413      	add	r3, r2
 800c296:	4619      	mov	r1, r3
 800c298:	6838      	ldr	r0, [r7, #0]
 800c29a:	f000 f8bb 	bl	800c414 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	60fb      	str	r3, [r7, #12]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2b17      	cmp	r3, #23
 800c2a8:	dd9c      	ble.n	800c1e4 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800c2aa:	bf00      	nop
 800c2ac:	bf00      	nop
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	20001228 	.word	0x20001228

0800c2b8 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800c2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ba:	b08d      	sub	sp, #52	@ 0x34
 800c2bc:	af06      	add	r7, sp, #24
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	617b      	str	r3, [r7, #20]
 800c2cc:	e04a      	b.n	800c364 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c2ce:	4a30      	ldr	r2, [pc, #192]	@ (800c390 <prvNDCacheLookup+0xd8>)
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	015b      	lsls	r3, r3, #5
 800c2d4:	4413      	add	r3, r2
 800c2d6:	331d      	adds	r3, #29
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d03f      	beq.n	800c35e <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	015b      	lsls	r3, r3, #5
 800c2e2:	4a2b      	ldr	r2, [pc, #172]	@ (800c390 <prvNDCacheLookup+0xd8>)
 800c2e4:	4413      	add	r3, r2
 800c2e6:	68f9      	ldr	r1, [r7, #12]
 800c2e8:	2210      	movs	r2, #16
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f017 fb5b 	bl	80239a6 <memcmp>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d133      	bne.n	800c35e <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c2f6:	68b8      	ldr	r0, [r7, #8]
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	015b      	lsls	r3, r3, #5
 800c2fc:	3310      	adds	r3, #16
 800c2fe:	4a24      	ldr	r2, [pc, #144]	@ (800c390 <prvNDCacheLookup+0xd8>)
 800c300:	4413      	add	r3, r2
 800c302:	2206      	movs	r2, #6
 800c304:	4619      	mov	r1, r3
 800c306:	f016 fbb9 	bl	8022a7c <memcpy>
                eReturn = eARPCacheHit;
 800c30a:	2301      	movs	r3, #1
 800c30c:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d007      	beq.n	800c324 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800c314:	4a1e      	ldr	r2, [pc, #120]	@ (800c390 <prvNDCacheLookup+0xd8>)
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	015b      	lsls	r3, r3, #5
 800c31a:	4413      	add	r3, r2
 800c31c:	3318      	adds	r3, #24
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	461e      	mov	r6, r3
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	785b      	ldrb	r3, [r3, #1]
 800c330:	4619      	mov	r1, r3
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	789b      	ldrb	r3, [r3, #2]
 800c336:	4618      	mov	r0, r3
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	78db      	ldrb	r3, [r3, #3]
 800c33c:	461c      	mov	r4, r3
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	791b      	ldrb	r3, [r3, #4]
 800c342:	461d      	mov	r5, r3
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	795b      	ldrb	r3, [r3, #5]
 800c348:	9304      	str	r3, [sp, #16]
 800c34a:	9503      	str	r5, [sp, #12]
 800c34c:	9402      	str	r4, [sp, #8]
 800c34e:	9001      	str	r0, [sp, #4]
 800c350:	9100      	str	r1, [sp, #0]
 800c352:	4633      	mov	r3, r6
 800c354:	6979      	ldr	r1, [r7, #20]
 800c356:	480f      	ldr	r0, [pc, #60]	@ (800c394 <prvNDCacheLookup+0xdc>)
 800c358:	f016 f974 	bl	8022644 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800c35c:	e005      	b.n	800c36a <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	3301      	adds	r3, #1
 800c362:	617b      	str	r3, [r7, #20]
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	2b17      	cmp	r3, #23
 800c368:	ddb1      	ble.n	800c2ce <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800c36a:	7cfb      	ldrb	r3, [r7, #19]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10a      	bne.n	800c386 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	4619      	mov	r1, r3
 800c374:	4808      	ldr	r0, [pc, #32]	@ (800c398 <prvNDCacheLookup+0xe0>)
 800c376:	f016 f965 	bl	8022644 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800c386:	7cfb      	ldrb	r3, [r7, #19]
    }
 800c388:	4618      	mov	r0, r3
 800c38a:	371c      	adds	r7, #28
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c390:	20001228 	.word	0x20001228
 800c394:	08025898 	.word	0x08025898
 800c398:	080258d8 	.word	0x080258d8

0800c39c <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3aa:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3b0:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	3316      	adds	r3, #22
 800c3bc:	2210      	movs	r2, #16
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f016 fb5c 	bl	8022a7c <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	f103 0016 	add.w	r0, r3, #22
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3338      	adds	r3, #56	@ 0x38
 800c3ce:	2210      	movs	r2, #16
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	f016 fb53 	bl	8022a7c <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	021b      	lsls	r3, r3, #8
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	0a1b      	lsrs	r3, r3, #8
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800c404:	2100      	movs	r1, #0
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f7fd fe46 	bl	800a098 <vReturnEthernetFrame>
    }
 800c40c:	bf00      	nop
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800c414:	b5b0      	push	{r4, r5, r7, lr}
 800c416:	b090      	sub	sp, #64	@ 0x40
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c422:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800c428:	2300      	movs	r3, #0
 800c42a:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800c42c:	2300      	movs	r3, #0
 800c42e:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800c430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 80c1 	beq.w	800c5ba <vNDSendNeighbourSolicitation+0x1a6>
 800c438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c43a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c43e:	f003 0304 	and.w	r3, r3, #4
 800c442:	b2db      	uxtb	r3, r3
 800c444:	2b00      	cmp	r3, #0
 800c446:	f000 80b8 	beq.w	800c5ba <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c44a:	2356      	movs	r3, #86	@ 0x56
 800c44c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800c44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c454:	429a      	cmp	r2, r3
 800c456:	d909      	bls.n	800c46c <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800c458:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c45a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c45c:	f7fe f9ce 	bl	800a7fc <pxDuplicateNetworkBufferWithDescriptor>
 800c460:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c462:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c464:	f00b fa46 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800c468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800c46c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f000 80a3 	beq.w	800c5ba <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800c474:	2320      	movs	r3, #32
 800c476:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800c478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c47c:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c480:	3336      	adds	r3, #54	@ 0x36
 800c482:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800c484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c488:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800c48a:	2333      	movs	r3, #51	@ 0x33
 800c48c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800c48e:	2333      	movs	r3, #51	@ 0x33
 800c490:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800c492:	23ff      	movs	r3, #255	@ 0xff
 800c494:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	7b5b      	ldrb	r3, [r3, #13]
 800c49a:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	7b9b      	ldrb	r3, [r3, #14]
 800c4a0:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	7bdb      	ldrb	r3, [r3, #15]
 800c4a6:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4aa:	3306      	adds	r3, #6
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	f107 0308 	add.w	r3, r7, #8
 800c4b2:	6818      	ldr	r0, [r3, #0]
 800c4b4:	6010      	str	r0, [r2, #0]
 800c4b6:	889b      	ldrh	r3, [r3, #4]
 800c4b8:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c4ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4be:	33e8      	adds	r3, #232	@ 0xe8
 800c4c0:	2206      	movs	r2, #6
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	f016 fada 	bl	8022a7c <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c4d0:	731a      	strb	r2, [r3, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c4d8:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800c4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4dc:	2260      	movs	r2, #96	@ 0x60
 800c4de:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	741a      	strb	r2, [r3, #16]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800c4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	021b      	lsls	r3, r3, #8
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4fa:	0a1b      	lsrs	r3, r3, #8
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	4313      	orrs	r3, r2
 800c500:	b29a      	uxth	r2, r3
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c508:	223a      	movs	r2, #58	@ 0x3a
 800c50a:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800c50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c50e:	22ff      	movs	r2, #255	@ 0xff
 800c510:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c514:	f103 0016 	add.w	r0, r3, #22
 800c518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c51a:	3338      	adds	r3, #56	@ 0x38
 800c51c:	2210      	movs	r2, #16
 800c51e:	4619      	mov	r1, r3
 800c520:	f016 faac 	bl	8022a7c <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800c524:	f107 0310 	add.w	r3, r7, #16
 800c528:	2210      	movs	r2, #16
 800c52a:	2100      	movs	r1, #0
 800c52c:	4618      	mov	r0, r3
 800c52e:	f016 fbb2 	bl	8022c96 <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800c532:	23ff      	movs	r3, #255	@ 0xff
 800c534:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800c536:	2302      	movs	r3, #2
 800c538:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800c53a:	2301      	movs	r3, #1
 800c53c:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800c53e:	23ff      	movs	r3, #255	@ 0xff
 800c540:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	7b5b      	ldrb	r3, [r3, #13]
 800c546:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	7b9b      	ldrb	r3, [r3, #14]
 800c54c:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	7bdb      	ldrb	r3, [r3, #15]
 800c552:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c556:	3326      	adds	r3, #38	@ 0x26
 800c558:	461d      	mov	r5, r3
 800c55a:	f107 0410 	add.w	r4, r7, #16
 800c55e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c560:	6028      	str	r0, [r5, #0]
 800c562:	6069      	str	r1, [r5, #4]
 800c564:	60aa      	str	r2, [r5, #8]
 800c566:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800c568:	2220      	movs	r2, #32
 800c56a:	2100      	movs	r1, #0
 800c56c:	6a38      	ldr	r0, [r7, #32]
 800c56e:	f016 fb92 	bl	8022c96 <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800c572:	6a3b      	ldr	r3, [r7, #32]
 800c574:	2287      	movs	r2, #135	@ 0x87
 800c576:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c578:	6a3b      	ldr	r3, [r7, #32]
 800c57a:	3308      	adds	r3, #8
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	2210      	movs	r2, #16
 800c580:	4618      	mov	r0, r3
 800c582:	f016 fa7b 	bl	8022a7c <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	2201      	movs	r2, #1
 800c58a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800c58c:	6a3b      	ldr	r3, [r7, #32]
 800c58e:	2201      	movs	r2, #1
 800c590:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	f103 001a 	add.w	r0, r3, #26
 800c598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c59a:	33e8      	adds	r3, #232	@ 0xe8
 800c59c:	2206      	movs	r2, #6
 800c59e:	4619      	mov	r1, r3
 800c5a0:	f016 fa6c 	bl	8022a7c <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	709a      	strb	r2, [r3, #2]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c5ae:	2101      	movs	r1, #1
 800c5b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c5b2:	f7fd fd71 	bl	800a098 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800c5ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d005      	beq.n	800c5cc <vNDSendNeighbourSolicitation+0x1b8>
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d102      	bne.n	800c5cc <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c5c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c5c8:	f00b f994 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800c5cc:	bf00      	nop
 800c5ce:	3740      	adds	r7, #64	@ 0x40
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bdb0      	pop	{r4, r5, r7, pc}

0800c5d4 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	2b04      	cmp	r3, #4
 800c5e2:	dc29      	bgt.n	800c638 <pcMessageType+0x64>
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	dc19      	bgt.n	800c61c <pcMessageType+0x48>
 800c5e8:	e049      	b.n	800c67e <pcMessageType+0xaa>
 800c5ea:	3b80      	subs	r3, #128	@ 0x80
 800c5ec:	2b08      	cmp	r3, #8
 800c5ee:	d846      	bhi.n	800c67e <pcMessageType+0xaa>
 800c5f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f8 <pcMessageType+0x24>)
 800c5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f6:	bf00      	nop
 800c5f8:	0800c65b 	.word	0x0800c65b
 800c5fc:	0800c661 	.word	0x0800c661
 800c600:	0800c67f 	.word	0x0800c67f
 800c604:	0800c67f 	.word	0x0800c67f
 800c608:	0800c67f 	.word	0x0800c67f
 800c60c:	0800c667 	.word	0x0800c667
 800c610:	0800c66d 	.word	0x0800c66d
 800c614:	0800c673 	.word	0x0800c673
 800c618:	0800c679 	.word	0x0800c679
 800c61c:	3b01      	subs	r3, #1
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d82d      	bhi.n	800c67e <pcMessageType+0xaa>
 800c622:	a201      	add	r2, pc, #4	@ (adr r2, 800c628 <pcMessageType+0x54>)
 800c624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c628:	0800c643 	.word	0x0800c643
 800c62c:	0800c649 	.word	0x0800c649
 800c630:	0800c64f 	.word	0x0800c64f
 800c634:	0800c655 	.word	0x0800c655
 800c638:	2b88      	cmp	r3, #136	@ 0x88
 800c63a:	dc20      	bgt.n	800c67e <pcMessageType+0xaa>
 800c63c:	2b80      	cmp	r3, #128	@ 0x80
 800c63e:	dad4      	bge.n	800c5ea <pcMessageType+0x16>
 800c640:	e01d      	b.n	800c67e <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800c642:	4b14      	ldr	r3, [pc, #80]	@ (800c694 <pcMessageType+0xc0>)
 800c644:	60fb      	str	r3, [r7, #12]
                    break;
 800c646:	e01d      	b.n	800c684 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800c648:	4b13      	ldr	r3, [pc, #76]	@ (800c698 <pcMessageType+0xc4>)
 800c64a:	60fb      	str	r3, [r7, #12]
                    break;
 800c64c:	e01a      	b.n	800c684 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800c64e:	4b13      	ldr	r3, [pc, #76]	@ (800c69c <pcMessageType+0xc8>)
 800c650:	60fb      	str	r3, [r7, #12]
                    break;
 800c652:	e017      	b.n	800c684 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800c654:	4b12      	ldr	r3, [pc, #72]	@ (800c6a0 <pcMessageType+0xcc>)
 800c656:	60fb      	str	r3, [r7, #12]
                    break;
 800c658:	e014      	b.n	800c684 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800c65a:	4b12      	ldr	r3, [pc, #72]	@ (800c6a4 <pcMessageType+0xd0>)
 800c65c:	60fb      	str	r3, [r7, #12]
                    break;
 800c65e:	e011      	b.n	800c684 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800c660:	4b11      	ldr	r3, [pc, #68]	@ (800c6a8 <pcMessageType+0xd4>)
 800c662:	60fb      	str	r3, [r7, #12]
                    break;
 800c664:	e00e      	b.n	800c684 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800c666:	4b11      	ldr	r3, [pc, #68]	@ (800c6ac <pcMessageType+0xd8>)
 800c668:	60fb      	str	r3, [r7, #12]
                    break;
 800c66a:	e00b      	b.n	800c684 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800c66c:	4b10      	ldr	r3, [pc, #64]	@ (800c6b0 <pcMessageType+0xdc>)
 800c66e:	60fb      	str	r3, [r7, #12]
                    break;
 800c670:	e008      	b.n	800c684 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800c672:	4b10      	ldr	r3, [pc, #64]	@ (800c6b4 <pcMessageType+0xe0>)
 800c674:	60fb      	str	r3, [r7, #12]
                    break;
 800c676:	e005      	b.n	800c684 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800c678:	4b0f      	ldr	r3, [pc, #60]	@ (800c6b8 <pcMessageType+0xe4>)
 800c67a:	60fb      	str	r3, [r7, #12]
                    break;
 800c67c:	e002      	b.n	800c684 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800c67e:	4b0f      	ldr	r3, [pc, #60]	@ (800c6bc <pcMessageType+0xe8>)
 800c680:	60fb      	str	r3, [r7, #12]
                    break;
 800c682:	bf00      	nop
            }

            return pcReturn;
 800c684:	68fb      	ldr	r3, [r7, #12]
        }
 800c686:	4618      	mov	r0, r3
 800c688:	3714      	adds	r7, #20
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	080259a0 	.word	0x080259a0
 800c698:	080259b4 	.word	0x080259b4
 800c69c:	080259c4 	.word	0x080259c4
 800c6a0:	080259d4 	.word	0x080259d4
 800c6a4:	080259e8 	.word	0x080259e8
 800c6a8:	080259f8 	.word	0x080259f8
 800c6ac:	08025a04 	.word	0x08025a04
 800c6b0:	08025a10 	.word	0x08025a10
 800c6b4:	08025a1c 	.word	0x08025a1c
 800c6b8:	08025a2c 	.word	0x08025a2c
 800c6bc:	08025a3c 	.word	0x08025a3c

0800c6c0 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b088      	sub	sp, #32
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800c6c8:	4b19      	ldr	r3, [pc, #100]	@ (800c730 <prvCheckWaitingBuffer+0x70>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6ce:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	330e      	adds	r3, #14
 800c6d4:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	3308      	adds	r3, #8
 800c6dc:	2210      	movs	r2, #16
 800c6de:	4619      	mov	r1, r3
 800c6e0:	f017 f961 	bl	80239a6 <memcmp>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d11d      	bne.n	800c726 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800c6ee:	4811      	ldr	r0, [pc, #68]	@ (800c734 <prvCheckWaitingBuffer+0x74>)
 800c6f0:	f015 ffa8 	bl	8022644 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800c6f8:	4b0d      	ldr	r3, [pc, #52]	@ (800c730 <prvCheckWaitingBuffer+0x70>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800c6fe:	f107 030c 	add.w	r3, r7, #12
 800c702:	6979      	ldr	r1, [r7, #20]
 800c704:	4618      	mov	r0, r3
 800c706:	f7fd fa13 	bl	8009b30 <xSendEventStructToIPTask>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d004      	beq.n	800c71a <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800c710:	4b07      	ldr	r3, [pc, #28]	@ (800c730 <prvCheckWaitingBuffer+0x70>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4618      	mov	r0, r3
 800c716:	f00b f8ed 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800c71a:	4b05      	ldr	r3, [pc, #20]	@ (800c730 <prvCheckWaitingBuffer+0x70>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800c720:	2000      	movs	r0, #0
 800c722:	f7fd fffb 	bl	800a71c <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800c726:	bf00      	nop
 800c728:	3720      	adds	r7, #32
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	2000119c 	.word	0x2000119c
 800c734:	08025a4c 	.word	0x08025a4c

0800c738 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800c738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c73c:	b09e      	sub	sp, #120	@ 0x78
 800c73e:	af02      	add	r7, sp, #8
 800c740:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c746:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c748:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c74a:	3336      	adds	r3, #54	@ 0x36
 800c74c:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c752:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800c754:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	2b80      	cmp	r3, #128	@ 0x80
 800c75a:	d01e      	beq.n	800c79a <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800c75c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	4698      	mov	r8, r3
 800c762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	4618      	mov	r0, r3
 800c768:	f7ff ff34 	bl	800c5d4 <pcMessageType>
 800c76c:	4606      	mov	r6, r0
 800c76e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c770:	f103 0516 	add.w	r5, r3, #22
 800c774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c776:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800c77a:	f107 030c 	add.w	r3, r7, #12
 800c77e:	2228      	movs	r2, #40	@ 0x28
 800c780:	4619      	mov	r1, r3
 800c782:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c784:	f001 fd5c 	bl	800e240 <pcEndpointName>
 800c788:	4603      	mov	r3, r0
 800c78a:	9301      	str	r3, [sp, #4]
 800c78c:	9400      	str	r4, [sp, #0]
 800c78e:	462b      	mov	r3, r5
 800c790:	4632      	mov	r2, r6
 800c792:	4641      	mov	r1, r8
 800c794:	48a7      	ldr	r0, [pc, #668]	@ (800ca34 <prvProcessICMPMessage_IPv6+0x2fc>)
 800c796:	f015 ff55 	bl	8022644 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800c79a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c79c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c7a0:	f003 0304 	and.w	r3, r3, #4
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f000 813e 	beq.w	800ca28 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c7ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	dc1d      	bgt.n	800c7f0 <prvProcessICMPMessage_IPv6+0xb8>
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f300 8130 	bgt.w	800ca1a <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800c7ba:	e130      	b.n	800ca1e <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c7bc:	3b80      	subs	r3, #128	@ 0x80
 800c7be:	2b08      	cmp	r3, #8
 800c7c0:	f200 812d 	bhi.w	800ca1e <prvProcessICMPMessage_IPv6+0x2e6>
 800c7c4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7cc <prvProcessICMPMessage_IPv6+0x94>)
 800c7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ca:	bf00      	nop
 800c7cc:	0800c7fd 	.word	0x0800c7fd
 800c7d0:	0800c845 	.word	0x0800c845
 800c7d4:	0800ca1f 	.word	0x0800ca1f
 800c7d8:	0800ca1f 	.word	0x0800ca1f
 800c7dc:	0800ca1f 	.word	0x0800ca1f
 800c7e0:	0800ca1f 	.word	0x0800ca1f
 800c7e4:	0800ca13 	.word	0x0800ca13
 800c7e8:	0800c8bb 	.word	0x0800c8bb
 800c7ec:	0800c9cb 	.word	0x0800c9cb
 800c7f0:	2b88      	cmp	r3, #136	@ 0x88
 800c7f2:	f300 8114 	bgt.w	800ca1e <prvProcessICMPMessage_IPv6+0x2e6>
 800c7f6:	2b80      	cmp	r3, #128	@ 0x80
 800c7f8:	dae0      	bge.n	800c7bc <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800c7fa:	e110      	b.n	800ca1e <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800c7fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7fe:	8a5b      	ldrh	r3, [r3, #18]
 800c800:	b29b      	uxth	r3, r3
 800c802:	021b      	lsls	r3, r3, #8
 800c804:	b21a      	sxth	r2, r3
 800c806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c808:	8a5b      	ldrh	r3, [r3, #18]
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	0a1b      	lsrs	r3, r3, #8
 800c80e:	b29b      	uxth	r3, r3
 800c810:	b21b      	sxth	r3, r3
 800c812:	4313      	orrs	r3, r2
 800c814:	b21b      	sxth	r3, r3
 800c816:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800c818:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c81a:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c81e:	3336      	adds	r3, #54	@ 0x36
 800c820:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c826:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c828:	429a      	cmp	r2, r3
 800c82a:	d903      	bls.n	800c834 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800c82c:	4882      	ldr	r0, [pc, #520]	@ (800ca38 <prvProcessICMPMessage_IPv6+0x300>)
 800c82e:	f015 ff09 	bl	8022644 <lUDPLoggingPrintf>
                           break;
 800c832:	e0f9      	b.n	800ca28 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800c834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c836:	2281      	movs	r2, #129	@ 0x81
 800c838:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800c83a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff fdad 	bl	800c39c <prvReturnICMP_IPv6>
                   break;
 800c842:	e0f1      	b.n	800ca28 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800c844:	2300      	movs	r3, #0
 800c846:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800c84a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c84c:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800c84e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c850:	8a5b      	ldrh	r3, [r3, #18]
 800c852:	b29b      	uxth	r3, r3
 800c854:	021b      	lsls	r3, r3, #8
 800c856:	b21a      	sxth	r2, r3
 800c858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c85a:	8a5b      	ldrh	r3, [r3, #18]
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	0a1b      	lsrs	r3, r3, #8
 800c860:	b29b      	uxth	r3, r3
 800c862:	b21b      	sxth	r3, r3
 800c864:	4313      	orrs	r3, r2
 800c866:	b21b      	sxth	r3, r3
 800c868:	b29b      	uxth	r3, r3
 800c86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800c86c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c86e:	3b08      	subs	r3, #8
 800c870:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800c872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c874:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800c876:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c878:	3308      	adds	r3, #8
 800c87a:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c87c:	2300      	movs	r3, #0
 800c87e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c880:	e00d      	b.n	800c89e <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800c882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	2b78      	cmp	r3, #120	@ 0x78
 800c888:	d003      	beq.n	800c892 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800c88a:	2302      	movs	r3, #2
 800c88c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800c890:	e009      	b.n	800c8a6 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800c892:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c894:	3301      	adds	r3, #1
 800c896:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c89a:	3301      	adds	r3, #1
 800c89c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c89e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c8a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d3ed      	bcc.n	800c882 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800c8a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8a8:	889b      	ldrh	r3, [r3, #4]
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7f5 f918 	bl	8001ae8 <vApplicationPingReplyHook>
                           break;
 800c8b8:	e0b6      	b.n	800ca28 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800c8ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8bc:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	f001 f9cd 	bl	800dc68 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800c8ce:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800c8d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800c8d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8d8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c8da:	e005      	b.n	800c8e8 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800c8dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8de:	3308      	adds	r3, #8
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4856      	ldr	r0, [pc, #344]	@ (800ca3c <prvProcessICMPMessage_IPv6+0x304>)
 800c8e4:	f015 feae 	bl	8022644 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800c8e8:	2320      	movs	r3, #32
 800c8ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c8ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8ee:	3336      	adds	r3, #54	@ 0x36
 800c8f0:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d903      	bls.n	800c904 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800c8fc:	484e      	ldr	r0, [pc, #312]	@ (800ca38 <prvProcessICMPMessage_IPv6+0x300>)
 800c8fe:	f015 fea1 	bl	8022644 <lUDPLoggingPrintf>
                           break;
 800c902:	e091      	b.n	800ca28 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c904:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c906:	f103 0008 	add.w	r0, r3, #8
 800c90a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c90c:	3338      	adds	r3, #56	@ 0x38
 800c90e:	2210      	movs	r2, #16
 800c910:	4619      	mov	r1, r3
 800c912:	f017 f848 	bl	80239a6 <memcmp>
 800c916:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800c918:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c91a:	f103 0108 	add.w	r1, r3, #8
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c922:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d101      	bne.n	800c930 <prvProcessICMPMessage_IPv6+0x1f8>
 800c92c:	4b44      	ldr	r3, [pc, #272]	@ (800ca40 <prvProcessICMPMessage_IPv6+0x308>)
 800c92e:	e000      	b.n	800c932 <prvProcessICMPMessage_IPv6+0x1fa>
 800c930:	4b44      	ldr	r3, [pc, #272]	@ (800ca44 <prvProcessICMPMessage_IPv6+0x30c>)
 800c932:	4845      	ldr	r0, [pc, #276]	@ (800ca48 <prvProcessICMPMessage_IPv6+0x310>)
 800c934:	f015 fe86 	bl	8022644 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800c938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d171      	bne.n	800ca22 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800c93e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c940:	2288      	movs	r2, #136	@ 0x88
 800c942:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800c944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c946:	2200      	movs	r2, #0
 800c948:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800c94a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c94c:	2200      	movs	r2, #0
 800c94e:	711a      	strb	r2, [r3, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	715a      	strb	r2, [r3, #5]
 800c954:	2200      	movs	r2, #0
 800c956:	719a      	strb	r2, [r3, #6]
 800c958:	2200      	movs	r2, #0
 800c95a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c95e:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800c960:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	061a      	lsls	r2, r3, #24
 800c966:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	021b      	lsls	r3, r3, #8
 800c96c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c970:	431a      	orrs	r2, r3
 800c972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	0a1b      	lsrs	r3, r3, #8
 800c978:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c97c:	431a      	orrs	r2, r3
 800c97e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	0e1b      	lsrs	r3, r3, #24
 800c984:	431a      	orrs	r2, r3
 800c986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c988:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800c98a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c98c:	2202      	movs	r2, #2
 800c98e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800c990:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c992:	2201      	movs	r2, #1
 800c994:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c998:	f103 001a 	add.w	r0, r3, #26
 800c99c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c99e:	33e8      	adds	r3, #232	@ 0xe8
 800c9a0:	2206      	movs	r2, #6
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	f016 f86a 	bl	8022a7c <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800c9a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9aa:	22ff      	movs	r2, #255	@ 0xff
 800c9ac:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800c9ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9b0:	f103 0008 	add.w	r0, r3, #8
 800c9b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c9b6:	3338      	adds	r3, #56	@ 0x38
 800c9b8:	2210      	movs	r2, #16
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	f016 f85e 	bl	8022a7c <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800c9c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f7ff fcea 	bl	800c39c <prvReturnICMP_IPv6>
                   break;
 800c9c8:	e02b      	b.n	800ca22 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800c9ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9cc:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800c9d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9d2:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800c9d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	f7ff fb5e 	bl	800c098 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800c9dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9de:	3308      	adds	r3, #8
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	481a      	ldr	r0, [pc, #104]	@ (800ca4c <prvProcessICMPMessage_IPv6+0x314>)
 800c9e4:	f015 fe2e 	bl	8022644 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fa89 	bl	800cf00 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800c9ee:	4b18      	ldr	r3, [pc, #96]	@ (800ca50 <prvProcessICMPMessage_IPv6+0x318>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d017      	beq.n	800ca26 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800c9f6:	4b16      	ldr	r3, [pc, #88]	@ (800ca50 <prvProcessICMPMessage_IPv6+0x318>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7fd fc4c 	bl	800a298 <uxIPHeaderSizePacket>
 800ca00:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800ca02:	2b28      	cmp	r3, #40	@ 0x28
 800ca04:	d10f      	bne.n	800ca26 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800ca06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca08:	3308      	adds	r3, #8
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7ff fe58 	bl	800c6c0 <prvCheckWaitingBuffer>
                    break;
 800ca10:	e009      	b.n	800ca26 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fb9a 	bl	800d14c <vReceiveRA>
                            break;
 800ca18:	e006      	b.n	800ca28 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800ca1a:	bf00      	nop
 800ca1c:	e004      	b.n	800ca28 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800ca1e:	bf00      	nop
 800ca20:	e002      	b.n	800ca28 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800ca22:	bf00      	nop
 800ca24:	e000      	b.n	800ca28 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800ca26:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800ca28:	2300      	movs	r3, #0
    }
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3770      	adds	r7, #112	@ 0x70
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca34:	08025a5c 	.word	0x08025a5c
 800ca38:	08025a94 	.word	0x08025a94
 800ca3c:	08025aa0 	.word	0x08025aa0
 800ca40:	08025ad0 	.word	0x08025ad0
 800ca44:	08025ad8 	.word	0x08025ad8
 800ca48:	08025ae0 	.word	0x08025ae0
 800ca4c:	08025b04 	.word	0x08025b04
 800ca50:	2000119c 	.word	0x2000119c

0800ca54 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800ca54:	b5b0      	push	{r4, r5, r7, lr}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800ca5c:	2356      	movs	r3, #86	@ 0x56
 800ca5e:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800ca60:	2100      	movs	r1, #0
 800ca62:	69f8      	ldr	r0, [r7, #28]
 800ca64:	f00a fede 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 800ca68:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 80b1 	beq.w	800cbd4 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	3314      	adds	r3, #20
 800ca76:	2210      	movs	r2, #16
 800ca78:	2100      	movs	r1, #0
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f016 f90b 	bl	8022c96 <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ca8c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d104      	bne.n	800ca9e <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800ca94:	f240 419e 	movw	r1, #1182	@ 0x49e
 800ca98:	4850      	ldr	r0, [pc, #320]	@ (800cbdc <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800ca9a:	f7f4 ff6f 	bl	800197c <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa2:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	3336      	adds	r3, #54	@ 0x36
 800caa8:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	4a4c      	ldr	r2, [pc, #304]	@ (800cbe0 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800caae:	6810      	ldr	r0, [r2, #0]
 800cab0:	6018      	str	r0, [r3, #0]
 800cab2:	8892      	ldrh	r2, [r2, #4]
 800cab4:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	1d98      	adds	r0, r3, #6
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	33e8      	adds	r3, #232	@ 0xe8
 800cabe:	2206      	movs	r2, #6
 800cac0:	4619      	mov	r1, r3
 800cac2:	f015 ffdb 	bl	8022a7c <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	2200      	movs	r2, #0
 800caca:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800cace:	731a      	strb	r2, [r3, #12]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800cad6:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	2260      	movs	r2, #96	@ 0x60
 800cadc:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	2200      	movs	r2, #0
 800cae2:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	2200      	movs	r2, #0
 800cae8:	741a      	strb	r2, [r3, #16]
 800caea:	2200      	movs	r2, #0
 800caec:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	2200      	movs	r2, #0
 800caf2:	749a      	strb	r2, [r3, #18]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f042 0220 	orr.w	r2, r2, #32
 800cafa:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	223a      	movs	r2, #58	@ 0x3a
 800cb00:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	22ff      	movs	r2, #255	@ 0xff
 800cb06:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	f103 0016 	add.w	r0, r3, #22
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	3338      	adds	r3, #56	@ 0x38
 800cb12:	2210      	movs	r2, #16
 800cb14:	4619      	mov	r1, r3
 800cb16:	f015 ffb1 	bl	8022a7c <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	3326      	adds	r3, #38	@ 0x26
 800cb1e:	4a31      	ldr	r2, [pc, #196]	@ (800cbe4 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800cb20:	461c      	mov	r4, r3
 800cb22:	4615      	mov	r5, r2
 800cb24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb26:	6020      	str	r0, [r4, #0]
 800cb28:	6061      	str	r1, [r4, #4]
 800cb2a:	60a2      	str	r2, [r4, #8]
 800cb2c:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800cb2e:	2320      	movs	r3, #32
 800cb30:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2288      	movs	r2, #136	@ 0x88
 800cb36:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2200      	movs	r2, #0
 800cb42:	711a      	strb	r2, [r3, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	715a      	strb	r2, [r3, #5]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	719a      	strb	r2, [r3, #6]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800cb52:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	061a      	lsls	r2, r3, #24
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	021b      	lsls	r3, r3, #8
 800cb60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cb64:	431a      	orrs	r2, r3
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	0a1b      	lsrs	r3, r3, #8
 800cb6c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cb70:	431a      	orrs	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	0e1b      	lsrs	r3, r3, #24
 800cb78:	431a      	orrs	r2, r3
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2202      	movs	r2, #2
 800cb82:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2201      	movs	r2, #1
 800cb88:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f103 001a 	add.w	r0, r3, #26
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	33e8      	adds	r3, #232	@ 0xe8
 800cb94:	2206      	movs	r2, #6
 800cb96:	4619      	mov	r1, r3
 800cb98:	f015 ff70 	bl	8022a7c <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	22ff      	movs	r2, #255	@ 0xff
 800cba0:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f103 0008 	add.w	r0, r3, #8
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3338      	adds	r3, #56	@ 0x38
 800cbac:	2210      	movs	r2, #16
 800cbae:	4619      	mov	r1, r3
 800cbb0:	f015 ff64 	bl	8022a7c <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	709a      	strb	r2, [r3, #2]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	69b9      	ldr	r1, [r7, #24]
 800cbd0:	6978      	ldr	r0, [r7, #20]
 800cbd2:	4798      	blx	r3
        }
    }
 800cbd4:	bf00      	nop
 800cbd6:	3720      	adds	r7, #32
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bdb0      	pop	{r4, r5, r7, pc}
 800cbdc:	08025b1c 	.word	0x08025b1c
 800cbe0:	08027d9c 	.word	0x08027d9c
 800cbe4:	08027d8c 	.word	0x08027d8c

0800cbe8 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b090      	sub	sp, #64	@ 0x40
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
 800cbf4:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d017      	beq.n	800cc30 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800cc00:	2300      	movs	r3, #0
 800cc02:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc04:	e010      	b.n	800cc28 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800cc06:	f107 0214 	add.w	r2, r7, #20
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	4413      	add	r3, r2
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7f4 ff7d 	bl	8001b10 <xApplicationGetRandomNumber>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d102      	bne.n	800cc22 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800cc20:	e00d      	b.n	800cc3e <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800cc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc24:	3301      	adds	r3, #1
 800cc26:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	ddeb      	ble.n	800cc06 <FreeRTOS_CreateIPv6Address+0x1e>
 800cc2e:	e006      	b.n	800cc3e <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800cc30:	f107 0314 	add.w	r3, r7, #20
 800cc34:	2210      	movs	r2, #16
 800cc36:	2100      	movs	r1, #0
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f016 f82c 	bl	8022c96 <memset>
        }

        if( xResult == pdPASS )
 800cc3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d167      	bne.n	800cd14 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d004      	beq.n	800cc54 <FreeRTOS_CreateIPv6Address+0x6c>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2b80      	cmp	r3, #128	@ 0x80
 800cc4e:	d801      	bhi.n	800cc54 <FreeRTOS_CreateIPv6Address+0x6c>
 800cc50:	2301      	movs	r3, #1
 800cc52:	e000      	b.n	800cc56 <FreeRTOS_CreateIPv6Address+0x6e>
 800cc54:	2300      	movs	r3, #0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d104      	bne.n	800cc64 <FreeRTOS_CreateIPv6Address+0x7c>
 800cc5a:	f240 5105 	movw	r1, #1285	@ 0x505
 800cc5e:	4830      	ldr	r0, [pc, #192]	@ (800cd20 <FreeRTOS_CreateIPv6Address+0x138>)
 800cc60:	f7f4 fe8c 	bl	800197c <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b07      	cmp	r3, #7
 800cc68:	d907      	bls.n	800cc7a <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	68b9      	ldr	r1, [r7, #8]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	3307      	adds	r3, #7
 800cc72:	08db      	lsrs	r3, r3, #3
 800cc74:	461a      	mov	r2, r3
 800cc76:	f015 ff01 	bl	8022a7c <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800cc7a:	f107 0314 	add.w	r3, r7, #20
 800cc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	08db      	lsrs	r3, r3, #3
 800cc84:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f003 0307 	and.w	r3, r3, #7
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d034      	beq.n	800ccfa <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f003 0307 	and.w	r3, r3, #7
 800cc96:	f1c3 0308 	rsb	r3, r3, #8
 800cc9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca0:	fa02 f303 	lsl.w	r3, r2, r3
 800cca4:	3b01      	subs	r3, #1
 800cca6:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800cca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	43db      	mvns	r3, r3
 800ccae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb6:	4413      	add	r3, r2
 800ccb8:	781a      	ldrb	r2, [r3, #0]
 800ccba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	b2d9      	uxtb	r1, r3
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc6:	4413      	add	r3, r2
 800ccc8:	460a      	mov	r2, r1
 800ccca:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd0:	4413      	add	r3, r2
 800ccd2:	781a      	ldrb	r2, [r3, #0]
 800ccd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccd6:	7819      	ldrb	r1, [r3, #0]
 800ccd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	400b      	ands	r3, r1
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	4313      	orrs	r3, r2
 800cce2:	b2d9      	uxtb	r1, r3
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce8:	4413      	add	r3, r2
 800ccea:	460a      	mov	r2, r1
 800ccec:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800ccee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfc:	2b0f      	cmp	r3, #15
 800ccfe:	d809      	bhi.n	800cd14 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd04:	18d0      	adds	r0, r2, r3
 800cd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd08:	f1c3 0310 	rsb	r3, r3, #16
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd10:	f015 feb4 	bl	8022a7c <memcpy>
            }
        }

        return xResult;
 800cd14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800cd16:	4618      	mov	r0, r3
 800cd18:	3740      	adds	r7, #64	@ 0x40
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	08025b1c 	.word	0x08025b1c

0800cd24 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 fe48 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 800cd38:	60b8      	str	r0, [r7, #8]
 800cd3a:	e01a      	b.n	800cd72 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cd42:	2bfe      	cmp	r3, #254	@ 0xfe
 800cd44:	d110      	bne.n	800cd68 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800cd4c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800cd50:	2b80      	cmp	r3, #128	@ 0x80
 800cd52:	d109      	bne.n	800cd68 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cd54:	6838      	ldr	r0, [r7, #0]
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	3338      	adds	r3, #56	@ 0x38
 800cd5a:	2210      	movs	r2, #16
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	f015 fe8d 	bl	8022a7c <memcpy>
                xResult = pdPASS;
 800cd62:	2301      	movs	r3, #1
 800cd64:	60fb      	str	r3, [r7, #12]
                break;
 800cd66:	e007      	b.n	800cd78 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800cd68:	68b9      	ldr	r1, [r7, #8]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fe4e 	bl	800da0c <FreeRTOS_NextEndPoint>
 800cd70:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1e1      	bne.n	800cd3c <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800cd78:	68fb      	ldr	r3, [r7, #12]
    }
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800cd84:	b5b0      	push	{r4, r5, r7, lr}
 800cd86:	b090      	sub	sp, #64	@ 0x40
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd92:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800cd94:	233e      	movs	r3, #62	@ 0x3e
 800cd96:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800cda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d103      	bne.n	800cdae <vNDSendRouterSolicitation+0x2a>
 800cda6:	218f      	movs	r1, #143	@ 0x8f
 800cda8:	4852      	ldr	r0, [pc, #328]	@ (800cef4 <vNDSendRouterSolicitation+0x170>)
 800cdaa:	f7f4 fde7 	bl	800197c <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800cdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cdb4:	f003 0304 	and.w	r3, r3, #4
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d103      	bne.n	800cdc6 <vNDSendRouterSolicitation+0x42>
 800cdbe:	2190      	movs	r1, #144	@ 0x90
 800cdc0:	484c      	ldr	r0, [pc, #304]	@ (800cef4 <vNDSendRouterSolicitation+0x170>)
 800cdc2:	f7f4 fddb 	bl	800197c <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800cdc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cdcc:	f107 020c 	add.w	r2, r7, #12
 800cdd0:	4611      	mov	r1, r2
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7ff ffa6 	bl	800cd24 <xGetLinkLocalAddress>
 800cdd8:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800cdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10a      	bne.n	800cdf6 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800cde0:	4845      	ldr	r0, [pc, #276]	@ (800cef8 <vNDSendRouterSolicitation+0x174>)
 800cde2:	f015 fc2f 	bl	8022644 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800cde6:	f107 030c 	add.w	r3, r7, #12
 800cdea:	2210      	movs	r2, #16
 800cdec:	2100      	movs	r1, #0
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f015 ff51 	bl	8022c96 <memset>
 800cdf4:	e005      	b.n	800ce02 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800cdf6:	f107 030c 	add.w	r3, r7, #12
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	483f      	ldr	r0, [pc, #252]	@ (800cefc <vNDSendRouterSolicitation+0x178>)
 800cdfe:	f015 fc21 	bl	8022644 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800ce02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d909      	bls.n	800ce20 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800ce0c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ce0e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ce10:	f7fd fcf4 	bl	800a7fc <pxDuplicateNetworkBufferWithDescriptor>
 800ce14:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800ce16:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ce18:	f00a fd6c 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800ce1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800ce20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d062      	beq.n	800ceec <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800ce26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce2a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800ce2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2e:	3336      	adds	r3, #54	@ 0x36
 800ce30:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800ce32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce36:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800ce38:	f107 031c 	add.w	r3, r7, #28
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	4619      	mov	r1, r3
 800ce40:	6838      	ldr	r0, [r7, #0]
 800ce42:	f7ff f87b 	bl	800bf3c <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800ce46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce48:	3306      	adds	r3, #6
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	f107 031c 	add.w	r3, r7, #28
 800ce50:	6818      	ldr	r0, [r3, #0]
 800ce52:	6010      	str	r0, [r2, #0]
 800ce54:	889b      	ldrh	r3, [r3, #4]
 800ce56:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800ce58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce5c:	33e8      	adds	r3, #232	@ 0xe8
 800ce5e:	2206      	movs	r2, #6
 800ce60:	4619      	mov	r1, r3
 800ce62:	f015 fe0b 	bl	8022a7c <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800ce66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800ce6e:	731a      	strb	r2, [r3, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800ce76:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800ce78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7a:	2260      	movs	r2, #96	@ 0x60
 800ce7c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800ce7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce80:	2200      	movs	r2, #0
 800ce82:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800ce84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce86:	2200      	movs	r2, #0
 800ce88:	741a      	strb	r2, [r3, #16]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800ce8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce90:	2200      	movs	r2, #0
 800ce92:	749a      	strb	r2, [r3, #18]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f042 0208 	orr.w	r2, r2, #8
 800ce9a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800ce9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9e:	223a      	movs	r2, #58	@ 0x3a
 800cea0:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800cea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea4:	22ff      	movs	r2, #255	@ 0xff
 800cea6:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceaa:	3316      	adds	r3, #22
 800ceac:	461d      	mov	r5, r3
 800ceae:	f107 040c 	add.w	r4, r7, #12
 800ceb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ceb4:	6028      	str	r0, [r5, #0]
 800ceb6:	6069      	str	r1, [r5, #4]
 800ceb8:	60aa      	str	r2, [r5, #8]
 800ceba:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cebe:	3326      	adds	r3, #38	@ 0x26
 800cec0:	6839      	ldr	r1, [r7, #0]
 800cec2:	2210      	movs	r2, #16
 800cec4:	4618      	mov	r0, r3
 800cec6:	f015 fdd9 	bl	8022a7c <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800ceca:	2208      	movs	r2, #8
 800cecc:	2100      	movs	r1, #0
 800cece:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ced0:	f015 fee1 	bl	8022c96 <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800ced4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced6:	2285      	movs	r2, #133	@ 0x85
 800ced8:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800ceda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cedc:	2200      	movs	r2, #0
 800cede:	709a      	strb	r2, [r3, #2]
 800cee0:	2200      	movs	r2, #0
 800cee2:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800cee4:	2101      	movs	r1, #1
 800cee6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cee8:	f7fd f8d6 	bl	800a098 <vReturnEthernetFrame>
        }
    }
 800ceec:	bf00      	nop
 800ceee:	3740      	adds	r7, #64	@ 0x40
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bdb0      	pop	{r4, r5, r7, pc}
 800cef4:	08025b48 	.word	0x08025b48
 800cef8:	08025b74 	.word	0x08025b74
 800cefc:	08025b9c 	.word	0x08025b9c

0800cf00 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf0c:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf12:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	3336      	adds	r3, #54	@ 0x36
 800cf18:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800cf1a:	6938      	ldr	r0, [r7, #16]
 800cf1c:	f000 fd54 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 800cf20:	6178      	str	r0, [r7, #20]
 800cf22:	e028      	b.n	800cf76 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cf2a:	f003 0302 	and.w	r3, r3, #2
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d01b      	beq.n	800cf6c <vReceiveNA+0x6c>
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800cf3a:	2b03      	cmp	r3, #3
 800cf3c:	d116      	bne.n	800cf6c <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	3308      	adds	r3, #8
 800cf48:	2210      	movs	r2, #16
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	f016 fd2b 	bl	80239a6 <memcmp>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d10a      	bne.n	800cf6c <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800cf5c:	f043 0302 	orr.w	r3, r3, #2
 800cf60:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800cf64:	2164      	movs	r1, #100	@ 0x64
 800cf66:	6978      	ldr	r0, [r7, #20]
 800cf68:	f7fd fb3e 	bl	800a5e8 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800cf6c:	6979      	ldr	r1, [r7, #20]
 800cf6e:	6938      	ldr	r0, [r7, #16]
 800cf70:	f000 fd4c 	bl	800da0c <FreeRTOS_NextEndPoint>
 800cf74:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1d3      	bne.n	800cf24 <vReceiveNA+0x24>
                }
            }
        }
    }
 800cf7c:	bf00      	nop
 800cf7e:	bf00      	nop
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
	...

0800cf88 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800cf88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf8a:	b091      	sub	sp, #68	@ 0x44
 800cf8c:	af04      	add	r7, sp, #16
 800cf8e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800cf90:	2300      	movs	r3, #0
 800cf92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800cf94:	2310      	movs	r3, #16
 800cf96:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800cf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9a:	3336      	adds	r3, #54	@ 0x36
 800cf9c:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cfac:	6a3b      	ldr	r3, [r7, #32]
 800cfae:	4413      	add	r3, r2
 800cfb0:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800cfb6:	e0b2      	b.n	800d11e <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800cfb8:	69ba      	ldr	r2, [r7, #24]
 800cfba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfbc:	4413      	add	r3, r2
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800cfc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	69ba      	ldr	r2, [r7, #24]
 800cfc8:	4413      	add	r3, r2
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	00db      	lsls	r3, r3, #3
 800cfd2:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d103      	bne.n	800cfe2 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800cfda:	4856      	ldr	r0, [pc, #344]	@ (800d134 <vReceiveRA_ReadReply+0x1ac>)
 800cfdc:	f015 fb32 	bl	8022644 <lUDPLoggingPrintf>
                break;
 800cfe0:	e0a3      	b.n	800d12a <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800cfe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	69fa      	ldr	r2, [r7, #28]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d208      	bcs.n	800d000 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800cfee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	4413      	add	r3, r2
 800cff4:	69fa      	ldr	r2, [r7, #28]
 800cff6:	4619      	mov	r1, r3
 800cff8:	484f      	ldr	r0, [pc, #316]	@ (800d138 <vReceiveRA_ReadReply+0x1b0>)
 800cffa:	f015 fb23 	bl	8022644 <lUDPLoggingPrintf>
                break;
 800cffe:	e094      	b.n	800d12a <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800d000:	7dfb      	ldrb	r3, [r7, #23]
 800d002:	3b01      	subs	r3, #1
 800d004:	2b04      	cmp	r3, #4
 800d006:	d87f      	bhi.n	800d108 <vReceiveRA_ReadReply+0x180>
 800d008:	a201      	add	r2, pc, #4	@ (adr r2, 800d010 <vReceiveRA_ReadReply+0x88>)
 800d00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d00e:	bf00      	nop
 800d010:	0800d025 	.word	0x0800d025
 800d014:	0800d115 	.word	0x0800d115
 800d018:	0800d07f 	.word	0x0800d07f
 800d01c:	0800d115 	.word	0x0800d115
 800d020:	0800d0ef 	.word	0x0800d0ef
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800d024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d026:	3302      	adds	r3, #2
 800d028:	69ba      	ldr	r2, [r7, #24]
 800d02a:	4413      	add	r3, r2
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	461c      	mov	r4, r3
 800d030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d032:	3303      	adds	r3, #3
 800d034:	69ba      	ldr	r2, [r7, #24]
 800d036:	4413      	add	r3, r2
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	461d      	mov	r5, r3
 800d03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03e:	3304      	adds	r3, #4
 800d040:	69ba      	ldr	r2, [r7, #24]
 800d042:	4413      	add	r3, r2
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	461e      	mov	r6, r3
 800d048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04a:	3305      	adds	r3, #5
 800d04c:	69ba      	ldr	r2, [r7, #24]
 800d04e:	4413      	add	r3, r2
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	4619      	mov	r1, r3
 800d054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d056:	3306      	adds	r3, #6
 800d058:	69ba      	ldr	r2, [r7, #24]
 800d05a:	4413      	add	r3, r2
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	4618      	mov	r0, r3
 800d060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d062:	3307      	adds	r3, #7
 800d064:	69ba      	ldr	r2, [r7, #24]
 800d066:	4413      	add	r3, r2
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	9302      	str	r3, [sp, #8]
 800d06c:	9001      	str	r0, [sp, #4]
 800d06e:	9100      	str	r1, [sp, #0]
 800d070:	4633      	mov	r3, r6
 800d072:	462a      	mov	r2, r5
 800d074:	4621      	mov	r1, r4
 800d076:	4831      	ldr	r0, [pc, #196]	@ (800d13c <vReceiveRA_ReadReply+0x1b4>)
 800d078:	f015 fae4 	bl	8022644 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800d07c:	e04b      	b.n	800d116 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800d07e:	69ba      	ldr	r2, [r7, #24]
 800d080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d082:	4413      	add	r3, r2
 800d084:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800d086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d088:	789b      	ldrb	r3, [r3, #2]
 800d08a:	4618      	mov	r0, r3
 800d08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	061a      	lsls	r2, r3, #24
 800d092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	021b      	lsls	r3, r3, #8
 800d098:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d09c:	431a      	orrs	r2, r3
 800d09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	0a1b      	lsrs	r3, r3, #8
 800d0a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d0a8:	431a      	orrs	r2, r3
 800d0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	0e1b      	lsrs	r3, r3, #24
 800d0b0:	ea42 0103 	orr.w	r1, r2, r3
 800d0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	061a      	lsls	r2, r3, #24
 800d0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0bc:	689b      	ldr	r3, [r3, #8]
 800d0be:	021b      	lsls	r3, r3, #8
 800d0c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d0c4:	431a      	orrs	r2, r3
 800d0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	0a1b      	lsrs	r3, r3, #8
 800d0cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d0d0:	431a      	orrs	r2, r3
 800d0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	0e1b      	lsrs	r3, r3, #24
 800d0d8:	431a      	orrs	r2, r3
 800d0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0dc:	3310      	adds	r3, #16
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	460a      	mov	r2, r1
 800d0e4:	4601      	mov	r1, r0
 800d0e6:	4816      	ldr	r0, [pc, #88]	@ (800d140 <vReceiveRA_ReadReply+0x1b8>)
 800d0e8:	f015 faac 	bl	8022644 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800d0ec:	e013      	b.n	800d116 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800d0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	69ba      	ldr	r2, [r7, #24]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fd fe60 	bl	800adbc <ulChar2u32>
 800d0fc:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800d0fe:	68b9      	ldr	r1, [r7, #8]
 800d100:	4810      	ldr	r0, [pc, #64]	@ (800d144 <vReceiveRA_ReadReply+0x1bc>)
 800d102:	f015 fa9f 	bl	8022644 <lUDPLoggingPrintf>
                   }
                   break;
 800d106:	e006      	b.n	800d116 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800d108:	7dfb      	ldrb	r3, [r7, #23]
 800d10a:	4619      	mov	r1, r3
 800d10c:	480e      	ldr	r0, [pc, #56]	@ (800d148 <vReceiveRA_ReadReply+0x1c0>)
 800d10e:	f015 fa99 	bl	8022644 <lUDPLoggingPrintf>
                    break;
 800d112:	e000      	b.n	800d116 <vReceiveRA_ReadReply+0x18e>
                    break;
 800d114:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800d116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	4413      	add	r3, r2
 800d11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800d11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d120:	3301      	adds	r3, #1
 800d122:	69fa      	ldr	r2, [r7, #28]
 800d124:	429a      	cmp	r2, r3
 800d126:	f63f af47 	bhi.w	800cfb8 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800d12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800d12c:	4618      	mov	r0, r3
 800d12e:	3734      	adds	r7, #52	@ 0x34
 800d130:	46bd      	mov	sp, r7
 800d132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d134:	08025bb0 	.word	0x08025bb0
 800d138:	08025be4 	.word	0x08025be4
 800d13c:	08025c08 	.word	0x08025c08
 800d140:	08025c34 	.word	0x08025c34
 800d144:	08025c5c 	.word	0x08025c5c
 800d148:	08025c6c 	.word	0x08025c6c

0800d14c <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d14e:	b08d      	sub	sp, #52	@ 0x34
 800d150:	af04      	add	r7, sp, #16
 800d152:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d158:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800d15a:	2300      	movs	r3, #0
 800d15c:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800d15e:	2310      	movs	r3, #16
 800d160:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	3336      	adds	r3, #54	@ 0x36
 800d166:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d903      	bls.n	800d17a <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800d172:	485b      	ldr	r0, [pc, #364]	@ (800d2e0 <vReceiveRA+0x194>)
 800d174:	f015 fa66 	bl	8022644 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800d178:	e0ae      	b.n	800d2d8 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	3336      	adds	r3, #54	@ 0x36
 800d17e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	461c      	mov	r4, r3
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	785b      	ldrb	r3, [r3, #1]
 800d18a:	461d      	mov	r5, r3
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	885b      	ldrh	r3, [r3, #2]
 800d190:	b29b      	uxth	r3, r3
 800d192:	021b      	lsls	r3, r3, #8
 800d194:	b21a      	sxth	r2, r3
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	885b      	ldrh	r3, [r3, #2]
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	0a1b      	lsrs	r3, r3, #8
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	b21b      	sxth	r3, r3
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	b21b      	sxth	r3, r3
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	461e      	mov	r6, r3
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	791b      	ldrb	r3, [r3, #4]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	795b      	ldrb	r3, [r3, #5]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	88db      	ldrh	r3, [r3, #6]
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	021b      	lsls	r3, r3, #8
 800d1be:	b21a      	sxth	r2, r3
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	88db      	ldrh	r3, [r3, #6]
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	0a1b      	lsrs	r3, r3, #8
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	b21b      	sxth	r3, r3
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	b21b      	sxth	r3, r3
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	9302      	str	r3, [sp, #8]
 800d1d4:	9001      	str	r0, [sp, #4]
 800d1d6:	9100      	str	r1, [sp, #0]
 800d1d8:	4633      	mov	r3, r6
 800d1da:	462a      	mov	r2, r5
 800d1dc:	4621      	mov	r1, r4
 800d1de:	4841      	ldr	r0, [pc, #260]	@ (800d2e4 <vReceiveRA+0x198>)
 800d1e0:	f015 fa30 	bl	8022644 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	88db      	ldrh	r3, [r3, #6]
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d074      	beq.n	800d2d8 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff feca 	bl	800cf88 <vReceiveRA_ReadReply>
 800d1f4:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d104      	bne.n	800d208 <vReceiveRA+0xbc>
 800d1fe:	f240 118b 	movw	r1, #395	@ 0x18b
 800d202:	4839      	ldr	r0, [pc, #228]	@ (800d2e8 <vReceiveRA+0x19c>)
 800d204:	f7f4 fbba 	bl	800197c <vAssertCalled>
                if( pxPrefixOption != NULL )
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d064      	beq.n	800d2d8 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d212:	4618      	mov	r0, r3
 800d214:	f000 fbd8 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 800d218:	61f8      	str	r0, [r7, #28]
 800d21a:	e05a      	b.n	800d2d2 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d222:	f003 0302 	and.w	r3, r3, #2
 800d226:	b2db      	uxtb	r3, r3
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d04b      	beq.n	800d2c4 <vReceiveRA+0x178>
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d232:	2b01      	cmp	r3, #1
 800d234:	d146      	bne.n	800d2c4 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	789b      	ldrb	r3, [r3, #2]
 800d23a:	461a      	mov	r2, r3
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	3310      	adds	r3, #16
 800d24a:	2210      	movs	r2, #16
 800d24c:	4619      	mov	r1, r3
 800d24e:	f015 fc15 	bl	8022a7c <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	3316      	adds	r3, #22
 800d25c:	2210      	movs	r2, #16
 800d25e:	4619      	mov	r1, r3
 800d260:	f015 fc0c 	bl	8022a7c <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800d264:	69fa      	ldr	r2, [r7, #28]
 800d266:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d26a:	f043 0301 	orr.w	r3, r3, #1
 800d26e:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	2200      	movs	r2, #0
 800d276:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	061a      	lsls	r2, r3, #24
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	021b      	lsls	r3, r3, #8
 800d286:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d28a:	431a      	orrs	r2, r3
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	0a1b      	lsrs	r3, r3, #8
 800d292:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d296:	431a      	orrs	r2, r3
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	0e1b      	lsrs	r3, r3, #24
 800d29e:	431a      	orrs	r2, r3
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d2a6:	69fa      	ldr	r2, [r7, #28]
 800d2a8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d2ac:	f043 0302 	orr.w	r3, r3, #2
 800d2b0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800d2bc:	69f9      	ldr	r1, [r7, #28]
 800d2be:	2000      	movs	r0, #0
 800d2c0:	f000 f9b6 	bl	800d630 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c8:	69f9      	ldr	r1, [r7, #28]
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f000 fb9e 	bl	800da0c <FreeRTOS_NextEndPoint>
 800d2d0:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1a1      	bne.n	800d21c <vReceiveRA+0xd0>
    }
 800d2d8:	bf00      	nop
 800d2da:	3724      	adds	r7, #36	@ 0x24
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e0:	08025c90 	.word	0x08025c90
 800d2e4:	08025cc0 	.word	0x08025cc0
 800d2e8:	08025b48 	.word	0x08025b48

0800d2ec <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800d2ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2f0:	b088      	sub	sp, #32
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6178      	str	r0, [r7, #20]
 800d2f6:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d2f8:	6939      	ldr	r1, [r7, #16]
 800d2fa:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800d2fc:	6979      	ldr	r1, [r7, #20]
 800d2fe:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d302:	2901      	cmp	r1, #1
 800d304:	d133      	bne.n	800d36e <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d30c:	1c5a      	adds	r2, r3, #1
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d804      	bhi.n	800d328 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d326:	e0bf      	b.n	800d4a8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800d328:	4862      	ldr	r0, [pc, #392]	@ (800d4b4 <xRAProcess_HandleWaitStates+0x1c8>)
 800d32a:	f015 f98b 	bl	8022644 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	3390      	adds	r3, #144	@ 0x90
 800d338:	2258      	movs	r2, #88	@ 0x58
 800d33a:	4619      	mov	r1, r3
 800d33c:	f015 fb9e 	bl	8022a7c <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800d340:	697a      	ldr	r2, [r7, #20]
 800d342:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d346:	f36f 0300 	bfc	r3, #0, #1
 800d34a:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	2200      	movs	r2, #0
 800d352:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d356:	697a      	ldr	r2, [r7, #20]
 800d358:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d35c:	f043 0302 	orr.w	r3, r3, #2
 800d360:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	2202      	movs	r2, #2
 800d368:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d36c:	e09c      	b.n	800d4a8 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800d36e:	6979      	ldr	r1, [r7, #20]
 800d370:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d374:	2903      	cmp	r1, #3
 800d376:	f040 8097 	bne.w	800d4a8 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800d37a:	6979      	ldr	r1, [r7, #20]
 800d37c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d380:	f001 0102 	and.w	r1, r1, #2
 800d384:	b2c9      	uxtb	r1, r1
 800d386:	2900      	cmp	r1, #0
 800d388:	d00b      	beq.n	800d3a2 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	2202      	movs	r2, #2
 800d396:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d39a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d39e:	61fb      	str	r3, [r7, #28]
 800d3a0:	e082      	b.n	800d4a8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800d3a2:	6979      	ldr	r1, [r7, #20]
 800d3a4:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800d3a8:	2902      	cmp	r1, #2
 800d3aa:	d80e      	bhi.n	800d3ca <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d3b2:	1c5a      	adds	r2, r3, #1
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	2202      	movs	r2, #2
 800d3be:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d3c2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d3c6:	61fb      	str	r3, [r7, #28]
 800d3c8:	e06e      	b.n	800d4a8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800d3ca:	6979      	ldr	r1, [r7, #20]
 800d3cc:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d3d0:	f001 0101 	and.w	r1, r1, #1
 800d3d4:	b2c9      	uxtb	r1, r1
 800d3d6:	2900      	cmp	r1, #0
 800d3d8:	d057      	beq.n	800d48a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800d3da:	6979      	ldr	r1, [r7, #20]
 800d3dc:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	4688      	mov	r8, r1
 800d3e4:	4681      	mov	r9, r0
 800d3e6:	4640      	mov	r0, r8
 800d3e8:	4649      	mov	r1, r9
 800d3ea:	f04f 0a00 	mov.w	sl, #0
 800d3ee:	f04f 0b00 	mov.w	fp, #0
 800d3f2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800d3f6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800d3fa:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800d3fe:	4650      	mov	r0, sl
 800d400:	4659      	mov	r1, fp
 800d402:	ebb0 0208 	subs.w	r2, r0, r8
 800d406:	eb61 0309 	sbc.w	r3, r1, r9
 800d40a:	f04f 0000 	mov.w	r0, #0
 800d40e:	f04f 0100 	mov.w	r1, #0
 800d412:	0259      	lsls	r1, r3, #9
 800d414:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800d418:	0250      	lsls	r0, r2, #9
 800d41a:	4602      	mov	r2, r0
 800d41c:	460b      	mov	r3, r1
 800d41e:	eb12 0408 	adds.w	r4, r2, r8
 800d422:	eb43 0509 	adc.w	r5, r3, r9
 800d426:	f04f 0200 	mov.w	r2, #0
 800d42a:	f04f 0300 	mov.w	r3, #0
 800d42e:	01ab      	lsls	r3, r5, #6
 800d430:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800d434:	01a2      	lsls	r2, r4, #6
 800d436:	1b11      	subs	r1, r2, r4
 800d438:	6039      	str	r1, [r7, #0]
 800d43a:	eb63 0305 	sbc.w	r3, r3, r5
 800d43e:	607b      	str	r3, [r7, #4]
 800d440:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d444:	460b      	mov	r3, r1
 800d446:	eb13 0308 	adds.w	r3, r3, r8
 800d44a:	60bb      	str	r3, [r7, #8]
 800d44c:	4613      	mov	r3, r2
 800d44e:	eb43 0309 	adc.w	r3, r3, r9
 800d452:	60fb      	str	r3, [r7, #12]
 800d454:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d458:	f04f 0300 	mov.w	r3, #0
 800d45c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d460:	f7f2 ffa6 	bl	80003b0 <__aeabi_uldivmod>
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	4613      	mov	r3, r2
 800d46a:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	2204      	movs	r2, #4
 800d470:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d480:	461a      	mov	r2, r3
 800d482:	480d      	ldr	r0, [pc, #52]	@ (800d4b8 <xRAProcess_HandleWaitStates+0x1cc>)
 800d484:	f015 f8de 	bl	8022644 <lUDPLoggingPrintf>
 800d488:	e00b      	b.n	800d4a2 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	2206      	movs	r2, #6
 800d48e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	3338      	adds	r3, #56	@ 0x38
 800d496:	4619      	mov	r1, r3
 800d498:	4808      	ldr	r0, [pc, #32]	@ (800d4bc <xRAProcess_HandleWaitStates+0x1d0>)
 800d49a:	f015 f8d3 	bl	8022644 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800d4a2:	6978      	ldr	r0, [r7, #20]
 800d4a4:	f7fc fa08 	bl	80098b8 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800d4a8:	69fb      	ldr	r3, [r7, #28]
    }
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3720      	adds	r7, #32
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d4b4:	08025d04 	.word	0x08025d04
 800d4b8:	08025d2c 	.word	0x08025d2c
 800d4bc:	08025d6c 	.word	0x08025d6c

0800d4c0 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b08c      	sub	sp, #48	@ 0x30
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d4d4:	2b06      	cmp	r3, #6
 800d4d6:	f200 808c 	bhi.w	800d5f2 <xRAProcess_HandleOtherStates+0x132>
 800d4da:	a201      	add	r2, pc, #4	@ (adr r2, 800d4e0 <xRAProcess_HandleOtherStates+0x20>)
 800d4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e0:	0800d4fd 	.word	0x0800d4fd
 800d4e4:	0800d5f3 	.word	0x0800d5f3
 800d4e8:	0800d55f 	.word	0x0800d55f
 800d4ec:	0800d5f3 	.word	0x0800d5f3
 800d4f0:	0800d5db 	.word	0x0800d5db
 800d4f4:	0800d5e5 	.word	0x0800d5e5
 800d4f8:	0800d5f3 	.word	0x0800d5f3
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800d4fc:	f107 030c 	add.w	r3, r7, #12
 800d500:	2210      	movs	r2, #16
 800d502:	2100      	movs	r1, #0
 800d504:	4618      	mov	r0, r3
 800d506:	f015 fbc6 	bl	8022c96 <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800d50a:	23ff      	movs	r3, #255	@ 0xff
 800d50c:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800d50e:	2302      	movs	r3, #2
 800d510:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800d512:	2302      	movs	r3, #2
 800d514:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800d516:	233e      	movs	r3, #62	@ 0x3e
 800d518:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d51a:	2100      	movs	r1, #0
 800d51c:	6a38      	ldr	r0, [r7, #32]
 800d51e:	f00a f981 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 800d522:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d008      	beq.n	800d53c <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800d530:	f107 030c 	add.w	r3, r7, #12
 800d534:	4619      	mov	r1, r3
 800d536:	69f8      	ldr	r0, [r7, #28]
 800d538:	f7ff fc24 	bl	800cd84 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d542:	3301      	adds	r3, #1
 800d544:	2203      	movs	r2, #3
 800d546:	4619      	mov	r1, r3
 800d548:	482d      	ldr	r0, [pc, #180]	@ (800d600 <xRAProcess_HandleOtherStates+0x140>)
 800d54a:	f015 f87b 	bl	8022644 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800d54e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d552:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d55c:	e04a      	b.n	800d5f4 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d564:	f003 0302 	and.w	r3, r3, #2
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d014      	beq.n	800d598 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d574:	f36f 0341 	bfc	r3, #1, #1
 800d578:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d58c:	2301      	movs	r3, #1
 800d58e:	f7ff fb2b 	bl	800cbe8 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800d592:	481c      	ldr	r0, [pc, #112]	@ (800d604 <xRAProcess_HandleOtherStates+0x144>)
 800d594:	f015 f856 	bl	8022644 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	3338      	adds	r3, #56	@ 0x38
 800d59c:	4619      	mov	r1, r3
 800d59e:	481a      	ldr	r0, [pc, #104]	@ (800d608 <xRAProcess_HandleOtherStates+0x148>)
 800d5a0:	f015 f850 	bl	8022644 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800d5a4:	2356      	movs	r3, #86	@ 0x56
 800d5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5ac:	f00a f93a 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 800d5b0:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d008      	beq.n	800d5ca <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	3338      	adds	r3, #56	@ 0x38
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d5c6:	f7fe ff25 	bl	800c414 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d5ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2203      	movs	r2, #3
 800d5d4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d5d8:	e00c      	b.n	800d5f4 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2205      	movs	r2, #5
 800d5de:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800d5e2:	e007      	b.n	800d5f4 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 f811 	bl	800d60c <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d5ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d5ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800d5f0:	e000      	b.n	800d5f4 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800d5f2:	bf00      	nop
        }

        return uxNewReloadTime;
 800d5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3730      	adds	r7, #48	@ 0x30
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	08025da8 	.word	0x08025da8
 800d604:	08025ddc 	.word	0x08025ddc
 800d608:	08025e00 	.word	0x08025e00

0800d60c <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800d624:	bf00      	nop
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800d630:	b590      	push	{r4, r7, lr}
 800d632:	b089      	sub	sp, #36	@ 0x24
 800d634:	af04      	add	r7, sp, #16
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800d63a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d63e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d104      	bne.n	800d650 <vRAProcess+0x20>
 800d646:	f240 2189 	movw	r1, #649	@ 0x289
 800d64a:	4828      	ldr	r0, [pc, #160]	@ (800d6ec <vRAProcess+0xbc>)
 800d64c:	f7f4 f996 	bl	800197c <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d656:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d002      	beq.n	800d664 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800d65e:	6838      	ldr	r0, [r7, #0]
 800d660:	f7ff ffd4 	bl	800d60c <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800d664:	68f9      	ldr	r1, [r7, #12]
 800d666:	6838      	ldr	r0, [r7, #0]
 800d668:	f7ff fe40 	bl	800d2ec <xRAProcess_HandleWaitStates>
 800d66c:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800d66e:	68f9      	ldr	r1, [r7, #12]
 800d670:	6838      	ldr	r0, [r7, #0]
 800d672:	f7ff ff25 	bl	800d4c0 <xRAProcess_HandleOtherStates>
 800d676:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d684:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d688:	b2db      	uxtb	r3, r3
 800d68a:	461c      	mov	r4, r3
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d692:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d696:	b2db      	uxtb	r3, r3
 800d698:	4618      	mov	r0, r3
 800d69a:	7afb      	ldrb	r3, [r7, #11]
 800d69c:	683a      	ldr	r2, [r7, #0]
 800d69e:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800d6a2:	9202      	str	r2, [sp, #8]
 800d6a4:	9301      	str	r3, [sp, #4]
 800d6a6:	9000      	str	r0, [sp, #0]
 800d6a8:	4623      	mov	r3, r4
 800d6aa:	460a      	mov	r2, r1
 800d6ac:	6879      	ldr	r1, [r7, #4]
 800d6ae:	4810      	ldr	r0, [pc, #64]	@ (800d6f0 <vRAProcess+0xc0>)
 800d6b0:	f014 ffc8 	bl	8022644 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00d      	beq.n	800d6d6 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	4a0d      	ldr	r2, [pc, #52]	@ (800d6f4 <vRAProcess+0xc4>)
 800d6be:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c2:	099b      	lsrs	r3, r3, #6
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	480c      	ldr	r0, [pc, #48]	@ (800d6f8 <vRAProcess+0xc8>)
 800d6c8:	f014 ffbc 	bl	8022644 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800d6cc:	68f9      	ldr	r1, [r7, #12]
 800d6ce:	6838      	ldr	r0, [r7, #0]
 800d6d0:	f7fc ff8a 	bl	800a5e8 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800d6d4:	e006      	b.n	800d6e4 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800d6d6:	4809      	ldr	r0, [pc, #36]	@ (800d6fc <vRAProcess+0xcc>)
 800d6d8:	f014 ffb4 	bl	8022644 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800d6dc:	2100      	movs	r1, #0
 800d6de:	6838      	ldr	r0, [r7, #0]
 800d6e0:	f7fd f836 	bl	800a750 <vIPSetDHCP_RATimerEnableState>
    }
 800d6e4:	bf00      	nop
 800d6e6:	3714      	adds	r7, #20
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd90      	pop	{r4, r7, pc}
 800d6ec:	08025b48 	.word	0x08025b48
 800d6f0:	08025e28 	.word	0x08025e28
 800d6f4:	10624dd3 	.word	0x10624dd3
 800d6f8:	08025e74 	.word	0x08025e74
 800d6fc:	08025e8c 	.word	0x08025e8c

0800d700 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	607a      	str	r2, [r7, #4]
 800d70c:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d002      	beq.n	800d71a <FreeRTOS_FillEndPoint+0x1a>
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d105      	bne.n	800d726 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	68f9      	ldr	r1, [r7, #12]
 800d71e:	483f      	ldr	r0, [pc, #252]	@ (800d81c <FreeRTOS_FillEndPoint+0x11c>)
 800d720:	f014 ff90 	bl	8022644 <lUDPLoggingPrintf>
 800d724:	e075      	b.n	800d812 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d72c:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800d72e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d732:	2100      	movs	r1, #0
 800d734:	68b8      	ldr	r0, [r7, #8]
 800d736:	f015 faae 	bl	8022c96 <memset>
            pxEndPoint->pxNext = pxNext;
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	3303      	adds	r3, #3
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	061a      	lsls	r2, r3, #24
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	3302      	adds	r3, #2
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	041b      	lsls	r3, r3, #16
 800d752:	431a      	orrs	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	3301      	adds	r3, #1
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	021b      	lsls	r3, r3, #8
 800d75c:	4313      	orrs	r3, r2
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	7812      	ldrb	r2, [r2, #0]
 800d762:	4313      	orrs	r3, r2
 800d764:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	3303      	adds	r3, #3
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	061a      	lsls	r2, r3, #24
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	3302      	adds	r3, #2
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	041b      	lsls	r3, r3, #16
 800d776:	431a      	orrs	r2, r3
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	3301      	adds	r3, #1
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	021b      	lsls	r3, r3, #8
 800d780:	4313      	orrs	r3, r2
 800d782:	683a      	ldr	r2, [r7, #0]
 800d784:	7812      	ldrb	r2, [r2, #0]
 800d786:	431a      	orrs	r2, r3
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	3303      	adds	r3, #3
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	061a      	lsls	r2, r3, #24
 800d794:	6a3b      	ldr	r3, [r7, #32]
 800d796:	3302      	adds	r3, #2
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	041b      	lsls	r3, r3, #16
 800d79c:	431a      	orrs	r2, r3
 800d79e:	6a3b      	ldr	r3, [r7, #32]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	021b      	lsls	r3, r3, #8
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	6a3a      	ldr	r2, [r7, #32]
 800d7aa:	7812      	ldrb	r2, [r2, #0]
 800d7ac:	431a      	orrs	r2, r3
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b4:	3303      	adds	r3, #3
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	061a      	lsls	r2, r3, #24
 800d7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7bc:	3302      	adds	r3, #2
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	041b      	lsls	r3, r3, #16
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	021b      	lsls	r3, r3, #8
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7d0:	7812      	ldrb	r2, [r2, #0]
 800d7d2:	431a      	orrs	r2, r3
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	43da      	mvns	r2, r3
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	431a      	orrs	r2, r3
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	331c      	adds	r3, #28
 800d7ea:	68b9      	ldr	r1, [r7, #8]
 800d7ec:	221c      	movs	r2, #28
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f015 f944 	bl	8022a7c <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	33e8      	adds	r3, #232	@ 0xe8
 800d7fe:	2206      	movs	r2, #6
 800d800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d802:	4618      	mov	r0, r3
 800d804:	f015 f93a 	bl	8022a7c <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800d808:	68b9      	ldr	r1, [r7, #8]
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f000 f85c 	bl	800d8c8 <FreeRTOS_AddEndPoint>
        }
    }
 800d810:	bf00      	nop
 800d812:	bf00      	nop
 800d814:	3718      	adds	r7, #24
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	08025ea4 	.word	0x08025ea4

0800d820 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800d820:	b480      	push	{r7}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800d828:	2300      	movs	r3, #0
 800d82a:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d021      	beq.n	800d876 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800d832:	4b14      	ldr	r3, [pc, #80]	@ (800d884 <FreeRTOS_AddNetworkInterface+0x64>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d106      	bne.n	800d848 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800d83a:	4a12      	ldr	r2, [pc, #72]	@ (800d884 <FreeRTOS_AddNetworkInterface+0x64>)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	625a      	str	r2, [r3, #36]	@ 0x24
 800d846:	e016      	b.n	800d876 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800d848:	4b0e      	ldr	r3, [pc, #56]	@ (800d884 <FreeRTOS_AddNetworkInterface+0x64>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	429a      	cmp	r2, r3
 800d854:	d00e      	beq.n	800d874 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d106      	bne.n	800d86c <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800d86a:	e004      	b.n	800d876 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d870:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800d872:	e7ec      	b.n	800d84e <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800d874:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800d876:	687b      	ldr	r3, [r7, #4]
    }
 800d878:	4618      	mov	r0, r3
 800d87a:	3714      	adds	r7, #20
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	2000152c 	.word	0x2000152c

0800d888 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800d888:	b480      	push	{r7}
 800d88a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800d88c:	4b03      	ldr	r3, [pc, #12]	@ (800d89c <FreeRTOS_FirstNetworkInterface+0x14>)
 800d88e:	681b      	ldr	r3, [r3, #0]
    }
 800d890:	4618      	mov	r0, r3
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	2000152c 	.word	0x2000152c

0800d8a0 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d003      	beq.n	800d8b6 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	e001      	b.n	800d8ba <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
    }
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3714      	adds	r7, #20
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6a1b      	ldr	r3, [r3, #32]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d102      	bne.n	800d8ec <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	683a      	ldr	r2, [r7, #0]
 800d8ea:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800d8ec:	4b33      	ldr	r3, [pc, #204]	@ (800d9bc <FreeRTOS_AddEndPoint+0xf4>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d107      	bne.n	800d904 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800d8fc:	4a2f      	ldr	r2, [pc, #188]	@ (800d9bc <FreeRTOS_AddEndPoint+0xf4>)
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	6013      	str	r3, [r2, #0]
 800d902:	e01a      	b.n	800d93a <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800d904:	4b2d      	ldr	r3, [pc, #180]	@ (800d9bc <FreeRTOS_AddEndPoint+0xf4>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d012      	beq.n	800d938 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d108      	bne.n	800d92e <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	2200      	movs	r2, #0
 800d920:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800d92c:	e005      	b.n	800d93a <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d934:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800d936:	e7e8      	b.n	800d90a <FreeRTOS_AddEndPoint+0x42>
                    break;
 800d938:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d940:	f003 0304 	and.w	r3, r3, #4
 800d944:	b2db      	uxtb	r3, r3
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00c      	beq.n	800d964 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800d950:	4619      	mov	r1, r3
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800d958:	461a      	mov	r2, r3
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	3390      	adds	r3, #144	@ 0x90
 800d95e:	4818      	ldr	r0, [pc, #96]	@ (800d9c0 <FreeRTOS_AddEndPoint+0xf8>)
 800d960:	f014 fe70 	bl	8022644 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d96a:	f003 0304 	and.w	r3, r3, #4
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	2b00      	cmp	r3, #0
 800d972:	d11e      	bne.n	800d9b2 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800d97a:	4619      	mov	r1, r3
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800d982:	4618      	mov	r0, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	69db      	ldr	r3, [r3, #28]
 800d988:	061a      	lsls	r2, r3, #24
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	69db      	ldr	r3, [r3, #28]
 800d98e:	021b      	lsls	r3, r3, #8
 800d990:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d994:	431a      	orrs	r2, r3
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	69db      	ldr	r3, [r3, #28]
 800d99a:	0a1b      	lsrs	r3, r3, #8
 800d99c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d9a0:	431a      	orrs	r2, r3
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	69db      	ldr	r3, [r3, #28]
 800d9a6:	0e1b      	lsrs	r3, r3, #24
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	4805      	ldr	r0, [pc, #20]	@ (800d9c4 <FreeRTOS_AddEndPoint+0xfc>)
 800d9ae:	f014 fe49 	bl	8022644 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800d9b2:	683b      	ldr	r3, [r7, #0]
    }
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3710      	adds	r7, #16
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	20001528 	.word	0x20001528
 800d9c0:	08025ee4 	.word	0x08025ee4
 800d9c4:	08025f18 	.word	0x08025f18

0800d9c8 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d9d0:	4b0d      	ldr	r3, [pc, #52]	@ (800da08 <FreeRTOS_FirstEndPoint+0x40>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800d9d6:	e00c      	b.n	800d9f2 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00c      	beq.n	800d9f8 <FreeRTOS_FirstEndPoint+0x30>
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d006      	beq.n	800d9f8 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d9f0:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1ef      	bne.n	800d9d8 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
    }
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3714      	adds	r7, #20
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop
 800da08:	20001528 	.word	0x20001528

0800da0c <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b084      	sub	sp, #16
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d015      	beq.n	800da4c <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800da26:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800da28:	e00c      	b.n	800da44 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d011      	beq.n	800da54 <FreeRTOS_NextEndPoint+0x48>
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d00b      	beq.n	800da54 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800da42:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1ef      	bne.n	800da2a <FreeRTOS_NextEndPoint+0x1e>
 800da4a:	e003      	b.n	800da54 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7ff ffbb 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 800da52:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800da54:	68fb      	ldr	r3, [r7, #12]
    }
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
	...

0800da60 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800da60:	b480      	push	{r7}
 800da62:	b085      	sub	sp, #20
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800da6a:	4b1e      	ldr	r3, [pc, #120]	@ (800dae4 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800da70:	2308      	movs	r3, #8
 800da72:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800da74:	4b1c      	ldr	r3, [pc, #112]	@ (800dae8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3301      	adds	r3, #1
 800da7a:	4a1b      	ldr	r2, [pc, #108]	@ (800dae8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800da7c:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800da7e:	683a      	ldr	r2, [r7, #0]
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	429a      	cmp	r2, r3
 800da84:	d223      	bcs.n	800dace <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800da86:	4a18      	ldr	r2, [pc, #96]	@ (800dae8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	3312      	adds	r3, #18
 800da8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da90:	1c5a      	adds	r2, r3, #1
 800da92:	4915      	ldr	r1, [pc, #84]	@ (800dae8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	3312      	adds	r3, #18
 800da98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800da9c:	e017      	b.n	800dace <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800daa4:	f003 0304 	and.w	r3, r3, #4
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10b      	bne.n	800dac6 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00f      	beq.n	800dad4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00b      	beq.n	800dad4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d006      	beq.n	800dad4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dacc:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1e4      	bne.n	800da9e <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800dad4:	68fb      	ldr	r3, [r7, #12]
    }
 800dad6:	4618      	mov	r0, r3
 800dad8:	3714      	adds	r7, #20
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop
 800dae4:	20001528 	.word	0x20001528
 800dae8:	20001530 	.word	0x20001530

0800daec <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800daf4:	6879      	ldr	r1, [r7, #4]
 800daf6:	2000      	movs	r0, #0
 800daf8:	f000 f8b6 	bl	800dc68 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800dafc:	4603      	mov	r3, r0
        }
 800dafe:	4618      	mov	r0, r3
 800db00:	3708      	adds	r7, #8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
	...

0800db08 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800db12:	4b17      	ldr	r3, [pc, #92]	@ (800db70 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800db18:	4b16      	ldr	r3, [pc, #88]	@ (800db74 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	3301      	adds	r3, #1
 800db1e:	4a15      	ldr	r2, [pc, #84]	@ (800db74 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800db20:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d119      	bne.n	800db5c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800db28:	2300      	movs	r3, #0
 800db2a:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800db2c:	e016      	b.n	800db5c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d005      	beq.n	800db40 <FreeRTOS_FindEndPointOnMAC+0x38>
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d109      	bne.n	800db54 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	33e8      	adds	r3, #232	@ 0xe8
 800db44:	6879      	ldr	r1, [r7, #4]
 800db46:	2206      	movs	r2, #6
 800db48:	4618      	mov	r0, r3
 800db4a:	f015 ff2c 	bl	80239a6 <memcmp>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d007      	beq.n	800db64 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800db5a:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d1e5      	bne.n	800db2e <FreeRTOS_FindEndPointOnMAC+0x26>
 800db62:	e000      	b.n	800db66 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800db64:	bf00      	nop
        }

        return pxEndPoint;
 800db66:	68fb      	ldr	r3, [r7, #12]
    }
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	20001528 	.word	0x20001528
 800db74:	20001530 	.word	0x20001530

0800db78 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800db82:	683a      	ldr	r2, [r7, #0]
 800db84:	6879      	ldr	r1, [r7, #4]
 800db86:	2000      	movs	r0, #0
 800db88:	f000 f806 	bl	800db98 <FreeRTOS_InterfaceEndPointOnNetMask>
 800db8c:	4603      	mov	r3, r0
    }
 800db8e:	4618      	mov	r0, r3
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
	...

0800db98 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800db98:	b580      	push	{r7, lr}
 800db9a:	b086      	sub	sp, #24
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dba4:	4b2d      	ldr	r3, [pc, #180]	@ (800dc5c <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800dbaa:	230e      	movs	r3, #14
 800dbac:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800dbae:	4b2c      	ldr	r3, [pc, #176]	@ (800dc60 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	4a2a      	ldr	r2, [pc, #168]	@ (800dc60 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dbb6:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d22d      	bcs.n	800dc1c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800dbc0:	4a27      	ldr	r2, [pc, #156]	@ (800dc60 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbca:	1c5a      	adds	r2, r3, #1
 800dbcc:	4924      	ldr	r1, [pc, #144]	@ (800dc60 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800dbd6:	e021      	b.n	800dc1c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d005      	beq.n	800dbea <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d114      	bne.n	800dc14 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dbf0:	f003 0304 	and.w	r3, r3, #4
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d10c      	bne.n	800dc14 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc00:	d00f      	beq.n	800dc22 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	405a      	eors	r2, r3
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d006      	beq.n	800dc22 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dc1a:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1da      	bne.n	800dbd8 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d113      	bne.n	800dc50 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	061a      	lsls	r2, r3, #24
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	021b      	lsls	r3, r3, #8
 800dc30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc34:	431a      	orrs	r2, r3
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	0a1b      	lsrs	r3, r3, #8
 800dc3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dc3e:	431a      	orrs	r2, r3
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	0e1b      	lsrs	r3, r3, #24
 800dc44:	4313      	orrs	r3, r2
 800dc46:	461a      	mov	r2, r3
 800dc48:	6879      	ldr	r1, [r7, #4]
 800dc4a:	4806      	ldr	r0, [pc, #24]	@ (800dc64 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800dc4c:	f014 fcfa 	bl	8022644 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800dc50:	697b      	ldr	r3, [r7, #20]
    }
 800dc52:	4618      	mov	r0, r3
 800dc54:	3718      	adds	r7, #24
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	20001528 	.word	0x20001528
 800dc60:	20001530 	.word	0x20001530
 800dc64:	08025f4c 	.word	0x08025f4c

0800dc68 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dc72:	4b17      	ldr	r3, [pc, #92]	@ (800dcd0 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800dc78:	e020      	b.n	800dcbc <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d005      	beq.n	800dc8c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d113      	bne.n	800dcb4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dc92:	f003 0304 	and.w	r3, r3, #4
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00b      	beq.n	800dcb4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dca6:	461a      	mov	r2, r3
 800dca8:	6839      	ldr	r1, [r7, #0]
 800dcaa:	f7fd fc0b 	bl	800b4c4 <xCompareIPv6_Address>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d007      	beq.n	800dcc4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dcba:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1db      	bne.n	800dc7a <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800dcc2:	e000      	b.n	800dcc6 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800dcc4:	bf00      	nop
            }

            return pxEndPoint;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
        }
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	20001528 	.word	0x20001528

0800dcd4 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800dcd4:	b5b0      	push	{r4, r5, r7, lr}
 800dcd6:	b0b0      	sub	sp, #192	@ 0xc0
 800dcd8:	af04      	add	r7, sp, #16
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	607a      	str	r2, [r7, #4]
 800dcde:	603b      	str	r3, [r7, #0]
 800dce0:	460b      	mov	r3, r1
 800dce2:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800dce4:	2300      	movs	r3, #0
 800dce6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800dcea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800dcee:	2200      	movs	r2, #0
 800dcf0:	601a      	str	r2, [r3, #0]
 800dcf2:	605a      	str	r2, [r3, #4]
 800dcf4:	609a      	str	r2, [r3, #8]
 800dcf6:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800dcf8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	601a      	str	r2, [r3, #0]
 800dd00:	605a      	str	r2, [r3, #4]
 800dd02:	609a      	str	r2, [r3, #8]
 800dd04:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800dd06:	897b      	ldrh	r3, [r7, #10]
 800dd08:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d101      	bne.n	800dd14 <pxEasyFit+0x40>
 800dd10:	2301      	movs	r3, #1
 800dd12:	e000      	b.n	800dd16 <pxEasyFit+0x42>
 800dd14:	2300      	movs	r3, #0
 800dd16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800dd20:	2300      	movs	r3, #0
 800dd22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800dd26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d123      	bne.n	800dd76 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	2210      	movs	r2, #16
 800dd32:	4619      	mov	r1, r3
 800dd34:	4888      	ldr	r0, [pc, #544]	@ (800df58 <pxEasyFit+0x284>)
 800dd36:	f015 fe36 	bl	80239a6 <memcmp>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <pxEasyFit+0x70>
 800dd40:	2301      	movs	r3, #1
 800dd42:	e000      	b.n	800dd46 <pxEasyFit+0x72>
 800dd44:	2300      	movs	r3, #0
 800dd46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800dd4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d105      	bne.n	800dd5e <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	683a      	ldr	r2, [r7, #0]
 800dd56:	4619      	mov	r1, r3
 800dd58:	4880      	ldr	r0, [pc, #512]	@ (800df5c <pxEasyFit+0x288>)
 800dd5a:	f014 fc73 	bl	8022644 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f000 fa15 	bl	800e190 <xIPv6_GetIPType>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d101      	bne.n	800dd70 <pxEasyFit+0x9c>
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	e000      	b.n	800dd72 <pxEasyFit+0x9e>
 800dd70:	2300      	movs	r3, #0
 800dd72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f7ff fe26 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 800dd7c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800dd80:	e07d      	b.n	800de7e <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800dd82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd86:	33e8      	adds	r3, #232	@ 0xe8
 800dd88:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800dd8c:	2206      	movs	r2, #6
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f015 fe09 	bl	80239a6 <memcmp>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d101      	bne.n	800dd9e <pxEasyFit+0xca>
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	e000      	b.n	800dda0 <pxEasyFit+0xcc>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800dda4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dda8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ddac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d159      	bne.n	800de70 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800ddbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ddc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800ddc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800ddc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d134      	bne.n	800de3a <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800ddd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ddd4:	3338      	adds	r3, #56	@ 0x38
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f000 f9da 	bl	800e190 <xIPv6_GetIPType>
 800dddc:	4603      	mov	r3, r0
 800ddde:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800dde2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800dde6:	2b05      	cmp	r3, #5
 800dde8:	d035      	beq.n	800de56 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800ddea:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d101      	bne.n	800ddf6 <pxEasyFit+0x122>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e000      	b.n	800ddf8 <pxEasyFit+0x124>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800ddfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de00:	3338      	adds	r3, #56	@ 0x38
 800de02:	6839      	ldr	r1, [r7, #0]
 800de04:	2210      	movs	r2, #16
 800de06:	4618      	mov	r0, r3
 800de08:	f015 fdcd 	bl	80239a6 <memcmp>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d106      	bne.n	800de20 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800de12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de16:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800de18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de1a:	3301      	adds	r3, #1
 800de1c:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800de1e:	e01a      	b.n	800de56 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800de20:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800de24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800de28:	429a      	cmp	r2, r3
 800de2a:	d114      	bne.n	800de56 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800de2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de30:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800de32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de34:	3301      	adds	r3, #1
 800de36:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800de38:	e00d      	b.n	800de56 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800de3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	429a      	cmp	r2, r3
 800de46:	d108      	bne.n	800de5a <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800de48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de4c:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800de4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de50:	3301      	adds	r3, #1
 800de52:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800de54:	e001      	b.n	800de5a <pxEasyFit+0x186>
                           break;
 800de56:	bf00      	nop
 800de58:	e000      	b.n	800de5c <pxEasyFit+0x188>
                        break;
 800de5a:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800de5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800de60:	2b01      	cmp	r3, #1
 800de62:	d105      	bne.n	800de70 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800de64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de66:	3301      	adds	r3, #1
 800de68:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800de6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de6e:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800de70:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f7ff fdc9 	bl	800da0c <FreeRTOS_NextEndPoint>
 800de7a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800de7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de82:	2b00      	cmp	r3, #0
 800de84:	f47f af7d 	bne.w	800dd82 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800de88:	2300      	movs	r3, #0
 800de8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800de8e:	e017      	b.n	800dec0 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800de90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	33b0      	adds	r3, #176	@ 0xb0
 800de98:	443b      	add	r3, r7
 800de9a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	dd09      	ble.n	800deb6 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800dea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dea6:	009b      	lsls	r3, r3, #2
 800dea8:	33b0      	adds	r3, #176	@ 0xb0
 800deaa:	443b      	add	r3, r7
 800deac:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800deb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800deb4:	e008      	b.n	800dec8 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800deb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800deba:	3301      	adds	r3, #1
 800debc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dec0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	dde3      	ble.n	800de90 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800dec8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800decc:	2b00      	cmp	r3, #0
 800dece:	d13c      	bne.n	800df4a <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800ded0:	897b      	ldrh	r3, [r7, #10]
 800ded2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d101      	bne.n	800dede <pxEasyFit+0x20a>
 800deda:	230a      	movs	r3, #10
 800dedc:	e000      	b.n	800dee0 <pxEasyFit+0x20c>
 800dede:	2302      	movs	r3, #2
 800dee0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800dee4:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800dee6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800deea:	2328      	movs	r3, #40	@ 0x28
 800deec:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800def0:	f001 fc70 	bl	800f7d4 <FreeRTOS_inet_ntop>
 800def4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800def8:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800defa:	f107 0210 	add.w	r2, r7, #16
 800defe:	2328      	movs	r3, #40	@ 0x28
 800df00:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800df04:	f001 fc66 	bl	800f7d4 <FreeRTOS_inet_ntop>
 800df08:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800df0c:	8979      	ldrh	r1, [r7, #10]
 800df0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df10:	461c      	mov	r4, r3
 800df12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df14:	461d      	mov	r5, r3
 800df16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df18:	4618      	mov	r0, r3
 800df1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d002      	beq.n	800df28 <pxEasyFit+0x254>
 800df22:	f107 0310 	add.w	r3, r7, #16
 800df26:	e000      	b.n	800df2a <pxEasyFit+0x256>
 800df28:	4b0d      	ldr	r3, [pc, #52]	@ (800df60 <pxEasyFit+0x28c>)
 800df2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800df2e:	2a00      	cmp	r2, #0
 800df30:	d002      	beq.n	800df38 <pxEasyFit+0x264>
 800df32:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800df36:	e000      	b.n	800df3a <pxEasyFit+0x266>
 800df38:	4a09      	ldr	r2, [pc, #36]	@ (800df60 <pxEasyFit+0x28c>)
 800df3a:	9202      	str	r2, [sp, #8]
 800df3c:	9301      	str	r3, [sp, #4]
 800df3e:	9000      	str	r0, [sp, #0]
 800df40:	462b      	mov	r3, r5
 800df42:	4622      	mov	r2, r4
 800df44:	4807      	ldr	r0, [pc, #28]	@ (800df64 <pxEasyFit+0x290>)
 800df46:	f014 fb7d 	bl	8022644 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800df4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800df4e:	4618      	mov	r0, r3
 800df50:	37b0      	adds	r7, #176	@ 0xb0
 800df52:	46bd      	mov	sp, r7
 800df54:	bdb0      	pop	{r4, r5, r7, pc}
 800df56:	bf00      	nop
 800df58:	08027da4 	.word	0x08027da4
 800df5c:	08025fe8 	.word	0x08025fe8
 800df60:	08026004 	.word	0x08026004
 800df64:	0802600c 	.word	0x0802600c

0800df68 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800df68:	b590      	push	{r4, r7, lr}
 800df6a:	b097      	sub	sp, #92	@ 0x5c
 800df6c:	af02      	add	r7, sp, #8
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d104      	bne.n	800df8e <FreeRTOS_MatchingEndpoint+0x26>
 800df84:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800df88:	485e      	ldr	r0, [pc, #376]	@ (800e104 <FreeRTOS_MatchingEndpoint+0x19c>)
 800df8a:	f7f3 fcf7 	bl	800197c <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800df92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df94:	3302      	adds	r3, #2
 800df96:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800df98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df9a:	f003 0303 	and.w	r3, r3, #3
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d004      	beq.n	800dfac <FreeRTOS_MatchingEndpoint+0x44>
 800dfa2:	f240 319b 	movw	r1, #923	@ 0x39b
 800dfa6:	4857      	ldr	r0, [pc, #348]	@ (800e104 <FreeRTOS_MatchingEndpoint+0x19c>)
 800dfa8:	f7f3 fce8 	bl	800197c <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800dfac:	4b56      	ldr	r3, [pc, #344]	@ (800e108 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	4a55      	ldr	r2, [pc, #340]	@ (800e108 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800dfb4:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800dfb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfb8:	7b1a      	ldrb	r2, [r3, #12]
 800dfba:	7b5b      	ldrb	r3, [r3, #13]
 800dfbc:	021b      	lsls	r3, r3, #8
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800dfc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dfca:	2210      	movs	r2, #16
 800dfcc:	2100      	movs	r1, #0
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f014 fe61 	bl	8022c96 <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800dfd4:	f107 0314 	add.w	r3, r7, #20
 800dfd8:	2210      	movs	r2, #16
 800dfda:	2100      	movs	r1, #0
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f014 fe5a 	bl	8022c96 <memset>

            switch( usFrameType )
 800dfe2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dfe4:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d009      	beq.n	800e000 <FreeRTOS_MatchingEndpoint+0x98>
 800dfec:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800dff0:	4293      	cmp	r3, r2
 800dff2:	dc6a      	bgt.n	800e0ca <FreeRTOS_MatchingEndpoint+0x162>
 800dff4:	2b08      	cmp	r3, #8
 800dff6:	d05d      	beq.n	800e0b4 <FreeRTOS_MatchingEndpoint+0x14c>
 800dff8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800dffc:	d015      	beq.n	800e02a <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800dffe:	e064      	b.n	800e0ca <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e002:	3316      	adds	r3, #22
 800e004:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800e008:	6818      	ldr	r0, [r3, #0]
 800e00a:	6859      	ldr	r1, [r3, #4]
 800e00c:	689a      	ldr	r2, [r3, #8]
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e014:	3326      	adds	r3, #38	@ 0x26
 800e016:	f107 0414 	add.w	r4, r7, #20
 800e01a:	6818      	ldr	r0, [r3, #0]
 800e01c:	6859      	ldr	r1, [r3, #4]
 800e01e:	689a      	ldr	r2, [r3, #8]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800e024:	2301      	movs	r3, #1
 800e026:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e028:	e050      	b.n	800e0cc <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800e02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e030:	8a9b      	ldrh	r3, [r3, #20]
 800e032:	b29b      	uxth	r3, r3
 800e034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e038:	d108      	bne.n	800e04c <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800e03a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e03c:	331c      	adds	r3, #28
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800e042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e044:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800e048:	617b      	str	r3, [r7, #20]
 800e04a:	e00d      	b.n	800e068 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800e04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e04e:	8a9b      	ldrh	r3, [r3, #20]
 800e050:	b29b      	uxth	r3, r3
 800e052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e056:	d107      	bne.n	800e068 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800e058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e05a:	331c      	adds	r3, #28
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800e060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e062:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800e066:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800e068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06a:	061a      	lsls	r2, r3, #24
 800e06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06e:	021b      	lsls	r3, r3, #8
 800e070:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e074:	431a      	orrs	r2, r3
 800e076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e078:	0a1b      	lsrs	r3, r3, #8
 800e07a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e07e:	431a      	orrs	r2, r3
 800e080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e082:	0e1b      	lsrs	r3, r3, #24
 800e084:	ea42 0103 	orr.w	r1, r2, r3
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	061a      	lsls	r2, r3, #24
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	021b      	lsls	r3, r3, #8
 800e090:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e094:	431a      	orrs	r2, r3
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	0a1b      	lsrs	r3, r3, #8
 800e09a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e09e:	431a      	orrs	r2, r3
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	0e1b      	lsrs	r3, r3, #24
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	4818      	ldr	r0, [pc, #96]	@ (800e10c <FreeRTOS_MatchingEndpoint+0x1a4>)
 800e0aa:	f014 facb 	bl	8022644 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e0b2:	e00b      	b.n	800e0cc <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800e0b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0b6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e0ba:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800e0bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0be:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e0c2:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e0c8:	e000      	b.n	800e0cc <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800e0ca:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800e0cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d113      	bne.n	800e0fa <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800e0d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0d4:	f107 030c 	add.w	r3, r7, #12
 800e0d8:	6810      	ldr	r0, [r2, #0]
 800e0da:	6018      	str	r0, [r3, #0]
 800e0dc:	8892      	ldrh	r2, [r2, #4]
 800e0de:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800e0e0:	f107 0014 	add.w	r0, r7, #20
 800e0e4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e0e8:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800e0ea:	f107 030c 	add.w	r3, r7, #12
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7ff fdee 	bl	800dcd4 <pxEasyFit>
 800e0f8:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800e0fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3754      	adds	r7, #84	@ 0x54
 800e100:	46bd      	mov	sp, r7
 800e102:	bd90      	pop	{r4, r7, pc}
 800e104:	08026034 	.word	0x08026034
 800e108:	20001530 	.word	0x20001530
 800e10c:	08026064 	.word	0x08026064

0800e110 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800e118:	4b1b      	ldr	r3, [pc, #108]	@ (800e188 <FreeRTOS_FindGateWay+0x78>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800e11e:	e028      	b.n	800e172 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b60      	cmp	r3, #96	@ 0x60
 800e124:	d112      	bne.n	800e14c <FreeRTOS_FindGateWay+0x3c>
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e12c:	f003 0304 	and.w	r3, r3, #4
 800e130:	b2db      	uxtb	r3, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00a      	beq.n	800e14c <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	335c      	adds	r3, #92	@ 0x5c
 800e13a:	2210      	movs	r2, #16
 800e13c:	4619      	mov	r1, r3
 800e13e:	4813      	ldr	r0, [pc, #76]	@ (800e18c <FreeRTOS_FindGateWay+0x7c>)
 800e140:	f015 fc31 	bl	80239a6 <memcmp>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00f      	beq.n	800e16a <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800e14a:	e017      	b.n	800e17c <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b40      	cmp	r3, #64	@ 0x40
 800e150:	d10b      	bne.n	800e16a <FreeRTOS_FindGateWay+0x5a>
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e158:	f003 0304 	and.w	r3, r3, #4
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d103      	bne.n	800e16a <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d107      	bne.n	800e17a <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800e170:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1d3      	bne.n	800e120 <FreeRTOS_FindGateWay+0x10>
 800e178:	e000      	b.n	800e17c <FreeRTOS_FindGateWay+0x6c>
                            break;
 800e17a:	bf00      	nop
        }

        return pxEndPoint;
 800e17c:	68fb      	ldr	r3, [r7, #12]
    }
 800e17e:	4618      	mov	r0, r3
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	20001528 	.word	0x20001528
 800e18c:	08027d5c 	.word	0x08027d5c

0800e190 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800e190:	b580      	push	{r7, lr}
 800e192:	b086      	sub	sp, #24
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800e198:	2305      	movs	r3, #5
 800e19a:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d046      	beq.n	800e230 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	613b      	str	r3, [r7, #16]
 800e1a6:	e040      	b.n	800e22a <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	021b      	lsls	r3, r3, #8
 800e1ae:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	785b      	ldrb	r3, [r3, #1]
 800e1b4:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800e1ba:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800e1bc:	491f      	ldr	r1, [pc, #124]	@ (800e23c <xIPv6_GetIPType+0xac>)
 800e1be:	693a      	ldr	r2, [r7, #16]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	005b      	lsls	r3, r3, #1
 800e1c4:	4413      	add	r3, r2
 800e1c6:	005b      	lsls	r3, r3, #1
 800e1c8:	440b      	add	r3, r1
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	2b04      	cmp	r3, #4
 800e1ce:	d108      	bne.n	800e1e2 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7fd f929 	bl	800b428 <xIsIPv6Loopback>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800e1dc:	2304      	movs	r3, #4
 800e1de:	75fb      	strb	r3, [r7, #23]
                        break;
 800e1e0:	e026      	b.n	800e230 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800e1e2:	4916      	ldr	r1, [pc, #88]	@ (800e23c <xIPv6_GetIPType+0xac>)
 800e1e4:	693a      	ldr	r2, [r7, #16]
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	005b      	lsls	r3, r3, #1
 800e1ea:	4413      	add	r3, r2
 800e1ec:	005b      	lsls	r3, r3, #1
 800e1ee:	440b      	add	r3, r1
 800e1f0:	3302      	adds	r3, #2
 800e1f2:	881a      	ldrh	r2, [r3, #0]
 800e1f4:	89fb      	ldrh	r3, [r7, #14]
 800e1f6:	4013      	ands	r3, r2
 800e1f8:	b299      	uxth	r1, r3
 800e1fa:	4810      	ldr	r0, [pc, #64]	@ (800e23c <xIPv6_GetIPType+0xac>)
 800e1fc:	693a      	ldr	r2, [r7, #16]
 800e1fe:	4613      	mov	r3, r2
 800e200:	005b      	lsls	r3, r3, #1
 800e202:	4413      	add	r3, r2
 800e204:	005b      	lsls	r3, r3, #1
 800e206:	4403      	add	r3, r0
 800e208:	3304      	adds	r3, #4
 800e20a:	881b      	ldrh	r3, [r3, #0]
 800e20c:	4299      	cmp	r1, r3
 800e20e:	d109      	bne.n	800e224 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800e210:	490a      	ldr	r1, [pc, #40]	@ (800e23c <xIPv6_GetIPType+0xac>)
 800e212:	693a      	ldr	r2, [r7, #16]
 800e214:	4613      	mov	r3, r2
 800e216:	005b      	lsls	r3, r3, #1
 800e218:	4413      	add	r3, r2
 800e21a:	005b      	lsls	r3, r3, #1
 800e21c:	440b      	add	r3, r1
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	75fb      	strb	r3, [r7, #23]
                    break;
 800e222:	e005      	b.n	800e230 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	3301      	adds	r3, #1
 800e228:	613b      	str	r3, [r7, #16]
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	2b04      	cmp	r3, #4
 800e22e:	ddbb      	ble.n	800e1a8 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800e230:	7dfb      	ldrb	r3, [r7, #23]
    }
 800e232:	4618      	mov	r0, r3
 800e234:	3718      	adds	r7, #24
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	08027db4 	.word	0x08027db4

0800e240 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d105      	bne.n	800e25e <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800e252:	4a16      	ldr	r2, [pc, #88]	@ (800e2ac <pcEndpointName+0x6c>)
 800e254:	6879      	ldr	r1, [r7, #4]
 800e256:	68b8      	ldr	r0, [r7, #8]
 800e258:	f015 fa20 	bl	802369c <snprintf>
 800e25c:	e020      	b.n	800e2a0 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e264:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d002      	beq.n	800e274 <pcEndpointName+0x34>
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d007      	beq.n	800e282 <pcEndpointName+0x42>
 800e272:	e00f      	b.n	800e294 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800e274:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	2002      	movs	r0, #2
 800e27c:	f001 faaa 	bl	800f7d4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800e280:	e00e      	b.n	800e2a0 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	68ba      	ldr	r2, [r7, #8]
 800e28c:	200a      	movs	r0, #10
 800e28e:	f001 faa1 	bl	800f7d4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800e292:	e005      	b.n	800e2a0 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800e294:	4a05      	ldr	r2, [pc, #20]	@ (800e2ac <pcEndpointName+0x6c>)
 800e296:	6879      	ldr	r1, [r7, #4]
 800e298:	68b8      	ldr	r0, [r7, #8]
 800e29a:	f015 f9ff 	bl	802369c <snprintf>
                    break;
 800e29e:	bf00      	nop
            }
        }

        return pcBuffer;
 800e2a0:	68bb      	ldr	r3, [r7, #8]
    }
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	08026084 	.word	0x08026084

0800e2b0 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f002 fc3f 	bl	8010b40 <xSocketValid>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d102      	bne.n	800e2ce <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	617b      	str	r3, [r7, #20]
 800e2cc:	e015      	b.n	800e2fa <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d006      	beq.n	800e2e2 <prvValidSocket+0x32>
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	69db      	ldr	r3, [r3, #28]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d102      	bne.n	800e2e2 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	617b      	str	r3, [r7, #20]
 800e2e0:	e00b      	b.n	800e2fa <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d002      	beq.n	800e2f6 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	617b      	str	r3, [r7, #20]
 800e2f4:	e001      	b.n	800e2fa <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e2fa:	697b      	ldr	r3, [r7, #20]
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3718      	adds	r7, #24
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800e308:	4803      	ldr	r0, [pc, #12]	@ (800e318 <vNetworkSocketsInit+0x14>)
 800e30a:	f7f5 f9a9 	bl	8003660 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800e30e:	4803      	ldr	r0, [pc, #12]	@ (800e31c <vNetworkSocketsInit+0x18>)
 800e310:	f7f5 f9a6 	bl	8003660 <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800e314:	bf00      	nop
 800e316:	bd80      	pop	{r7, pc}
 800e318:	200015f4 	.word	0x200015f4
 800e31c:	20001608 	.word	0x20001608

0800e320 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b086      	sub	sp, #24
 800e324:	af00      	add	r7, sp, #0
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	607a      	str	r2, [r7, #4]
 800e32c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800e32e:	2301      	movs	r3, #1
 800e330:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800e332:	2300      	movs	r3, #0
 800e334:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800e336:	f7fb ff97 	bl	800a268 <xIPIsNetworkTaskReady>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d102      	bne.n	800e346 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800e340:	2300      	movs	r3, #0
 800e342:	617b      	str	r3, [r7, #20]
 800e344:	e05e      	b.n	800e404 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2b02      	cmp	r3, #2
 800e34a:	d004      	beq.n	800e356 <prvDetermineSocketSize+0x36>
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2b0a      	cmp	r3, #10
 800e350:	d001      	beq.n	800e356 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800e352:	2300      	movs	r3, #0
 800e354:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2b02      	cmp	r3, #2
 800e35a:	d002      	beq.n	800e362 <prvDetermineSocketSize+0x42>
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2b0a      	cmp	r3, #10
 800e360:	d101      	bne.n	800e366 <prvDetermineSocketSize+0x46>
 800e362:	2301      	movs	r3, #1
 800e364:	e000      	b.n	800e368 <prvDetermineSocketSize+0x48>
 800e366:	2300      	movs	r3, #0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d104      	bne.n	800e376 <prvDetermineSocketSize+0x56>
 800e36c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800e370:	4827      	ldr	r0, [pc, #156]	@ (800e410 <prvDetermineSocketSize+0xf0>)
 800e372:	f7f3 fb03 	bl	800197c <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800e376:	4b27      	ldr	r3, [pc, #156]	@ (800e414 <prvDetermineSocketSize+0xf4>)
 800e378:	689b      	ldr	r3, [r3, #8]
 800e37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e37e:	d004      	beq.n	800e38a <prvDetermineSocketSize+0x6a>
 800e380:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800e384:	4822      	ldr	r0, [pc, #136]	@ (800e410 <prvDetermineSocketSize+0xf0>)
 800e386:	f7f3 faf9 	bl	800197c <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800e38a:	4b23      	ldr	r3, [pc, #140]	@ (800e418 <prvDetermineSocketSize+0xf8>)
 800e38c:	689b      	ldr	r3, [r3, #8]
 800e38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e392:	d004      	beq.n	800e39e <prvDetermineSocketSize+0x7e>
 800e394:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800e398:	481d      	ldr	r0, [pc, #116]	@ (800e410 <prvDetermineSocketSize+0xf0>)
 800e39a:	f7f3 faef 	bl	800197c <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b11      	cmp	r3, #17
 800e3a2:	d110      	bne.n	800e3c6 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d009      	beq.n	800e3be <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d004      	beq.n	800e3be <prvDetermineSocketSize+0x9e>
 800e3b4:	f240 2106 	movw	r1, #518	@ 0x206
 800e3b8:	4815      	ldr	r0, [pc, #84]	@ (800e410 <prvDetermineSocketSize+0xf0>)
 800e3ba:	f7f3 fadf 	bl	800197c <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2270      	movs	r2, #112	@ 0x70
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	e01e      	b.n	800e404 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2b06      	cmp	r3, #6
 800e3ca:	d111      	bne.n	800e3f0 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d009      	beq.n	800e3e6 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d004      	beq.n	800e3e6 <prvDetermineSocketSize+0xc6>
 800e3dc:	f240 2113 	movw	r1, #531	@ 0x213
 800e3e0:	480b      	ldr	r0, [pc, #44]	@ (800e410 <prvDetermineSocketSize+0xf0>)
 800e3e2:	f7f3 facb 	bl	800197c <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e3ec:	601a      	str	r2, [r3, #0]
 800e3ee:	e009      	b.n	800e404 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d004      	beq.n	800e404 <prvDetermineSocketSize+0xe4>
 800e3fa:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800e3fe:	4804      	ldr	r0, [pc, #16]	@ (800e410 <prvDetermineSocketSize+0xf0>)
 800e400:	f7f3 fabc 	bl	800197c <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800e404:	697b      	ldr	r3, [r7, #20]
}
 800e406:	4618      	mov	r0, r3
 800e408:	3718      	adds	r7, #24
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	bf00      	nop
 800e410:	0802608c 	.word	0x0802608c
 800e414:	200015f4 	.word	0x200015f4
 800e418:	20001608 	.word	0x20001608

0800e41c <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800e42c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	7a1b      	ldrb	r3, [r3, #8]
 800e434:	f003 0301 	and.w	r3, r3, #1
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00a      	beq.n	800e454 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800e43e:	2314      	movs	r3, #20
 800e440:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800e448:	89fb      	ldrh	r3, [r7, #14]
 800e44a:	1ad3      	subs	r3, r2, r3
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e45a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800e45e:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800e462:	f640 3068 	movw	r0, #2920	@ 0xb68
 800e466:	f7fc fc85 	bl	800ad74 <FreeRTOS_round_up>
 800e46a:	4602      	mov	r2, r0
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e478:	08db      	lsrs	r3, r3, #3
 800e47a:	4a10      	ldr	r2, [pc, #64]	@ (800e4bc <prvInitialiseTCPFields+0xa0>)
 800e47c:	fba2 2303 	umull	r2, r3, r2, r3
 800e480:	099b      	lsrs	r3, r3, #6
 800e482:	4619      	mov	r1, r3
 800e484:	2001      	movs	r0, #1
 800e486:	f7fc fc35 	bl	800acf4 <FreeRTOS_max_size_t>
 800e48a:	4602      	mov	r2, r0
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e498:	08db      	lsrs	r3, r3, #3
 800e49a:	4a08      	ldr	r2, [pc, #32]	@ (800e4bc <prvInitialiseTCPFields+0xa0>)
 800e49c:	fba2 2303 	umull	r2, r3, r2, r3
 800e4a0:	099b      	lsrs	r3, r3, #6
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	2001      	movs	r0, #1
 800e4a6:	f7fc fc25 	bl	800acf4 <FreeRTOS_max_size_t>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800e4b2:	bf00      	nop
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	2ce33e6d 	.word	0x2ce33e6d

0800e4c0 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b08a      	sub	sp, #40	@ 0x28
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2b0a      	cmp	r3, #10
 800e4d8:	d002      	beq.n	800e4e0 <FreeRTOS_socket+0x20>
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	d101      	bne.n	800e4e4 <FreeRTOS_socket+0x24>
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	e000      	b.n	800e4e6 <FreeRTOS_socket+0x26>
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d104      	bne.n	800e4f4 <FreeRTOS_socket+0x34>
 800e4ea:	f240 2171 	movw	r1, #625	@ 0x271
 800e4ee:	4845      	ldr	r0, [pc, #276]	@ (800e604 <FreeRTOS_socket+0x144>)
 800e4f0:	f7f3 fa44 	bl	800197c <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10c      	bne.n	800e514 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d005      	beq.n	800e50c <FreeRTOS_socket+0x4c>
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2b02      	cmp	r3, #2
 800e504:	d105      	bne.n	800e512 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800e506:	2311      	movs	r3, #17
 800e508:	623b      	str	r3, [r7, #32]
                    break;
 800e50a:	e003      	b.n	800e514 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800e50c:	2306      	movs	r3, #6
 800e50e:	623b      	str	r3, [r7, #32]
                    break;
 800e510:	e000      	b.n	800e514 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800e512:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800e514:	f107 0314 	add.w	r3, r7, #20
 800e518:	6a3a      	ldr	r2, [r7, #32]
 800e51a:	68b9      	ldr	r1, [r7, #8]
 800e51c:	68f8      	ldr	r0, [r7, #12]
 800e51e:	f7ff feff 	bl	800e320 <prvDetermineSocketSize>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d103      	bne.n	800e530 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e528:	f04f 33ff 	mov.w	r3, #4294967295
 800e52c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e52e:	e063      	b.n	800e5f8 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	4618      	mov	r0, r3
 800e534:	f7f8 f986 	bl	8006844 <pvPortMalloc>
 800e538:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800e53a:	69fb      	ldr	r3, [r7, #28]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d103      	bne.n	800e548 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e540:	f04f 33ff 	mov.w	r3, #4294967295
 800e544:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800e546:	e057      	b.n	800e5f8 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800e548:	f7f4 feb5 	bl	80032b6 <xEventGroupCreate>
 800e54c:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d106      	bne.n	800e562 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800e554:	69f8      	ldr	r0, [r7, #28]
 800e556:	f7f8 fa49 	bl	80069ec <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e55a:	f04f 33ff 	mov.w	r3, #4294967295
 800e55e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e560:	e04a      	b.n	800e5f8 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	461a      	mov	r2, r3
 800e566:	2100      	movs	r1, #0
 800e568:	69f8      	ldr	r0, [r7, #28]
 800e56a:	f014 fb94 	bl	8022c96 <memset>

            pxSocket->xEventGroup = xEventGroup;
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	69ba      	ldr	r2, [r7, #24]
 800e572:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2b02      	cmp	r3, #2
 800e578:	d008      	beq.n	800e58c <FreeRTOS_socket+0xcc>
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2b0a      	cmp	r3, #10
 800e57e:	d10b      	bne.n	800e598 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e580:	69fa      	ldr	r2, [r7, #28]
 800e582:	7a13      	ldrb	r3, [r2, #8]
 800e584:	f043 0301 	orr.w	r3, r3, #1
 800e588:	7213      	strb	r3, [r2, #8]
                        break;
 800e58a:	e009      	b.n	800e5a0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e58c:	69fa      	ldr	r2, [r7, #28]
 800e58e:	7a13      	ldrb	r3, [r2, #8]
 800e590:	f36f 0300 	bfc	r3, #0, #1
 800e594:	7213      	strb	r3, [r2, #8]
                        break;
 800e596:	e003      	b.n	800e5a0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800e598:	481b      	ldr	r0, [pc, #108]	@ (800e608 <FreeRTOS_socket+0x148>)
 800e59a:	f014 f853 	bl	8022644 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800e59e:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800e5a0:	6a3b      	ldr	r3, [r7, #32]
 800e5a2:	2b11      	cmp	r3, #17
 800e5a4:	d105      	bne.n	800e5b2 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	3354      	adds	r3, #84	@ 0x54
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7f5 f858 	bl	8003660 <vListInitialise>
 800e5b0:	e007      	b.n	800e5c2 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800e5b2:	6a3b      	ldr	r3, [r7, #32]
 800e5b4:	2b06      	cmp	r3, #6
 800e5b6:	d104      	bne.n	800e5c2 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	69f8      	ldr	r0, [r7, #28]
 800e5be:	f7ff ff2d 	bl	800e41c <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	330c      	adds	r3, #12
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7f5 f86a 	bl	80036a0 <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	69fa      	ldr	r2, [r7, #28]
 800e5d0:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5d8:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5e0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	2202      	movs	r2, #2
 800e5e6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	b2da      	uxtb	r2, r3
 800e5ee:	69fb      	ldr	r3, [r7, #28]
 800e5f0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800e5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3728      	adds	r7, #40	@ 0x28
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	0802608c 	.word	0x0802608c
 800e608:	080260bc 	.word	0x080260bc

0800e60c <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800e614:	2200      	movs	r2, #0
 800e616:	2111      	movs	r1, #17
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7ff fe49 	bl	800e2b0 <prvValidSocket>
 800e61e:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2b01      	cmp	r3, #1
 800e624:	d10d      	bne.n	800e642 <prvMakeSureSocketIsBound+0x36>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	69db      	ldr	r3, [r3, #28]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d109      	bne.n	800e642 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800e62e:	2200      	movs	r2, #0
 800e630:	2100      	movs	r1, #0
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f000 f934 	bl	800e8a0 <FreeRTOS_bind>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d001      	beq.n	800e642 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800e63e:	2300      	movs	r3, #0
 800e640:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800e642:	68fb      	ldr	r3, [r7, #12]
}
 800e644:	4618      	mov	r0, r3
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b088      	sub	sp, #32
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	607a      	str	r2, [r7, #4]
 800e658:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e65a:	2300      	movs	r3, #0
 800e65c:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800e65e:	2304      	movs	r3, #4
 800e660:	753b      	strb	r3, [r7, #20]
 800e662:	2300      	movs	r3, #0
 800e664:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e668:	785b      	ldrb	r3, [r3, #1]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d006      	beq.n	800e67c <prvSendUDPPacket+0x30>
 800e66e:	2b0a      	cmp	r3, #10
 800e670:	d109      	bne.n	800e686 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800e672:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e674:	68b8      	ldr	r0, [r7, #8]
 800e676:	f7fd f903 	bl	800b880 <xSend_UDP_Update_IPv6>
                break;
 800e67a:	e005      	b.n	800e688 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800e67c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e67e:	68b8      	ldr	r0, [r7, #8]
 800e680:	f7fc fd68 	bl	800b154 <xSend_UDP_Update_IPv4>
                break;
 800e684:	e000      	b.n	800e688 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e686:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e68c:	441a      	add	r2, r3
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800e692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e694:	885a      	ldrh	r2, [r3, #2]
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6a8:	3306      	adds	r3, #6
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800e6b0:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800e6b6:	f107 0314 	add.w	r3, r7, #20
 800e6ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7fb fa37 	bl	8009b30 <xSendEventStructToIPTask>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d10b      	bne.n	800e6e0 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d00d      	beq.n	800e6f0 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6d8:	6879      	ldr	r1, [r7, #4]
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	4798      	blx	r3
 800e6de:	e007      	b.n	800e6f0 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	f003 0301 	and.w	r3, r3, #1
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d102      	bne.n	800e6f0 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e6ea:	68b8      	ldr	r0, [r7, #8]
 800e6ec:	f009 f902 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800e6f0:	69fb      	ldr	r3, [r7, #28]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3720      	adds	r7, #32
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b08e      	sub	sp, #56	@ 0x38
 800e6fe:	af04      	add	r7, sp, #16
 800e700:	60f8      	str	r0, [r7, #12]
 800e702:	60b9      	str	r1, [r7, #8]
 800e704:	607a      	str	r2, [r7, #4]
 800e706:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e708:	2300      	movs	r3, #0
 800e70a:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e710:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	f003 0310 	and.w	r3, r3, #16
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d104      	bne.n	800e726 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800e71c:	f7fc f94a 	bl	800a9b4 <xIsCallingFromIPTask>
 800e720:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800e726:	2300      	movs	r3, #0
 800e728:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	f003 0301 	and.w	r3, r3, #1
 800e730:	2b00      	cmp	r3, #0
 800e732:	d128      	bne.n	800e786 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800e734:	f107 0310 	add.w	r3, r7, #16
 800e738:	4618      	mov	r0, r3
 800e73a:	f7f6 fdbf 	bl	80052bc <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800e73e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	4413      	add	r3, r2
 800e744:	69ba      	ldr	r2, [r7, #24]
 800e746:	4611      	mov	r1, r2
 800e748:	4618      	mov	r0, r3
 800e74a:	f009 f86b 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 800e74e:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800e750:	6a3b      	ldr	r3, [r7, #32]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d01b      	beq.n	800e78e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800e756:	6a3b      	ldr	r3, [r7, #32]
 800e758:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e75c:	4413      	add	r3, r2
 800e75e:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	68b9      	ldr	r1, [r7, #8]
 800e764:	69f8      	ldr	r0, [r7, #28]
 800e766:	f014 f989 	bl	8022a7c <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800e76a:	f107 0218 	add.w	r2, r7, #24
 800e76e:	f107 0310 	add.w	r3, r7, #16
 800e772:	4611      	mov	r1, r2
 800e774:	4618      	mov	r0, r3
 800e776:	f7f6 fdd9 	bl	800532c <xTaskCheckForTimeOut>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d106      	bne.n	800e78e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800e780:	2300      	movs	r3, #0
 800e782:	61bb      	str	r3, [r7, #24]
 800e784:	e003      	b.n	800e78e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800e786:	68b8      	ldr	r0, [r7, #8]
 800e788:	f7fc f8cc 	bl	800a924 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800e78c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800e78e:	6a3b      	ldr	r3, [r7, #32]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d010      	beq.n	800e7b6 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e798:	6a3b      	ldr	r3, [r7, #32]
 800e79a:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7a0:	9202      	str	r2, [sp, #8]
 800e7a2:	9301      	str	r3, [sp, #4]
 800e7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	6a39      	ldr	r1, [r7, #32]
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f7ff ff4c 	bl	800e64c <prvSendUDPPacket>
 800e7b4:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800e7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3728      	adds	r7, #40	@ 0x28
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b090      	sub	sp, #64	@ 0x40
 800e7c4:	af02      	add	r7, sp, #8
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	60b9      	str	r1, [r7, #8]
 800e7ca:	607a      	str	r2, [r7, #4]
 800e7cc:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800e7de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d013      	beq.n	800e80c <FreeRTOS_sendto+0x4c>
 800e7e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7e6:	785b      	ldrb	r3, [r3, #1]
 800e7e8:	2b0a      	cmp	r3, #10
 800e7ea:	d00f      	beq.n	800e80c <FreeRTOS_sendto+0x4c>
 800e7ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7ee:	785b      	ldrb	r3, [r3, #1]
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	d00b      	beq.n	800e80c <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800e7f4:	f107 0310 	add.w	r3, r7, #16
 800e7f8:	2218      	movs	r2, #24
 800e7fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f014 f93d 	bl	8022a7c <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800e802:	2302      	movs	r3, #2
 800e804:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800e806:	f107 0310 	add.w	r3, r7, #16
 800e80a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800e80c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d104      	bne.n	800e81c <FreeRTOS_sendto+0x5c>
 800e812:	f240 6143 	movw	r1, #1603	@ 0x643
 800e816:	4820      	ldr	r0, [pc, #128]	@ (800e898 <FreeRTOS_sendto+0xd8>)
 800e818:	f7f3 f8b0 	bl	800197c <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d104      	bne.n	800e82c <FreeRTOS_sendto+0x6c>
 800e822:	f240 6144 	movw	r1, #1604	@ 0x644
 800e826:	481c      	ldr	r0, [pc, #112]	@ (800e898 <FreeRTOS_sendto+0xd8>)
 800e828:	f7f3 f8a8 	bl	800197c <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800e82c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e82e:	785b      	ldrb	r3, [r3, #1]
 800e830:	2b02      	cmp	r3, #2
 800e832:	d007      	beq.n	800e844 <FreeRTOS_sendto+0x84>
 800e834:	2b0a      	cmp	r3, #10
 800e836:	d10b      	bne.n	800e850 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800e838:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800e83c:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800e83e:	233e      	movs	r3, #62	@ 0x3e
 800e840:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e842:	e00c      	b.n	800e85e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800e844:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800e848:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800e84a:	232a      	movs	r3, #42	@ 0x2a
 800e84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e84e:	e006      	b.n	800e85e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800e850:	4812      	ldr	r0, [pc, #72]	@ (800e89c <FreeRTOS_sendto+0xdc>)
 800e852:	f013 fef7 	bl	8022644 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e856:	f06f 0315 	mvn.w	r3, #21
 800e85a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e85c:	bf00      	nop
    }

    if( lReturn == 0 )
 800e85e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e860:	2b00      	cmp	r3, #0
 800e862:	d114      	bne.n	800e88e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e868:	429a      	cmp	r2, r3
 800e86a:	d810      	bhi.n	800e88e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800e86c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e86e:	f7ff fecd 	bl	800e60c <prvMakeSureSocketIsBound>
 800e872:	4603      	mov	r3, r0
 800e874:	2b01      	cmp	r3, #1
 800e876:	d10a      	bne.n	800e88e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800e878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e87a:	9301      	str	r3, [sp, #4]
 800e87c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	68b9      	ldr	r1, [r7, #8]
 800e886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e888:	f7ff ff37 	bl	800e6fa <prvSendTo_ActualSend>
 800e88c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800e88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e890:	4618      	mov	r0, r3
 800e892:	3738      	adds	r7, #56	@ 0x38
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}
 800e898:	0802608c 	.word	0x0802608c
 800e89c:	08026140 	.word	0x08026140

0800e8a0 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b090      	sub	sp, #64	@ 0x40
 800e8a4:	af02      	add	r7, sp, #8
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	60b9      	str	r1, [r7, #8]
 800e8aa:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d013      	beq.n	800e8e2 <FreeRTOS_bind+0x42>
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	785b      	ldrb	r3, [r3, #1]
 800e8be:	2b0a      	cmp	r3, #10
 800e8c0:	d00f      	beq.n	800e8e2 <FreeRTOS_bind+0x42>
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	785b      	ldrb	r3, [r3, #1]
 800e8c6:	2b02      	cmp	r3, #2
 800e8c8:	d00b      	beq.n	800e8e2 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800e8ca:	f107 0310 	add.w	r3, r7, #16
 800e8ce:	2218      	movs	r2, #24
 800e8d0:	68b9      	ldr	r1, [r7, #8]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f014 f8d2 	bl	8022a7c <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800e8d8:	2302      	movs	r3, #2
 800e8da:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800e8dc:	f107 0310 	add.w	r3, r7, #16
 800e8e0:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800e8e2:	f7fc f867 	bl	800a9b4 <xIsCallingFromIPTask>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d004      	beq.n	800e8f6 <FreeRTOS_bind+0x56>
 800e8ec:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800e8f0:	484b      	ldr	r0, [pc, #300]	@ (800ea20 <FreeRTOS_bind+0x180>)
 800e8f2:	f7f3 f843 	bl	800197c <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800e8f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8f8:	f002 f922 	bl	8010b40 <xSocketValid>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d103      	bne.n	800e90a <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e902:	f06f 0315 	mvn.w	r3, #21
 800e906:	637b      	str	r3, [r7, #52]	@ 0x34
 800e908:	e084      	b.n	800ea14 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800e90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e90c:	69db      	ldr	r3, [r3, #28]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d009      	beq.n	800e926 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800e912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e914:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e916:	4619      	mov	r1, r3
 800e918:	4842      	ldr	r0, [pc, #264]	@ (800ea24 <FreeRTOS_bind+0x184>)
 800e91a:	f013 fe93 	bl	8022644 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e91e:	f06f 0315 	mvn.w	r3, #21
 800e922:	637b      	str	r3, [r7, #52]	@ 0x34
 800e924:	e076      	b.n	800ea14 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800e926:	2309      	movs	r3, #9
 800e928:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d042      	beq.n	800e9bc <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	785b      	ldrb	r3, [r3, #1]
 800e93a:	2b02      	cmp	r3, #2
 800e93c:	d010      	beq.n	800e960 <FreeRTOS_bind+0xc0>
 800e93e:	2b0a      	cmp	r3, #10
 800e940:	d129      	bne.n	800e996 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e944:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	3308      	adds	r3, #8
 800e94c:	2210      	movs	r2, #16
 800e94e:	4619      	mov	r1, r3
 800e950:	f014 f894 	bl	8022a7c <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e956:	7a13      	ldrb	r3, [r2, #8]
 800e958:	f043 0301 	orr.w	r3, r3, #1
 800e95c:	7213      	strb	r3, [r2, #8]
                        break;
 800e95e:	e01e      	b.n	800e99e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	061a      	lsls	r2, r3, #24
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	021b      	lsls	r3, r3, #8
 800e96c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e970:	431a      	orrs	r2, r3
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	0a1b      	lsrs	r3, r3, #8
 800e978:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e97c:	431a      	orrs	r2, r3
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	0e1b      	lsrs	r3, r3, #24
 800e984:	431a      	orrs	r2, r3
 800e986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e988:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e98a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e98c:	7a13      	ldrb	r3, [r2, #8]
 800e98e:	f36f 0300 	bfc	r3, #0, #1
 800e992:	7213      	strb	r3, [r2, #8]
                        break;
 800e994:	e003      	b.n	800e99e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800e996:	4824      	ldr	r0, [pc, #144]	@ (800ea28 <FreeRTOS_bind+0x188>)
 800e998:	f013 fe54 	bl	8022644 <lUDPLoggingPrintf>
                    break;
 800e99c:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	885b      	ldrh	r3, [r3, #2]
 800e9a2:	021b      	lsls	r3, r3, #8
 800e9a4:	b21a      	sxth	r2, r3
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	885b      	ldrh	r3, [r3, #2]
 800e9aa:	0a1b      	lsrs	r3, r3, #8
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	b21b      	sxth	r3, r3
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	b21b      	sxth	r3, r3
 800e9b4:	b29a      	uxth	r2, r3
 800e9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b8:	871a      	strh	r2, [r3, #56]	@ 0x38
 800e9ba:	e009      	b.n	800e9d0 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9be:	2200      	movs	r2, #0
 800e9c0:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c4:	3328      	adds	r3, #40	@ 0x28
 800e9c6:	2210      	movs	r2, #16
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f014 f963 	bl	8022c96 <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800e9d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e9d4:	f04f 31ff 	mov.w	r1, #4294967295
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fb f8a9 	bl	8009b30 <xSendEventStructToIPTask>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d106      	bne.n	800e9f2 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800e9e4:	4811      	ldr	r0, [pc, #68]	@ (800ea2c <FreeRTOS_bind+0x18c>)
 800e9e6:	f013 fe2d 	bl	8022644 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800e9ea:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800e9ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9f0:	e010      	b.n	800ea14 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800e9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9f4:	6858      	ldr	r0, [r3, #4]
 800e9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	2201      	movs	r2, #1
 800ea00:	2110      	movs	r1, #16
 800ea02:	f7f4 fc6f 	bl	80032e4 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800ea06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea08:	69db      	ldr	r3, [r3, #28]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d102      	bne.n	800ea14 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ea0e:	f06f 0315 	mvn.w	r3, #21
 800ea12:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800ea14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3738      	adds	r7, #56	@ 0x38
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	0802608c 	.word	0x0802608c
 800ea24:	08026168 	.word	0x08026168
 800ea28:	08026194 	.word	0x08026194
 800ea2c:	080261bc 	.word	0x080261bc

0800ea30 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
 800ea3c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d004      	beq.n	800ea52 <prvSocketBindAdd+0x22>
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ea4e:	2b06      	cmp	r3, #6
 800ea50:	d024      	beq.n	800ea9c <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	885b      	ldrh	r3, [r3, #2]
 800ea56:	4619      	mov	r1, r3
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 fdf1 	bl	800f640 <pxListFindListItemWithValue>
 800ea5e:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d01b      	beq.n	800ea9c <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ea6a:	2b06      	cmp	r3, #6
 800ea6c:	d101      	bne.n	800ea72 <prvSocketBindAdd+0x42>
 800ea6e:	493e      	ldr	r1, [pc, #248]	@ (800eb68 <prvSocketBindAdd+0x138>)
 800ea70:	e000      	b.n	800ea74 <prvSocketBindAdd+0x44>
 800ea72:	493e      	ldr	r1, [pc, #248]	@ (800eb6c <prvSocketBindAdd+0x13c>)
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	885b      	ldrh	r3, [r3, #2]
 800ea78:	021b      	lsls	r3, r3, #8
 800ea7a:	b21a      	sxth	r2, r3
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	885b      	ldrh	r3, [r3, #2]
 800ea80:	0a1b      	lsrs	r3, r3, #8
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	b21b      	sxth	r3, r3
 800ea86:	4313      	orrs	r3, r2
 800ea88:	b21b      	sxth	r3, r3
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	4838      	ldr	r0, [pc, #224]	@ (800eb70 <prvSocketBindAdd+0x140>)
 800ea90:	f013 fdd8 	bl	8022644 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800ea94:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800ea98:	617b      	str	r3, [r7, #20]
 800ea9a:	e060      	b.n	800eb5e <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	885b      	ldrh	r3, [r3, #2]
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	885b      	ldrh	r3, [r3, #2]
 800eaaa:	021b      	lsls	r3, r3, #8
 800eaac:	b21a      	sxth	r2, r3
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	885b      	ldrh	r3, [r3, #2]
 800eab2:	0a1b      	lsrs	r3, r3, #8
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	b21b      	sxth	r3, r3
 800eab8:	4313      	orrs	r3, r2
 800eaba:	b21b      	sxth	r3, r3
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	785b      	ldrb	r3, [r3, #1]
 800eac6:	2b0a      	cmp	r3, #10
 800eac8:	d109      	bne.n	800eade <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	3308      	adds	r3, #8
 800ead4:	2210      	movs	r2, #16
 800ead6:	4619      	mov	r1, r3
 800ead8:	f013 ffd0 	bl	8022a7c <memcpy>
 800eadc:	e00c      	b.n	800eaf8 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d008      	beq.n	800eaf8 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	2107      	movs	r1, #7
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fe ffb7 	bl	800da60 <FreeRTOS_FindEndPointOnIP_IPv4>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d019      	beq.n	800eb34 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	061a      	lsls	r2, r3, #24
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	021b      	lsls	r3, r3, #8
 800eb10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800eb14:	431a      	orrs	r2, r3
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	0a1b      	lsrs	r3, r3, #8
 800eb1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800eb22:	431a      	orrs	r2, r3
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	0e1b      	lsrs	r3, r3, #24
 800eb2c:	431a      	orrs	r2, r3
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	629a      	str	r2, [r3, #40]	@ 0x28
 800eb32:	e00a      	b.n	800eb4a <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	785b      	ldrb	r3, [r3, #1]
 800eb38:	2b0a      	cmp	r3, #10
 800eb3a:	d006      	beq.n	800eb4a <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	3328      	adds	r3, #40	@ 0x28
 800eb40:	2210      	movs	r2, #16
 800eb42:	2100      	movs	r1, #0
 800eb44:	4618      	mov	r0, r3
 800eb46:	f014 f8a6 	bl	8022c96 <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800eb4a:	f7f5 fefb 	bl	8004944 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	330c      	adds	r3, #12
 800eb52:	4619      	mov	r1, r3
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7f4 fdb0 	bl	80036ba <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800eb5a:	f7f5 ff01 	bl	8004960 <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800eb5e:	697b      	ldr	r3, [r7, #20]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3718      	adds	r7, #24
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	080261e0 	.word	0x080261e0
 800eb6c:	080261e4 	.word	0x080261e4
 800eb70:	080261e8 	.word	0x080261e8

0800eb74 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b08e      	sub	sp, #56	@ 0x38
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	607a      	str	r2, [r7, #4]
 800eb80:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800eb82:	2300      	movs	r3, #0
 800eb84:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800eb8a:	68f8      	ldr	r0, [r7, #12]
 800eb8c:	f001 ffd8 	bl	8010b40 <xSocketValid>
 800eb90:	4603      	mov	r3, r0
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d004      	beq.n	800eba0 <vSocketBind+0x2c>
 800eb96:	f240 716f 	movw	r1, #1903	@ 0x76f
 800eb9a:	4828      	ldr	r0, [pc, #160]	@ (800ec3c <vSocketBind+0xc8>)
 800eb9c:	f7f2 feee 	bl	800197c <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eba6:	2b06      	cmp	r3, #6
 800eba8:	d102      	bne.n	800ebb0 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800ebaa:	4b25      	ldr	r3, [pc, #148]	@ (800ec40 <vSocketBind+0xcc>)
 800ebac:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebae:	e001      	b.n	800ebb4 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800ebb0:	4b24      	ldr	r3, [pc, #144]	@ (800ec44 <vSocketBind+0xd0>)
 800ebb2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800ebb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d115      	bne.n	800ebe6 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800ebba:	f107 0314 	add.w	r3, r7, #20
 800ebbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800ebc0:	2218      	movs	r2, #24
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebc6:	f014 f866 	bl	8022c96 <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	7a1b      	ldrb	r3, [r3, #8]
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d003      	beq.n	800ebe0 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800ebd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebda:	220a      	movs	r2, #10
 800ebdc:	705a      	strb	r2, [r3, #1]
 800ebde:	e002      	b.n	800ebe6 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800ebe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe2:	2202      	movs	r2, #2
 800ebe4:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800ebe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d104      	bne.n	800ebf6 <vSocketBind+0x82>
 800ebec:	f240 719b 	movw	r1, #1947	@ 0x79b
 800ebf0:	4812      	ldr	r0, [pc, #72]	@ (800ec3c <vSocketBind+0xc8>)
 800ebf2:	f7f2 fec3 	bl	800197c <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800ebf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf8:	885b      	ldrh	r3, [r3, #2]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d111      	bne.n	800ec22 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 fcc3 	bl	800f590 <prvGetPrivatePortNumber>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec10:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800ec12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec14:	885b      	ldrh	r3, [r3, #2]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d103      	bne.n	800ec22 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800ec1a:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800ec1e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800ec20:	e006      	b.n	800ec30 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f7ff ff01 	bl	800ea30 <prvSocketBindAdd>
 800ec2e:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800ec30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800ec32:	4618      	mov	r0, r3
 800ec34:	3738      	adds	r7, #56	@ 0x38
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	0802608c 	.word	0x0802608c
 800ec40:	20001608 	.word	0x20001608
 800ec44:	200015f4 	.word	0x200015f4

0800ec48 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800ec54:	230a      	movs	r3, #10
 800ec56:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f001 ff6f 	bl	8010b40 <xSocketValid>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d102      	bne.n	800ec6e <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	617b      	str	r3, [r7, #20]
 800ec6c:	e02f      	b.n	800ecce <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ec74:	2b06      	cmp	r3, #6
 800ec76:	d10c      	bne.n	800ec92 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	2200      	movs	r2, #0
 800ec84:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800ec90:	e00a      	b.n	800eca8 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ec98:	2b11      	cmp	r3, #17
 800ec9a:	d105      	bne.n	800eca8 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	2200      	movs	r2, #0
 800eca6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800eca8:	f107 0308 	add.w	r3, r7, #8
 800ecac:	f04f 31ff 	mov.w	r1, #4294967295
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7fa ff3d 	bl	8009b30 <xSendEventStructToIPTask>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d106      	bne.n	800ecca <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800ecbc:	4806      	ldr	r0, [pc, #24]	@ (800ecd8 <FreeRTOS_closesocket+0x90>)
 800ecbe:	f013 fcc1 	bl	8022644 <lUDPLoggingPrintf>
            xResult = -1;
 800ecc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc6:	617b      	str	r3, [r7, #20]
 800ecc8:	e001      	b.n	800ecce <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800ecca:	2301      	movs	r3, #1
 800eccc:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800ecce:	697b      	ldr	r3, [r7, #20]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3718      	adds	r7, #24
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	0802620c 	.word	0x0802620c

0800ecdc <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800ecdc:	b590      	push	{r4, r7, lr}
 800ecde:	b085      	sub	sp, #20
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ecea:	2b06      	cmp	r3, #6
 800ecec:	d129      	bne.n	800ed42 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d005      	beq.n	800ed04 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f008 fdf8 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f007 f804 	bl	8015d18 <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d005      	beq.n	800ed26 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7f7 fe63 	bl	80069ec <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d005      	beq.n	800ed3c <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7f7 fe58 	bl	80069ec <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 f8bd 	bl	800eebc <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	69db      	ldr	r3, [r3, #28]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d008      	beq.n	800ed5c <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800ed4a:	f7f5 fdfb 	bl	8004944 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	330c      	adds	r3, #12
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7f4 fd0e 	bl	8003774 <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800ed58:	f7f5 fe02 	bl	8004960 <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed62:	2b11      	cmp	r3, #17
 800ed64:	d10f      	bne.n	800ed86 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800ed66:	e00a      	b.n	800ed7e <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7f4 fcfe 	bl	8003774 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ed78:	68f8      	ldr	r0, [r7, #12]
 800ed7a:	f008 fdbb 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d1f0      	bne.n	800ed68 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d004      	beq.n	800ed98 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7f4 fc0c 	bl	80035b0 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed9e:	2b06      	cmp	r3, #6
 800eda0:	d10c      	bne.n	800edbc <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 f816 	bl	800edd4 <prvSocketProps>
 800eda8:	4604      	mov	r4, r0
 800edaa:	f008 fdf5 	bl	8017998 <uxGetNumberOfFreeNetworkBuffers>
 800edae:	4602      	mov	r2, r0
 800edb0:	4b06      	ldr	r3, [pc, #24]	@ (800edcc <vSocketClose+0xf0>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4621      	mov	r1, r4
 800edb6:	4806      	ldr	r0, [pc, #24]	@ (800edd0 <vSocketClose+0xf4>)
 800edb8:	f013 fc44 	bl	8022644 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f7f7 fe15 	bl	80069ec <vPortFree>

    return NULL;
 800edc2:	2300      	movs	r3, #0
} /* Tested */
 800edc4:	4618      	mov	r0, r3
 800edc6:	3714      	adds	r7, #20
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd90      	pop	{r4, r7, pc}
 800edcc:	20001608 	.word	0x20001608
 800edd0:	0802622c 	.word	0x0802622c

0800edd4 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b086      	sub	sp, #24
 800edd8:	af04      	add	r7, sp, #16
 800edda:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ede2:	2b06      	cmp	r3, #6
 800ede4:	d132      	bne.n	800ee4c <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	7a1b      	ldrb	r3, [r3, #8]
 800edea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d002      	beq.n	800edfa <prvSocketProps+0x26>
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d014      	beq.n	800ee22 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800edf8:	e050      	b.n	800ee9c <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800ee02:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800ee0e:	9202      	str	r2, [sp, #8]
 800ee10:	9301      	str	r3, [sp, #4]
 800ee12:	9000      	str	r0, [sp, #0]
 800ee14:	460b      	mov	r3, r1
 800ee16:	4a24      	ldr	r2, [pc, #144]	@ (800eea8 <prvSocketProps+0xd4>)
 800ee18:	215c      	movs	r1, #92	@ 0x5c
 800ee1a:	4824      	ldr	r0, [pc, #144]	@ (800eeac <prvSocketProps+0xd8>)
 800ee1c:	f014 fc3e 	bl	802369c <snprintf>
                            break;
 800ee20:	e03c      	b.n	800ee9c <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800ee2c:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800ee38:	9202      	str	r2, [sp, #8]
 800ee3a:	9301      	str	r3, [sp, #4]
 800ee3c:	9000      	str	r0, [sp, #0]
 800ee3e:	460b      	mov	r3, r1
 800ee40:	4a1b      	ldr	r2, [pc, #108]	@ (800eeb0 <prvSocketProps+0xdc>)
 800ee42:	215c      	movs	r1, #92	@ 0x5c
 800ee44:	4819      	ldr	r0, [pc, #100]	@ (800eeac <prvSocketProps+0xd8>)
 800ee46:	f014 fc29 	bl	802369c <snprintf>
                            break;
 800ee4a:	e027      	b.n	800ee9c <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ee52:	2b11      	cmp	r3, #17
 800ee54:	d122      	bne.n	800ee9c <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	7a1b      	ldrb	r3, [r3, #8]
 800ee5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d002      	beq.n	800ee6a <prvSocketProps+0x96>
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d00c      	beq.n	800ee82 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800ee68:	e018      	b.n	800ee9c <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	4613      	mov	r3, r2
 800ee76:	4a0f      	ldr	r2, [pc, #60]	@ (800eeb4 <prvSocketProps+0xe0>)
 800ee78:	215c      	movs	r1, #92	@ 0x5c
 800ee7a:	480c      	ldr	r0, [pc, #48]	@ (800eeac <prvSocketProps+0xd8>)
 800ee7c:	f014 fc0e 	bl	802369c <snprintf>
                        break;
 800ee80:	e00c      	b.n	800ee9c <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800ee8c:	9300      	str	r3, [sp, #0]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	4a09      	ldr	r2, [pc, #36]	@ (800eeb8 <prvSocketProps+0xe4>)
 800ee92:	215c      	movs	r1, #92	@ 0x5c
 800ee94:	4805      	ldr	r0, [pc, #20]	@ (800eeac <prvSocketProps+0xd8>)
 800ee96:	f014 fc01 	bl	802369c <snprintf>
                        break;
 800ee9a:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800ee9c:	4b03      	ldr	r3, [pc, #12]	@ (800eeac <prvSocketProps+0xd8>)
    }
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3708      	adds	r7, #8
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	08026260 	.word	0x08026260
 800eeac:	20001598 	.word	0x20001598
 800eeb0:	08026280 	.word	0x08026280
 800eeb4:	080262a0 	.word	0x080262a0
 800eeb8:	080262b0 	.word	0x080262b0

0800eebc <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b088      	sub	sp, #32
 800eec0:	af02      	add	r7, sp, #8
 800eec2:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800eec4:	4b3c      	ldr	r3, [pc, #240]	@ (800efb8 <prvTCPSetSocketCount+0xfc>)
 800eec6:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800eecc:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d12b      	bne.n	800ef30 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800eede:	e022      	b.n	800ef26 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d017      	beq.n	800ef26 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800eefa:	89fa      	ldrh	r2, [r7, #14]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d112      	bne.n	800ef26 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ef06:	f003 0304 	and.w	r3, r3, #4
 800ef0a:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d107      	bne.n	800ef20 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ef16:	f003 0302 	and.w	r3, r3, #2
 800ef1a:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d002      	beq.n	800ef26 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800ef20:	68b8      	ldr	r0, [r7, #8]
 800ef22:	f7ff fedb 	bl	800ecdc <vSocketClose>
            while( pxIterator != pxEnd )
 800ef26:	697a      	ldr	r2, [r7, #20]
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d1d8      	bne.n	800eee0 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800ef2e:	e03e      	b.n	800efae <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	617b      	str	r3, [r7, #20]
 800ef36:	e036      	b.n	800efa6 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	d12b      	bne.n	800efa0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800ef4c:	89fa      	ldrh	r2, [r7, #14]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d126      	bne.n	800efa0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d021      	beq.n	800efa0 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ef62:	3b01      	subs	r3, #1
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ef70:	4619      	mov	r1, r3
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ef78:	461a      	mov	r2, r3
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800ef80:	4618      	mov	r0, r3
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d101      	bne.n	800ef90 <prvTCPSetSocketCount+0xd4>
 800ef8c:	4b0b      	ldr	r3, [pc, #44]	@ (800efbc <prvTCPSetSocketCount+0x100>)
 800ef8e:	e000      	b.n	800ef92 <prvTCPSetSocketCount+0xd6>
 800ef90:	4b0b      	ldr	r3, [pc, #44]	@ (800efc0 <prvTCPSetSocketCount+0x104>)
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	4603      	mov	r3, r0
 800ef96:	480b      	ldr	r0, [pc, #44]	@ (800efc4 <prvTCPSetSocketCount+0x108>)
 800ef98:	f013 fb54 	bl	8022644 <lUDPLoggingPrintf>
                    break;
 800ef9c:	bf00      	nop
    }
 800ef9e:	e006      	b.n	800efae <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800efa6:	697a      	ldr	r2, [r7, #20]
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d1c4      	bne.n	800ef38 <prvTCPSetSocketCount+0x7c>
    }
 800efae:	bf00      	nop
 800efb0:	3718      	adds	r7, #24
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	20001610 	.word	0x20001610
 800efbc:	080262c0 	.word	0x080262c0
 800efc0:	080262c4 	.word	0x080262c4
 800efc4:	080262c8 	.word	0x080262c8

0800efc8 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800efc8:	b580      	push	{r7, lr}
 800efca:	b086      	sub	sp, #24
 800efcc:	af00      	add	r7, sp, #0
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800efda:	2b06      	cmp	r3, #6
 800efdc:	d00d      	beq.n	800effa <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	2b04      	cmp	r3, #4
 800efe2:	d101      	bne.n	800efe8 <prvSockopt_so_buffer+0x20>
 800efe4:	4b23      	ldr	r3, [pc, #140]	@ (800f074 <prvSockopt_so_buffer+0xac>)
 800efe6:	e000      	b.n	800efea <prvSockopt_so_buffer+0x22>
 800efe8:	4b23      	ldr	r3, [pc, #140]	@ (800f078 <prvSockopt_so_buffer+0xb0>)
 800efea:	4619      	mov	r1, r3
 800efec:	4823      	ldr	r0, [pc, #140]	@ (800f07c <prvSockopt_so_buffer+0xb4>)
 800efee:	f013 fb29 	bl	8022644 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eff2:	f06f 0315 	mvn.w	r3, #21
 800eff6:	617b      	str	r3, [r7, #20]
 800eff8:	e036      	b.n	800f068 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	2b04      	cmp	r3, #4
 800effe:	d104      	bne.n	800f00a <prvSockopt_so_buffer+0x42>
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d107      	bne.n	800f01a <prvSockopt_so_buffer+0x52>
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	2b05      	cmp	r3, #5
 800f00e:	d112      	bne.n	800f036 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00d      	beq.n	800f036 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	2b04      	cmp	r3, #4
 800f01e:	d101      	bne.n	800f024 <prvSockopt_so_buffer+0x5c>
 800f020:	4b14      	ldr	r3, [pc, #80]	@ (800f074 <prvSockopt_so_buffer+0xac>)
 800f022:	e000      	b.n	800f026 <prvSockopt_so_buffer+0x5e>
 800f024:	4b14      	ldr	r3, [pc, #80]	@ (800f078 <prvSockopt_so_buffer+0xb0>)
 800f026:	4619      	mov	r1, r3
 800f028:	4815      	ldr	r0, [pc, #84]	@ (800f080 <prvSockopt_so_buffer+0xb8>)
 800f02a:	f013 fb0b 	bl	8022644 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f02e:	f06f 0315 	mvn.w	r3, #21
 800f032:	617b      	str	r3, [r7, #20]
 800f034:	e018      	b.n	800f068 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	2b04      	cmp	r3, #4
 800f040:	d10c      	bne.n	800f05c <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800f048:	4619      	mov	r1, r3
 800f04a:	6938      	ldr	r0, [r7, #16]
 800f04c:	f7fb fe92 	bl	800ad74 <FreeRTOS_round_up>
 800f050:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800f05a:	e003      	b.n	800f064 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	693a      	ldr	r2, [r7, #16]
 800f060:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800f064:	2300      	movs	r3, #0
 800f066:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800f068:	697b      	ldr	r3, [r7, #20]
    }
 800f06a:	4618      	mov	r0, r3
 800f06c:	3718      	adds	r7, #24
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	080262f4 	.word	0x080262f4
 800f078:	080262f8 	.word	0x080262f8
 800f07c:	080262fc 	.word	0x080262fc
 800f080:	08026320 	.word	0x08026320

0800f084 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800f084:	b480      	push	{r7}
 800f086:	b087      	sub	sp, #28
 800f088:	af00      	add	r7, sp, #0
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800f090:	2300      	movs	r3, #0
 800f092:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	2b09      	cmp	r3, #9
 800f098:	d002      	beq.n	800f0a0 <prvSetOptionCallback+0x1c>
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	2b0a      	cmp	r3, #10
 800f09e:	d102      	bne.n	800f0a6 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800f0a0:	2311      	movs	r3, #17
 800f0a2:	613b      	str	r3, [r7, #16]
 800f0a4:	e001      	b.n	800f0aa <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800f0a6:	2306      	movs	r3, #6
 800f0a8:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d002      	beq.n	800f0be <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f0b8:	f06f 0315 	mvn.w	r3, #21
 800f0bc:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d131      	bne.n	800f128 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	3b06      	subs	r3, #6
 800f0c8:	2b04      	cmp	r3, #4
 800f0ca:	d829      	bhi.n	800f120 <prvSetOptionCallback+0x9c>
 800f0cc:	a201      	add	r2, pc, #4	@ (adr r2, 800f0d4 <prvSetOptionCallback+0x50>)
 800f0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d2:	bf00      	nop
 800f0d4:	0800f0e9 	.word	0x0800f0e9
 800f0d8:	0800f0f5 	.word	0x0800f0f5
 800f0dc:	0800f101 	.word	0x0800f101
 800f0e0:	0800f10d 	.word	0x0800f10d
 800f0e4:	0800f117 	.word	0x0800f117
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800f0f2:	e019      	b.n	800f128 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	685a      	ldr	r2, [r3, #4]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800f0fe:	e013      	b.n	800f128 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	689a      	ldr	r2, [r3, #8]
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800f10a:	e00d      	b.n	800f128 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	68da      	ldr	r2, [r3, #12]
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800f114:	e008      	b.n	800f128 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	691a      	ldr	r2, [r3, #16]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800f11e:	e003      	b.n	800f128 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800f120:	f06f 0315 	mvn.w	r3, #21
 800f124:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800f126:	bf00      	nop
            }
        }

        return xReturn;
 800f128:	697b      	ldr	r3, [r7, #20]
    }
 800f12a:	4618      	mov	r0, r3
 800f12c:	371c      	adds	r7, #28
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop

0800f138 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800f138:	b580      	push	{r7, lr}
 800f13a:	b086      	sub	sp, #24
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f142:	f06f 0315 	mvn.w	r3, #21
 800f146:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	3354      	adds	r3, #84	@ 0x54
 800f14c:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f154:	2b06      	cmp	r3, #6
 800f156:	d003      	beq.n	800f160 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800f158:	4825      	ldr	r0, [pc, #148]	@ (800f1f0 <prvSetOptionTCPWindows+0xb8>)
 800f15a:	f013 fa73 	bl	8022644 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800f15e:	e042      	b.n	800f1e6 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	461a      	mov	r2, r3
 800f168:	2104      	movs	r1, #4
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f7ff ff2c 	bl	800efc8 <prvSockopt_so_buffer>
 800f170:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d133      	bne.n	800f1e0 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	3308      	adds	r3, #8
 800f17c:	461a      	mov	r2, r3
 800f17e:	2105      	movs	r1, #5
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7ff ff21 	bl	800efc8 <prvSockopt_so_buffer>
 800f186:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d12a      	bne.n	800f1e4 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	461a      	mov	r2, r3
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800f1ac:	f003 0301 	and.w	r3, r3, #1
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d017      	beq.n	800f1e6 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800f1b6:	693b      	ldr	r3, [r7, #16]
 800f1b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f1bc:	693a      	ldr	r2, [r7, #16]
 800f1be:	8bd2      	ldrh	r2, [r2, #30]
 800f1c0:	fb03 f202 	mul.w	r2, r3, r2
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f1d0:	693a      	ldr	r2, [r7, #16]
 800f1d2:	8bd2      	ldrh	r2, [r2, #30]
 800f1d4:	fb03 f202 	mul.w	r2, r3, r2
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800f1de:	e002      	b.n	800f1e6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800f1e0:	bf00      	nop
 800f1e2:	e000      	b.n	800f1e6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800f1e4:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800f1e6:	697b      	ldr	r3, [r7, #20]
    }
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3718      	adds	r7, #24
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	08026348 	.word	0x08026348

0800f1f4 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f1fe:	f06f 0315 	mvn.w	r3, #21
 800f202:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f20e:	2b06      	cmp	r3, #6
 800f210:	d003      	beq.n	800f21a <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800f212:	4813      	ldr	r0, [pc, #76]	@ (800f260 <prvSetOptionLowHighWater+0x6c>)
 800f214:	f013 fa16 	bl	8022644 <lUDPLoggingPrintf>
 800f218:	e01c      	b.n	800f254 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	429a      	cmp	r2, r3
 800f224:	d206      	bcs.n	800f234 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	685a      	ldr	r2, [r3, #4]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800f230:	429a      	cmp	r2, r3
 800f232:	d903      	bls.n	800f23c <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800f234:	480b      	ldr	r0, [pc, #44]	@ (800f264 <prvSetOptionLowHighWater+0x70>)
 800f236:	f013 fa05 	bl	8022644 <lUDPLoggingPrintf>
 800f23a:	e00b      	b.n	800f254 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	685a      	ldr	r2, [r3, #4]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800f250:	2300      	movs	r3, #0
 800f252:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f254:	68fb      	ldr	r3, [r7, #12]
    }
 800f256:	4618      	mov	r0, r3
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	0802636c 	.word	0x0802636c
 800f264:	080263a0 	.word	0x080263a0

0800f268 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f272:	f06f 0315 	mvn.w	r3, #21
 800f276:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f27e:	2b06      	cmp	r3, #6
 800f280:	d126      	bne.n	800f2d0 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d007      	beq.n	800f29a <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800f290:	f043 0302 	orr.w	r3, r3, #2
 800f294:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800f298:	e006      	b.n	800f2a8 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800f2a0:	f36f 0341 	bfc	r3, #1, #1
 800f2a4:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f2ae:	2b04      	cmp	r3, #4
 800f2b0:	d90c      	bls.n	800f2cc <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f001 fbd8 	bl	8010a68 <FreeRTOS_tx_size>
 800f2b8:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d006      	beq.n	800f2cc <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f2c6:	2006      	movs	r0, #6
 800f2c8:	f7fa fc1c 	bl	8009b04 <xSendEventToIPTask>
            }

            xReturn = 0;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
    }
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b084      	sub	sp, #16
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
 800f2e2:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f2e4:	f06f 0315 	mvn.w	r3, #21
 800f2e8:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f2f0:	2b06      	cmp	r3, #6
 800f2f2:	d122      	bne.n	800f33a <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d007      	beq.n	800f30c <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f302:	f043 0304 	orr.w	r3, r3, #4
 800f306:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800f30a:	e006      	b.n	800f31a <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f312:	f36f 0382 	bfc	r3, #2, #1
 800f316:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f320:	f043 0301 	orr.w	r3, r3, #1
 800f324:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2201      	movs	r2, #1
 800f32c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f330:	2006      	movs	r0, #6
 800f332:	f7fa fbe7 	bl	8009b04 <xSendEventToIPTask>
            xReturn = 0;
 800f336:	2300      	movs	r3, #0
 800f338:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f33a:	68fb      	ldr	r3, [r7, #12]
    }
 800f33c:	4618      	mov	r0, r3
 800f33e:	3710      	adds	r7, #16
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800f344:	b480      	push	{r7}
 800f346:	b087      	sub	sp, #28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d110      	bne.n	800f37e <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f362:	2b11      	cmp	r3, #17
 800f364:	d107      	bne.n	800f376 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d902      	bls.n	800f376 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800f370:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f374:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	697a      	ldr	r2, [r7, #20]
 800f37a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800f37c:	e002      	b.n	800f384 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	697a      	ldr	r2, [r7, #20]
 800f382:	621a      	str	r2, [r3, #32]
}
 800f384:	bf00      	nop
 800f386:	371c      	adds	r7, #28
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800f390:	b480      	push	{r7}
 800f392:	b085      	sub	sp, #20
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f39a:	f06f 0315 	mvn.w	r3, #21
 800f39e:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f3a6:	2b06      	cmp	r3, #6
 800f3a8:	d114      	bne.n	800f3d4 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d007      	beq.n	800f3c2 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f3b8:	f043 0308 	orr.w	r3, r3, #8
 800f3bc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f3c0:	e006      	b.n	800f3d0 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f3c8:	f36f 03c3 	bfc	r3, #3, #1
 800f3cc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
    }
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3714      	adds	r7, #20
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr

0800f3e2 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800f3e2:	b480      	push	{r7}
 800f3e4:	b085      	sub	sp, #20
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
 800f3ea:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f3ec:	f06f 0315 	mvn.w	r3, #21
 800f3f0:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f3f8:	2b06      	cmp	r3, #6
 800f3fa:	d114      	bne.n	800f426 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d007      	beq.n	800f414 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800f404:	687a      	ldr	r2, [r7, #4]
 800f406:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f40a:	f043 0310 	orr.w	r3, r3, #16
 800f40e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f412:	e006      	b.n	800f422 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f41a:	f36f 1304 	bfc	r3, #4, #1
 800f41e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f426:	68fb      	ldr	r3, [r7, #12]
    }
 800f428:	4618      	mov	r0, r3
 800f42a:	3714      	adds	r7, #20
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b086      	sub	sp, #24
 800f438:	af00      	add	r7, sp, #0
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	60b9      	str	r1, [r7, #8]
 800f43e:	607a      	str	r2, [r7, #4]
 800f440:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f442:	f06f 0315 	mvn.w	r3, #21
 800f446:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800f44c:	6938      	ldr	r0, [r7, #16]
 800f44e:	f001 fb77 	bl	8010b40 <xSocketValid>
 800f452:	4603      	mov	r3, r0
 800f454:	2b01      	cmp	r3, #1
 800f456:	f040 8093 	bne.w	800f580 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2b12      	cmp	r3, #18
 800f45e:	f200 808b 	bhi.w	800f578 <FreeRTOS_setsockopt+0x144>
 800f462:	a201      	add	r2, pc, #4	@ (adr r2, 800f468 <FreeRTOS_setsockopt+0x34>)
 800f464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f468:	0800f4b5 	.word	0x0800f4b5
 800f46c:	0800f4c5 	.word	0x0800f4c5
 800f470:	0800f4d5 	.word	0x0800f4d5
 800f474:	0800f515 	.word	0x0800f515
 800f478:	0800f52f 	.word	0x0800f52f
 800f47c:	0800f52f 	.word	0x0800f52f
 800f480:	0800f507 	.word	0x0800f507
 800f484:	0800f507 	.word	0x0800f507
 800f488:	0800f507 	.word	0x0800f507
 800f48c:	0800f507 	.word	0x0800f507
 800f490:	0800f507 	.word	0x0800f507
 800f494:	0800f549 	.word	0x0800f549
 800f498:	0800f555 	.word	0x0800f555
 800f49c:	0800f53d 	.word	0x0800f53d
 800f4a0:	0800f561 	.word	0x0800f561
 800f4a4:	0800f56d 	.word	0x0800f56d
 800f4a8:	0800f579 	.word	0x0800f579
 800f4ac:	0800f579 	.word	0x0800f579
 800f4b0:	0800f523 	.word	0x0800f523
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	6839      	ldr	r1, [r7, #0]
 800f4b8:	6938      	ldr	r0, [r7, #16]
 800f4ba:	f7ff ff43 	bl	800f344 <prvSetOptionTimeout>
                xReturn = 0;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	617b      	str	r3, [r7, #20]
                break;
 800f4c2:	e060      	b.n	800f586 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	6839      	ldr	r1, [r7, #0]
 800f4c8:	6938      	ldr	r0, [r7, #16]
 800f4ca:	f7ff ff3b 	bl	800f344 <prvSetOptionTimeout>
                xReturn = 0;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	617b      	str	r3, [r7, #20]
                break;
 800f4d2:	e058      	b.n	800f586 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d109      	bne.n	800f4ee <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f4e0:	f023 0302 	bic.w	r3, r3, #2
 800f4e4:	b2da      	uxtb	r2, r3
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800f4ec:	e008      	b.n	800f500 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f4f4:	f043 0302 	orr.w	r3, r3, #2
 800f4f8:	b2da      	uxtb	r2, r3
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800f500:	2300      	movs	r3, #0
 800f502:	617b      	str	r3, [r7, #20]
                break;
 800f504:	e03f      	b.n	800f586 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	6879      	ldr	r1, [r7, #4]
 800f50a:	6938      	ldr	r0, [r7, #16]
 800f50c:	f7ff fdba 	bl	800f084 <prvSetOptionCallback>
 800f510:	6178      	str	r0, [r7, #20]
                        break;
 800f512:	e038      	b.n	800f586 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800f51c:	2300      	movs	r3, #0
 800f51e:	617b      	str	r3, [r7, #20]
                        break;
 800f520:	e031      	b.n	800f586 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800f522:	6839      	ldr	r1, [r7, #0]
 800f524:	6938      	ldr	r0, [r7, #16]
 800f526:	f7ff fe65 	bl	800f1f4 <prvSetOptionLowHighWater>
 800f52a:	6178      	str	r0, [r7, #20]
                        break;
 800f52c:	e02b      	b.n	800f586 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800f52e:	683a      	ldr	r2, [r7, #0]
 800f530:	6879      	ldr	r1, [r7, #4]
 800f532:	6938      	ldr	r0, [r7, #16]
 800f534:	f7ff fd48 	bl	800efc8 <prvSockopt_so_buffer>
 800f538:	6178      	str	r0, [r7, #20]
                        break;
 800f53a:	e024      	b.n	800f586 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	6938      	ldr	r0, [r7, #16]
 800f540:	f7ff fdfa 	bl	800f138 <prvSetOptionTCPWindows>
 800f544:	6178      	str	r0, [r7, #20]
                        break;
 800f546:	e01e      	b.n	800f586 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800f548:	6839      	ldr	r1, [r7, #0]
 800f54a:	6938      	ldr	r0, [r7, #16]
 800f54c:	f7ff ff20 	bl	800f390 <prvSetOptionReuseListenSocket>
 800f550:	6178      	str	r0, [r7, #20]
                        break;
 800f552:	e018      	b.n	800f586 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800f554:	6839      	ldr	r1, [r7, #0]
 800f556:	6938      	ldr	r0, [r7, #16]
 800f558:	f7ff ff43 	bl	800f3e2 <prvSetOptionCloseAfterSend>
 800f55c:	6178      	str	r0, [r7, #20]
                        break;
 800f55e:	e012      	b.n	800f586 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800f560:	6839      	ldr	r1, [r7, #0]
 800f562:	6938      	ldr	r0, [r7, #16]
 800f564:	f7ff fe80 	bl	800f268 <prvSetOptionSetFullSize>
 800f568:	6178      	str	r0, [r7, #20]
                        break;
 800f56a:	e00c      	b.n	800f586 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800f56c:	6839      	ldr	r1, [r7, #0]
 800f56e:	6938      	ldr	r0, [r7, #16]
 800f570:	f7ff feb3 	bl	800f2da <prvSetOptionStopRX>
 800f574:	6178      	str	r0, [r7, #20]
                        break;
 800f576:	e006      	b.n	800f586 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800f578:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800f57c:	617b      	str	r3, [r7, #20]
                break;
 800f57e:	e002      	b.n	800f586 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f580:	f06f 0315 	mvn.w	r3, #21
 800f584:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800f586:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f588:	4618      	mov	r0, r3
 800f58a:	3718      	adds	r7, #24
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b086      	sub	sp, #24
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800f598:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800f59c:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800f59e:	89fb      	ldrh	r3, [r7, #14]
 800f5a0:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2b06      	cmp	r3, #6
 800f5ae:	d102      	bne.n	800f5b6 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800f5b0:	4b21      	ldr	r3, [pc, #132]	@ (800f638 <prvGetPrivatePortNumber+0xa8>)
 800f5b2:	613b      	str	r3, [r7, #16]
 800f5b4:	e001      	b.n	800f5ba <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800f5b6:	4b21      	ldr	r3, [pc, #132]	@ (800f63c <prvGetPrivatePortNumber+0xac>)
 800f5b8:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800f5ba:	f107 0308 	add.w	r3, r7, #8
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7f2 faa6 	bl	8001b10 <xApplicationGetRandomNumber>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d030      	beq.n	800f62c <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800f5ce:	89fa      	ldrh	r2, [r7, #14]
 800f5d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5d4:	fb01 f202 	mul.w	r2, r1, r2
 800f5d8:	1a9b      	subs	r3, r3, r2
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f5e0:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800f5e2:	8abb      	ldrh	r3, [r7, #20]
 800f5e4:	021b      	lsls	r3, r3, #8
 800f5e6:	b21a      	sxth	r2, r3
 800f5e8:	8abb      	ldrh	r3, [r7, #20]
 800f5ea:	0a1b      	lsrs	r3, r3, #8
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	b21b      	sxth	r3, r3
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	b21b      	sxth	r3, r3
 800f5f4:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	6938      	ldr	r0, [r7, #16]
 800f5fa:	f000 f821 	bl	800f640 <pxListFindListItemWithValue>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d10a      	bne.n	800f61a <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800f604:	8abb      	ldrh	r3, [r7, #20]
 800f606:	021b      	lsls	r3, r3, #8
 800f608:	b21a      	sxth	r2, r3
 800f60a:	8abb      	ldrh	r3, [r7, #20]
 800f60c:	0a1b      	lsrs	r3, r3, #8
 800f60e:	b29b      	uxth	r3, r3
 800f610:	b21b      	sxth	r3, r3
 800f612:	4313      	orrs	r3, r2
 800f614:	b21b      	sxth	r3, r3
 800f616:	82bb      	strh	r3, [r7, #20]
            break;
 800f618:	e009      	b.n	800f62e <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800f61e:	8afb      	ldrh	r3, [r7, #22]
 800f620:	3b01      	subs	r3, #1
 800f622:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800f624:	8afb      	ldrh	r3, [r7, #22]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d1c7      	bne.n	800f5ba <prvGetPrivatePortNumber+0x2a>
 800f62a:	e000      	b.n	800f62e <prvGetPrivatePortNumber+0x9e>
            break;
 800f62c:	bf00      	nop

    return usResult;
 800f62e:	8abb      	ldrh	r3, [r7, #20]
}
 800f630:	4618      	mov	r0, r3
 800f632:	3718      	adds	r7, #24
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	20001608 	.word	0x20001608
 800f63c:	200015f4 	.word	0x200015f4

0800f640 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800f64a:	2300      	movs	r3, #0
 800f64c:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800f64e:	f7fa fe0b 	bl	800a268 <xIPIsNetworkTaskReady>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d018      	beq.n	800f68a <pxListFindListItemWithValue+0x4a>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d015      	beq.n	800f68a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	3308      	adds	r3, #8
 800f662:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	613b      	str	r3, [r7, #16]
 800f66a:	e00a      	b.n	800f682 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	683a      	ldr	r2, [r7, #0]
 800f672:	429a      	cmp	r2, r3
 800f674:	d102      	bne.n	800f67c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	617b      	str	r3, [r7, #20]
                break;
 800f67a:	e006      	b.n	800f68a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800f682:	693a      	ldr	r2, [r7, #16]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	429a      	cmp	r2, r3
 800f688:	d1f0      	bne.n	800f66c <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800f68a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f68c:	4618      	mov	r0, r3
 800f68e:	3718      	adds	r7, #24
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800f69c:	2300      	movs	r3, #0
 800f69e:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800f6a0:	6879      	ldr	r1, [r7, #4]
 800f6a2:	480b      	ldr	r0, [pc, #44]	@ (800f6d0 <pxUDPSocketLookup+0x3c>)
 800f6a4:	f7ff ffcc 	bl	800f640 <pxListFindListItemWithValue>
 800f6a8:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d00a      	beq.n	800f6c6 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d104      	bne.n	800f6c6 <pxUDPSocketLookup+0x32>
 800f6bc:	f640 4111 	movw	r1, #3089	@ 0xc11
 800f6c0:	4804      	ldr	r0, [pc, #16]	@ (800f6d4 <pxUDPSocketLookup+0x40>)
 800f6c2:	f7f2 f95b 	bl	800197c <vAssertCalled>
    }

    return pxSocket;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3710      	adds	r7, #16
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	200015f4 	.word	0x200015f4
 800f6d4:	0802608c 	.word	0x0802608c

0800f6d8 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b08b      	sub	sp, #44	@ 0x2c
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800f6e6:	1d3b      	adds	r3, r7, #4
 800f6e8:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f6f2:	e062      	b.n	800f7ba <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800f6f4:	697a      	ldr	r2, [r7, #20]
 800f6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f8:	4413      	add	r3, r2
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800f6fe:	2302      	movs	r3, #2
 800f700:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f702:	7ffa      	ldrb	r2, [r7, #31]
 800f704:	4b32      	ldr	r3, [pc, #200]	@ (800f7d0 <FreeRTOS_inet_ntoa+0xf8>)
 800f706:	fba3 1302 	umull	r1, r3, r3, r2
 800f70a:	08d9      	lsrs	r1, r3, #3
 800f70c:	460b      	mov	r3, r1
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	440b      	add	r3, r1
 800f712:	005b      	lsls	r3, r3, #1
 800f714:	1ad3      	subs	r3, r2, r3
 800f716:	b2d9      	uxtb	r1, r3
 800f718:	f107 020c 	add.w	r2, r7, #12
 800f71c:	69bb      	ldr	r3, [r7, #24]
 800f71e:	4413      	add	r3, r2
 800f720:	460a      	mov	r2, r1
 800f722:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800f724:	7ffb      	ldrb	r3, [r7, #31]
 800f726:	4a2a      	ldr	r2, [pc, #168]	@ (800f7d0 <FreeRTOS_inet_ntoa+0xf8>)
 800f728:	fba2 2303 	umull	r2, r3, r2, r3
 800f72c:	08db      	lsrs	r3, r3, #3
 800f72e:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	2b01      	cmp	r3, #1
 800f734:	d003      	beq.n	800f73e <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	3b01      	subs	r3, #1
 800f73a:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f73c:	e7e1      	b.n	800f702 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800f73e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800f740:	7ffb      	ldrb	r3, [r7, #31]
 800f742:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f744:	2300      	movs	r3, #0
 800f746:	61bb      	str	r3, [r7, #24]
 800f748:	e009      	b.n	800f75e <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800f74a:	f107 020c 	add.w	r2, r7, #12
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	4413      	add	r3, r2
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d106      	bne.n	800f766 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	3301      	adds	r3, #1
 800f75c:	61bb      	str	r3, [r7, #24]
 800f75e:	69bb      	ldr	r3, [r7, #24]
 800f760:	2b01      	cmp	r3, #1
 800f762:	d9f2      	bls.n	800f74a <FreeRTOS_inet_ntoa+0x72>
 800f764:	e012      	b.n	800f78c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800f766:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f768:	e010      	b.n	800f78c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800f76a:	f107 020c 	add.w	r2, r7, #12
 800f76e:	69bb      	ldr	r3, [r7, #24]
 800f770:	4413      	add	r3, r2
 800f772:	781a      	ldrb	r2, [r3, #0]
 800f774:	6839      	ldr	r1, [r7, #0]
 800f776:	6a3b      	ldr	r3, [r7, #32]
 800f778:	440b      	add	r3, r1
 800f77a:	3230      	adds	r2, #48	@ 0x30
 800f77c:	b2d2      	uxtb	r2, r2
 800f77e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800f780:	6a3b      	ldr	r3, [r7, #32]
 800f782:	3301      	adds	r3, #1
 800f784:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	3301      	adds	r3, #1
 800f78a:	61bb      	str	r3, [r7, #24]
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	2b02      	cmp	r3, #2
 800f790:	d9eb      	bls.n	800f76a <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800f792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f794:	2b02      	cmp	r3, #2
 800f796:	d805      	bhi.n	800f7a4 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800f798:	683a      	ldr	r2, [r7, #0]
 800f79a:	6a3b      	ldr	r3, [r7, #32]
 800f79c:	4413      	add	r3, r2
 800f79e:	222e      	movs	r2, #46	@ 0x2e
 800f7a0:	701a      	strb	r2, [r3, #0]
 800f7a2:	e004      	b.n	800f7ae <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800f7a4:	683a      	ldr	r2, [r7, #0]
 800f7a6:	6a3b      	ldr	r3, [r7, #32]
 800f7a8:	4413      	add	r3, r2
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800f7ae:	6a3b      	ldr	r3, [r7, #32]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7bc:	2b03      	cmp	r3, #3
 800f7be:	d999      	bls.n	800f6f4 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800f7c0:	693b      	ldr	r3, [r7, #16]
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	372c      	adds	r7, #44	@ 0x2c
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	cccccccd 	.word	0xcccccccd

0800f7d4 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b086      	sub	sp, #24
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	607a      	str	r2, [r7, #4]
 800f7e0:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	d003      	beq.n	800f7f0 <FreeRTOS_inet_ntop+0x1c>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2b0a      	cmp	r3, #10
 800f7ec:	d007      	beq.n	800f7fe <FreeRTOS_inet_ntop+0x2a>
 800f7ee:	e00d      	b.n	800f80c <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800f7f0:	683a      	ldr	r2, [r7, #0]
 800f7f2:	6879      	ldr	r1, [r7, #4]
 800f7f4:	68b8      	ldr	r0, [r7, #8]
 800f7f6:	f7fb fc8d 	bl	800b114 <FreeRTOS_inet_ntop4>
 800f7fa:	6178      	str	r0, [r7, #20]
                break;
 800f7fc:	e009      	b.n	800f812 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800f7fe:	683a      	ldr	r2, [r7, #0]
 800f800:	6879      	ldr	r1, [r7, #4]
 800f802:	68b8      	ldr	r0, [r7, #8]
 800f804:	f7fc f9c1 	bl	800bb8a <FreeRTOS_inet_ntop6>
 800f808:	6178      	str	r0, [r7, #20]
                break;
 800f80a:	e002      	b.n	800f812 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800f80c:	2300      	movs	r3, #0
 800f80e:	617b      	str	r3, [r7, #20]
            break;
 800f810:	bf00      	nop
    }

    return pcResult;
 800f812:	697b      	ldr	r3, [r7, #20]
}
 800f814:	4618      	mov	r0, r3
 800f816:	3718      	adds	r7, #24
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	7a1b      	ldrb	r3, [r3, #8]
 800f82e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f832:	b2db      	uxtb	r3, r3
 800f834:	2b00      	cmp	r3, #0
 800f836:	d002      	beq.n	800f83e <FreeRTOS_GetLocalAddress+0x22>
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d02a      	beq.n	800f892 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800f83c:	e044      	b.n	800f8c8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	2202      	movs	r2, #2
 800f842:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	2218      	movs	r2, #24
 800f848:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f84e:	061a      	lsls	r2, r3, #24
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f854:	021b      	lsls	r3, r3, #8
 800f856:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f85a:	431a      	orrs	r2, r3
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f860:	0a1b      	lsrs	r3, r3, #8
 800f862:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f866:	431a      	orrs	r2, r3
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f86c:	0e1b      	lsrs	r3, r3, #24
 800f86e:	431a      	orrs	r2, r3
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f878:	021b      	lsls	r3, r3, #8
 800f87a:	b21a      	sxth	r2, r3
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f880:	0a1b      	lsrs	r3, r3, #8
 800f882:	b29b      	uxth	r3, r3
 800f884:	b21b      	sxth	r3, r3
 800f886:	4313      	orrs	r3, r2
 800f888:	b21b      	sxth	r3, r3
 800f88a:	b29a      	uxth	r2, r3
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	805a      	strh	r2, [r3, #2]
                break;
 800f890:	e01a      	b.n	800f8c8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	220a      	movs	r2, #10
 800f896:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	f103 0008 	add.w	r0, r3, #8
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	3328      	adds	r3, #40	@ 0x28
 800f8a2:	2210      	movs	r2, #16
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	f013 f8e9 	bl	8022a7c <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f8ae:	021b      	lsls	r3, r3, #8
 800f8b0:	b21a      	sxth	r2, r3
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f8b6:	0a1b      	lsrs	r3, r3, #8
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	b21b      	sxth	r3, r3
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	b21b      	sxth	r3, r3
 800f8c0:	b29a      	uxth	r2, r3
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	805a      	strh	r2, [r3, #2]
                break;
 800f8c6:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800f8c8:	2318      	movs	r3, #24
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b084      	sub	sp, #16
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d006      	beq.n	800f8f0 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	2100      	movs	r1, #0
 800f8ec:	f7f4 f8bc 	bl	8003a68 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d015      	beq.n	800f924 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	0a1b      	lsrs	r3, r3, #8
 800f8fe:	f003 030f 	and.w	r3, r3, #15
 800f902:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d00c      	beq.n	800f924 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	431a      	orrs	r2, r3
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	68f9      	ldr	r1, [r7, #12]
 800f91e:	4618      	mov	r0, r3
 800f920:	f7f3 fdc6 	bl	80034b0 <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00b      	beq.n	800f950 <vSocketWakeUpUser+0x7e>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d007      	beq.n	800f950 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	685a      	ldr	r2, [r3, #4]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4619      	mov	r1, r3
 800f94a:	4610      	mov	r0, r2
 800f94c:	f7f3 fdb0 	bl	80034b0 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	601a      	str	r2, [r3, #0]
}
 800f956:	bf00      	nop
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800f95e:	b480      	push	{r7}
 800f960:	b085      	sub	sp, #20
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f96c:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800f96e:	7afb      	ldrb	r3, [r7, #11]
 800f970:	2b08      	cmp	r3, #8
 800f972:	d006      	beq.n	800f982 <bMayConnect+0x24>
 800f974:	2b08      	cmp	r3, #8
 800f976:	dc0b      	bgt.n	800f990 <bMayConnect+0x32>
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d002      	beq.n	800f982 <bMayConnect+0x24>
 800f97c:	2b02      	cmp	r3, #2
 800f97e:	d003      	beq.n	800f988 <bMayConnect+0x2a>
 800f980:	e006      	b.n	800f990 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800f982:	2300      	movs	r3, #0
 800f984:	60fb      	str	r3, [r7, #12]
                break;
 800f986:	e007      	b.n	800f998 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800f988:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800f98c:	60fb      	str	r3, [r7, #12]
                break;
 800f98e:	e003      	b.n	800f998 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800f990:	f06f 030a 	mvn.w	r3, #10
 800f994:	60fb      	str	r3, [r7, #12]
                break;
 800f996:	bf00      	nop
        }

        return xResult;
 800f998:	68fb      	ldr	r3, [r7, #12]
    }
 800f99a:	4618      	mov	r0, r3
 800f99c:	3714      	adds	r7, #20
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr
	...

0800f9a8 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b084      	sub	sp, #16
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d103      	bne.n	800f9c4 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f9bc:	f06f 0315 	mvn.w	r3, #21
 800f9c0:	60fb      	str	r3, [r7, #12]
 800f9c2:	e01f      	b.n	800fa04 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	2106      	movs	r1, #6
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f7fe fc71 	bl	800e2b0 <prvValidSocket>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d103      	bne.n	800f9dc <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800f9d4:	f06f 0308 	mvn.w	r3, #8
 800f9d8:	60fb      	str	r3, [r7, #12]
 800f9da:	e013      	b.n	800fa04 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f001 f867 	bl	8010ab0 <FreeRTOS_issocketconnected>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	dd03      	ble.n	800f9f0 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800f9e8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800f9ec:	60fb      	str	r3, [r7, #12]
 800f9ee:	e009      	b.n	800fa04 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	69db      	ldr	r3, [r3, #28]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d105      	bne.n	800fa04 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f7fe ff4f 	bl	800e8a0 <FreeRTOS_bind>
 800fa02:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	f040 80a6 	bne.w	800fb58 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f7ff ffa6 	bl	800f95e <bMayConnect>
 800fa12:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	f040 809e 	bne.w	800fb58 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fa22:	f36f 03c3 	bfc	r3, #3, #1
 800fa26:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	785b      	ldrb	r3, [r3, #1]
 800fa36:	2b02      	cmp	r3, #2
 800fa38:	d027      	beq.n	800fa8a <prvTCPConnectStart+0xe2>
 800fa3a:	2b0a      	cmp	r3, #10
 800fa3c:	d168      	bne.n	800fb10 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	7a13      	ldrb	r3, [r2, #8]
 800fa42:	f043 0301 	orr.w	r3, r3, #1
 800fa46:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	f103 0108 	add.w	r1, r3, #8
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	885b      	ldrh	r3, [r3, #2]
 800fa58:	021b      	lsls	r3, r3, #8
 800fa5a:	b21a      	sxth	r2, r3
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	885b      	ldrh	r3, [r3, #2]
 800fa60:	0a1b      	lsrs	r3, r3, #8
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	b21b      	sxth	r3, r3
 800fa66:	4313      	orrs	r3, r2
 800fa68:	b21b      	sxth	r3, r3
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	460a      	mov	r2, r1
 800fa6e:	4601      	mov	r1, r0
 800fa70:	483c      	ldr	r0, [pc, #240]	@ (800fb64 <prvTCPConnectStart+0x1bc>)
 800fa72:	f012 fde7 	bl	8022644 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	3308      	adds	r3, #8
 800fa80:	2210      	movs	r2, #16
 800fa82:	4619      	mov	r1, r3
 800fa84:	f012 fffa 	bl	8022a7c <memcpy>
                            break;
 800fa88:	e046      	b.n	800fb18 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	7a13      	ldrb	r3, [r2, #8]
 800fa8e:	f36f 0300 	bfc	r3, #0, #1
 800fa92:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fa98:	4618      	mov	r0, r3
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	061a      	lsls	r2, r3, #24
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	689b      	ldr	r3, [r3, #8]
 800faa4:	021b      	lsls	r3, r3, #8
 800faa6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800faaa:	431a      	orrs	r2, r3
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	0a1b      	lsrs	r3, r3, #8
 800fab2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fab6:	431a      	orrs	r2, r3
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	689b      	ldr	r3, [r3, #8]
 800fabc:	0e1b      	lsrs	r3, r3, #24
 800fabe:	ea42 0103 	orr.w	r1, r2, r3
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	885b      	ldrh	r3, [r3, #2]
 800fac6:	021b      	lsls	r3, r3, #8
 800fac8:	b21a      	sxth	r2, r3
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	885b      	ldrh	r3, [r3, #2]
 800face:	0a1b      	lsrs	r3, r3, #8
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	b21b      	sxth	r3, r3
 800fad4:	4313      	orrs	r3, r2
 800fad6:	b21b      	sxth	r3, r3
 800fad8:	b29b      	uxth	r3, r3
 800fada:	460a      	mov	r2, r1
 800fadc:	4601      	mov	r1, r0
 800fade:	4822      	ldr	r0, [pc, #136]	@ (800fb68 <prvTCPConnectStart+0x1c0>)
 800fae0:	f012 fdb0 	bl	8022644 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	061a      	lsls	r2, r3, #24
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	021b      	lsls	r3, r3, #8
 800faf0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800faf4:	431a      	orrs	r2, r3
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	689b      	ldr	r3, [r3, #8]
 800fafa:	0a1b      	lsrs	r3, r3, #8
 800fafc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fb00:	431a      	orrs	r2, r3
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	0e1b      	lsrs	r3, r3, #24
 800fb08:	431a      	orrs	r2, r3
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800fb0e:	e003      	b.n	800fb18 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800fb10:	4816      	ldr	r0, [pc, #88]	@ (800fb6c <prvTCPConnectStart+0x1c4>)
 800fb12:	f012 fd97 	bl	8022644 <lUDPLoggingPrintf>
                        break;
 800fb16:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	885b      	ldrh	r3, [r3, #2]
 800fb1c:	021b      	lsls	r3, r3, #8
 800fb1e:	b21a      	sxth	r2, r3
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	885b      	ldrh	r3, [r3, #2]
 800fb24:	0a1b      	lsrs	r3, r3, #8
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	b21b      	sxth	r3, r3
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	b21b      	sxth	r3, r3
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800fb36:	2102      	movs	r1, #2
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f001 fd77 	bl	801162c <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2201      	movs	r2, #1
 800fb42:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800fb46:	2006      	movs	r0, #6
 800fb48:	f7f9 ffdc 	bl	8009b04 <xSendEventToIPTask>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d002      	beq.n	800fb58 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800fb52:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800fb56:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800fb58:	68fb      	ldr	r3, [r7, #12]
    }
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	080263cc 	.word	0x080263cc
 800fb68:	080263f4 	.word	0x080263f4
 800fb6c:	08026418 	.word	0x08026418

0800fb70 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b094      	sub	sp, #80	@ 0x50
 800fb74:	af02      	add	r7, sp, #8
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800fb80:	2300      	movs	r3, #0
 800fb82:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800fb84:	f06f 0315 	mvn.w	r3, #21
 800fb88:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d013      	beq.n	800fbb8 <FreeRTOS_connect+0x48>
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	785b      	ldrb	r3, [r3, #1]
 800fb94:	2b0a      	cmp	r3, #10
 800fb96:	d00f      	beq.n	800fbb8 <FreeRTOS_connect+0x48>
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	785b      	ldrb	r3, [r3, #1]
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	d00b      	beq.n	800fbb8 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800fba0:	f107 0314 	add.w	r3, r7, #20
 800fba4:	2218      	movs	r2, #24
 800fba6:	68b9      	ldr	r1, [r7, #8]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f012 ff67 	bl	8022a7c <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800fbae:	2302      	movs	r3, #2
 800fbb0:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800fbb2:	f107 0314 	add.w	r3, r7, #20
 800fbb6:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800fbb8:	68b9      	ldr	r1, [r7, #8]
 800fbba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fbbc:	f7ff fef4 	bl	800f9a8 <prvTCPConnectStart>
 800fbc0:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800fbc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d146      	bne.n	800fc56 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800fbc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d110      	bne.n	800fbf0 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800fbce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbd0:	6a1b      	ldr	r3, [r3, #32]
 800fbd2:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800fbd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d103      	bne.n	800fbe2 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800fbda:	f06f 030a 	mvn.w	r3, #10
 800fbde:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800fbe0:	e039      	b.n	800fc56 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800fbe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7f5 fb66 	bl	80052bc <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800fbf0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fbf2:	f000 ff5d 	bl	8010ab0 <FreeRTOS_issocketconnected>
 800fbf6:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800fbf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	db2a      	blt.n	800fc54 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800fbfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	dd02      	ble.n	800fc0a <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800fc04:	2300      	movs	r3, #0
 800fc06:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800fc08:	e025      	b.n	800fc56 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800fc0a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fc0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fc12:	4611      	mov	r1, r2
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7f5 fb89 	bl	800532c <xTaskCheckForTimeOut>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d003      	beq.n	800fc28 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800fc20:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800fc24:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800fc26:	e016      	b.n	800fc56 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800fc28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc2a:	6858      	ldr	r0, [r3, #4]
 800fc2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc2e:	9300      	str	r3, [sp, #0]
 800fc30:	2300      	movs	r3, #0
 800fc32:	2201      	movs	r2, #1
 800fc34:	2128      	movs	r1, #40	@ 0x28
 800fc36:	f7f3 fb55 	bl	80032e4 <xEventGroupWaitBits>
 800fc3a:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc3e:	f003 0320 	and.w	r3, r3, #32
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d0c0      	beq.n	800fbc8 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800fc46:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800fc4a:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800fc4c:	4804      	ldr	r0, [pc, #16]	@ (800fc60 <FreeRTOS_connect+0xf0>)
 800fc4e:	f012 fcf9 	bl	8022644 <lUDPLoggingPrintf>
                    break;
 800fc52:	e000      	b.n	800fc56 <FreeRTOS_connect+0xe6>
                    break;
 800fc54:	bf00      	nop
                }
            }
        }

        return xResult;
 800fc56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3748      	adds	r7, #72	@ 0x48
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	08026444 	.word	0x08026444

0800fc64 <prvAcceptWaitClient>:
 * @return A new connected socket or NULL.
 */
    static FreeRTOS_Socket_t * prvAcceptWaitClient( FreeRTOS_Socket_t * pxParentSocket,
                                                    struct freertos_sockaddr * pxAddress,
                                                    socklen_t * pxAddressLength )
    {
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b086      	sub	sp, #24
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	60b9      	str	r1, [r7, #8]
 800fc6e:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxClientSocket = NULL;
 800fc70:	2300      	movs	r3, #0
 800fc72:	617b      	str	r3, [r7, #20]

        /* Is there a new client? */
        vTaskSuspendAll();
 800fc74:	f7f4 fe66 	bl	8004944 <vTaskSuspendAll>
        {
            if( pxParentSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fc7e:	f003 0308 	and.w	r3, r3, #8
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d10b      	bne.n	800fca0 <prvAcceptWaitClient+0x3c>
            {
                pxClientSocket = pxParentSocket->u.xTCP.pxPeerSocket;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc8c:	617b      	str	r3, [r7, #20]

                if( pxClientSocket != NULL )
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d007      	beq.n	800fca4 <prvAcceptWaitClient+0x40>
                {
                    FreeRTOS_printf( ( "prvAcceptWaitClient: client %p parent %p\n",
 800fc94:	68fa      	ldr	r2, [r7, #12]
 800fc96:	6979      	ldr	r1, [r7, #20]
 800fc98:	4845      	ldr	r0, [pc, #276]	@ (800fdb0 <prvAcceptWaitClient+0x14c>)
 800fc9a:	f012 fcd3 	bl	8022644 <lUDPLoggingPrintf>
 800fc9e:	e001      	b.n	800fca4 <prvAcceptWaitClient+0x40>
                                       ( void * ) pxClientSocket, ( void * ) pxParentSocket ) );
                }
            }
            else
            {
                pxClientSocket = pxParentSocket;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	617b      	str	r3, [r7, #20]
            }

            if( pxClientSocket != NULL )
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d018      	beq.n	800fcdc <prvAcceptWaitClient+0x78>
            {
                /* Is it still not taken ? */
                if( pxClientSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED )
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fcb0:	f003 0302 	and.w	r3, r3, #2
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00e      	beq.n	800fcd8 <prvAcceptWaitClient+0x74>
                {
                    if( pxParentSocket->u.xTCP.pxPeerSocket != NULL )
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d002      	beq.n	800fcc8 <prvAcceptWaitClient+0x64>
                    {
                        pxParentSocket->u.xTCP.pxPeerSocket = NULL;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	67da      	str	r2, [r3, #124]	@ 0x7c
                    }

                    pxClientSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 800fcc8:	697a      	ldr	r2, [r7, #20]
 800fcca:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fcce:	f36f 0341 	bfc	r3, #1, #1
 800fcd2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800fcd6:	e001      	b.n	800fcdc <prvAcceptWaitClient+0x78>
                }
                else
                {
                    pxClientSocket = NULL;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	617b      	str	r3, [r7, #20]
                }
            }
        }
        ( void ) xTaskResumeAll();
 800fcdc:	f7f4 fe40 	bl	8004960 <xTaskResumeAll>

        if( pxClientSocket != NULL )
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d05e      	beq.n	800fda4 <prvAcceptWaitClient+0x140>
        {
            if( pxAddressLength != NULL )
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d002      	beq.n	800fcf2 <prvAcceptWaitClient+0x8e>
            {
                *pxAddressLength = sizeof( struct freertos_sockaddr );
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2218      	movs	r2, #24
 800fcf0:	601a      	str	r2, [r3, #0]
            }

            switch( pxClientSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	7a1b      	ldrb	r3, [r3, #8]
 800fcf6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d002      	beq.n	800fd06 <prvAcceptWaitClient+0xa2>
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d02c      	beq.n	800fd5e <prvAcceptWaitClient+0xfa>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800fd04:	e04e      	b.n	800fda4 <prvAcceptWaitClient+0x140>
                        if( pxAddress != NULL )
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d048      	beq.n	800fd9e <prvAcceptWaitClient+0x13a>
                            pxAddress->sin_family = FREERTOS_AF_INET4;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	2202      	movs	r2, #2
 800fd10:	705a      	strb	r2, [r3, #1]
                            pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_ntohl( pxClientSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800fd12:	697b      	ldr	r3, [r7, #20]
 800fd14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd16:	061a      	lsls	r2, r3, #24
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd1c:	021b      	lsls	r3, r3, #8
 800fd1e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fd22:	431a      	orrs	r2, r3
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd28:	0a1b      	lsrs	r3, r3, #8
 800fd2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fd2e:	431a      	orrs	r2, r3
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd34:	0e1b      	lsrs	r3, r3, #24
 800fd36:	431a      	orrs	r2, r3
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	609a      	str	r2, [r3, #8]
                            pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fd42:	021b      	lsls	r3, r3, #8
 800fd44:	b21a      	sxth	r2, r3
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fd4c:	0a1b      	lsrs	r3, r3, #8
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	b21b      	sxth	r3, r3
 800fd52:	4313      	orrs	r3, r2
 800fd54:	b21b      	sxth	r3, r3
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	805a      	strh	r2, [r3, #2]
                        break;
 800fd5c:	e01f      	b.n	800fd9e <prvAcceptWaitClient+0x13a>
                        if( pxAddress != NULL )
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d01e      	beq.n	800fda2 <prvAcceptWaitClient+0x13e>
                            pxAddress->sin_family = FREERTOS_AF_INET6;
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	220a      	movs	r2, #10
 800fd68:	705a      	strb	r2, [r3, #1]
                            ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxClientSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	f103 0008 	add.w	r0, r3, #8
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	3354      	adds	r3, #84	@ 0x54
 800fd74:	2210      	movs	r2, #16
 800fd76:	4619      	mov	r1, r3
 800fd78:	f012 fe80 	bl	8022a7c <memcpy>
                            pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fd82:	021b      	lsls	r3, r3, #8
 800fd84:	b21a      	sxth	r2, r3
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fd8c:	0a1b      	lsrs	r3, r3, #8
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	b21b      	sxth	r3, r3
 800fd92:	4313      	orrs	r3, r2
 800fd94:	b21b      	sxth	r3, r3
 800fd96:	b29a      	uxth	r2, r3
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	805a      	strh	r2, [r3, #2]
                        break;
 800fd9c:	e001      	b.n	800fda2 <prvAcceptWaitClient+0x13e>
                        break;
 800fd9e:	bf00      	nop
 800fda0:	e000      	b.n	800fda4 <prvAcceptWaitClient+0x140>
                        break;
 800fda2:	bf00      	nop
            }
        }

        return pxClientSocket;
 800fda4:	697b      	ldr	r3, [r7, #20]
    }
 800fda6:	4618      	mov	r0, r3
 800fda8:	3718      	adds	r7, #24
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	08026470 	.word	0x08026470

0800fdb4 <FreeRTOS_accept>:
 *         be bound already to the same port number as the listening socket.
 */
    Socket_t FreeRTOS_accept( Socket_t xServerSocket,
                              struct freertos_sockaddr * pxAddress,
                              socklen_t * pxAddressLength )
    {
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b08e      	sub	sp, #56	@ 0x38
 800fdb8:	af02      	add	r7, sp, #8
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xServerSocket;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	627b      	str	r3, [r7, #36]	@ 0x24
        FreeRTOS_Socket_t * pxClientSocket = NULL;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        IPStackEvent_t xAskEvent;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800fdcc:	2201      	movs	r2, #1
 800fdce:	2106      	movs	r1, #6
 800fdd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fdd2:	f7fe fa6d 	bl	800e2b0 <prvValidSocket>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d103      	bne.n	800fde4 <FreeRTOS_accept+0x30>
            /* Not a valid socket or wrong type */

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 800fddc:	f04f 33ff 	mov.w	r3, #4294967295
 800fde0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fde2:	e058      	b.n	800fe96 <FreeRTOS_accept+0xe2>
        }
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 800fde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fde6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fdea:	f003 0308 	and.w	r3, r3, #8
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d000      	beq.n	800fdf6 <FreeRTOS_accept+0x42>
 800fdf4:	e008      	b.n	800fe08 <FreeRTOS_accept+0x54>
                 ( pxSocket->u.xTCP.eTCPState != eTCP_LISTEN ) )
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdf8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d003      	beq.n	800fe08 <FreeRTOS_accept+0x54>
            /* Parent socket is not in listening mode */

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 800fe00:	f04f 33ff 	mov.w	r3, #4294967295
 800fe04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe06:	e046      	b.n	800fe96 <FreeRTOS_accept+0xe2>
        else
        {
            /* Loop will stop with breaks. */
            for( ; ; )
            {
                pxClientSocket = prvAcceptWaitClient( pxSocket, pxAddress, pxAddressLength );
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	68b9      	ldr	r1, [r7, #8]
 800fe0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fe0e:	f7ff ff29 	bl	800fc64 <prvAcceptWaitClient>
 800fe12:	62f8      	str	r0, [r7, #44]	@ 0x2c

                if( pxClientSocket != NULL )
 800fe14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d013      	beq.n	800fe42 <FreeRTOS_accept+0x8e>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800fe1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe1c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fe20:	f003 0308 	and.w	r3, r3, #8
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d130      	bne.n	800fe8c <FreeRTOS_accept+0xd8>
                    {
                        /* Ask to set an event in 'xEventGroup' as soon as a new
                         * client gets connected for this listening socket. */
                        xAskEvent.eEventType = eTCPAcceptEvent;
 800fe2a:	2307      	movs	r3, #7
 800fe2c:	743b      	strb	r3, [r7, #16]
                        xAskEvent.pvData = pxSocket;
 800fe2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe30:	617b      	str	r3, [r7, #20]
                        ( void ) xSendEventStructToIPTask( &xAskEvent, portMAX_DELAY );
 800fe32:	f107 0310 	add.w	r3, r7, #16
 800fe36:	f04f 31ff 	mov.w	r1, #4294967295
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7f9 fe78 	bl	8009b30 <xSendEventStructToIPTask>
                    }

                    break;
 800fe40:	e024      	b.n	800fe8c <FreeRTOS_accept+0xd8>
                }

                if( xTimed == pdFALSE )
 800fe42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d10c      	bne.n	800fe62 <FreeRTOS_accept+0xae>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800fe48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe4a:	6a1b      	ldr	r3, [r3, #32]
 800fe4c:	623b      	str	r3, [r7, #32]

                    if( xRemainingTime == ( TickType_t ) 0 )
 800fe4e:	6a3b      	ldr	r3, [r7, #32]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d01d      	beq.n	800fe90 <FreeRTOS_accept+0xdc>
                    {
                        break;
                    }

                    /* Don't get here a second time */
                    xTimed = pdTRUE;
 800fe54:	2301      	movs	r3, #1
 800fe56:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800fe58:	f107 0318 	add.w	r3, r7, #24
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7f5 fa2d 	bl	80052bc <vTaskSetTimeOutState>
                }

                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800fe62:	f107 0220 	add.w	r2, r7, #32
 800fe66:	f107 0318 	add.w	r3, r7, #24
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7f5 fa5d 	bl	800532c <xTaskCheckForTimeOut>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d10d      	bne.n	800fe94 <FreeRTOS_accept+0xe0>
                {
                    break;
                }

                /* Put the calling task to 'sleep' until a down-stream event is received. */
                ( void ) xEventGroupWaitBits( pxSocket->xEventGroup,
 800fe78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe7a:	6858      	ldr	r0, [r3, #4]
 800fe7c:	6a3b      	ldr	r3, [r7, #32]
 800fe7e:	9300      	str	r3, [sp, #0]
 800fe80:	2300      	movs	r3, #0
 800fe82:	2201      	movs	r2, #1
 800fe84:	2104      	movs	r1, #4
 800fe86:	f7f3 fa2d 	bl	80032e4 <xEventGroupWaitBits>
                pxClientSocket = prvAcceptWaitClient( pxSocket, pxAddress, pxAddressLength );
 800fe8a:	e7bd      	b.n	800fe08 <FreeRTOS_accept+0x54>
                    break;
 800fe8c:	bf00      	nop
 800fe8e:	e002      	b.n	800fe96 <FreeRTOS_accept+0xe2>
                        break;
 800fe90:	bf00      	nop
 800fe92:	e000      	b.n	800fe96 <FreeRTOS_accept+0xe2>
                    break;
 800fe94:	bf00      	nop
                                              pdFALSE /*xWaitAllBits*/,
                                              xRemainingTime );
            }
        }

        return pxClientSocket;
 800fe96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3730      	adds	r7, #48	@ 0x30
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}

0800fea0 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b08a      	sub	sp, #40	@ 0x28
 800fea4:	af02      	add	r7, sp, #8
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
 800feac:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	f003 0301 	and.w	r3, r3, #1
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d13b      	bne.n	800ff30 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	089b      	lsrs	r3, r3, #2
 800febc:	f003 0301 	and.w	r3, r3, #1
 800fec0:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800fec8:	69bb      	ldr	r3, [r7, #24]
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	68ba      	ldr	r2, [r7, #8]
 800fed0:	2100      	movs	r1, #0
 800fed2:	f001 fa04 	bl	80112de <uxStreamBufferGet>
 800fed6:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 800fed8:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fee0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fee4:	b2db      	uxtb	r3, r3
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d02b      	beq.n	800ff42 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fef0:	4618      	mov	r0, r3
 800fef2:	f001 f8c5 	bl	8011080 <uxStreamBufferFrontSpace>
 800fef6:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fefe:	697a      	ldr	r2, [r7, #20]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d31e      	bcc.n	800ff42 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800ff0a:	f36f 13c7 	bfc	r3, #7, #1
 800ff0e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800ff12:	68fa      	ldr	r2, [r7, #12]
 800ff14:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800ff18:	f043 0301 	orr.w	r3, r3, #1
 800ff1c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	2201      	movs	r2, #1
 800ff24:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800ff28:	2006      	movs	r0, #6
 800ff2a:	f7f9 fdeb 	bl	8009b04 <xSendEventToIPTask>
 800ff2e:	e008      	b.n	800ff42 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ff36:	68b9      	ldr	r1, [r7, #8]
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f001 f930 	bl	801119e <uxStreamBufferGetPtr>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 800ff42:	69fb      	ldr	r3, [r7, #28]
    }
 800ff44:	4618      	mov	r0, r3
 800ff46:	3720      	adds	r7, #32
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b08e      	sub	sp, #56	@ 0x38
 800ff50:	af02      	add	r7, sp, #8
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800ff60:	2300      	movs	r3, #0
 800ff62:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d05f      	beq.n	801002e <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ff74:	4618      	mov	r0, r3
 800ff76:	f001 f894 	bl	80110a2 <uxStreamBufferGetSize>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 800ff7e:	e056      	b.n	801002e <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ff86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 800ff8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d007      	beq.n	800ffa2 <prvRecvWait+0x56>
 800ff92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ff96:	2b08      	cmp	r3, #8
 800ff98:	d003      	beq.n	800ffa2 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 800ff9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ff9e:	2b09      	cmp	r3, #9
 800ffa0:	d10e      	bne.n	800ffc0 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800ffa2:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ffa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800ffae:	f003 0308 	and.w	r3, r3, #8
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d03e      	beq.n	8010036 <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800ffb8:	f06f 030b 	mvn.w	r3, #11
 800ffbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 800ffbe:	e03a      	b.n	8010036 <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 800ffc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d111      	bne.n	800ffea <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	6a1b      	ldr	r3, [r3, #32]
 800ffca:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d033      	beq.n	801003a <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f003 0310 	and.w	r3, r3, #16
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d130      	bne.n	801003e <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800ffe0:	f107 0314 	add.w	r3, r7, #20
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7f5 f969 	bl	80052bc <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800ffea:	f107 021c 	add.w	r2, r7, #28
 800ffee:	f107 0314 	add.w	r3, r7, #20
 800fff2:	4611      	mov	r1, r2
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7f5 f999 	bl	800532c <xTaskCheckForTimeOut>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d120      	bne.n	8010042 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	6858      	ldr	r0, [r3, #4]
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	9300      	str	r3, [sp, #0]
 8010008:	2300      	movs	r3, #0
 801000a:	2201      	movs	r2, #1
 801000c:	2161      	movs	r1, #97	@ 0x61
 801000e:	f7f3 f969 	bl	80032e4 <xEventGroupWaitBits>
 8010012:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801001a:	2b00      	cmp	r3, #0
 801001c:	d007      	beq.n	801002e <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010024:	4618      	mov	r0, r3
 8010026:	f001 f83c 	bl	80110a2 <uxStreamBufferGetSize>
 801002a:	4603      	mov	r3, r0
 801002c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 801002e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010030:	2b00      	cmp	r3, #0
 8010032:	d0a5      	beq.n	800ff80 <prvRecvWait+0x34>
 8010034:	e006      	b.n	8010044 <prvRecvWait+0xf8>
                break;
 8010036:	bf00      	nop
 8010038:	e004      	b.n	8010044 <prvRecvWait+0xf8>
                    break;
 801003a:	bf00      	nop
 801003c:	e002      	b.n	8010044 <prvRecvWait+0xf8>
                    break;
 801003e:	bf00      	nop
 8010040:	e000      	b.n	8010044 <prvRecvWait+0xf8>
                break;
 8010042:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010048:	601a      	str	r2, [r3, #0]

        return xByteCount;
 801004a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 801004c:	4618      	mov	r0, r3
 801004e:	3730      	adds	r7, #48	@ 0x30
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 8010054:	b580      	push	{r7, lr}
 8010056:	b088      	sub	sp, #32
 8010058:	af00      	add	r7, sp, #0
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	607a      	str	r2, [r7, #4]
 8010060:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 8010062:	2300      	movs	r3, #0
 8010064:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 801006a:	2300      	movs	r3, #0
 801006c:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 801006e:	2201      	movs	r2, #1
 8010070:	2106      	movs	r1, #6
 8010072:	69b8      	ldr	r0, [r7, #24]
 8010074:	f7fe f91c 	bl	800e2b0 <prvValidSocket>
 8010078:	4603      	mov	r3, r0
 801007a:	2b00      	cmp	r3, #0
 801007c:	d103      	bne.n	8010086 <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 801007e:	f06f 0315 	mvn.w	r3, #21
 8010082:	61fb      	str	r3, [r7, #28]
 8010084:	e01d      	b.n	80100c2 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	f003 0301 	and.w	r3, r3, #1
 801008c:	2b00      	cmp	r3, #0
 801008e:	d006      	beq.n	801009e <FreeRTOS_recv+0x4a>
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d103      	bne.n	801009e <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 8010096:	f06f 0315 	mvn.w	r3, #21
 801009a:	61fb      	str	r3, [r7, #28]
 801009c:	e011      	b.n	80100c2 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 801009e:	f107 0314 	add.w	r3, r7, #20
 80100a2:	683a      	ldr	r2, [r7, #0]
 80100a4:	4619      	mov	r1, r3
 80100a6:	69b8      	ldr	r0, [r7, #24]
 80100a8:	f7ff ff50 	bl	800ff4c <prvRecvWait>
 80100ac:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	dd06      	ble.n	80100c2 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	68b9      	ldr	r1, [r7, #8]
 80100ba:	69b8      	ldr	r0, [r7, #24]
 80100bc:	f7ff fef0 	bl	800fea0 <prvRecvData>
 80100c0:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 80100c2:	69fb      	ldr	r3, [r7, #28]
    }
 80100c4:	4618      	mov	r0, r3
 80100c6:	3720      	adds	r7, #32
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 80100d6:	2301      	movs	r3, #1
 80100d8:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 80100da:	2201      	movs	r2, #1
 80100dc:	2106      	movs	r1, #6
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f7fe f8e6 	bl	800e2b0 <prvValidSocket>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d103      	bne.n	80100f2 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 80100ea:	f06f 0315 	mvn.w	r3, #21
 80100ee:	60fb      	str	r3, [r7, #12]
 80100f0:	e040      	b.n	8010174 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80100f8:	f003 0308 	and.w	r3, r3, #8
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d003      	beq.n	801010a <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 8010102:	f06f 030b 	mvn.w	r3, #11
 8010106:	60fb      	str	r3, [r7, #12]
 8010108:	e034      	b.n	8010174 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010110:	2b00      	cmp	r3, #0
 8010112:	d009      	beq.n	8010128 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 801011a:	2b08      	cmp	r3, #8
 801011c:	d004      	beq.n	8010128 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 8010124:	2b09      	cmp	r3, #9
 8010126:	d103      	bne.n	8010130 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 8010128:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 801012c:	60fb      	str	r3, [r7, #12]
 801012e:	e021      	b.n	8010174 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801013a:	b2db      	uxtb	r3, r3
 801013c:	2b00      	cmp	r3, #0
 801013e:	d002      	beq.n	8010146 <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 8010140:	2300      	movs	r3, #0
 8010142:	60fb      	str	r3, [r7, #12]
 8010144:	e016      	b.n	8010174 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d102      	bne.n	8010152 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 801014c:	2300      	movs	r3, #0
 801014e:	60fb      	str	r3, [r7, #12]
 8010150:	e010      	b.n	8010174 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d10b      	bne.n	8010174 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 801015c:	2100      	movs	r1, #0
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f000 fac6 	bl	80106f0 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801016a:	2b00      	cmp	r3, #0
 801016c:	d102      	bne.n	8010174 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 801016e:	f06f 030b 	mvn.w	r3, #11
 8010172:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 8010174:	68fb      	ldr	r3, [r7, #12]
    }
 8010176:	4618      	mov	r0, r3
 8010178:	3710      	adds	r7, #16
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 801017e:	b580      	push	{r7, lr}
 8010180:	b088      	sub	sp, #32
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
 8010186:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 8010188:	2300      	movs	r3, #0
 801018a:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 8010190:	2300      	movs	r3, #0
 8010192:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	2200      	movs	r2, #0
 8010198:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 801019a:	2200      	movs	r2, #0
 801019c:	2106      	movs	r1, #6
 801019e:	6978      	ldr	r0, [r7, #20]
 80101a0:	f7fe f886 	bl	800e2b0 <prvValidSocket>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d135      	bne.n	8010216 <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80101b0:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10f      	bne.n	80101d8 <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80101be:	f003 0308 	and.w	r3, r3, #8
 80101c2:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d107      	bne.n	80101d8 <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 80101c8:	2100      	movs	r1, #0
 80101ca:	6978      	ldr	r0, [r7, #20]
 80101cc:	f000 fa90 	bl	80106f0 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80101d6:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d01b      	beq.n	8010216 <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 80101de:	69b8      	ldr	r0, [r7, #24]
 80101e0:	f000 ff3d 	bl	801105e <uxStreamBufferGetSpace>
 80101e4:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	691a      	ldr	r2, [r3, #16]
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	689b      	ldr	r3, [r3, #8]
 80101ee:	1ad3      	subs	r3, r2, r3
 80101f0:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 80101f2:	68fa      	ldr	r2, [r7, #12]
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d803      	bhi.n	8010202 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	601a      	str	r2, [r3, #0]
 8010200:	e002      	b.n	8010208 <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 8010202:	693a      	ldr	r2, [r7, #16]
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 8010208:	69bb      	ldr	r3, [r7, #24]
 801020a:	689b      	ldr	r3, [r3, #8]
 801020c:	3310      	adds	r3, #16
 801020e:	69ba      	ldr	r2, [r7, #24]
 8010210:	4413      	add	r3, r2
 8010212:	3304      	adds	r3, #4
 8010214:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 8010216:	69fb      	ldr	r3, [r7, #28]
    }
 8010218:	4618      	mov	r0, r3
 801021a:	3720      	adds	r7, #32
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 8010220:	b580      	push	{r7, lr}
 8010222:	b090      	sub	sp, #64	@ 0x40
 8010224:	af02      	add	r7, sp, #8
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
 801022c:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 801022e:	2300      	movs	r3, #0
 8010230:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801023c:	4618      	mov	r0, r3
 801023e:	f000 ff0e 	bl	801105e <uxStreamBufferGetSpace>
 8010242:	4603      	mov	r3, r0
 8010244:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 8010246:	2300      	movs	r3, #0
 8010248:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 801024e:	e08f      	b.n	8010370 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 8010250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010252:	2b00      	cmp	r3, #0
 8010254:	dd4b      	ble.n	80102ee <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 8010256:	2300      	movs	r3, #0
 8010258:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 801025a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801025c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801025e:	429a      	cmp	r2, r3
 8010260:	dd01      	ble.n	8010266 <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 8010262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010264:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801026c:	f003 0310 	and.w	r3, r3, #16
 8010270:	b2db      	uxtb	r3, r3
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00e      	beq.n	8010294 <prvTCPSendLoop+0x74>
 8010276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801027a:	429a      	cmp	r2, r3
 801027c:	d10a      	bne.n	8010294 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 801027e:	2301      	movs	r3, #1
 8010280:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 8010282:	f7f4 fb5f 	bl	8004944 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 8010286:	68fa      	ldr	r2, [r7, #12]
 8010288:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801028c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010290:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801029a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801029c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801029e:	2100      	movs	r1, #0
 80102a0:	f000 ff9d 	bl	80111de <uxStreamBufferAdd>
 80102a4:	4603      	mov	r3, r0
 80102a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 80102a8:	6a3b      	ldr	r3, [r7, #32]
 80102aa:	2b01      	cmp	r3, #1
 80102ac:	d101      	bne.n	80102b2 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 80102ae:	f7f4 fb57 	bl	8004960 <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2201      	movs	r2, #1
 80102b6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 80102ba:	f7fa fb7b 	bl	800a9b4 <xIsCallingFromIPTask>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d102      	bne.n	80102ca <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 80102c4:	2006      	movs	r0, #6
 80102c6:	f7f9 fc1d 	bl	8009b04 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 80102ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 80102d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80102d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d6:	4413      	add	r3, r2
 80102d8:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 80102da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d053      	beq.n	8010388 <prvTCPSendLoop+0x168>
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d050      	beq.n	8010388 <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 80102e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102ea:	4413      	add	r3, r2
 80102ec:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 80102ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d119      	bne.n	8010328 <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102f8:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 80102fa:	f7fa fb5b 	bl	800a9b4 <xIsCallingFromIPTask>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d001      	beq.n	8010308 <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 8010304:	2300      	movs	r3, #0
 8010306:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d035      	beq.n	801037a <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	f003 0310 	and.w	r3, r3, #16
 8010314:	2b00      	cmp	r3, #0
 8010316:	d132      	bne.n	801037e <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 8010318:	2301      	movs	r3, #1
 801031a:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 801031c:	f107 0314 	add.w	r3, r7, #20
 8010320:	4618      	mov	r0, r3
 8010322:	f7f4 ffcb 	bl	80052bc <vTaskSetTimeOutState>
 8010326:	e00a      	b.n	801033e <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8010328:	f107 021c 	add.w	r2, r7, #28
 801032c:	f107 0314 	add.w	r3, r7, #20
 8010330:	4611      	mov	r1, r2
 8010332:	4618      	mov	r0, r3
 8010334:	f7f4 fffa 	bl	800532c <xTaskCheckForTimeOut>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d121      	bne.n	8010382 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	6858      	ldr	r0, [r3, #4]
 8010342:	69fb      	ldr	r3, [r7, #28]
 8010344:	9300      	str	r3, [sp, #0]
 8010346:	2300      	movs	r3, #0
 8010348:	2201      	movs	r2, #1
 801034a:	2122      	movs	r1, #34	@ 0x22
 801034c:	f7f2 ffca 	bl	80032e4 <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 8010350:	6879      	ldr	r1, [r7, #4]
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f7ff feba 	bl	80100cc <prvTCPSendCheck>
 8010358:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 801035a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801035c:	2b00      	cmp	r3, #0
 801035e:	db12      	blt.n	8010386 <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010366:	4618      	mov	r0, r3
 8010368:	f000 fe79 	bl	801105e <uxStreamBufferGetSpace>
 801036c:	4603      	mov	r3, r0
 801036e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 8010370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010372:	2b00      	cmp	r3, #0
 8010374:	f73f af6c 	bgt.w	8010250 <prvTCPSendLoop+0x30>
 8010378:	e006      	b.n	8010388 <prvTCPSendLoop+0x168>
                    break;
 801037a:	bf00      	nop
 801037c:	e004      	b.n	8010388 <prvTCPSendLoop+0x168>
                    break;
 801037e:	bf00      	nop
 8010380:	e002      	b.n	8010388 <prvTCPSendLoop+0x168>
                    break;
 8010382:	bf00      	nop
 8010384:	e000      	b.n	8010388 <prvTCPSendLoop+0x168>
                break;
 8010386:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 8010388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801038a:	4618      	mov	r0, r3
 801038c:	3738      	adds	r7, #56	@ 0x38
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
	...

08010394 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 8010394:	b580      	push	{r7, lr}
 8010396:	b086      	sub	sp, #24
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	607a      	str	r2, [r7, #4]
 80103a0:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 80103a6:	6879      	ldr	r1, [r7, #4]
 80103a8:	6938      	ldr	r0, [r7, #16]
 80103aa:	f7ff fe8f 	bl	80100cc <prvTCPSendCheck>
 80103ae:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	dd24      	ble.n	8010400 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	68b9      	ldr	r1, [r7, #8]
 80103bc:	6938      	ldr	r0, [r7, #16]
 80103be:	f7ff ff2f 	bl	8010220 <prvTCPSendLoop>
 80103c2:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d11a      	bne.n	8010400 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80103d0:	2b05      	cmp	r3, #5
 80103d2:	d903      	bls.n	80103dc <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 80103d4:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80103d8:	617b      	str	r3, [r7, #20]
 80103da:	e011      	b.n	8010400 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80103e0:	2b17      	cmp	r3, #23
 80103e2:	d00a      	beq.n	80103fa <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80103e8:	4619      	mov	r1, r3
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80103f4:	4805      	ldr	r0, [pc, #20]	@ (801040c <FreeRTOS_send+0x78>)
 80103f6:	f012 f925 	bl	8022644 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 80103fa:	f06f 031b 	mvn.w	r3, #27
 80103fe:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 8010400:	697b      	ldr	r3, [r7, #20]
    }
 8010402:	4618      	mov	r0, r3
 8010404:	3718      	adds	r7, #24
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	0802649c 	.word	0x0802649c

08010410 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 801041a:	2300      	movs	r3, #0
 801041c:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 8010422:	2201      	movs	r2, #1
 8010424:	2106      	movs	r1, #6
 8010426:	68b8      	ldr	r0, [r7, #8]
 8010428:	f7fd ff42 	bl	800e2b0 <prvValidSocket>
 801042c:	4603      	mov	r3, r0
 801042e:	2b00      	cmp	r3, #0
 8010430:	d103      	bne.n	801043a <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8010432:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010436:	60fb      	str	r3, [r7, #12]
 8010438:	e056      	b.n	80104e8 <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010440:	2b00      	cmp	r3, #0
 8010442:	d008      	beq.n	8010456 <FreeRTOS_listen+0x46>
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801044a:	2b08      	cmp	r3, #8
 801044c:	d003      	beq.n	8010456 <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 801044e:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010452:	60fb      	str	r3, [r7, #12]
 8010454:	e048      	b.n	80104e8 <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 8010456:	6839      	ldr	r1, [r7, #0]
 8010458:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801045c:	f7fa fc5a 	bl	800ad14 <FreeRTOS_min_int32>
 8010460:	4603      	mov	r3, r0
 8010462:	b29a      	uxth	r2, r3
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010470:	f003 0308 	and.w	r3, r3, #8
 8010474:	b2db      	uxtb	r3, r3
 8010476:	2b00      	cmp	r3, #0
 8010478:	d032      	beq.n	80104e0 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010480:	2b00      	cmp	r3, #0
 8010482:	d005      	beq.n	8010490 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801048a:	4618      	mov	r0, r3
 801048c:	f000 fe2b 	bl	80110e6 <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d005      	beq.n	80104a6 <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80104a0:	4618      	mov	r0, r3
 80104a2:	f000 fe20 	bl	80110e6 <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	33aa      	adds	r3, #170	@ 0xaa
 80104aa:	225a      	movs	r2, #90	@ 0x5a
 80104ac:	2100      	movs	r1, #0
 80104ae:	4618      	mov	r0, r3
 80104b0:	f012 fbf1 	bl	8022c96 <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80104ba:	22c0      	movs	r2, #192	@ 0xc0
 80104bc:	2100      	movs	r1, #0
 80104be:	4618      	mov	r0, r3
 80104c0:	f012 fbe9 	bl	8022c96 <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	3368      	adds	r3, #104	@ 0x68
 80104c8:	2204      	movs	r2, #4
 80104ca:	2100      	movs	r1, #0
 80104cc:	4618      	mov	r0, r3
 80104ce:	f012 fbe2 	bl	8022c96 <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 80104d2:	68ba      	ldr	r2, [r7, #8]
 80104d4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80104d8:	f043 0308 	orr.w	r3, r3, #8
 80104dc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 80104e0:	2101      	movs	r1, #1
 80104e2:	68b8      	ldr	r0, [r7, #8]
 80104e4:	f001 f8a2 	bl	801162c <vTCPStateChange>
        }

        return xResult;
 80104e8:	68fb      	ldr	r3, [r7, #12]
    }
 80104ea:	4618      	mov	r0, r3
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b084      	sub	sp, #16
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 8010500:	2201      	movs	r2, #1
 8010502:	2106      	movs	r1, #6
 8010504:	68b8      	ldr	r0, [r7, #8]
 8010506:	f7fd fed3 	bl	800e2b0 <prvValidSocket>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	d103      	bne.n	8010518 <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8010510:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010514:	60fb      	str	r3, [r7, #12]
 8010516:	e018      	b.n	801054a <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801051e:	2b05      	cmp	r3, #5
 8010520:	d003      	beq.n	801052a <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 8010522:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8010526:	60fb      	str	r3, [r7, #12]
 8010528:	e00f      	b.n	801054a <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010530:	f043 0320 	orr.w	r3, r3, #32
 8010534:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	2201      	movs	r2, #1
 801053c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010540:	2006      	movs	r0, #6
 8010542:	f7f9 fadf 	bl	8009b04 <xSendEventToIPTask>
            xResult = 0;
 8010546:	2300      	movs	r3, #0
 8010548:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 801054a:	68fb      	ldr	r3, [r7, #12]
    }
 801054c:	4618      	mov	r0, r3
 801054e:	3710      	adds	r7, #16
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 8010554:	b580      	push	{r7, lr}
 8010556:	b08a      	sub	sp, #40	@ 0x28
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 801055c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010560:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 8010562:	f7f4 fb01 	bl	8004b68 <xTaskGetTickCount>
 8010566:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 8010568:	4b32      	ldr	r3, [pc, #200]	@ (8010634 <xTCPTimerCheck+0xe0>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	69ba      	ldr	r2, [r7, #24]
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010572:	4b31      	ldr	r3, [pc, #196]	@ (8010638 <xTCPTimerCheck+0xe4>)
 8010574:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010576:	4b31      	ldr	r3, [pc, #196]	@ (801063c <xTCPTimerCheck+0xe8>)
 8010578:	68db      	ldr	r3, [r3, #12]
 801057a:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 801057c:	4a2d      	ldr	r2, [pc, #180]	@ (8010634 <xTCPTimerCheck+0xe0>)
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 8010582:	6a3b      	ldr	r3, [r7, #32]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d14b      	bne.n	8010620 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 8010588:	2301      	movs	r3, #1
 801058a:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 801058c:	e048      	b.n	8010620 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8010594:	69fb      	ldr	r3, [r7, #28]
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d03a      	beq.n	801061a <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80105aa:	461a      	mov	r2, r3
 80105ac:	6a3b      	ldr	r3, [r7, #32]
 80105ae:	4293      	cmp	r3, r2
 80105b0:	d20a      	bcs.n	80105c8 <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 80105b8:	6a3b      	ldr	r3, [r7, #32]
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	1ad3      	subs	r3, r2, r3
 80105be:	b29a      	uxth	r2, r3
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80105c6:	e00a      	b.n	80105de <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	2200      	movs	r2, #0
 80105cc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 80105d0:	6938      	ldr	r0, [r7, #16]
 80105d2:	f000 ff33 	bl	801143c <xTCPSocketCheck>
 80105d6:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	db1f      	blt.n	801061e <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d008      	beq.n	80105f8 <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d003      	beq.n	80105f4 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 80105ec:	6938      	ldr	r0, [r7, #16]
 80105ee:	f7ff f970 	bl	800f8d2 <vSocketWakeUpUser>
 80105f2:	e001      	b.n	80105f8 <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 80105f4:	2300      	movs	r3, #0
 80105f6:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d00e      	beq.n	8010620 <xTCPTimerCheck+0xcc>
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010608:	461a      	mov	r2, r3
 801060a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801060c:	4293      	cmp	r3, r2
 801060e:	d907      	bls.n	8010620 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010616:	627b      	str	r3, [r7, #36]	@ 0x24
 8010618:	e002      	b.n	8010620 <xTCPTimerCheck+0xcc>
                continue;
 801061a:	bf00      	nop
 801061c:	e000      	b.n	8010620 <xTCPTimerCheck+0xcc>
                    continue;
 801061e:	bf00      	nop
        while( pxIterator != pxEnd )
 8010620:	69fa      	ldr	r2, [r7, #28]
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	429a      	cmp	r2, r3
 8010626:	d1b2      	bne.n	801058e <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 8010628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801062a:	4618      	mov	r0, r3
 801062c:	3728      	adds	r7, #40	@ 0x28
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	2000161c 	.word	0x2000161c
 8010638:	20001610 	.word	0x20001610
 801063c:	20001608 	.word	0x20001608

08010640 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 8010640:	b082      	sub	sp, #8
 8010642:	b580      	push	{r7, lr}
 8010644:	b088      	sub	sp, #32
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
 801064a:	6039      	str	r1, [r7, #0]
 801064c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8010650:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 8010654:	2300      	movs	r3, #0
 8010656:	61bb      	str	r3, [r7, #24]
 8010658:	2300      	movs	r3, #0
 801065a:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801065c:	4b23      	ldr	r3, [pc, #140]	@ (80106ec <pxTCPSocketLookup+0xac>)
 801065e:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	61fb      	str	r3, [r7, #28]
 8010666:	e02e      	b.n	80106c6 <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	b29b      	uxth	r3, r3
 8010676:	429a      	cmp	r2, r3
 8010678:	d122      	bne.n	80106c0 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010680:	2b01      	cmp	r3, #1
 8010682:	d102      	bne.n	801068a <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	617b      	str	r3, [r7, #20]
 8010688:	e01a      	b.n	80106c0 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010692:	b29b      	uxth	r3, r3
 8010694:	429a      	cmp	r2, r3
 8010696:	d113      	bne.n	80106c0 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 8010698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801069a:	2b00      	cmp	r3, #0
 801069c:	d006      	beq.n	80106ac <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 801069e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f7fb f8b6 	bl	800b814 <pxTCPSocketLookup_IPv6>
 80106a8:	61b8      	str	r0, [r7, #24]
 80106aa:	e006      	b.n	80106ba <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80106b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d101      	bne.n	80106ba <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 80106ba:	69bb      	ldr	r3, [r7, #24]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d107      	bne.n	80106d0 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 80106c0:	69fb      	ldr	r3, [r7, #28]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 80106c6:	69fa      	ldr	r2, [r7, #28]
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d1cc      	bne.n	8010668 <pxTCPSocketLookup+0x28>
 80106ce:	e000      	b.n	80106d2 <pxTCPSocketLookup+0x92>
                    {
                        break;
 80106d0:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d101      	bne.n	80106dc <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 80106dc:	69bb      	ldr	r3, [r7, #24]
    }
 80106de:	4618      	mov	r0, r3
 80106e0:	3720      	adds	r7, #32
 80106e2:	46bd      	mov	sp, r7
 80106e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80106e8:	b002      	add	sp, #8
 80106ea:	4770      	bx	lr
 80106ec:	20001610 	.word	0x20001610

080106f0 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b088      	sub	sp, #32
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d048      	beq.n	8010792 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 8010700:	2314      	movs	r3, #20
 8010702:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 8010704:	2350      	movs	r3, #80	@ 0x50
 8010706:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8010714:	fbb3 f3f2 	udiv	r3, r3, r2
 8010718:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d00f      	beq.n	8010740 <prvTCPCreateStream+0x50>
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	2b04      	cmp	r3, #4
 8010724:	d80c      	bhi.n	8010740 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	3b01      	subs	r3, #1
 801072a:	4a40      	ldr	r2, [pc, #256]	@ (801082c <prvTCPCreateStream+0x13c>)
 801072c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010730:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	3b01      	subs	r3, #1
 8010736:	4a3d      	ldr	r2, [pc, #244]	@ (801082c <prvTCPCreateStream+0x13c>)
 8010738:	00db      	lsls	r3, r3, #3
 801073a:	4413      	add	r3, r2
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010746:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801074e:	2b00      	cmp	r3, #0
 8010750:	d10c      	bne.n	801076c <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010758:	69ba      	ldr	r2, [r7, #24]
 801075a:	fb02 f303 	mul.w	r3, r2, r3
 801075e:	4a34      	ldr	r2, [pc, #208]	@ (8010830 <prvTCPCreateStream+0x140>)
 8010760:	fba2 2303 	umull	r2, r3, r2, r3
 8010764:	095a      	lsrs	r2, r3, #5
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010772:	2b00      	cmp	r3, #0
 8010774:	d111      	bne.n	801079a <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801077c:	697a      	ldr	r2, [r7, #20]
 801077e:	fb02 f303 	mul.w	r3, r2, r3
 8010782:	4a2b      	ldr	r2, [pc, #172]	@ (8010830 <prvTCPCreateStream+0x140>)
 8010784:	fba2 2303 	umull	r2, r3, r2, r3
 8010788:	095a      	lsrs	r2, r3, #5
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8010790:	e003      	b.n	801079a <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010798:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	3304      	adds	r3, #4
 801079e:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 80107a0:	69fb      	ldr	r3, [r7, #28]
 80107a2:	f023 0303 	bic.w	r3, r3, #3
 80107a6:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 80107a8:	69fb      	ldr	r3, [r7, #28]
 80107aa:	3314      	adds	r3, #20
 80107ac:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 80107ae:	68f8      	ldr	r0, [r7, #12]
 80107b0:	f7f6 f848 	bl	8006844 <pvPortMalloc>
 80107b4:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d10e      	bne.n	80107da <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 80107bc:	481d      	ldr	r0, [pc, #116]	@ (8010834 <prvTCPCreateStream+0x144>)
 80107be:	f011 ff41 	bl	8022644 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80107c8:	f043 0308 	orr.w	r3, r3, #8
 80107cc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80107d0:	2108      	movs	r1, #8
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f000 ff2a 	bl	801162c <vTCPStateChange>
 80107d8:	e022      	b.n	8010820 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 80107da:	2214      	movs	r2, #20
 80107dc:	2100      	movs	r1, #0
 80107de:	68b8      	ldr	r0, [r7, #8]
 80107e0:	f012 fa59 	bl	8022c96 <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	69fa      	ldr	r2, [r7, #28]
 80107e8:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 80107ea:	4b13      	ldr	r3, [pc, #76]	@ (8010838 <prvTCPCreateStream+0x148>)
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d00a      	beq.n	8010808 <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d001      	beq.n	80107fc <prvTCPCreateStream+0x10c>
 80107f8:	2152      	movs	r1, #82	@ 0x52
 80107fa:	e000      	b.n	80107fe <prvTCPCreateStream+0x10e>
 80107fc:	2154      	movs	r1, #84	@ 0x54
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	69fa      	ldr	r2, [r7, #28]
 8010802:	480e      	ldr	r0, [pc, #56]	@ (801083c <prvTCPCreateStream+0x14c>)
 8010804:	f011 ff1e 	bl	8022644 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d004      	beq.n	8010818 <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8010816:	e003      	b.n	8010820 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 8010820:	68bb      	ldr	r3, [r7, #8]
    }
 8010822:	4618      	mov	r0, r3
 8010824:	3720      	adds	r7, #32
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
 801082a:	bf00      	nop
 801082c:	08027dd4 	.word	0x08027dd4
 8010830:	51eb851f 	.word	0x51eb851f
 8010834:	080264c4 	.word	0x080264c4
 8010838:	2000164c 	.word	0x2000164c
 801083c:	080264e8 	.word	0x080264e8

08010840 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 8010840:	b580      	push	{r7, lr}
 8010842:	b08a      	sub	sp, #40	@ 0x28
 8010844:	af02      	add	r7, sp, #8
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 8010850:	2300      	movs	r3, #0
 8010852:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 8010854:	69fb      	ldr	r3, [r7, #28]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d006      	beq.n	8010868 <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 801085a:	69fb      	ldr	r3, [r7, #28]
 801085c:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 8010862:	2300      	movs	r3, #0
 8010864:	61fb      	str	r3, [r7, #28]
 8010866:	e009      	b.n	801087c <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801086e:	f107 0214 	add.w	r2, r7, #20
 8010872:	4611      	mov	r1, r2
 8010874:	4618      	mov	r0, r3
 8010876:	f000 fc92 	bl	801119e <uxStreamBufferGetPtr>
 801087a:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 801087c:	69bb      	ldr	r3, [r7, #24]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d011      	beq.n	80108a6 <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010888:	6979      	ldr	r1, [r7, #20]
 801088a:	69ba      	ldr	r2, [r7, #24]
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 8010896:	2300      	movs	r3, #0
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	69bb      	ldr	r3, [r7, #24]
 801089c:	2200      	movs	r2, #0
 801089e:	2100      	movs	r1, #0
 80108a0:	f000 fd1d 	bl	80112de <uxStreamBufferGet>
        {
 80108a4:	e7d4      	b.n	8010850 <vTCPAddRxdata_Callback+0x10>
        }
    }
 80108a6:	bf00      	nop
 80108a8:	3720      	adds	r7, #32
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b084      	sub	sp, #16
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80108bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d121      	bne.n	801090a <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80108cc:	4618      	mov	r0, r3
 80108ce:	f000 fbd7 	bl	8011080 <uxStreamBufferFrontSpace>
 80108d2:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80108da:	68fa      	ldr	r2, [r7, #12]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d814      	bhi.n	801090a <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80108e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108ea:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80108f4:	f043 0301 	orr.w	r3, r3, #1
 80108f8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2201      	movs	r2, #1
 8010900:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010904:	2006      	movs	r0, #6
 8010906:	f7f9 f8fd 	bl	8009b04 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f043 0201 	orr.w	r2, r3, #1
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801091a:	f003 0301 	and.w	r3, r3, #1
 801091e:	2b00      	cmp	r3, #0
 8010920:	d005      	beq.n	801092e <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 801092e:	bf00      	nop
 8010930:	3710      	adds	r7, #16
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
	...

08010938 <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 8010938:	b5b0      	push	{r4, r5, r7, lr}
 801093a:	b08c      	sub	sp, #48	@ 0x30
 801093c:	af04      	add	r7, sp, #16
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
 8010944:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801094c:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 801094e:	2300      	movs	r3, #0
 8010950:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010958:	2b00      	cmp	r3, #0
 801095a:	d001      	beq.n	8010960 <lTCPAddRxdata+0x28>
 801095c:	2301      	movs	r3, #1
 801095e:	e000      	b.n	8010962 <lTCPAddRxdata+0x2a>
 8010960:	2300      	movs	r3, #0
 8010962:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 8010964:	2300      	movs	r3, #0
 8010966:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d10a      	bne.n	8010984 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 801096e:	2101      	movs	r1, #1
 8010970:	68f8      	ldr	r0, [r7, #12]
 8010972:	f7ff febd 	bl	80106f0 <prvTCPCreateStream>
 8010976:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d102      	bne.n	8010984 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 801097e:	f04f 33ff 	mov.w	r3, #4294967295
 8010982:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	2b00      	cmp	r3, #0
 8010988:	db41      	blt.n	8010a0e <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d00f      	beq.n	80109b0 <lTCPAddRxdata+0x78>
 8010990:	69f8      	ldr	r0, [r7, #28]
 8010992:	f000 fb86 	bl	80110a2 <uxStreamBufferGetSize>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d109      	bne.n	80109b0 <lTCPAddRxdata+0x78>
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d106      	bne.n	80109b0 <lTCPAddRxdata+0x78>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d003      	beq.n	80109b0 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 80109ac:	2300      	movs	r3, #0
 80109ae:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	68b9      	ldr	r1, [r7, #8]
 80109b6:	69f8      	ldr	r0, [r7, #28]
 80109b8:	f000 fc11 	bl	80111de <uxStreamBufferAdd>
 80109bc:	4603      	mov	r3, r0
 80109be:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	69ba      	ldr	r2, [r7, #24]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d013      	beq.n	80109f0 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	681c      	ldr	r4, [r3, #0]
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	689d      	ldr	r5, [r3, #8]
 80109d0:	69f8      	ldr	r0, [r7, #28]
 80109d2:	f000 fb55 	bl	8011080 <uxStreamBufferFrontSpace>
 80109d6:	4602      	mov	r2, r0
 80109d8:	69fb      	ldr	r3, [r7, #28]
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	9303      	str	r3, [sp, #12]
 80109de:	9202      	str	r2, [sp, #8]
 80109e0:	9501      	str	r5, [sp, #4]
 80109e2:	9400      	str	r4, [sp, #0]
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	69ba      	ldr	r2, [r7, #24]
 80109e8:	68b9      	ldr	r1, [r7, #8]
 80109ea:	480b      	ldr	r0, [pc, #44]	@ (8010a18 <lTCPAddRxdata+0xe0>)
 80109ec:	f011 fe2a 	bl	8022644 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d10b      	bne.n	8010a0e <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d005      	beq.n	8010a08 <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 80109fc:	683a      	ldr	r2, [r7, #0]
 80109fe:	6979      	ldr	r1, [r7, #20]
 8010a00:	68f8      	ldr	r0, [r7, #12]
 8010a02:	f7ff ff1d 	bl	8010840 <vTCPAddRxdata_Callback>
 8010a06:	e002      	b.n	8010a0e <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 8010a08:	68f8      	ldr	r0, [r7, #12]
 8010a0a:	f7ff ff50 	bl	80108ae <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 8010a0e:	69bb      	ldr	r3, [r7, #24]
    }
 8010a10:	4618      	mov	r0, r3
 8010a12:	3720      	adds	r7, #32
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bdb0      	pop	{r4, r5, r7, pc}
 8010a18:	08026524 	.word	0x08026524

08010a1c <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010a2e:	2b06      	cmp	r3, #6
 8010a30:	d003      	beq.n	8010a3a <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010a32:	f06f 0315 	mvn.w	r3, #21
 8010a36:	60fb      	str	r3, [r7, #12]
 8010a38:	e011      	b.n	8010a5e <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d008      	beq.n	8010a56 <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f000 fb07 	bl	801105e <uxStreamBufferGetSpace>
 8010a50:	4603      	mov	r3, r0
 8010a52:	60fb      	str	r3, [r7, #12]
 8010a54:	e003      	b.n	8010a5e <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010a5c:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
    }
 8010a60:	4618      	mov	r0, r3
 8010a62:	3710      	adds	r7, #16
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010a7a:	2b06      	cmp	r3, #6
 8010a7c:	d003      	beq.n	8010a86 <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010a7e:	f06f 0315 	mvn.w	r3, #21
 8010a82:	60fb      	str	r3, [r7, #12]
 8010a84:	e00f      	b.n	8010aa6 <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d008      	beq.n	8010aa2 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010a96:	4618      	mov	r0, r3
 8010a98:	f000 fb03 	bl	80110a2 <uxStreamBufferGetSize>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	60fb      	str	r3, [r7, #12]
 8010aa0:	e001      	b.n	8010aa6 <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
    }
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3710      	adds	r7, #16
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8010abc:	2300      	movs	r3, #0
 8010abe:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010ac6:	2b06      	cmp	r3, #6
 8010ac8:	d003      	beq.n	8010ad2 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010aca:	f06f 0315 	mvn.w	r3, #21
 8010ace:	60fb      	str	r3, [r7, #12]
 8010ad0:	e00b      	b.n	8010aea <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010ad8:	2b04      	cmp	r3, #4
 8010ada:	d906      	bls.n	8010aea <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010ae2:	2b07      	cmp	r3, #7
 8010ae4:	d801      	bhi.n	8010aea <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 8010aea:	68fb      	ldr	r3, [r7, #12]
    }
 8010aec:	4618      	mov	r0, r3
 8010aee:	3714      	adds	r7, #20
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b084      	sub	sp, #16
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010b0a:	2b06      	cmp	r3, #6
 8010b0c:	d003      	beq.n	8010b16 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010b0e:	f06f 0315 	mvn.w	r3, #21
 8010b12:	60fb      	str	r3, [r7, #12]
 8010b14:	e00f      	b.n	8010b36 <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d008      	beq.n	8010b32 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010b26:	4618      	mov	r0, r3
 8010b28:	f000 fabb 	bl	80110a2 <uxStreamBufferGetSize>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	60fb      	str	r3, [r7, #12]
 8010b30:	e001      	b.n	8010b36 <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 8010b32:	2300      	movs	r3, #0
 8010b34:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8010b36:	68fb      	ldr	r3, [r7, #12]
    }
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3710      	adds	r7, #16
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 8010b40:	b480      	push	{r7}
 8010b42:	b085      	sub	sp, #20
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b52:	d004      	beq.n	8010b5e <xSocketValid+0x1e>
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d001      	beq.n	8010b5e <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3714      	adds	r7, #20
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 8010b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b70:	b09c      	sub	sp, #112	@ 0x70
 8010b72:	af08      	add	r7, sp, #32
 8010b74:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 8010b76:	2320      	movs	r3, #32
 8010b78:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8010b7a:	f7f3 fff5 	bl	8004b68 <xTaskGetTickCount>
 8010b7e:	4602      	mov	r2, r0
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010b86:	1ad3      	subs	r3, r2, r3
 8010b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	60fb      	str	r3, [r7, #12]
 8010b8e:	f107 0310 	add.w	r3, r7, #16
 8010b92:	2200      	movs	r2, #0
 8010b94:	601a      	str	r2, [r3, #0]
 8010b96:	605a      	str	r2, [r3, #4]
 8010b98:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d11f      	bne.n	8010be4 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010baa:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010bb2:	f107 000c 	add.w	r0, r7, #12
 8010bb6:	9300      	str	r3, [sp, #0]
 8010bb8:	4613      	mov	r3, r2
 8010bba:	4a3b      	ldr	r2, [pc, #236]	@ (8010ca8 <vTCPNetStat_TCPSocket+0x13c>)
 8010bbc:	2110      	movs	r1, #16
 8010bbe:	f012 fd6d 	bl	802369c <snprintf>
 8010bc2:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	da04      	bge.n	8010bd4 <vTCPNetStat_TCPSocket+0x68>
 8010bca:	f241 61df 	movw	r1, #5855	@ 0x16df
 8010bce:	4837      	ldr	r0, [pc, #220]	@ (8010cac <vTCPNetStat_TCPSocket+0x140>)
 8010bd0:	f7f0 fed4 	bl	800197c <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bd6:	2b0f      	cmp	r3, #15
 8010bd8:	dd04      	ble.n	8010be4 <vTCPNetStat_TCPSocket+0x78>
 8010bda:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 8010bde:	4833      	ldr	r0, [pc, #204]	@ (8010cac <vTCPNetStat_TCPSocket+0x140>)
 8010be0:	f7f0 fecc 	bl	800197c <vAssertCalled>
        }

        if( age > 999999U )
 8010be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010be6:	4a32      	ldr	r2, [pc, #200]	@ (8010cb0 <vTCPNetStat_TCPSocket+0x144>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d901      	bls.n	8010bf0 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 8010bec:	4b30      	ldr	r3, [pc, #192]	@ (8010cb0 <vTCPNetStat_TCPSocket+0x144>)
 8010bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	7a1b      	ldrb	r3, [r3, #8]
 8010bf4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d002      	beq.n	8010c04 <vTCPNetStat_TCPSocket+0x98>
 8010bfe:	2b01      	cmp	r3, #1
 8010c00:	d009      	beq.n	8010c16 <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 8010c02:	e011      	b.n	8010c28 <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c08:	f107 001c 	add.w	r0, r7, #28
 8010c0c:	4a29      	ldr	r2, [pc, #164]	@ (8010cb4 <vTCPNetStat_TCPSocket+0x148>)
 8010c0e:	2128      	movs	r1, #40	@ 0x28
 8010c10:	f012 fd44 	bl	802369c <snprintf>
                    break;
 8010c14:	e008      	b.n	8010c28 <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 8010c1a:	f107 001c 	add.w	r0, r7, #28
 8010c1e:	4a26      	ldr	r2, [pc, #152]	@ (8010cb8 <vTCPNetStat_TCPSocket+0x14c>)
 8010c20:	2128      	movs	r1, #40	@ 0x28
 8010c22:	f012 fd3b 	bl	802369c <snprintf>
                    break;
 8010c26:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010c2c:	4698      	mov	r8, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010c34:	461c      	mov	r4, r3
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	bf14      	ite	ne
 8010c40:	2301      	movne	r3, #1
 8010c42:	2300      	moveq	r3, #0
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	461d      	mov	r5, r3
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	bf14      	ite	ne
 8010c52:	2301      	movne	r3, #1
 8010c54:	2300      	moveq	r3, #0
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	461e      	mov	r6, r3
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010c60:	4618      	mov	r0, r3
 8010c62:	f002 fbf5 	bl	8013450 <FreeRTOS_GetTCPStateName>
 8010c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c68:	4a11      	ldr	r2, [pc, #68]	@ (8010cb0 <vTCPNetStat_TCPSocket+0x144>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	bf28      	it	cs
 8010c6e:	4613      	movcs	r3, r2
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 8010c76:	603a      	str	r2, [r7, #0]
 8010c78:	f107 011c 	add.w	r1, r7, #28
 8010c7c:	f107 020c 	add.w	r2, r7, #12
 8010c80:	9206      	str	r2, [sp, #24]
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	9205      	str	r2, [sp, #20]
 8010c86:	9304      	str	r3, [sp, #16]
 8010c88:	9003      	str	r0, [sp, #12]
 8010c8a:	9602      	str	r6, [sp, #8]
 8010c8c:	9501      	str	r5, [sp, #4]
 8010c8e:	9400      	str	r4, [sp, #0]
 8010c90:	460b      	mov	r3, r1
 8010c92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c94:	4641      	mov	r1, r8
 8010c96:	4809      	ldr	r0, [pc, #36]	@ (8010cbc <vTCPNetStat_TCPSocket+0x150>)
 8010c98:	f011 fcd4 	bl	8022644 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 8010c9c:	bf00      	nop
 8010c9e:	3750      	adds	r7, #80	@ 0x50
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ca6:	bf00      	nop
 8010ca8:	0802656c 	.word	0x0802656c
 8010cac:	0802608c 	.word	0x0802608c
 8010cb0:	000f423f 	.word	0x000f423f
 8010cb4:	08026574 	.word	0x08026574
 8010cb8:	0802657c 	.word	0x0802657c
 8010cbc:	08026584 	.word	0x08026584

08010cc0 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b08a      	sub	sp, #40	@ 0x28
 8010cc4:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 8010cca:	f006 fe59 	bl	8017980 <uxGetMinimumFreeNetworkBuffers>
 8010cce:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 8010cd0:	f006 fe62 	bl	8017998 <uxGetNumberOfFreeNetworkBuffers>
 8010cd4:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 8010cd6:	4b26      	ldr	r3, [pc, #152]	@ (8010d70 <vTCPNetStat+0xb0>)
 8010cd8:	689b      	ldr	r3, [r3, #8]
 8010cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cde:	d003      	beq.n	8010ce8 <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8010ce0:	4824      	ldr	r0, [pc, #144]	@ (8010d74 <vTCPNetStat+0xb4>)
 8010ce2:	f011 fcaf 	bl	8022644 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 8010ce6:	e03f      	b.n	8010d68 <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 8010ce8:	4b23      	ldr	r3, [pc, #140]	@ (8010d78 <vTCPNetStat+0xb8>)
 8010cea:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 8010cec:	4b23      	ldr	r3, [pc, #140]	@ (8010d7c <vTCPNetStat+0xbc>)
 8010cee:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 8010cf0:	4823      	ldr	r0, [pc, #140]	@ (8010d80 <vTCPNetStat+0xc0>)
 8010cf2:	f011 fca7 	bl	8022644 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8010d70 <vTCPNetStat+0xb0>)
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	61fb      	str	r3, [r7, #28]
 8010cfc:	e00b      	b.n	8010d16 <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010cfe:	69fb      	ldr	r3, [r7, #28]
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7ff ff31 	bl	8010b6c <vTCPNetStat_TCPSocket>
                count++;
 8010d0a:	69bb      	ldr	r3, [r7, #24]
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010d10:	69fb      	ldr	r3, [r7, #28]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 8010d16:	69fa      	ldr	r2, [r7, #28]
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d1ef      	bne.n	8010cfe <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 8010d1e:	4b19      	ldr	r3, [pc, #100]	@ (8010d84 <vTCPNetStat+0xc4>)
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	61fb      	str	r3, [r7, #28]
 8010d24:	e014      	b.n	8010d50 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 8010d26:	69fb      	ldr	r3, [r7, #28]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	021b      	lsls	r3, r3, #8
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	0a1b      	lsrs	r3, r3, #8
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	4313      	orrs	r3, r2
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	4812      	ldr	r0, [pc, #72]	@ (8010d88 <vTCPNetStat+0xc8>)
 8010d40:	f011 fc80 	bl	8022644 <lUDPLoggingPrintf>
                count++;
 8010d44:	69bb      	ldr	r3, [r7, #24]
 8010d46:	3301      	adds	r3, #1
 8010d48:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 8010d50:	69fa      	ldr	r2, [r7, #28]
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d1e6      	bne.n	8010d26 <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 8010d58:	2340      	movs	r3, #64	@ 0x40
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	697a      	ldr	r2, [r7, #20]
 8010d60:	69b9      	ldr	r1, [r7, #24]
 8010d62:	480a      	ldr	r0, [pc, #40]	@ (8010d8c <vTCPNetStat+0xcc>)
 8010d64:	f011 fc6e 	bl	8022644 <lUDPLoggingPrintf>
    }
 8010d68:	bf00      	nop
 8010d6a:	3720      	adds	r7, #32
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	20001608 	.word	0x20001608
 8010d74:	080265b0 	.word	0x080265b0
 8010d78:	20001610 	.word	0x20001610
 8010d7c:	200015fc 	.word	0x200015fc
 8010d80:	080265cc 	.word	0x080265cc
 8010d84:	200015f4 	.word	0x200015f4
 8010d88:	08026614 	.word	0x08026614
 8010d8c:	08026624 	.word	0x08026624

08010d90 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b086      	sub	sp, #24
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010da6:	f003 0304 	and.w	r3, r3, #4
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d109      	bne.n	8010dc4 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010db6:	f003 0302 	and.w	r3, r3, #2
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d101      	bne.n	8010dc4 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dc8:	f003 0301 	and.w	r3, r3, #1
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d038      	beq.n	8010e42 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010dd6:	2b01      	cmp	r3, #1
 8010dd8:	d111      	bne.n	8010dfe <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d02f      	beq.n	8010e42 <vSocketSelectTCP+0xb2>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010de6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010dea:	f003 0302 	and.w	r3, r3, #2
 8010dee:	b2db      	uxtb	r3, r3
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d026      	beq.n	8010e42 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	f043 0301 	orr.w	r3, r3, #1
 8010dfa:	613b      	str	r3, [r7, #16]
 8010dfc:	e021      	b.n	8010e42 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010e04:	f003 0308 	and.w	r3, r3, #8
 8010e08:	b2db      	uxtb	r3, r3
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00c      	beq.n	8010e28 <vSocketSelectTCP+0x98>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010e14:	f003 0302 	and.w	r3, r3, #2
 8010e18:	b2db      	uxtb	r3, r3
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d004      	beq.n	8010e28 <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	f043 0301 	orr.w	r3, r3, #1
 8010e24:	613b      	str	r3, [r7, #16]
 8010e26:	e00c      	b.n	8010e42 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d009      	beq.n	8010e42 <vSocketSelectTCP+0xb2>
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7ff fe62 	bl	8010af8 <FreeRTOS_rx_size>
 8010e34:	4603      	mov	r3, r0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	dd03      	ble.n	8010e42 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	f043 0301 	orr.w	r3, r3, #1
 8010e40:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e46:	f003 0304 	and.w	r3, r3, #4
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00d      	beq.n	8010e6a <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010e54:	2b08      	cmp	r3, #8
 8010e56:	d004      	beq.n	8010e62 <vSocketSelectTCP+0xd2>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d103      	bne.n	8010e6a <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	f043 0304 	orr.w	r3, r3, #4
 8010e68:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e6e:	f003 0302 	and.w	r3, r3, #2
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d034      	beq.n	8010ee0 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 8010e76:	2300      	movs	r3, #0
 8010e78:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d007      	beq.n	8010e90 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7ff fdcb 	bl	8010a1c <FreeRTOS_tx_space>
 8010e86:	4603      	mov	r3, r0
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	dd01      	ble.n	8010e90 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d11d      	bne.n	8010ed2 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010e9c:	f003 0308 	and.w	r3, r3, #8
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d015      	beq.n	8010ed2 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8010eac:	2b04      	cmp	r3, #4
 8010eae:	d910      	bls.n	8010ed2 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010eb6:	f003 0310 	and.w	r3, r3, #16
 8010eba:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d108      	bne.n	8010ed2 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010ec6:	f043 0310 	orr.w	r3, r3, #16
 8010eca:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d003      	beq.n	8010ee0 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	f043 0302 	orr.w	r3, r3, #2
 8010ede:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 8010ee0:	693b      	ldr	r3, [r7, #16]
        }
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3718      	adds	r7, #24
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
	...

08010eec <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b08a      	sub	sp, #40	@ 0x28
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8010efc:	2300      	movs	r3, #0
 8010efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8010f00:	e043      	b.n	8010f8a <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 8010f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d102      	bne.n	8010f0e <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 8010f08:	4b34      	ldr	r3, [pc, #208]	@ (8010fdc <vSocketSelect+0xf0>)
 8010f0a:	617b      	str	r3, [r7, #20]
 8010f0c:	e001      	b.n	8010f12 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010f0e:	4b34      	ldr	r3, [pc, #208]	@ (8010fe0 <vSocketSelect+0xf4>)
 8010f10:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	61bb      	str	r3, [r7, #24]
 8010f18:	e030      	b.n	8010f7c <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	68db      	ldr	r3, [r3, #12]
 8010f1e:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d124      	bne.n	8010f74 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010f34:	2b06      	cmp	r3, #6
 8010f36:	d107      	bne.n	8010f48 <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 8010f38:	68b8      	ldr	r0, [r7, #8]
 8010f3a:	f7ff ff29 	bl	8010d90 <vSocketSelectTCP>
 8010f3e:	4602      	mov	r2, r0
 8010f40:	6a3b      	ldr	r3, [r7, #32]
 8010f42:	4313      	orrs	r3, r2
 8010f44:	623b      	str	r3, [r7, #32]
 8010f46:	e00d      	b.n	8010f64 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f4c:	f003 0301 	and.w	r3, r3, #1
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d007      	beq.n	8010f64 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d003      	beq.n	8010f64 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010f5c:	6a3b      	ldr	r3, [r7, #32]
 8010f5e:	f043 0301 	orr.w	r3, r3, #1
 8010f62:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	6a3a      	ldr	r2, [r7, #32]
 8010f68:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 8010f6a:	69fa      	ldr	r2, [r7, #28]
 8010f6c:	6a3b      	ldr	r3, [r7, #32]
 8010f6e:	4313      	orrs	r3, r2
 8010f70:	61fb      	str	r3, [r7, #28]
 8010f72:	e000      	b.n	8010f76 <vSocketSelect+0x8a>
                    continue;
 8010f74:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010f76:	69bb      	ldr	r3, [r7, #24]
 8010f78:	685b      	ldr	r3, [r3, #4]
 8010f7a:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 8010f7c:	69ba      	ldr	r2, [r7, #24]
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d1ca      	bne.n	8010f1a <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8010f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f86:	3301      	adds	r3, #1
 8010f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8010f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	ddb7      	ble.n	8010f02 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	2100      	movs	r1, #0
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7f2 fa5b 	bl	8003454 <xEventGroupClearBits>
 8010f9e:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 8010fa0:	69fb      	ldr	r3, [r7, #28]
 8010fa2:	43da      	mvns	r2, r3
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	4013      	ands	r3, r2
 8010fa8:	f003 030f 	and.w	r3, r3, #15
 8010fac:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d005      	beq.n	8010fc0 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	68f9      	ldr	r1, [r7, #12]
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7f2 fa4a 	bl	8003454 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681a      	ldr	r2, [r3, #0]
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	f043 0310 	orr.w	r3, r3, #16
 8010fca:	4619      	mov	r1, r3
 8010fcc:	4610      	mov	r0, r2
 8010fce:	f7f2 fa6f 	bl	80034b0 <xEventGroupSetBits>
    }
 8010fd2:	bf00      	nop
 8010fd4:	3728      	adds	r7, #40	@ 0x28
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
 8010fda:	bf00      	nop
 8010fdc:	200015fc 	.word	0x200015fc
 8010fe0:	20001610 	.word	0x20001610

08010fe4 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b087      	sub	sp, #28
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	691b      	ldr	r3, [r3, #16]
 8010ff4:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 8010ff6:	693a      	ldr	r2, [r7, #16]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	441a      	add	r2, r3
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	1ad3      	subs	r3, r2, r3
 8011000:	3b01      	subs	r3, #1
 8011002:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8011004:	697a      	ldr	r2, [r7, #20]
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	429a      	cmp	r2, r3
 801100a:	d303      	bcc.n	8011014 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 801100c:	697a      	ldr	r2, [r7, #20]
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	1ad3      	subs	r3, r2, r3
 8011012:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8011014:	697b      	ldr	r3, [r7, #20]
}
 8011016:	4618      	mov	r0, r3
 8011018:	371c      	adds	r7, #28
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr

08011022 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 8011022:	b480      	push	{r7}
 8011024:	b087      	sub	sp, #28
 8011026:	af00      	add	r7, sp, #0
 8011028:	60f8      	str	r0, [r7, #12]
 801102a:	60b9      	str	r1, [r7, #8]
 801102c:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	691b      	ldr	r3, [r3, #16]
 8011032:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 8011034:	693a      	ldr	r2, [r7, #16]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	441a      	add	r2, r3
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	1ad3      	subs	r3, r2, r3
 801103e:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8011040:	697a      	ldr	r2, [r7, #20]
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	429a      	cmp	r2, r3
 8011046:	d303      	bcc.n	8011050 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 8011048:	697a      	ldr	r2, [r7, #20]
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	1ad3      	subs	r3, r2, r3
 801104e:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8011050:	697b      	ldr	r3, [r7, #20]
}
 8011052:	4618      	mov	r0, r3
 8011054:	371c      	adds	r7, #28
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr

0801105e <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 801105e:	b580      	push	{r7, lr}
 8011060:	b082      	sub	sp, #8
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6899      	ldr	r1, [r3, #8]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	461a      	mov	r2, r3
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f7ff ffb7 	bl	8010fe4 <uxStreamBufferSpace>
 8011076:	4603      	mov	r3, r0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b082      	sub	sp, #8
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	68d9      	ldr	r1, [r3, #12]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	461a      	mov	r2, r3
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f7ff ffa6 	bl	8010fe4 <uxStreamBufferSpace>
 8011098:	4603      	mov	r3, r0
}
 801109a:	4618      	mov	r0, r3
 801109c:	3708      	adds	r7, #8
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}

080110a2 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 80110a2:	b580      	push	{r7, lr}
 80110a4:	b082      	sub	sp, #8
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6819      	ldr	r1, [r3, #0]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	689b      	ldr	r3, [r3, #8]
 80110b2:	461a      	mov	r2, r3
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f7ff ffb4 	bl	8011022 <uxStreamBufferDistance>
 80110ba:	4603      	mov	r3, r0
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3708      	adds	r7, #8
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6859      	ldr	r1, [r3, #4]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	689b      	ldr	r3, [r3, #8]
 80110d4:	461a      	mov	r2, r3
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f7ff ffa3 	bl	8011022 <uxStreamBufferDistance>
 80110dc:	4603      	mov	r3, r0
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3708      	adds	r7, #8
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}

080110e6 <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 80110e6:	b480      	push	{r7}
 80110e8:	b083      	sub	sp, #12
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2200      	movs	r2, #0
 80110f2:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2200      	movs	r2, #0
 80110fe:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2200      	movs	r2, #0
 8011104:	605a      	str	r2, [r3, #4]
}
 8011106:	bf00      	nop
 8011108:	370c      	adds	r7, #12
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr

08011112 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 8011112:	b580      	push	{r7, lr}
 8011114:	b086      	sub	sp, #24
 8011116:	af00      	add	r7, sp, #0
 8011118:	6078      	str	r0, [r7, #4]
 801111a:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	691b      	ldr	r3, [r3, #16]
 8011120:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f7ff ffce 	bl	80110c4 <uxStreamBufferMidSpace>
 8011128:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 8011134:	693a      	ldr	r2, [r7, #16]
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	429a      	cmp	r2, r3
 801113a:	d901      	bls.n	8011140 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 8011140:	697a      	ldr	r2, [r7, #20]
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	4413      	add	r3, r2
 8011146:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 8011148:	697a      	ldr	r2, [r7, #20]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	429a      	cmp	r2, r3
 801114e:	d303      	bcc.n	8011158 <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 8011150:	697a      	ldr	r2, [r7, #20]
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	1ad3      	subs	r3, r2, r3
 8011156:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	697a      	ldr	r2, [r7, #20]
 801115c:	605a      	str	r2, [r3, #4]
}
 801115e:	bf00      	nop
 8011160:	3718      	adds	r7, #24
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}

08011166 <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 8011166:	b480      	push	{r7}
 8011168:	b087      	sub	sp, #28
 801116a:	af00      	add	r7, sp, #0
 801116c:	60f8      	str	r0, [r7, #12]
 801116e:	60b9      	str	r1, [r7, #8]
 8011170:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8011172:	2300      	movs	r3, #0
 8011174:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 801117c:	68ba      	ldr	r2, [r7, #8]
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	1ad2      	subs	r2, r2, r3
 8011182:	6879      	ldr	r1, [r7, #4]
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	1acb      	subs	r3, r1, r3
 8011188:	429a      	cmp	r2, r3
 801118a:	d801      	bhi.n	8011190 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 801118c:	2301      	movs	r3, #1
 801118e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8011190:	697b      	ldr	r3, [r7, #20]
}
 8011192:	4618      	mov	r0, r3
 8011194:	371c      	adds	r7, #28
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr

0801119e <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 801119e:	b580      	push	{r7, lr}
 80111a0:	b084      	sub	sp, #16
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
 80111a6:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f7ff ff77 	bl	80110a2 <uxStreamBufferGetSize>
 80111b4:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f103 0214 	add.w	r2, r3, #20
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	441a      	add	r2, r3
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	691a      	ldr	r2, [r3, #16]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	1ad3      	subs	r3, r2, r3
 80111cc:	4619      	mov	r1, r3
 80111ce:	68b8      	ldr	r0, [r7, #8]
 80111d0:	f7f9 fdc0 	bl	800ad54 <FreeRTOS_min_size_t>
 80111d4:	4603      	mov	r3, r0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3710      	adds	r7, #16
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}

080111de <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 80111de:	b580      	push	{r7, lr}
 80111e0:	b08a      	sub	sp, #40	@ 0x28
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	60f8      	str	r0, [r7, #12]
 80111e6:	60b9      	str	r1, [r7, #8]
 80111e8:	607a      	str	r2, [r7, #4]
 80111ea:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 80111ec:	68f8      	ldr	r0, [r7, #12]
 80111ee:	f7ff ff36 	bl	801105e <uxStreamBufferGetSpace>
 80111f2:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 80111f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d904      	bls.n	8011206 <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 80111fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	1ad3      	subs	r3, r2, r3
 8011202:	627b      	str	r3, [r7, #36]	@ 0x24
 8011204:	e001      	b.n	801120a <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 8011206:	2300      	movs	r3, #0
 8011208:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 801120a:	6839      	ldr	r1, [r7, #0]
 801120c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801120e:	f7f9 fda1 	bl	800ad54 <FreeRTOS_min_size_t>
 8011212:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d05c      	beq.n	80112d4 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	691b      	ldr	r3, [r3, #16]
 801121e:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d00b      	beq.n	8011244 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 801122c:	6a3a      	ldr	r2, [r7, #32]
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	4413      	add	r3, r2
 8011232:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 8011234:	6a3a      	ldr	r2, [r7, #32]
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	429a      	cmp	r2, r3
 801123a:	d303      	bcc.n	8011244 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 801123c:	6a3a      	ldr	r2, [r7, #32]
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	1ad3      	subs	r3, r2, r3
 8011242:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d021      	beq.n	801128e <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 801124a:	69ba      	ldr	r2, [r7, #24]
 801124c:	6a3b      	ldr	r3, [r7, #32]
 801124e:	1ad3      	subs	r3, r2, r3
 8011250:	69f9      	ldr	r1, [r7, #28]
 8011252:	4618      	mov	r0, r3
 8011254:	f7f9 fd7e 	bl	800ad54 <FreeRTOS_min_size_t>
 8011258:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 801125a:	6a3b      	ldr	r3, [r7, #32]
 801125c:	3310      	adds	r3, #16
 801125e:	68fa      	ldr	r2, [r7, #12]
 8011260:	4413      	add	r3, r2
 8011262:	3304      	adds	r3, #4
 8011264:	697a      	ldr	r2, [r7, #20]
 8011266:	6879      	ldr	r1, [r7, #4]
 8011268:	4618      	mov	r0, r3
 801126a:	f011 fc07 	bl	8022a7c <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 801126e:	69fa      	ldr	r2, [r7, #28]
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	429a      	cmp	r2, r3
 8011274:	d90b      	bls.n	801128e <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f103 0014 	add.w	r0, r3, #20
 801127c:	687a      	ldr	r2, [r7, #4]
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	18d1      	adds	r1, r2, r3
 8011282:	69fa      	ldr	r2, [r7, #28]
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	1ad3      	subs	r3, r2, r3
 8011288:	461a      	mov	r2, r3
 801128a:	f011 fbf7 	bl	8022a7c <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 801128e:	f7f3 fb59 	bl	8004944 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d10e      	bne.n	80112b6 <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 8011298:	6a3a      	ldr	r2, [r7, #32]
 801129a:	69fb      	ldr	r3, [r7, #28]
 801129c:	4413      	add	r3, r2
 801129e:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 80112a0:	6a3a      	ldr	r2, [r7, #32]
 80112a2:	69bb      	ldr	r3, [r7, #24]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d303      	bcc.n	80112b0 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 80112a8:	6a3a      	ldr	r2, [r7, #32]
 80112aa:	69bb      	ldr	r3, [r7, #24]
 80112ac:	1ad3      	subs	r3, r2, r3
 80112ae:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	6a3a      	ldr	r2, [r7, #32]
 80112b4:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	6a3a      	ldr	r2, [r7, #32]
 80112bc:	4619      	mov	r1, r3
 80112be:	68f8      	ldr	r0, [r7, #12]
 80112c0:	f7ff ff51 	bl	8011166 <xStreamBufferLessThenEqual>
 80112c4:	4603      	mov	r3, r0
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d002      	beq.n	80112d0 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	6a3a      	ldr	r2, [r7, #32]
 80112ce:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 80112d0:	f7f3 fb46 	bl	8004960 <xTaskResumeAll>
    }

    return uxCount;
 80112d4:	69fb      	ldr	r3, [r7, #28]
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3728      	adds	r7, #40	@ 0x28
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}

080112de <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 80112de:	b580      	push	{r7, lr}
 80112e0:	b08a      	sub	sp, #40	@ 0x28
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	60f8      	str	r0, [r7, #12]
 80112e6:	60b9      	str	r1, [r7, #8]
 80112e8:	607a      	str	r2, [r7, #4]
 80112ea:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 80112ec:	68f8      	ldr	r0, [r7, #12]
 80112ee:	f7ff fed8 	bl	80110a2 <uxStreamBufferGetSize>
 80112f2:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 80112f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d904      	bls.n	8011306 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 80112fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	1ad3      	subs	r3, r2, r3
 8011302:	627b      	str	r3, [r7, #36]	@ 0x24
 8011304:	e001      	b.n	801130a <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 8011306:	2300      	movs	r3, #0
 8011308:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 801130a:	6839      	ldr	r1, [r7, #0]
 801130c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801130e:	f7f9 fd21 	bl	800ad54 <FreeRTOS_min_size_t>
 8011312:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8011314:	69fb      	ldr	r3, [r7, #28]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d04e      	beq.n	80113b8 <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	691b      	ldr	r3, [r3, #16]
 801131e:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d00b      	beq.n	8011344 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 801132c:	6a3a      	ldr	r2, [r7, #32]
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	4413      	add	r3, r2
 8011332:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8011334:	6a3a      	ldr	r2, [r7, #32]
 8011336:	69bb      	ldr	r3, [r7, #24]
 8011338:	429a      	cmp	r2, r3
 801133a:	d303      	bcc.n	8011344 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 801133c:	6a3a      	ldr	r2, [r7, #32]
 801133e:	69bb      	ldr	r3, [r7, #24]
 8011340:	1ad3      	subs	r3, r2, r3
 8011342:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d021      	beq.n	801138e <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 801134a:	69ba      	ldr	r2, [r7, #24]
 801134c:	6a3b      	ldr	r3, [r7, #32]
 801134e:	1ad3      	subs	r3, r2, r3
 8011350:	69f9      	ldr	r1, [r7, #28]
 8011352:	4618      	mov	r0, r3
 8011354:	f7f9 fcfe 	bl	800ad54 <FreeRTOS_min_size_t>
 8011358:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 801135a:	6a3b      	ldr	r3, [r7, #32]
 801135c:	3310      	adds	r3, #16
 801135e:	68fa      	ldr	r2, [r7, #12]
 8011360:	4413      	add	r3, r2
 8011362:	3304      	adds	r3, #4
 8011364:	697a      	ldr	r2, [r7, #20]
 8011366:	4619      	mov	r1, r3
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f011 fb87 	bl	8022a7c <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 801136e:	69fa      	ldr	r2, [r7, #28]
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	429a      	cmp	r2, r3
 8011374:	d90b      	bls.n	801138e <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	18d0      	adds	r0, r2, r3
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f103 0114 	add.w	r1, r3, #20
 8011382:	69fa      	ldr	r2, [r7, #28]
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	1ad3      	subs	r3, r2, r3
 8011388:	461a      	mov	r2, r3
 801138a:	f011 fb77 	bl	8022a7c <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 801138e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011390:	2b00      	cmp	r3, #0
 8011392:	d111      	bne.n	80113b8 <uxStreamBufferGet+0xda>
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d10e      	bne.n	80113b8 <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 801139a:	6a3a      	ldr	r2, [r7, #32]
 801139c:	69fb      	ldr	r3, [r7, #28]
 801139e:	4413      	add	r3, r2
 80113a0:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 80113a2:	6a3a      	ldr	r2, [r7, #32]
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d303      	bcc.n	80113b2 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 80113aa:	6a3a      	ldr	r2, [r7, #32]
 80113ac:	69bb      	ldr	r3, [r7, #24]
 80113ae:	1ad3      	subs	r3, r2, r3
 80113b0:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	6a3a      	ldr	r2, [r7, #32]
 80113b6:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 80113b8:	69fb      	ldr	r3, [r7, #28]
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3728      	adds	r7, #40	@ 0x28
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
	...

080113c4 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b082      	sub	sp, #8
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 80113cc:	4b0a      	ldr	r3, [pc, #40]	@ (80113f8 <vSocketCloseNextTime+0x34>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d009      	beq.n	80113e8 <vSocketCloseNextTime+0x24>
 80113d4:	4b08      	ldr	r3, [pc, #32]	@ (80113f8 <vSocketCloseNextTime+0x34>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	687a      	ldr	r2, [r7, #4]
 80113da:	429a      	cmp	r2, r3
 80113dc:	d004      	beq.n	80113e8 <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 80113de:	4b06      	ldr	r3, [pc, #24]	@ (80113f8 <vSocketCloseNextTime+0x34>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fd fc7a 	bl	800ecdc <vSocketClose>
        }

        xSocketToClose = pxSocket;
 80113e8:	4a03      	ldr	r2, [pc, #12]	@ (80113f8 <vSocketCloseNextTime+0x34>)
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6013      	str	r3, [r2, #0]
    }
 80113ee:	bf00      	nop
 80113f0:	3708      	adds	r7, #8
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop
 80113f8:	20001620 	.word	0x20001620

080113fc <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 8011404:	4b0c      	ldr	r3, [pc, #48]	@ (8011438 <vSocketListenNextTime+0x3c>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d00e      	beq.n	801142a <vSocketListenNextTime+0x2e>
 801140c:	4b0a      	ldr	r3, [pc, #40]	@ (8011438 <vSocketListenNextTime+0x3c>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	429a      	cmp	r2, r3
 8011414:	d009      	beq.n	801142a <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 8011416:	4b08      	ldr	r3, [pc, #32]	@ (8011438 <vSocketListenNextTime+0x3c>)
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	4b07      	ldr	r3, [pc, #28]	@ (8011438 <vSocketListenNextTime+0x3c>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8011422:	4619      	mov	r1, r3
 8011424:	4610      	mov	r0, r2
 8011426:	f7fe fff3 	bl	8010410 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 801142a:	4a03      	ldr	r2, [pc, #12]	@ (8011438 <vSocketListenNextTime+0x3c>)
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6013      	str	r3, [r2, #0]
    }
 8011430:	bf00      	nop
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}
 8011438:	20001624 	.word	0x20001624

0801143c <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 801143c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011440:	b086      	sub	sp, #24
 8011442:	af02      	add	r7, sp, #8
 8011444:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 8011446:	2300      	movs	r3, #0
 8011448:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 801144a:	2300      	movs	r3, #0
 801144c:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011454:	2b04      	cmp	r3, #4
 8011456:	d907      	bls.n	8011468 <xTCPSocketCheck+0x2c>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801145e:	2b00      	cmp	r3, #0
 8011460:	d002      	beq.n	8011468 <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f003 f834 	bl	80144d0 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801146e:	2b00      	cmp	r3, #0
 8011470:	d05f      	beq.n	8011532 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011478:	f003 0320 	and.w	r3, r3, #32
 801147c:	b2db      	uxtb	r3, r3
 801147e:	2b00      	cmp	r3, #0
 8011480:	d148      	bne.n	8011514 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011488:	2b00      	cmp	r3, #0
 801148a:	d03b      	beq.n	8011504 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 801148c:	4b37      	ldr	r3, [pc, #220]	@ (801156c <xTCPSocketCheck+0x130>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2b01      	cmp	r3, #1
 8011492:	dd25      	ble.n	80114e0 <xTCPSocketCheck+0xa4>
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011498:	2b17      	cmp	r3, #23
 801149a:	d021      	beq.n	80114e0 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80114a0:	461e      	mov	r6, r3
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80114a8:	4698      	mov	r8, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80114b6:	1ad5      	subs	r5, r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80114c4:	1ad4      	subs	r4, r2, r3
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f7f8 ff00 	bl	800a2cc <uxIPHeaderSizeSocket>
 80114cc:	4603      	mov	r3, r0
 80114ce:	3314      	adds	r3, #20
 80114d0:	9301      	str	r3, [sp, #4]
 80114d2:	9400      	str	r4, [sp, #0]
 80114d4:	462b      	mov	r3, r5
 80114d6:	4642      	mov	r2, r8
 80114d8:	4631      	mov	r1, r6
 80114da:	4825      	ldr	r0, [pc, #148]	@ (8011570 <xTCPSocketCheck+0x134>)
 80114dc:	f011 f8b2 	bl	8022644 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7f8 fef0 	bl	800a2cc <uxIPHeaderSizeSocket>
 80114ec:	4603      	mov	r3, r0
 80114ee:	f103 0214 	add.w	r2, r3, #20
 80114f2:	2301      	movs	r3, #1
 80114f4:	4621      	mov	r1, r4
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f002 fac8 	bl	8013a8c <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2200      	movs	r2, #0
 8011500:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f000 faa1 	bl	8011a4c <prvTCPNextTimeout>
 801150a:	4603      	mov	r3, r0
 801150c:	2b01      	cmp	r3, #1
 801150e:	d901      	bls.n	8011514 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 8011510:	2301      	movs	r3, #1
 8011512:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801151a:	2b00      	cmp	r3, #0
 801151c:	d009      	beq.n	8011532 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011524:	4618      	mov	r0, r3
 8011526:	f006 f9e5 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2200      	movs	r2, #0
 801152e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d113      	bne.n	8011560 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801153e:	2b04      	cmp	r3, #4
 8011540:	d804      	bhi.n	801154c <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 8011548:	2b02      	cmp	r3, #2
 801154a:	d102      	bne.n	8011552 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f002 f9ff 	bl	8013950 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f000 fa7a 	bl	8011a4c <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f001 f973 	bl	8012844 <prvTCPStatusAgeCheck>
 801155e:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 8011560:	68fb      	ldr	r3, [r7, #12]
    }
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801156c:	2000164c 	.word	0x2000164c
 8011570:	0802665c 	.word	0x0802665c

08011574 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 801157c:	f7f3 faf4 	bl	8004b68 <xTaskGetTickCount>
 8011580:	4602      	mov	r2, r0
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801158e:	f36f 0382 	bfc	r3, #2, #1
 8011592:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801159c:	f36f 0341 	bfc	r3, #1, #1
 80115a0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2200      	movs	r2, #0
 80115a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80115ac:	f7f3 fadc 	bl	8004b68 <xTaskGetTickCount>
 80115b0:	4602      	mov	r2, r0
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 80115b8:	bf00      	nop
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 80115c0:	b480      	push	{r7}
 80115c2:	b087      	sub	sp, #28
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80115c8:	2300      	movs	r3, #0
 80115ca:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80115cc:	4b15      	ldr	r3, [pc, #84]	@ (8011624 <vTCPRemoveTCPChild+0x64>)
 80115ce:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80115d0:	4b15      	ldr	r3, [pc, #84]	@ (8011628 <vTCPRemoveTCPChild+0x68>)
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 80115d6:	e01a      	b.n	801160e <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80115d8:	693b      	ldr	r3, [r7, #16]
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 80115e4:	68ba      	ldr	r2, [r7, #8]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d010      	beq.n	801160e <vTCPRemoveTCPChild+0x4e>
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d10a      	bne.n	801160e <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80115fc:	687a      	ldr	r2, [r7, #4]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d105      	bne.n	801160e <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	2200      	movs	r2, #0
 8011606:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 8011608:	2301      	movs	r3, #1
 801160a:	617b      	str	r3, [r7, #20]
                    break;
 801160c:	e003      	b.n	8011616 <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 801160e:	693a      	ldr	r2, [r7, #16]
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	429a      	cmp	r2, r3
 8011614:	d1e0      	bne.n	80115d8 <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 8011616:	697b      	ldr	r3, [r7, #20]
    }
 8011618:	4618      	mov	r0, r3
 801161a:	371c      	adds	r7, #28
 801161c:	46bd      	mov	sp, r7
 801161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011622:	4770      	bx	lr
 8011624:	20001610 	.word	0x20001610
 8011628:	20001608 	.word	0x20001608

0801162c <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 801162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801162e:	b097      	sub	sp, #92	@ 0x5c
 8011630:	af02      	add	r7, sp, #8
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	460b      	mov	r3, r1
 8011636:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011642:	2b04      	cmp	r3, #4
 8011644:	d906      	bls.n	8011654 <vTCPStateChange+0x28>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801164c:	2b08      	cmp	r3, #8
 801164e:	d001      	beq.n	8011654 <vTCPStateChange+0x28>
 8011650:	2301      	movs	r3, #1
 8011652:	e000      	b.n	8011656 <vTCPStateChange+0x2a>
 8011654:	2300      	movs	r3, #0
 8011656:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 8011658:	78fb      	ldrb	r3, [r7, #3]
 801165a:	2b04      	cmp	r3, #4
 801165c:	d904      	bls.n	8011668 <vTCPStateChange+0x3c>
 801165e:	78fb      	ldrb	r3, [r7, #3]
 8011660:	2b08      	cmp	r3, #8
 8011662:	d001      	beq.n	8011668 <vTCPStateChange+0x3c>
 8011664:	2301      	movs	r3, #1
 8011666:	e000      	b.n	801166a <vTCPStateChange+0x3e>
 8011668:	2300      	movs	r3, #0
 801166a:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011672:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 8011676:	2300      	movs	r3, #0
 8011678:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 801167a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801167e:	2b02      	cmp	r3, #2
 8011680:	d007      	beq.n	8011692 <vTCPStateChange+0x66>
 8011682:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011686:	2b03      	cmp	r3, #3
 8011688:	d003      	beq.n	8011692 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 801168a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801168e:	2b04      	cmp	r3, #4
 8011690:	d114      	bne.n	80116bc <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 8011692:	78fb      	ldrb	r3, [r7, #3]
 8011694:	2b08      	cmp	r3, #8
 8011696:	d111      	bne.n	80116bc <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 8011698:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801169c:	4618      	mov	r0, r3
 801169e:	f001 fed7 	bl	8013450 <FreeRTOS_GetTCPStateName>
 80116a2:	4604      	mov	r4, r0
 80116a4:	78fb      	ldrb	r3, [r7, #3]
 80116a6:	4618      	mov	r0, r3
 80116a8:	f001 fed2 	bl	8013450 <FreeRTOS_GetTCPStateName>
 80116ac:	4603      	mov	r3, r0
 80116ae:	461a      	mov	r2, r3
 80116b0:	4621      	mov	r1, r4
 80116b2:	4875      	ldr	r0, [pc, #468]	@ (8011888 <vTCPStateChange+0x25c>)
 80116b4:	f010 ffc6 	bl	8022644 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 80116b8:	2301      	movs	r3, #1
 80116ba:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 80116bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80116be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c0:	429a      	cmp	r2, r3
 80116c2:	f000 809f 	beq.w	8011804 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80116cc:	f003 0304 	and.w	r3, r3, #4
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d012      	beq.n	80116fc <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80116dc:	f003 0308 	and.w	r3, r3, #8
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d10a      	bne.n	80116fc <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80116ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 80116ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d104      	bne.n	80116fc <vTCPStateChange+0xd0>
 80116f2:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 80116f6:	4865      	ldr	r0, [pc, #404]	@ (801188c <vTCPStateChange+0x260>)
 80116f8:	f7f0 f940 	bl	800197c <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 80116fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d057      	beq.n	80117b2 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011708:	f003 0304 	and.w	r3, r3, #4
 801170c:	b2db      	uxtb	r3, r3
 801170e:	2b00      	cmp	r3, #0
 8011710:	d03c      	beq.n	801178c <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8011712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011714:	2b00      	cmp	r3, #0
 8011716:	d027      	beq.n	8011768 <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 8011718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801171a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801171c:	2b00      	cmp	r3, #0
 801171e:	d102      	bne.n	8011726 <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 8011720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011722:	687a      	ldr	r2, [r7, #4]
 8011724:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8011726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	f043 0204 	orr.w	r2, r3, #4
 801172e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011730:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8011732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011736:	f003 0301 	and.w	r3, r3, #1
 801173a:	2b00      	cmp	r3, #0
 801173c:	d005      	beq.n	801174a <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 801173e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011748:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 801174a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801174c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011750:	2b00      	cmp	r3, #0
 8011752:	d009      	beq.n	8011768 <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 8011754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011756:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801175a:	f003 0308 	and.w	r3, r3, #8
 801175e:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8011760:	2b00      	cmp	r3, #0
 8011762:	d101      	bne.n	8011768 <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 8011764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011766:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2200      	movs	r2, #0
 801176c:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011774:	f36f 0382 	bfc	r3, #2, #1
 8011778:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 801177c:	687a      	ldr	r2, [r7, #4]
 801177e:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011782:	f043 0302 	orr.w	r3, r3, #2
 8011786:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 801178a:	e024      	b.n	80117d6 <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f043 0208 	orr.w	r2, r3, #8
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801179c:	f003 0302 	and.w	r3, r3, #2
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d018      	beq.n	80117d6 <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	601a      	str	r2, [r3, #0]
 80117b0:	e011      	b.n	80117d6 <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 80117b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	f043 0220 	orr.w	r2, r3, #32
 80117ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117bc:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 80117be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117c2:	f003 0304 	and.w	r3, r3, #4
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d005      	beq.n	80117d6 <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 80117ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80117d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117d4:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d004      	beq.n	80117ea <vTCPStateChange+0x1be>
 80117e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d101      	bne.n	80117ea <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80117f0:	4618      	mov	r0, r3
 80117f2:	f000 ffff 	bl	80127f4 <prvTCPSocketIsActive>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d103      	bne.n	8011804 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2200      	movs	r2, #0
 8011800:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	78fa      	ldrb	r2, [r7, #3]
 8011808:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 801180c:	78fb      	ldrb	r3, [r7, #3]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d003      	beq.n	801181a <vTCPStateChange+0x1ee>
 8011812:	78fb      	ldrb	r3, [r7, #3]
 8011814:	2b08      	cmp	r3, #8
 8011816:	f040 8084 	bne.w	8011922 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 801181a:	2300      	movs	r3, #0
 801181c:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 801181e:	2300      	movs	r3, #0
 8011820:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 8011822:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	429a      	cmp	r2, r3
 8011828:	d106      	bne.n	8011838 <vTCPStateChange+0x20c>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801182e:	2b00      	cmp	r3, #0
 8011830:	d002      	beq.n	8011838 <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011836:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8011838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801183a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801183c:	2b00      	cmp	r3, #0
 801183e:	d006      	beq.n	801184e <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 8011840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011842:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	429a      	cmp	r2, r3
 8011848:	d101      	bne.n	801184e <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 801184a:	2301      	movs	r3, #1
 801184c:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011854:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8011858:	b2db      	uxtb	r3, r3
 801185a:	4619      	mov	r1, r3
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011862:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011866:	b2db      	uxtb	r3, r3
 8011868:	461a      	mov	r2, r3
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011870:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011874:	b2db      	uxtb	r3, r3
 8011876:	4806      	ldr	r0, [pc, #24]	@ (8011890 <vTCPStateChange+0x264>)
 8011878:	f010 fee4 	bl	8022644 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 801187c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801187e:	2b00      	cmp	r3, #0
 8011880:	d008      	beq.n	8011894 <vTCPStateChange+0x268>
 8011882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011884:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011886:	e006      	b.n	8011896 <vTCPStateChange+0x26a>
 8011888:	08026688 	.word	0x08026688
 801188c:	0802669c 	.word	0x0802669c
 8011890:	080266cc 	.word	0x080266cc
 8011894:	2300      	movs	r3, #0
 8011896:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011898:	9200      	str	r2, [sp, #0]
 801189a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801189c:	6879      	ldr	r1, [r7, #4]
 801189e:	4865      	ldr	r0, [pc, #404]	@ (8011a34 <vTCPStateChange+0x408>)
 80118a0:	f010 fed0 	bl	8022644 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 80118a4:	f7f3 f84e 	bl	8004944 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80118ae:	f003 0304 	and.w	r3, r3, #4
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d107      	bne.n	80118c8 <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80118be:	f003 0302 	and.w	r3, r3, #2
 80118c2:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d026      	beq.n	8011916 <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80118ce:	f003 0308 	and.w	r3, r3, #8
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d11e      	bne.n	8011916 <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f7ff fe71 	bl	80115c0 <vTCPRemoveTCPChild>
 80118de:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80118e6:	f36f 0382 	bfc	r3, #2, #1
 80118ea:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80118f4:	f36f 0341 	bfc	r3, #1, #1
 80118f8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 80118fc:	f7f9 f85a 	bl	800a9b4 <xIsCallingFromIPTask>
 8011900:	4603      	mov	r3, r0
 8011902:	2b00      	cmp	r3, #0
 8011904:	d104      	bne.n	8011910 <vTCPStateChange+0x2e4>
 8011906:	f44f 7101 	mov.w	r1, #516	@ 0x204
 801190a:	484b      	ldr	r0, [pc, #300]	@ (8011a38 <vTCPStateChange+0x40c>)
 801190c:	f7f0 f836 	bl	800197c <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f7ff fd57 	bl	80113c4 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 8011916:	f7f3 f823 	bl	8004960 <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 801191a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801191c:	4847      	ldr	r0, [pc, #284]	@ (8011a3c <vTCPStateChange+0x410>)
 801191e:	f010 fe91 	bl	8022644 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 8011922:	78fb      	ldrb	r3, [r7, #3]
 8011924:	2b08      	cmp	r3, #8
 8011926:	d11b      	bne.n	8011960 <vTCPStateChange+0x334>
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801192e:	f003 0308 	and.w	r3, r3, #8
 8011932:	b2db      	uxtb	r3, r3
 8011934:	2b00      	cmp	r3, #0
 8011936:	d013      	beq.n	8011960 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 8011938:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801193c:	3b03      	subs	r3, #3
 801193e:	2b01      	cmp	r3, #1
 8011940:	d80d      	bhi.n	801195e <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011946:	4619      	mov	r1, r3
 8011948:	483d      	ldr	r0, [pc, #244]	@ (8011a40 <vTCPStateChange+0x414>)
 801194a:	f010 fe7b 	bl	8022644 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2200      	movs	r2, #0
 8011952:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f7ff fd50 	bl	80113fc <vSocketListenNextTime>
                    break;
 801195c:	e000      	b.n	8011960 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 801195e:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f7ff fe07 	bl	8011574 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8011966:	4b37      	ldr	r3, [pc, #220]	@ (8011a44 <vTCPStateChange+0x418>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	db4f      	blt.n	8011a0e <vTCPStateChange+0x3e2>
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011972:	2b17      	cmp	r3, #23
 8011974:	d04b      	beq.n	8011a0e <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	7a1b      	ldrb	r3, [r3, #8]
 801197a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801197e:	b2db      	uxtb	r3, r3
 8011980:	2b00      	cmp	r3, #0
 8011982:	d002      	beq.n	801198a <vTCPStateChange+0x35e>
 8011984:	2b01      	cmp	r3, #1
 8011986:	d01d      	beq.n	80119c4 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 8011988:	e026      	b.n	80119d8 <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801198e:	061a      	lsls	r2, r3, #24
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011994:	021b      	lsls	r3, r3, #8
 8011996:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801199a:	431a      	orrs	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80119a0:	0a1b      	lsrs	r3, r3, #8
 80119a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80119a6:	431a      	orrs	r2, r3
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80119ac:	0e1b      	lsrs	r3, r3, #24
 80119ae:	4313      	orrs	r3, r2
 80119b0:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 80119b2:	f107 0208 	add.w	r2, r7, #8
 80119b6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80119ba:	2328      	movs	r3, #40	@ 0x28
 80119bc:	2002      	movs	r0, #2
 80119be:	f7fd ff09 	bl	800f7d4 <FreeRTOS_inet_ntop>
                           break;
 80119c2:	e009      	b.n	80119d8 <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 80119ca:	f107 0208 	add.w	r2, r7, #8
 80119ce:	2328      	movs	r3, #40	@ 0x28
 80119d0:	200a      	movs	r0, #10
 80119d2:	f7fd feff 	bl	800f7d4 <FreeRTOS_inet_ntop>
                            break;
 80119d6:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80119dc:	461d      	mov	r5, r3
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80119e4:	461e      	mov	r6, r3
 80119e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119ea:	4618      	mov	r0, r3
 80119ec:	f001 fd30 	bl	8013450 <FreeRTOS_GetTCPStateName>
 80119f0:	4604      	mov	r4, r0
 80119f2:	78fb      	ldrb	r3, [r7, #3]
 80119f4:	4618      	mov	r0, r3
 80119f6:	f001 fd2b 	bl	8013450 <FreeRTOS_GetTCPStateName>
 80119fa:	4603      	mov	r3, r0
 80119fc:	f107 0208 	add.w	r2, r7, #8
 8011a00:	9301      	str	r3, [sp, #4]
 8011a02:	9400      	str	r4, [sp, #0]
 8011a04:	4633      	mov	r3, r6
 8011a06:	4629      	mov	r1, r5
 8011a08:	480f      	ldr	r0, [pc, #60]	@ (8011a48 <vTCPStateChange+0x41c>)
 8011a0a:	f010 fe1b 	bl	8022644 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 8011a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d005      	beq.n	8011a20 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8011a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a16:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011a1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011a1c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011a1e:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 8011a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d002      	beq.n	8011a2c <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 8011a26:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011a28:	f7fd ff53 	bl	800f8d2 <vSocketWakeUpUser>
        }
    }
 8011a2c:	bf00      	nop
 8011a2e:	3754      	adds	r7, #84	@ 0x54
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a34:	08026708 	.word	0x08026708
 8011a38:	0802669c 	.word	0x0802669c
 8011a3c:	0802673c 	.word	0x0802673c
 8011a40:	08026760 	.word	0x08026760
 8011a44:	2000164c 	.word	0x2000164c
 8011a48:	08026784 	.word	0x08026784

08011a4c <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8011a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a50:	b098      	sub	sp, #96	@ 0x60
 8011a52:	af02      	add	r7, sp, #8
 8011a54:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8011a56:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011a5a:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a5e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011a62:	2b02      	cmp	r3, #2
 8011a64:	f040 80cc 	bne.w	8011c00 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 8011a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a6a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011a6e:	f003 0308 	and.w	r3, r3, #8
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d01a      	beq.n	8011aae <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 8011a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a7a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011a7e:	2b02      	cmp	r3, #2
 8011a80:	d811      	bhi.n	8011aa6 <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8011a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a84:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d102      	bne.n	8011a92 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011a90:	e010      	b.n	8011ab4 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8011a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a94:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011a98:	3b01      	subs	r3, #1
 8011a9a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8011aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8011aa4:	e006      	b.n	8011ab4 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 8011aa6:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8011aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8011aac:	e002      	b.n	8011ab4 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8011aae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011ab2:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8011ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ab6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011aba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011abe:	4618      	mov	r0, r3
 8011ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ac2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	4613      	mov	r3, r2
 8011ace:	4602      	mov	r2, r0
 8011ad0:	48a4      	ldr	r0, [pc, #656]	@ (8011d64 <prvTCPNextTimeout+0x318>)
 8011ad2:	f010 fdb7 	bl	8022644 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8011ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ad8:	2200      	movs	r2, #0
 8011ada:	643b      	str	r3, [r7, #64]	@ 0x40
 8011adc:	647a      	str	r2, [r7, #68]	@ 0x44
 8011ade:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8011ae2:	4622      	mov	r2, r4
 8011ae4:	462b      	mov	r3, r5
 8011ae6:	f04f 0000 	mov.w	r0, #0
 8011aea:	f04f 0100 	mov.w	r1, #0
 8011aee:	0159      	lsls	r1, r3, #5
 8011af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011af4:	0150      	lsls	r0, r2, #5
 8011af6:	4602      	mov	r2, r0
 8011af8:	460b      	mov	r3, r1
 8011afa:	4621      	mov	r1, r4
 8011afc:	1a51      	subs	r1, r2, r1
 8011afe:	6239      	str	r1, [r7, #32]
 8011b00:	4629      	mov	r1, r5
 8011b02:	eb63 0301 	sbc.w	r3, r3, r1
 8011b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b08:	f04f 0200 	mov.w	r2, #0
 8011b0c:	f04f 0300 	mov.w	r3, #0
 8011b10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011b14:	4649      	mov	r1, r9
 8011b16:	008b      	lsls	r3, r1, #2
 8011b18:	4641      	mov	r1, r8
 8011b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011b1e:	4641      	mov	r1, r8
 8011b20:	008a      	lsls	r2, r1, #2
 8011b22:	4610      	mov	r0, r2
 8011b24:	4619      	mov	r1, r3
 8011b26:	4603      	mov	r3, r0
 8011b28:	4622      	mov	r2, r4
 8011b2a:	189b      	adds	r3, r3, r2
 8011b2c:	61bb      	str	r3, [r7, #24]
 8011b2e:	462b      	mov	r3, r5
 8011b30:	460a      	mov	r2, r1
 8011b32:	eb42 0303 	adc.w	r3, r2, r3
 8011b36:	61fb      	str	r3, [r7, #28]
 8011b38:	f04f 0200 	mov.w	r2, #0
 8011b3c:	f04f 0300 	mov.w	r3, #0
 8011b40:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011b44:	4629      	mov	r1, r5
 8011b46:	00cb      	lsls	r3, r1, #3
 8011b48:	4621      	mov	r1, r4
 8011b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011b4e:	4621      	mov	r1, r4
 8011b50:	00ca      	lsls	r2, r1, #3
 8011b52:	4610      	mov	r0, r2
 8011b54:	4619      	mov	r1, r3
 8011b56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011b5a:	f04f 0300 	mov.w	r3, #0
 8011b5e:	f7ee fc27 	bl	80003b0 <__aeabi_uldivmod>
 8011b62:	4602      	mov	r2, r0
 8011b64:	460b      	mov	r3, r1
 8011b66:	4613      	mov	r3, r2
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d044      	beq.n	8011bf6 <prvTCPNextTimeout+0x1aa>
 8011b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b6e:	2200      	movs	r2, #0
 8011b70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011b72:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011b74:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011b78:	4622      	mov	r2, r4
 8011b7a:	462b      	mov	r3, r5
 8011b7c:	f04f 0000 	mov.w	r0, #0
 8011b80:	f04f 0100 	mov.w	r1, #0
 8011b84:	0159      	lsls	r1, r3, #5
 8011b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011b8a:	0150      	lsls	r0, r2, #5
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	460b      	mov	r3, r1
 8011b90:	4621      	mov	r1, r4
 8011b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8011b96:	4629      	mov	r1, r5
 8011b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8011b9c:	f04f 0200 	mov.w	r2, #0
 8011ba0:	f04f 0300 	mov.w	r3, #0
 8011ba4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011ba8:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8011bac:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8011bb0:	4692      	mov	sl, r2
 8011bb2:	469b      	mov	fp, r3
 8011bb4:	4623      	mov	r3, r4
 8011bb6:	eb1a 0303 	adds.w	r3, sl, r3
 8011bba:	613b      	str	r3, [r7, #16]
 8011bbc:	462b      	mov	r3, r5
 8011bbe:	eb4b 0303 	adc.w	r3, fp, r3
 8011bc2:	617b      	str	r3, [r7, #20]
 8011bc4:	f04f 0200 	mov.w	r2, #0
 8011bc8:	f04f 0300 	mov.w	r3, #0
 8011bcc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011bd0:	4629      	mov	r1, r5
 8011bd2:	00cb      	lsls	r3, r1, #3
 8011bd4:	4621      	mov	r1, r4
 8011bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011bda:	4621      	mov	r1, r4
 8011bdc:	00ca      	lsls	r2, r1, #3
 8011bde:	4610      	mov	r0, r2
 8011be0:	4619      	mov	r1, r3
 8011be2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011be6:	f04f 0300 	mov.w	r3, #0
 8011bea:	f7ee fbe1 	bl	80003b0 <__aeabi_uldivmod>
 8011bee:	4602      	mov	r2, r0
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	b292      	uxth	r2, r2
 8011bf4:	e000      	b.n	8011bf8 <prvTCPNextTimeout+0x1ac>
 8011bf6:	2201      	movs	r2, #1
 8011bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bfa:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8011bfe:	e0a8      	b.n	8011d52 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8011c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c02:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	f040 80a3 	bne.w	8011d52 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8011c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c0e:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c14:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8011c18:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	f004 fcbd 	bl	801659c <xTCPWindowTxHasData>
 8011c22:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 8011c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d108      	bne.n	8011c3c <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 8011c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d002      	beq.n	8011c36 <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 8011c30:	2301      	movs	r3, #1
 8011c32:	653b      	str	r3, [r7, #80]	@ 0x50
 8011c34:	e002      	b.n	8011c3c <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8011c36:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011c3a:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 8011c3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c3e:	2200      	movs	r2, #0
 8011c40:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c42:	637a      	str	r2, [r7, #52]	@ 0x34
 8011c44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011c48:	4652      	mov	r2, sl
 8011c4a:	465b      	mov	r3, fp
 8011c4c:	f04f 0000 	mov.w	r0, #0
 8011c50:	f04f 0100 	mov.w	r1, #0
 8011c54:	0159      	lsls	r1, r3, #5
 8011c56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011c5a:	0150      	lsls	r0, r2, #5
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	460b      	mov	r3, r1
 8011c60:	4651      	mov	r1, sl
 8011c62:	ebb2 0801 	subs.w	r8, r2, r1
 8011c66:	4659      	mov	r1, fp
 8011c68:	eb63 0901 	sbc.w	r9, r3, r1
 8011c6c:	f04f 0200 	mov.w	r2, #0
 8011c70:	f04f 0300 	mov.w	r3, #0
 8011c74:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8011c78:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011c7c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8011c80:	4690      	mov	r8, r2
 8011c82:	4699      	mov	r9, r3
 8011c84:	4653      	mov	r3, sl
 8011c86:	eb18 0303 	adds.w	r3, r8, r3
 8011c8a:	60bb      	str	r3, [r7, #8]
 8011c8c:	465b      	mov	r3, fp
 8011c8e:	eb49 0303 	adc.w	r3, r9, r3
 8011c92:	60fb      	str	r3, [r7, #12]
 8011c94:	f04f 0200 	mov.w	r2, #0
 8011c98:	f04f 0300 	mov.w	r3, #0
 8011c9c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8011ca0:	4649      	mov	r1, r9
 8011ca2:	00cb      	lsls	r3, r1, #3
 8011ca4:	4641      	mov	r1, r8
 8011ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011caa:	4641      	mov	r1, r8
 8011cac:	00ca      	lsls	r2, r1, #3
 8011cae:	4610      	mov	r0, r2
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011cb6:	f04f 0300 	mov.w	r3, #0
 8011cba:	f7ee fb79 	bl	80003b0 <__aeabi_uldivmod>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	4613      	mov	r3, r2
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d040      	beq.n	8011d4a <prvTCPNextTimeout+0x2fe>
 8011cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cca:	2200      	movs	r2, #0
 8011ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011cd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8011cd4:	4642      	mov	r2, r8
 8011cd6:	464b      	mov	r3, r9
 8011cd8:	f04f 0000 	mov.w	r0, #0
 8011cdc:	f04f 0100 	mov.w	r1, #0
 8011ce0:	0159      	lsls	r1, r3, #5
 8011ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011ce6:	0150      	lsls	r0, r2, #5
 8011ce8:	4602      	mov	r2, r0
 8011cea:	460b      	mov	r3, r1
 8011cec:	4641      	mov	r1, r8
 8011cee:	1a54      	subs	r4, r2, r1
 8011cf0:	4649      	mov	r1, r9
 8011cf2:	eb63 0501 	sbc.w	r5, r3, r1
 8011cf6:	f04f 0200 	mov.w	r2, #0
 8011cfa:	f04f 0300 	mov.w	r3, #0
 8011cfe:	00ab      	lsls	r3, r5, #2
 8011d00:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8011d04:	00a2      	lsls	r2, r4, #2
 8011d06:	4614      	mov	r4, r2
 8011d08:	461d      	mov	r5, r3
 8011d0a:	4643      	mov	r3, r8
 8011d0c:	18e3      	adds	r3, r4, r3
 8011d0e:	603b      	str	r3, [r7, #0]
 8011d10:	464b      	mov	r3, r9
 8011d12:	eb45 0303 	adc.w	r3, r5, r3
 8011d16:	607b      	str	r3, [r7, #4]
 8011d18:	f04f 0200 	mov.w	r2, #0
 8011d1c:	f04f 0300 	mov.w	r3, #0
 8011d20:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011d24:	4629      	mov	r1, r5
 8011d26:	00cb      	lsls	r3, r1, #3
 8011d28:	4621      	mov	r1, r4
 8011d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011d2e:	4621      	mov	r1, r4
 8011d30:	00ca      	lsls	r2, r1, #3
 8011d32:	4610      	mov	r0, r2
 8011d34:	4619      	mov	r1, r3
 8011d36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011d3a:	f04f 0300 	mov.w	r3, #0
 8011d3e:	f7ee fb37 	bl	80003b0 <__aeabi_uldivmod>
 8011d42:	4602      	mov	r2, r0
 8011d44:	460b      	mov	r3, r1
 8011d46:	b292      	uxth	r2, r2
 8011d48:	e000      	b.n	8011d4c <prvTCPNextTimeout+0x300>
 8011d4a:	2201      	movs	r2, #1
 8011d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d4e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8011d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d54:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3758      	adds	r7, #88	@ 0x58
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011d62:	bf00      	nop
 8011d64:	080267a8 	.word	0x080267a8

08011d68 <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 8011d68:	b4b0      	push	{r4, r5, r7}
 8011d6a:	b08b      	sub	sp, #44	@ 0x2c
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8011d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d78:	899b      	ldrh	r3, [r3, #12]
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011d80:	4293      	cmp	r3, r2
 8011d82:	d10e      	bne.n	8011da2 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	330e      	adds	r3, #14
 8011d88:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	3308      	adds	r3, #8
 8011d92:	f107 0408 	add.w	r4, r7, #8
 8011d96:	6818      	ldr	r0, [r3, #0]
 8011d98:	6859      	ldr	r1, [r3, #4]
 8011d9a:	689a      	ldr	r2, [r3, #8]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011da0:	e018      	b.n	8011dd4 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	330e      	adds	r3, #14
 8011da6:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 8011da8:	2300      	movs	r3, #0
 8011daa:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8011dac:	6a3b      	ldr	r3, [r7, #32]
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	061a      	lsls	r2, r3, #24
 8011db2:	6a3b      	ldr	r3, [r7, #32]
 8011db4:	68db      	ldr	r3, [r3, #12]
 8011db6:	021b      	lsls	r3, r3, #8
 8011db8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011dbc:	431a      	orrs	r2, r3
 8011dbe:	6a3b      	ldr	r3, [r7, #32]
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	0a1b      	lsrs	r3, r3, #8
 8011dc4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011dc8:	431a      	orrs	r2, r3
 8011dca:	6a3b      	ldr	r3, [r7, #32]
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	0e1b      	lsrs	r3, r3, #24
 8011dd0:	4313      	orrs	r3, r2
 8011dd2:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	461d      	mov	r5, r3
 8011dd8:	f107 0408 	add.w	r4, r7, #8
 8011ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011de0:	6823      	ldr	r3, [r4, #0]
 8011de2:	602b      	str	r3, [r5, #0]
    }
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	372c      	adds	r7, #44	@ 0x2c
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bcb0      	pop	{r4, r5, r7}
 8011dec:	4770      	bx	lr
	...

08011df0 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8011df0:	b5b0      	push	{r4, r5, r7, lr}
 8011df2:	b096      	sub	sp, #88	@ 0x58
 8011df4:	af04      	add	r7, sp, #16
 8011df6:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d104      	bne.n	8011e0c <xProcessReceivedTCPPacket+0x1c>
 8011e02:	f240 21f7 	movw	r1, #759	@ 0x2f7
 8011e06:	4898      	ldr	r0, [pc, #608]	@ (8012068 <xProcessReceivedTCPPacket+0x278>)
 8011e08:	f7ef fdb8 	bl	800197c <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d104      	bne.n	8011e1e <xProcessReceivedTCPPacket+0x2e>
 8011e14:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 8011e18:	4893      	ldr	r0, [pc, #588]	@ (8012068 <xProcessReceivedTCPPacket+0x278>)
 8011e1a:	f7ef fdaf 	bl	800197c <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8011e22:	69fb      	ldr	r3, [r7, #28]
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7f8 fa37 	bl	800a298 <uxIPHeaderSizePacket>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	330e      	adds	r3, #14
 8011e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 8011e30:	69fb      	ldr	r3, [r7, #28]
 8011e32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e36:	3314      	adds	r3, #20
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d202      	bcs.n	8011e42 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e40:	e191      	b.n	8012166 <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 8011e42:	69fb      	ldr	r3, [r7, #28]
 8011e44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 8011e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e48:	4413      	add	r3, r2
 8011e4a:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e4e:	7b5b      	ldrb	r3, [r3, #13]
 8011e50:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 8011e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e54:	885b      	ldrh	r3, [r3, #2]
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	021b      	lsls	r3, r3, #8
 8011e5a:	b21a      	sxth	r2, r3
 8011e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e5e:	885b      	ldrh	r3, [r3, #2]
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	0a1b      	lsrs	r3, r3, #8
 8011e64:	b29b      	uxth	r3, r3
 8011e66:	b21b      	sxth	r3, r3
 8011e68:	4313      	orrs	r3, r2
 8011e6a:	b21b      	sxth	r3, r3
 8011e6c:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 8011e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e70:	881b      	ldrh	r3, [r3, #0]
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	021b      	lsls	r3, r3, #8
 8011e76:	b21a      	sxth	r2, r3
 8011e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e7a:	881b      	ldrh	r3, [r3, #0]
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	0a1b      	lsrs	r3, r3, #8
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	b21b      	sxth	r3, r3
 8011e84:	4313      	orrs	r3, r2
 8011e86:	b21b      	sxth	r3, r3
 8011e88:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 8011e8a:	69fb      	ldr	r3, [r7, #28]
 8011e8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e8e:	f107 0308 	add.w	r3, r7, #8
 8011e92:	4611      	mov	r1, r2
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7ff ff67 	bl	8011d68 <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 8011e9a:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 8011e9c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011e9e:	9303      	str	r3, [sp, #12]
 8011ea0:	466c      	mov	r4, sp
 8011ea2:	f107 0310 	add.w	r3, r7, #16
 8011ea6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011eae:	f107 0308 	add.w	r3, r7, #8
 8011eb2:	cb0c      	ldmia	r3, {r2, r3}
 8011eb4:	4629      	mov	r1, r5
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	f7fe fbc2 	bl	8010640 <pxTCPSocketLookup>
 8011ebc:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 8011ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d008      	beq.n	8011ed6 <xProcessReceivedTCPPacket+0xe6>
 8011ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ec6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f000 fc92 	bl	80127f4 <prvTCPSocketIsActive>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d116      	bne.n	8011f04 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 8011ed6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011ed8:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8011eda:	4619      	mov	r1, r3
 8011edc:	4863      	ldr	r0, [pc, #396]	@ (801206c <xProcessReceivedTCPPacket+0x27c>)
 8011ede:	f010 fbb1 	bl	8022644 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011ee2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011ee4:	f003 031f 	and.w	r3, r3, #31
 8011ee8:	2b10      	cmp	r3, #16
 8011eea:	d008      	beq.n	8011efe <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 8011eec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011eee:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d103      	bne.n	8011efe <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f002 fd0b 	bl	8014914 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 8011efe:	2300      	movs	r3, #0
 8011f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8011f02:	e0d6      	b.n	80120b2 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8011f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f06:	2200      	movs	r2, #0
 8011f08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8011f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f0e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011f12:	2b01      	cmp	r3, #1
 8011f14:	d127      	bne.n	8011f66 <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 8011f16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011f18:	f003 031f 	and.w	r3, r3, #31
 8011f1c:	2b02      	cmp	r3, #2
 8011f1e:	d015      	beq.n	8011f4c <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 8011f20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011f22:	4618      	mov	r0, r3
 8011f24:	f003 fbbe 	bl	80156a4 <prvTCPFlagMeaning>
 8011f28:	4601      	mov	r1, r0
 8011f2a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8011f2c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011f2e:	4850      	ldr	r0, [pc, #320]	@ (8012070 <xProcessReceivedTCPPacket+0x280>)
 8011f30:	f010 fb88 	bl	8022644 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8011f34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011f36:	f003 0304 	and.w	r3, r3, #4
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d103      	bne.n	8011f46 <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011f3e:	69fb      	ldr	r3, [r7, #28]
 8011f40:	4618      	mov	r0, r3
 8011f42:	f002 fce7 	bl	8014914 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 8011f46:	2300      	movs	r3, #0
 8011f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8011f4a:	e0b2      	b.n	80120b2 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	4619      	mov	r1, r3
 8011f50:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011f52:	f001 f999 	bl	8013288 <prvHandleListen>
 8011f56:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 8011f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	f040 80a9 	bne.w	80120b2 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 8011f60:	2300      	movs	r3, #0
 8011f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8011f64:	e0a5      	b.n	80120b2 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 8011f66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011f68:	f003 0304 	and.w	r3, r3, #4
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d068      	beq.n	8012042 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 8011f70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011f72:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8011f74:	4619      	mov	r1, r3
 8011f76:	483f      	ldr	r0, [pc, #252]	@ (8012074 <xProcessReceivedTCPPacket+0x284>)
 8011f78:	f010 fb64 	bl	8022644 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f7e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011f82:	2b02      	cmp	r3, #2
 8011f84:	d11f      	bne.n	8011fc6 <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8011f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f88:	689b      	ldr	r3, [r3, #8]
 8011f8a:	061a      	lsls	r2, r3, #24
 8011f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f8e:	689b      	ldr	r3, [r3, #8]
 8011f90:	021b      	lsls	r3, r3, #8
 8011f92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011f96:	431a      	orrs	r2, r3
 8011f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f9a:	689b      	ldr	r3, [r3, #8]
 8011f9c:	0a1b      	lsrs	r3, r3, #8
 8011f9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011fa2:	431a      	orrs	r2, r3
 8011fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fa6:	689b      	ldr	r3, [r3, #8]
 8011fa8:	0e1b      	lsrs	r3, r3, #24
 8011faa:	4313      	orrs	r3, r2
 8011fac:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 8011fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fb0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d13f      	bne.n	801203c <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8011fbc:	2100      	movs	r1, #0
 8011fbe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011fc0:	f7ff fb34 	bl	801162c <vTCPStateChange>
 8011fc4:	e03a      	b.n	801203c <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fc8:	685b      	ldr	r3, [r3, #4]
 8011fca:	061a      	lsls	r2, r3, #24
 8011fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	021b      	lsls	r3, r3, #8
 8011fd2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011fd6:	431a      	orrs	r2, r3
 8011fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	0a1b      	lsrs	r3, r3, #8
 8011fde:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011fe2:	431a      	orrs	r2, r3
 8011fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	0e1b      	lsrs	r3, r3, #24
 8011fea:	4313      	orrs	r3, r2
 8011fec:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 8011fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ff0:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8011ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d104      	bne.n	8012004 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011ffe:	f7ff fb15 	bl	801162c <vTCPStateChange>
 8012002:	e01b      	b.n	801203c <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8012004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012006:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801200a:	4619      	mov	r1, r3
 801200c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801200e:	f003 fc82 	bl	8015916 <xSequenceGreaterThan>
 8012012:	4603      	mov	r3, r0
 8012014:	2b00      	cmp	r3, #0
 8012016:	d011      	beq.n	801203c <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8012018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801201a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 801201e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012020:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8012024:	4413      	add	r3, r2
 8012026:	4619      	mov	r1, r3
 8012028:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801202a:	f003 fc5e 	bl	80158ea <xSequenceLessThan>
 801202e:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8012030:	2b00      	cmp	r3, #0
 8012032:	d003      	beq.n	801203c <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8012034:	69fb      	ldr	r3, [r7, #28]
 8012036:	4618      	mov	r0, r3
 8012038:	f002 fc5f 	bl	80148fa <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 801203c:	2300      	movs	r3, #0
 801203e:	647b      	str	r3, [r7, #68]	@ 0x44
 8012040:	e037      	b.n	80120b2 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 8012042:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012044:	f003 031f 	and.w	r3, r3, #31
 8012048:	2b02      	cmp	r3, #2
 801204a:	d117      	bne.n	801207c <xProcessReceivedTCPPacket+0x28c>
 801204c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801204e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012052:	2b04      	cmp	r3, #4
 8012054:	d912      	bls.n	801207c <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 8012056:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012058:	4619      	mov	r1, r3
 801205a:	4807      	ldr	r0, [pc, #28]	@ (8012078 <xProcessReceivedTCPPacket+0x288>)
 801205c:	f010 faf2 	bl	8022644 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 8012060:	2300      	movs	r3, #0
 8012062:	647b      	str	r3, [r7, #68]	@ 0x44
 8012064:	e025      	b.n	80120b2 <xProcessReceivedTCPPacket+0x2c2>
 8012066:	bf00      	nop
 8012068:	0802669c 	.word	0x0802669c
 801206c:	080267d4 	.word	0x080267d4
 8012070:	080267fc 	.word	0x080267fc
 8012074:	08026834 	.word	0x08026834
 8012078:	08026858 	.word	0x08026858
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 801207c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801207e:	f7f8 f925 	bl	800a2cc <uxIPHeaderSizeSocket>
 8012082:	4603      	mov	r3, r0
 8012084:	330e      	adds	r3, #14
 8012086:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8012088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801208a:	33a0      	adds	r3, #160	@ 0xa0
 801208c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801208e:	4413      	add	r3, r2
 8012090:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801209a:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 801209c:	2214      	movs	r2, #20
 801209e:	4619      	mov	r1, r3
 80120a0:	f010 fcec 	bl	8022a7c <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 80120a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120a6:	330d      	adds	r3, #13
 80120a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80120aa:	4413      	add	r3, r2
 80120ac:	2210      	movs	r2, #16
 80120ae:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 80120b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d056      	beq.n	8012166 <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 80120b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d104      	bne.n	80120c8 <xProcessReceivedTCPPacket+0x2d8>
 80120be:	f240 319e 	movw	r1, #926	@ 0x39e
 80120c2:	482b      	ldr	r0, [pc, #172]	@ (8012170 <xProcessReceivedTCPPacket+0x380>)
 80120c4:	f7ef fc5a 	bl	800197c <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 80120c8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80120ca:	f7ff fa53 	bl	8011574 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 80120ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120d0:	7b1b      	ldrb	r3, [r3, #12]
 80120d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80120d6:	2b50      	cmp	r3, #80	@ 0x50
 80120d8:	d905      	bls.n	80120e6 <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	4619      	mov	r1, r3
 80120de:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80120e0:	f000 f894 	bl	801220c <prvCheckOptions>
 80120e4:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 80120e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d03c      	beq.n	8012166 <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 80120ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ee:	89db      	ldrh	r3, [r3, #14]
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	021b      	lsls	r3, r3, #8
 80120f4:	b21a      	sxth	r2, r3
 80120f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120f8:	89db      	ldrh	r3, [r3, #14]
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	0a1b      	lsrs	r3, r3, #8
 80120fe:	b29b      	uxth	r3, r3
 8012100:	b21b      	sxth	r3, r3
 8012102:	4313      	orrs	r3, r2
 8012104:	b21b      	sxth	r3, r3
 8012106:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8012108:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801210a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801210c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8012110:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012112:	f003 0302 	and.w	r3, r3, #2
 8012116:	2b00      	cmp	r3, #0
 8012118:	d10a      	bne.n	8012130 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 801211a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801211c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8012120:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012122:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012126:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 801212a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801212c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8012130:	f107 031c 	add.w	r3, r7, #28
 8012134:	4619      	mov	r1, r3
 8012136:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012138:	f000 ff78 	bl	801302c <prvTCPHandleState>
 801213c:	4603      	mov	r3, r0
 801213e:	2b00      	cmp	r3, #0
 8012140:	dd05      	ble.n	801214e <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8012142:	f107 031c 	add.w	r3, r7, #28
 8012146:	4619      	mov	r1, r3
 8012148:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801214a:	f001 fc6f 	bl	8013a2c <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 801214e:	69fb      	ldr	r3, [r7, #28]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d005      	beq.n	8012160 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012154:	69fb      	ldr	r3, [r7, #28]
 8012156:	4618      	mov	r0, r3
 8012158:	f005 fbcc 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 801215c:	2300      	movs	r3, #0
 801215e:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 8012160:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012162:	f7ff fc73 	bl	8011a4c <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 8012166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8012168:	4618      	mov	r0, r3
 801216a:	3748      	adds	r7, #72	@ 0x48
 801216c:	46bd      	mov	sp, r7
 801216e:	bdb0      	pop	{r4, r5, r7, pc}
 8012170:	0802669c 	.word	0x0802669c

08012174 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 8012174:	b580      	push	{r7, lr}
 8012176:	b088      	sub	sp, #32
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012180:	021b      	lsls	r3, r3, #8
 8012182:	b21a      	sxth	r2, r3
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012188:	0a1b      	lsrs	r3, r3, #8
 801218a:	b29b      	uxth	r3, r3
 801218c:	b21b      	sxth	r3, r3
 801218e:	4313      	orrs	r3, r2
 8012190:	b21b      	sxth	r3, r3
 8012192:	b29b      	uxth	r3, r3
 8012194:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 8012196:	2300      	movs	r3, #0
 8012198:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801219a:	4b19      	ldr	r3, [pc, #100]	@ (8012200 <xTCPCheckNewClient+0x8c>)
 801219c:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 801219e:	4b19      	ldr	r3, [pc, #100]	@ (8012204 <xTCPCheckNewClient+0x90>)
 80121a0:	68db      	ldr	r3, [r3, #12]
 80121a2:	61fb      	str	r3, [r7, #28]
 80121a4:	e023      	b.n	80121ee <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 80121a6:	69fb      	ldr	r3, [r7, #28]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	697a      	ldr	r2, [r7, #20]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d11b      	bne.n	80121e8 <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80121b0:	69fb      	ldr	r3, [r7, #28]
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80121bc:	2b06      	cmp	r3, #6
 80121be:	d113      	bne.n	80121e8 <xTCPCheckNewClient+0x74>
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80121c6:	f003 0302 	and.w	r3, r3, #2
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d00b      	beq.n	80121e8 <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	68fa      	ldr	r2, [r7, #12]
 80121d4:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80121da:	4619      	mov	r1, r3
 80121dc:	480a      	ldr	r0, [pc, #40]	@ (8012208 <xTCPCheckNewClient+0x94>)
 80121de:	f010 fa31 	bl	8022644 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 80121e2:	2301      	movs	r3, #1
 80121e4:	61bb      	str	r3, [r7, #24]
                    break;
 80121e6:	e006      	b.n	80121f6 <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 80121ee:	69fa      	ldr	r2, [r7, #28]
 80121f0:	693b      	ldr	r3, [r7, #16]
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d1d7      	bne.n	80121a6 <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 80121f6:	69bb      	ldr	r3, [r7, #24]
    }
 80121f8:	4618      	mov	r0, r3
 80121fa:	3720      	adds	r7, #32
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	20001610 	.word	0x20001610
 8012204:	20001608 	.word	0x20001608
 8012208:	08026878 	.word	0x08026878

0801220c <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801220c:	b580      	push	{r7, lr}
 801220e:	b08c      	sub	sp, #48	@ 0x30
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
 8012214:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8012216:	6838      	ldr	r0, [r7, #0]
 8012218:	f7f8 f83e 	bl	800a298 <uxIPHeaderSizePacket>
 801221c:	4603      	mov	r3, r0
 801221e:	330e      	adds	r3, #14
 8012220:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	4413      	add	r3, r2
 801222a:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 801222c:	2301      	movs	r3, #1
 801222e:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	3314      	adds	r3, #20
 8012234:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	3314      	adds	r3, #20
 801223e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	7b1b      	ldrb	r3, [r3, #12]
 8012244:	2b50      	cmp	r3, #80	@ 0x50
 8012246:	d93f      	bls.n	80122c8 <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	7b1b      	ldrb	r3, [r3, #12]
 801224c:	091b      	lsrs	r3, r3, #4
 801224e:	b2db      	uxtb	r3, r3
 8012250:	3b05      	subs	r3, #5
 8012252:	b2db      	uxtb	r3, r3
 8012254:	009b      	lsls	r3, r3, #2
 8012256:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 8012258:	7bfb      	ldrb	r3, [r7, #15]
 801225a:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012260:	697a      	ldr	r2, [r7, #20]
 8012262:	429a      	cmp	r2, r3
 8012264:	d230      	bcs.n	80122c8 <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	1ad3      	subs	r3, r2, r3
 801226e:	6a3a      	ldr	r2, [r7, #32]
 8012270:	429a      	cmp	r2, r3
 8012272:	d829      	bhi.n	80122c8 <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8012274:	693b      	ldr	r3, [r7, #16]
 8012276:	7b5b      	ldrb	r3, [r3, #13]
 8012278:	f003 0302 	and.w	r3, r3, #2
 801227c:	2b00      	cmp	r3, #0
 801227e:	d002      	beq.n	8012286 <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 8012280:	2301      	movs	r3, #1
 8012282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012284:	e001      	b.n	801228a <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 8012286:	2300      	movs	r3, #0
 8012288:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 801228a:	6a3b      	ldr	r3, [r7, #32]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d018      	beq.n	80122c2 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 8012290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	6a39      	ldr	r1, [r7, #32]
 8012296:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012298:	f000 f81c 	bl	80122d4 <prvSingleStepTCPHeaderOptions>
 801229c:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	da02      	bge.n	80122aa <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 80122a4:	2300      	movs	r3, #0
 80122a6:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 80122a8:	e00e      	b.n	80122c8 <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d00a      	beq.n	80122c6 <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	6a3a      	ldr	r2, [r7, #32]
 80122b4:	1ad3      	subs	r3, r2, r3
 80122b6:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122bc:	4413      	add	r3, r2
 80122be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 80122c0:	e7e3      	b.n	801228a <prvCheckOptions+0x7e>
                            break;
 80122c2:	bf00      	nop
 80122c4:	e000      	b.n	80122c8 <prvCheckOptions+0xbc>
                            break;
 80122c6:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 80122c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80122ca:	4618      	mov	r0, r3
 80122cc:	3730      	adds	r7, #48	@ 0x30
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}
	...

080122d4 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b08a      	sub	sp, #40	@ 0x28
 80122d8:	af00      	add	r7, sp, #0
 80122da:	60f8      	str	r0, [r7, #12]
 80122dc:	60b9      	str	r1, [r7, #8]
 80122de:	607a      	str	r2, [r7, #4]
 80122e0:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 80122e6:	2300      	movs	r3, #0
 80122e8:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80122f0:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80122f2:	2300      	movs	r3, #0
 80122f4:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d102      	bne.n	8012304 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 80122fe:	2300      	movs	r3, #0
 8012300:	61fb      	str	r3, [r7, #28]
 8012302:	e0da      	b.n	80124ba <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	2b01      	cmp	r3, #1
 801230a:	d102      	bne.n	8012312 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 801230c:	2301      	movs	r3, #1
 801230e:	61fb      	str	r3, [r7, #28]
 8012310:	e0d3      	b.n	80124ba <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	2b01      	cmp	r3, #1
 8012316:	d803      	bhi.n	8012320 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 8012318:	f04f 33ff 	mov.w	r3, #4294967295
 801231c:	61fb      	str	r3, [r7, #28]
 801231e:	e0cc      	b.n	80124ba <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	2b03      	cmp	r3, #3
 8012326:	d11e      	bne.n	8012366 <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	2b02      	cmp	r3, #2
 801232c:	d904      	bls.n	8012338 <prvSingleStepTCPHeaderOptions+0x64>
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	3301      	adds	r3, #1
 8012332:	781b      	ldrb	r3, [r3, #0]
 8012334:	2b03      	cmp	r3, #3
 8012336:	d003      	beq.n	8012340 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 8012338:	f04f 33ff 	mov.w	r3, #4294967295
 801233c:	61fb      	str	r3, [r7, #28]
 801233e:	e0bc      	b.n	80124ba <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d00c      	beq.n	8012360 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	3302      	adds	r3, #2
 801234a:	781a      	ldrb	r2, [r3, #0]
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 8012352:	687a      	ldr	r2, [r7, #4]
 8012354:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012358:	f043 0310 	orr.w	r3, r3, #16
 801235c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 8012360:	2303      	movs	r3, #3
 8012362:	61fb      	str	r3, [r7, #28]
 8012364:	e0a9      	b.n	80124ba <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	2b02      	cmp	r3, #2
 801236c:	d16d      	bne.n	801244a <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	2b03      	cmp	r3, #3
 8012372:	d904      	bls.n	801237e <prvSingleStepTCPHeaderOptions+0xaa>
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	3301      	adds	r3, #1
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	2b04      	cmp	r3, #4
 801237c:	d003      	beq.n	8012386 <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 801237e:	f04f 33ff 	mov.w	r3, #4294967295
 8012382:	61fb      	str	r3, [r7, #28]
 8012384:	e099      	b.n	80124ba <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	3302      	adds	r3, #2
 801238a:	4618      	mov	r0, r3
 801238c:	f7f8 fd31 	bl	800adf2 <usChar2u16>
 8012390:	4603      	mov	r3, r0
 8012392:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801239a:	461a      	mov	r2, r3
 801239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801239e:	4293      	cmp	r3, r2
 80123a0:	d010      	beq.n	80123c4 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 80123a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d105      	bne.n	80123b4 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 80123a8:	f04f 33ff 	mov.w	r3, #4294967295
 80123ac:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 80123ae:	2301      	movs	r3, #1
 80123b0:	61bb      	str	r3, [r7, #24]
 80123b2:	e007      	b.n	80123c4 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80123ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123bc:	4619      	mov	r1, r3
 80123be:	4841      	ldr	r0, [pc, #260]	@ (80124c4 <prvSingleStepTCPHeaderOptions+0x1f0>)
 80123c0:	f010 f940 	bl	8022644 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 80123c4:	69bb      	ldr	r3, [r7, #24]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d177      	bne.n	80124ba <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 80123ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123cc:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80123d0:	d202      	bcs.n	80123d8 <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 80123d2:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80123d6:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80123de:	461a      	mov	r2, r3
 80123e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d22e      	bcs.n	8012444 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80123ec:	f043 0301 	orr.w	r3, r3, #1
 80123f0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80123fa:	461a      	mov	r2, r3
 80123fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123fe:	4293      	cmp	r3, r2
 8012400:	d207      	bcs.n	8012412 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801240a:	4619      	mov	r1, r3
 801240c:	482e      	ldr	r0, [pc, #184]	@ (80124c8 <prvSingleStepTCPHeaderOptions+0x1f4>)
 801240e:	f010 f919 	bl	8022644 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	685a      	ldr	r2, [r3, #4]
 8012416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012418:	fbb2 f3f3 	udiv	r3, r2, r3
 801241c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801241e:	fb03 f202 	mul.w	r2, r3, r2
 8012422:	693b      	ldr	r3, [r7, #16]
 8012424:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 8012426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012428:	b29a      	uxth	r2, r3
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8012430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012432:	b29a      	uxth	r2, r3
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 801243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801243c:	b29a      	uxth	r2, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 8012444:	2304      	movs	r3, #4
 8012446:	61fb      	str	r3, [r7, #28]
 8012448:	e037      	b.n	80124ba <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	3301      	adds	r3, #1
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 8012454:	2300      	movs	r3, #0
 8012456:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 8012458:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801245c:	2b01      	cmp	r3, #1
 801245e:	d904      	bls.n	801246a <prvSingleStepTCPHeaderOptions+0x196>
 8012460:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012464:	697a      	ldr	r2, [r7, #20]
 8012466:	429a      	cmp	r2, r3
 8012468:	d203      	bcs.n	8012472 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 801246a:	f04f 33ff 	mov.w	r3, #4294967295
 801246e:	61fb      	str	r3, [r7, #28]
 8012470:	e023      	b.n	80124ba <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	781b      	ldrb	r3, [r3, #0]
 8012476:	2b05      	cmp	r3, #5
 8012478:	d11a      	bne.n	80124b0 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 801247a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801247e:	3b02      	subs	r3, #2
 8012480:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	3302      	adds	r3, #2
 8012488:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 801248a:	e00d      	b.n	80124a8 <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 801248c:	69fb      	ldr	r3, [r7, #28]
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	4619      	mov	r1, r3
 8012492:	68f8      	ldr	r0, [r7, #12]
 8012494:	f000 f81a 	bl	80124cc <prvReadSackOption>
                            lIndex += 8;
 8012498:	69fb      	ldr	r3, [r7, #28]
 801249a:	3308      	adds	r3, #8
 801249c:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 801249e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80124a2:	3b08      	subs	r3, #8
 80124a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 80124a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80124ac:	2b07      	cmp	r3, #7
 80124ae:	d8ed      	bhi.n	801248c <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 80124b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80124b4:	69fa      	ldr	r2, [r7, #28]
 80124b6:	4413      	add	r3, r2
 80124b8:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 80124ba:	69fb      	ldr	r3, [r7, #28]
    }
 80124bc:	4618      	mov	r0, r3
 80124be:	3728      	adds	r7, #40	@ 0x28
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	080268a4 	.word	0x080268a4
 80124c8:	080268bc 	.word	0x080268bc

080124cc <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b08a      	sub	sp, #40	@ 0x28
 80124d0:	af02      	add	r7, sp, #8
 80124d2:	60f8      	str	r0, [r7, #12]
 80124d4:	60b9      	str	r1, [r7, #8]
 80124d6:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 80124d8:	68fa      	ldr	r2, [r7, #12]
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	4413      	add	r3, r2
 80124de:	4618      	mov	r0, r3
 80124e0:	f7f8 fc6c 	bl	800adbc <ulChar2u32>
 80124e4:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	3304      	adds	r3, #4
 80124ea:	68fa      	ldr	r2, [r7, #12]
 80124ec:	4413      	add	r3, r2
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7f8 fc64 	bl	800adbc <ulChar2u32>
 80124f4:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80124fc:	69ba      	ldr	r2, [r7, #24]
 80124fe:	69f9      	ldr	r1, [r7, #28]
 8012500:	4618      	mov	r0, r3
 8012502:	f004 fba3 	bl	8016c4c <ulTCPWindowTxSack>
 8012506:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801250e:	2b00      	cmp	r3, #0
 8012510:	d029      	beq.n	8012566 <prvReadSackOption+0x9a>
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d026      	beq.n	8012566 <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801251e:	2300      	movs	r3, #0
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	2200      	movs	r2, #0
 8012526:	2100      	movs	r1, #0
 8012528:	f7fe fed9 	bl	80112de <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	f043 0202 	orr.w	r2, r3, #2
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801253c:	f003 0302 	and.w	r3, r3, #2
 8012540:	2b00      	cmp	r3, #0
 8012542:	d005      	beq.n	8012550 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012556:	2b00      	cmp	r3, #0
 8012558:	d005      	beq.n	8012566 <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012560:	6979      	ldr	r1, [r7, #20]
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 8012566:	bf00      	nop
 8012568:	3720      	adds	r7, #32
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 801256e:	b590      	push	{r4, r7, lr}
 8012570:	b08f      	sub	sp, #60	@ 0x3c
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
 8012576:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f7f7 fe8b 	bl	800a298 <uxIPHeaderSizePacket>
 8012582:	4603      	mov	r3, r0
 8012584:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012586:	4423      	add	r3, r4
 8012588:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801258a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801258c:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f7f7 fe82 	bl	800a298 <uxIPHeaderSizePacket>
 8012594:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 8012596:	2300      	movs	r3, #0
 8012598:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 801259c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801259e:	7b1b      	ldrb	r3, [r3, #12]
 80125a0:	089b      	lsrs	r3, r3, #2
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80125a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 80125ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80125b0:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80125b6:	69f9      	ldr	r1, [r7, #28]
 80125b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ba:	440b      	add	r3, r1
 80125bc:	330e      	adds	r3, #14
 80125be:	441a      	add	r2, r3
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125c8:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 80125ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125cc:	3b0e      	subs	r3, #14
 80125ce:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125d4:	899b      	ldrh	r3, [r3, #12]
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	2b08      	cmp	r3, #8
 80125da:	d004      	beq.n	80125e6 <prvCheckRxData+0x78>
 80125dc:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80125e0:	4293      	cmp	r3, r2
 80125e2:	d015      	beq.n	8012610 <prvCheckRxData+0xa2>
 80125e4:	e02c      	b.n	8012640 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125ea:	330e      	adds	r3, #14
 80125ec:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	885b      	ldrh	r3, [r3, #2]
 80125f2:	b29b      	uxth	r3, r3
 80125f4:	021b      	lsls	r3, r3, #8
 80125f6:	b21a      	sxth	r2, r3
 80125f8:	693b      	ldr	r3, [r7, #16]
 80125fa:	885b      	ldrh	r3, [r3, #2]
 80125fc:	b29b      	uxth	r3, r3
 80125fe:	0a1b      	lsrs	r3, r3, #8
 8012600:	b29b      	uxth	r3, r3
 8012602:	b21b      	sxth	r3, r3
 8012604:	4313      	orrs	r3, r2
 8012606:	b21b      	sxth	r3, r3
 8012608:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 801260a:	8afb      	ldrh	r3, [r7, #22]
 801260c:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 801260e:	e01a      	b.n	8012646 <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012614:	330e      	adds	r3, #14
 8012616:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 8012618:	69bb      	ldr	r3, [r7, #24]
 801261a:	889b      	ldrh	r3, [r3, #4]
 801261c:	b29b      	uxth	r3, r3
 801261e:	021b      	lsls	r3, r3, #8
 8012620:	b21a      	sxth	r2, r3
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	889b      	ldrh	r3, [r3, #4]
 8012626:	b29b      	uxth	r3, r3
 8012628:	0a1b      	lsrs	r3, r3, #8
 801262a:	b29b      	uxth	r3, r3
 801262c:	b21b      	sxth	r3, r3
 801262e:	4313      	orrs	r3, r2
 8012630:	b21b      	sxth	r3, r3
 8012632:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8012634:	8afb      	ldrh	r3, [r7, #22]
 8012636:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 8012638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801263a:	3328      	adds	r3, #40	@ 0x28
 801263c:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 801263e:	e002      	b.n	8012646 <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 8012640:	2300      	movs	r3, #0
 8012642:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8012644:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 8012646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801264a:	429a      	cmp	r2, r3
 801264c:	dd01      	ble.n	8012652 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 801264e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012650:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8012652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	4413      	add	r3, r2
 8012658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801265a:	429a      	cmp	r2, r3
 801265c:	dd06      	ble.n	801266c <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 801265e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	4413      	add	r3, r2
 8012664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012666:	1ad3      	subs	r3, r2, r3
 8012668:	633b      	str	r3, [r7, #48]	@ 0x30
 801266a:	e001      	b.n	8012670 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 801266c:	2300      	movs	r3, #0
 801266e:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8012670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012672:	7b5b      	ldrb	r3, [r3, #13]
 8012674:	f003 0320 	and.w	r3, r3, #32
 8012678:	2b00      	cmp	r3, #0
 801267a:	d01c      	beq.n	80126b6 <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 801267c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801267e:	8a5b      	ldrh	r3, [r3, #18]
 8012680:	b29b      	uxth	r3, r3
 8012682:	021b      	lsls	r3, r3, #8
 8012684:	b21a      	sxth	r2, r3
 8012686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012688:	8a5b      	ldrh	r3, [r3, #18]
 801268a:	b29b      	uxth	r3, r3
 801268c:	0a1b      	lsrs	r3, r3, #8
 801268e:	b29b      	uxth	r3, r3
 8012690:	b21b      	sxth	r3, r3
 8012692:	4313      	orrs	r3, r2
 8012694:	b21b      	sxth	r3, r3
 8012696:	b29b      	uxth	r3, r3
 8012698:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	441a      	add	r2, r3
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 80126a6:	68f9      	ldr	r1, [r7, #12]
 80126a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80126aa:	f7f8 fb33 	bl	800ad14 <FreeRTOS_min_int32>
 80126ae:	4602      	mov	r2, r0
 80126b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126b2:	1a9b      	subs	r3, r3, r2
 80126b4:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 80126b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 80126b8:	4618      	mov	r0, r3
 80126ba:	373c      	adds	r7, #60	@ 0x3c
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd90      	pop	{r4, r7, pc}

080126c0 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b092      	sub	sp, #72	@ 0x48
 80126c4:	af02      	add	r7, sp, #8
 80126c6:	60f8      	str	r0, [r7, #12]
 80126c8:	60b9      	str	r1, [r7, #8]
 80126ca:	607a      	str	r2, [r7, #4]
 80126cc:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f7f7 fde2 	bl	800a298 <uxIPHeaderSizePacket>
 80126d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80126da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126dc:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80126de:	4413      	add	r3, r2
 80126e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80126e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126e4:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80126ec:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 80126ee:	2300      	movs	r3, #0
 80126f0:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80126fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	061a      	lsls	r2, r3, #24
 8012700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	021b      	lsls	r3, r3, #8
 8012706:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801270a:	431a      	orrs	r2, r3
 801270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	0a1b      	lsrs	r3, r3, #8
 8012712:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012716:	431a      	orrs	r2, r3
 8012718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	0e1b      	lsrs	r3, r3, #24
 801271e:	4313      	orrs	r3, r2
 8012720:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 8012722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012724:	2b00      	cmp	r3, #0
 8012726:	d057      	beq.n	80127d8 <prvStoreRxData+0x118>
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801272e:	2b03      	cmp	r3, #3
 8012730:	d952      	bls.n	80127d8 <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 8012732:	2300      	movs	r3, #0
 8012734:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801273c:	2b00      	cmp	r3, #0
 801273e:	d007      	beq.n	8012750 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012746:	4618      	mov	r0, r3
 8012748:	f7fe fc89 	bl	801105e <uxStreamBufferGetSpace>
 801274c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801274e:	e003      	b.n	8012758 <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012756:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 8012758:	f107 0310 	add.w	r3, r7, #16
 801275c:	9300      	str	r3, [sp, #0]
 801275e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012760:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012762:	69f9      	ldr	r1, [r7, #28]
 8012764:	6a38      	ldr	r0, [r7, #32]
 8012766:	f003 fd45 	bl	80161f4 <lTCPWindowRxCheck>
 801276a:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 801276c:	69bb      	ldr	r3, [r7, #24]
 801276e:	2b00      	cmp	r3, #0
 8012770:	db20      	blt.n	80127b4 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d007      	beq.n	8012788 <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801277c:	1ad3      	subs	r3, r2, r3
 801277e:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	68ba      	ldr	r2, [r7, #8]
 8012784:	4413      	add	r3, r2
 8012786:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 8012788:	69b9      	ldr	r1, [r7, #24]
 801278a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801278c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801278e:	68f8      	ldr	r0, [r7, #12]
 8012790:	f7fe f8d2 	bl	8010938 <lTCPAddRxdata>
 8012794:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 8012796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012798:	697a      	ldr	r2, [r7, #20]
 801279a:	429a      	cmp	r2, r3
 801279c:	d00a      	beq.n	80127b4 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 801279e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80127a0:	6979      	ldr	r1, [r7, #20]
 80127a2:	4813      	ldr	r0, [pc, #76]	@ (80127f0 <prvStoreRxData+0x130>)
 80127a4:	f00f ff4e 	bl	8022644 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f002 f8b3 	bl	8014914 <prvTCPSendReset>
                    xResult = -1;
 80127ae:	f04f 33ff 	mov.w	r3, #4294967295
 80127b2:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 80127b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d113      	bne.n	80127e2 <prvStoreRxData+0x122>
 80127ba:	6a3b      	ldr	r3, [r7, #32]
 80127bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d00f      	beq.n	80127e2 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 80127c2:	6a3b      	ldr	r3, [r7, #32]
 80127c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127c6:	2200      	movs	r2, #0
 80127c8:	2100      	movs	r1, #0
 80127ca:	68f8      	ldr	r0, [r7, #12]
 80127cc:	f7fe f8b4 	bl	8010938 <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 80127d0:	6a3b      	ldr	r3, [r7, #32]
 80127d2:	2200      	movs	r2, #0
 80127d4:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 80127d6:	e004      	b.n	80127e2 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 80127d8:	6a3b      	ldr	r3, [r7, #32]
 80127da:	2200      	movs	r2, #0
 80127dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80127e0:	e000      	b.n	80127e4 <prvStoreRxData+0x124>
        {
 80127e2:	bf00      	nop
        }

        return xResult;
 80127e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 80127e6:	4618      	mov	r0, r3
 80127e8:	3740      	adds	r7, #64	@ 0x40
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
 80127ee:	bf00      	nop
 80127f0:	080268d4 	.word	0x080268d4

080127f4 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 80127f4:	b480      	push	{r7}
 80127f6:	b085      	sub	sp, #20
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	4603      	mov	r3, r0
 80127fc:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 80127fe:	79fb      	ldrb	r3, [r7, #7]
 8012800:	2b0b      	cmp	r3, #11
 8012802:	bf8c      	ite	hi
 8012804:	2201      	movhi	r2, #1
 8012806:	2200      	movls	r2, #0
 8012808:	b2d2      	uxtb	r2, r2
 801280a:	2a00      	cmp	r2, #0
 801280c:	d10f      	bne.n	801282e <prvTCPSocketIsActive+0x3a>
 801280e:	f640 3281 	movw	r2, #2945	@ 0xb81
 8012812:	fa22 f303 	lsr.w	r3, r2, r3
 8012816:	f003 0301 	and.w	r3, r3, #1
 801281a:	2b00      	cmp	r3, #0
 801281c:	bf14      	ite	ne
 801281e:	2301      	movne	r3, #1
 8012820:	2300      	moveq	r3, #0
 8012822:	b2db      	uxtb	r3, r3
 8012824:	2b00      	cmp	r3, #0
 8012826:	d002      	beq.n	801282e <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 8012828:	2300      	movs	r3, #0
 801282a:	60fb      	str	r3, [r7, #12]
                break;
 801282c:	e002      	b.n	8012834 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 801282e:	2301      	movs	r3, #1
 8012830:	60fb      	str	r3, [r7, #12]
                break;
 8012832:	bf00      	nop
        }

        return xResult;
 8012834:	68fb      	ldr	r3, [r7, #12]
    }
 8012836:	4618      	mov	r0, r3
 8012838:	3714      	adds	r7, #20
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr
	...

08012844 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 8012844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012846:	b089      	sub	sp, #36	@ 0x24
 8012848:	af02      	add	r7, sp, #8
 801284a:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012852:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 8012854:	7cfb      	ldrb	r3, [r7, #19]
 8012856:	2b08      	cmp	r3, #8
 8012858:	d00b      	beq.n	8012872 <prvTCPStatusAgeCheck+0x2e>
 801285a:	2b08      	cmp	r3, #8
 801285c:	dc0c      	bgt.n	8012878 <prvTCPStatusAgeCheck+0x34>
 801285e:	2b01      	cmp	r3, #1
 8012860:	dc02      	bgt.n	8012868 <prvTCPStatusAgeCheck+0x24>
 8012862:	2b00      	cmp	r3, #0
 8012864:	da05      	bge.n	8012872 <prvTCPStatusAgeCheck+0x2e>
 8012866:	e007      	b.n	8012878 <prvTCPStatusAgeCheck+0x34>
 8012868:	2b05      	cmp	r3, #5
 801286a:	d105      	bne.n	8012878 <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 801286c:	2300      	movs	r3, #0
 801286e:	617b      	str	r3, [r7, #20]
                    break;
 8012870:	e005      	b.n	801287e <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 8012872:	2300      	movs	r3, #0
 8012874:	617b      	str	r3, [r7, #20]
                    break;
 8012876:	e002      	b.n	801287e <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 8012878:	2301      	movs	r3, #1
 801287a:	617b      	str	r3, [r7, #20]
                    break;
 801287c:	bf00      	nop
            }

            if( xResult != pdFALSE )
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d032      	beq.n	80128ea <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8012884:	f7f2 f970 	bl	8004b68 <xTaskGetTickCount>
 8012888:	4602      	mov	r2, r0
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012890:	1ad3      	subs	r3, r2, r3
 8012892:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	f247 5230 	movw	r2, #30000	@ 0x7530
 801289a:	4293      	cmp	r3, r2
 801289c:	d925      	bls.n	80128ea <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80128a2:	461d      	mov	r5, r3
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80128ae:	461e      	mov	r6, r3
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80128b6:	4618      	mov	r0, r3
 80128b8:	f000 fdca 	bl	8013450 <FreeRTOS_GetTCPStateName>
 80128bc:	4603      	mov	r3, r0
 80128be:	9300      	str	r3, [sp, #0]
 80128c0:	4633      	mov	r3, r6
 80128c2:	4622      	mov	r2, r4
 80128c4:	4629      	mov	r1, r5
 80128c6:	480b      	ldr	r0, [pc, #44]	@ (80128f4 <prvTCPStatusAgeCheck+0xb0>)
 80128c8:	f00f febc 	bl	8022644 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80128cc:	2108      	movs	r1, #8
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f7fe feac 	bl	801162c <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80128da:	f003 0304 	and.w	r3, r3, #4
 80128de:	b2db      	uxtb	r3, r3
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d002      	beq.n	80128ea <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 80128e4:	f04f 33ff 	mov.w	r3, #4294967295
 80128e8:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 80128ea:	697b      	ldr	r3, [r7, #20]
        }
 80128ec:	4618      	mov	r0, r3
 80128ee:	371c      	adds	r7, #28
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128f4:	080268fc 	.word	0x080268fc

080128f8 <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80128f8:	b5b0      	push	{r4, r5, r7, lr}
 80128fa:	b08a      	sub	sp, #40	@ 0x28
 80128fc:	af02      	add	r7, sp, #8
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012906:	6838      	ldr	r0, [r7, #0]
 8012908:	f7f7 fcc6 	bl	800a298 <uxIPHeaderSizePacket>
 801290c:	4603      	mov	r3, r0
 801290e:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012910:	4423      	add	r3, r4
 8012912:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012914:	69bb      	ldr	r3, [r7, #24]
 8012916:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012918:	2300      	movs	r3, #0
 801291a:	74fb      	strb	r3, [r7, #19]
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	7b5b      	ldrb	r3, [r3, #13]
 8012920:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012928:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 801292a:	2300      	movs	r3, #0
 801292c:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	689b      	ldr	r3, [r3, #8]
 8012932:	061a      	lsls	r2, r3, #24
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	689b      	ldr	r3, [r3, #8]
 8012938:	021b      	lsls	r3, r3, #8
 801293a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801293e:	431a      	orrs	r2, r3
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	689b      	ldr	r3, [r3, #8]
 8012944:	0a1b      	lsrs	r3, r3, #8
 8012946:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801294a:	431a      	orrs	r2, r3
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	689b      	ldr	r3, [r3, #8]
 8012950:	0e1b      	lsrs	r3, r3, #24
 8012952:	4313      	orrs	r3, r2
 8012954:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8012956:	7cbb      	ldrb	r3, [r7, #18]
 8012958:	f003 0301 	and.w	r3, r3, #1
 801295c:	2b00      	cmp	r3, #0
 801295e:	d004      	beq.n	801296a <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	695b      	ldr	r3, [r3, #20]
 8012964:	1c5a      	adds	r2, r3, #1
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012974:	b2db      	uxtb	r3, r3
 8012976:	2b00      	cmp	r3, #0
 8012978:	d10b      	bne.n	8012992 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	6a1a      	ldr	r2, [r3, #32]
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801298c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8012990:	e00c      	b.n	80129ac <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012996:	3301      	adds	r3, #1
 8012998:	68ba      	ldr	r2, [r7, #8]
 801299a:	429a      	cmp	r2, r3
 801299c:	d106      	bne.n	80129ac <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 801299e:	687a      	ldr	r2, [r7, #4]
 80129a0:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80129a4:	f043 0301 	orr.w	r3, r3, #1
 80129a8:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80129b2:	f003 0301 	and.w	r3, r3, #1
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d10b      	bne.n	80129d4 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	2211      	movs	r2, #17
 80129c8:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 80129ca:	210a      	movs	r1, #10
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f7fe fe2d 	bl	801162c <vTCPStateChange>
 80129d2:	e023      	b.n	8012a1c <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129d8:	1c5a      	adds	r2, r3, #1
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80129e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80129e8:	b2db      	uxtb	r3, r3
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d103      	bne.n	80129f6 <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	2200      	movs	r2, #0
 80129f2:	735a      	strb	r2, [r3, #13]
 80129f4:	e012      	b.n	8012a1c <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80129fc:	f003 0302 	and.w	r3, r3, #2
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d103      	bne.n	8012a0e <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	2210      	movs	r2, #16
 8012a0a:	735a      	strb	r2, [r3, #13]
 8012a0c:	e002      	b.n	8012a14 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	2200      	movs	r2, #0
 8012a12:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012a14:	2108      	movs	r1, #8
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f7fe fe08 	bl	801162c <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	6a1a      	ldr	r2, [r3, #32]
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	7b5b      	ldrb	r3, [r3, #13]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d00d      	beq.n	8012a48 <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f7f7 fc4d 	bl	800a2cc <uxIPHeaderSizeSocket>
 8012a32:	4603      	mov	r3, r0
 8012a34:	b2da      	uxtb	r2, r3
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012a3c:	4413      	add	r3, r2
 8012a3e:	b2db      	uxtb	r3, r3
 8012a40:	3314      	adds	r3, #20
 8012a42:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8012a44:	7cfb      	ldrb	r3, [r7, #19]
 8012a46:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012a4e:	3314      	adds	r3, #20
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	009b      	lsls	r3, r3, #2
 8012a54:	b2da      	uxtb	r2, r3
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 8012a5a:	4b14      	ldr	r3, [pc, #80]	@ (8012aac <prvTCPHandleFin+0x1b4>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d01f      	beq.n	8012aa2 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	69db      	ldr	r3, [r3, #28]
 8012a66:	68ba      	ldr	r2, [r7, #8]
 8012a68:	1ad0      	subs	r0, r2, r3
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	6a1a      	ldr	r2, [r3, #32]
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	69db      	ldr	r3, [r3, #28]
 8012a72:	1ad4      	subs	r4, r2, r3
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	69db      	ldr	r3, [r3, #28]
 8012a7c:	1ad5      	subs	r5, r2, r3
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	69db      	ldr	r3, [r3, #28]
 8012a86:	1ad3      	subs	r3, r2, r3
 8012a88:	68fa      	ldr	r2, [r7, #12]
 8012a8a:	6911      	ldr	r1, [r2, #16]
 8012a8c:	68fa      	ldr	r2, [r7, #12]
 8012a8e:	68d2      	ldr	r2, [r2, #12]
 8012a90:	1a8a      	subs	r2, r1, r2
 8012a92:	9201      	str	r2, [sp, #4]
 8012a94:	9300      	str	r3, [sp, #0]
 8012a96:	462b      	mov	r3, r5
 8012a98:	4622      	mov	r2, r4
 8012a9a:	4601      	mov	r1, r0
 8012a9c:	4804      	ldr	r0, [pc, #16]	@ (8012ab0 <prvTCPHandleFin+0x1b8>)
 8012a9e:	f00f fdd1 	bl	8022644 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8012aa2:	69fb      	ldr	r3, [r7, #28]
    }
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	3720      	adds	r7, #32
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8012aac:	2000164c 	.word	0x2000164c
 8012ab0:	08026934 	.word	0x08026934

08012ab4 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012ab4:	b590      	push	{r4, r7, lr}
 8012ab6:	b09b      	sub	sp, #108	@ 0x6c
 8012ab8:	af02      	add	r7, sp, #8
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	60b9      	str	r1, [r7, #8]
 8012abe:	607a      	str	r2, [r7, #4]
 8012ac0:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012ac6:	68f8      	ldr	r0, [r7, #12]
 8012ac8:	f7f7 fc00 	bl	800a2cc <uxIPHeaderSizeSocket>
 8012acc:	4603      	mov	r3, r0
 8012ace:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012ad0:	4423      	add	r3, r4
 8012ad2:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ad6:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ae2:	7b5b      	ldrb	r3, [r3, #13]
 8012ae4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8012ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012aea:	685b      	ldr	r3, [r3, #4]
 8012aec:	061a      	lsls	r2, r3, #24
 8012aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	021b      	lsls	r3, r3, #8
 8012af4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012af8:	431a      	orrs	r2, r3
 8012afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	0a1b      	lsrs	r3, r3, #8
 8012b00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012b04:	431a      	orrs	r2, r3
 8012b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	0e1b      	lsrs	r3, r3, #24
 8012b0c:	4313      	orrs	r3, r2
 8012b0e:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 8012b10:	2300      	movs	r3, #0
 8012b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 8012b14:	2300      	movs	r3, #0
 8012b16:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 8012b18:	2310      	movs	r3, #16
 8012b1a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 8012b1e:	2317      	movs	r3, #23
 8012b20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012b2a:	2b02      	cmp	r3, #2
 8012b2c:	d105      	bne.n	8012b3a <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8012b2e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8012b32:	f043 0302 	orr.w	r3, r3, #2
 8012b36:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8012b3a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8012b3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012b42:	4013      	ands	r3, r2
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d044      	beq.n	8012bd8 <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012b54:	2b04      	cmp	r3, #4
 8012b56:	d101      	bne.n	8012b5c <prvHandleSynReceived+0xa8>
 8012b58:	4977      	ldr	r1, [pc, #476]	@ (8012d38 <prvHandleSynReceived+0x284>)
 8012b5a:	e000      	b.n	8012b5e <prvHandleSynReceived+0xaa>
 8012b5c:	4977      	ldr	r1, [pc, #476]	@ (8012d3c <prvHandleSynReceived+0x288>)
 8012b5e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012b62:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8012b66:	4876      	ldr	r0, [pc, #472]	@ (8012d40 <prvHandleSynReceived+0x28c>)
 8012b68:	f00f fd6c 	bl	8022644 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012b6c:	2108      	movs	r1, #8
 8012b6e:	68f8      	ldr	r0, [r7, #12]
 8012b70:	f7fe fd5c 	bl	801162c <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8012b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b76:	689b      	ldr	r3, [r3, #8]
 8012b78:	061a      	lsls	r2, r3, #24
 8012b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b7c:	689b      	ldr	r3, [r3, #8]
 8012b7e:	021b      	lsls	r3, r3, #8
 8012b80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012b84:	431a      	orrs	r2, r3
 8012b86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b88:	689b      	ldr	r3, [r3, #8]
 8012b8a:	0a1b      	lsrs	r3, r3, #8
 8012b8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012b90:	431a      	orrs	r2, r3
 8012b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b94:	689b      	ldr	r3, [r3, #8]
 8012b96:	0e1b      	lsrs	r3, r3, #24
 8012b98:	431a      	orrs	r2, r3
 8012b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012ba2:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8012ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ba6:	7b5b      	ldrb	r3, [r3, #13]
 8012ba8:	f043 0304 	orr.w	r3, r3, #4
 8012bac:	b2da      	uxtb	r2, r3
 8012bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bb0:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012bb2:	68f8      	ldr	r0, [r7, #12]
 8012bb4:	f7f7 fb8a 	bl	800a2cc <uxIPHeaderSizeSocket>
 8012bb8:	4602      	mov	r2, r0
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	3314      	adds	r3, #20
 8012bc0:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	3314      	adds	r3, #20
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	009b      	lsls	r3, r3, #2
 8012bd0:	b2da      	uxtb	r2, r3
 8012bd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bd4:	731a      	strb	r2, [r3, #12]
 8012bd6:	e0aa      	b.n	8012d2e <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012be0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8012be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012bea:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012bf4:	2b02      	cmp	r3, #2
 8012bf6:	d12e      	bne.n	8012c56 <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012bf8:	68f8      	ldr	r0, [r7, #12]
 8012bfa:	f7f7 fb67 	bl	800a2cc <uxIPHeaderSizeSocket>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 8012c02:	33a0      	adds	r3, #160	@ 0xa0
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	4413      	add	r3, r2
 8012c08:	330a      	adds	r3, #10
 8012c0a:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c0e:	2210      	movs	r2, #16
 8012c10:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c14:	2210      	movs	r2, #16
 8012c16:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8012c2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012c2c:	f003 f8ec 	bl	8015e08 <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8012c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c32:	1c5a      	adds	r2, r3, #1
 8012c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c36:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8012c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c3a:	1c5a      	adds	r2, r3, #1
 8012c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c3e:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8012c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c42:	6a1b      	ldr	r3, [r3, #32]
 8012c44:	1c5a      	adds	r2, r3, #1
 8012c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c48:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 8012c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c4e:	1c5a      	adds	r2, r3, #1
 8012c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c52:	635a      	str	r2, [r3, #52]	@ 0x34
 8012c54:	e005      	b.n	8012c62 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d102      	bne.n	8012c62 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012c60:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c64:	69db      	ldr	r3, [r3, #28]
 8012c66:	1c5a      	adds	r2, r3, #1
 8012c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	7a1b      	ldrb	r3, [r3, #8]
 8012c70:	f003 0301 	and.w	r3, r3, #1
 8012c74:	b2db      	uxtb	r3, r3
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d001      	beq.n	8012c7e <prvHandleSynReceived+0x1ca>
 8012c7a:	200a      	movs	r0, #10
 8012c7c:	e000      	b.n	8012c80 <prvHandleSynReceived+0x1cc>
 8012c7e:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012c86:	f107 0210 	add.w	r2, r7, #16
 8012c8a:	2328      	movs	r3, #40	@ 0x28
 8012c8c:	f7fc fda2 	bl	800f7d4 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012c96:	2b02      	cmp	r3, #2
 8012c98:	d101      	bne.n	8012c9e <prvHandleSynReceived+0x1ea>
 8012c9a:	492a      	ldr	r1, [pc, #168]	@ (8012d44 <prvHandleSynReceived+0x290>)
 8012c9c:	e000      	b.n	8012ca0 <prvHandleSynReceived+0x1ec>
 8012c9e:	492a      	ldr	r1, [pc, #168]	@ (8012d48 <prvHandleSynReceived+0x294>)
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012ca4:	461c      	mov	r4, r3
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012cac:	461a      	mov	r2, r3
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012cb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8012cb8:	b2db      	uxtb	r3, r3
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f107 0310 	add.w	r3, r7, #16
 8012cc0:	9001      	str	r0, [sp, #4]
 8012cc2:	9200      	str	r2, [sp, #0]
 8012cc4:	4622      	mov	r2, r4
 8012cc6:	4821      	ldr	r0, [pc, #132]	@ (8012d4c <prvHandleSynReceived+0x298>)
 8012cc8:	f00f fcbc 	bl	8022644 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012cd2:	2b02      	cmp	r3, #2
 8012cd4:	d002      	beq.n	8012cdc <prvHandleSynReceived+0x228>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d014      	beq.n	8012d06 <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cde:	2210      	movs	r2, #16
 8012ce0:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012ce2:	68f8      	ldr	r0, [r7, #12]
 8012ce4:	f7f7 faf2 	bl	800a2cc <uxIPHeaderSizeSocket>
 8012ce8:	4602      	mov	r2, r0
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	4413      	add	r3, r2
 8012cee:	3314      	adds	r3, #20
 8012cf0:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	3314      	adds	r3, #20
 8012cfc:	b2db      	uxtb	r3, r3
 8012cfe:	009b      	lsls	r3, r3, #2
 8012d00:	b2da      	uxtb	r2, r3
 8012d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d04:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012d0c:	f003 0310 	and.w	r3, r3, #16
 8012d10:	b2db      	uxtb	r3, r3
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d107      	bne.n	8012d26 <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	2200      	movs	r2, #0
 8012d1a:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	2200      	movs	r2, #0
 8012d22:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 8012d26:	2105      	movs	r1, #5
 8012d28:	68f8      	ldr	r0, [r7, #12]
 8012d2a:	f7fe fc7f 	bl	801162c <vTCPStateChange>
        }

        return xSendLength;
 8012d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 8012d30:	4618      	mov	r0, r3
 8012d32:	3764      	adds	r7, #100	@ 0x64
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd90      	pop	{r4, r7, pc}
 8012d38:	08026974 	.word	0x08026974
 8012d3c:	08026984 	.word	0x08026984
 8012d40:	08026994 	.word	0x08026994
 8012d44:	080269b8 	.word	0x080269b8
 8012d48:	080269c0 	.word	0x080269c0
 8012d4c:	080269c8 	.word	0x080269c8

08012d50 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012d50:	b590      	push	{r4, r7, lr}
 8012d52:	b097      	sub	sp, #92	@ 0x5c
 8012d54:	af02      	add	r7, sp, #8
 8012d56:	60f8      	str	r0, [r7, #12]
 8012d58:	60b9      	str	r1, [r7, #8]
 8012d5a:	607a      	str	r2, [r7, #4]
 8012d5c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012d64:	68f8      	ldr	r0, [r7, #12]
 8012d66:	f7f7 fab1 	bl	800a2cc <uxIPHeaderSizeSocket>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012d6e:	4423      	add	r3, r4
 8012d70:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d74:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d80:	7b5b      	ldrb	r3, [r3, #13]
 8012d82:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 8012d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	061a      	lsls	r2, r3, #24
 8012d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d8e:	685b      	ldr	r3, [r3, #4]
 8012d90:	021b      	lsls	r3, r3, #8
 8012d92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012d96:	431a      	orrs	r2, r3
 8012d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d9a:	685b      	ldr	r3, [r3, #4]
 8012d9c:	0a1b      	lsrs	r3, r3, #8
 8012d9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012da2:	431a      	orrs	r2, r3
 8012da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012da6:	685b      	ldr	r3, [r3, #4]
 8012da8:	0e1b      	lsrs	r3, r3, #24
 8012daa:	4313      	orrs	r3, r2
 8012dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8012dae:	2300      	movs	r3, #0
 8012db0:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8012db2:	2300      	movs	r3, #0
 8012db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012db6:	2300      	movs	r3, #0
 8012db8:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8012dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012dc0:	89db      	ldrh	r3, [r3, #14]
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	021b      	lsls	r3, r3, #8
 8012dc6:	b21a      	sxth	r2, r3
 8012dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012dca:	89db      	ldrh	r3, [r3, #14]
 8012dcc:	b29b      	uxth	r3, r3
 8012dce:	0a1b      	lsrs	r3, r3, #8
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	b21b      	sxth	r3, r3
 8012dd4:	4313      	orrs	r3, r2
 8012dd6:	b21b      	sxth	r3, r3
 8012dd8:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8012dda:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8012de8:	68fa      	ldr	r2, [r7, #12]
 8012dea:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012dee:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 8012df8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012dfc:	f003 0310 	and.w	r3, r3, #16
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	f000 8106 	beq.w	8013012 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 8012e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e08:	689b      	ldr	r3, [r3, #8]
 8012e0a:	061a      	lsls	r2, r3, #24
 8012e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e0e:	689b      	ldr	r3, [r3, #8]
 8012e10:	021b      	lsls	r3, r3, #8
 8012e12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012e16:	431a      	orrs	r2, r3
 8012e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e1a:	689b      	ldr	r3, [r3, #8]
 8012e1c:	0a1b      	lsrs	r3, r3, #8
 8012e1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012e22:	431a      	orrs	r2, r3
 8012e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e26:	689b      	ldr	r3, [r3, #8]
 8012e28:	0e1b      	lsrs	r3, r3, #24
 8012e2a:	4313      	orrs	r3, r2
 8012e2c:	4619      	mov	r1, r3
 8012e2e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012e30:	f003 feee 	bl	8016c10 <ulTCPWindowTxAck>
 8012e34:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d02c      	beq.n	8012e9a <prvHandleEstablished+0x14a>
 8012e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d029      	beq.n	8012e9a <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e52:	2200      	movs	r2, #0
 8012e54:	2100      	movs	r1, #0
 8012e56:	f7fe fa42 	bl	80112de <uxStreamBufferGet>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d01c      	beq.n	8012e9a <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	f043 0202 	orr.w	r2, r3, #2
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e70:	f003 0302 	and.w	r3, r3, #2
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d005      	beq.n	8012e84 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d005      	beq.n	8012e9a <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012e94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012e96:	68f8      	ldr	r0, [r7, #12]
 8012e98:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d002      	beq.n	8012eaa <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 8012ea4:	68f8      	ldr	r0, [r7, #12]
 8012ea6:	f001 fb13 	bl	80144d0 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012eac:	6a1a      	ldr	r2, [r3, #32]
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012eba:	f003 0320 	and.w	r3, r3, #32
 8012ebe:	b2db      	uxtb	r3, r3
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d105      	bne.n	8012ed0 <prvHandleEstablished+0x180>
 8012ec4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012ec8:	f003 0301 	and.w	r3, r3, #1
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d06b      	beq.n	8012fa8 <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ede:	b2db      	uxtb	r3, r3
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d13a      	bne.n	8012f5a <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8012ee4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012ee6:	f002 fe87 	bl	8015bf8 <xTCPWindowRxEmpty>
 8012eea:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 8012eec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012eee:	f003 fafd 	bl	80164ec <xTCPWindowTxDone>
 8012ef2:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8012ef4:	6a3b      	ldr	r3, [r7, #32]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d002      	beq.n	8012f00 <prvHandleEstablished+0x1b0>
 8012efa:	69fb      	ldr	r3, [r7, #28]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d10f      	bne.n	8012f20 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012f04:	4619      	mov	r1, r3
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012f0c:	461a      	mov	r2, r3
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	9300      	str	r3, [sp, #0]
 8012f12:	6a3b      	ldr	r3, [r7, #32]
 8012f14:	4841      	ldr	r0, [pc, #260]	@ (801301c <prvHandleEstablished+0x2cc>)
 8012f16:	f00f fb95 	bl	8022644 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012f1e:	e01c      	b.n	8012f5a <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8012f20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	441a      	add	r2, r3
 8012f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f28:	691b      	ldr	r3, [r3, #16]
 8012f2a:	1ad3      	subs	r3, r2, r3
 8012f2c:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 8012f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f30:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 8012f32:	69bb      	ldr	r3, [r7, #24]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	dd10      	ble.n	8012f5a <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 8012f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f3a:	691a      	ldr	r2, [r3, #16]
 8012f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f3e:	68db      	ldr	r3, [r3, #12]
 8012f40:	1ad1      	subs	r1, r2, r3
 8012f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f44:	699a      	ldr	r2, [r3, #24]
 8012f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f48:	68db      	ldr	r3, [r3, #12]
 8012f4a:	1ad3      	subs	r3, r2, r3
 8012f4c:	460a      	mov	r2, r1
 8012f4e:	69b9      	ldr	r1, [r7, #24]
 8012f50:	4833      	ldr	r0, [pc, #204]	@ (8013020 <prvHandleEstablished+0x2d0>)
 8012f52:	f00f fb77 	bl	8022644 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 8012f56:	2300      	movs	r3, #0
 8012f58:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 8012f5a:	4b32      	ldr	r3, [pc, #200]	@ (8013024 <prvHandleEstablished+0x2d4>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	dd11      	ble.n	8012f86 <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8012f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012f6a:	1ad1      	subs	r1, r2, r3
 8012f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f6e:	6a1a      	ldr	r2, [r3, #32]
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8012f76:	1ad3      	subs	r3, r2, r3
 8012f78:	9300      	str	r3, [sp, #0]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	460a      	mov	r2, r1
 8012f7e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012f80:	4829      	ldr	r0, [pc, #164]	@ (8013028 <prvHandleEstablished+0x2d8>)
 8012f82:	f00f fb5f 	bl	8022644 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 8012f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d00d      	beq.n	8012fa8 <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 8012f8c:	68fa      	ldr	r2, [r7, #12]
 8012f8e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012f92:	f043 0320 	orr.w	r3, r3, #32
 8012f96:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	4619      	mov	r1, r3
 8012fa0:	68f8      	ldr	r0, [r7, #12]
 8012fa2:	f7ff fca9 	bl	80128f8 <prvTCPHandleFin>
 8012fa6:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 8012fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d131      	bne.n	8013012 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012fb0:	2210      	movs	r2, #16
 8012fb2:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d01d      	beq.n	8012ff6 <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012fba:	68f8      	ldr	r0, [r7, #12]
 8012fbc:	f7f7 f986 	bl	800a2cc <uxIPHeaderSizeSocket>
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	4413      	add	r3, r2
 8012fc6:	3314      	adds	r3, #20
 8012fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	b2db      	uxtb	r3, r3
 8012fd2:	3314      	adds	r3, #20
 8012fd4:	b2db      	uxtb	r3, r3
 8012fd6:	009b      	lsls	r3, r3, #2
 8012fd8:	b2da      	uxtb	r2, r3
 8012fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012fdc:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012fe8:	b2db      	uxtb	r3, r3
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d003      	beq.n	8012ff6 <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8012fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ff4:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d10a      	bne.n	8013012 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012ffc:	683a      	ldr	r2, [r7, #0]
 8012ffe:	68b9      	ldr	r1, [r7, #8]
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	f001 f8a1 	bl	8014148 <prvTCPPrepareSend>
 8013006:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 8013008:	697b      	ldr	r3, [r7, #20]
 801300a:	2b00      	cmp	r3, #0
 801300c:	dd01      	ble.n	8013012 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8013012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013014:	4618      	mov	r0, r3
 8013016:	3754      	adds	r7, #84	@ 0x54
 8013018:	46bd      	mov	sp, r7
 801301a:	bd90      	pop	{r4, r7, pc}
 801301c:	080269fc 	.word	0x080269fc
 8013020:	08026a28 	.word	0x08026a28
 8013024:	2000164c 	.word	0x2000164c
 8013028:	08026a5c 	.word	0x08026a5c

0801302c <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 801302c:	b590      	push	{r4, r7, lr}
 801302e:	b08f      	sub	sp, #60	@ 0x3c
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
 8013034:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	4618      	mov	r0, r3
 8013042:	f7f7 f929 	bl	800a298 <uxIPHeaderSizePacket>
 8013046:	4603      	mov	r3, r0
 8013048:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801304a:	4423      	add	r3, r4
 801304c:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013050:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 8013052:	2300      	movs	r3, #0
 8013054:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8013056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	061a      	lsls	r2, r3, #24
 801305c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801305e:	685b      	ldr	r3, [r3, #4]
 8013060:	021b      	lsls	r3, r3, #8
 8013062:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013066:	431a      	orrs	r2, r3
 8013068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	0a1b      	lsrs	r3, r3, #8
 801306e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013072:	431a      	orrs	r2, r3
 8013074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	0e1b      	lsrs	r3, r3, #24
 801307a:	4313      	orrs	r3, r2
 801307c:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 801307e:	2300      	movs	r3, #0
 8013080:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8013082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013084:	7b5b      	ldrb	r3, [r3, #13]
 8013086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013090:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 8013092:	2300      	movs	r3, #0
 8013094:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	f107 0208 	add.w	r2, r7, #8
 801309e:	4611      	mov	r1, r2
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7ff fa64 	bl	801256e <prvCheckRxData>
 80130a6:	4603      	mov	r3, r0
 80130a8:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80130b0:	2b04      	cmp	r3, #4
 80130b2:	d90c      	bls.n	80130ce <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 80130b4:	69fb      	ldr	r3, [r7, #28]
 80130b6:	691a      	ldr	r2, [r3, #16]
 80130b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130ba:	3301      	adds	r3, #1
 80130bc:	429a      	cmp	r2, r3
 80130be:	d106      	bne.n	80130ce <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80130c0:	687a      	ldr	r2, [r7, #4]
 80130c2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80130c6:	f043 0301 	orr.w	r3, r3, #1
 80130ca:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 80130ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	441a      	add	r2, r3
 80130d4:	69fb      	ldr	r3, [r7, #28]
 80130d6:	699b      	ldr	r3, [r3, #24]
 80130d8:	1ad3      	subs	r3, r2, r3
 80130da:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	dd04      	ble.n	80130ec <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 80130e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	441a      	add	r2, r3
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 80130ec:	68b9      	ldr	r1, [r7, #8]
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	681a      	ldr	r2, [r3, #0]
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f7ff fae3 	bl	80126c0 <prvStoreRxData>
 80130fa:	4603      	mov	r3, r0
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	da03      	bge.n	8013108 <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8013100:	f04f 33ff 	mov.w	r3, #4294967295
 8013104:	637b      	str	r3, [r7, #52]	@ 0x34
 8013106:	e0ae      	b.n	8013266 <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4619      	mov	r1, r3
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f001 fa0c 	bl	801452c <prvSetOptions>
 8013114:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801311c:	2b04      	cmp	r3, #4
 801311e:	d10c      	bne.n	801313a <prvTCPHandleState+0x10e>
 8013120:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013124:	f003 031f 	and.w	r3, r3, #31
 8013128:	2b02      	cmp	r3, #2
 801312a:	d106      	bne.n	801313a <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 801312c:	4855      	ldr	r0, [pc, #340]	@ (8013284 <prvTCPHandleState+0x258>)
 801312e:	f00f fa89 	bl	8022644 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 8013132:	2103      	movs	r1, #3
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f7fe fa79 	bl	801162c <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 801313a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801313e:	f003 0301 	and.w	r3, r3, #1
 8013142:	2b00      	cmp	r3, #0
 8013144:	d022      	beq.n	801318c <prvTCPHandleState+0x160>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801314c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013150:	b2db      	uxtb	r3, r3
 8013152:	2b00      	cmp	r3, #0
 8013154:	d11a      	bne.n	801318c <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8013156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	441a      	add	r2, r3
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8013160:	687a      	ldr	r2, [r7, #4]
 8013162:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801316a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013178:	b2db      	uxtb	r3, r3
 801317a:	2b00      	cmp	r3, #0
 801317c:	d106      	bne.n	801318c <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8013184:	f043 0302 	orr.w	r3, r3, #2
 8013188:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013192:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 8013194:	7bfb      	ldrb	r3, [r7, #15]
 8013196:	2b0b      	cmp	r3, #11
 8013198:	d864      	bhi.n	8013264 <prvTCPHandleState+0x238>
 801319a:	a201      	add	r2, pc, #4	@ (adr r2, 80131a0 <prvTCPHandleState+0x174>)
 801319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a0:	08013265 	.word	0x08013265
 80131a4:	08013265 	.word	0x08013265
 80131a8:	08013233 	.word	0x08013233
 80131ac:	080131d1 	.word	0x080131d1
 80131b0:	08013233 	.word	0x08013233
 80131b4:	08013245 	.word	0x08013245
 80131b8:	08013255 	.word	0x08013255
 80131bc:	08013255 	.word	0x08013255
 80131c0:	08013265 	.word	0x08013265
 80131c4:	08013265 	.word	0x08013265
 80131c8:	08013255 	.word	0x08013255
 80131cc:	08013265 	.word	0x08013265
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 80131d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f000 fe4e 	bl	8013e74 <prvSetSynAckOptions>
 80131d8:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 80131da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131dc:	2212      	movs	r2, #18
 80131de:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	f7f7 f873 	bl	800a2cc <uxIPHeaderSizeSocket>
 80131e6:	4602      	mov	r2, r0
 80131e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ea:	4413      	add	r3, r2
 80131ec:	3314      	adds	r3, #20
 80131ee:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 80131f0:	69bb      	ldr	r3, [r7, #24]
 80131f2:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80131f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131f6:	b2db      	uxtb	r3, r3
 80131f8:	3314      	adds	r3, #20
 80131fa:	b2db      	uxtb	r3, r3
 80131fc:	009b      	lsls	r3, r3, #2
 80131fe:	b2da      	uxtb	r2, r3
 8013200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013202:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8013204:	2104      	movs	r1, #4
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7fe fa10 	bl	801162c <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 801320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801320e:	1c5a      	adds	r2, r3, #1
 8013210:	69fb      	ldr	r3, [r7, #28]
 8013212:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8013214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013216:	1c5a      	adds	r2, r3, #1
 8013218:	69fb      	ldr	r3, [r7, #28]
 801321a:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 801321c:	69fb      	ldr	r3, [r7, #28]
 801321e:	69db      	ldr	r3, [r3, #28]
 8013220:	1c5a      	adds	r2, r3, #1
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 8013226:	69fb      	ldr	r3, [r7, #28]
 8013228:	69db      	ldr	r3, [r3, #28]
 801322a:	1c5a      	adds	r2, r3, #1
 801322c:	69fb      	ldr	r3, [r7, #28]
 801322e:	621a      	str	r2, [r3, #32]
                    break;
 8013230:	e019      	b.n	8013266 <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	6819      	ldr	r1, [r3, #0]
 8013236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013238:	697a      	ldr	r2, [r7, #20]
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7ff fc3a 	bl	8012ab4 <prvHandleSynReceived>
 8013240:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8013242:	e010      	b.n	8013266 <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 8013244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013246:	697a      	ldr	r2, [r7, #20]
 8013248:	6839      	ldr	r1, [r7, #0]
 801324a:	6878      	ldr	r0, [r7, #4]
 801324c:	f7ff fd80 	bl	8012d50 <prvHandleEstablished>
 8013250:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8013252:	e008      	b.n	8013266 <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	4619      	mov	r1, r3
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f7ff fb4c 	bl	80128f8 <prvTCPHandleFin>
 8013260:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8013262:	e000      	b.n	8013266 <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 8013264:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 8013266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013268:	2b00      	cmp	r3, #0
 801326a:	dd06      	ble.n	801327a <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 801326c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801326e:	697a      	ldr	r2, [r7, #20]
 8013270:	6839      	ldr	r1, [r7, #0]
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f001 fa1a 	bl	80146ac <prvSendData>
 8013278:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 801327a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801327c:	4618      	mov	r0, r3
 801327e:	373c      	adds	r7, #60	@ 0x3c
 8013280:	46bd      	mov	sp, r7
 8013282:	bd90      	pop	{r4, r7, pc}
 8013284:	08026a94 	.word	0x08026a94

08013288 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013288:	b580      	push	{r7, lr}
 801328a:	b084      	sub	sp, #16
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 8013292:	2300      	movs	r3, #0
 8013294:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8013296:	6838      	ldr	r0, [r7, #0]
 8013298:	f7f6 fffe 	bl	800a298 <uxIPHeaderSizePacket>
 801329c:	4603      	mov	r3, r0
 801329e:	2b14      	cmp	r3, #20
 80132a0:	d002      	beq.n	80132a8 <prvHandleListen+0x20>
 80132a2:	2b28      	cmp	r3, #40	@ 0x28
 80132a4:	d006      	beq.n	80132b4 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 80132a6:	e00b      	b.n	80132c0 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 80132a8:	6839      	ldr	r1, [r7, #0]
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f000 f8ee 	bl	801348c <prvHandleListen_IPV4>
 80132b0:	60f8      	str	r0, [r7, #12]
                    break;
 80132b2:	e005      	b.n	80132c0 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 80132b4:	6839      	ldr	r1, [r7, #0]
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f000 fa10 	bl	80136dc <prvHandleListen_IPV6>
 80132bc:	60f8      	str	r0, [r7, #12]
                    break;
 80132be:	bf00      	nop
        }

        return pxNewSocket;
 80132c0:	68fb      	ldr	r3, [r7, #12]
    }
 80132c2:	4618      	mov	r0, r3
 80132c4:	3710      	adds	r7, #16
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
	...

080132cc <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 80132cc:	b590      	push	{r4, r7, lr}
 80132ce:	b08f      	sub	sp, #60	@ 0x3c
 80132d0:	af04      	add	r7, sp, #16
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	6a1a      	ldr	r2, [r3, #32]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801336a:	2b00      	cmp	r3, #0
 801336c:	d009      	beq.n	8013382 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801337a:	f043 0205 	orr.w	r2, r3, #5
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 8013382:	f107 030c 	add.w	r3, r7, #12
 8013386:	4619      	mov	r1, r3
 8013388:	6838      	ldr	r0, [r7, #0]
 801338a:	f7fc fa47 	bl	800f81c <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013394:	f043 0304 	orr.w	r3, r3, #4
 8013398:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	683a      	ldr	r2, [r7, #0]
 80133a0:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80133a8:	3301      	adds	r3, #1
 80133aa:	b29a      	uxth	r2, r3
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d102      	bne.n	80133c0 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	687a      	ldr	r2, [r7, #4]
 80133be:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80133c4:	4619      	mov	r1, r3
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80133cc:	4618      	mov	r0, r3
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80133d4:	461c      	mov	r4, r3
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80133dc:	2b01      	cmp	r3, #1
 80133de:	d101      	bne.n	80133e4 <prvTCPSocketCopy+0x118>
 80133e0:	4a17      	ldr	r2, [pc, #92]	@ (8013440 <prvTCPSocketCopy+0x174>)
 80133e2:	e000      	b.n	80133e6 <prvTCPSocketCopy+0x11a>
 80133e4:	4a17      	ldr	r2, [pc, #92]	@ (8013444 <prvTCPSocketCopy+0x178>)
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d002      	beq.n	80133f2 <prvTCPSocketCopy+0x126>
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80133f0:	e000      	b.n	80133f4 <prvTCPSocketCopy+0x128>
 80133f2:	2300      	movs	r3, #0
 80133f4:	9303      	str	r3, [sp, #12]
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	9302      	str	r3, [sp, #8]
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	9301      	str	r3, [sp, #4]
 80133fe:	9200      	str	r2, [sp, #0]
 8013400:	4623      	mov	r3, r4
 8013402:	4602      	mov	r2, r0
 8013404:	4810      	ldr	r0, [pc, #64]	@ (8013448 <prvTCPSocketCopy+0x17c>)
 8013406:	f00f f91d 	bl	8022644 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 801340a:	f107 010c 	add.w	r1, r7, #12
 801340e:	2301      	movs	r3, #1
 8013410:	2218      	movs	r2, #24
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f7fb fbae 	bl	800eb74 <vSocketBind>
 8013418:	4603      	mov	r3, r0
 801341a:	2b00      	cmp	r3, #0
 801341c:	d008      	beq.n	8013430 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 801341e:	480b      	ldr	r0, [pc, #44]	@ (801344c <prvTCPSocketCopy+0x180>)
 8013420:	f00f f910 	bl	8022644 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f7fb fc59 	bl	800ecdc <vSocketClose>
            xResult = pdFALSE;
 801342a:	2300      	movs	r3, #0
 801342c:	627b      	str	r3, [r7, #36]	@ 0x24
 801342e:	e001      	b.n	8013434 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 8013430:	2301      	movs	r3, #1
 8013432:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8013434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8013436:	4618      	mov	r0, r3
 8013438:	372c      	adds	r7, #44	@ 0x2c
 801343a:	46bd      	mov	sp, r7
 801343c:	bd90      	pop	{r4, r7, pc}
 801343e:	bf00      	nop
 8013440:	08026ad4 	.word	0x08026ad4
 8013444:	08026ad8 	.word	0x08026ad8
 8013448:	08026adc 	.word	0x08026adc
 801344c:	08026b20 	.word	0x08026b20

08013450 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 8013450:	b480      	push	{r7}
 8013452:	b085      	sub	sp, #20
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2b00      	cmp	r3, #0
 8013460:	db02      	blt.n	8013468 <FreeRTOS_GetTCPStateName+0x18>
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	2b0c      	cmp	r3, #12
 8013466:	dd04      	ble.n	8013472 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 8013468:	230d      	movs	r3, #13
 801346a:	60fb      	str	r3, [r7, #12]
                xIndex--;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	3b01      	subs	r3, #1
 8013470:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 8013472:	4a05      	ldr	r2, [pc, #20]	@ (8013488 <FreeRTOS_GetTCPStateName+0x38>)
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 801347a:	4618      	mov	r0, r3
 801347c:	3714      	adds	r7, #20
 801347e:	46bd      	mov	sp, r7
 8013480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013484:	4770      	bx	lr
 8013486:	bf00      	nop
 8013488:	08027df4 	.word	0x08027df4

0801348c <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 801348c:	b590      	push	{r4, r7, lr}
 801348e:	b08f      	sub	sp, #60	@ 0x3c
 8013490:	af02      	add	r7, sp, #8
 8013492:	6078      	str	r0, [r7, #4]
 8013494:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 8013496:	2300      	movs	r3, #0
 8013498:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 801349a:	2300      	movs	r3, #0
 801349c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 801349e:	2300      	movs	r3, #0
 80134a0:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 80134a2:	2300      	movs	r3, #0
 80134a4:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 80134a6:	2300      	movs	r3, #0
 80134a8:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d008      	beq.n	80134c2 <prvHandleListen_IPV4+0x36>
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d005      	beq.n	80134c2 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134c0:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 80134c2:	6a3b      	ldr	r3, [r7, #32]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d015      	beq.n	80134f4 <prvHandleListen_IPV4+0x68>
 80134c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ca:	f8d3 201e 	ldr.w	r2, [r3, #30]
 80134ce:	6a3b      	ldr	r3, [r7, #32]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d10e      	bne.n	80134f4 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 80134d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134d8:	f8d3 001e 	ldr.w	r0, [r3, #30]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 80134e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e2:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 80134e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80134ea:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 80134ec:	f7ee fa66 	bl	80019bc <ulApplicationGetNextSequenceNumber>
 80134f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80134f2:	e001      	b.n	80134f8 <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 80134f4:	2300      	movs	r3, #0
 80134f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 80134f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d059      	beq.n	80135b2 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013504:	f003 0308 	and.w	r3, r3, #8
 8013508:	b2db      	uxtb	r3, r3
 801350a:	2b00      	cmp	r3, #0
 801350c:	d00c      	beq.n	8013528 <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8013512:	687a      	ldr	r2, [r7, #4]
 8013514:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013518:	f043 0304 	orr.w	r3, r3, #4
 801351c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	687a      	ldr	r2, [r7, #4]
 8013524:	67da      	str	r2, [r3, #124]	@ 0x7c
 8013526:	e044      	b.n	80135b2 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 8013528:	2300      	movs	r3, #0
 801352a:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013538:	429a      	cmp	r2, r3
 801353a:	d31b      	bcc.n	8013574 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013540:	4619      	mov	r1, r3
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8013548:	461a      	mov	r2, r3
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013550:	4618      	mov	r0, r3
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8013558:	2b01      	cmp	r3, #1
 801355a:	d101      	bne.n	8013560 <prvHandleListen_IPV4+0xd4>
 801355c:	4b5b      	ldr	r3, [pc, #364]	@ (80136cc <prvHandleListen_IPV4+0x240>)
 801355e:	e000      	b.n	8013562 <prvHandleListen_IPV4+0xd6>
 8013560:	4b5b      	ldr	r3, [pc, #364]	@ (80136d0 <prvHandleListen_IPV4+0x244>)
 8013562:	9300      	str	r3, [sp, #0]
 8013564:	4603      	mov	r3, r0
 8013566:	485b      	ldr	r0, [pc, #364]	@ (80136d4 <prvHandleListen_IPV4+0x248>)
 8013568:	f00f f86c 	bl	8022644 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 801356c:	6838      	ldr	r0, [r7, #0]
 801356e:	f001 f9d1 	bl	8014914 <prvTCPSendReset>
 8013572:	e01e      	b.n	80135b2 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8013574:	2206      	movs	r2, #6
 8013576:	2101      	movs	r1, #1
 8013578:	2002      	movs	r0, #2
 801357a:	f7fa ffa1 	bl	800e4c0 <FreeRTOS_socket>
 801357e:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d003      	beq.n	801358e <prvHandleListen_IPV4+0x102>
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	f1b3 3fff 	cmp.w	r3, #4294967295
 801358c:	d106      	bne.n	801359c <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 801358e:	4852      	ldr	r0, [pc, #328]	@ (80136d8 <prvHandleListen_IPV4+0x24c>)
 8013590:	f00f f858 	bl	8022644 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8013594:	6838      	ldr	r0, [r7, #0]
 8013596:	f001 f9bd 	bl	8014914 <prvTCPSendReset>
 801359a:	e00a      	b.n	80135b2 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 801359c:	6879      	ldr	r1, [r7, #4]
 801359e:	6978      	ldr	r0, [r7, #20]
 80135a0:	f7ff fe94 	bl	80132cc <prvTCPSocketCopy>
 80135a4:	4603      	mov	r3, r0
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d003      	beq.n	80135b2 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 80135ae:	2301      	movs	r3, #1
 80135b0:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 80135b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	f000 8083 	beq.w	80136c0 <prvHandleListen_IPV4+0x234>
 80135ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d07f      	beq.n	80136c0 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80135c4:	6838      	ldr	r0, [r7, #0]
 80135c6:	f7f6 fe67 	bl	800a298 <uxIPHeaderSizePacket>
 80135ca:	4603      	mov	r3, r0
 80135cc:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80135ce:	4423      	add	r3, r4
 80135d0:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80135d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135d8:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 80135da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80135dc:	7a13      	ldrb	r3, [r2, #8]
 80135de:	f36f 0300 	bfc	r3, #0, #1
 80135e2:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 80135e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135e6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	021b      	lsls	r3, r3, #8
 80135ec:	b21a      	sxth	r2, r3
 80135ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135f0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80135f2:	b29b      	uxth	r3, r3
 80135f4:	0a1b      	lsrs	r3, r3, #8
 80135f6:	b29b      	uxth	r3, r3
 80135f8:	b21b      	sxth	r3, r3
 80135fa:	4313      	orrs	r3, r2
 80135fc:	b21b      	sxth	r3, r3
 80135fe:	b29a      	uxth	r2, r3
 8013600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013602:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8013606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013608:	f8d3 301a 	ldr.w	r3, [r3, #26]
 801360c:	061a      	lsls	r2, r3, #24
 801360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013610:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013614:	021b      	lsls	r3, r3, #8
 8013616:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801361a:	431a      	orrs	r2, r3
 801361c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801361e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013622:	0a1b      	lsrs	r3, r3, #8
 8013624:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013628:	431a      	orrs	r2, r3
 801362a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801362c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013630:	0e1b      	lsrs	r3, r3, #24
 8013632:	431a      	orrs	r2, r3
 8013634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013636:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8013638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801363a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801363c:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	685b      	ldr	r3, [r3, #4]
 8013644:	061a      	lsls	r2, r3, #24
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	685b      	ldr	r3, [r3, #4]
 801364a:	021b      	lsls	r3, r3, #8
 801364c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013650:	431a      	orrs	r2, r3
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	0a1b      	lsrs	r3, r3, #8
 8013658:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801365c:	431a      	orrs	r2, r3
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	0e1b      	lsrs	r3, r3, #24
 8013664:	431a      	orrs	r2, r3
 8013666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013668:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 801366c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801366e:	f002 f877 	bl	8015760 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8013672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013674:	f000 fb66 	bl	8013d44 <prvTCPCreateWindow>
 8013678:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	2b01      	cmp	r3, #1
 801367e:	d008      	beq.n	8013692 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	2b01      	cmp	r3, #1
 8013684:	d102      	bne.n	801368c <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 8013686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013688:	f7fb fb28 	bl	800ecdc <vSocketClose>
                }

                pxReturn = NULL;
 801368c:	2300      	movs	r3, #0
 801368e:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8013690:	e016      	b.n	80136c0 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8013692:	2103      	movs	r1, #3
 8013694:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013696:	f7fd ffc9 	bl	801162c <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801369e:	2b5a      	cmp	r3, #90	@ 0x5a
 80136a0:	d902      	bls.n	80136a8 <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 80136a2:	235a      	movs	r3, #90	@ 0x5a
 80136a4:	61bb      	str	r3, [r7, #24]
 80136a6:	e002      	b.n	80136ae <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136ac:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80136ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136b0:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80136b8:	69ba      	ldr	r2, [r7, #24]
 80136ba:	4619      	mov	r1, r3
 80136bc:	f00f f9de 	bl	8022a7c <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 80136c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3734      	adds	r7, #52	@ 0x34
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd90      	pop	{r4, r7, pc}
 80136ca:	bf00      	nop
 80136cc:	08026bc8 	.word	0x08026bc8
 80136d0:	08026bcc 	.word	0x08026bcc
 80136d4:	08026bd0 	.word	0x08026bd0
 80136d8:	08026c00 	.word	0x08026c00

080136dc <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80136dc:	b590      	push	{r4, r7, lr}
 80136de:	b08f      	sub	sp, #60	@ 0x3c
 80136e0:	af02      	add	r7, sp, #8
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80136e6:	2300      	movs	r3, #0
 80136e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 80136ea:	2300      	movs	r3, #0
 80136ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 80136ee:	2300      	movs	r3, #0
 80136f0:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 80136f2:	2300      	movs	r3, #0
 80136f4:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 80136f6:	2300      	movs	r3, #0
 80136f8:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d024      	beq.n	801374a <prvHandleListen_IPV6+0x6e>
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d021      	beq.n	801374a <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801370a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013710:	2b00      	cmp	r3, #0
 8013712:	d103      	bne.n	801371c <prvHandleListen_IPV6+0x40>
 8013714:	215d      	movs	r1, #93	@ 0x5d
 8013716:	487b      	ldr	r0, [pc, #492]	@ (8013904 <prvHandleListen_IPV6+0x228>)
 8013718:	f7ee f930 	bl	800197c <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 801371c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801371e:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013726:	3338      	adds	r3, #56	@ 0x38
 8013728:	2210      	movs	r2, #16
 801372a:	4619      	mov	r1, r3
 801372c:	f010 f93b 	bl	80239a6 <memcmp>
 8013730:	4603      	mov	r3, r0
 8013732:	2b00      	cmp	r3, #0
 8013734:	d109      	bne.n	801374a <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 8013736:	f107 0308 	add.w	r3, r7, #8
 801373a:	4618      	mov	r0, r3
 801373c:	f7ee f9e8 	bl	8001b10 <xApplicationGetRandomNumber>
 8013740:	4603      	mov	r3, r0
 8013742:	2b01      	cmp	r3, #1
 8013744:	d101      	bne.n	801374a <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 8013746:	2301      	movs	r3, #1
 8013748:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 801374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801374c:	2b00      	cmp	r3, #0
 801374e:	d059      	beq.n	8013804 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013756:	f003 0308 	and.w	r3, r3, #8
 801375a:	b2db      	uxtb	r3, r3
 801375c:	2b00      	cmp	r3, #0
 801375e:	d00c      	beq.n	801377a <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801376a:	f043 0304 	orr.w	r3, r3, #4
 801376e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	67da      	str	r2, [r3, #124]	@ 0x7c
 8013778:	e044      	b.n	8013804 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 801377a:	2300      	movs	r3, #0
 801377c:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801378a:	429a      	cmp	r2, r3
 801378c:	d31b      	bcc.n	80137c6 <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013792:	4619      	mov	r1, r3
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801379a:	461a      	mov	r2, r3
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80137a2:	4618      	mov	r0, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d101      	bne.n	80137b2 <prvHandleListen_IPV6+0xd6>
 80137ae:	4b56      	ldr	r3, [pc, #344]	@ (8013908 <prvHandleListen_IPV6+0x22c>)
 80137b0:	e000      	b.n	80137b4 <prvHandleListen_IPV6+0xd8>
 80137b2:	4b56      	ldr	r3, [pc, #344]	@ (801390c <prvHandleListen_IPV6+0x230>)
 80137b4:	9300      	str	r3, [sp, #0]
 80137b6:	4603      	mov	r3, r0
 80137b8:	4855      	ldr	r0, [pc, #340]	@ (8013910 <prvHandleListen_IPV6+0x234>)
 80137ba:	f00e ff43 	bl	8022644 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 80137be:	6838      	ldr	r0, [r7, #0]
 80137c0:	f001 f8a8 	bl	8014914 <prvTCPSendReset>
 80137c4:	e01e      	b.n	8013804 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80137c6:	2206      	movs	r2, #6
 80137c8:	2101      	movs	r1, #1
 80137ca:	200a      	movs	r0, #10
 80137cc:	f7fa fe78 	bl	800e4c0 <FreeRTOS_socket>
 80137d0:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d003      	beq.n	80137e0 <prvHandleListen_IPV6+0x104>
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137de:	d106      	bne.n	80137ee <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 80137e0:	484c      	ldr	r0, [pc, #304]	@ (8013914 <prvHandleListen_IPV6+0x238>)
 80137e2:	f00e ff2f 	bl	8022644 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80137e6:	6838      	ldr	r0, [r7, #0]
 80137e8:	f001 f894 	bl	8014914 <prvTCPSendReset>
 80137ec:	e00a      	b.n	8013804 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80137ee:	6879      	ldr	r1, [r7, #4]
 80137f0:	69b8      	ldr	r0, [r7, #24]
 80137f2:	f7ff fd6b 	bl	80132cc <prvTCPSocketCopy>
 80137f6:	4603      	mov	r3, r0
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d003      	beq.n	8013804 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 80137fc:	69bb      	ldr	r3, [r7, #24]
 80137fe:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8013800:	2301      	movs	r3, #1
 8013802:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 8013804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013806:	2b00      	cmp	r3, #0
 8013808:	d076      	beq.n	80138f8 <prvHandleListen_IPV6+0x21c>
 801380a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801380c:	2b00      	cmp	r3, #0
 801380e:	d073      	beq.n	80138f8 <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013814:	6838      	ldr	r0, [r7, #0]
 8013816:	f7f6 fd3f 	bl	800a298 <uxIPHeaderSizePacket>
 801381a:	4603      	mov	r3, r0
 801381c:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 801381e:	4423      	add	r3, r4
 8013820:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013828:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 801382a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801382c:	7a13      	ldrb	r3, [r2, #8]
 801382e:	f043 0301 	orr.w	r3, r3, #1
 8013832:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013838:	330e      	adds	r3, #14
 801383a:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 801383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801383e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013840:	b29b      	uxth	r3, r3
 8013842:	021b      	lsls	r3, r3, #8
 8013844:	b21a      	sxth	r2, r3
 8013846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801384a:	b29b      	uxth	r3, r3
 801384c:	0a1b      	lsrs	r3, r3, #8
 801384e:	b29b      	uxth	r3, r3
 8013850:	b21b      	sxth	r3, r3
 8013852:	4313      	orrs	r3, r2
 8013854:	b21b      	sxth	r3, r3
 8013856:	b29a      	uxth	r2, r3
 8013858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801385a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801385e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013860:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	3308      	adds	r3, #8
 8013868:	2210      	movs	r2, #16
 801386a:	4619      	mov	r1, r3
 801386c:	f00f f906 	bl	8022a7c <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8013870:	68ba      	ldr	r2, [r7, #8]
 8013872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013874:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	061a      	lsls	r2, r3, #24
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	021b      	lsls	r3, r3, #8
 8013884:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013888:	431a      	orrs	r2, r3
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	0a1b      	lsrs	r3, r3, #8
 8013890:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013894:	431a      	orrs	r2, r3
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	685b      	ldr	r3, [r3, #4]
 801389a:	0e1b      	lsrs	r3, r3, #24
 801389c:	431a      	orrs	r2, r3
 801389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138a0:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 80138a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138a6:	f001 ff5b 	bl	8015760 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 80138aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138ac:	f000 fa4a 	bl	8013d44 <prvTCPCreateWindow>
 80138b0:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	2b01      	cmp	r3, #1
 80138b6:	d008      	beq.n	80138ca <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 80138b8:	6a3b      	ldr	r3, [r7, #32]
 80138ba:	2b01      	cmp	r3, #1
 80138bc:	d102      	bne.n	80138c4 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 80138be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138c0:	f7fb fa0c 	bl	800ecdc <vSocketClose>
                }

                pxReturn = NULL;
 80138c4:	2300      	movs	r3, #0
 80138c6:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 80138c8:	e016      	b.n	80138f8 <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 80138ca:	2103      	movs	r1, #3
 80138cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138ce:	f7fd fead 	bl	801162c <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80138d6:	2b5a      	cmp	r3, #90	@ 0x5a
 80138d8:	d902      	bls.n	80138e0 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 80138da:	235a      	movs	r3, #90	@ 0x5a
 80138dc:	61fb      	str	r3, [r7, #28]
 80138de:	e002      	b.n	80138e6 <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80138e4:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80138e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e8:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80138f0:	69fa      	ldr	r2, [r7, #28]
 80138f2:	4619      	mov	r1, r3
 80138f4:	f00f f8c2 	bl	8022a7c <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 80138f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3734      	adds	r7, #52	@ 0x34
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd90      	pop	{r4, r7, pc}
 8013902:	bf00      	nop
 8013904:	08026c20 	.word	0x08026c20
 8013908:	08026c60 	.word	0x08026c60
 801390c:	08026c64 	.word	0x08026c64
 8013910:	08026c68 	.word	0x08026c68
 8013914:	08026c98 	.word	0x08026c98

08013918 <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 8013918:	b580      	push	{r7, lr}
 801391a:	b084      	sub	sp, #16
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013920:	2301      	movs	r3, #1
 8013922:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801392a:	f003 0308 	and.w	r3, r3, #8
 801392e:	b2db      	uxtb	r3, r3
 8013930:	2b00      	cmp	r3, #0
 8013932:	d107      	bne.n	8013944 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8013934:	6878      	ldr	r0, [r7, #4]
 8013936:	f000 fa51 	bl	8013ddc <prvTCPPrepareConnect>
 801393a:	4603      	mov	r3, r0
 801393c:	2b01      	cmp	r3, #1
 801393e:	d001      	beq.n	8013944 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8013940:	2300      	movs	r3, #0
 8013942:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8013944:	68fb      	ldr	r3, [r7, #12]
    }
 8013946:	4618      	mov	r0, r3
 8013948:	3710      	adds	r7, #16
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
	...

08013950 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8013950:	b580      	push	{r7, lr}
 8013952:	b088      	sub	sp, #32
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 8013958:	2300      	movs	r3, #0
 801395a:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 801395c:	2300      	movs	r3, #0
 801395e:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013966:	2b02      	cmp	r3, #2
 8013968:	d010      	beq.n	801398c <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 801396a:	2300      	movs	r3, #0
 801396c:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 801396e:	f107 030c 	add.w	r3, r7, #12
 8013972:	4619      	mov	r1, r3
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f000 f859 	bl	8013a2c <prvTCPSendRepeated>
 801397a:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d04d      	beq.n	8013a1e <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	4618      	mov	r0, r3
 8013986:	f003 ffb5 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
 801398a:	e048      	b.n	8013a1e <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013992:	2b02      	cmp	r3, #2
 8013994:	d90d      	bls.n	80139b2 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80139a0:	461a      	mov	r2, r3
 80139a2:	4821      	ldr	r0, [pc, #132]	@ (8013a28 <prvTCPSendPacket+0xd8>)
 80139a4:	f00e fe4e 	bl	8022644 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80139a8:	2108      	movs	r1, #8
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f7fd fe3e 	bl	801162c <vTCPStateChange>
 80139b0:	e035      	b.n	8013a1e <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	f7ff ffb0 	bl	8013918 <prvTCPMakeSurePrepared>
 80139b8:	4603      	mov	r3, r0
 80139ba:	2b01      	cmp	r3, #1
 80139bc:	d12f      	bne.n	8013a1e <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f7f6 fc84 	bl	800a2cc <uxIPHeaderSizeSocket>
 80139c4:	4603      	mov	r3, r0
 80139c6:	330e      	adds	r3, #14
 80139c8:	33a0      	adds	r3, #160	@ 0xa0
 80139ca:	687a      	ldr	r2, [r7, #4]
 80139cc:	4413      	add	r3, r2
 80139ce:	330a      	adds	r3, #10
 80139d0:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	4619      	mov	r1, r3
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	f000 fa4c 	bl	8013e74 <prvSetSynAckOptions>
 80139dc:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f7f6 fc74 	bl	800a2cc <uxIPHeaderSizeSocket>
 80139e4:	4602      	mov	r2, r0
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	4413      	add	r3, r2
 80139ea:	3314      	adds	r3, #20
 80139ec:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 80139ee:	69bb      	ldr	r3, [r7, #24]
 80139f0:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	3314      	adds	r3, #20
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	009b      	lsls	r3, r3, #2
 80139fc:	b2da      	uxtb	r2, r3
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013a08:	3301      	adds	r3, #1
 8013a0a:	b2da      	uxtb	r2, r3
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8013a12:	69fa      	ldr	r2, [r7, #28]
 8013a14:	2300      	movs	r3, #0
 8013a16:	2100      	movs	r1, #0
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f000 f837 	bl	8013a8c <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013a1e:	69fb      	ldr	r3, [r7, #28]
    }
 8013a20:	4618      	mov	r0, r3
 8013a22:	3720      	adds	r7, #32
 8013a24:	46bd      	mov	sp, r7
 8013a26:	bd80      	pop	{r7, pc}
 8013a28:	08026cb8 	.word	0x08026cb8

08013a2c <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b086      	sub	sp, #24
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 8013a36:	2300      	movs	r3, #0
 8013a38:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013a3e:	2300      	movs	r3, #0
 8013a40:	617b      	str	r3, [r7, #20]
 8013a42:	e019      	b.n	8013a78 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8013a44:	68fa      	ldr	r2, [r7, #12]
 8013a46:	6839      	ldr	r1, [r7, #0]
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f000 fb7d 	bl	8014148 <prvTCPPrepareSend>
 8013a4e:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	dd14      	ble.n	8013a80 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	6819      	ldr	r1, [r3, #0]
 8013a5a:	68ba      	ldr	r2, [r7, #8]
 8013a5c:	2301      	movs	r3, #1
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 f814 	bl	8013a8c <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	2200      	movs	r2, #0
 8013a68:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 8013a6a:	693a      	ldr	r2, [r7, #16]
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	4413      	add	r3, r2
 8013a70:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013a72:	697b      	ldr	r3, [r7, #20]
 8013a74:	3301      	adds	r3, #1
 8013a76:	617b      	str	r3, [r7, #20]
 8013a78:	697b      	ldr	r3, [r7, #20]
 8013a7a:	2b07      	cmp	r3, #7
 8013a7c:	d9e2      	bls.n	8013a44 <prvTCPSendRepeated+0x18>
 8013a7e:	e000      	b.n	8013a82 <prvTCPSendRepeated+0x56>
                break;
 8013a80:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013a82:	693b      	ldr	r3, [r7, #16]
    }
 8013a84:	4618      	mov	r0, r3
 8013a86:	3718      	adds	r7, #24
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b086      	sub	sp, #24
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
 8013a98:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d008      	beq.n	8013aba <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 8013aa8:	6938      	ldr	r0, [r7, #16]
 8013aaa:	f7f6 fbf5 	bl	800a298 <uxIPHeaderSizePacket>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	2b28      	cmp	r3, #40	@ 0x28
 8013ab2:	d113      	bne.n	8013adc <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	617b      	str	r3, [r7, #20]
 8013ab8:	e010      	b.n	8013adc <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d008      	beq.n	8013ad2 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8013ac0:	68f8      	ldr	r0, [r7, #12]
 8013ac2:	f7f6 fc03 	bl	800a2cc <uxIPHeaderSizeSocket>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	2b28      	cmp	r3, #40	@ 0x28
 8013aca:	d107      	bne.n	8013adc <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013acc:	2301      	movs	r3, #1
 8013ace:	617b      	str	r3, [r7, #20]
 8013ad0:	e004      	b.n	8013adc <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8013ad2:	f240 1119 	movw	r1, #281	@ 0x119
 8013ad6:	480c      	ldr	r0, [pc, #48]	@ (8013b08 <prvTCPReturnPacket+0x7c>)
 8013ad8:	f7ed ff50 	bl	800197c <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	d105      	bne.n	8013aee <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	687a      	ldr	r2, [r7, #4]
 8013ae6:	68b9      	ldr	r1, [r7, #8]
 8013ae8:	68f8      	ldr	r0, [r7, #12]
 8013aea:	f001 fa61 	bl	8014fb0 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d105      	bne.n	8013b00 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	687a      	ldr	r2, [r7, #4]
 8013af8:	68b9      	ldr	r1, [r7, #8]
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	f000 ff18 	bl	8014930 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 8013b00:	bf00      	nop
 8013b02:	3718      	adds	r7, #24
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	08026cd4 	.word	0x08026cd4

08013b0c <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b08a      	sub	sp, #40	@ 0x28
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	60f8      	str	r0, [r7, #12]
 8013b14:	60b9      	str	r1, [r7, #8]
 8013b16:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013b1e:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013b28:	4413      	add	r3, r2
 8013b2a:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d007      	beq.n	8013b46 <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7fd fa9f 	bl	8011080 <uxStreamBufferFrontSpace>
 8013b42:	6278      	str	r0, [r7, #36]	@ 0x24
 8013b44:	e003      	b.n	8013b4e <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013b4c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8013b4e:	69bb      	ldr	r3, [r7, #24]
 8013b50:	685b      	ldr	r3, [r3, #4]
 8013b52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7f7 f8ed 	bl	800ad34 <FreeRTOS_min_uint32>
 8013b5a:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013b62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013b66:	b2db      	uxtb	r3, r3
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d107      	bne.n	8013b7c <prvTCPReturn_CheckTCPWindow+0x70>
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8013b72:	f003 0304 	and.w	r3, r3, #4
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d001      	beq.n	8013b80 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013b86:	461a      	mov	r2, r3
 8013b88:	6a3b      	ldr	r3, [r7, #32]
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	d20a      	bcs.n	8013ba4 <prvTCPReturn_CheckTCPWindow+0x98>
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013b94:	461a      	mov	r2, r3
 8013b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b98:	4293      	cmp	r3, r2
 8013b9a:	d303      	bcc.n	8013ba4 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013ba2:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8013baa:	461a      	mov	r2, r3
 8013bac:	6a3b      	ldr	r3, [r7, #32]
 8013bae:	40d3      	lsrs	r3, r2
 8013bb0:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8013bb2:	69fb      	ldr	r3, [r7, #28]
 8013bb4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d902      	bls.n	8013bc2 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8013bbc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8013bc0:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8013bc2:	69fb      	ldr	r3, [r7, #28]
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	021b      	lsls	r3, r3, #8
 8013bc8:	b21a      	sxth	r2, r3
 8013bca:	69fb      	ldr	r3, [r7, #28]
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	0a1b      	lsrs	r3, r3, #8
 8013bd0:	b29b      	uxth	r3, r3
 8013bd2:	b21b      	sxth	r3, r3
 8013bd4:	4313      	orrs	r3, r2
 8013bd6:	b21b      	sxth	r3, r3
 8013bd8:	b29a      	uxth	r2, r3
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8013bde:	68fa      	ldr	r2, [r7, #12]
 8013be0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013be4:	f36f 0300 	bfc	r3, #0, #1
 8013be8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8013bec:	69bb      	ldr	r3, [r7, #24]
 8013bee:	691a      	ldr	r2, [r3, #16]
 8013bf0:	6a3b      	ldr	r3, [r7, #32]
 8013bf2:	441a      	add	r2, r3
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 8013bf8:	bf00      	nop
 8013bfa:	3728      	adds	r7, #40	@ 0x28
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}

08013c00 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b088      	sub	sp, #32
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	60f8      	str	r0, [r7, #12]
 8013c08:	60b9      	str	r1, [r7, #8]
 8013c0a:	607a      	str	r2, [r7, #4]
 8013c0c:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013c14:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013c1e:	4413      	add	r3, r2
 8013c20:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013c28:	f003 0302 	and.w	r3, r3, #2
 8013c2c:	b2db      	uxtb	r3, r3
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d029      	beq.n	8013c86 <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8013c32:	68fa      	ldr	r2, [r7, #12]
 8013c34:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013c38:	f36f 0341 	bfc	r3, #1, #1
 8013c3c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8013c40:	68fa      	ldr	r2, [r7, #12]
 8013c42:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013c46:	f043 0304 	orr.w	r3, r3, #4
 8013c4a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013c54:	1e5a      	subs	r2, r3, #1
 8013c56:	69bb      	ldr	r3, [r7, #24]
 8013c58:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	685b      	ldr	r3, [r3, #4]
 8013c5e:	061a      	lsls	r2, r3, #24
 8013c60:	69bb      	ldr	r3, [r7, #24]
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	021b      	lsls	r3, r3, #8
 8013c66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013c6a:	431a      	orrs	r2, r3
 8013c6c:	69bb      	ldr	r3, [r7, #24]
 8013c6e:	685b      	ldr	r3, [r3, #4]
 8013c70:	0a1b      	lsrs	r3, r3, #8
 8013c72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013c76:	431a      	orrs	r2, r3
 8013c78:	69bb      	ldr	r3, [r7, #24]
 8013c7a:	685b      	ldr	r3, [r3, #4]
 8013c7c:	0e1b      	lsrs	r3, r3, #24
 8013c7e:	431a      	orrs	r2, r3
 8013c80:	69bb      	ldr	r3, [r7, #24]
 8013c82:	605a      	str	r2, [r3, #4]
 8013c84:	e043      	b.n	8013d0e <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013c8c:	061a      	lsls	r2, r3, #24
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013c94:	021b      	lsls	r3, r3, #8
 8013c96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013c9a:	431a      	orrs	r2, r3
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013ca2:	0a1b      	lsrs	r3, r3, #8
 8013ca4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013ca8:	431a      	orrs	r2, r3
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013cb0:	0e1b      	lsrs	r3, r3, #24
 8013cb2:	431a      	orrs	r2, r3
 8013cb4:	69bb      	ldr	r3, [r7, #24]
 8013cb6:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 8013cb8:	69bb      	ldr	r3, [r7, #24]
 8013cba:	7b5b      	ldrb	r3, [r3, #13]
 8013cbc:	f003 0301 	and.w	r3, r3, #1
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d024      	beq.n	8013d0e <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8013cc4:	68f8      	ldr	r0, [r7, #12]
 8013cc6:	f7f6 fb01 	bl	800a2cc <uxIPHeaderSizeSocket>
 8013cca:	4602      	mov	r2, r0
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	1a9b      	subs	r3, r3, r2
 8013cd0:	3b14      	subs	r3, #20
 8013cd2:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8013cd4:	69fb      	ldr	r3, [r7, #28]
 8013cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	441a      	add	r2, r3
 8013cdc:	69fb      	ldr	r3, [r7, #28]
 8013cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d014      	beq.n	8013d0e <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8013ce4:	69bb      	ldr	r3, [r7, #24]
 8013ce6:	7b5b      	ldrb	r3, [r3, #13]
 8013ce8:	f023 0301 	bic.w	r3, r3, #1
 8013cec:	b2da      	uxtb	r2, r3
 8013cee:	69bb      	ldr	r3, [r7, #24]
 8013cf0:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 8013cf2:	69fb      	ldr	r3, [r7, #28]
 8013cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cf6:	69fb      	ldr	r3, [r7, #28]
 8013cf8:	69db      	ldr	r3, [r3, #28]
 8013cfa:	1ad1      	subs	r1, r2, r3
 8013cfc:	69fb      	ldr	r3, [r7, #28]
 8013cfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d00:	69fb      	ldr	r3, [r7, #28]
 8013d02:	69db      	ldr	r3, [r3, #28]
 8013d04:	1ad3      	subs	r3, r2, r3
 8013d06:	697a      	ldr	r2, [r7, #20]
 8013d08:	480d      	ldr	r0, [pc, #52]	@ (8013d40 <prvTCPReturn_SetSequenceNumber+0x140>)
 8013d0a:	f00e fc9b 	bl	8022644 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8013d0e:	69fb      	ldr	r3, [r7, #28]
 8013d10:	691b      	ldr	r3, [r3, #16]
 8013d12:	061a      	lsls	r2, r3, #24
 8013d14:	69fb      	ldr	r3, [r7, #28]
 8013d16:	691b      	ldr	r3, [r3, #16]
 8013d18:	021b      	lsls	r3, r3, #8
 8013d1a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013d1e:	431a      	orrs	r2, r3
 8013d20:	69fb      	ldr	r3, [r7, #28]
 8013d22:	691b      	ldr	r3, [r3, #16]
 8013d24:	0a1b      	lsrs	r3, r3, #8
 8013d26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013d2a:	431a      	orrs	r2, r3
 8013d2c:	69fb      	ldr	r3, [r7, #28]
 8013d2e:	691b      	ldr	r3, [r3, #16]
 8013d30:	0e1b      	lsrs	r3, r3, #24
 8013d32:	431a      	orrs	r2, r3
 8013d34:	69bb      	ldr	r3, [r7, #24]
 8013d36:	609a      	str	r2, [r3, #8]
    }
 8013d38:	bf00      	nop
 8013d3a:	3720      	adds	r7, #32
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}
 8013d40:	08026d10 	.word	0x08026d10

08013d44 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8013d44:	b5b0      	push	{r4, r5, r7, lr}
 8013d46:	b088      	sub	sp, #32
 8013d48:	af02      	add	r7, sp, #8
 8013d4a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013d52:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8013d5a:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 8013d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8013dd4 <prvTCPCreateWindow+0x90>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d014      	beq.n	8013d8e <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013d6a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013d6e:	fb02 f103 	mul.w	r1, r2, r3
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013d84:	9300      	str	r3, [sp, #0]
 8013d86:	4603      	mov	r3, r0
 8013d88:	4813      	ldr	r0, [pc, #76]	@ (8013dd8 <prvTCPCreateWindow+0x94>)
 8013d8a:	f00e fc5b 	bl	8022644 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013d9a:	fb02 f103 	mul.w	r1, r2, r3
 8013d9e:	693b      	ldr	r3, [r7, #16]
 8013da0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013da4:	fb02 f403 	mul.w	r4, r2, r3
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 8013dba:	9201      	str	r2, [sp, #4]
 8013dbc:	9300      	str	r3, [sp, #0]
 8013dbe:	462b      	mov	r3, r5
 8013dc0:	4622      	mov	r2, r4
 8013dc2:	f001 ffd7 	bl	8015d74 <xTCPWindowCreate>
 8013dc6:	60f8      	str	r0, [r7, #12]

        return xReturn;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
    }
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3718      	adds	r7, #24
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8013dd2:	bf00      	nop
 8013dd4:	2000164c 	.word	0x2000164c
 8013dd8:	08026d30 	.word	0x08026d30

08013ddc <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b084      	sub	sp, #16
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013de4:	2301      	movs	r3, #1
 8013de6:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	7a1b      	ldrb	r3, [r3, #8]
 8013dec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013df0:	b2db      	uxtb	r3, r3
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d002      	beq.n	8013dfc <prvTCPPrepareConnect+0x20>
 8013df6:	2b01      	cmp	r3, #1
 8013df8:	d005      	beq.n	8013e06 <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8013dfa:	e009      	b.n	8013e10 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f000 ff69 	bl	8014cd4 <prvTCPPrepareConnect_IPV4>
 8013e02:	60f8      	str	r0, [r7, #12]
                    break;
 8013e04:	e004      	b.n	8013e10 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 8013e06:	6878      	ldr	r0, [r7, #4]
 8013e08:	f001 fab4 	bl	8015374 <prvTCPPrepareConnect_IPV6>
 8013e0c:	60f8      	str	r0, [r7, #12]
                    break;
 8013e0e:	bf00      	nop
        }

        return xReturn;
 8013e10:	68fb      	ldr	r3, [r7, #12]
    }
 8013e12:	4618      	mov	r0, r3
 8013e14:	3710      	adds	r7, #16
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}
	...

08013e1c <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013e2a:	687a      	ldr	r2, [r7, #4]
 8013e2c:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8013e30:	fb02 f303 	mul.w	r3, r2, r3
 8013e34:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 8013e36:	2300      	movs	r3, #0
 8013e38:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 8013e3a:	e005      	b.n	8013e48 <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	085b      	lsrs	r3, r3, #1
 8013e40:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 8013e42:	7afb      	ldrb	r3, [r7, #11]
 8013e44:	3301      	adds	r3, #1
 8013e46:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e4e:	d2f5      	bcs.n	8013e3c <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	7afb      	ldrb	r3, [r7, #11]
 8013e60:	4803      	ldr	r0, [pc, #12]	@ (8013e70 <prvWinScaleFactor+0x54>)
 8013e62:	f00e fbef 	bl	8022644 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 8013e66:	7afb      	ldrb	r3, [r7, #11]
        }
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3710      	adds	r7, #16
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	08026d68 	.word	0x08026d68

08013e74 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013e84:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	2202      	movs	r2, #2
 8013e8a:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	2204      	movs	r2, #4
 8013e90:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8013e92:	89fb      	ldrh	r3, [r7, #14]
 8013e94:	0a1b      	lsrs	r3, r3, #8
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	b2da      	uxtb	r2, r3
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8013e9e:	89fb      	ldrh	r3, [r7, #14]
 8013ea0:	b2da      	uxtb	r2, r3
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f7ff ffb8 	bl	8013e1c <prvWinScaleFactor>
 8013eac:	4603      	mov	r3, r0
 8013eae:	461a      	mov	r2, r3
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	2201      	movs	r2, #1
 8013eba:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	2203      	movs	r2, #3
 8013ec0:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	2203      	movs	r2, #3
 8013ec6:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8013ed2:	2308      	movs	r3, #8
 8013ed4:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 8013ed6:	683a      	ldr	r2, [r7, #0]
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	4413      	add	r3, r2
 8013edc:	3314      	adds	r3, #20
 8013ede:	2201      	movs	r2, #1
 8013ee0:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	3301      	adds	r3, #1
 8013ee6:	683a      	ldr	r2, [r7, #0]
 8013ee8:	4413      	add	r3, r2
 8013eea:	2201      	movs	r2, #1
 8013eec:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	3302      	adds	r3, #2
 8013ef2:	683a      	ldr	r2, [r7, #0]
 8013ef4:	4413      	add	r3, r2
 8013ef6:	2204      	movs	r2, #4
 8013ef8:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	3303      	adds	r3, #3
 8013efe:	683a      	ldr	r2, [r7, #0]
 8013f00:	4413      	add	r3, r2
 8013f02:	2202      	movs	r2, #2
 8013f04:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	3304      	adds	r3, #4
 8013f0a:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 8013f0c:	68bb      	ldr	r3, [r7, #8]
    }
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3710      	adds	r7, #16
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
	...

08013f18 <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b088      	sub	sp, #32
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	60f8      	str	r0, [r7, #12]
 8013f20:	60b9      	str	r1, [r7, #8]
 8013f22:	607a      	str	r2, [r7, #4]
 8013f24:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 8013f26:	4b38      	ldr	r3, [pc, #224]	@ (8014008 <prvTCPBufferResize+0xf0>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d00b      	beq.n	8013f46 <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 8013f2e:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 8013f32:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d102      	bne.n	8013f40 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	617b      	str	r3, [r7, #20]
 8013f3e:	e020      	b.n	8013f82 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8013f40:	2300      	movs	r3, #0
 8013f42:	617b      	str	r3, [r7, #20]
 8013f44:	e01d      	b.n	8013f82 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013f46:	68f8      	ldr	r0, [r7, #12]
 8013f48:	f7f6 f9c0 	bl	800a2cc <uxIPHeaderSizeSocket>
 8013f4c:	4602      	mov	r2, r0
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	4413      	add	r3, r2
 8013f52:	3322      	adds	r3, #34	@ 0x22
 8013f54:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	69ba      	ldr	r2, [r7, #24]
 8013f5a:	4413      	add	r3, r2
 8013f5c:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 8013f5e:	69bb      	ldr	r3, [r7, #24]
 8013f60:	2b59      	cmp	r3, #89	@ 0x59
 8013f62:	d801      	bhi.n	8013f68 <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013f64:	235a      	movs	r3, #90	@ 0x5a
 8013f66:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d004      	beq.n	8013f78 <prvTCPBufferResize+0x60>
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f72:	69ba      	ldr	r2, [r7, #24]
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d902      	bls.n	8013f7e <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 8013f78:	2301      	movs	r3, #1
 8013f7a:	617b      	str	r3, [r7, #20]
 8013f7c:	e001      	b.n	8013f82 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d023      	beq.n	8013fd0 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 8013f88:	2100      	movs	r1, #0
 8013f8a:	69b8      	ldr	r0, [r7, #24]
 8013f8c:	f003 fc4a 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 8013f90:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 8013f92:	69fb      	ldr	r3, [r7, #28]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d031      	beq.n	8013ffc <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 8013f98:	69fb      	ldr	r3, [r7, #28]
 8013f9a:	69ba      	ldr	r2, [r7, #24]
 8013f9c:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d00c      	beq.n	8013fbe <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fb0:	461a      	mov	r2, r3
 8013fb2:	f00e fd63 	bl	8022a7c <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013fb6:	68b8      	ldr	r0, [r7, #8]
 8013fb8:	f003 fc9c 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
 8013fbc:	e01e      	b.n	8013ffc <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8013fbe:	69fb      	ldr	r3, [r7, #28]
 8013fc0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	33aa      	adds	r3, #170	@ 0xaa
 8013fc6:	225a      	movs	r2, #90	@ 0x5a
 8013fc8:	4619      	mov	r1, r3
 8013fca:	f00e fd57 	bl	8022a7c <memcpy>
 8013fce:	e015      	b.n	8013ffc <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d104      	bne.n	8013fe0 <prvTCPBufferResize+0xc8>
 8013fd6:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8013fda:	480c      	ldr	r0, [pc, #48]	@ (801400c <prvTCPBufferResize+0xf4>)
 8013fdc:	f7ed fcce 	bl	800197c <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8013fe4:	68f8      	ldr	r0, [r7, #12]
 8013fe6:	f7f6 f971 	bl	800a2cc <uxIPHeaderSizeSocket>
 8013fea:	4602      	mov	r2, r0
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	441a      	add	r2, r3
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	4413      	add	r3, r2
 8013ff4:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 8013ffc:	69fb      	ldr	r3, [r7, #28]
    }
 8013ffe:	4618      	mov	r0, r3
 8014000:	3720      	adds	r7, #32
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
 8014006:	bf00      	nop
 8014008:	08027e40 	.word	0x08027e40
 801400c:	08026cd4 	.word	0x08026cd4

08014010 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8014010:	b580      	push	{r7, lr}
 8014012:	b086      	sub	sp, #24
 8014014:	af00      	add	r7, sp, #0
 8014016:	60f8      	str	r0, [r7, #12]
 8014018:	60b9      	str	r1, [r7, #8]
 801401a:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 801401c:	2300      	movs	r3, #0
 801401e:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8014020:	2300      	movs	r3, #0
 8014022:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d008      	beq.n	801403c <prvTCPReturn_SetEndPoint+0x2c>
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801402e:	2b00      	cmp	r3, #0
 8014030:	d004      	beq.n	801403c <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014036:	68bb      	ldr	r3, [r7, #8]
 8014038:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 801403a:	e078      	b.n	801412e <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 801403c:	483e      	ldr	r0, [pc, #248]	@ (8014138 <prvTCPReturn_SetEndPoint+0x128>)
 801403e:	f00e fb01 	bl	8022644 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2b14      	cmp	r3, #20
 8014046:	d003      	beq.n	8014050 <prvTCPReturn_SetEndPoint+0x40>
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2b28      	cmp	r3, #40	@ 0x28
 801404c:	d03d      	beq.n	80140ca <prvTCPReturn_SetEndPoint+0xba>
 801404e:	e056      	b.n	80140fe <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014054:	330e      	adds	r3, #14
 8014056:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	691b      	ldr	r3, [r3, #16]
 801405c:	2108      	movs	r1, #8
 801405e:	4618      	mov	r0, r3
 8014060:	f7f9 fd8a 	bl	800db78 <FreeRTOS_FindEndPointOnNetMask>
 8014064:	4602      	mov	r2, r0
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 801406a:	68bb      	ldr	r3, [r7, #8]
 801406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801406e:	2b00      	cmp	r3, #0
 8014070:	d149      	bne.n	8014106 <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	68db      	ldr	r3, [r3, #12]
 8014076:	061a      	lsls	r2, r3, #24
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	68db      	ldr	r3, [r3, #12]
 801407c:	021b      	lsls	r3, r3, #8
 801407e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014082:	431a      	orrs	r2, r3
 8014084:	697b      	ldr	r3, [r7, #20]
 8014086:	68db      	ldr	r3, [r3, #12]
 8014088:	0a1b      	lsrs	r3, r3, #8
 801408a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801408e:	431a      	orrs	r2, r3
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	68db      	ldr	r3, [r3, #12]
 8014094:	0e1b      	lsrs	r3, r3, #24
 8014096:	ea42 0103 	orr.w	r1, r2, r3
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	691b      	ldr	r3, [r3, #16]
 801409e:	061a      	lsls	r2, r3, #24
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	691b      	ldr	r3, [r3, #16]
 80140a4:	021b      	lsls	r3, r3, #8
 80140a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80140aa:	431a      	orrs	r2, r3
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	691b      	ldr	r3, [r3, #16]
 80140b0:	0a1b      	lsrs	r3, r3, #8
 80140b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80140b6:	431a      	orrs	r2, r3
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	691b      	ldr	r3, [r3, #16]
 80140bc:	0e1b      	lsrs	r3, r3, #24
 80140be:	4313      	orrs	r3, r2
 80140c0:	461a      	mov	r2, r3
 80140c2:	481e      	ldr	r0, [pc, #120]	@ (801413c <prvTCPReturn_SetEndPoint+0x12c>)
 80140c4:	f00e fabe 	bl	8022644 <lUDPLoggingPrintf>
                        break;
 80140c8:	e01d      	b.n	8014106 <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140ce:	330e      	adds	r3, #14
 80140d0:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 80140d2:	693b      	ldr	r3, [r7, #16]
 80140d4:	3318      	adds	r3, #24
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7f9 fd08 	bl	800daec <FreeRTOS_FindEndPointOnIP_IPv6>
 80140dc:	4602      	mov	r2, r0
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d10f      	bne.n	801410a <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	f103 0108 	add.w	r1, r3, #8
 80140f0:	693b      	ldr	r3, [r7, #16]
 80140f2:	3318      	adds	r3, #24
 80140f4:	461a      	mov	r2, r3
 80140f6:	4812      	ldr	r0, [pc, #72]	@ (8014140 <prvTCPReturn_SetEndPoint+0x130>)
 80140f8:	f00e faa4 	bl	8022644 <lUDPLoggingPrintf>
                        break;
 80140fc:	e005      	b.n	801410a <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	2200      	movs	r2, #0
 8014102:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8014104:	e002      	b.n	801410c <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8014106:	bf00      	nop
 8014108:	e000      	b.n	801410c <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 801410a:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014110:	2b00      	cmp	r3, #0
 8014112:	d00c      	beq.n	801412e <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014118:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 801411c:	4619      	mov	r1, r3
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014122:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8014126:	461a      	mov	r2, r3
 8014128:	4806      	ldr	r0, [pc, #24]	@ (8014144 <prvTCPReturn_SetEndPoint+0x134>)
 801412a:	f00e fa8b 	bl	8022644 <lUDPLoggingPrintf>
    }
 801412e:	bf00      	nop
 8014130:	3718      	adds	r7, #24
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}
 8014136:	bf00      	nop
 8014138:	08026d9c 	.word	0x08026d9c
 801413c:	08026dc4 	.word	0x08026dc4
 8014140:	08026df8 	.word	0x08026df8
 8014144:	08026e2c 	.word	0x08026e2c

08014148 <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 8014148:	b580      	push	{r7, lr}
 801414a:	b096      	sub	sp, #88	@ 0x58
 801414c:	af02      	add	r7, sp, #8
 801414e:	60f8      	str	r0, [r7, #12]
 8014150:	60b9      	str	r1, [r7, #8]
 8014152:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 8014154:	2300      	movs	r3, #0
 8014156:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d004      	beq.n	801416a <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014166:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014168:	e002      	b.n	8014170 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	33aa      	adds	r3, #170	@ 0xaa
 801416e:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014170:	68f8      	ldr	r0, [r7, #12]
 8014172:	f7f6 f8ab 	bl	800a2cc <uxIPHeaderSizeSocket>
 8014176:	4603      	mov	r3, r0
 8014178:	330e      	adds	r3, #14
 801417a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801417c:	4413      	add	r3, r2
 801417e:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8014186:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 8014188:	2300      	movs	r3, #0
 801418a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 801418c:	2300      	movs	r3, #0
 801418e:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 8014190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014192:	7b5b      	ldrb	r3, [r3, #13]
 8014194:	f043 0310 	orr.w	r3, r3, #16
 8014198:	b2da      	uxtb	r2, r3
 801419a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801419c:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	f000 80a5 	beq.w	80142f4 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80141b0:	2b01      	cmp	r3, #1
 80141b2:	d90a      	bls.n	80141ca <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80141ba:	f107 0210 	add.w	r2, r7, #16
 80141be:	4619      	mov	r1, r3
 80141c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80141c2:	f002 fb13 	bl	80167ec <ulTCPWindowTxGet>
 80141c6:	4603      	mov	r3, r0
 80141c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 80141ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	f340 8091 	ble.w	80142f4 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	6819      	ldr	r1, [r3, #0]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80141da:	68f8      	ldr	r0, [r7, #12]
 80141dc:	f7ff fe9c 	bl	8013f18 <prvTCPBufferResize>
 80141e0:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 80141e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	f000 8082 	beq.w	80142ee <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80141ee:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 80141f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141f4:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80141f6:	68f8      	ldr	r0, [r7, #12]
 80141f8:	f7f6 f868 	bl	800a2cc <uxIPHeaderSizeSocket>
 80141fc:	4603      	mov	r3, r0
 80141fe:	330e      	adds	r3, #14
 8014200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014202:	4413      	add	r3, r2
 8014204:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 8014206:	68f8      	ldr	r0, [r7, #12]
 8014208:	f7f6 f860 	bl	800a2cc <uxIPHeaderSizeSocket>
 801420c:	4602      	mov	r2, r0
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	4413      	add	r3, r2
 8014212:	3322      	adds	r3, #34	@ 0x22
 8014214:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014216:	4413      	add	r3, r2
 8014218:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	693a      	ldr	r2, [r7, #16]
 801422a:	4619      	mov	r1, r3
 801422c:	f7fc fef9 	bl	8011022 <uxStreamBufferDistance>
 8014230:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8014238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801423a:	2201      	movs	r2, #1
 801423c:	9200      	str	r2, [sp, #0]
 801423e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014240:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014242:	f7fd f84c 	bl	80112de <uxStreamBufferGet>
 8014246:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 8014248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801424a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801424c:	429a      	cmp	r2, r3
 801424e:	d007      	beq.n	8014260 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 8014250:	6939      	ldr	r1, [r7, #16]
 8014252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014254:	9300      	str	r3, [sp, #0]
 8014256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801425a:	4898      	ldr	r0, [pc, #608]	@ (80144bc <prvTCPPrepareSend+0x374>)
 801425c:	f00e f9f2 	bl	8022644 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8014266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801426a:	b2db      	uxtb	r3, r3
 801426c:	2b00      	cmp	r3, #0
 801426e:	d041      	beq.n	80142f4 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	4619      	mov	r1, r3
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014280:	689b      	ldr	r3, [r3, #8]
 8014282:	461a      	mov	r2, r3
 8014284:	f7fc fecd 	bl	8011022 <uxStreamBufferDistance>
 8014288:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 801428a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801428e:	429a      	cmp	r2, r3
 8014290:	d130      	bne.n	80142f4 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014298:	689b      	ldr	r3, [r3, #8]
 801429a:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80142a2:	685b      	ldr	r3, [r3, #4]
 80142a4:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 80142b0:	6a3b      	ldr	r3, [r7, #32]
 80142b2:	9301      	str	r3, [sp, #4]
 80142b4:	69fb      	ldr	r3, [r7, #28]
 80142b6:	9300      	str	r3, [sp, #0]
 80142b8:	69bb      	ldr	r3, [r7, #24]
 80142ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80142be:	4880      	ldr	r0, [pc, #512]	@ (80144c0 <prvTCPPrepareSend+0x378>)
 80142c0:	f00e f9c0 	bl	8022644 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 80142c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142c6:	7b5b      	ldrb	r3, [r3, #13]
 80142c8:	f043 0301 	orr.w	r3, r3, #1
 80142cc:	b2da      	uxtb	r2, r3
 80142ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142d0:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 80142d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80142d8:	441a      	add	r2, r3
 80142da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142dc:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80142de:	68fa      	ldr	r2, [r7, #12]
 80142e0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80142e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142e8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 80142ec:	e002      	b.n	80142f4 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 80142ee:	f04f 33ff 	mov.w	r3, #4294967295
 80142f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 80142f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	f2c0 8099 	blt.w	801442e <prvTCPPrepareSend+0x2e6>
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8014302:	2b05      	cmp	r3, #5
 8014304:	f040 8093 	bne.w	801442e <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801430e:	f003 0320 	and.w	r3, r3, #32
 8014312:	b2db      	uxtb	r3, r3
 8014314:	2b00      	cmp	r3, #0
 8014316:	d029      	beq.n	801436c <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8014318:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801431a:	f002 f8e7 	bl	80164ec <xTCPWindowTxDone>
 801431e:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8014320:	2b00      	cmp	r3, #0
 8014322:	d023      	beq.n	801436c <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8014324:	68fa      	ldr	r2, [r7, #12]
 8014326:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801432a:	f36f 1345 	bfc	r3, #5, #1
 801432e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8014332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014334:	7b5b      	ldrb	r3, [r3, #13]
 8014336:	f043 0301 	orr.w	r3, r3, #1
 801433a:	b2da      	uxtb	r2, r3
 801433c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801433e:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8014340:	68fa      	ldr	r2, [r7, #12]
 8014342:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801434a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 801434e:	68fa      	ldr	r2, [r7, #12]
 8014350:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014354:	f043 0301 	orr.w	r3, r3, #1
 8014358:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801435c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801435e:	6a1a      	ldr	r2, [r3, #32]
 8014360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014362:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8014364:	2106      	movs	r1, #6
 8014366:	68f8      	ldr	r0, [r7, #12]
 8014368:	f7fd f960 	bl	801162c <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014372:	2b03      	cmp	r3, #3
 8014374:	d90f      	bls.n	8014396 <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014380:	461a      	mov	r2, r3
 8014382:	4850      	ldr	r0, [pc, #320]	@ (80144c4 <prvTCPPrepareSend+0x37c>)
 8014384:	f00e f95e 	bl	8022644 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8014388:	2108      	movs	r1, #8
 801438a:	68f8      	ldr	r0, [r7, #12]
 801438c:	f7fd f94e 	bl	801162c <vTCPStateChange>
                    lDataLen = -1;
 8014390:	f04f 33ff 	mov.w	r3, #4294967295
 8014394:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 8014396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014398:	2b00      	cmp	r3, #0
 801439a:	d148      	bne.n	801442e <prvTCPPrepareSend+0x2e6>
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80143a2:	f003 0301 	and.w	r3, r3, #1
 80143a6:	b2db      	uxtb	r3, r3
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d140      	bne.n	801442e <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 80143ac:	f7f0 fbdc 	bl	8004b68 <xTaskGetTickCount>
 80143b0:	4602      	mov	r2, r0
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80143b8:	1ad3      	subs	r3, r2, r3
 80143ba:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 80143bc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80143c0:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d002      	beq.n	80143d2 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 80143cc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80143d0:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 80143d2:	697a      	ldr	r2, [r7, #20]
 80143d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80143d6:	429a      	cmp	r2, r3
 80143d8:	d929      	bls.n	801442e <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80143da:	f7f0 fbc5 	bl	8004b68 <xTaskGetTickCount>
 80143de:	4602      	mov	r2, r0
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 80143e6:	4b38      	ldr	r3, [pc, #224]	@ (80144c8 <prvTCPPrepareSend+0x380>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d00b      	beq.n	8014406 <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80143f8:	461a      	mov	r2, r3
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014400:	4832      	ldr	r0, [pc, #200]	@ (80144cc <prvTCPPrepareSend+0x384>)
 8014402:	f00e f91f 	bl	8022644 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8014406:	68fa      	ldr	r2, [r7, #12]
 8014408:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801440c:	f043 0302 	orr.w	r3, r3, #2
 8014410:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 801441a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014424:	3301      	adds	r3, #1
 8014426:	b2da      	uxtb	r2, r3
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 801442e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014430:	2b00      	cmp	r3, #0
 8014432:	db3e      	blt.n	80144b2 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8014434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014436:	2b00      	cmp	r3, #0
 8014438:	dc0f      	bgt.n	801445a <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014440:	f003 0301 	and.w	r3, r3, #1
 8014444:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 8014446:	2b00      	cmp	r3, #0
 8014448:	d107      	bne.n	801445a <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014450:	f003 0302 	and.w	r3, r3, #2
 8014454:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8014456:	2b00      	cmp	r3, #0
 8014458:	d02b      	beq.n	80144b2 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 801445a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801445c:	7b5b      	ldrb	r3, [r3, #13]
 801445e:	f023 0308 	bic.w	r3, r3, #8
 8014462:	b2da      	uxtb	r2, r3
 8014464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014466:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	b2db      	uxtb	r3, r3
 801446c:	3314      	adds	r3, #20
 801446e:	b2db      	uxtb	r3, r3
 8014470:	009b      	lsls	r3, r3, #2
 8014472:	b2da      	uxtb	r2, r3
 8014474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014476:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8014478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801447a:	7b5b      	ldrb	r3, [r3, #13]
 801447c:	f043 0310 	orr.w	r3, r3, #16
 8014480:	b2da      	uxtb	r2, r3
 8014482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014484:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 8014486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014488:	2b00      	cmp	r3, #0
 801448a:	d006      	beq.n	801449a <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 801448c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801448e:	7b5b      	ldrb	r3, [r3, #13]
 8014490:	f043 0308 	orr.w	r3, r3, #8
 8014494:	b2da      	uxtb	r2, r3
 8014496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014498:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801449a:	68f8      	ldr	r0, [r7, #12]
 801449c:	f7f5 ff16 	bl	800a2cc <uxIPHeaderSizeSocket>
 80144a0:	4602      	mov	r2, r0
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	4413      	add	r3, r2
 80144a6:	3314      	adds	r3, #20
 80144a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 80144aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80144ae:	4413      	add	r3, r2
 80144b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 80144b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 80144b4:	4618      	mov	r0, r3
 80144b6:	3750      	adds	r7, #80	@ 0x50
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}
 80144bc:	08026e60 	.word	0x08026e60
 80144c0:	08026e94 	.word	0x08026e94
 80144c4:	08026ebc 	.word	0x08026ebc
 80144c8:	2000164c 	.word	0x2000164c
 80144cc:	08026edc 	.word	0x08026edc

080144d0 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b084      	sub	sp, #16
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80144de:	4618      	mov	r0, r3
 80144e0:	f7fc fdf0 	bl	80110c4 <uxStreamBufferMidSpace>
 80144e4:	4603      	mov	r3, r0
 80144e6:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	dd1a      	ble.n	8014524 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80144f4:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80144fc:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 80144fe:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014506:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8014508:	f001 ff5c 	bl	80163c4 <lTCPWindowTxAdd>
 801450c:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	2b00      	cmp	r3, #0
 8014512:	dd07      	ble.n	8014524 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801451a:	68ba      	ldr	r2, [r7, #8]
 801451c:	4611      	mov	r1, r2
 801451e:	4618      	mov	r0, r3
 8014520:	f7fc fdf7 	bl	8011112 <vStreamBufferMoveMid>
            }
        }
    }
 8014524:	bf00      	nop
 8014526:	3710      	adds	r7, #16
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}

0801452c <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801452c:	b590      	push	{r4, r7, lr}
 801452e:	b08b      	sub	sp, #44	@ 0x2c
 8014530:	af02      	add	r7, sp, #8
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801453a:	6838      	ldr	r0, [r7, #0]
 801453c:	f7f5 feac 	bl	800a298 <uxIPHeaderSizePacket>
 8014540:	4603      	mov	r3, r0
 8014542:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8014544:	4423      	add	r3, r4
 8014546:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8014548:	69bb      	ldr	r3, [r7, #24]
 801454a:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8014552:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801455a:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 801455c:	69fb      	ldr	r3, [r7, #28]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d05c      	beq.n	801461c <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 8014562:	4b4f      	ldr	r3, [pc, #316]	@ (80146a0 <prvSetOptions+0x174>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	2b00      	cmp	r3, #0
 8014568:	db44      	blt.n	80145f4 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801456e:	4618      	mov	r0, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014576:	461c      	mov	r4, r3
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801457e:	061a      	lsls	r2, r3, #24
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014586:	021b      	lsls	r3, r3, #8
 8014588:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801458c:	431a      	orrs	r2, r3
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014594:	0a1b      	lsrs	r3, r3, #8
 8014596:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801459a:	431a      	orrs	r2, r3
 801459c:	693b      	ldr	r3, [r7, #16]
 801459e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80145a2:	0e1b      	lsrs	r3, r3, #24
 80145a4:	431a      	orrs	r2, r3
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80145ac:	1ad3      	subs	r3, r2, r3
 80145ae:	693a      	ldr	r2, [r7, #16]
 80145b0:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80145b4:	0611      	lsls	r1, r2, #24
 80145b6:	693a      	ldr	r2, [r7, #16]
 80145b8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80145bc:	0212      	lsls	r2, r2, #8
 80145be:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 80145c2:	4311      	orrs	r1, r2
 80145c4:	693a      	ldr	r2, [r7, #16]
 80145c6:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80145ca:	0a12      	lsrs	r2, r2, #8
 80145cc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80145d0:	4311      	orrs	r1, r2
 80145d2:	693a      	ldr	r2, [r7, #16]
 80145d4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80145d8:	0e12      	lsrs	r2, r2, #24
 80145da:	4311      	orrs	r1, r2
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 80145e2:	1a8a      	subs	r2, r1, r2
 80145e4:	9201      	str	r2, [sp, #4]
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	69fb      	ldr	r3, [r7, #28]
 80145ea:	4622      	mov	r2, r4
 80145ec:	4601      	mov	r1, r0
 80145ee:	482d      	ldr	r0, [pc, #180]	@ (80146a4 <prvSetOptions+0x178>)
 80145f0:	f00e f828 	bl	8022644 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	3380      	adds	r3, #128	@ 0x80
 80145f8:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 80145fa:	697b      	ldr	r3, [r7, #20]
 80145fc:	3314      	adds	r3, #20
 80145fe:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8014600:	69fa      	ldr	r2, [r7, #28]
 8014602:	68f9      	ldr	r1, [r7, #12]
 8014604:	68b8      	ldr	r0, [r7, #8]
 8014606:	f00e fa39 	bl	8022a7c <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801460a:	69fb      	ldr	r3, [r7, #28]
 801460c:	b2db      	uxtb	r3, r3
 801460e:	3314      	adds	r3, #20
 8014610:	b2db      	uxtb	r3, r3
 8014612:	009b      	lsls	r3, r3, #2
 8014614:	b2da      	uxtb	r2, r3
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	731a      	strb	r2, [r3, #12]
 801461a:	e03c      	b.n	8014696 <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8014622:	2b04      	cmp	r3, #4
 8014624:	d937      	bls.n	8014696 <prvSetOptions+0x16a>
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801462c:	f003 0301 	and.w	r3, r3, #1
 8014630:	b2db      	uxtb	r3, r3
 8014632:	2b00      	cmp	r3, #0
 8014634:	d02f      	beq.n	8014696 <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 8014636:	687a      	ldr	r2, [r7, #4]
 8014638:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801463c:	f36f 0300 	bfc	r3, #0, #1
 8014640:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 8014644:	4b16      	ldr	r3, [pc, #88]	@ (80146a0 <prvSetOptions+0x174>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	2b00      	cmp	r3, #0
 801464a:	db06      	blt.n	801465a <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014652:	4619      	mov	r1, r3
 8014654:	4814      	ldr	r0, [pc, #80]	@ (80146a8 <prvSetOptions+0x17c>)
 8014656:	f00d fff5 	bl	8022644 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 801465a:	697b      	ldr	r3, [r7, #20]
 801465c:	2202      	movs	r2, #2
 801465e:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 8014660:	697b      	ldr	r3, [r7, #20]
 8014662:	2204      	movs	r2, #4
 8014664:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801466c:	0a1b      	lsrs	r3, r3, #8
 801466e:	b29b      	uxth	r3, r3
 8014670:	b2da      	uxtb	r2, r3
 8014672:	697b      	ldr	r3, [r7, #20]
 8014674:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801467c:	b2da      	uxtb	r2, r3
 801467e:	697b      	ldr	r3, [r7, #20]
 8014680:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 8014682:	2304      	movs	r3, #4
 8014684:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	b2db      	uxtb	r3, r3
 801468a:	3314      	adds	r3, #20
 801468c:	b2db      	uxtb	r3, r3
 801468e:	009b      	lsls	r3, r3, #2
 8014690:	b2da      	uxtb	r2, r3
 8014692:	697b      	ldr	r3, [r7, #20]
 8014694:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 8014696:	69fb      	ldr	r3, [r7, #28]
    }
 8014698:	4618      	mov	r0, r3
 801469a:	3724      	adds	r7, #36	@ 0x24
 801469c:	46bd      	mov	sp, r7
 801469e:	bd90      	pop	{r4, r7, pc}
 80146a0:	2000164c 	.word	0x2000164c
 80146a4:	08026efc 	.word	0x08026efc
 80146a8:	08026f24 	.word	0x08026f24

080146ac <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 80146ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146ae:	b093      	sub	sp, #76	@ 0x4c
 80146b0:	af04      	add	r7, sp, #16
 80146b2:	60f8      	str	r0, [r7, #12]
 80146b4:	60b9      	str	r1, [r7, #8]
 80146b6:	607a      	str	r2, [r7, #4]
 80146b8:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7f5 fde7 	bl	800a298 <uxIPHeaderSizePacket>
 80146ca:	4603      	mov	r3, r0
 80146cc:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80146ce:	4423      	add	r3, r4
 80146d0:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80146d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80146dc:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 80146e2:	68bb      	ldr	r3, [r7, #8]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	4618      	mov	r0, r3
 80146e8:	f7f5 fdd6 	bl	800a298 <uxIPHeaderSizePacket>
 80146ec:	4603      	mov	r3, r0
 80146ee:	3314      	adds	r3, #20
 80146f0:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 80146f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146f4:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80146fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146fc:	691b      	ldr	r3, [r3, #16]
 80146fe:	1ad3      	subs	r3, r2, r3
 8014700:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8014702:	69fb      	ldr	r3, [r7, #28]
 8014704:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801470c:	005b      	lsls	r3, r3, #1
 801470e:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d079      	beq.n	801480a <prvSendData+0x15e>
 8014716:	69ba      	ldr	r2, [r7, #24]
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	429a      	cmp	r2, r3
 801471c:	db75      	blt.n	801480a <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014728:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 801472a:	2b00      	cmp	r3, #0
 801472c:	d16d      	bne.n	801480a <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 801472e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014730:	6a3b      	ldr	r3, [r7, #32]
 8014732:	429a      	cmp	r2, r3
 8014734:	d169      	bne.n	801480a <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 801473c:	2b05      	cmp	r3, #5
 801473e:	d164      	bne.n	801480a <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 8014740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014742:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8014744:	2b10      	cmp	r3, #16
 8014746:	d160      	bne.n	801480a <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801474e:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	429a      	cmp	r2, r3
 801475c:	d00f      	beq.n	801477e <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014764:	2b00      	cmp	r3, #0
 8014766:	d005      	beq.n	8014774 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801476e:	4618      	mov	r0, r3
 8014770:	f003 f8c0 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	681a      	ldr	r2, [r3, #0]
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 801477e:	687a      	ldr	r2, [r7, #4]
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	429a      	cmp	r2, r3
 8014784:	d204      	bcs.n	8014790 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2202      	movs	r2, #2
 801478a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 801478e:	e00c      	b.n	80147aa <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	2214      	movs	r2, #20
 8014794:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d103      	bne.n	80147aa <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	2201      	movs	r2, #1
 80147a6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80147aa:	4b3d      	ldr	r3, [pc, #244]	@ (80148a0 <prvSendData+0x1f4>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	dd25      	ble.n	80147fe <prvSendData+0x152>
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80147b6:	2b17      	cmp	r3, #23
 80147b8:	d021      	beq.n	80147fe <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80147be:	461d      	mov	r5, r3
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80147c6:	461e      	mov	r6, r3
 80147c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147ca:	691a      	ldr	r2, [r3, #16]
 80147cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147ce:	68db      	ldr	r3, [r3, #12]
 80147d0:	1ad0      	subs	r0, r2, r3
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80147d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147da:	69db      	ldr	r3, [r3, #28]
 80147dc:	1ad3      	subs	r3, r2, r3
 80147de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80147e0:	68f9      	ldr	r1, [r7, #12]
 80147e2:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 80147e6:	460c      	mov	r4, r1
 80147e8:	69b9      	ldr	r1, [r7, #24]
 80147ea:	9103      	str	r1, [sp, #12]
 80147ec:	9402      	str	r4, [sp, #8]
 80147ee:	9201      	str	r2, [sp, #4]
 80147f0:	9300      	str	r3, [sp, #0]
 80147f2:	4603      	mov	r3, r0
 80147f4:	4632      	mov	r2, r6
 80147f6:	4629      	mov	r1, r5
 80147f8:	482a      	ldr	r0, [pc, #168]	@ (80148a4 <prvSendData+0x1f8>)
 80147fa:	f00d ff23 	bl	8022644 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	2200      	movs	r2, #0
 8014802:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8014804:	2300      	movs	r3, #0
 8014806:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 8014808:	e015      	b.n	8014836 <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014810:	2b00      	cmp	r3, #0
 8014812:	d010      	beq.n	8014836 <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	429a      	cmp	r2, r3
 8014820:	d005      	beq.n	801482e <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014828:	4618      	mov	r0, r3
 801482a:	f003 f863 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	2200      	movs	r2, #0
 8014832:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 8014836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014838:	2b00      	cmp	r3, #0
 801483a:	d02b      	beq.n	8014894 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801483c:	4b18      	ldr	r3, [pc, #96]	@ (80148a0 <prvSendData+0x1f4>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	2b01      	cmp	r3, #1
 8014842:	dd1d      	ble.n	8014880 <prvSendData+0x1d4>
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014848:	2b17      	cmp	r3, #23
 801484a:	d019      	beq.n	8014880 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014850:	4618      	mov	r0, r3
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014858:	461c      	mov	r4, r3
 801485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801485c:	691a      	ldr	r2, [r3, #16]
 801485e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014860:	68db      	ldr	r3, [r3, #12]
 8014862:	1ad1      	subs	r1, r2, r3
 8014864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801486a:	69db      	ldr	r3, [r3, #28]
 801486c:	1ad3      	subs	r3, r2, r3
 801486e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014870:	9201      	str	r2, [sp, #4]
 8014872:	9300      	str	r3, [sp, #0]
 8014874:	460b      	mov	r3, r1
 8014876:	4622      	mov	r2, r4
 8014878:	4601      	mov	r1, r0
 801487a:	480b      	ldr	r0, [pc, #44]	@ (80148a8 <prvSendData+0x1fc>)
 801487c:	f00d fee2 	bl	8022644 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	6819      	ldr	r1, [r3, #0]
 8014884:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014886:	2301      	movs	r3, #1
 8014888:	68f8      	ldr	r0, [r7, #12]
 801488a:	f7ff f8ff 	bl	8013a8c <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	2200      	movs	r2, #0
 8014892:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8014894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8014896:	4618      	mov	r0, r3
 8014898:	373c      	adds	r7, #60	@ 0x3c
 801489a:	46bd      	mov	sp, r7
 801489c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801489e:	bf00      	nop
 80148a0:	2000164c 	.word	0x2000164c
 80148a4:	08026f38 	.word	0x08026f38
 80148a8:	08026f70 	.word	0x08026f70

080148ac <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b084      	sub	sp, #16
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	460b      	mov	r3, r1
 80148b6:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 80148b8:	2301      	movs	r3, #1
 80148ba:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f7f5 fceb 	bl	800a298 <uxIPHeaderSizePacket>
 80148c2:	4603      	mov	r3, r0
 80148c4:	2b14      	cmp	r3, #20
 80148c6:	d002      	beq.n	80148ce <prvTCPSendSpecialPacketHelper+0x22>
 80148c8:	2b28      	cmp	r3, #40	@ 0x28
 80148ca:	d007      	beq.n	80148dc <prvTCPSendSpecialPacketHelper+0x30>
 80148cc:	e00d      	b.n	80148ea <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 80148ce:	78fb      	ldrb	r3, [r7, #3]
 80148d0:	4619      	mov	r1, r3
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f000 fb18 	bl	8014f08 <prvTCPSendSpecialPktHelper_IPV4>
 80148d8:	60f8      	str	r0, [r7, #12]
                        break;
 80148da:	e009      	b.n	80148f0 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 80148dc:	78fb      	ldrb	r3, [r7, #3]
 80148de:	4619      	mov	r1, r3
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f000 fe8b 	bl	80155fc <prvTCPSendSpecialPktHelper_IPV6>
 80148e6:	60f8      	str	r0, [r7, #12]
                        break;
 80148e8:	e002      	b.n	80148f0 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 80148ea:	2300      	movs	r3, #0
 80148ec:	60fb      	str	r3, [r7, #12]
                    break;
 80148ee:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 80148f0:	68fb      	ldr	r3, [r7, #12]
    }
 80148f2:	4618      	mov	r0, r3
 80148f4:	3710      	adds	r7, #16
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}

080148fa <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80148fa:	b580      	push	{r7, lr}
 80148fc:	b082      	sub	sp, #8
 80148fe:	af00      	add	r7, sp, #0
 8014900:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8014902:	2110      	movs	r1, #16
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7ff ffd1 	bl	80148ac <prvTCPSendSpecialPacketHelper>
 801490a:	4603      	mov	r3, r0
    }
 801490c:	4618      	mov	r0, r3
 801490e:	3708      	adds	r7, #8
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}

08014914 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 801491c:	2114      	movs	r1, #20
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f7ff ffc4 	bl	80148ac <prvTCPSendSpecialPacketHelper>
 8014924:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 8014926:	4618      	mov	r0, r3
 8014928:	3708      	adds	r7, #8
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
	...

08014930 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b0a6      	sub	sp, #152	@ 0x98
 8014934:	af00      	add	r7, sp, #0
 8014936:	60f8      	str	r0, [r7, #12]
 8014938:	60b9      	str	r1, [r7, #8]
 801493a:	607a      	str	r2, [r7, #4]
 801493c:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 801493e:	2300      	movs	r3, #0
 8014940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014944:	2300      	movs	r3, #0
 8014946:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 801494a:	2300      	movs	r3, #0
 801494c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8014954:	2300      	movs	r3, #0
 8014956:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 801495e:	2300      	movs	r3, #0
 8014960:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8014964:	2300      	movs	r3, #0
 8014966:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 8014968:	2314      	movs	r3, #20
 801496a:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 801496c:	2300      	movs	r3, #0
 801496e:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8014970:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014974:	2b00      	cmp	r3, #0
 8014976:	d117      	bne.n	80149a8 <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 8014978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801497c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8014980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014984:	2238      	movs	r2, #56	@ 0x38
 8014986:	2100      	movs	r1, #0
 8014988:	4618      	mov	r0, r3
 801498a:	f00e f984 	bl	8022c96 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8014994:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014998:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801499a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801499e:	225a      	movs	r2, #90	@ 0x5a
 80149a0:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 80149a2:	2300      	movs	r3, #0
 80149a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 80149a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d114      	bne.n	80149da <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 80149b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80149b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149b6:	4619      	mov	r1, r3
 80149b8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80149bc:	f7f5 ff1e 	bl	800a7fc <pxDuplicateNetworkBufferWithDescriptor>
 80149c0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 80149c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d003      	beq.n	80149d4 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 80149cc:	2301      	movs	r3, #1
 80149ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80149d2:	e002      	b.n	80149da <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 80149d4:	48bc      	ldr	r0, [pc, #752]	@ (8014cc8 <prvTCPReturnPacket_IPV4+0x398>)
 80149d6:	f00d fe35 	bl	8022644 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 80149da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80149de:	2b00      	cmp	r3, #0
 80149e0:	f000 8166 	beq.w	8014cb0 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80149e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80149e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149ea:	330e      	adds	r3, #14
 80149ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 80149ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80149f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 80149f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80149fc:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 80149fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014a04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014a06:	330e      	adds	r3, #14
 8014a08:	4413      	add	r3, r2
 8014a0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014a0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d10b      	bne.n	8014a30 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014a18:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014a1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014a1e:	68f8      	ldr	r0, [r7, #12]
 8014a20:	f7ff faf6 	bl	8014010 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	f000 813d 	beq.w	8014caa <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d028      	beq.n	8014a88 <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014a36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014a38:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014a3c:	68f8      	ldr	r0, [r7, #12]
 8014a3e:	f7ff f865 	bl	8013b0c <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014a4a:	68f8      	ldr	r0, [r7, #12]
 8014a4c:	f7ff f8d8 	bl	8013c00 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a54:	061a      	lsls	r2, r3, #24
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a5a:	021b      	lsls	r3, r3, #8
 8014a5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014a60:	431a      	orrs	r2, r3
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a66:	0a1b      	lsrs	r3, r3, #8
 8014a68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014a6c:	431a      	orrs	r2, r3
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a72:	0e1b      	lsrs	r3, r3, #24
 8014a74:	431a      	orrs	r2, r3
 8014a76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014a78:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8014a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a80:	681a      	ldr	r2, [r3, #0]
 8014a82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014a84:	60da      	str	r2, [r3, #12]
 8014a86:	e017      	b.n	8014ab8 <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8014a88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014a8c:	685b      	ldr	r3, [r3, #4]
 8014a8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014a94:	689a      	ldr	r2, [r3, #8]
 8014a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014a9a:	605a      	str	r2, [r3, #4]
 8014a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014aa0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014aa2:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8014aa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014aa6:	691b      	ldr	r3, [r3, #16]
 8014aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014aaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014aac:	68da      	ldr	r2, [r3, #12]
 8014aae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014ab0:	611a      	str	r2, [r3, #16]
 8014ab2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014ab4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014ab6:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8014ab8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014aba:	2280      	movs	r2, #128	@ 0x80
 8014abc:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	b29b      	uxth	r3, r3
 8014ac2:	021b      	lsls	r3, r3, #8
 8014ac4:	b29a      	uxth	r2, r3
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	0a1b      	lsrs	r3, r3, #8
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	4313      	orrs	r3, r2
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014ad2:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8014ad4:	4b7d      	ldr	r3, [pc, #500]	@ (8014ccc <prvTCPReturnPacket_IPV4+0x39c>)
 8014ad6:	881b      	ldrh	r3, [r3, #0]
 8014ad8:	021b      	lsls	r3, r3, #8
 8014ada:	b21a      	sxth	r2, r3
 8014adc:	4b7b      	ldr	r3, [pc, #492]	@ (8014ccc <prvTCPReturnPacket_IPV4+0x39c>)
 8014ade:	881b      	ldrh	r3, [r3, #0]
 8014ae0:	0a1b      	lsrs	r3, r3, #8
 8014ae2:	b29b      	uxth	r3, r3
 8014ae4:	b21b      	sxth	r3, r3
 8014ae6:	4313      	orrs	r3, r2
 8014ae8:	b21b      	sxth	r3, r3
 8014aea:	b29a      	uxth	r2, r3
 8014aec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014aee:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8014af0:	4b76      	ldr	r3, [pc, #472]	@ (8014ccc <prvTCPReturnPacket_IPV4+0x39c>)
 8014af2:	881b      	ldrh	r3, [r3, #0]
 8014af4:	3301      	adds	r3, #1
 8014af6:	b29a      	uxth	r2, r3
 8014af8:	4b74      	ldr	r3, [pc, #464]	@ (8014ccc <prvTCPReturnPacket_IPV4+0x39c>)
 8014afa:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8014afc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014afe:	2200      	movs	r2, #0
 8014b00:	719a      	strb	r2, [r3, #6]
 8014b02:	2200      	movs	r2, #0
 8014b04:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014b06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014b0a:	781a      	ldrb	r2, [r3, #0]
 8014b0c:	785b      	ldrb	r3, [r3, #1]
 8014b0e:	021b      	lsls	r3, r3, #8
 8014b10:	4313      	orrs	r3, r2
 8014b12:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8014b16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014b1a:	885b      	ldrh	r3, [r3, #2]
 8014b1c:	b29a      	uxth	r2, r3
 8014b1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014b22:	801a      	strh	r2, [r3, #0]
 8014b24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014b28:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8014b2c:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8014b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b32:	687a      	ldr	r2, [r7, #4]
 8014b34:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8014b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b3c:	f103 020e 	add.w	r2, r3, #14
 8014b40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b44:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b48:	3306      	adds	r3, #6
 8014b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014b4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b50:	691b      	ldr	r3, [r3, #16]
 8014b52:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8014b54:	f107 0214 	add.w	r2, r7, #20
 8014b58:	f107 011c 	add.w	r1, r7, #28
 8014b5c:	f107 0318 	add.w	r3, r7, #24
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7f2 fd7f 	bl	8007664 <eARPGetCacheEntry>
 8014b66:	4603      	mov	r3, r0
 8014b68:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8014b6c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8014b70:	2b01      	cmp	r3, #1
 8014b72:	d108      	bne.n	8014b86 <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8014b74:	f107 031c 	add.w	r3, r7, #28
 8014b78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8014b7c:	697a      	ldr	r2, [r7, #20]
 8014b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b82:	631a      	str	r2, [r3, #48]	@ 0x30
 8014b84:	e003      	b.n	8014b8e <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014b86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b88:	3306      	adds	r3, #6
 8014b8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	f000 808a 	beq.w	8014cae <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8014b9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b9c:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8014b9e:	2206      	movs	r2, #6
 8014ba0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014ba4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014ba6:	f00d ff69 	bl	8022a7c <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8014baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014bb0:	33e8      	adds	r3, #232	@ 0xe8
 8014bb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8014bb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014bb8:	3306      	adds	r3, #6
 8014bba:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014bbc:	2206      	movs	r2, #6
 8014bbe:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014bc2:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014bc4:	f00d ff5a 	bl	8022a7c <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8014bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bce:	2b3b      	cmp	r3, #59	@ 0x3b
 8014bd0:	d81a      	bhi.n	8014c08 <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014bd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014bdc:	e00c      	b.n	8014bf8 <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014be8:	4413      	add	r3, r2
 8014bea:	2200      	movs	r2, #0
 8014bec:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014bfc:	2b3b      	cmp	r3, #59	@ 0x3b
 8014bfe:	ddee      	ble.n	8014bde <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c04:	223c      	movs	r2, #60	@ 0x3c
 8014c06:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8014c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c0e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d104      	bne.n	8014c20 <prvTCPReturnPacket_IPV4+0x2f0>
 8014c16:	f240 111d 	movw	r1, #285	@ 0x11d
 8014c1a:	482d      	ldr	r0, [pc, #180]	@ (8014cd0 <prvTCPReturnPacket_IPV4+0x3a0>)
 8014c1c:	f7ec feae 	bl	800197c <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014c20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c26:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d104      	bne.n	8014c3a <prvTCPReturnPacket_IPV4+0x30a>
 8014c30:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8014c34:	4826      	ldr	r0, [pc, #152]	@ (8014cd0 <prvTCPReturnPacket_IPV4+0x3a0>)
 8014c36:	f7ec fea1 	bl	800197c <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8014c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c40:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014c44:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8014c46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014c48:	68db      	ldr	r3, [r3, #12]
 8014c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014c52:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8014c54:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8014c56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d121      	bne.n	8014ca2 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014c62:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8014c66:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8014c6a:	021b      	lsls	r3, r3, #8
 8014c6c:	4313      	orrs	r3, r2
 8014c6e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8014c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014c76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014c78:	b29a      	uxth	r2, r3
 8014c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014c7e:	845a      	strh	r2, [r3, #34]	@ 0x22
 8014c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014c84:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8014c88:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014c8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c8c:	691a      	ldr	r2, [r3, #16]
 8014c8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c90:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014c92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014c94:	3306      	adds	r3, #6
 8014c96:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8014c98:	2206      	movs	r2, #6
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f00d feee 	bl	8022a7c <memcpy>
 8014ca0:	e006      	b.n	8014cb0 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014ca8:	e002      	b.n	8014cb0 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 8014caa:	bf00      	nop
 8014cac:	e000      	b.n	8014cb0 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8014cae:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8014cb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014cb4:	2b01      	cmp	r3, #1
 8014cb6:	d103      	bne.n	8014cc0 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014cb8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014cbc:	f002 fe1a 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8014cc0:	bf00      	nop
 8014cc2:	3798      	adds	r7, #152	@ 0x98
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}
 8014cc8:	08026f9c 	.word	0x08026f9c
 8014ccc:	200011a4 	.word	0x200011a4
 8014cd0:	08026fc4 	.word	0x08026fc4

08014cd4 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cd6:	b093      	sub	sp, #76	@ 0x4c
 8014cd8:	af06      	add	r7, sp, #24
 8014cda:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014cdc:	2301      	movs	r3, #1
 8014cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014ce4:	f107 030c 	add.w	r3, r7, #12
 8014ce8:	2206      	movs	r2, #6
 8014cea:	2100      	movs	r1, #0
 8014cec:	4618      	mov	r0, r3
 8014cee:	f00d ffd2 	bl	8022c96 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014cf6:	061a      	lsls	r2, r3, #24
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014cfc:	021b      	lsls	r3, r3, #8
 8014cfe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014d02:	431a      	orrs	r2, r3
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d08:	0a1b      	lsrs	r3, r3, #8
 8014d0a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014d0e:	431a      	orrs	r2, r3
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d14:	0e1b      	lsrs	r3, r3, #24
 8014d16:	4313      	orrs	r3, r2
 8014d18:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8014d20:	f107 010c 	add.w	r1, r7, #12
 8014d24:	f107 0314 	add.w	r3, r7, #20
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7f2 fc9b 	bl	8007664 <eARPGetCacheEntry>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 8014d34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014d38:	2b01      	cmp	r3, #1
 8014d3a:	d037      	beq.n	8014dac <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8014d42:	3301      	adds	r3, #1
 8014d44:	b2da      	uxtb	r2, r3
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	061a      	lsls	r2, r3, #24
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	021b      	lsls	r3, r3, #8
 8014d58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014d5c:	431a      	orrs	r2, r3
 8014d5e:	697b      	ldr	r3, [r7, #20]
 8014d60:	0a1b      	lsrs	r3, r3, #8
 8014d62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014d66:	431a      	orrs	r2, r3
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	0e1b      	lsrs	r3, r3, #24
 8014d6c:	431a      	orrs	r2, r3
 8014d6e:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8014d72:	7b38      	ldrb	r0, [r7, #12]
 8014d74:	7b7c      	ldrb	r4, [r7, #13]
 8014d76:	7bbd      	ldrb	r5, [r7, #14]
 8014d78:	7bfe      	ldrb	r6, [r7, #15]
 8014d7a:	f897 c010 	ldrb.w	ip, [r7, #16]
 8014d7e:	f8c7 c000 	str.w	ip, [r7]
 8014d82:	f897 c011 	ldrb.w	ip, [r7, #17]
 8014d86:	4663      	mov	r3, ip
 8014d88:	9305      	str	r3, [sp, #20]
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	9304      	str	r3, [sp, #16]
 8014d8e:	9603      	str	r6, [sp, #12]
 8014d90:	9502      	str	r5, [sp, #8]
 8014d92:	9401      	str	r4, [sp, #4]
 8014d94:	9000      	str	r0, [sp, #0]
 8014d96:	4673      	mov	r3, lr
 8014d98:	485a      	ldr	r0, [pc, #360]	@ (8014f04 <prvTCPPrepareConnect_IPV4+0x230>)
 8014d9a:	f00d fc53 	bl	8022644 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	4618      	mov	r0, r3
 8014da2:	f7f2 feb3 	bl	8007b0c <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 8014da6:	2300      	movs	r3, #0
 8014da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8014daa:	e000      	b.n	8014dae <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8014dac:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d010      	beq.n	8014dd6 <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014dc6:	f7ec fdf9 	bl	80019bc <ulApplicationGetNextSequenceNumber>
 8014dca:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d101      	bne.n	8014dd6 <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 8014dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	f000 808d 	beq.w	8014ef8 <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	33aa      	adds	r3, #170	@ 0xaa
 8014de2:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 8014de4:	6a3b      	ldr	r3, [r7, #32]
 8014de6:	330e      	adds	r3, #14
 8014de8:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	2200      	movs	r2, #0
 8014dee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014df8:	f043 0308 	orr.w	r3, r3, #8
 8014dfc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	33aa      	adds	r3, #170	@ 0xaa
 8014e04:	225a      	movs	r2, #90	@ 0x5a
 8014e06:	2100      	movs	r1, #0
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f00d ff44 	bl	8022c96 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8014e0e:	6a3b      	ldr	r3, [r7, #32]
 8014e10:	3306      	adds	r3, #6
 8014e12:	461a      	mov	r2, r3
 8014e14:	f107 030c 	add.w	r3, r7, #12
 8014e18:	6818      	ldr	r0, [r3, #0]
 8014e1a:	6010      	str	r0, [r2, #0]
 8014e1c:	889b      	ldrh	r3, [r3, #4]
 8014e1e:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8014e20:	6a3b      	ldr	r3, [r7, #32]
 8014e22:	2200      	movs	r2, #0
 8014e24:	f042 0208 	orr.w	r2, r2, #8
 8014e28:	731a      	strb	r2, [r3, #12]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 8014e2e:	69fb      	ldr	r3, [r7, #28]
 8014e30:	2245      	movs	r2, #69	@ 0x45
 8014e32:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8014e34:	2338      	movs	r3, #56	@ 0x38
 8014e36:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8014e38:	8b7b      	ldrh	r3, [r7, #26]
 8014e3a:	021b      	lsls	r3, r3, #8
 8014e3c:	b21a      	sxth	r2, r3
 8014e3e:	8b7b      	ldrh	r3, [r7, #26]
 8014e40:	0a1b      	lsrs	r3, r3, #8
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	b21b      	sxth	r3, r3
 8014e46:	4313      	orrs	r3, r2
 8014e48:	b21b      	sxth	r3, r3
 8014e4a:	b29a      	uxth	r2, r3
 8014e4c:	69fb      	ldr	r3, [r7, #28]
 8014e4e:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8014e50:	69fb      	ldr	r3, [r7, #28]
 8014e52:	2280      	movs	r2, #128	@ 0x80
 8014e54:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 8014e56:	69fb      	ldr	r3, [r7, #28]
 8014e58:	2206      	movs	r2, #6
 8014e5a:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e60:	061a      	lsls	r2, r3, #24
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e66:	021b      	lsls	r3, r3, #8
 8014e68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014e6c:	431a      	orrs	r2, r3
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e72:	0a1b      	lsrs	r3, r3, #8
 8014e74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014e78:	431a      	orrs	r2, r3
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e7e:	0e1b      	lsrs	r3, r3, #24
 8014e80:	431a      	orrs	r2, r3
 8014e82:	69fb      	ldr	r3, [r7, #28]
 8014e84:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014e8c:	021b      	lsls	r3, r3, #8
 8014e8e:	b21a      	sxth	r2, r3
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014e96:	0a1b      	lsrs	r3, r3, #8
 8014e98:	b29b      	uxth	r3, r3
 8014e9a:	b21b      	sxth	r3, r3
 8014e9c:	4313      	orrs	r3, r2
 8014e9e:	b21b      	sxth	r3, r3
 8014ea0:	b29a      	uxth	r2, r3
 8014ea2:	6a3b      	ldr	r3, [r7, #32]
 8014ea4:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014eaa:	021b      	lsls	r3, r3, #8
 8014eac:	b21a      	sxth	r2, r3
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014eb2:	0a1b      	lsrs	r3, r3, #8
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	b21b      	sxth	r3, r3
 8014eb8:	4313      	orrs	r3, r2
 8014eba:	b21b      	sxth	r3, r3
 8014ebc:	b29a      	uxth	r2, r3
 8014ebe:	6a3b      	ldr	r3, [r7, #32]
 8014ec0:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ece:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8014ed2:	6a3b      	ldr	r3, [r7, #32]
 8014ed4:	2250      	movs	r2, #80	@ 0x50
 8014ed6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8014eda:	6a3b      	ldr	r3, [r7, #32]
 8014edc:	2202      	movs	r2, #2
 8014ede:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f000 fc3c 	bl	8015760 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8014ee8:	6878      	ldr	r0, [r7, #4]
 8014eea:	f7fe ff2b 	bl	8013d44 <prvTCPCreateWindow>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	2b01      	cmp	r3, #1
 8014ef2:	d001      	beq.n	8014ef8 <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 8014ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8014efa:	4618      	mov	r0, r3
 8014efc:	3734      	adds	r7, #52	@ 0x34
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f02:	bf00      	nop
 8014f04:	08027004 	.word	0x08027004

08014f08 <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b086      	sub	sp, #24
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	460b      	mov	r3, r1
 8014f12:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f18:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 8014f1a:	2328      	movs	r3, #40	@ 0x28
 8014f1c:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014f24:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 8014f26:	697b      	ldr	r3, [r7, #20]
 8014f28:	78fa      	ldrb	r2, [r7, #3]
 8014f2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8014f2e:	697b      	ldr	r3, [r7, #20]
 8014f30:	2250      	movs	r2, #80	@ 0x50
 8014f32:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 8014f36:	7bfb      	ldrb	r3, [r7, #15]
 8014f38:	f003 0302 	and.w	r3, r3, #2
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d02c      	beq.n	8014f9a <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8014f40:	697b      	ldr	r3, [r7, #20]
 8014f42:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8014f46:	061a      	lsls	r2, r3, #24
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8014f4e:	021b      	lsls	r3, r3, #8
 8014f50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014f54:	431a      	orrs	r2, r3
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8014f5c:	0a1b      	lsrs	r3, r3, #8
 8014f5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014f62:	431a      	orrs	r2, r3
 8014f64:	697b      	ldr	r3, [r7, #20]
 8014f66:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8014f6a:	0e1b      	lsrs	r3, r3, #24
 8014f6c:	4313      	orrs	r3, r2
 8014f6e:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	3301      	adds	r3, #1
 8014f74:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	061a      	lsls	r2, r3, #24
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	021b      	lsls	r3, r3, #8
 8014f7e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014f82:	431a      	orrs	r2, r3
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	0a1b      	lsrs	r3, r3, #8
 8014f88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014f8c:	431a      	orrs	r2, r3
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	0e1b      	lsrs	r3, r3, #24
 8014f92:	431a      	orrs	r2, r3
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	693a      	ldr	r2, [r7, #16]
 8014f9e:	6879      	ldr	r1, [r7, #4]
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	f7fe fd73 	bl	8013a8c <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 8014fa6:	2300      	movs	r3, #0
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3718      	adds	r7, #24
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}

08014fb0 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014fb0:	b5b0      	push	{r4, r5, r7, lr}
 8014fb2:	b0aa      	sub	sp, #168	@ 0xa8
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	60f8      	str	r0, [r7, #12]
 8014fb8:	60b9      	str	r1, [r7, #8]
 8014fba:	607a      	str	r2, [r7, #4]
 8014fbc:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 8014fee:	2328      	movs	r3, #40	@ 0x28
 8014ff0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8014ff4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d103      	bne.n	8015004 <prvTCPReturnPacket_IPV6+0x54>
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	f000 81ae 	beq.w	8015360 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8015004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015008:	2b00      	cmp	r3, #0
 801500a:	d117      	bne.n	801503c <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 801500c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015010:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8015014:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015018:	2238      	movs	r2, #56	@ 0x38
 801501a:	2100      	movs	r1, #0
 801501c:	4618      	mov	r0, r3
 801501e:	f00d fe3a 	bl	8022c96 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8015028:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801502c:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801502e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015032:	225a      	movs	r2, #90	@ 0x5a
 8015034:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8015036:	2300      	movs	r3, #0
 8015038:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 801503c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015040:	2b00      	cmp	r3, #0
 8015042:	d114      	bne.n	801506e <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8015044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801504a:	4619      	mov	r1, r3
 801504c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8015050:	f7f5 fbd4 	bl	800a7fc <pxDuplicateNetworkBufferWithDescriptor>
 8015054:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 8015058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801505c:	2b00      	cmp	r3, #0
 801505e:	d003      	beq.n	8015068 <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 8015060:	2301      	movs	r3, #1
 8015062:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8015066:	e002      	b.n	801506e <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8015068:	48c0      	ldr	r0, [pc, #768]	@ (801536c <prvTCPReturnPacket_IPV6+0x3bc>)
 801506a:	f00d faeb 	bl	8022644 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 801506e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015072:	2b00      	cmp	r3, #0
 8015074:	f000 8175 	beq.w	8015362 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8015078:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801507e:	2b00      	cmp	r3, #0
 8015080:	d103      	bne.n	801508a <prvTCPReturnPacket_IPV6+0xda>
 8015082:	219d      	movs	r1, #157	@ 0x9d
 8015084:	48ba      	ldr	r0, [pc, #744]	@ (8015370 <prvTCPReturnPacket_IPV6+0x3c0>)
 8015086:	f7ec fc79 	bl	800197c <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801508a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801508e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015090:	330e      	adds	r3, #14
 8015092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8015096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801509c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 80150a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80150a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 80150a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80150ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80150ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80150b2:	330e      	adds	r3, #14
 80150b4:	4413      	add	r3, r2
 80150b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 80150ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80150be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d117      	bne.n	80150f4 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 80150c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80150c8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80150cc:	68f8      	ldr	r0, [r7, #12]
 80150ce:	f7fe ff9f 	bl	8014010 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 80150d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80150d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d10b      	bne.n	80150f4 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 80150dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d003      	beq.n	80150ec <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80150e4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80150e8:	f002 fc04 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 80150ec:	2300      	movs	r3, #0
 80150ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 80150f2:	e136      	b.n	8015362 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d025      	beq.n	8015146 <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 80150fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80150fe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015102:	68f8      	ldr	r0, [r7, #12]
 8015104:	f7fe fd02 	bl	8013b0c <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801510e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015112:	68f8      	ldr	r0, [r7, #12]
 8015114:	f7fe fd74 	bl	8013c00 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801511c:	f103 0018 	add.w	r0, r3, #24
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	3354      	adds	r3, #84	@ 0x54
 8015124:	2210      	movs	r2, #16
 8015126:	4619      	mov	r1, r3
 8015128:	f00d fca8 	bl	8022a7c <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801512c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015130:	f103 0008 	add.w	r0, r3, #8
 8015134:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801513a:	3338      	adds	r3, #56	@ 0x38
 801513c:	2210      	movs	r2, #16
 801513e:	4619      	mov	r1, r3
 8015140:	f00d fc9c 	bl	8022a7c <memcpy>
 8015144:	e02d      	b.n	80151a2 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8015146:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801514a:	685b      	ldr	r3, [r3, #4]
 801514c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801514e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015152:	689a      	ldr	r2, [r3, #8]
 8015154:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015158:	605a      	str	r2, [r3, #4]
 801515a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801515e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8015160:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015166:	3318      	adds	r3, #24
 8015168:	f107 0410 	add.w	r4, r7, #16
 801516c:	6818      	ldr	r0, [r3, #0]
 801516e:	6859      	ldr	r1, [r3, #4]
 8015170:	689a      	ldr	r2, [r3, #8]
 8015172:	68db      	ldr	r3, [r3, #12]
 8015174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801517a:	f103 0018 	add.w	r0, r3, #24
 801517e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015182:	3308      	adds	r3, #8
 8015184:	2210      	movs	r2, #16
 8015186:	4619      	mov	r1, r3
 8015188:	f00d fc78 	bl	8022a7c <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801518c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015190:	3308      	adds	r3, #8
 8015192:	461d      	mov	r5, r3
 8015194:	f107 0410 	add.w	r4, r7, #16
 8015198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801519a:	6028      	str	r0, [r5, #0]
 801519c:	6069      	str	r1, [r5, #4]
 801519e:	60aa      	str	r2, [r5, #8]
 80151a0:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	3b28      	subs	r3, #40	@ 0x28
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	021b      	lsls	r3, r3, #8
 80151ac:	b29a      	uxth	r2, r3
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	3b28      	subs	r3, #40	@ 0x28
 80151b2:	0a1b      	lsrs	r3, r3, #8
 80151b4:	b29b      	uxth	r3, r3
 80151b6:	4313      	orrs	r3, r2
 80151b8:	b29a      	uxth	r2, r3
 80151ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80151be:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 80151c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80151c4:	781a      	ldrb	r2, [r3, #0]
 80151c6:	785b      	ldrb	r3, [r3, #1]
 80151c8:	021b      	lsls	r3, r3, #8
 80151ca:	4313      	orrs	r3, r2
 80151cc:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80151d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80151d4:	885b      	ldrh	r3, [r3, #2]
 80151d6:	b29a      	uxth	r2, r3
 80151d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80151dc:	801a      	strh	r2, [r3, #0]
 80151de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80151e2:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80151e6:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 80151e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151ec:	687a      	ldr	r2, [r7, #4]
 80151ee:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 80151f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151f6:	f103 020e 	add.w	r2, r3, #14
 80151fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151fe:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015204:	3318      	adds	r3, #24
 8015206:	f107 0420 	add.w	r4, r7, #32
 801520a:	6818      	ldr	r0, [r3, #0]
 801520c:	6859      	ldr	r1, [r3, #4]
 801520e:	689a      	ldr	r2, [r3, #8]
 8015210:	68db      	ldr	r3, [r3, #12]
 8015212:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8015214:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015218:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801521c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015220:	f107 0320 	add.w	r3, r7, #32
 8015224:	4618      	mov	r0, r3
 8015226:	f7f6 fe89 	bl	800bf3c <eNDGetCacheEntry>
 801522a:	4603      	mov	r3, r0
 801522c:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 8015230:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8015234:	2b01      	cmp	r3, #1
 8015236:	d104      	bne.n	8015242 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 8015238:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801523c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015240:	e004      	b.n	801524c <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8015242:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015246:	3306      	adds	r3, #6
 8015248:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 801524c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8015254:	2206      	movs	r2, #6
 8015256:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801525a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801525e:	f00d fc0d 	bl	8022a7c <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8015262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015268:	33e8      	adds	r3, #232	@ 0xe8
 801526a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 801526e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015272:	3306      	adds	r3, #6
 8015274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8015278:	2206      	movs	r2, #6
 801527a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801527e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8015282:	f00d fbfb 	bl	8022a7c <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8015286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801528a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801528c:	2b3b      	cmp	r3, #59	@ 0x3b
 801528e:	d81a      	bhi.n	80152c6 <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8015290:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015296:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801529a:	e00c      	b.n	80152b6 <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 801529c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80152a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80152a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80152a6:	4413      	add	r3, r2
 80152a8:	2200      	movs	r2, #0
 80152aa:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80152ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80152b0:	3301      	adds	r3, #1
 80152b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80152b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80152ba:	2b3b      	cmp	r3, #59	@ 0x3b
 80152bc:	ddee      	ble.n	801529c <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80152be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80152c2:	223c      	movs	r2, #60	@ 0x3c
 80152c4:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 80152c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80152ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152cc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d104      	bne.n	80152de <prvTCPReturnPacket_IPV6+0x32e>
 80152d4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80152d8:	4825      	ldr	r0, [pc, #148]	@ (8015370 <prvTCPReturnPacket_IPV6+0x3c0>)
 80152da:	f7ec fb4f 	bl	800197c <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 80152de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80152e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152e4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80152e8:	68db      	ldr	r3, [r3, #12]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d104      	bne.n	80152f8 <prvTCPReturnPacket_IPV6+0x348>
 80152ee:	f240 1119 	movw	r1, #281	@ 0x119
 80152f2:	481f      	ldr	r0, [pc, #124]	@ (8015370 <prvTCPReturnPacket_IPV6+0x3c0>)
 80152f4:	f7ec fb42 	bl	800197c <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80152f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80152fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152fe:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015302:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8015304:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015306:	68db      	ldr	r3, [r3, #12]
 8015308:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801530c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015310:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8015312:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8015314:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015318:	2b00      	cmp	r3, #0
 801531a:	d122      	bne.n	8015362 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 801531c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015320:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8015324:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8015328:	021b      	lsls	r3, r3, #8
 801532a:	4313      	orrs	r3, r2
 801532c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8015330:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015334:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8015336:	b29a      	uxth	r2, r3
 8015338:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801533c:	86da      	strh	r2, [r3, #54]	@ 0x36
 801533e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015342:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8015346:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015348:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801534c:	f103 0008 	add.w	r0, r3, #8
 8015350:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015354:	3318      	adds	r3, #24
 8015356:	2210      	movs	r2, #16
 8015358:	4619      	mov	r1, r3
 801535a:	f00d fb8f 	bl	8022a7c <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 801535e:	e000      	b.n	8015362 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 8015360:	bf00      	nop
}
 8015362:	bf00      	nop
 8015364:	37a8      	adds	r7, #168	@ 0xa8
 8015366:	46bd      	mov	sp, r7
 8015368:	bdb0      	pop	{r4, r5, r7, pc}
 801536a:	bf00      	nop
 801536c:	08027044 	.word	0x08027044
 8015370:	0802706c 	.word	0x0802706c

08015374 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8015374:	b590      	push	{r4, r7, lr}
 8015376:	b093      	sub	sp, #76	@ 0x4c
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 801537c:	2300      	movs	r3, #0
 801537e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8015380:	2300      	movs	r3, #0
 8015382:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8015384:	2301      	movs	r3, #1
 8015386:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 8015388:	2300      	movs	r3, #0
 801538a:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 801538c:	2300      	movs	r3, #0
 801538e:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 8015390:	2300      	movs	r3, #0
 8015392:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8015394:	f107 0310 	add.w	r3, r7, #16
 8015398:	2206      	movs	r2, #6
 801539a:	2100      	movs	r1, #0
 801539c:	4618      	mov	r0, r3
 801539e:	f00d fc7a 	bl	8022c96 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 80153a2:	f107 0318 	add.w	r3, r7, #24
 80153a6:	2210      	movs	r2, #16
 80153a8:	2100      	movs	r1, #0
 80153aa:	4618      	mov	r0, r3
 80153ac:	f00d fc73 	bl	8022c96 <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	3354      	adds	r3, #84	@ 0x54
 80153b4:	f107 0418 	add.w	r4, r7, #24
 80153b8:	6818      	ldr	r0, [r3, #0]
 80153ba:	6859      	ldr	r1, [r3, #4]
 80153bc:	689a      	ldr	r2, [r3, #8]
 80153be:	68db      	ldr	r3, [r3, #12]
 80153c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 80153c2:	f107 020c 	add.w	r2, r7, #12
 80153c6:	f107 0110 	add.w	r1, r7, #16
 80153ca:	f107 0318 	add.w	r3, r7, #24
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7f6 fdb4 	bl	800bf3c <eNDGetCacheEntry>
 80153d4:	4603      	mov	r3, r0
 80153d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 80153da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80153de:	68fa      	ldr	r2, [r7, #12]
 80153e0:	4619      	mov	r1, r3
 80153e2:	4881      	ldr	r0, [pc, #516]	@ (80155e8 <prvTCPPrepareConnect_IPV6+0x274>)
 80153e4:	f00d f92e 	bl	8022644 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d002      	beq.n	80153f4 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 80153ee:	68fa      	ldr	r2, [r7, #12]
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f7f4 ff69 	bl	800a2cc <uxIPHeaderSizeSocket>
 80153fa:	4603      	mov	r3, r0
 80153fc:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80153fe:	33a0      	adds	r3, #160	@ 0xa0
 8015400:	687a      	ldr	r2, [r7, #4]
 8015402:	4413      	add	r3, r2
 8015404:	330a      	adds	r3, #10
 8015406:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 8015408:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801540c:	2b01      	cmp	r3, #1
 801540e:	d02c      	beq.n	801546a <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8015416:	3301      	adds	r3, #1
 8015418:	b2da      	uxtb	r2, r3
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d001      	beq.n	801542a <prvTCPPrepareConnect_IPV6+0xb6>
 8015426:	4a71      	ldr	r2, [pc, #452]	@ (80155ec <prvTCPPrepareConnect_IPV6+0x278>)
 8015428:	e000      	b.n	801542c <prvTCPPrepareConnect_IPV6+0xb8>
 801542a:	4a71      	ldr	r2, [pc, #452]	@ (80155f0 <prvTCPPrepareConnect_IPV6+0x27c>)
 801542c:	f107 0318 	add.w	r3, r7, #24
 8015430:	4619      	mov	r1, r3
 8015432:	4870      	ldr	r0, [pc, #448]	@ (80155f4 <prvTCPPrepareConnect_IPV6+0x280>)
 8015434:	f00d f906 	bl	8022644 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d012      	beq.n	8015464 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 801543e:	2356      	movs	r3, #86	@ 0x56
 8015440:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 8015442:	2100      	movs	r1, #0
 8015444:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015446:	f002 f9ed 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 801544a:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 801544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801544e:	2b00      	cmp	r3, #0
 8015450:	d008      	beq.n	8015464 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8015452:	68fa      	ldr	r2, [r7, #12]
 8015454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015456:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 8015458:	f107 0318 	add.w	r3, r7, #24
 801545c:	4619      	mov	r1, r3
 801545e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015460:	f7f6 ffd8 	bl	800c414 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 8015464:	2300      	movs	r3, #0
 8015466:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 8015468:	e000      	b.n	801546c <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 801546a:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 801546c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801546e:	2b00      	cmp	r3, #0
 8015470:	d010      	beq.n	8015494 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015484:	f7ec fa9a 	bl	80019bc <ulApplicationGetNextSequenceNumber>
 8015488:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 801548a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801548c:	2b00      	cmp	r3, #0
 801548e:	d101      	bne.n	8015494 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 8015490:	2300      	movs	r3, #0
 8015492:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 8015494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015496:	2b00      	cmp	r3, #0
 8015498:	d05d      	beq.n	8015556 <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	33aa      	adds	r3, #170	@ 0xaa
 801549e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 80154a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154a2:	330e      	adds	r3, #14
 80154a4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	2200      	movs	r2, #0
 80154aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 80154ae:	687a      	ldr	r2, [r7, #4]
 80154b0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80154b4:	f043 0308 	orr.w	r3, r3, #8
 80154b8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	33aa      	adds	r3, #170	@ 0xaa
 80154c0:	225a      	movs	r2, #90	@ 0x5a
 80154c2:	2100      	movs	r1, #0
 80154c4:	4618      	mov	r0, r3
 80154c6:	f00d fbe6 	bl	8022c96 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 80154ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154cc:	3306      	adds	r3, #6
 80154ce:	461a      	mov	r2, r3
 80154d0:	f107 0310 	add.w	r3, r7, #16
 80154d4:	6818      	ldr	r0, [r3, #0]
 80154d6:	6010      	str	r0, [r2, #0]
 80154d8:	889b      	ldrh	r3, [r3, #4]
 80154da:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	7a1b      	ldrb	r3, [r3, #8]
 80154e0:	f003 0301 	and.w	r3, r3, #1
 80154e4:	b2db      	uxtb	r3, r3
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d035      	beq.n	8015556 <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 80154ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154ec:	2200      	movs	r2, #0
 80154ee:	f062 0279 	orn	r2, r2, #121	@ 0x79
 80154f2:	731a      	strb	r2, [r3, #12]
 80154f4:	2200      	movs	r2, #0
 80154f6:	f062 0222 	orn	r2, r2, #34	@ 0x22
 80154fa:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 80154fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154fe:	2260      	movs	r2, #96	@ 0x60
 8015500:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8015502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015504:	2200      	movs	r2, #0
 8015506:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 8015508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801550a:	2200      	movs	r2, #0
 801550c:	709a      	strb	r2, [r3, #2]
 801550e:	2200      	movs	r2, #0
 8015510:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8015512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015514:	2200      	movs	r2, #0
 8015516:	711a      	strb	r2, [r3, #4]
 8015518:	2200      	movs	r2, #0
 801551a:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 801551e:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8015520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015522:	2206      	movs	r2, #6
 8015524:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 8015526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015528:	2280      	movs	r2, #128	@ 0x80
 801552a:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 801552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801552e:	f103 0008 	add.w	r0, r3, #8
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	3354      	adds	r3, #84	@ 0x54
 8015536:	2210      	movs	r2, #16
 8015538:	4619      	mov	r1, r3
 801553a:	f00d fa9f 	bl	8022a7c <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 801553e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015540:	f103 0018 	add.w	r0, r3, #24
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	3328      	adds	r3, #40	@ 0x28
 8015548:	2210      	movs	r2, #16
 801554a:	4619      	mov	r1, r3
 801554c:	f00d fa96 	bl	8022a7c <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015554:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d03a      	beq.n	80155d2 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 801555c:	68fa      	ldr	r2, [r7, #12]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015568:	021b      	lsls	r3, r3, #8
 801556a:	b21a      	sxth	r2, r3
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015572:	0a1b      	lsrs	r3, r3, #8
 8015574:	b29b      	uxth	r3, r3
 8015576:	b21b      	sxth	r3, r3
 8015578:	4313      	orrs	r3, r2
 801557a:	b21b      	sxth	r3, r3
 801557c:	b29a      	uxth	r2, r3
 801557e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015580:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8015586:	021b      	lsls	r3, r3, #8
 8015588:	b21a      	sxth	r2, r3
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801558e:	0a1b      	lsrs	r3, r3, #8
 8015590:	b29b      	uxth	r3, r3
 8015592:	b21b      	sxth	r3, r3
 8015594:	4313      	orrs	r3, r2
 8015596:	b21b      	sxth	r3, r3
 8015598:	b29a      	uxth	r2, r3
 801559a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801559c:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2200      	movs	r2, #0
 80155a2:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80155aa:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 80155ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80155b0:	2250      	movs	r2, #80	@ 0x50
 80155b2:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 80155b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80155b6:	2202      	movs	r2, #2
 80155b8:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 80155ba:	6878      	ldr	r0, [r7, #4]
 80155bc:	f000 f8d0 	bl	8015760 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f7fe fbbf 	bl	8013d44 <prvTCPCreateWindow>
 80155c6:	4603      	mov	r3, r0
 80155c8:	2b01      	cmp	r3, #1
 80155ca:	d007      	beq.n	80155dc <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 80155cc:	2300      	movs	r3, #0
 80155ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80155d0:	e004      	b.n	80155dc <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 80155d2:	4809      	ldr	r0, [pc, #36]	@ (80155f8 <prvTCPPrepareConnect_IPV6+0x284>)
 80155d4:	f00d f836 	bl	8022644 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 80155d8:	2300      	movs	r3, #0
 80155da:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 80155dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80155de:	4618      	mov	r0, r3
 80155e0:	374c      	adds	r7, #76	@ 0x4c
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd90      	pop	{r4, r7, pc}
 80155e6:	bf00      	nop
 80155e8:	080270ac 	.word	0x080270ac
 80155ec:	080270d4 	.word	0x080270d4
 80155f0:	080270d8 	.word	0x080270d8
 80155f4:	080270dc 	.word	0x080270dc
 80155f8:	08027100 	.word	0x08027100

080155fc <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b086      	sub	sp, #24
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	460b      	mov	r3, r1
 8015606:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801560c:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801560e:	233c      	movs	r3, #60	@ 0x3c
 8015610:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8015612:	697b      	ldr	r3, [r7, #20]
 8015614:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015618:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	78fa      	ldrb	r2, [r7, #3]
 801561e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	2250      	movs	r2, #80	@ 0x50
 8015626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801562a:	7bfb      	ldrb	r3, [r7, #15]
 801562c:	f003 0302 	and.w	r3, r3, #2
 8015630:	2b00      	cmp	r3, #0
 8015632:	d02c      	beq.n	801568e <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801563a:	061a      	lsls	r2, r3, #24
 801563c:	697b      	ldr	r3, [r7, #20]
 801563e:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8015642:	021b      	lsls	r3, r3, #8
 8015644:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015648:	431a      	orrs	r2, r3
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8015650:	0a1b      	lsrs	r3, r3, #8
 8015652:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015656:	431a      	orrs	r2, r3
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801565e:	0e1b      	lsrs	r3, r3, #24
 8015660:	4313      	orrs	r3, r2
 8015662:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8015664:	68bb      	ldr	r3, [r7, #8]
 8015666:	3301      	adds	r3, #1
 8015668:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	061a      	lsls	r2, r3, #24
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	021b      	lsls	r3, r3, #8
 8015672:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015676:	431a      	orrs	r2, r3
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	0a1b      	lsrs	r3, r3, #8
 801567c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015680:	431a      	orrs	r2, r3
 8015682:	68bb      	ldr	r3, [r7, #8]
 8015684:	0e1b      	lsrs	r3, r3, #24
 8015686:	431a      	orrs	r2, r3
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 801568e:	2300      	movs	r3, #0
 8015690:	693a      	ldr	r2, [r7, #16]
 8015692:	6879      	ldr	r1, [r7, #4]
 8015694:	2000      	movs	r0, #0
 8015696:	f7fe f9f9 	bl	8013a8c <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 801569a:	2300      	movs	r3, #0
}
 801569c:	4618      	mov	r0, r3
 801569e:	3718      	adds	r7, #24
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}

080156a4 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 80156a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156a6:	b08d      	sub	sp, #52	@ 0x34
 80156a8:	af08      	add	r7, sp, #32
 80156aa:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d002      	beq.n	80156c0 <prvTCPFlagMeaning+0x1c>
 80156ba:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 80156be:	e001      	b.n	80156c4 <prvTCPFlagMeaning+0x20>
 80156c0:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d001      	beq.n	80156d2 <prvTCPFlagMeaning+0x2e>
 80156ce:	2353      	movs	r3, #83	@ 0x53
 80156d0:	e000      	b.n	80156d4 <prvTCPFlagMeaning+0x30>
 80156d2:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 80156d4:	68fa      	ldr	r2, [r7, #12]
 80156d6:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 80156da:	2a00      	cmp	r2, #0
 80156dc:	d001      	beq.n	80156e2 <prvTCPFlagMeaning+0x3e>
 80156de:	2252      	movs	r2, #82	@ 0x52
 80156e0:	e000      	b.n	80156e4 <prvTCPFlagMeaning+0x40>
 80156e2:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 80156e4:	68f9      	ldr	r1, [r7, #12]
 80156e6:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 80156ea:	2900      	cmp	r1, #0
 80156ec:	d001      	beq.n	80156f2 <prvTCPFlagMeaning+0x4e>
 80156ee:	2150      	movs	r1, #80	@ 0x50
 80156f0:	e000      	b.n	80156f4 <prvTCPFlagMeaning+0x50>
 80156f2:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 80156f4:	68f8      	ldr	r0, [r7, #12]
 80156f6:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 80156fa:	2800      	cmp	r0, #0
 80156fc:	d001      	beq.n	8015702 <prvTCPFlagMeaning+0x5e>
 80156fe:	2041      	movs	r0, #65	@ 0x41
 8015700:	e000      	b.n	8015704 <prvTCPFlagMeaning+0x60>
 8015702:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8015704:	68fc      	ldr	r4, [r7, #12]
 8015706:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 801570a:	2c00      	cmp	r4, #0
 801570c:	d001      	beq.n	8015712 <prvTCPFlagMeaning+0x6e>
 801570e:	2455      	movs	r4, #85	@ 0x55
 8015710:	e000      	b.n	8015714 <prvTCPFlagMeaning+0x70>
 8015712:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8015714:	68fd      	ldr	r5, [r7, #12]
 8015716:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 801571a:	2d00      	cmp	r5, #0
 801571c:	d001      	beq.n	8015722 <prvTCPFlagMeaning+0x7e>
 801571e:	2545      	movs	r5, #69	@ 0x45
 8015720:	e000      	b.n	8015724 <prvTCPFlagMeaning+0x80>
 8015722:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 8015724:	68fe      	ldr	r6, [r7, #12]
 8015726:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 801572a:	2e00      	cmp	r6, #0
 801572c:	d001      	beq.n	8015732 <prvTCPFlagMeaning+0x8e>
 801572e:	2643      	movs	r6, #67	@ 0x43
 8015730:	e000      	b.n	8015734 <prvTCPFlagMeaning+0x90>
 8015732:	262e      	movs	r6, #46	@ 0x2e
 8015734:	9606      	str	r6, [sp, #24]
 8015736:	9505      	str	r5, [sp, #20]
 8015738:	9404      	str	r4, [sp, #16]
 801573a:	9003      	str	r0, [sp, #12]
 801573c:	9102      	str	r1, [sp, #8]
 801573e:	9201      	str	r2, [sp, #4]
 8015740:	9300      	str	r3, [sp, #0]
 8015742:	4663      	mov	r3, ip
 8015744:	4a04      	ldr	r2, [pc, #16]	@ (8015758 <prvTCPFlagMeaning+0xb4>)
 8015746:	210a      	movs	r1, #10
 8015748:	4804      	ldr	r0, [pc, #16]	@ (801575c <prvTCPFlagMeaning+0xb8>)
 801574a:	f00d ffa7 	bl	802369c <snprintf>
            return retString;
 801574e:	4b03      	ldr	r3, [pc, #12]	@ (801575c <prvTCPFlagMeaning+0xb8>)
        }
 8015750:	4618      	mov	r0, r3
 8015752:	3714      	adds	r7, #20
 8015754:	46bd      	mov	sp, r7
 8015756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015758:	0802712c 	.word	0x0802712c
 801575c:	20001628 	.word	0x20001628

08015760 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 8015760:	b580      	push	{r7, lr}
 8015762:	b082      	sub	sp, #8
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	7a1b      	ldrb	r3, [r3, #8]
 801576c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015770:	b2db      	uxtb	r3, r3
 8015772:	2b00      	cmp	r3, #0
 8015774:	d002      	beq.n	801577c <prvSocketSetMSS+0x1c>
 8015776:	2b01      	cmp	r3, #1
 8015778:	d004      	beq.n	8015784 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801577a:	e007      	b.n	801578c <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 801577c:	6878      	ldr	r0, [r7, #4]
 801577e:	f000 f809 	bl	8015794 <prvSocketSetMSS_IPV4>
                    break;
 8015782:	e003      	b.n	801578c <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 8015784:	6878      	ldr	r0, [r7, #4]
 8015786:	f000 f84b 	bl	8015820 <prvSocketSetMSS_IPV6>
                    break;
 801578a:	bf00      	nop
        }
    }
 801578c:	bf00      	nop
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b084      	sub	sp, #16
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 801579c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80157a0:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80157a6:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d023      	beq.n	80157f6 <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 80157ae:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80157b2:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80157b8:	061a      	lsls	r2, r3, #24
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80157be:	021b      	lsls	r3, r3, #8
 80157c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80157c4:	431a      	orrs	r2, r3
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80157ca:	0a1b      	lsrs	r3, r3, #8
 80157cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80157d0:	431a      	orrs	r2, r3
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80157d6:	0e1b      	lsrs	r3, r3, #24
 80157d8:	431a      	orrs	r2, r3
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	405a      	eors	r2, r3
 80157e0:	68bb      	ldr	r3, [r7, #8]
 80157e2:	685b      	ldr	r3, [r3, #4]
 80157e4:	4013      	ands	r3, r2
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d005      	beq.n	80157f6 <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 80157ea:	68f9      	ldr	r1, [r7, #12]
 80157ec:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80157f0:	f7f5 faa0 	bl	800ad34 <FreeRTOS_min_uint32>
 80157f4:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015800:	68f9      	ldr	r1, [r7, #12]
 8015802:	4806      	ldr	r0, [pc, #24]	@ (801581c <prvSocketSetMSS_IPV4+0x88>)
 8015804:	f00c ff1e 	bl	8022644 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	b29a      	uxth	r2, r3
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8015812:	bf00      	nop
 8015814:	3710      	adds	r7, #16
 8015816:	46bd      	mov	sp, r7
 8015818:	bd80      	pop	{r7, pc}
 801581a:	bf00      	nop
 801581c:	08027140 	.word	0x08027140

08015820 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b090      	sub	sp, #64	@ 0x40
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8015828:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 801582c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 801582e:	2300      	movs	r3, #0
 8015830:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d103      	bne.n	8015840 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 8015838:	481f      	ldr	r0, [pc, #124]	@ (80158b8 <prvSocketSetMSS_IPV6+0x98>)
 801583a:	f00c ff03 	bl	8022644 <lUDPLoggingPrintf>

            break;
 801583e:	e036      	b.n	80158ae <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015844:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 8015846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015848:	2b00      	cmp	r3, #0
 801584a:	d018      	beq.n	801587e <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 801584c:	2314      	movs	r3, #20
 801584e:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 8015850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015852:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015856:	1a9b      	subs	r3, r3, r2
 8015858:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	3354      	adds	r3, #84	@ 0x54
 801585e:	4618      	mov	r0, r3
 8015860:	f7f8 fc96 	bl	800e190 <xIPv6_GetIPType>
 8015864:	4603      	mov	r3, r0
 8015866:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 801586a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801586e:	2b00      	cmp	r3, #0
 8015870:	d105      	bne.n	801587e <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8015872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015874:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8015878:	f7f5 fa5c 	bl	800ad34 <FreeRTOS_min_uint32>
 801587c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8015884:	f107 0208 	add.w	r2, r7, #8
 8015888:	2328      	movs	r3, #40	@ 0x28
 801588a:	200a      	movs	r0, #10
 801588c:	f7f9 ffa2 	bl	800f7d4 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015896:	f107 0208 	add.w	r2, r7, #8
 801589a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801589c:	4807      	ldr	r0, [pc, #28]	@ (80158bc <prvSocketSetMSS_IPV6+0x9c>)
 801589e:	f00c fed1 	bl	8022644 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 80158a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158a4:	b29a      	uxth	r2, r3
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 80158ac:	bf00      	nop
 80158ae:	bf00      	nop
 80158b0:	3740      	adds	r7, #64	@ 0x40
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}
 80158b6:	bf00      	nop
 80158b8:	0802716c 	.word	0x0802716c
 80158bc:	08027198 	.word	0x08027198

080158c0 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 80158c0:	b480      	push	{r7}
 80158c2:	b085      	sub	sp, #20
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
 80158c8:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 80158ca:	2300      	movs	r3, #0
 80158cc:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 80158ce:	683a      	ldr	r2, [r7, #0]
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	1ad3      	subs	r3, r2, r3
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	db01      	blt.n	80158dc <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 80158d8:	2301      	movs	r3, #1
 80158da:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 80158dc:	68fb      	ldr	r3, [r7, #12]
        }
 80158de:	4618      	mov	r0, r3
 80158e0:	3714      	adds	r7, #20
 80158e2:	46bd      	mov	sp, r7
 80158e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e8:	4770      	bx	lr

080158ea <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 80158ea:	b480      	push	{r7}
 80158ec:	b085      	sub	sp, #20
 80158ee:	af00      	add	r7, sp, #0
 80158f0:	6078      	str	r0, [r7, #4]
 80158f2:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80158f4:	2300      	movs	r3, #0
 80158f6:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 80158f8:	683a      	ldr	r2, [r7, #0]
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	1ad3      	subs	r3, r2, r3
 80158fe:	3b01      	subs	r3, #1
 8015900:	2b00      	cmp	r3, #0
 8015902:	db01      	blt.n	8015908 <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8015904:	2301      	movs	r3, #1
 8015906:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015908:	68fb      	ldr	r3, [r7, #12]
    }
 801590a:	4618      	mov	r0, r3
 801590c:	3714      	adds	r7, #20
 801590e:	46bd      	mov	sp, r7
 8015910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015914:	4770      	bx	lr

08015916 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 8015916:	b480      	push	{r7}
 8015918:	b085      	sub	sp, #20
 801591a:	af00      	add	r7, sp, #0
 801591c:	6078      	str	r0, [r7, #4]
 801591e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015920:	2300      	movs	r3, #0
 8015922:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 8015924:	687a      	ldr	r2, [r7, #4]
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	1ad3      	subs	r3, r2, r3
 801592a:	3b01      	subs	r3, #1
 801592c:	2b00      	cmp	r3, #0
 801592e:	db01      	blt.n	8015934 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8015930:	2301      	movs	r3, #1
 8015932:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015934:	68fb      	ldr	r3, [r7, #12]
    }
 8015936:	4618      	mov	r0, r3
 8015938:	3714      	adds	r7, #20
 801593a:	46bd      	mov	sp, r7
 801593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015940:	4770      	bx	lr

08015942 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8015942:	b480      	push	{r7}
 8015944:	b085      	sub	sp, #20
 8015946:	af00      	add	r7, sp, #0
 8015948:	6078      	str	r0, [r7, #4]
 801594a:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 801594c:	2300      	movs	r3, #0
 801594e:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8015950:	687a      	ldr	r2, [r7, #4]
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	1ad3      	subs	r3, r2, r3
 8015956:	2b00      	cmp	r3, #0
 8015958:	db01      	blt.n	801595e <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 801595a:	2301      	movs	r3, #1
 801595c:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 801595e:	68fb      	ldr	r3, [r7, #12]
    }
 8015960:	4618      	mov	r0, r3
 8015962:	3714      	adds	r7, #20
 8015964:	46bd      	mov	sp, r7
 8015966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596a:	4770      	bx	lr

0801596c <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 801596c:	b580      	push	{r7, lr}
 801596e:	b082      	sub	sp, #8
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	3308      	adds	r3, #8
 801597a:	461a      	mov	r2, r3
 801597c:	6839      	ldr	r1, [r7, #0]
 801597e:	6878      	ldr	r0, [r7, #4]
 8015980:	f000 f822 	bl	80159c8 <vListInsertGeneric>
        }
 8015984:	bf00      	nop
 8015986:	3708      	adds	r7, #8
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}

0801598c <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 801598c:	b580      	push	{r7, lr}
 801598e:	b082      	sub	sp, #8
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8015994:	f7ef f8e8 	bl	8004b68 <xTaskGetTickCount>
 8015998:	4602      	mov	r2, r0
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	601a      	str	r2, [r3, #0]
    }
 801599e:	bf00      	nop
 80159a0:	3708      	adds	r7, #8
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}

080159a6 <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 80159a6:	b580      	push	{r7, lr}
 80159a8:	b084      	sub	sp, #16
 80159aa:	af00      	add	r7, sp, #0
 80159ac:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 80159ae:	f7ef f8db 	bl	8004b68 <xTaskGetTickCount>
 80159b2:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	68fa      	ldr	r2, [r7, #12]
 80159ba:	1ad3      	subs	r3, r2, r3
 80159bc:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 80159be:	68bb      	ldr	r3, [r7, #8]
    }
 80159c0:	4618      	mov	r0, r3
 80159c2:	3710      	adds	r7, #16
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 80159c8:	b480      	push	{r7}
 80159ca:	b085      	sub	sp, #20
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	60f8      	str	r0, [r7, #12]
 80159d0:	60b9      	str	r1, [r7, #8]
 80159d2:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 80159d4:	68bb      	ldr	r3, [r7, #8]
 80159d6:	687a      	ldr	r2, [r7, #4]
 80159d8:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	689a      	ldr	r2, [r3, #8]
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	689b      	ldr	r3, [r3, #8]
 80159e6:	68ba      	ldr	r2, [r7, #8]
 80159e8:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	68ba      	ldr	r2, [r7, #8]
 80159ee:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	68fa      	ldr	r2, [r7, #12]
 80159f4:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	1c5a      	adds	r2, r3, #1
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	601a      	str	r2, [r3, #0]
        }
 8015a00:	bf00      	nop
 8015a02:	3714      	adds	r7, #20
 8015a04:	46bd      	mov	sp, r7
 8015a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0a:	4770      	bx	lr

08015a0c <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b082      	sub	sp, #8
 8015a10:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8015a12:	4827      	ldr	r0, [pc, #156]	@ (8015ab0 <prvCreateSectors+0xa4>)
 8015a14:	f7ed fe24 	bl	8003660 <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8015a18:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8015a1c:	f7f0 ff12 	bl	8006844 <pvPortMalloc>
 8015a20:	4603      	mov	r3, r0
 8015a22:	4a24      	ldr	r2, [pc, #144]	@ (8015ab4 <prvCreateSectors+0xa8>)
 8015a24:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 8015a26:	4b23      	ldr	r3, [pc, #140]	@ (8015ab4 <prvCreateSectors+0xa8>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d107      	bne.n	8015a3e <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8015a2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8015a32:	4821      	ldr	r0, [pc, #132]	@ (8015ab8 <prvCreateSectors+0xac>)
 8015a34:	f00c fe06 	bl	8022644 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	603b      	str	r3, [r7, #0]
 8015a3c:	e032      	b.n	8015aa4 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8015a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8015ab4 <prvCreateSectors+0xa8>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015a46:	2100      	movs	r1, #0
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f00d f924 	bl	8022c96 <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015a4e:	2300      	movs	r3, #0
 8015a50:	607b      	str	r3, [r7, #4]
 8015a52:	e022      	b.n	8015a9a <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015a54:	4b17      	ldr	r3, [pc, #92]	@ (8015ab4 <prvCreateSectors+0xa8>)
 8015a56:	6819      	ldr	r1, [r3, #0]
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	019a      	lsls	r2, r3, #6
 8015a5c:	4b15      	ldr	r3, [pc, #84]	@ (8015ab4 <prvCreateSectors+0xa8>)
 8015a5e:	6818      	ldr	r0, [r3, #0]
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	019b      	lsls	r3, r3, #6
 8015a64:	4403      	add	r3, r0
 8015a66:	440a      	add	r2, r1
 8015a68:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015a6a:	4b12      	ldr	r3, [pc, #72]	@ (8015ab4 <prvCreateSectors+0xa8>)
 8015a6c:	6819      	ldr	r1, [r3, #0]
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	019a      	lsls	r2, r3, #6
 8015a72:	4b10      	ldr	r3, [pc, #64]	@ (8015ab4 <prvCreateSectors+0xa8>)
 8015a74:	6818      	ldr	r0, [r3, #0]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	019b      	lsls	r3, r3, #6
 8015a7a:	4403      	add	r3, r0
 8015a7c:	440a      	add	r2, r1
 8015a7e:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8015a80:	4b0c      	ldr	r3, [pc, #48]	@ (8015ab4 <prvCreateSectors+0xa8>)
 8015a82:	681a      	ldr	r2, [r3, #0]
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	019b      	lsls	r3, r3, #6
 8015a88:	4413      	add	r3, r2
 8015a8a:	332c      	adds	r3, #44	@ 0x2c
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	4808      	ldr	r0, [pc, #32]	@ (8015ab0 <prvCreateSectors+0xa4>)
 8015a90:	f7ff ff6c 	bl	801596c <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	3301      	adds	r3, #1
 8015a98:	607b      	str	r3, [r7, #4]
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8015a9e:	ddd9      	ble.n	8015a54 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8015aa0:	2301      	movs	r3, #1
 8015aa2:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8015aa4:	683b      	ldr	r3, [r7, #0]
        }
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	3708      	adds	r7, #8
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}
 8015aae:	bf00      	nop
 8015ab0:	20001638 	.word	0x20001638
 8015ab4:	20001634 	.word	0x20001634
 8015ab8:	080271c8 	.word	0x080271c8

08015abc <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8015abc:	b480      	push	{r7}
 8015abe:	b087      	sub	sp, #28
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
 8015ac4:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	33ac      	adds	r3, #172	@ 0xac
 8015ace:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	617b      	str	r3, [r7, #20]
 8015ad6:	e00d      	b.n	8015af4 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	68db      	ldr	r3, [r3, #12]
 8015adc:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8015ade:	68bb      	ldr	r3, [r7, #8]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	683a      	ldr	r2, [r7, #0]
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d102      	bne.n	8015aee <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	613b      	str	r3, [r7, #16]
                    break;
 8015aec:	e006      	b.n	8015afc <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8015aee:	697b      	ldr	r3, [r7, #20]
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 8015af4:	697a      	ldr	r2, [r7, #20]
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d1ed      	bne.n	8015ad8 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 8015afc:	693b      	ldr	r3, [r7, #16]
        }
 8015afe:	4618      	mov	r0, r3
 8015b00:	371c      	adds	r7, #28
 8015b02:	46bd      	mov	sp, r7
 8015b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b08:	4770      	bx	lr
	...

08015b0c <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b088      	sub	sp, #32
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	60f8      	str	r0, [r7, #12]
 8015b14:	60b9      	str	r1, [r7, #8]
 8015b16:	607a      	str	r2, [r7, #4]
 8015b18:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8015b1a:	4b33      	ldr	r3, [pc, #204]	@ (8015be8 <xTCPWindowNew+0xdc>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d10c      	bne.n	8015b3c <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d001      	beq.n	8015b2c <xTCPWindowNew+0x20>
 8015b28:	2352      	movs	r3, #82	@ 0x52
 8015b2a:	e000      	b.n	8015b2e <xTCPWindowNew+0x22>
 8015b2c:	2354      	movs	r3, #84	@ 0x54
 8015b2e:	4619      	mov	r1, r3
 8015b30:	482e      	ldr	r0, [pc, #184]	@ (8015bec <xTCPWindowNew+0xe0>)
 8015b32:	f00c fd87 	bl	8022644 <lUDPLoggingPrintf>
                pxSegment = NULL;
 8015b36:	2300      	movs	r3, #0
 8015b38:	61fb      	str	r3, [r7, #28]
 8015b3a:	e04f      	b.n	8015bdc <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8015b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8015be8 <xTCPWindowNew+0xdc>)
 8015b3e:	68db      	ldr	r3, [r3, #12]
 8015b40:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015b42:	69bb      	ldr	r3, [r7, #24]
 8015b44:	68db      	ldr	r3, [r3, #12]
 8015b46:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 8015b48:	69bb      	ldr	r3, [r7, #24]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d104      	bne.n	8015b58 <xTCPWindowNew+0x4c>
 8015b4e:	f240 2125 	movw	r1, #549	@ 0x225
 8015b52:	4827      	ldr	r0, [pc, #156]	@ (8015bf0 <xTCPWindowNew+0xe4>)
 8015b54:	f7eb ff12 	bl	800197c <vAssertCalled>
                configASSERT( pxSegment != NULL );
 8015b58:	69fb      	ldr	r3, [r7, #28]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d104      	bne.n	8015b68 <xTCPWindowNew+0x5c>
 8015b5e:	f240 2126 	movw	r1, #550	@ 0x226
 8015b62:	4823      	ldr	r0, [pc, #140]	@ (8015bf0 <xTCPWindowNew+0xe4>)
 8015b64:	f7eb ff0a 	bl	800197c <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 8015b68:	69b8      	ldr	r0, [r7, #24]
 8015b6a:	f7ed fe03 	bl	8003774 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d006      	beq.n	8015b82 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	33a4      	adds	r3, #164	@ 0xa4
 8015b78:	69b9      	ldr	r1, [r7, #24]
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7ff fef6 	bl	801596c <vListInsertFifo>
 8015b80:	e005      	b.n	8015b8e <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	3390      	adds	r3, #144	@ 0x90
 8015b86:	69b9      	ldr	r1, [r7, #24]
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7ff feef 	bl	801596c <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8015b8e:	69fb      	ldr	r3, [r7, #28]
 8015b90:	3310      	adds	r3, #16
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7ff fefa 	bl	801598c <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 8015b98:	69fb      	ldr	r3, [r7, #28]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d001      	beq.n	8015ba8 <xTCPWindowNew+0x9c>
 8015ba4:	2101      	movs	r1, #1
 8015ba6:	e000      	b.n	8015baa <xTCPWindowNew+0x9e>
 8015ba8:	2100      	movs	r1, #0
 8015baa:	69fa      	ldr	r2, [r7, #28]
 8015bac:	7d93      	ldrb	r3, [r2, #22]
 8015bae:	f361 0382 	bfi	r3, r1, #2, #1
 8015bb2:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8015bb4:	69fb      	ldr	r3, [r7, #28]
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 8015bba:	69fb      	ldr	r3, [r7, #28]
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8015bc0:	69fb      	ldr	r3, [r7, #28]
 8015bc2:	68ba      	ldr	r2, [r7, #8]
 8015bc4:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8015bc6:	4b08      	ldr	r3, [pc, #32]	@ (8015be8 <xTCPWindowNew+0xdc>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8015bcc:	4b09      	ldr	r3, [pc, #36]	@ (8015bf4 <xTCPWindowNew+0xe8>)
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	697a      	ldr	r2, [r7, #20]
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	d202      	bcs.n	8015bdc <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 8015bd6:	4a07      	ldr	r2, [pc, #28]	@ (8015bf4 <xTCPWindowNew+0xe8>)
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8015bdc:	69fb      	ldr	r3, [r7, #28]
        }
 8015bde:	4618      	mov	r0, r3
 8015be0:	3720      	adds	r7, #32
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
 8015be6:	bf00      	nop
 8015be8:	20001638 	.word	0x20001638
 8015bec:	080271ec 	.word	0x080271ec
 8015bf0:	0802721c 	.word	0x0802721c
 8015bf4:	2000001c 	.word	0x2000001c

08015bf8 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b084      	sub	sp, #16
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d002      	beq.n	8015c10 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	60fb      	str	r3, [r7, #12]
 8015c0e:	e01e      	b.n	8015c4e <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	691b      	ldr	r3, [r3, #16]
 8015c14:	1c5a      	adds	r2, r3, #1
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	699b      	ldr	r3, [r3, #24]
 8015c1a:	4619      	mov	r1, r3
 8015c1c:	4610      	mov	r0, r2
 8015c1e:	f7ff fe90 	bl	8015942 <xSequenceGreaterThanOrEqual>
 8015c22:	4603      	mov	r3, r0
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d002      	beq.n	8015c2e <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8015c28:	2301      	movs	r3, #1
 8015c2a:	60fb      	str	r3, [r7, #12]
 8015c2c:	e00f      	b.n	8015c4e <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	691a      	ldr	r2, [r3, #16]
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	68db      	ldr	r3, [r3, #12]
 8015c36:	1ad1      	subs	r1, r2, r3
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	699a      	ldr	r2, [r3, #24]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	68db      	ldr	r3, [r3, #12]
 8015c40:	1ad3      	subs	r3, r2, r3
 8015c42:	461a      	mov	r2, r3
 8015c44:	4804      	ldr	r0, [pc, #16]	@ (8015c58 <xTCPWindowRxEmpty+0x60>)
 8015c46:	f00c fcfd 	bl	8022644 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8015c4e:	68fb      	ldr	r3, [r7, #12]
        }
 8015c50:	4618      	mov	r0, r3
 8015c52:	3710      	adds	r7, #16
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}
 8015c58:	0802724c 	.word	0x0802724c

08015c5c <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b084      	sub	sp, #16
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d102      	bne.n	8015c72 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	60fb      	str	r3, [r7, #12]
 8015c70:	e008      	b.n	8015c84 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	68db      	ldr	r3, [r3, #12]
 8015c76:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	68db      	ldr	r3, [r3, #12]
 8015c7c:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8015c7e:	68b8      	ldr	r0, [r7, #8]
 8015c80:	f7ed fd78 	bl	8003774 <uxListRemove>
            }

            return pxSegment;
 8015c84:	68fb      	ldr	r3, [r7, #12]
        }
 8015c86:	4618      	mov	r0, r3
 8015c88:	3710      	adds	r7, #16
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}

08015c8e <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8015c8e:	b480      	push	{r7}
 8015c90:	b085      	sub	sp, #20
 8015c92:	af00      	add	r7, sp, #0
 8015c94:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d102      	bne.n	8015ca4 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	60fb      	str	r3, [r7, #12]
 8015ca2:	e005      	b.n	8015cb0 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	68db      	ldr	r3, [r3, #12]
 8015ca8:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015caa:	68bb      	ldr	r3, [r7, #8]
 8015cac:	68db      	ldr	r3, [r3, #12]
 8015cae:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8015cb0:	68fb      	ldr	r3, [r7, #12]
        }
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	3714      	adds	r7, #20
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbc:	4770      	bx	lr
	...

08015cc0 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b082      	sub	sp, #8
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d004      	beq.n	8015cda <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	3318      	adds	r3, #24
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7ed fd4d 	bl	8003774 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	2200      	movs	r2, #0
 8015cde:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	2200      	movs	r2, #0
 8015cea:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d004      	beq.n	8015cfe <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	332c      	adds	r3, #44	@ 0x2c
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f7ed fd3b 	bl	8003774 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	332c      	adds	r3, #44	@ 0x2c
 8015d02:	4619      	mov	r1, r3
 8015d04:	4803      	ldr	r0, [pc, #12]	@ (8015d14 <vTCPWindowFree+0x54>)
 8015d06:	f7ff fe31 	bl	801596c <vListInsertFifo>
        }
 8015d0a:	bf00      	nop
 8015d0c:	3708      	adds	r7, #8
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}
 8015d12:	bf00      	nop
 8015d14:	20001638 	.word	0x20001638

08015d18 <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b086      	sub	sp, #24
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8015d20:	2300      	movs	r3, #0
 8015d22:	613b      	str	r3, [r7, #16]
 8015d24:	e01d      	b.n	8015d62 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d003      	beq.n	8015d34 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	33a4      	adds	r3, #164	@ 0xa4
 8015d30:	617b      	str	r3, [r7, #20]
 8015d32:	e002      	b.n	8015d3a <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	3390      	adds	r3, #144	@ 0x90
 8015d38:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 8015d3a:	697b      	ldr	r3, [r7, #20]
 8015d3c:	689b      	ldr	r3, [r3, #8]
 8015d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d42:	d10b      	bne.n	8015d5c <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015d44:	e006      	b.n	8015d54 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	68db      	ldr	r3, [r3, #12]
 8015d4a:	68db      	ldr	r3, [r3, #12]
 8015d4c:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 8015d4e:	68f8      	ldr	r0, [r7, #12]
 8015d50:	f7ff ffb6 	bl	8015cc0 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015d54:	697b      	ldr	r3, [r7, #20]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d1f4      	bne.n	8015d46 <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	3301      	adds	r3, #1
 8015d60:	613b      	str	r3, [r7, #16]
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	2b01      	cmp	r3, #1
 8015d66:	ddde      	ble.n	8015d26 <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 8015d68:	bf00      	nop
 8015d6a:	bf00      	nop
 8015d6c:	3718      	adds	r7, #24
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
	...

08015d74 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b086      	sub	sp, #24
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	60f8      	str	r0, [r7, #12]
 8015d7c:	60b9      	str	r1, [r7, #8]
 8015d7e:	607a      	str	r2, [r7, #4]
 8015d80:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8015d82:	2301      	movs	r3, #1
 8015d84:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 8015d86:	4b1d      	ldr	r3, [pc, #116]	@ (8015dfc <xTCPWindowCreate+0x88>)
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d102      	bne.n	8015d94 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8015d8e:	f7ff fe3d 	bl	8015a0c <prvCreateSectors>
 8015d92:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	3390      	adds	r3, #144	@ 0x90
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7ed fc61 	bl	8003660 <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	33a4      	adds	r3, #164	@ 0xa4
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7ed fc5c 	bl	8003660 <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	3340      	adds	r3, #64	@ 0x40
 8015dac:	4618      	mov	r0, r3
 8015dae:	f7ed fc57 	bl	8003660 <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	3354      	adds	r3, #84	@ 0x54
 8015db6:	4618      	mov	r0, r3
 8015db8:	f7ed fc52 	bl	8003660 <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	3368      	adds	r3, #104	@ 0x68
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f7ed fc4d 	bl	8003660 <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 8015dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8015e00 <xTCPWindowCreate+0x8c>)
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d004      	beq.n	8015dd8 <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8015dce:	687a      	ldr	r2, [r7, #4]
 8015dd0:	68b9      	ldr	r1, [r7, #8]
 8015dd2:	480c      	ldr	r0, [pc, #48]	@ (8015e04 <xTCPWindowCreate+0x90>)
 8015dd4:	f00c fc36 	bl	8022644 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	68ba      	ldr	r2, [r7, #8]
 8015ddc:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	687a      	ldr	r2, [r7, #4]
 8015de2:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8015de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015de6:	6a3a      	ldr	r2, [r7, #32]
 8015de8:	6839      	ldr	r1, [r7, #0]
 8015dea:	68f8      	ldr	r0, [r7, #12]
 8015dec:	f000 f80c 	bl	8015e08 <vTCPWindowInit>

        return xReturn;
 8015df0:	697b      	ldr	r3, [r7, #20]
    }
 8015df2:	4618      	mov	r0, r3
 8015df4:	3718      	adds	r7, #24
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	20001634 	.word	0x20001634
 8015e00:	2000164c 	.word	0x2000164c
 8015e04:	0802727c 	.word	0x0802727c

08015e08 <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 8015e08:	b480      	push	{r7}
 8015e0a:	b087      	sub	sp, #28
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	60f8      	str	r0, [r7, #12]
 8015e10:	60b9      	str	r1, [r7, #8]
 8015e12:	607a      	str	r2, [r7, #4]
 8015e14:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 8015e16:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8015e1a:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	2200      	movs	r2, #0
 8015e20:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8015e22:	68fa      	ldr	r2, [r7, #12]
 8015e24:	7813      	ldrb	r3, [r2, #0]
 8015e26:	f043 0301 	orr.w	r3, r3, #1
 8015e2a:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 8015e2c:	683b      	ldr	r3, [r7, #0]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d024      	beq.n	8015e7c <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d004      	beq.n	8015e46 <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	b29a      	uxth	r2, r3
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015e4c:	461a      	mov	r2, r3
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	4293      	cmp	r3, r2
 8015e52:	d304      	bcc.n	8015e5e <vTCPWindowInit+0x56>
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d10e      	bne.n	8015e7c <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	685a      	ldr	r2, [r3, #4]
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e68:	683a      	ldr	r2, [r7, #0]
 8015e6a:	fb03 f202 	mul.w	r2, r3, r2
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	b29a      	uxth	r2, r3
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	697a      	ldr	r2, [r7, #20]
 8015e80:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	68ba      	ldr	r2, [r7, #8]
 8015e86:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	68ba      	ldr	r2, [r7, #8]
 8015e8c:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	68ba      	ldr	r2, [r7, #8]
 8015e92:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	687a      	ldr	r2, [r7, #4]
 8015e9e:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	687a      	ldr	r2, [r7, #4]
 8015ea4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	687a      	ldr	r2, [r7, #4]
 8015eaa:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	687a      	ldr	r2, [r7, #4]
 8015eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8015eb2:	bf00      	nop
 8015eb4:	371c      	adds	r7, #28
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebc:	4770      	bx	lr
	...

08015ec0 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8015ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ec2:	b08f      	sub	sp, #60	@ 0x3c
 8015ec4:	af04      	add	r7, sp, #16
 8015ec6:	60f8      	str	r0, [r7, #12]
 8015ec8:	60b9      	str	r1, [r7, #8]
 8015eca:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8015ed0:	68ba      	ldr	r2, [r7, #8]
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	4413      	add	r3, r2
 8015ed6:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	33ac      	adds	r3, #172	@ 0xac
 8015edc:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 8015ede:	69bb      	ldr	r3, [r7, #24]
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	623b      	str	r3, [r7, #32]
 8015ee4:	e027      	b.n	8015f36 <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015ee6:	6a3b      	ldr	r3, [r7, #32]
 8015ee8:	68db      	ldr	r3, [r3, #12]
 8015eea:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015eec:	697b      	ldr	r3, [r7, #20]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	68b9      	ldr	r1, [r7, #8]
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	f7ff fd25 	bl	8015942 <xSequenceGreaterThanOrEqual>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d018      	beq.n	8015f30 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	69f9      	ldr	r1, [r7, #28]
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7ff fcf0 	bl	80158ea <xSequenceLessThan>
 8015f0a:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d00f      	beq.n	8015f30 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8015f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d00a      	beq.n	8015f2c <xTCPWindowRxConfirm+0x6c>
 8015f16:	697b      	ldr	r3, [r7, #20]
 8015f18:	681a      	ldr	r2, [r3, #0]
 8015f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	4619      	mov	r1, r3
 8015f20:	4610      	mov	r0, r2
 8015f22:	f7ff fce2 	bl	80158ea <xSequenceLessThan>
 8015f26:	4603      	mov	r3, r0
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d001      	beq.n	8015f30 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 8015f30:	6a3b      	ldr	r3, [r7, #32]
 8015f32:	685b      	ldr	r3, [r3, #4]
 8015f34:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 8015f36:	6a3a      	ldr	r2, [r7, #32]
 8015f38:	69bb      	ldr	r3, [r7, #24]
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d1d3      	bne.n	8015ee6 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 8015f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d030      	beq.n	8015fa6 <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8015f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f46:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 8015f48:	68ba      	ldr	r2, [r7, #8]
 8015f4a:	429a      	cmp	r2, r3
 8015f4c:	d104      	bne.n	8015f58 <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8015f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f50:	689a      	ldr	r2, [r3, #8]
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	429a      	cmp	r2, r3
 8015f56:	d026      	beq.n	8015fa6 <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015f5e:	461e      	mov	r6, r3
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	68db      	ldr	r3, [r3, #12]
 8015f64:	68ba      	ldr	r2, [r7, #8]
 8015f66:	1ad5      	subs	r5, r2, r3
 8015f68:	68ba      	ldr	r2, [r7, #8]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	441a      	add	r2, r3
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	68db      	ldr	r3, [r3, #12]
 8015f72:	1ad3      	subs	r3, r2, r3
 8015f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015f76:	6811      	ldr	r1, [r2, #0]
 8015f78:	68fa      	ldr	r2, [r7, #12]
 8015f7a:	68d2      	ldr	r2, [r2, #12]
 8015f7c:	1a8a      	subs	r2, r1, r2
 8015f7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015f80:	6889      	ldr	r1, [r1, #8]
 8015f82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015f84:	6800      	ldr	r0, [r0, #0]
 8015f86:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8015f88:	68a4      	ldr	r4, [r4, #8]
 8015f8a:	4404      	add	r4, r0
 8015f8c:	68f8      	ldr	r0, [r7, #12]
 8015f8e:	68c0      	ldr	r0, [r0, #12]
 8015f90:	1a20      	subs	r0, r4, r0
 8015f92:	9003      	str	r0, [sp, #12]
 8015f94:	9102      	str	r1, [sp, #8]
 8015f96:	9201      	str	r2, [sp, #4]
 8015f98:	9300      	str	r3, [sp, #0]
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	462a      	mov	r2, r5
 8015f9e:	4631      	mov	r1, r6
 8015fa0:	4803      	ldr	r0, [pc, #12]	@ (8015fb0 <xTCPWindowRxConfirm+0xf0>)
 8015fa2:	f00c fb4f 	bl	8022644 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 8015fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015fa8:	4618      	mov	r0, r3
 8015faa:	372c      	adds	r7, #44	@ 0x2c
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fb0:	080272ac 	.word	0x080272ac

08015fb4 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8015fb4:	b5b0      	push	{r4, r5, r7, lr}
 8015fb6:	b08a      	sub	sp, #40	@ 0x28
 8015fb8:	af04      	add	r7, sp, #16
 8015fba:	6078      	str	r0, [r7, #4]
 8015fbc:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	691b      	ldr	r3, [r3, #16]
 8015fc2:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8015fc4:	693a      	ldr	r2, [r7, #16]
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	4413      	add	r3, r2
 8015fca:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d04e      	beq.n	8016074 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 8015fda:	683a      	ldr	r2, [r7, #0]
 8015fdc:	6939      	ldr	r1, [r7, #16]
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	f7ff ff6e 	bl	8015ec0 <xTCPWindowRxConfirm>
 8015fe4:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d002      	beq.n	8015ff2 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 8015fec:	68b8      	ldr	r0, [r7, #8]
 8015fee:	f7ff fe67 	bl	8015cc0 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d1f0      	bne.n	8015fda <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8015ff8:	6979      	ldr	r1, [r7, #20]
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f7ff fd5e 	bl	8015abc <xTCPWindowRxFind>
 8016000:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8016002:	68bb      	ldr	r3, [r7, #8]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d009      	beq.n	801601c <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	689b      	ldr	r3, [r3, #8]
 801600c:	461a      	mov	r2, r3
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	4413      	add	r3, r2
 8016012:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8016014:	68b8      	ldr	r0, [r7, #8]
 8016016:	f7ff fe53 	bl	8015cc0 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801601a:	e7ed      	b.n	8015ff8 <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 801601c:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 801601e:	68fa      	ldr	r2, [r7, #12]
 8016020:	697b      	ldr	r3, [r7, #20]
 8016022:	429a      	cmp	r2, r3
 8016024:	d026      	beq.n	8016074 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8016026:	697a      	ldr	r2, [r7, #20]
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	1ad2      	subs	r2, r2, r3
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 8016030:	4b14      	ldr	r3, [pc, #80]	@ (8016084 <prvTCPWindowRx_ExpectedRX+0xd0>)
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	2b00      	cmp	r3, #0
 8016036:	dd1d      	ble.n	8016074 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801603e:	461c      	mov	r4, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016046:	461d      	mov	r5, r3
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	68db      	ldr	r3, [r3, #12]
 801604c:	693a      	ldr	r2, [r7, #16]
 801604e:	1ad0      	subs	r0, r2, r3
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016054:	687a      	ldr	r2, [r7, #4]
 8016056:	68d2      	ldr	r2, [r2, #12]
 8016058:	68f9      	ldr	r1, [r7, #12]
 801605a:	1a8a      	subs	r2, r1, r2
 801605c:	6879      	ldr	r1, [r7, #4]
 801605e:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 8016062:	9102      	str	r1, [sp, #8]
 8016064:	9201      	str	r2, [sp, #4]
 8016066:	9300      	str	r3, [sp, #0]
 8016068:	4603      	mov	r3, r0
 801606a:	462a      	mov	r2, r5
 801606c:	4621      	mov	r1, r4
 801606e:	4806      	ldr	r0, [pc, #24]	@ (8016088 <prvTCPWindowRx_ExpectedRX+0xd4>)
 8016070:	f00c fae8 	bl	8022644 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	697a      	ldr	r2, [r7, #20]
 8016078:	611a      	str	r2, [r3, #16]
        }
 801607a:	bf00      	nop
 801607c:	3718      	adds	r7, #24
 801607e:	46bd      	mov	sp, r7
 8016080:	bdb0      	pop	{r4, r5, r7, pc}
 8016082:	bf00      	nop
 8016084:	2000164c 	.word	0x2000164c
 8016088:	080272ec 	.word	0x080272ec

0801608c <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 801608c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801608e:	b08f      	sub	sp, #60	@ 0x3c
 8016090:	af04      	add	r7, sp, #16
 8016092:	60f8      	str	r0, [r7, #12]
 8016094:	60b9      	str	r1, [r7, #8]
 8016096:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 8016098:	f04f 33ff 	mov.w	r3, #4294967295
 801609c:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 801609e:	68ba      	ldr	r2, [r7, #8]
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	4413      	add	r3, r2
 80160a4:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	691b      	ldr	r3, [r3, #16]
 80160aa:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 80160ac:	6a39      	ldr	r1, [r7, #32]
 80160ae:	68f8      	ldr	r0, [r7, #12]
 80160b0:	f7ff fd04 	bl	8015abc <xTCPWindowRxFind>
 80160b4:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 80160b6:	69bb      	ldr	r3, [r7, #24]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d006      	beq.n	80160ca <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 80160bc:	69bb      	ldr	r3, [r7, #24]
 80160be:	689b      	ldr	r3, [r3, #8]
 80160c0:	461a      	mov	r2, r3
 80160c2:	6a3b      	ldr	r3, [r7, #32]
 80160c4:	4413      	add	r3, r2
 80160c6:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 80160c8:	e7f0      	b.n	80160ac <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 80160ca:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 80160cc:	4b45      	ldr	r3, [pc, #276]	@ (80161e4 <prvTCPWindowRx_UnexpectedRX+0x158>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	dd20      	ble.n	8016116 <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80160da:	461d      	mov	r5, r3
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80160e2:	461e      	mov	r6, r3
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	68db      	ldr	r3, [r3, #12]
 80160e8:	68ba      	ldr	r2, [r7, #8]
 80160ea:	1ad0      	subs	r0, r2, r3
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	68db      	ldr	r3, [r3, #12]
 80160f0:	69fa      	ldr	r2, [r7, #28]
 80160f2:	1ad3      	subs	r3, r2, r3
 80160f4:	68b9      	ldr	r1, [r7, #8]
 80160f6:	69fa      	ldr	r2, [r7, #28]
 80160f8:	1a8a      	subs	r2, r1, r2
 80160fa:	4614      	mov	r4, r2
 80160fc:	68fa      	ldr	r2, [r7, #12]
 80160fe:	68d2      	ldr	r2, [r2, #12]
 8016100:	6a39      	ldr	r1, [r7, #32]
 8016102:	1a8a      	subs	r2, r1, r2
 8016104:	9202      	str	r2, [sp, #8]
 8016106:	9401      	str	r4, [sp, #4]
 8016108:	9300      	str	r3, [sp, #0]
 801610a:	4603      	mov	r3, r0
 801610c:	4632      	mov	r2, r6
 801610e:	4629      	mov	r1, r5
 8016110:	4835      	ldr	r0, [pc, #212]	@ (80161e8 <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8016112:	f00c fa97 	bl	8022644 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	4a34      	ldr	r2, [pc, #208]	@ (80161ec <prvTCPWindowRx_UnexpectedRX+0x160>)
 801611a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	061a      	lsls	r2, r3, #24
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	021b      	lsls	r3, r3, #8
 8016126:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801612a:	431a      	orrs	r2, r3
 801612c:	68bb      	ldr	r3, [r7, #8]
 801612e:	0a1b      	lsrs	r3, r3, #8
 8016130:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8016134:	431a      	orrs	r2, r3
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	0e1b      	lsrs	r3, r3, #24
 801613a:	431a      	orrs	r2, r3
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8016142:	6a3b      	ldr	r3, [r7, #32]
 8016144:	061a      	lsls	r2, r3, #24
 8016146:	6a3b      	ldr	r3, [r7, #32]
 8016148:	021b      	lsls	r3, r3, #8
 801614a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801614e:	431a      	orrs	r2, r3
 8016150:	6a3b      	ldr	r3, [r7, #32]
 8016152:	0a1b      	lsrs	r3, r3, #8
 8016154:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8016158:	431a      	orrs	r2, r3
 801615a:	6a3b      	ldr	r3, [r7, #32]
 801615c:	0e1b      	lsrs	r3, r3, #24
 801615e:	431a      	orrs	r2, r3
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	220c      	movs	r2, #12
 801616a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 801616e:	68b9      	ldr	r1, [r7, #8]
 8016170:	68f8      	ldr	r0, [r7, #12]
 8016172:	f7ff fca3 	bl	8015abc <xTCPWindowRxFind>
 8016176:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 8016178:	69bb      	ldr	r3, [r7, #24]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d12d      	bne.n	80161da <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 801617e:	687a      	ldr	r2, [r7, #4]
 8016180:	2301      	movs	r3, #1
 8016182:	68b9      	ldr	r1, [r7, #8]
 8016184:	68f8      	ldr	r0, [r7, #12]
 8016186:	f7ff fcc1 	bl	8015b0c <xTCPWindowNew>
 801618a:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 801618c:	69bb      	ldr	r3, [r7, #24]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d104      	bne.n	801619c <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	2200      	movs	r2, #0
 8016196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801619a:	e01e      	b.n	80161da <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 801619c:	4b11      	ldr	r3, [pc, #68]	@ (80161e4 <prvTCPWindowRx_UnexpectedRX+0x158>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d014      	beq.n	80161ce <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80161aa:	4619      	mov	r1, r3
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80161b2:	4618      	mov	r0, r3
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	68db      	ldr	r3, [r3, #12]
 80161b8:	68ba      	ldr	r2, [r7, #8]
 80161ba:	1ad2      	subs	r2, r2, r3
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80161c2:	9300      	str	r3, [sp, #0]
 80161c4:	4613      	mov	r3, r2
 80161c6:	4602      	mov	r2, r0
 80161c8:	4809      	ldr	r0, [pc, #36]	@ (80161f0 <prvTCPWindowRx_UnexpectedRX+0x164>)
 80161ca:	f00c fa3b 	bl	8022644 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 80161ce:	68ba      	ldr	r2, [r7, #8]
 80161d0:	69fb      	ldr	r3, [r7, #28]
 80161d2:	1ad3      	subs	r3, r2, r3
 80161d4:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 80161d6:	697b      	ldr	r3, [r7, #20]
 80161d8:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 80161da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80161dc:	4618      	mov	r0, r3
 80161de:	372c      	adds	r7, #44	@ 0x2c
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161e4:	2000164c 	.word	0x2000164c
 80161e8:	08027330 	.word	0x08027330
 80161ec:	0a050101 	.word	0x0a050101
 80161f0:	08027370 	.word	0x08027370

080161f4 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b08c      	sub	sp, #48	@ 0x30
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	60f8      	str	r0, [r7, #12]
 80161fc:	60b9      	str	r1, [r7, #8]
 80161fe:	607a      	str	r2, [r7, #4]
 8016200:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8016202:	f04f 33ff 	mov.w	r3, #4294967295
 8016206:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 8016208:	68bb      	ldr	r3, [r7, #8]
 801620a:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8016210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016212:	2200      	movs	r2, #0
 8016214:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	691b      	ldr	r3, [r3, #16]
 801621a:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 801621c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016220:	4413      	add	r3, r2
 8016222:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8016224:	69fa      	ldr	r2, [r7, #28]
 8016226:	6a3b      	ldr	r3, [r7, #32]
 8016228:	1ad3      	subs	r3, r2, r3
 801622a:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 801622c:	69bb      	ldr	r3, [r7, #24]
 801622e:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8016230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016232:	6a3b      	ldr	r3, [r7, #32]
 8016234:	1ad3      	subs	r3, r2, r3
 8016236:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 8016238:	69bb      	ldr	r3, [r7, #24]
 801623a:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 801623c:	693b      	ldr	r3, [r7, #16]
 801623e:	2b00      	cmp	r3, #0
 8016240:	da18      	bge.n	8016274 <lTCPWindowRxCheck+0x80>
 8016242:	697b      	ldr	r3, [r7, #20]
 8016244:	2b00      	cmp	r3, #0
 8016246:	dd15      	ble.n	8016274 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	68db      	ldr	r3, [r3, #12]
 801624c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801624e:	1ad2      	subs	r2, r2, r3
 8016250:	697b      	ldr	r3, [r7, #20]
 8016252:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016254:	4824      	ldr	r0, [pc, #144]	@ (80162e8 <lTCPWindowRxCheck+0xf4>)
 8016256:	f00c f9f5 	bl	8022644 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 801625a:	693b      	ldr	r3, [r7, #16]
 801625c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801625e:	1ad3      	subs	r3, r2, r3
 8016260:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8016262:	693b      	ldr	r3, [r7, #16]
 8016264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016266:	4413      	add	r3, r2
 8016268:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 801626a:	693b      	ldr	r3, [r7, #16]
 801626c:	425b      	negs	r3, r3
 801626e:	461a      	mov	r2, r3
 8016270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016272:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	2200      	movs	r2, #0
 8016278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	2200      	movs	r2, #0
 8016280:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8016282:	6a3a      	ldr	r2, [r7, #32]
 8016284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016286:	429a      	cmp	r2, r3
 8016288:	d110      	bne.n	80162ac <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 801628a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801628c:	683b      	ldr	r3, [r7, #0]
 801628e:	429a      	cmp	r2, r3
 8016290:	d905      	bls.n	801629e <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 8016292:	683a      	ldr	r2, [r7, #0]
 8016294:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016296:	4815      	ldr	r0, [pc, #84]	@ (80162ec <lTCPWindowRxCheck+0xf8>)
 8016298:	f00c f9d4 	bl	8022644 <lUDPLoggingPrintf>
 801629c:	e01f      	b.n	80162de <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 801629e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80162a0:	68f8      	ldr	r0, [r7, #12]
 80162a2:	f7ff fe87 	bl	8015fb4 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 80162a6:	2300      	movs	r3, #0
 80162a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80162aa:	e018      	b.n	80162de <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 80162ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162ae:	3301      	adds	r3, #1
 80162b0:	6a3a      	ldr	r2, [r7, #32]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d013      	beq.n	80162de <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	dd10      	ble.n	80162de <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	697a      	ldr	r2, [r7, #20]
 80162c0:	429a      	cmp	r2, r3
 80162c2:	dd06      	ble.n	80162d2 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80162c8:	6979      	ldr	r1, [r7, #20]
 80162ca:	4809      	ldr	r0, [pc, #36]	@ (80162f0 <lTCPWindowRxCheck+0xfc>)
 80162cc:	f00c f9ba 	bl	8022644 <lUDPLoggingPrintf>
 80162d0:	e005      	b.n	80162de <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 80162d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80162d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80162d6:	68f8      	ldr	r0, [r7, #12]
 80162d8:	f7ff fed8 	bl	801608c <prvTCPWindowRx_UnexpectedRX>
 80162dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 80162de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 80162e0:	4618      	mov	r0, r3
 80162e2:	3730      	adds	r7, #48	@ 0x30
 80162e4:	46bd      	mov	sp, r7
 80162e6:	bd80      	pop	{r7, pc}
 80162e8:	080273a0 	.word	0x080273a0
 80162ec:	080273e0 	.word	0x080273e0
 80162f0:	08027420 	.word	0x08027420

080162f4 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 80162f4:	b480      	push	{r7}
 80162f6:	b087      	sub	sp, #28
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	60f8      	str	r0, [r7, #12]
 80162fc:	60b9      	str	r1, [r7, #8]
 80162fe:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8016300:	68fa      	ldr	r2, [r7, #12]
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	4413      	add	r3, r2
 8016306:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 8016308:	697a      	ldr	r2, [r7, #20]
 801630a:	68bb      	ldr	r3, [r7, #8]
 801630c:	429a      	cmp	r2, r3
 801630e:	db03      	blt.n	8016318 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8016310:	697a      	ldr	r2, [r7, #20]
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	1ad3      	subs	r3, r2, r3
 8016316:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 8016318:	697b      	ldr	r3, [r7, #20]
        }
 801631a:	4618      	mov	r0, r3
 801631c:	371c      	adds	r7, #28
 801631e:	46bd      	mov	sp, r7
 8016320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016324:	4770      	bx	lr
	...

08016328 <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 8016328:	b580      	push	{r7, lr}
 801632a:	b088      	sub	sp, #32
 801632c:	af02      	add	r7, sp, #8
 801632e:	60f8      	str	r0, [r7, #12]
 8016330:	60b9      	str	r1, [r7, #8]
 8016332:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	685a      	ldr	r2, [r3, #4]
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	689b      	ldr	r3, [r3, #8]
 801633c:	1ad3      	subs	r3, r2, r3
 801633e:	4619      	mov	r1, r3
 8016340:	6878      	ldr	r0, [r7, #4]
 8016342:	f7f4 fce7 	bl	800ad14 <FreeRTOS_min_int32>
 8016346:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	689a      	ldr	r2, [r3, #8]
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	441a      	add	r2, r3
 8016350:	68bb      	ldr	r3, [r7, #8]
 8016352:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8016354:	68bb      	ldr	r3, [r7, #8]
 8016356:	689a      	ldr	r2, [r3, #8]
 8016358:	68bb      	ldr	r3, [r7, #8]
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	429a      	cmp	r2, r3
 801635e:	db02      	blt.n	8016366 <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	2200      	movs	r2, #0
 8016364:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801636a:	697b      	ldr	r3, [r7, #20]
 801636c:	441a      	add	r2, r3
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8016372:	4b12      	ldr	r3, [pc, #72]	@ (80163bc <prvTCPWindowTxAdd_FrontSegment+0x94>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	2b01      	cmp	r3, #1
 8016378:	dd1a      	ble.n	80163b0 <prvTCPWindowTxAdd_FrontSegment+0x88>
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016380:	2b17      	cmp	r3, #23
 8016382:	d015      	beq.n	80163b0 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	681a      	ldr	r2, [r3, #0]
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	69db      	ldr	r3, [r3, #28]
 801638c:	1ad1      	subs	r1, r2, r3
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	6898      	ldr	r0, [r3, #8]
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	69db      	ldr	r3, [r3, #28]
 801639a:	1ad3      	subs	r3, r2, r3
 801639c:	68ba      	ldr	r2, [r7, #8]
 801639e:	68d2      	ldr	r2, [r2, #12]
 80163a0:	9201      	str	r2, [sp, #4]
 80163a2:	9300      	str	r3, [sp, #0]
 80163a4:	4603      	mov	r3, r0
 80163a6:	460a      	mov	r2, r1
 80163a8:	6879      	ldr	r1, [r7, #4]
 80163aa:	4805      	ldr	r0, [pc, #20]	@ (80163c0 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 80163ac:	f00c f94a 	bl	8022644 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 80163b0:	697b      	ldr	r3, [r7, #20]
        }
 80163b2:	4618      	mov	r0, r3
 80163b4:	3718      	adds	r7, #24
 80163b6:	46bd      	mov	sp, r7
 80163b8:	bd80      	pop	{r7, pc}
 80163ba:	bf00      	nop
 80163bc:	2000164c 	.word	0x2000164c
 80163c0:	08027464 	.word	0x08027464

080163c4 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b08a      	sub	sp, #40	@ 0x28
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	60f8      	str	r0, [r7, #12]
 80163cc:	60b9      	str	r1, [r7, #8]
 80163ce:	607a      	str	r2, [r7, #4]
 80163d0:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 80163d2:	68bb      	ldr	r3, [r7, #8]
 80163d4:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 80163d6:	2300      	movs	r3, #0
 80163d8:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80163e2:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 80163e4:	69bb      	ldr	r3, [r7, #24]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d073      	beq.n	80164d2 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 80163ea:	69bb      	ldr	r3, [r7, #24]
 80163ec:	689a      	ldr	r2, [r3, #8]
 80163ee:	69bb      	ldr	r3, [r7, #24]
 80163f0:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 80163f2:	429a      	cmp	r2, r3
 80163f4:	da6d      	bge.n	80164d2 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 80163f6:	69bb      	ldr	r3, [r7, #24]
 80163f8:	7d9b      	ldrb	r3, [r3, #22]
 80163fa:	f003 0301 	and.w	r3, r3, #1
 80163fe:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8016400:	2b00      	cmp	r3, #0
 8016402:	d166      	bne.n	80164d2 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8016404:	69bb      	ldr	r3, [r7, #24]
 8016406:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8016408:	2b00      	cmp	r3, #0
 801640a:	d062      	beq.n	80164d2 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 801640c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801640e:	69b9      	ldr	r1, [r7, #24]
 8016410:	68f8      	ldr	r0, [r7, #12]
 8016412:	f7ff ff89 	bl	8016328 <prvTCPWindowTxAdd_FrontSegment>
 8016416:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 8016418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801641a:	697b      	ldr	r3, [r7, #20]
 801641c:	1ad3      	subs	r3, r2, r3
 801641e:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8016420:	6a3a      	ldr	r2, [r7, #32]
 8016422:	697b      	ldr	r3, [r7, #20]
 8016424:	4413      	add	r3, r2
 8016426:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8016428:	697a      	ldr	r2, [r7, #20]
 801642a:	6839      	ldr	r1, [r7, #0]
 801642c:	69f8      	ldr	r0, [r7, #28]
 801642e:	f7ff ff61 	bl	80162f4 <lTCPIncrementTxPosition>
 8016432:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8016434:	e04d      	b.n	80164d2 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8016440:	461a      	mov	r2, r3
 8016442:	2300      	movs	r3, #0
 8016444:	68f8      	ldr	r0, [r7, #12]
 8016446:	f7ff fb61 	bl	8015b0c <xTCPWindowNew>
 801644a:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 801644c:	69bb      	ldr	r3, [r7, #24]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d037      	beq.n	80164c2 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 8016452:	69bb      	ldr	r3, [r7, #24]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	4619      	mov	r1, r3
 8016458:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801645a:	f7f4 fc5b 	bl	800ad14 <FreeRTOS_min_int32>
 801645e:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8016460:	69bb      	ldr	r3, [r7, #24]
 8016462:	697a      	ldr	r2, [r7, #20]
 8016464:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 8016466:	69bb      	ldr	r3, [r7, #24]
 8016468:	69fa      	ldr	r2, [r7, #28]
 801646a:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 801646c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801646e:	697b      	ldr	r3, [r7, #20]
 8016470:	1ad3      	subs	r3, r2, r3
 8016472:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8016474:	697a      	ldr	r2, [r7, #20]
 8016476:	6839      	ldr	r1, [r7, #0]
 8016478:	69f8      	ldr	r0, [r7, #28]
 801647a:	f7ff ff3b 	bl	80162f4 <lTCPIncrementTxPosition>
 801647e:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	441a      	add	r2, r3
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 801648c:	6a3a      	ldr	r2, [r7, #32]
 801648e:	697b      	ldr	r3, [r7, #20]
 8016490:	4413      	add	r3, r2
 8016492:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 801649a:	69bb      	ldr	r3, [r7, #24]
 801649c:	3318      	adds	r3, #24
 801649e:	4619      	mov	r1, r3
 80164a0:	4610      	mov	r0, r2
 80164a2:	f7ff fa63 	bl	801596c <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 80164a6:	69bb      	ldr	r3, [r7, #24]
 80164a8:	689a      	ldr	r2, [r3, #8]
 80164aa:	69bb      	ldr	r3, [r7, #24]
 80164ac:	685b      	ldr	r3, [r3, #4]
 80164ae:	429a      	cmp	r2, r3
 80164b0:	da03      	bge.n	80164ba <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	69ba      	ldr	r2, [r7, #24]
 80164b6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80164b8:	e00b      	b.n	80164d2 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	2200      	movs	r2, #0
 80164be:	67da      	str	r2, [r3, #124]	@ 0x7c
 80164c0:	e007      	b.n	80164d2 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 80164c2:	6a3b      	ldr	r3, [r7, #32]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d008      	beq.n	80164da <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 80164c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80164ca:	4807      	ldr	r0, [pc, #28]	@ (80164e8 <lTCPWindowTxAdd+0x124>)
 80164cc:	f00c f8ba 	bl	8022644 <lUDPLoggingPrintf>
                    }

                    break;
 80164d0:	e003      	b.n	80164da <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 80164d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	dcae      	bgt.n	8016436 <lTCPWindowTxAdd+0x72>
 80164d8:	e000      	b.n	80164dc <lTCPWindowTxAdd+0x118>
                    break;
 80164da:	bf00      	nop
                }
            }

            return lDone;
 80164dc:	6a3b      	ldr	r3, [r7, #32]
        }
 80164de:	4618      	mov	r0, r3
 80164e0:	3728      	adds	r7, #40	@ 0x28
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd80      	pop	{r7, pc}
 80164e6:	bf00      	nop
 80164e8:	080274ac 	.word	0x080274ac

080164ec <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 80164ec:	b480      	push	{r7}
 80164ee:	b083      	sub	sp, #12
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d101      	bne.n	8016502 <xTCPWindowTxDone+0x16>
 80164fe:	2301      	movs	r3, #1
 8016500:	e000      	b.n	8016504 <xTCPWindowTxDone+0x18>
 8016502:	2300      	movs	r3, #0
        }
 8016504:	4618      	mov	r0, r3
 8016506:	370c      	adds	r7, #12
 8016508:	46bd      	mov	sp, r7
 801650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650e:	4770      	bx	lr

08016510 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8016510:	b580      	push	{r7, lr}
 8016512:	b086      	sub	sp, #24
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
 8016518:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	3354      	adds	r3, #84	@ 0x54
 801651e:	4618      	mov	r0, r3
 8016520:	f7ff fbb5 	bl	8015c8e <xTCPWindowPeekHead>
 8016524:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d102      	bne.n	8016532 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 801652c:	2300      	movs	r3, #0
 801652e:	613b      	str	r3, [r7, #16]
 8016530:	e02f      	b.n	8016592 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	6a1b      	ldr	r3, [r3, #32]
 801653a:	429a      	cmp	r2, r3
 801653c:	d306      	bcc.n	801654c <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	6a1b      	ldr	r3, [r3, #32]
 8016546:	1ad3      	subs	r3, r2, r3
 8016548:	617b      	str	r3, [r7, #20]
 801654a:	e001      	b.n	8016550 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 801654c:	2300      	movs	r3, #0
 801654e:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8016550:	6979      	ldr	r1, [r7, #20]
 8016552:	6838      	ldr	r0, [r7, #0]
 8016554:	f7f4 fbee 	bl	800ad34 <FreeRTOS_min_uint32>
 8016558:	4602      	mov	r2, r0
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	1a9b      	subs	r3, r3, r2
 801655e:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	689b      	ldr	r3, [r3, #8]
 8016564:	461a      	mov	r2, r3
 8016566:	68bb      	ldr	r3, [r7, #8]
 8016568:	4293      	cmp	r3, r2
 801656a:	d302      	bcc.n	8016572 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 801656c:	2301      	movs	r3, #1
 801656e:	613b      	str	r3, [r7, #16]
 8016570:	e001      	b.n	8016576 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 8016572:	2300      	movs	r3, #0
 8016574:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 8016576:	697b      	ldr	r3, [r7, #20]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d00a      	beq.n	8016592 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	689b      	ldr	r3, [r3, #8]
 8016584:	4619      	mov	r1, r3
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 801658a:	429a      	cmp	r2, r3
 801658c:	d201      	bcs.n	8016592 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 801658e:	2300      	movs	r3, #0
 8016590:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 8016592:	693b      	ldr	r3, [r7, #16]
        }
 8016594:	4618      	mov	r0, r3
 8016596:	3718      	adds	r7, #24
 8016598:	46bd      	mov	sp, r7
 801659a:	bd80      	pop	{r7, pc}

0801659c <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 801659c:	b580      	push	{r7, lr}
 801659e:	b08a      	sub	sp, #40	@ 0x28
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	60f8      	str	r0, [r7, #12]
 80165a4:	60b9      	str	r1, [r7, #8]
 80165a6:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2200      	movs	r2, #0
 80165ac:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d002      	beq.n	80165bc <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 80165b6:	2301      	movs	r3, #1
 80165b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80165ba:	e050      	b.n	801665e <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	3368      	adds	r3, #104	@ 0x68
 80165c0:	4618      	mov	r0, r3
 80165c2:	f7ff fb64 	bl	8015c8e <xTCPWindowPeekHead>
 80165c6:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 80165c8:	6a3b      	ldr	r3, [r7, #32]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d01f      	beq.n	801660e <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80165d2:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 80165d4:	6a3b      	ldr	r3, [r7, #32]
 80165d6:	3310      	adds	r3, #16
 80165d8:	4618      	mov	r0, r3
 80165da:	f7ff f9e4 	bl	80159a6 <ulTimerGetAge>
 80165de:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 80165e0:	6a3b      	ldr	r3, [r7, #32]
 80165e2:	7d1b      	ldrb	r3, [r3, #20]
 80165e4:	461a      	mov	r2, r3
 80165e6:	2301      	movs	r3, #1
 80165e8:	4093      	lsls	r3, r2
 80165ea:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 80165ec:	697b      	ldr	r3, [r7, #20]
 80165ee:	69fa      	ldr	r2, [r7, #28]
 80165f0:	fb02 f303 	mul.w	r3, r2, r3
 80165f4:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 80165f6:	697a      	ldr	r2, [r7, #20]
 80165f8:	69bb      	ldr	r3, [r7, #24]
 80165fa:	429a      	cmp	r2, r3
 80165fc:	d904      	bls.n	8016608 <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 80165fe:	697a      	ldr	r2, [r7, #20]
 8016600:	69bb      	ldr	r3, [r7, #24]
 8016602:	1ad2      	subs	r2, r2, r3
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 8016608:	2301      	movs	r3, #1
 801660a:	627b      	str	r3, [r7, #36]	@ 0x24
 801660c:	e027      	b.n	801665e <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	3354      	adds	r3, #84	@ 0x54
 8016612:	4618      	mov	r0, r3
 8016614:	f7ff fb3b 	bl	8015c8e <xTCPWindowPeekHead>
 8016618:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 801661a:	6a3b      	ldr	r3, [r7, #32]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d102      	bne.n	8016626 <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8016620:	2300      	movs	r3, #0
 8016622:	627b      	str	r3, [r7, #36]	@ 0x24
 8016624:	e01b      	b.n	801665e <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8016626:	68b9      	ldr	r1, [r7, #8]
 8016628:	68f8      	ldr	r0, [r7, #12]
 801662a:	f7ff ff71 	bl	8016510 <prvTCPWindowTxHasSpace>
 801662e:	4603      	mov	r3, r0
 8016630:	2b00      	cmp	r3, #0
 8016632:	d102      	bne.n	801663a <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8016634:	2300      	movs	r3, #0
 8016636:	627b      	str	r3, [r7, #36]	@ 0x24
 8016638:	e011      	b.n	801665e <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	781b      	ldrb	r3, [r3, #0]
 801663e:	f003 0302 	and.w	r3, r3, #2
 8016642:	b2db      	uxtb	r3, r3
 8016644:	2b00      	cmp	r3, #0
 8016646:	d008      	beq.n	801665a <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8016648:	6a3b      	ldr	r3, [r7, #32]
 801664a:	689a      	ldr	r2, [r3, #8]
 801664c:	6a3b      	ldr	r3, [r7, #32]
 801664e:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8016650:	429a      	cmp	r2, r3
 8016652:	da02      	bge.n	801665a <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 8016654:	2300      	movs	r3, #0
 8016656:	627b      	str	r3, [r7, #36]	@ 0x24
 8016658:	e001      	b.n	801665e <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 801665a:	2301      	movs	r3, #1
 801665c:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 801665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8016660:	4618      	mov	r0, r3
 8016662:	3728      	adds	r7, #40	@ 0x28
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}

08016668 <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 8016668:	b590      	push	{r4, r7, lr}
 801666a:	b087      	sub	sp, #28
 801666c:	af02      	add	r7, sp, #8
 801666e:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	3368      	adds	r3, #104	@ 0x68
 8016674:	4618      	mov	r0, r3
 8016676:	f7ff fb0a 	bl	8015c8e <xTCPWindowPeekHead>
 801667a:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d043      	beq.n	801670a <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	7d1b      	ldrb	r3, [r3, #20]
 8016686:	461a      	mov	r2, r3
 8016688:	2301      	movs	r3, #1
 801668a:	4093      	lsls	r3, r2
 801668c:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016692:	461a      	mov	r2, r3
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	fb02 f303 	mul.w	r3, r2, r3
 801669a:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	3310      	adds	r3, #16
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7ff f980 	bl	80159a6 <ulTimerGetAge>
 80166a6:	4602      	mov	r2, r0
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	4293      	cmp	r3, r2
 80166ac:	d22b      	bcs.n	8016706 <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	3368      	adds	r3, #104	@ 0x68
 80166b2:	4618      	mov	r0, r3
 80166b4:	f7ff fad2 	bl	8015c5c <xTCPWindowGetHead>
 80166b8:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	2200      	movs	r2, #0
 80166be:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80166c0:	4b14      	ldr	r3, [pc, #80]	@ (8016714 <pxTCPWindowTx_GetWaitQueue+0xac>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d020      	beq.n	801670a <pxTCPWindowTx_GetWaitQueue+0xa2>
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80166ce:	2b17      	cmp	r3, #23
 80166d0:	d01b      	beq.n	801670a <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80166d8:	4618      	mov	r0, r3
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80166e0:	461c      	mov	r4, r3
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	6899      	ldr	r1, [r3, #8]
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	681a      	ldr	r2, [r3, #0]
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	69db      	ldr	r3, [r3, #28]
 80166ee:	1ad3      	subs	r3, r2, r3
 80166f0:	68fa      	ldr	r2, [r7, #12]
 80166f2:	6812      	ldr	r2, [r2, #0]
 80166f4:	9201      	str	r2, [sp, #4]
 80166f6:	9300      	str	r3, [sp, #0]
 80166f8:	460b      	mov	r3, r1
 80166fa:	4622      	mov	r2, r4
 80166fc:	4601      	mov	r1, r0
 80166fe:	4806      	ldr	r0, [pc, #24]	@ (8016718 <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8016700:	f00b ffa0 	bl	8022644 <lUDPLoggingPrintf>
 8016704:	e001      	b.n	801670a <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 8016706:	2300      	movs	r3, #0
 8016708:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 801670a:	68fb      	ldr	r3, [r7, #12]
        }
 801670c:	4618      	mov	r0, r3
 801670e:	3714      	adds	r7, #20
 8016710:	46bd      	mov	sp, r7
 8016712:	bd90      	pop	{r4, r7, pc}
 8016714:	2000164c 	.word	0x2000164c
 8016718:	080274e8 	.word	0x080274e8

0801671c <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 801671c:	b590      	push	{r4, r7, lr}
 801671e:	b087      	sub	sp, #28
 8016720:	af02      	add	r7, sp, #8
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	3354      	adds	r3, #84	@ 0x54
 801672a:	4618      	mov	r0, r3
 801672c:	f7ff faaf 	bl	8015c8e <xTCPWindowPeekHead>
 8016730:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d04f      	beq.n	80167d8 <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	781b      	ldrb	r3, [r3, #0]
 801673c:	f003 0302 	and.w	r3, r3, #2
 8016740:	b2db      	uxtb	r3, r3
 8016742:	2b00      	cmp	r3, #0
 8016744:	d008      	beq.n	8016758 <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	689a      	ldr	r2, [r3, #8]
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801674e:	429a      	cmp	r2, r3
 8016750:	da02      	bge.n	8016758 <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 8016752:	2300      	movs	r3, #0
 8016754:	60fb      	str	r3, [r7, #12]
 8016756:	e03f      	b.n	80167d8 <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8016758:	6839      	ldr	r1, [r7, #0]
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f7ff fed8 	bl	8016510 <prvTCPWindowTxHasSpace>
 8016760:	4603      	mov	r3, r0
 8016762:	2b00      	cmp	r3, #0
 8016764:	d102      	bne.n	801676c <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 8016766:	2300      	movs	r3, #0
 8016768:	60fb      	str	r3, [r7, #12]
 801676a:	e035      	b.n	80167d8 <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	3354      	adds	r3, #84	@ 0x54
 8016770:	4618      	mov	r0, r3
 8016772:	f7ff fa73 	bl	8015c5c <xTCPWindowGetHead>
 8016776:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801677c:	68fa      	ldr	r2, [r7, #12]
 801677e:	429a      	cmp	r2, r3
 8016780:	d102      	bne.n	8016788 <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	2200      	movs	r2, #0
 8016786:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	68fa      	ldr	r2, [r7, #12]
 801678e:	6892      	ldr	r2, [r2, #8]
 8016790:	441a      	add	r2, r3
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016796:	4b13      	ldr	r3, [pc, #76]	@ (80167e4 <pxTCPWindowTx_GetTXQueue+0xc8>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	2b01      	cmp	r3, #1
 801679c:	dd1c      	ble.n	80167d8 <pxTCPWindowTx_GetTXQueue+0xbc>
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80167a4:	2b17      	cmp	r3, #23
 80167a6:	d017      	beq.n	80167d8 <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80167ae:	4618      	mov	r0, r3
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80167b6:	461c      	mov	r4, r3
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	6899      	ldr	r1, [r3, #8]
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	681a      	ldr	r2, [r3, #0]
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	69db      	ldr	r3, [r3, #28]
 80167c4:	1ad3      	subs	r3, r2, r3
 80167c6:	683a      	ldr	r2, [r7, #0]
 80167c8:	9201      	str	r2, [sp, #4]
 80167ca:	9300      	str	r3, [sp, #0]
 80167cc:	460b      	mov	r3, r1
 80167ce:	4622      	mov	r2, r4
 80167d0:	4601      	mov	r1, r0
 80167d2:	4805      	ldr	r0, [pc, #20]	@ (80167e8 <pxTCPWindowTx_GetTXQueue+0xcc>)
 80167d4:	f00b ff36 	bl	8022644 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 80167d8:	68fb      	ldr	r3, [r7, #12]
        }
 80167da:	4618      	mov	r0, r3
 80167dc:	3714      	adds	r7, #20
 80167de:	46bd      	mov	sp, r7
 80167e0:	bd90      	pop	{r4, r7, pc}
 80167e2:	bf00      	nop
 80167e4:	2000164c 	.word	0x2000164c
 80167e8:	08027534 	.word	0x08027534

080167ec <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 80167ec:	b590      	push	{r4, r7, lr}
 80167ee:	b08b      	sub	sp, #44	@ 0x2c
 80167f0:	af02      	add	r7, sp, #8
 80167f2:	60f8      	str	r0, [r7, #12]
 80167f4:	60b9      	str	r1, [r7, #8]
 80167f6:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 80167f8:	2300      	movs	r3, #0
 80167fa:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	3340      	adds	r3, #64	@ 0x40
 8016800:	4618      	mov	r0, r3
 8016802:	f7ff fa2b 	bl	8015c5c <xTCPWindowGetHead>
 8016806:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8016810:	69fb      	ldr	r3, [r7, #28]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d01c      	beq.n	8016850 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 8016816:	4b41      	ldr	r3, [pc, #260]	@ (801691c <ulTCPWindowTxGet+0x130>)
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d024      	beq.n	8016868 <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016824:	4618      	mov	r0, r3
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801682c:	461c      	mov	r4, r3
 801682e:	69fb      	ldr	r3, [r7, #28]
 8016830:	6899      	ldr	r1, [r3, #8]
 8016832:	69fb      	ldr	r3, [r7, #28]
 8016834:	681a      	ldr	r2, [r3, #0]
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	69db      	ldr	r3, [r3, #28]
 801683a:	1ad3      	subs	r3, r2, r3
 801683c:	68ba      	ldr	r2, [r7, #8]
 801683e:	9201      	str	r2, [sp, #4]
 8016840:	9300      	str	r3, [sp, #0]
 8016842:	460b      	mov	r3, r1
 8016844:	4622      	mov	r2, r4
 8016846:	4601      	mov	r1, r0
 8016848:	4835      	ldr	r0, [pc, #212]	@ (8016920 <ulTCPWindowTxGet+0x134>)
 801684a:	f00b fefb 	bl	8022644 <lUDPLoggingPrintf>
 801684e:	e00b      	b.n	8016868 <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8016850:	68f8      	ldr	r0, [r7, #12]
 8016852:	f7ff ff09 	bl	8016668 <pxTCPWindowTx_GetWaitQueue>
 8016856:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 8016858:	69fb      	ldr	r3, [r7, #28]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d104      	bne.n	8016868 <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 801685e:	68b9      	ldr	r1, [r7, #8]
 8016860:	68f8      	ldr	r0, [r7, #12]
 8016862:	f7ff ff5b 	bl	801671c <pxTCPWindowTx_GetTXQueue>
 8016866:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d051      	beq.n	8016912 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 801686e:	69fb      	ldr	r3, [r7, #28]
 8016870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016872:	2b00      	cmp	r3, #0
 8016874:	d004      	beq.n	8016880 <ulTCPWindowTxGet+0x94>
 8016876:	f240 7136 	movw	r1, #1846	@ 0x736
 801687a:	482a      	ldr	r0, [pc, #168]	@ (8016924 <ulTCPWindowTxGet+0x138>)
 801687c:	f7eb f87e 	bl	800197c <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016886:	69fb      	ldr	r3, [r7, #28]
 8016888:	3318      	adds	r3, #24
 801688a:	4619      	mov	r1, r3
 801688c:	4610      	mov	r0, r2
 801688e:	f7ff f86d 	bl	801596c <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8016892:	69fa      	ldr	r2, [r7, #28]
 8016894:	7d93      	ldrb	r3, [r2, #22]
 8016896:	f043 0301 	orr.w	r3, r3, #1
 801689a:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 801689c:	69fb      	ldr	r3, [r7, #28]
 801689e:	7d1b      	ldrb	r3, [r3, #20]
 80168a0:	3301      	adds	r3, #1
 80168a2:	b2da      	uxtb	r2, r3
 80168a4:	69fb      	ldr	r3, [r7, #28]
 80168a6:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 80168a8:	69fb      	ldr	r3, [r7, #28]
 80168aa:	7d1b      	ldrb	r3, [r3, #20]
 80168ac:	2b04      	cmp	r3, #4
 80168ae:	d120      	bne.n	80168f2 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	689a      	ldr	r2, [r3, #8]
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80168ba:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 80168bc:	429a      	cmp	r2, r3
 80168be:	d918      	bls.n	80168f2 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80168c6:	005b      	lsls	r3, r3, #1
 80168c8:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80168d0:	4619      	mov	r1, r3
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80168d8:	4618      	mov	r0, r3
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	689a      	ldr	r2, [r3, #8]
 80168de:	8afb      	ldrh	r3, [r7, #22]
 80168e0:	9300      	str	r3, [sp, #0]
 80168e2:	4613      	mov	r3, r2
 80168e4:	4602      	mov	r2, r0
 80168e6:	4810      	ldr	r0, [pc, #64]	@ (8016928 <ulTCPWindowTxGet+0x13c>)
 80168e8:	f00b feac 	bl	8022644 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 80168ec:	8afa      	ldrh	r2, [r7, #22]
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 80168f2:	69fb      	ldr	r3, [r7, #28]
 80168f4:	3310      	adds	r3, #16
 80168f6:	4618      	mov	r0, r3
 80168f8:	f7ff f848 	bl	801598c <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 80168fc:	69fb      	ldr	r3, [r7, #28]
 80168fe:	681a      	ldr	r2, [r3, #0]
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8016904:	69fb      	ldr	r3, [r7, #28]
 8016906:	68da      	ldr	r2, [r3, #12]
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 801690c:	69fb      	ldr	r3, [r7, #28]
 801690e:	689b      	ldr	r3, [r3, #8]
 8016910:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8016912:	69bb      	ldr	r3, [r7, #24]
        }
 8016914:	4618      	mov	r0, r3
 8016916:	3724      	adds	r7, #36	@ 0x24
 8016918:	46bd      	mov	sp, r7
 801691a:	bd90      	pop	{r4, r7, pc}
 801691c:	2000164c 	.word	0x2000164c
 8016920:	08027580 	.word	0x08027580
 8016924:	0802721c 	.word	0x0802721c
 8016928:	080275cc 	.word	0x080275cc

0801692c <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 801692c:	b580      	push	{r7, lr}
 801692e:	b084      	sub	sp, #16
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
 8016934:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8016936:	683b      	ldr	r3, [r7, #0]
 8016938:	3310      	adds	r3, #16
 801693a:	4618      	mov	r0, r3
 801693c:	f7ff f833 	bl	80159a6 <ulTimerGetAge>
 8016940:	4603      	mov	r3, r0
 8016942:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016948:	68fa      	ldr	r2, [r7, #12]
 801694a:	429a      	cmp	r2, r3
 801694c:	dc0e      	bgt.n	801696c <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016952:	4613      	mov	r3, r2
 8016954:	00db      	lsls	r3, r3, #3
 8016956:	1a9a      	subs	r2, r3, r2
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	4413      	add	r3, r2
 801695c:	2b00      	cmp	r3, #0
 801695e:	da00      	bge.n	8016962 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8016960:	3307      	adds	r3, #7
 8016962:	10db      	asrs	r3, r3, #3
 8016964:	461a      	mov	r2, r3
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	639a      	str	r2, [r3, #56]	@ 0x38
 801696a:	e00d      	b.n	8016988 <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016970:	4613      	mov	r3, r2
 8016972:	005b      	lsls	r3, r3, #1
 8016974:	441a      	add	r2, r3
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	4413      	add	r3, r2
 801697a:	2b00      	cmp	r3, #0
 801697c:	da00      	bge.n	8016980 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 801697e:	3303      	adds	r3, #3
 8016980:	109b      	asrs	r3, r3, #2
 8016982:	461a      	mov	r2, r3
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801698c:	2b31      	cmp	r3, #49	@ 0x31
 801698e:	dc02      	bgt.n	8016996 <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2232      	movs	r2, #50	@ 0x32
 8016994:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8016996:	bf00      	nop
 8016998:	3710      	adds	r7, #16
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
	...

080169a0 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 80169a0:	b5b0      	push	{r4, r5, r7, lr}
 80169a2:	b090      	sub	sp, #64	@ 0x40
 80169a4:	af04      	add	r7, sp, #16
 80169a6:	60f8      	str	r0, [r7, #12]
 80169a8:	60b9      	str	r1, [r7, #8]
 80169aa:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 80169ac:	2300      	movs	r3, #0
 80169ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 80169b0:	68bb      	ldr	r3, [r7, #8]
 80169b2:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	3398      	adds	r3, #152	@ 0x98
 80169b8:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 80169ba:	69fb      	ldr	r3, [r7, #28]
 80169bc:	685b      	ldr	r3, [r3, #4]
 80169be:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 80169c0:	e0a6      	b.n	8016b10 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 80169c2:	2300      	movs	r3, #0
 80169c4:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80169c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169c8:	68db      	ldr	r3, [r3, #12]
 80169ca:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80169cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169ce:	685b      	ldr	r3, [r3, #4]
 80169d0:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 80169d2:	69bb      	ldr	r3, [r7, #24]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	4619      	mov	r1, r3
 80169d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169da:	f7fe ff9c 	bl	8015916 <xSequenceGreaterThan>
 80169de:	4603      	mov	r3, r0
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	f040 8094 	bne.w	8016b0e <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 80169e6:	69bb      	ldr	r3, [r7, #24]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80169ec:	429a      	cmp	r2, r3
 80169ee:	f040 809c 	bne.w	8016b2a <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 80169f2:	69bb      	ldr	r3, [r7, #24]
 80169f4:	689b      	ldr	r3, [r3, #8]
 80169f6:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80169f8:	69bb      	ldr	r3, [r7, #24]
 80169fa:	7d9b      	ldrb	r3, [r3, #22]
 80169fc:	f003 0302 	and.w	r3, r3, #2
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d144      	bne.n	8016a90 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8016a06:	69bb      	ldr	r3, [r7, #24]
 8016a08:	681a      	ldr	r2, [r3, #0]
 8016a0a:	697b      	ldr	r3, [r7, #20]
 8016a0c:	4413      	add	r3, r2
 8016a0e:	6879      	ldr	r1, [r7, #4]
 8016a10:	4618      	mov	r0, r3
 8016a12:	f7fe ff80 	bl	8015916 <xSequenceGreaterThan>
 8016a16:	4603      	mov	r3, r0
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d023      	beq.n	8016a64 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8016a1c:	69bb      	ldr	r3, [r7, #24]
 8016a1e:	681a      	ldr	r2, [r3, #0]
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	69db      	ldr	r3, [r3, #28]
 8016a24:	1ad3      	subs	r3, r2, r3
 8016a26:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016a2e:	461c      	mov	r4, r3
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016a36:	461d      	mov	r5, r3
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	69db      	ldr	r3, [r3, #28]
 8016a3c:	693a      	ldr	r2, [r7, #16]
 8016a3e:	1ad0      	subs	r0, r2, r3
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	69db      	ldr	r3, [r3, #28]
 8016a44:	687a      	ldr	r2, [r7, #4]
 8016a46:	1ad3      	subs	r3, r2, r3
 8016a48:	6939      	ldr	r1, [r7, #16]
 8016a4a:	697a      	ldr	r2, [r7, #20]
 8016a4c:	440a      	add	r2, r1
 8016a4e:	9202      	str	r2, [sp, #8]
 8016a50:	693a      	ldr	r2, [r7, #16]
 8016a52:	9201      	str	r2, [sp, #4]
 8016a54:	9300      	str	r3, [sp, #0]
 8016a56:	4603      	mov	r3, r0
 8016a58:	462a      	mov	r2, r5
 8016a5a:	4621      	mov	r1, r4
 8016a5c:	4836      	ldr	r0, [pc, #216]	@ (8016b38 <prvTCPWindowTxCheckAck+0x198>)
 8016a5e:	f00b fdf1 	bl	8022644 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8016a62:	e063      	b.n	8016b2c <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8016a64:	69ba      	ldr	r2, [r7, #24]
 8016a66:	7d93      	ldrb	r3, [r2, #22]
 8016a68:	f043 0302 	orr.w	r3, r3, #2
 8016a6c:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016a6e:	69bb      	ldr	r3, [r7, #24]
 8016a70:	7d1b      	ldrb	r3, [r3, #20]
 8016a72:	2b01      	cmp	r3, #1
 8016a74:	d10a      	bne.n	8016a8c <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	681a      	ldr	r2, [r3, #0]
 8016a7a:	697b      	ldr	r3, [r7, #20]
 8016a7c:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016a7e:	687a      	ldr	r2, [r7, #4]
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d103      	bne.n	8016a8c <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8016a84:	69b9      	ldr	r1, [r7, #24]
 8016a86:	68f8      	ldr	r0, [r7, #12]
 8016a88:	f7ff ff50 	bl	801692c <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8016a8c:	2301      	movs	r3, #1
 8016a8e:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	6a1b      	ldr	r3, [r3, #32]
 8016a94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016a96:	429a      	cmp	r2, r3
 8016a98:	d128      	bne.n	8016aec <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016a9a:	4b28      	ldr	r3, [pc, #160]	@ (8016b3c <prvTCPWindowTxCheckAck+0x19c>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	2b01      	cmp	r3, #1
 8016aa0:	dd15      	ble.n	8016ace <prvTCPWindowTxCheckAck+0x12e>
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016aa8:	2b17      	cmp	r3, #23
 8016aaa:	d010      	beq.n	8016ace <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	69db      	ldr	r3, [r3, #28]
 8016ab0:	68ba      	ldr	r2, [r7, #8]
 8016ab2:	1ad1      	subs	r1, r2, r3
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	69db      	ldr	r3, [r3, #28]
 8016ab8:	687a      	ldr	r2, [r7, #4]
 8016aba:	1ad0      	subs	r0, r2, r3
 8016abc:	69bb      	ldr	r3, [r7, #24]
 8016abe:	681a      	ldr	r2, [r3, #0]
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	69db      	ldr	r3, [r3, #28]
 8016ac4:	1ad3      	subs	r3, r2, r3
 8016ac6:	4602      	mov	r2, r0
 8016ac8:	481d      	ldr	r0, [pc, #116]	@ (8016b40 <prvTCPWindowTxCheckAck+0x1a0>)
 8016aca:	f00b fdbb 	bl	8022644 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	6a1a      	ldr	r2, [r3, #32]
 8016ad2:	697b      	ldr	r3, [r7, #20]
 8016ad4:	441a      	add	r2, r3
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8016ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016adc:	697b      	ldr	r3, [r7, #20]
 8016ade:	4413      	add	r3, r2
 8016ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8016ae2:	69b8      	ldr	r0, [r7, #24]
 8016ae4:	f7ff f8ec 	bl	8015cc0 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8016aec:	6a3b      	ldr	r3, [r7, #32]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d008      	beq.n	8016b04 <prvTCPWindowTxCheckAck+0x164>
 8016af2:	69bb      	ldr	r3, [r7, #24]
 8016af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d004      	beq.n	8016b04 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016afa:	69bb      	ldr	r3, [r7, #24]
 8016afc:	3318      	adds	r3, #24
 8016afe:	4618      	mov	r0, r3
 8016b00:	f7ec fe38 	bl	8003774 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8016b04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016b06:	697b      	ldr	r3, [r7, #20]
 8016b08:	4413      	add	r3, r2
 8016b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016b0c:	e000      	b.n	8016b10 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 8016b0e:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8016b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b12:	69fb      	ldr	r3, [r7, #28]
 8016b14:	429a      	cmp	r2, r3
 8016b16:	d009      	beq.n	8016b2c <prvTCPWindowTxCheckAck+0x18c>
 8016b18:	6879      	ldr	r1, [r7, #4]
 8016b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016b1c:	f7fe fee5 	bl	80158ea <xSequenceLessThan>
 8016b20:	4603      	mov	r3, r0
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	f47f af4d 	bne.w	80169c2 <prvTCPWindowTxCheckAck+0x22>
 8016b28:	e000      	b.n	8016b2c <prvTCPWindowTxCheckAck+0x18c>
                    break;
 8016b2a:	bf00      	nop
            }

            return ulBytesConfirmed;
 8016b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8016b2e:	4618      	mov	r0, r3
 8016b30:	3730      	adds	r7, #48	@ 0x30
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bdb0      	pop	{r4, r5, r7, pc}
 8016b36:	bf00      	nop
 8016b38:	08027604 	.word	0x08027604
 8016b3c:	2000164c 	.word	0x2000164c
 8016b40:	0802764c 	.word	0x0802764c

08016b44 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b086      	sub	sp, #24
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	6078      	str	r0, [r7, #4]
 8016b4c:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	3370      	adds	r3, #112	@ 0x70
 8016b56:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	685b      	ldr	r3, [r3, #4]
 8016b5c:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8016b5e:	e049      	b.n	8016bf4 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016b60:	697b      	ldr	r3, [r7, #20]
 8016b62:	68db      	ldr	r3, [r3, #12]
 8016b64:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8016b66:	697b      	ldr	r3, [r7, #20]
 8016b68:	685b      	ldr	r3, [r3, #4]
 8016b6a:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016b6c:	68bb      	ldr	r3, [r7, #8]
 8016b6e:	7d9b      	ldrb	r3, [r3, #22]
 8016b70:	f003 0302 	and.w	r3, r3, #2
 8016b74:	b2db      	uxtb	r3, r3
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d13c      	bne.n	8016bf4 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8016b7a:	68bb      	ldr	r3, [r7, #8]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	6839      	ldr	r1, [r7, #0]
 8016b80:	4618      	mov	r0, r3
 8016b82:	f7fe feb2 	bl	80158ea <xSequenceLessThan>
 8016b86:	4603      	mov	r3, r0
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d033      	beq.n	8016bf4 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	7d5b      	ldrb	r3, [r3, #21]
 8016b90:	3301      	adds	r3, #1
 8016b92:	b2da      	uxtb	r2, r3
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8016b98:	68bb      	ldr	r3, [r7, #8]
 8016b9a:	7d5b      	ldrb	r3, [r3, #21]
 8016b9c:	2b03      	cmp	r3, #3
 8016b9e:	d129      	bne.n	8016bf4 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8016ba0:	68bb      	ldr	r3, [r7, #8]
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016ba6:	4b18      	ldr	r3, [pc, #96]	@ (8016c08 <prvTCPWindowFastRetransmit+0xc4>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	db11      	blt.n	8016bd2 <prvTCPWindowFastRetransmit+0x8e>
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016bb4:	2b17      	cmp	r3, #23
 8016bb6:	d00c      	beq.n	8016bd2 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	681a      	ldr	r2, [r3, #0]
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	69db      	ldr	r3, [r3, #28]
 8016bc0:	1ad1      	subs	r1, r2, r3
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	69db      	ldr	r3, [r3, #28]
 8016bc6:	683a      	ldr	r2, [r7, #0]
 8016bc8:	1ad3      	subs	r3, r2, r3
 8016bca:	461a      	mov	r2, r3
 8016bcc:	480f      	ldr	r0, [pc, #60]	@ (8016c0c <prvTCPWindowFastRetransmit+0xc8>)
 8016bce:	f00b fd39 	bl	8022644 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	3318      	adds	r3, #24
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f7ec fdcc 	bl	8003774 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	3318      	adds	r3, #24
 8016be6:	4619      	mov	r1, r3
 8016be8:	4610      	mov	r0, r2
 8016bea:	f7fe febf 	bl	801596c <vListInsertFifo>
                            ulCount++;
 8016bee:	693b      	ldr	r3, [r7, #16]
 8016bf0:	3301      	adds	r3, #1
 8016bf2:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8016bf4:	697a      	ldr	r2, [r7, #20]
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	429a      	cmp	r2, r3
 8016bfa:	d1b1      	bne.n	8016b60 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8016bfc:	693b      	ldr	r3, [r7, #16]
        }
 8016bfe:	4618      	mov	r0, r3
 8016c00:	3718      	adds	r7, #24
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd80      	pop	{r7, pc}
 8016c06:	bf00      	nop
 8016c08:	2000164c 	.word	0x2000164c
 8016c0c:	08027688 	.word	0x08027688

08016c10 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b084      	sub	sp, #16
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
 8016c18:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6a1b      	ldr	r3, [r3, #32]
 8016c1e:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8016c20:	68b9      	ldr	r1, [r7, #8]
 8016c22:	6838      	ldr	r0, [r7, #0]
 8016c24:	f7fe fe4c 	bl	80158c0 <xSequenceLessThanOrEqual>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d002      	beq.n	8016c34 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8016c2e:	2300      	movs	r3, #0
 8016c30:	60fb      	str	r3, [r7, #12]
 8016c32:	e005      	b.n	8016c40 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8016c34:	683a      	ldr	r2, [r7, #0]
 8016c36:	68b9      	ldr	r1, [r7, #8]
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f7ff feb1 	bl	80169a0 <prvTCPWindowTxCheckAck>
 8016c3e:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8016c40:	68fb      	ldr	r3, [r7, #12]
        }
 8016c42:	4618      	mov	r0, r3
 8016c44:	3710      	adds	r7, #16
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd80      	pop	{r7, pc}
	...

08016c4c <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8016c4c:	b5b0      	push	{r4, r5, r7, lr}
 8016c4e:	b088      	sub	sp, #32
 8016c50:	af02      	add	r7, sp, #8
 8016c52:	60f8      	str	r0, [r7, #12]
 8016c54:	60b9      	str	r1, [r7, #8]
 8016c56:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	6a1b      	ldr	r3, [r3, #32]
 8016c5c:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8016c5e:	687a      	ldr	r2, [r7, #4]
 8016c60:	68b9      	ldr	r1, [r7, #8]
 8016c62:	68f8      	ldr	r0, [r7, #12]
 8016c64:	f7ff fe9c 	bl	80169a0 <prvTCPWindowTxCheckAck>
 8016c68:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8016c6a:	68b9      	ldr	r1, [r7, #8]
 8016c6c:	68f8      	ldr	r0, [r7, #12]
 8016c6e:	f7ff ff69 	bl	8016b44 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8016c72:	4b16      	ldr	r3, [pc, #88]	@ (8016ccc <ulTCPWindowTxSack+0x80>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	dd23      	ble.n	8016cc2 <ulTCPWindowTxSack+0x76>
 8016c7a:	6979      	ldr	r1, [r7, #20]
 8016c7c:	68b8      	ldr	r0, [r7, #8]
 8016c7e:	f7fe fe4a 	bl	8015916 <xSequenceGreaterThan>
 8016c82:	4603      	mov	r3, r0
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d01c      	beq.n	8016cc2 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016c8e:	461c      	mov	r4, r3
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016c96:	461d      	mov	r5, r3
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	69db      	ldr	r3, [r3, #28]
 8016c9c:	68ba      	ldr	r2, [r7, #8]
 8016c9e:	1ad0      	subs	r0, r2, r3
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	69db      	ldr	r3, [r3, #28]
 8016ca4:	687a      	ldr	r2, [r7, #4]
 8016ca6:	1ad3      	subs	r3, r2, r3
 8016ca8:	68fa      	ldr	r2, [r7, #12]
 8016caa:	6a11      	ldr	r1, [r2, #32]
 8016cac:	68fa      	ldr	r2, [r7, #12]
 8016cae:	69d2      	ldr	r2, [r2, #28]
 8016cb0:	1a8a      	subs	r2, r1, r2
 8016cb2:	9201      	str	r2, [sp, #4]
 8016cb4:	9300      	str	r3, [sp, #0]
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	462a      	mov	r2, r5
 8016cba:	4621      	mov	r1, r4
 8016cbc:	4804      	ldr	r0, [pc, #16]	@ (8016cd0 <ulTCPWindowTxSack+0x84>)
 8016cbe:	f00b fcc1 	bl	8022644 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8016cc2:	693b      	ldr	r3, [r7, #16]
        }
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	3718      	adds	r7, #24
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bdb0      	pop	{r4, r5, r7, pc}
 8016ccc:	2000164c 	.word	0x2000164c
 8016cd0:	080276c8 	.word	0x080276c8

08016cd4 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b084      	sub	sp, #16
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d014      	beq.n	8016d0c <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ce6:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	899b      	ldrh	r3, [r3, #12]
 8016cec:	b29b      	uxth	r3, r3
 8016cee:	2b08      	cmp	r3, #8
 8016cf0:	d004      	beq.n	8016cfc <vProcessGeneratedUDPPacket+0x28>
 8016cf2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8016cf6:	4293      	cmp	r3, r2
 8016cf8:	d004      	beq.n	8016d04 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 8016cfa:	e007      	b.n	8016d0c <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8016cfc:	6878      	ldr	r0, [r7, #4]
 8016cfe:	f000 f845 	bl	8016d8c <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8016d02:	e003      	b.n	8016d0c <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 8016d04:	6878      	ldr	r0, [r7, #4]
 8016d06:	f000 fae3 	bl	80172d0 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 8016d0a:	bf00      	nop
        }
    }
}
 8016d0c:	bf00      	nop
 8016d0e:	3710      	adds	r7, #16
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd80      	pop	{r7, pc}

08016d14 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b086      	sub	sp, #24
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	60f8      	str	r0, [r7, #12]
 8016d1c:	460b      	mov	r3, r1
 8016d1e:	607a      	str	r2, [r7, #4]
 8016d20:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8016d22:	2300      	movs	r3, #0
 8016d24:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d103      	bne.n	8016d34 <xProcessReceivedUDPPacket+0x20>
 8016d2c:	2178      	movs	r1, #120	@ 0x78
 8016d2e:	4816      	ldr	r0, [pc, #88]	@ (8016d88 <xProcessReceivedUDPPacket+0x74>)
 8016d30:	f7ea fe24 	bl	800197c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d103      	bne.n	8016d44 <xProcessReceivedUDPPacket+0x30>
 8016d3c:	2179      	movs	r1, #121	@ 0x79
 8016d3e:	4812      	ldr	r0, [pc, #72]	@ (8016d88 <xProcessReceivedUDPPacket+0x74>)
 8016d40:	f7ea fe1c 	bl	800197c <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d48:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8016d4a:	693b      	ldr	r3, [r7, #16]
 8016d4c:	899b      	ldrh	r3, [r3, #12]
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	2b08      	cmp	r3, #8
 8016d52:	d004      	beq.n	8016d5e <xProcessReceivedUDPPacket+0x4a>
 8016d54:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8016d58:	4293      	cmp	r3, r2
 8016d5a:	d008      	beq.n	8016d6e <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8016d5c:	e00f      	b.n	8016d7e <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8016d5e:	897b      	ldrh	r3, [r7, #10]
 8016d60:	687a      	ldr	r2, [r7, #4]
 8016d62:	4619      	mov	r1, r3
 8016d64:	68f8      	ldr	r0, [r7, #12]
 8016d66:	f000 f92f 	bl	8016fc8 <xProcessReceivedUDPPacket_IPv4>
 8016d6a:	6178      	str	r0, [r7, #20]
                break;
 8016d6c:	e007      	b.n	8016d7e <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 8016d6e:	897b      	ldrh	r3, [r7, #10]
 8016d70:	687a      	ldr	r2, [r7, #4]
 8016d72:	4619      	mov	r1, r3
 8016d74:	68f8      	ldr	r0, [r7, #12]
 8016d76:	f000 fbdd 	bl	8017534 <xProcessReceivedUDPPacket_IPv6>
 8016d7a:	6178      	str	r0, [r7, #20]
                break;
 8016d7c:	bf00      	nop
    }

    return xReturn;
 8016d7e:	697b      	ldr	r3, [r7, #20]
}
 8016d80:	4618      	mov	r0, r3
 8016d82:	3718      	adds	r7, #24
 8016d84:	46bd      	mov	sp, r7
 8016d86:	bd80      	pop	{r7, pc}
 8016d88:	080276fc 	.word	0x080276fc

08016d8c <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b08e      	sub	sp, #56	@ 0x38
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	695b      	ldr	r3, [r3, #20]
 8016d98:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d9e:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016da4:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d104      	bne.n	8016db8 <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016db2:	3b2a      	subs	r3, #42	@ 0x2a
 8016db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8016db6:	e003      	b.n	8016dc0 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016dbc:	3b2a      	subs	r3, #42	@ 0x2a
 8016dbe:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8016dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016dc2:	f107 0208 	add.w	r2, r7, #8
 8016dc6:	f107 030c 	add.w	r3, r7, #12
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f7f0 fc4a 	bl	8007664 <eARPGetCacheEntry>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d102      	bne.n	8016de4 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016dde:	68ba      	ldr	r2, [r7, #8]
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 8016de4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016de8:	2b02      	cmp	r3, #2
 8016dea:	f000 80a0 	beq.w	8016f2e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 8016dee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016df2:	2b01      	cmp	r3, #1
 8016df4:	d176      	bne.n	8016ee4 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 8016df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016df8:	330e      	adds	r3, #14
 8016dfa:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d025      	beq.n	8016e50 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8016e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e06:	3322      	adds	r3, #34	@ 0x22
 8016e08:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016e0e:	6a3b      	ldr	r3, [r7, #32]
 8016e10:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8016e16:	6a3b      	ldr	r3, [r7, #32]
 8016e18:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8016e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e1c:	b29b      	uxth	r3, r3
 8016e1e:	3308      	adds	r3, #8
 8016e20:	b29a      	uxth	r2, r3
 8016e22:	6a3b      	ldr	r3, [r7, #32]
 8016e24:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8016e26:	6a3b      	ldr	r3, [r7, #32]
 8016e28:	889b      	ldrh	r3, [r3, #4]
 8016e2a:	b29b      	uxth	r3, r3
 8016e2c:	021b      	lsls	r3, r3, #8
 8016e2e:	b21a      	sxth	r2, r3
 8016e30:	6a3b      	ldr	r3, [r7, #32]
 8016e32:	889b      	ldrh	r3, [r3, #4]
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	0a1b      	lsrs	r3, r3, #8
 8016e38:	b29b      	uxth	r3, r3
 8016e3a:	b21b      	sxth	r3, r3
 8016e3c:	4313      	orrs	r3, r2
 8016e3e:	b21b      	sxth	r3, r3
 8016e40:	b29a      	uxth	r2, r3
 8016e42:	6a3b      	ldr	r3, [r7, #32]
 8016e44:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8016e46:	6a3b      	ldr	r3, [r7, #32]
 8016e48:	2200      	movs	r2, #0
 8016e4a:	719a      	strb	r2, [r3, #6]
 8016e4c:	2200      	movs	r2, #0
 8016e4e:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8016e50:	4b5b      	ldr	r3, [pc, #364]	@ (8016fc0 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 8016e52:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e58:	3306      	adds	r3, #6
 8016e5a:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8016e5c:	2218      	movs	r2, #24
 8016e5e:	69f9      	ldr	r1, [r7, #28]
 8016e60:	69b8      	ldr	r0, [r7, #24]
 8016e62:	f00b fe0b 	bl	8022a7c <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d109      	bne.n	8016e82 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8016e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e70:	2201      	movs	r2, #1
 8016e72:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8016e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e76:	b29b      	uxth	r3, r3
 8016e78:	331c      	adds	r3, #28
 8016e7a:	b29a      	uxth	r2, r3
 8016e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e7e:	805a      	strh	r2, [r3, #2]
 8016e80:	e005      	b.n	8016e8e <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8016e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e84:	b29b      	uxth	r3, r3
 8016e86:	331c      	adds	r3, #28
 8016e88:	b29a      	uxth	r2, r3
 8016e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e8c:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8016e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e90:	885b      	ldrh	r3, [r3, #2]
 8016e92:	b29b      	uxth	r3, r3
 8016e94:	021b      	lsls	r3, r3, #8
 8016e96:	b21a      	sxth	r2, r3
 8016e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e9a:	885b      	ldrh	r3, [r3, #2]
 8016e9c:	b29b      	uxth	r3, r3
 8016e9e:	0a1b      	lsrs	r3, r3, #8
 8016ea0:	b29b      	uxth	r3, r3
 8016ea2:	b21b      	sxth	r3, r3
 8016ea4:	4313      	orrs	r3, r2
 8016ea6:	b21b      	sxth	r3, r3
 8016ea8:	b29a      	uxth	r2, r3
 8016eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eac:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	695a      	ldr	r2, [r3, #20]
 8016eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eb4:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d004      	beq.n	8016ec8 <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ec6:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8016ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eca:	2200      	movs	r2, #0
 8016ecc:	719a      	strb	r2, [r3, #6]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	695b      	ldr	r3, [r3, #20]
 8016ed6:	4a3b      	ldr	r2, [pc, #236]	@ (8016fc4 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 8016ed8:	4293      	cmp	r3, r2
 8016eda:	d128      	bne.n	8016f2e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 8016edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ede:	2201      	movs	r2, #1
 8016ee0:	721a      	strb	r2, [r3, #8]
 8016ee2:	e024      	b.n	8016f2e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8016ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d11d      	bne.n	8016f28 <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	2200      	movs	r2, #0
 8016ef0:	4619      	mov	r1, r3
 8016ef2:	2000      	movs	r0, #0
 8016ef4:	f7f0 faa2 	bl	800743c <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	695b      	ldr	r3, [r3, #20]
 8016efc:	210b      	movs	r1, #11
 8016efe:	4618      	mov	r0, r3
 8016f00:	f7f6 fe3a 	bl	800db78 <FreeRTOS_FindEndPointOnNetMask>
 8016f04:	4602      	mov	r2, r0
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d103      	bne.n	8016f1a <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 8016f12:	2302      	movs	r3, #2
 8016f14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8016f18:	e009      	b.n	8016f2e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8016f1a:	68fa      	ldr	r2, [r7, #12]
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8016f20:	6878      	ldr	r0, [r7, #4]
 8016f22:	f7f0 fe07 	bl	8007b34 <vARPGenerateRequestPacket>
 8016f26:	e002      	b.n	8016f2e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8016f28:	2302      	movs	r3, #2
 8016f2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 8016f2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016f32:	2b02      	cmp	r3, #2
 8016f34:	d03d      	beq.n	8016fb2 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d035      	beq.n	8016faa <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f42:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016f46:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f4c:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8016f4e:	693b      	ldr	r3, [r7, #16]
 8016f50:	1d98      	adds	r0, r3, #6
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f56:	33e8      	adds	r3, #232	@ 0xe8
 8016f58:	2206      	movs	r2, #6
 8016f5a:	4619      	mov	r1, r3
 8016f5c:	f00b fd8e 	bl	8022a7c <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f64:	2b3b      	cmp	r3, #59	@ 0x3b
 8016f66:	d812      	bhi.n	8016f8e <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016f6e:	e008      	b.n	8016f82 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f76:	4413      	add	r3, r2
 8016f78:	2200      	movs	r2, #0
 8016f7a:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f7e:	3301      	adds	r3, #1
 8016f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f84:	2b3b      	cmp	r3, #59	@ 0x3b
 8016f86:	ddf3      	ble.n	8016f70 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	223c      	movs	r2, #60	@ 0x3c
 8016f8c:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 8016f8e:	697b      	ldr	r3, [r7, #20]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d011      	beq.n	8016fb8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	68db      	ldr	r3, [r3, #12]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d00d      	beq.n	8016fb8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8016f9c:	697b      	ldr	r3, [r7, #20]
 8016f9e:	68db      	ldr	r3, [r3, #12]
 8016fa0:	2201      	movs	r2, #1
 8016fa2:	6879      	ldr	r1, [r7, #4]
 8016fa4:	6978      	ldr	r0, [r7, #20]
 8016fa6:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8016fa8:	e006      	b.n	8016fb8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016faa:	6878      	ldr	r0, [r7, #4]
 8016fac:	f000 fca2 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
}
 8016fb0:	e002      	b.n	8016fb8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	f000 fc9e 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
}
 8016fb8:	bf00      	nop
 8016fba:	3738      	adds	r7, #56	@ 0x38
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}
 8016fc0:	08027e28 	.word	0x08027e28
 8016fc4:	fc0000e0 	.word	0xfc0000e0

08016fc8 <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8016fc8:	b590      	push	{r4, r7, lr}
 8016fca:	b099      	sub	sp, #100	@ 0x64
 8016fcc:	af02      	add	r7, sp, #8
 8016fce:	60f8      	str	r0, [r7, #12]
 8016fd0:	460b      	mov	r3, r1
 8016fd2:	607a      	str	r2, [r7, #4]
 8016fd4:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d104      	bne.n	8016fea <xProcessReceivedUDPPacket_IPv4+0x22>
 8016fe0:	f240 116f 	movw	r1, #367	@ 0x16f
 8016fe4:	4872      	ldr	r0, [pc, #456]	@ (80171b0 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8016fe6:	f7ea fcc9 	bl	800197c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d104      	bne.n	8016ffc <xProcessReceivedUDPPacket_IPv4+0x34>
 8016ff2:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8016ff6:	486e      	ldr	r0, [pc, #440]	@ (80171b0 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8016ff8:	f7ea fcc0 	bl	800197c <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017000:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017006:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8017008:	897b      	ldrh	r3, [r7, #10]
 801700a:	4618      	mov	r0, r3
 801700c:	f7f8 fb42 	bl	800f694 <pxUDPSocketLookup>
 8017010:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	2200      	movs	r2, #0
 8017016:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 8017018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801701a:	2b00      	cmp	r3, #0
 801701c:	f000 8085 	beq.w	801712a <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 8017020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017022:	2b00      	cmp	r3, #0
 8017024:	d018      	beq.n	8017058 <xProcessReceivedUDPPacket_IPv4+0x90>
 8017026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d014      	beq.n	8017058 <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 801702e:	68f8      	ldr	r0, [r7, #12]
 8017030:	f7f0 f8ee 	bl	8007210 <xCheckRequiresARPResolution>
 8017034:	4603      	mov	r3, r0
 8017036:	2b01      	cmp	r3, #1
 8017038:	d105      	bne.n	8017046 <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2201      	movs	r2, #1
 801703e:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 8017040:	2300      	movs	r3, #0
 8017042:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 8017044:	e0ae      	b.n	80171a4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8017046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017048:	1d9a      	adds	r2, r3, #6
 801704a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801704c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8017050:	4619      	mov	r1, r3
 8017052:	4610      	mov	r0, r2
 8017054:	f7f0 f9bc 	bl	80073d0 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8017058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801705a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801705c:	2b00      	cmp	r3, #0
 801705e:	d02f      	beq.n	80170c0 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017064:	332a      	adds	r3, #42	@ 0x2a
 8017066:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8017068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801706a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801706c:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017072:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	695b      	ldr	r3, [r3, #20]
 8017078:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 801707a:	2302      	movs	r3, #2
 801707c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8017080:	2318      	movs	r3, #24
 8017082:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 8017086:	897b      	ldrh	r3, [r7, #10]
 8017088:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 801708a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801708c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8017090:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8017092:	2302      	movs	r3, #2
 8017094:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8017096:	2318      	movs	r3, #24
 8017098:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801709e:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 80170a2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80170a6:	f107 0310 	add.w	r3, r7, #16
 80170aa:	9300      	str	r3, [sp, #0]
 80170ac:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80170ae:	460b      	mov	r3, r1
 80170b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80170b2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80170b4:	47a0      	blx	r4
 80170b6:	4603      	mov	r3, r0
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d001      	beq.n	80170c0 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 80170bc:	2300      	movs	r3, #0
 80170be:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 80170c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80170c2:	2b01      	cmp	r3, #1
 80170c4:	d16e      	bne.n	80171a4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 80170c6:	f7ed fc3d 	bl	8004944 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80170ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80170cc:	3354      	adds	r3, #84	@ 0x54
 80170ce:	68fa      	ldr	r2, [r7, #12]
 80170d0:	4611      	mov	r1, r2
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7ec faf1 	bl	80036ba <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 80170d8:	f7ed fc42 	bl	8004960 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 80170dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80170de:	685b      	ldr	r3, [r3, #4]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d005      	beq.n	80170f0 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80170e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80170e6:	685b      	ldr	r3, [r3, #4]
 80170e8:	2101      	movs	r1, #1
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7ec f9e0 	bl	80034b0 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 80170f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80170f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d00c      	beq.n	8017112 <xProcessReceivedUDPPacket_IPv4+0x14a>
 80170f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80170fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80170fc:	f003 0301 	and.w	r3, r3, #1
 8017100:	2b00      	cmp	r3, #0
 8017102:	d006      	beq.n	8017112 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8017104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	2101      	movs	r1, #1
 801710c:	4618      	mov	r0, r3
 801710e:	f7ec f9cf 	bl	80034b0 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8017112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017116:	2b00      	cmp	r3, #0
 8017118:	d044      	beq.n	80171a4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801711a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801711c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801711e:	2300      	movs	r3, #0
 8017120:	2200      	movs	r2, #0
 8017122:	2100      	movs	r1, #0
 8017124:	f7ec fca0 	bl	8003a68 <xQueueGenericSend>
 8017128:	e03c      	b.n	80171a4 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801712a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801712c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801712e:	b29b      	uxth	r3, r3
 8017130:	021b      	lsls	r3, r3, #8
 8017132:	b21a      	sxth	r2, r3
 8017134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017136:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8017138:	b29b      	uxth	r3, r3
 801713a:	0a1b      	lsrs	r3, r3, #8
 801713c:	b29b      	uxth	r3, r3
 801713e:	b21b      	sxth	r3, r3
 8017140:	4313      	orrs	r3, r2
 8017142:	b21b      	sxth	r3, r3
 8017144:	2b35      	cmp	r3, #53	@ 0x35
 8017146:	d10f      	bne.n	8017168 <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8017148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801714a:	1d98      	adds	r0, r3, #6
 801714c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801714e:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017156:	461a      	mov	r2, r3
 8017158:	f7f0 f970 	bl	800743c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 801715c:	68f8      	ldr	r0, [r7, #12]
 801715e:	f7f0 fe02 	bl	8007d66 <ulDNSHandlePacket>
 8017162:	4603      	mov	r3, r0
 8017164:	657b      	str	r3, [r7, #84]	@ 0x54
 8017166:	e01d      	b.n	80171a4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8017168:	897b      	ldrh	r3, [r7, #10]
 801716a:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 801716e:	4293      	cmp	r3, r2
 8017170:	d006      	beq.n	8017180 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 8017172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017174:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8017176:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8017178:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 801717c:	4293      	cmp	r3, r2
 801717e:	d10f      	bne.n	80171a0 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8017180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017182:	1d98      	adds	r0, r3, #6
 8017184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017186:	f8d3 101a 	ldr.w	r1, [r3, #26]
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801718e:	461a      	mov	r2, r3
 8017190:	f7f0 f954 	bl	800743c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8017194:	68f8      	ldr	r0, [r7, #12]
 8017196:	f7f0 fde6 	bl	8007d66 <ulDNSHandlePacket>
 801719a:	4603      	mov	r3, r0
 801719c:	657b      	str	r3, [r7, #84]	@ 0x54
 801719e:	e001      	b.n	80171a4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 80171a0:	2300      	movs	r3, #0
 80171a2:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 80171a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80171a6:	4618      	mov	r0, r3
 80171a8:	375c      	adds	r7, #92	@ 0x5c
 80171aa:	46bd      	mov	sp, r7
 80171ac:	bd90      	pop	{r4, r7, pc}
 80171ae:	bf00      	nop
 80171b0:	0802772c 	.word	0x0802772c

080171b4 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b086      	sub	sp, #24
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
 80171bc:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80171be:	2000      	movs	r0, #0
 80171c0:	f7f6 fc02 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 80171c4:	6178      	str	r0, [r7, #20]
 80171c6:	e021      	b.n	801720c <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	2b60      	cmp	r3, #96	@ 0x60
 80171cc:	d119      	bne.n	8017202 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 80171ce:	697b      	ldr	r3, [r7, #20]
 80171d0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80171d4:	f003 0304 	and.w	r3, r3, #4
 80171d8:	b2db      	uxtb	r3, r3
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d011      	beq.n	8017202 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 80171de:	697b      	ldr	r3, [r7, #20]
 80171e0:	3338      	adds	r3, #56	@ 0x38
 80171e2:	4618      	mov	r0, r3
 80171e4:	f7f6 ffd4 	bl	800e190 <xIPv6_GetIPType>
 80171e8:	4603      	mov	r3, r0
 80171ea:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 80171ec:	7cfb      	ldrb	r3, [r7, #19]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d101      	bne.n	80171f6 <pxGetEndpoint+0x42>
 80171f2:	2301      	movs	r3, #1
 80171f4:	e000      	b.n	80171f8 <pxGetEndpoint+0x44>
 80171f6:	2300      	movs	r3, #0
 80171f8:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 80171fa:	68fa      	ldr	r2, [r7, #12]
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	429a      	cmp	r2, r3
 8017200:	d008      	beq.n	8017214 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8017202:	6979      	ldr	r1, [r7, #20]
 8017204:	2000      	movs	r0, #0
 8017206:	f7f6 fc01 	bl	800da0c <FreeRTOS_NextEndPoint>
 801720a:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 801720c:	697b      	ldr	r3, [r7, #20]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d1da      	bne.n	80171c8 <pxGetEndpoint+0x14>
 8017212:	e000      	b.n	8017216 <pxGetEndpoint+0x62>
                {
                    break;
 8017214:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 8017216:	697b      	ldr	r3, [r7, #20]
}
 8017218:	4618      	mov	r0, r3
 801721a:	3718      	adds	r7, #24
 801721c:	46bd      	mov	sp, r7
 801721e:	bd80      	pop	{r7, pc}

08017220 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b084      	sub	sp, #16
 8017224:	af00      	add	r7, sp, #0
 8017226:	6078      	str	r0, [r7, #4]
 8017228:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 801722a:	2300      	movs	r3, #0
 801722c:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	f103 0114 	add.w	r1, r3, #20
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017238:	2b00      	cmp	r3, #0
 801723a:	d001      	beq.n	8017240 <prvStartLookup+0x20>
 801723c:	4b1e      	ldr	r3, [pc, #120]	@ (80172b8 <prvStartLookup+0x98>)
 801723e:	e000      	b.n	8017242 <prvStartLookup+0x22>
 8017240:	4b1e      	ldr	r3, [pc, #120]	@ (80172bc <prvStartLookup+0x9c>)
 8017242:	461a      	mov	r2, r3
 8017244:	481e      	ldr	r0, [pc, #120]	@ (80172c0 <prvStartLookup+0xa0>)
 8017246:	f00b f9fd 	bl	8022644 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801724e:	2b00      	cmp	r3, #0
 8017250:	d11f      	bne.n	8017292 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	3314      	adds	r3, #20
 8017256:	4618      	mov	r0, r3
 8017258:	f7f6 ff9a 	bl	800e190 <xIPv6_GetIPType>
 801725c:	4603      	mov	r3, r0
 801725e:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8017260:	7bbb      	ldrb	r3, [r7, #14]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d101      	bne.n	801726a <prvStartLookup+0x4a>
 8017266:	2301      	movs	r3, #1
 8017268:	e000      	b.n	801726c <prvStartLookup+0x4c>
 801726a:	2300      	movs	r3, #0
 801726c:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 801726e:	68b9      	ldr	r1, [r7, #8]
 8017270:	2060      	movs	r0, #96	@ 0x60
 8017272:	f7ff ff9f 	bl	80171b4 <pxGetEndpoint>
 8017276:	4602      	mov	r2, r0
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017280:	2b00      	cmp	r3, #0
 8017282:	d001      	beq.n	8017288 <prvStartLookup+0x68>
 8017284:	4b0f      	ldr	r3, [pc, #60]	@ (80172c4 <prvStartLookup+0xa4>)
 8017286:	e000      	b.n	801728a <prvStartLookup+0x6a>
 8017288:	4b0f      	ldr	r3, [pc, #60]	@ (80172c8 <prvStartLookup+0xa8>)
 801728a:	4619      	mov	r1, r3
 801728c:	480f      	ldr	r0, [pc, #60]	@ (80172cc <prvStartLookup+0xac>)
 801728e:	f00b f9d9 	bl	8022644 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017296:	2b00      	cmp	r3, #0
 8017298:	d008      	beq.n	80172ac <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	3314      	adds	r3, #20
 801729e:	4619      	mov	r1, r3
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f7f5 f8b7 	bl	800c414 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	2201      	movs	r2, #1
 80172aa:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 80172ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80172ae:	4618      	mov	r0, r3
 80172b0:	3710      	adds	r7, #16
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bd80      	pop	{r7, pc}
 80172b6:	bf00      	nop
 80172b8:	08027760 	.word	0x08027760
 80172bc:	08027764 	.word	0x08027764
 80172c0:	08027768 	.word	0x08027768
 80172c4:	0802778c 	.word	0x0802778c
 80172c8:	08027790 	.word	0x08027790
 80172cc:	08027794 	.word	0x08027794

080172d0 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80172d0:	b590      	push	{r4, r7, lr}
 80172d2:	b093      	sub	sp, #76	@ 0x4c
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 80172d8:	2300      	movs	r3, #0
 80172da:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 80172dc:	2300      	movs	r3, #0
 80172de:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 80172e0:	2300      	movs	r3, #0
 80172e2:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 80172e4:	2300      	movs	r3, #0
 80172e6:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172ec:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 80172ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172f0:	330e      	adds	r3, #14
 80172f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	3314      	adds	r3, #20
 80172f8:	f107 040c 	add.w	r4, r7, #12
 80172fc:	6818      	ldr	r0, [r3, #0]
 80172fe:	6859      	ldr	r1, [r3, #4]
 8017300:	689a      	ldr	r2, [r3, #8]
 8017302:	68db      	ldr	r3, [r3, #12]
 8017304:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801730a:	2b00      	cmp	r3, #0
 801730c:	d107      	bne.n	801731e <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 801730e:	233e      	movs	r3, #62	@ 0x3e
 8017310:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017318:	1ad3      	subs	r3, r2, r3
 801731a:	643b      	str	r3, [r7, #64]	@ 0x40
 801731c:	e003      	b.n	8017326 <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017322:	3b3e      	subs	r3, #62	@ 0x3e
 8017324:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	3314      	adds	r3, #20
 801732a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801732c:	f107 021c 	add.w	r2, r7, #28
 8017330:	4618      	mov	r0, r3
 8017332:	f7f4 fe03 	bl	800bf3c <eNDGetCacheEntry>
 8017336:	4603      	mov	r3, r0
 8017338:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 801733c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017340:	2b02      	cmp	r3, #2
 8017342:	f000 80b1 	beq.w	80174a8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 8017346:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801734a:	2b01      	cmp	r3, #1
 801734c:	f040 8095 	bne.w	801747a <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8017350:	69fa      	ldr	r2, [r7, #28]
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801735a:	2b00      	cmp	r3, #0
 801735c:	d109      	bne.n	8017372 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 801735e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017360:	2260      	movs	r2, #96	@ 0x60
 8017362:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 8017364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017366:	223a      	movs	r2, #58	@ 0x3a
 8017368:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 801736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801736c:	2280      	movs	r2, #128	@ 0x80
 801736e:	71da      	strb	r2, [r3, #7]
 8017370:	e05e      	b.n	8017430 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 8017372:	2300      	movs	r3, #0
 8017374:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 8017376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017378:	3336      	adds	r3, #54	@ 0x36
 801737a:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 801737c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801737e:	2260      	movs	r2, #96	@ 0x60
 8017380:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 8017382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017384:	2200      	movs	r2, #0
 8017386:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 8017388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801738a:	2200      	movs	r2, #0
 801738c:	709a      	strb	r2, [r3, #2]
 801738e:	2200      	movs	r2, #0
 8017390:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 8017392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017394:	22ff      	movs	r2, #255	@ 0xff
 8017396:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801739c:	b29b      	uxth	r3, r3
 801739e:	3b36      	subs	r3, #54	@ 0x36
 80173a0:	b29a      	uxth	r2, r3
 80173a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a4:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 80173a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173a8:	2211      	movs	r2, #17
 80173aa:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173b0:	b29b      	uxth	r3, r3
 80173b2:	3b36      	subs	r3, #54	@ 0x36
 80173b4:	b29a      	uxth	r2, r3
 80173b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173b8:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 80173ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173bc:	889b      	ldrh	r3, [r3, #4]
 80173be:	b29b      	uxth	r3, r3
 80173c0:	021b      	lsls	r3, r3, #8
 80173c2:	b21a      	sxth	r2, r3
 80173c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173c6:	889b      	ldrh	r3, [r3, #4]
 80173c8:	b29b      	uxth	r3, r3
 80173ca:	0a1b      	lsrs	r3, r3, #8
 80173cc:	b29b      	uxth	r3, r3
 80173ce:	b21b      	sxth	r3, r3
 80173d0:	4313      	orrs	r3, r2
 80173d2:	b21b      	sxth	r3, r3
 80173d4:	b29a      	uxth	r2, r3
 80173d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173d8:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80173de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173e0:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 80173e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173e8:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 80173ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ec:	889b      	ldrh	r3, [r3, #4]
 80173ee:	b29b      	uxth	r3, r3
 80173f0:	021b      	lsls	r3, r3, #8
 80173f2:	b21a      	sxth	r2, r3
 80173f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173f6:	889b      	ldrh	r3, [r3, #4]
 80173f8:	b29b      	uxth	r3, r3
 80173fa:	0a1b      	lsrs	r3, r3, #8
 80173fc:	b29b      	uxth	r3, r3
 80173fe:	b21b      	sxth	r3, r3
 8017400:	4313      	orrs	r3, r2
 8017402:	b21b      	sxth	r3, r3
 8017404:	b29a      	uxth	r2, r3
 8017406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017408:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801740c:	2200      	movs	r2, #0
 801740e:	719a      	strb	r2, [r3, #6]
 8017410:	2200      	movs	r2, #0
 8017412:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017418:	2b00      	cmp	r3, #0
 801741a:	d009      	beq.n	8017430 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 801741c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801741e:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017426:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8017428:	2210      	movs	r2, #16
 801742a:	4619      	mov	r1, r3
 801742c:	f00b fb26 	bl	8022a7c <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017434:	2b00      	cmp	r3, #0
 8017436:	d10e      	bne.n	8017456 <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 8017438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801743a:	b29b      	uxth	r3, r3
 801743c:	3308      	adds	r3, #8
 801743e:	b29b      	uxth	r3, r3
 8017440:	021b      	lsls	r3, r3, #8
 8017442:	b29a      	uxth	r2, r3
 8017444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017446:	3308      	adds	r3, #8
 8017448:	0a1b      	lsrs	r3, r3, #8
 801744a:	b29b      	uxth	r3, r3
 801744c:	4313      	orrs	r3, r2
 801744e:	b29a      	uxth	r2, r3
 8017450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017452:	809a      	strh	r2, [r3, #4]
 8017454:	e028      	b.n	80174a8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8017456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017458:	2211      	movs	r2, #17
 801745a:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 801745c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801745e:	b29b      	uxth	r3, r3
 8017460:	3308      	adds	r3, #8
 8017462:	b29b      	uxth	r3, r3
 8017464:	021b      	lsls	r3, r3, #8
 8017466:	b29a      	uxth	r2, r3
 8017468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801746a:	3308      	adds	r3, #8
 801746c:	0a1b      	lsrs	r3, r3, #8
 801746e:	b29b      	uxth	r3, r3
 8017470:	4313      	orrs	r3, r2
 8017472:	b29a      	uxth	r2, r3
 8017474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017476:	809a      	strh	r2, [r3, #4]
 8017478:	e016      	b.n	80174a8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 801747a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801747e:	2b00      	cmp	r3, #0
 8017480:	d10f      	bne.n	80174a2 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d002      	beq.n	801748e <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8017488:	69fa      	ldr	r2, [r7, #28]
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 801748e:	f107 0320 	add.w	r3, r7, #32
 8017492:	4619      	mov	r1, r3
 8017494:	6878      	ldr	r0, [r7, #4]
 8017496:	f7ff fec3 	bl	8017220 <prvStartLookup>
 801749a:	4603      	mov	r3, r0
 801749c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80174a0:	e002      	b.n	80174a8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 80174a2:	2302      	movs	r3, #2
 80174a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 80174a8:	6a3b      	ldr	r3, [r7, #32]
 80174aa:	2b01      	cmp	r3, #1
 80174ac:	d03d      	beq.n	801752a <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 80174ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80174b2:	2b02      	cmp	r3, #2
 80174b4:	d036      	beq.n	8017524 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d02e      	beq.n	801751c <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80174c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80174c6:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174cc:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 80174ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174d0:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80174d6:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 80174d8:	2206      	movs	r2, #6
 80174da:	4619      	mov	r1, r3
 80174dc:	f00b face 	bl	8022a7c <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174e4:	2b3b      	cmp	r3, #59	@ 0x3b
 80174e6:	d812      	bhi.n	801750e <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80174ee:	e008      	b.n	8017502 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80174f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174f6:	4413      	add	r3, r2
 80174f8:	2200      	movs	r2, #0
 80174fa:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80174fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174fe:	3301      	adds	r3, #1
 8017500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017504:	2b3b      	cmp	r3, #59	@ 0x3b
 8017506:	ddf3      	ble.n	80174f0 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	223c      	movs	r2, #60	@ 0x3c
 801750c:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 801750e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017510:	68db      	ldr	r3, [r3, #12]
 8017512:	2201      	movs	r2, #1
 8017514:	6879      	ldr	r1, [r7, #4]
 8017516:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017518:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801751a:	e006      	b.n	801752a <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801751c:	6878      	ldr	r0, [r7, #4]
 801751e:	f000 f9e9 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
}
 8017522:	e002      	b.n	801752a <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8017524:	6878      	ldr	r0, [r7, #4]
 8017526:	f000 f9e5 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
}
 801752a:	bf00      	nop
 801752c:	374c      	adds	r7, #76	@ 0x4c
 801752e:	46bd      	mov	sp, r7
 8017530:	bd90      	pop	{r4, r7, pc}
	...

08017534 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8017534:	b590      	push	{r4, r7, lr}
 8017536:	b09b      	sub	sp, #108	@ 0x6c
 8017538:	af02      	add	r7, sp, #8
 801753a:	60f8      	str	r0, [r7, #12]
 801753c:	460b      	mov	r3, r1
 801753e:	607a      	str	r2, [r7, #4]
 8017540:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 8017542:	2301      	movs	r3, #1
 8017544:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d104      	bne.n	8017556 <xProcessReceivedUDPPacket_IPv6+0x22>
 801754c:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8017550:	4874      	ldr	r0, [pc, #464]	@ (8017724 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8017552:	f7ea fa13 	bl	800197c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801755a:	2b00      	cmp	r3, #0
 801755c:	d104      	bne.n	8017568 <xProcessReceivedUDPPacket_IPv6+0x34>
 801755e:	f240 1187 	movw	r1, #391	@ 0x187
 8017562:	4870      	ldr	r0, [pc, #448]	@ (8017724 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8017564:	f7ea fa0a 	bl	800197c <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801756c:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 801756e:	897b      	ldrh	r3, [r7, #10]
 8017570:	4618      	mov	r0, r3
 8017572:	f7f8 f88f 	bl	800f694 <pxUDPSocketLookup>
 8017576:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	2200      	movs	r2, #0
 801757c:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 801757e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017580:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8017582:	b29b      	uxth	r3, r3
 8017584:	2b00      	cmp	r3, #0
 8017586:	d109      	bne.n	801759c <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 8017588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801758a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801758c:	b29b      	uxth	r3, r3
 801758e:	4619      	mov	r1, r3
 8017590:	4865      	ldr	r0, [pc, #404]	@ (8017728 <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 8017592:	f00b f857 	bl	8022644 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 8017596:	2300      	movs	r3, #0
 8017598:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801759a:	e0bd      	b.n	8017718 <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 801759c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801759e:	2b00      	cmp	r3, #0
 80175a0:	f000 8091 	beq.w	80176c6 <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80175a4:	68f8      	ldr	r0, [r7, #12]
 80175a6:	f7ef fe33 	bl	8007210 <xCheckRequiresARPResolution>
 80175aa:	4603      	mov	r3, r0
 80175ac:	2b01      	cmp	r3, #1
 80175ae:	d105      	bne.n	80175bc <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	2201      	movs	r2, #1
 80175b4:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 80175b6:	2300      	movs	r3, #0
 80175b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 80175ba:	e0ad      	b.n	8017718 <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 80175bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80175be:	1d98      	adds	r0, r3, #6
 80175c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80175c2:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 80175ca:	461a      	mov	r2, r3
 80175cc:	f7f4 fd64 	bl	800c098 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80175d0:	68f8      	ldr	r0, [r7, #12]
 80175d2:	f7f2 fe61 	bl	800a298 <uxIPHeaderSizePacket>
 80175d6:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80175d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d03d      	beq.n	801765c <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80175e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80175e6:	3316      	adds	r3, #22
 80175e8:	4413      	add	r3, r2
 80175ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80175ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80175f0:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80175f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 80175f8:	897b      	ldrh	r3, [r7, #10]
 80175fa:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80175fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80175fe:	3316      	adds	r3, #22
 8017600:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8017604:	6818      	ldr	r0, [r3, #0]
 8017606:	6859      	ldr	r1, [r3, #4]
 8017608:	689a      	ldr	r2, [r3, #8]
 801760a:	68db      	ldr	r3, [r3, #12]
 801760c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801760e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017610:	3326      	adds	r3, #38	@ 0x26
 8017612:	f107 041c 	add.w	r4, r7, #28
 8017616:	6818      	ldr	r0, [r3, #0]
 8017618:	6859      	ldr	r1, [r3, #4]
 801761a:	689a      	ldr	r2, [r3, #8]
 801761c:	68db      	ldr	r3, [r3, #12]
 801761e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8017620:	230a      	movs	r3, #10
 8017622:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8017626:	230a      	movs	r3, #10
 8017628:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 801762a:	2318      	movs	r3, #24
 801762c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8017630:	2318      	movs	r3, #24
 8017632:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017638:	3b3e      	subs	r3, #62	@ 0x3e
 801763a:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 801763c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8017640:	f107 0314 	add.w	r3, r7, #20
 8017644:	9300      	str	r3, [sp, #0]
 8017646:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8017648:	4613      	mov	r3, r2
 801764a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801764c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801764e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017650:	47a0      	blx	r4
 8017652:	4603      	mov	r3, r0
 8017654:	2b00      	cmp	r3, #0
 8017656:	d001      	beq.n	801765c <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8017658:	2300      	movs	r3, #0
 801765a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 801765c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801765e:	2b01      	cmp	r3, #1
 8017660:	d15a      	bne.n	8017718 <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8017662:	f7ed f96f 	bl	8004944 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8017666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017668:	3354      	adds	r3, #84	@ 0x54
 801766a:	68fa      	ldr	r2, [r7, #12]
 801766c:	4611      	mov	r1, r2
 801766e:	4618      	mov	r0, r3
 8017670:	f7ec f823 	bl	80036ba <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8017674:	f7ed f974 	bl	8004960 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8017678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801767a:	685b      	ldr	r3, [r3, #4]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d005      	beq.n	801768c <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8017680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017682:	685b      	ldr	r3, [r3, #4]
 8017684:	2101      	movs	r1, #1
 8017686:	4618      	mov	r0, r3
 8017688:	f7eb ff12 	bl	80034b0 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 801768c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801768e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017690:	2b00      	cmp	r3, #0
 8017692:	d00c      	beq.n	80176ae <xProcessReceivedUDPPacket_IPv6+0x17a>
 8017694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017698:	f003 0301 	and.w	r3, r3, #1
 801769c:	2b00      	cmp	r3, #0
 801769e:	d006      	beq.n	80176ae <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80176a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	2101      	movs	r1, #1
 80176a8:	4618      	mov	r0, r3
 80176aa:	f7eb ff01 	bl	80034b0 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 80176ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d030      	beq.n	8017718 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 80176b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80176ba:	2300      	movs	r3, #0
 80176bc:	2200      	movs	r2, #0
 80176be:	2100      	movs	r1, #0
 80176c0:	f7ec f9d2 	bl	8003a68 <xQueueGenericSend>
 80176c4:	e028      	b.n	8017718 <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 80176c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80176ca:	b29b      	uxth	r3, r3
 80176cc:	021b      	lsls	r3, r3, #8
 80176ce:	b21a      	sxth	r2, r3
 80176d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80176d4:	b29b      	uxth	r3, r3
 80176d6:	0a1b      	lsrs	r3, r3, #8
 80176d8:	b29b      	uxth	r3, r3
 80176da:	b21b      	sxth	r3, r3
 80176dc:	4313      	orrs	r3, r2
 80176de:	b21b      	sxth	r3, r3
 80176e0:	2b35      	cmp	r3, #53	@ 0x35
 80176e2:	d105      	bne.n	80176f0 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80176e4:	68f8      	ldr	r0, [r7, #12]
 80176e6:	f7f0 fb3e 	bl	8007d66 <ulDNSHandlePacket>
 80176ea:	4603      	mov	r3, r0
 80176ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80176ee:	e013      	b.n	8017718 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 80176f0:	897b      	ldrh	r3, [r7, #10]
 80176f2:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80176f6:	4293      	cmp	r3, r2
 80176f8:	d006      	beq.n	8017708 <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 80176fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80176fe:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8017700:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8017704:	4293      	cmp	r3, r2
 8017706:	d105      	bne.n	8017714 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8017708:	68f8      	ldr	r0, [r7, #12]
 801770a:	f7f0 fb2c 	bl	8007d66 <ulDNSHandlePacket>
 801770e:	4603      	mov	r3, r0
 8017710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017712:	e001      	b.n	8017718 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8017714:	2300      	movs	r3, #0
 8017716:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8017718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801771a:	4618      	mov	r0, r3
 801771c:	3764      	adds	r7, #100	@ 0x64
 801771e:	46bd      	mov	sp, r7
 8017720:	bd90      	pop	{r4, r7, pc}
 8017722:	bf00      	nop
 8017724:	080277bc 	.word	0x080277bc
 8017728:	080277f0 	.word	0x080277f0

0801772c <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 801772c:	b480      	push	{r7}
 801772e:	b083      	sub	sp, #12
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8017734:	2301      	movs	r3, #1
    }
 8017736:	4618      	mov	r0, r3
 8017738:	370c      	adds	r7, #12
 801773a:	46bd      	mov	sp, r7
 801773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017740:	4770      	bx	lr

08017742 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 8017742:	b480      	push	{r7}
 8017744:	af00      	add	r7, sp, #0
    }
 8017746:	bf00      	nop
 8017748:	46bd      	mov	sp, r7
 801774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774e:	4770      	bx	lr

08017750 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b082      	sub	sp, #8
 8017754:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 8017756:	4b2e      	ldr	r3, [pc, #184]	@ (8017810 <xNetworkBuffersInitialise+0xc0>)
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	2b00      	cmp	r3, #0
 801775c:	d149      	bne.n	80177f2 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 801775e:	2140      	movs	r1, #64	@ 0x40
 8017760:	2040      	movs	r0, #64	@ 0x40
 8017762:	f7ec f957 	bl	8003a14 <xQueueCreateCountingSemaphore>
 8017766:	4603      	mov	r3, r0
 8017768:	4a29      	ldr	r2, [pc, #164]	@ (8017810 <xNetworkBuffersInitialise+0xc0>)
 801776a:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 801776c:	4b28      	ldr	r3, [pc, #160]	@ (8017810 <xNetworkBuffersInitialise+0xc0>)
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d103      	bne.n	801777c <xNetworkBuffersInitialise+0x2c>
 8017774:	21c3      	movs	r1, #195	@ 0xc3
 8017776:	4827      	ldr	r0, [pc, #156]	@ (8017814 <xNetworkBuffersInitialise+0xc4>)
 8017778:	f7ea f900 	bl	800197c <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 801777c:	4b24      	ldr	r3, [pc, #144]	@ (8017810 <xNetworkBuffersInitialise+0xc0>)
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d036      	beq.n	80177f2 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 8017784:	4824      	ldr	r0, [pc, #144]	@ (8017818 <xNetworkBuffersInitialise+0xc8>)
 8017786:	f7eb ff6b 	bl	8003660 <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 801778a:	4824      	ldr	r0, [pc, #144]	@ (801781c <xNetworkBuffersInitialise+0xcc>)
 801778c:	f001 fa24 	bl	8018bd8 <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8017790:	2300      	movs	r3, #0
 8017792:	603b      	str	r3, [r7, #0]
 8017794:	e027      	b.n	80177e6 <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 8017796:	683a      	ldr	r2, [r7, #0]
 8017798:	4613      	mov	r3, r2
 801779a:	00db      	lsls	r3, r3, #3
 801779c:	1a9b      	subs	r3, r3, r2
 801779e:	00db      	lsls	r3, r3, #3
 80177a0:	4a1e      	ldr	r2, [pc, #120]	@ (801781c <xNetworkBuffersInitialise+0xcc>)
 80177a2:	4413      	add	r3, r2
 80177a4:	4618      	mov	r0, r3
 80177a6:	f7eb ff7b 	bl	80036a0 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 80177aa:	683a      	ldr	r2, [r7, #0]
 80177ac:	4613      	mov	r3, r2
 80177ae:	00db      	lsls	r3, r3, #3
 80177b0:	1a9b      	subs	r3, r3, r2
 80177b2:	00db      	lsls	r3, r3, #3
 80177b4:	4a19      	ldr	r2, [pc, #100]	@ (801781c <xNetworkBuffersInitialise+0xcc>)
 80177b6:	1899      	adds	r1, r3, r2
 80177b8:	4818      	ldr	r0, [pc, #96]	@ (801781c <xNetworkBuffersInitialise+0xcc>)
 80177ba:	683a      	ldr	r2, [r7, #0]
 80177bc:	4613      	mov	r3, r2
 80177be:	00db      	lsls	r3, r3, #3
 80177c0:	1a9b      	subs	r3, r3, r2
 80177c2:	00db      	lsls	r3, r3, #3
 80177c4:	4403      	add	r3, r0
 80177c6:	330c      	adds	r3, #12
 80177c8:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 80177ca:	683a      	ldr	r2, [r7, #0]
 80177cc:	4613      	mov	r3, r2
 80177ce:	00db      	lsls	r3, r3, #3
 80177d0:	1a9b      	subs	r3, r3, r2
 80177d2:	00db      	lsls	r3, r3, #3
 80177d4:	4a11      	ldr	r2, [pc, #68]	@ (801781c <xNetworkBuffersInitialise+0xcc>)
 80177d6:	4413      	add	r3, r2
 80177d8:	4619      	mov	r1, r3
 80177da:	480f      	ldr	r0, [pc, #60]	@ (8017818 <xNetworkBuffersInitialise+0xc8>)
 80177dc:	f7eb ff91 	bl	8003702 <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80177e0:	683b      	ldr	r3, [r7, #0]
 80177e2:	3301      	adds	r3, #1
 80177e4:	603b      	str	r3, [r7, #0]
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80177ea:	d9d4      	bls.n	8017796 <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80177ec:	4b0c      	ldr	r3, [pc, #48]	@ (8017820 <xNetworkBuffersInitialise+0xd0>)
 80177ee:	2240      	movs	r2, #64	@ 0x40
 80177f0:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 80177f2:	4b07      	ldr	r3, [pc, #28]	@ (8017810 <xNetworkBuffersInitialise+0xc0>)
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d102      	bne.n	8017800 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 80177fa:	2300      	movs	r3, #0
 80177fc:	607b      	str	r3, [r7, #4]
 80177fe:	e001      	b.n	8017804 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 8017800:	2301      	movs	r3, #1
 8017802:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8017804:	687b      	ldr	r3, [r7, #4]
}
 8017806:	4618      	mov	r0, r3
 8017808:	3708      	adds	r7, #8
 801780a:	46bd      	mov	sp, r7
 801780c:	bd80      	pop	{r7, pc}
 801780e:	bf00      	nop
 8017810:	20002468 	.word	0x20002468
 8017814:	08027830 	.word	0x08027830
 8017818:	20001650 	.word	0x20001650
 801781c:	20001668 	.word	0x20001668
 8017820:	20001664 	.word	0x20001664

08017824 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8017824:	b580      	push	{r7, lr}
 8017826:	b086      	sub	sp, #24
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
 801782c:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 801782e:	2300      	movs	r3, #0
 8017830:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 8017832:	2300      	movs	r3, #0
 8017834:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 8017836:	4b2a      	ldr	r3, [pc, #168]	@ (80178e0 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d04b      	beq.n	80178d6 <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 801783e:	4b28      	ldr	r3, [pc, #160]	@ (80178e0 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	6839      	ldr	r1, [r7, #0]
 8017844:	4618      	mov	r0, r3
 8017846:	f7ec fac7 	bl	8003dd8 <xQueueSemaphoreTake>
 801784a:	4603      	mov	r3, r0
 801784c:	2b01      	cmp	r3, #1
 801784e:	d13d      	bne.n	80178cc <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 8017850:	f7ee fef6 	bl	8006640 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8017854:	4b23      	ldr	r3, [pc, #140]	@ (80178e4 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8017856:	68db      	ldr	r3, [r3, #12]
 8017858:	68db      	ldr	r3, [r3, #12]
 801785a:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 801785c:	6978      	ldr	r0, [r7, #20]
 801785e:	f7ff ff65 	bl	801772c <bIsValidNetworkDescriptor>
 8017862:	4603      	mov	r3, r0
 8017864:	2b00      	cmp	r3, #0
 8017866:	d009      	beq.n	801787c <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 8017868:	697b      	ldr	r3, [r7, #20]
 801786a:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 801786c:	4a1d      	ldr	r2, [pc, #116]	@ (80178e4 <pxGetNetworkBufferWithDescriptor+0xc0>)
 801786e:	4293      	cmp	r3, r2
 8017870:	d104      	bne.n	801787c <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8017872:	697b      	ldr	r3, [r7, #20]
 8017874:	4618      	mov	r0, r3
 8017876:	f7eb ff7d 	bl	8003774 <uxListRemove>
 801787a:	e001      	b.n	8017880 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 801787c:	2301      	movs	r3, #1
 801787e:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8017880:	f7ee ff0a 	bl	8006698 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8017884:	693b      	ldr	r3, [r7, #16]
 8017886:	2b01      	cmp	r3, #1
 8017888:	d10b      	bne.n	80178a2 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 801788a:	6978      	ldr	r0, [r7, #20]
 801788c:	f7ff ff4e 	bl	801772c <bIsValidNetworkDescriptor>
 8017890:	4603      	mov	r3, r0
 8017892:	461a      	mov	r2, r3
 8017894:	6979      	ldr	r1, [r7, #20]
 8017896:	4814      	ldr	r0, [pc, #80]	@ (80178e8 <pxGetNetworkBufferWithDescriptor+0xc4>)
 8017898:	f00a fed4 	bl	8022644 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 801789c:	2300      	movs	r3, #0
 801789e:	617b      	str	r3, [r7, #20]
 80178a0:	e019      	b.n	80178d6 <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80178a2:	4b10      	ldr	r3, [pc, #64]	@ (80178e4 <pxGetNetworkBufferWithDescriptor+0xc0>)
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 80178a8:	4b10      	ldr	r3, [pc, #64]	@ (80178ec <pxGetNetworkBufferWithDescriptor+0xc8>)
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	68fa      	ldr	r2, [r7, #12]
 80178ae:	429a      	cmp	r2, r3
 80178b0:	d202      	bcs.n	80178b8 <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 80178b2:	4a0e      	ldr	r2, [pc, #56]	@ (80178ec <pxGetNetworkBufferWithDescriptor+0xc8>)
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 80178b8:	697b      	ldr	r3, [r7, #20]
 80178ba:	687a      	ldr	r2, [r7, #4]
 80178bc:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 80178be:	697b      	ldr	r3, [r7, #20]
 80178c0:	2200      	movs	r2, #0
 80178c2:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 80178c4:	697b      	ldr	r3, [r7, #20]
 80178c6:	2200      	movs	r2, #0
 80178c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80178ca:	e004      	b.n	80178d6 <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 80178cc:	f240 113b 	movw	r1, #315	@ 0x13b
 80178d0:	4807      	ldr	r0, [pc, #28]	@ (80178f0 <pxGetNetworkBufferWithDescriptor+0xcc>)
 80178d2:	f7ea f853 	bl	800197c <vAssertCalled>
        }
    }

    return pxReturn;
 80178d6:	697b      	ldr	r3, [r7, #20]
}
 80178d8:	4618      	mov	r0, r3
 80178da:	3718      	adds	r7, #24
 80178dc:	46bd      	mov	sp, r7
 80178de:	bd80      	pop	{r7, pc}
 80178e0:	20002468 	.word	0x20002468
 80178e4:	20001650 	.word	0x20001650
 80178e8:	0802787c 	.word	0x0802787c
 80178ec:	20001664 	.word	0x20001664
 80178f0:	08027830 	.word	0x08027830

080178f4 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b084      	sub	sp, #16
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 80178fc:	6878      	ldr	r0, [r7, #4]
 80178fe:	f7ff ff15 	bl	801772c <bIsValidNetworkDescriptor>
 8017902:	4603      	mov	r3, r0
 8017904:	2b00      	cmp	r3, #0
 8017906:	d104      	bne.n	8017912 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 8017908:	6879      	ldr	r1, [r7, #4]
 801790a:	4819      	ldr	r0, [pc, #100]	@ (8017970 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 801790c:	f00a fe9a 	bl	8022644 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8017910:	e029      	b.n	8017966 <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 8017912:	f7ee fe95 	bl	8006640 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	691b      	ldr	r3, [r3, #16]
 801791a:	4a16      	ldr	r2, [pc, #88]	@ (8017974 <vReleaseNetworkBufferAndDescriptor+0x80>)
 801791c:	4293      	cmp	r3, r2
 801791e:	d101      	bne.n	8017924 <vReleaseNetworkBufferAndDescriptor+0x30>
 8017920:	2301      	movs	r3, #1
 8017922:	e000      	b.n	8017926 <vReleaseNetworkBufferAndDescriptor+0x32>
 8017924:	2300      	movs	r3, #0
 8017926:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d104      	bne.n	8017938 <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	4619      	mov	r1, r3
 8017932:	4810      	ldr	r0, [pc, #64]	@ (8017974 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8017934:	f7eb fec1 	bl	80036ba <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 8017938:	f7ee feae 	bl	8006698 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d008      	beq.n	8017954 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8017942:	f000 f829 	bl	8017998 <uxGetNumberOfFreeNetworkBuffers>
 8017946:	4603      	mov	r3, r0
 8017948:	461a      	mov	r2, r3
 801794a:	6879      	ldr	r1, [r7, #4]
 801794c:	480a      	ldr	r0, [pc, #40]	@ (8017978 <vReleaseNetworkBufferAndDescriptor+0x84>)
 801794e:	f00a fe79 	bl	8022644 <lUDPLoggingPrintf>
}
 8017952:	e008      	b.n	8017966 <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8017954:	4b09      	ldr	r3, [pc, #36]	@ (801797c <vReleaseNetworkBufferAndDescriptor+0x88>)
 8017956:	6818      	ldr	r0, [r3, #0]
 8017958:	2300      	movs	r3, #0
 801795a:	2200      	movs	r2, #0
 801795c:	2100      	movs	r1, #0
 801795e:	f7ec f883 	bl	8003a68 <xQueueGenericSend>
            prvShowWarnings();
 8017962:	f7ff feee 	bl	8017742 <prvShowWarnings>
}
 8017966:	bf00      	nop
 8017968:	3710      	adds	r7, #16
 801796a:	46bd      	mov	sp, r7
 801796c:	bd80      	pop	{r7, pc}
 801796e:	bf00      	nop
 8017970:	080278c0 	.word	0x080278c0
 8017974:	20001650 	.word	0x20001650
 8017978:	080278f8 	.word	0x080278f8
 801797c:	20002468 	.word	0x20002468

08017980 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8017980:	b480      	push	{r7}
 8017982:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8017984:	4b03      	ldr	r3, [pc, #12]	@ (8017994 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8017986:	681b      	ldr	r3, [r3, #0]
}
 8017988:	4618      	mov	r0, r3
 801798a:	46bd      	mov	sp, r7
 801798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017990:	4770      	bx	lr
 8017992:	bf00      	nop
 8017994:	20001664 	.word	0x20001664

08017998 <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8017998:	b480      	push	{r7}
 801799a:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 801799c:	4b03      	ldr	r3, [pc, #12]	@ (80179ac <uxGetNumberOfFreeNetworkBuffers+0x14>)
 801799e:	681b      	ldr	r3, [r3, #0]
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	46bd      	mov	sp, r7
 80179a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a8:	4770      	bx	lr
 80179aa:	bf00      	nop
 80179ac:	20001650 	.word	0x20001650

080179b0 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 80179b0:	b480      	push	{r7}
 80179b2:	b085      	sub	sp, #20
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 80179b8:	2300      	movs	r3, #0
 80179ba:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	4a11      	ldr	r2, [pc, #68]	@ (8017a04 <xHas_1F_PHYSPCS+0x54>)
 80179c0:	4293      	cmp	r3, r2
 80179c2:	d016      	beq.n	80179f2 <xHas_1F_PHYSPCS+0x42>
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	4a0f      	ldr	r2, [pc, #60]	@ (8017a04 <xHas_1F_PHYSPCS+0x54>)
 80179c8:	4293      	cmp	r3, r2
 80179ca:	d80f      	bhi.n	80179ec <xHas_1F_PHYSPCS+0x3c>
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	4a0e      	ldr	r2, [pc, #56]	@ (8017a08 <xHas_1F_PHYSPCS+0x58>)
 80179d0:	4293      	cmp	r3, r2
 80179d2:	d00e      	beq.n	80179f2 <xHas_1F_PHYSPCS+0x42>
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	4a0c      	ldr	r2, [pc, #48]	@ (8017a08 <xHas_1F_PHYSPCS+0x58>)
 80179d8:	4293      	cmp	r3, r2
 80179da:	d807      	bhi.n	80179ec <xHas_1F_PHYSPCS+0x3c>
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	4a0b      	ldr	r2, [pc, #44]	@ (8017a0c <xHas_1F_PHYSPCS+0x5c>)
 80179e0:	4293      	cmp	r3, r2
 80179e2:	d006      	beq.n	80179f2 <xHas_1F_PHYSPCS+0x42>
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	4a0a      	ldr	r2, [pc, #40]	@ (8017a10 <xHas_1F_PHYSPCS+0x60>)
 80179e8:	4293      	cmp	r3, r2
 80179ea:	d002      	beq.n	80179f2 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 80179ec:	2301      	movs	r3, #1
 80179ee:	60fb      	str	r3, [r7, #12]
            break;
 80179f0:	e000      	b.n	80179f4 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 80179f2:	bf00      	nop
    }

    return xResult;
 80179f4:	68fb      	ldr	r3, [r7, #12]
}
 80179f6:	4618      	mov	r0, r3
 80179f8:	3714      	adds	r7, #20
 80179fa:	46bd      	mov	sp, r7
 80179fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a00:	4770      	bx	lr
 8017a02:	bf00      	nop
 8017a04:	ff000710 	.word	0xff000710
 8017a08:	2000a250 	.word	0x2000a250
 8017a0c:	20005c90 	.word	0x20005c90
 8017a10:	2000a221 	.word	0x2000a221

08017a14 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8017a14:	b480      	push	{r7}
 8017a16:	b085      	sub	sp, #20
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	4a0d      	ldr	r2, [pc, #52]	@ (8017a58 <xHas_19_PHYCR+0x44>)
 8017a24:	4293      	cmp	r3, r2
 8017a26:	d00b      	beq.n	8017a40 <xHas_19_PHYCR+0x2c>
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8017a58 <xHas_19_PHYCR+0x44>)
 8017a2c:	4293      	cmp	r3, r2
 8017a2e:	d80a      	bhi.n	8017a46 <xHas_19_PHYCR+0x32>
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	4a0a      	ldr	r2, [pc, #40]	@ (8017a5c <xHas_19_PHYCR+0x48>)
 8017a34:	4293      	cmp	r3, r2
 8017a36:	d003      	beq.n	8017a40 <xHas_19_PHYCR+0x2c>
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	4a09      	ldr	r2, [pc, #36]	@ (8017a60 <xHas_19_PHYCR+0x4c>)
 8017a3c:	4293      	cmp	r3, r2
 8017a3e:	d102      	bne.n	8017a46 <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8017a40:	2301      	movs	r3, #1
 8017a42:	60fb      	str	r3, [r7, #12]
            break;
 8017a44:	e000      	b.n	8017a48 <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 8017a46:	bf00      	nop
    }

    return xResult;
 8017a48:	68fb      	ldr	r3, [r7, #12]
}
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	3714      	adds	r7, #20
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a54:	4770      	bx	lr
 8017a56:	bf00      	nop
 8017a58:	2000a221 	.word	0x2000a221
 8017a5c:	0007c130 	.word	0x0007c130
 8017a60:	20005c90 	.word	0x20005c90

08017a64 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b084      	sub	sp, #16
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	60f8      	str	r0, [r7, #12]
 8017a6c:	60b9      	str	r1, [r7, #8]
 8017a6e:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8017a70:	2240      	movs	r2, #64	@ 0x40
 8017a72:	2100      	movs	r1, #0
 8017a74:	68f8      	ldr	r0, [r7, #12]
 8017a76:	f00b f90e 	bl	8022c96 <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	68ba      	ldr	r2, [r7, #8]
 8017a7e:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	687a      	ldr	r2, [r7, #4]
 8017a84:	605a      	str	r2, [r3, #4]
}
 8017a86:	bf00      	nop
 8017a88:	3710      	adds	r7, #16
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bd80      	pop	{r7, pc}
	...

08017a90 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b086      	sub	sp, #24
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	617b      	str	r3, [r7, #20]
 8017aa2:	e03a      	b.n	8017b1a <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	f107 020c 	add.w	r2, r7, #12
 8017ab0:	2103      	movs	r1, #3
 8017ab2:	6978      	ldr	r0, [r7, #20]
 8017ab4:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017abc:	4293      	cmp	r3, r2
 8017abe:	d029      	beq.n	8017b14 <xPhyDiscover+0x84>
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d026      	beq.n	8017b14 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	f107 0208 	add.w	r2, r7, #8
 8017ace:	2102      	movs	r1, #2
 8017ad0:	6978      	ldr	r0, [r7, #20]
 8017ad2:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8017ad4:	68bb      	ldr	r3, [r7, #8]
 8017ad6:	041a      	lsls	r2, r3, #16
 8017ad8:	68f9      	ldr	r1, [r7, #12]
 8017ada:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8017ade:	400b      	ands	r3, r1
 8017ae0:	4313      	orrs	r3, r2
 8017ae2:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ae8:	697a      	ldr	r2, [r7, #20]
 8017aea:	b2d1      	uxtb	r1, r2
 8017aec:	687a      	ldr	r2, [r7, #4]
 8017aee:	4413      	add	r3, r2
 8017af0:	460a      	mov	r2, r1
 8017af2:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	3202      	adds	r2, #2
 8017afc:	6939      	ldr	r1, [r7, #16]
 8017afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b06:	1c5a      	adds	r2, r3, #1
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b10:	2b04      	cmp	r3, #4
 8017b12:	d005      	beq.n	8017b20 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017b14:	697b      	ldr	r3, [r7, #20]
 8017b16:	3301      	adds	r3, #1
 8017b18:	617b      	str	r3, [r7, #20]
 8017b1a:	697b      	ldr	r3, [r7, #20]
 8017b1c:	2b1f      	cmp	r3, #31
 8017b1e:	ddc1      	ble.n	8017aa4 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	dd05      	ble.n	8017b34 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	689b      	ldr	r3, [r3, #8]
 8017b2c:	4619      	mov	r1, r3
 8017b2e:	4804      	ldr	r0, [pc, #16]	@ (8017b40 <xPhyDiscover+0xb0>)
 8017b30:	f00a fd88 	bl	8022644 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8017b38:	4618      	mov	r0, r3
 8017b3a:	3718      	adds	r7, #24
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bd80      	pop	{r7, pc}
 8017b40:	0802793c 	.word	0x0802793c

08017b44 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b08c      	sub	sp, #48	@ 0x30
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	6078      	str	r0, [r7, #4]
 8017b4c:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8017b4e:	2300      	movs	r3, #0
 8017b50:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017b52:	2300      	movs	r3, #0
 8017b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017b56:	e017      	b.n	8017b88 <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017b58:	687a      	ldr	r2, [r7, #4]
 8017b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b5c:	4413      	add	r3, r2
 8017b5e:	3318      	adds	r3, #24
 8017b60:	781b      	ldrb	r3, [r3, #0]
 8017b62:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	f107 0218 	add.w	r2, r7, #24
 8017b6c:	2100      	movs	r1, #0
 8017b6e:	69f8      	ldr	r0, [r7, #28]
 8017b70:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	685b      	ldr	r3, [r3, #4]
 8017b76:	69ba      	ldr	r2, [r7, #24]
 8017b78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8017b7c:	2100      	movs	r1, #0
 8017b7e:	69f8      	ldr	r0, [r7, #28]
 8017b80:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b84:	3301      	adds	r3, #1
 8017b86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b8e:	429a      	cmp	r2, r3
 8017b90:	dbe2      	blt.n	8017b58 <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8017b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017b96:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8017b98:	f107 030c 	add.w	r3, r7, #12
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f7ed fb8d 	bl	80052bc <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017ba6:	e01f      	b.n	8017be8 <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017ba8:	687a      	ldr	r2, [r7, #4]
 8017baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bac:	4413      	add	r3, r2
 8017bae:	3318      	adds	r3, #24
 8017bb0:	781b      	ldrb	r3, [r3, #0]
 8017bb2:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	f107 0218 	add.w	r2, r7, #24
 8017bbc:	2100      	movs	r1, #0
 8017bbe:	6a38      	ldr	r0, [r7, #32]
 8017bc0:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8017bc2:	69bb      	ldr	r3, [r7, #24]
 8017bc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d10a      	bne.n	8017be2 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8017bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017bce:	482d      	ldr	r0, [pc, #180]	@ (8017c84 <xPhyReset+0x140>)
 8017bd0:	f00a fd38 	bl	8022644 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8017bd4:	2201      	movs	r2, #1
 8017bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8017bdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017bde:	4313      	orrs	r3, r2
 8017be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017be4:	3301      	adds	r3, #1
 8017be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017bec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017bee:	429a      	cmp	r2, r3
 8017bf0:	dbda      	blt.n	8017ba8 <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8017bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017bf4:	683b      	ldr	r3, [r7, #0]
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	d013      	beq.n	8017c22 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8017bfa:	f107 0214 	add.w	r2, r7, #20
 8017bfe:	f107 030c 	add.w	r3, r7, #12
 8017c02:	4611      	mov	r1, r2
 8017c04:	4618      	mov	r0, r3
 8017c06:	f7ed fb91 	bl	800532c <xTaskCheckForTimeOut>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d004      	beq.n	8017c1a <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8017c10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017c12:	481d      	ldr	r0, [pc, #116]	@ (8017c88 <xPhyReset+0x144>)
 8017c14:	f00a fd16 	bl	8022644 <lUDPLoggingPrintf>
            break;
 8017c18:	e004      	b.n	8017c24 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017c1a:	2032      	movs	r0, #50	@ 0x32
 8017c1c:	f7ec fdda 	bl	80047d4 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017c20:	e7bf      	b.n	8017ba2 <xPhyReset+0x5e>
            break;
 8017c22:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017c24:	2300      	movs	r3, #0
 8017c26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017c28:	e01e      	b.n	8017c68 <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 8017c2a:	2201      	movs	r2, #1
 8017c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c2e:	409a      	lsls	r2, r3
 8017c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c32:	4013      	ands	r3, r2
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d114      	bne.n	8017c62 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017c38:	687a      	ldr	r2, [r7, #4]
 8017c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c3c:	4413      	add	r3, r2
 8017c3e:	3318      	adds	r3, #24
 8017c40:	781b      	ldrb	r3, [r3, #0]
 8017c42:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	f107 0218 	add.w	r2, r7, #24
 8017c4c:	2100      	movs	r1, #0
 8017c4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017c50:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	685b      	ldr	r3, [r3, #4]
 8017c56:	69ba      	ldr	r2, [r7, #24]
 8017c58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017c5c:	2100      	movs	r1, #0
 8017c5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017c60:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c64:	3301      	adds	r3, #1
 8017c66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	dbdb      	blt.n	8017c2a <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017c72:	2032      	movs	r0, #50	@ 0x32
 8017c74:	f7ec fdae 	bl	80047d4 <vTaskDelay>

    return ulDoneMask;
 8017c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	3730      	adds	r7, #48	@ 0x30
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	bd80      	pop	{r7, pc}
 8017c82:	bf00      	nop
 8017c84:	08027948 	.word	0x08027948
 8017c88:	0802796c 	.word	0x0802796c

08017c8c <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b088      	sub	sp, #32
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	dc05      	bgt.n	8017caa <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8017c9e:	487c      	ldr	r0, [pc, #496]	@ (8017e90 <xPhyConfigure+0x204>)
 8017ca0:	f00a fcd0 	bl	8022644 <lUDPLoggingPrintf>
        return -1;
 8017ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8017ca8:	e0ed      	b.n	8017e86 <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017caa:	683b      	ldr	r3, [r7, #0]
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	2b03      	cmp	r3, #3
 8017cb0:	d107      	bne.n	8017cc2 <xPhyConfigure+0x36>
 8017cb2:	683b      	ldr	r3, [r7, #0]
 8017cb4:	789b      	ldrb	r3, [r3, #2]
 8017cb6:	2b03      	cmp	r3, #3
 8017cb8:	d103      	bne.n	8017cc2 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8017cba:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8017cbe:	61fb      	str	r3, [r7, #28]
 8017cc0:	e044      	b.n	8017d4c <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8017cc6:	683b      	ldr	r3, [r7, #0]
 8017cc8:	781b      	ldrb	r3, [r3, #0]
 8017cca:	2b03      	cmp	r3, #3
 8017ccc:	d10d      	bne.n	8017cea <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017cce:	683b      	ldr	r3, [r7, #0]
 8017cd0:	789b      	ldrb	r3, [r3, #2]
 8017cd2:	2b02      	cmp	r3, #2
 8017cd4:	d104      	bne.n	8017ce0 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8017cd6:	69fb      	ldr	r3, [r7, #28]
 8017cd8:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8017cdc:	61fb      	str	r3, [r7, #28]
 8017cde:	e035      	b.n	8017d4c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8017ce0:	69fb      	ldr	r3, [r7, #28]
 8017ce2:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8017ce6:	61fb      	str	r3, [r7, #28]
 8017ce8:	e030      	b.n	8017d4c <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8017cea:	683b      	ldr	r3, [r7, #0]
 8017cec:	789b      	ldrb	r3, [r3, #2]
 8017cee:	2b03      	cmp	r3, #3
 8017cf0:	d10d      	bne.n	8017d0e <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	781b      	ldrb	r3, [r3, #0]
 8017cf6:	2b01      	cmp	r3, #1
 8017cf8:	d104      	bne.n	8017d04 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8017cfa:	69fb      	ldr	r3, [r7, #28]
 8017cfc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8017d00:	61fb      	str	r3, [r7, #28]
 8017d02:	e023      	b.n	8017d4c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8017d04:	69fb      	ldr	r3, [r7, #28]
 8017d06:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8017d0a:	61fb      	str	r3, [r7, #28]
 8017d0c:	e01e      	b.n	8017d4c <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8017d0e:	683b      	ldr	r3, [r7, #0]
 8017d10:	781b      	ldrb	r3, [r3, #0]
 8017d12:	2b02      	cmp	r3, #2
 8017d14:	d10d      	bne.n	8017d32 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	789b      	ldrb	r3, [r3, #2]
 8017d1a:	2b02      	cmp	r3, #2
 8017d1c:	d104      	bne.n	8017d28 <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8017d1e:	69fb      	ldr	r3, [r7, #28]
 8017d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017d24:	61fb      	str	r3, [r7, #28]
 8017d26:	e011      	b.n	8017d4c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8017d28:	69fb      	ldr	r3, [r7, #28]
 8017d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d2e:	61fb      	str	r3, [r7, #28]
 8017d30:	e00c      	b.n	8017d4c <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017d32:	683b      	ldr	r3, [r7, #0]
 8017d34:	789b      	ldrb	r3, [r3, #2]
 8017d36:	2b02      	cmp	r3, #2
 8017d38:	d104      	bne.n	8017d44 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8017d3a:	69fb      	ldr	r3, [r7, #28]
 8017d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d40:	61fb      	str	r3, [r7, #28]
 8017d42:	e003      	b.n	8017d4c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8017d44:	69fb      	ldr	r3, [r7, #28]
 8017d46:	f043 0320 	orr.w	r3, r3, #32
 8017d4a:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d50:	2201      	movs	r2, #1
 8017d52:	fa02 f303 	lsl.w	r3, r2, r3
 8017d56:	3b01      	subs	r3, #1
 8017d58:	4619      	mov	r1, r3
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f7ff fef2 	bl	8017b44 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017d60:	2300      	movs	r3, #0
 8017d62:	61bb      	str	r3, [r7, #24]
 8017d64:	e080      	b.n	8017e68 <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017d66:	687a      	ldr	r2, [r7, #4]
 8017d68:	69bb      	ldr	r3, [r7, #24]
 8017d6a:	4413      	add	r3, r2
 8017d6c:	3318      	adds	r3, #24
 8017d6e:	781b      	ldrb	r3, [r3, #0]
 8017d70:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	69ba      	ldr	r2, [r7, #24]
 8017d76:	3202      	adds	r2, #2
 8017d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d7c:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	685b      	ldr	r3, [r3, #4]
 8017d82:	69fa      	ldr	r2, [r7, #28]
 8017d84:	2104      	movs	r1, #4
 8017d86:	6978      	ldr	r0, [r7, #20]
 8017d88:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	f107 020c 	add.w	r2, r7, #12
 8017d92:	2100      	movs	r1, #0
 8017d94:	6978      	ldr	r0, [r7, #20]
 8017d96:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8017d9e:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8017da6:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	781b      	ldrb	r3, [r3, #0]
 8017dac:	2b02      	cmp	r3, #2
 8017dae:	d003      	beq.n	8017db8 <xPhyConfigure+0x12c>
 8017db0:	683b      	ldr	r3, [r7, #0]
 8017db2:	781b      	ldrb	r3, [r3, #0]
 8017db4:	2b03      	cmp	r3, #3
 8017db6:	d104      	bne.n	8017dc2 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017dbe:	60fb      	str	r3, [r7, #12]
 8017dc0:	e007      	b.n	8017dd2 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017dc2:	683b      	ldr	r3, [r7, #0]
 8017dc4:	781b      	ldrb	r3, [r3, #0]
 8017dc6:	2b01      	cmp	r3, #1
 8017dc8:	d103      	bne.n	8017dd2 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017dd0:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017dd2:	683b      	ldr	r3, [r7, #0]
 8017dd4:	789b      	ldrb	r3, [r3, #2]
 8017dd6:	2b02      	cmp	r3, #2
 8017dd8:	d003      	beq.n	8017de2 <xPhyConfigure+0x156>
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	789b      	ldrb	r3, [r3, #2]
 8017dde:	2b03      	cmp	r3, #3
 8017de0:	d104      	bne.n	8017dec <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017de8:	60fb      	str	r3, [r7, #12]
 8017dea:	e007      	b.n	8017dfc <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	789b      	ldrb	r3, [r3, #2]
 8017df0:	2b01      	cmp	r3, #1
 8017df2:	d103      	bne.n	8017dfc <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017dfa:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8017dfc:	6938      	ldr	r0, [r7, #16]
 8017dfe:	f7ff fe09 	bl	8017a14 <xHas_19_PHYCR>
 8017e02:	4603      	mov	r3, r0
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d026      	beq.n	8017e56 <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	f107 0208 	add.w	r2, r7, #8
 8017e10:	2119      	movs	r1, #25
 8017e12:	6978      	ldr	r0, [r7, #20]
 8017e14:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8017e16:	68bb      	ldr	r3, [r7, #8]
 8017e18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8017e1c:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	785b      	ldrb	r3, [r3, #1]
 8017e22:	2b03      	cmp	r3, #3
 8017e24:	d104      	bne.n	8017e30 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8017e26:	68bb      	ldr	r3, [r7, #8]
 8017e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017e2c:	60bb      	str	r3, [r7, #8]
 8017e2e:	e00c      	b.n	8017e4a <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8017e30:	683b      	ldr	r3, [r7, #0]
 8017e32:	785b      	ldrb	r3, [r3, #1]
 8017e34:	2b02      	cmp	r3, #2
 8017e36:	d104      	bne.n	8017e42 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 8017e38:	68bb      	ldr	r3, [r7, #8]
 8017e3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017e3e:	60bb      	str	r3, [r7, #8]
 8017e40:	e003      	b.n	8017e4a <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8017e42:	68bb      	ldr	r3, [r7, #8]
 8017e44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017e48:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	685b      	ldr	r3, [r3, #4]
 8017e4e:	68ba      	ldr	r2, [r7, #8]
 8017e50:	2119      	movs	r1, #25
 8017e52:	6978      	ldr	r0, [r7, #20]
 8017e54:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	461a      	mov	r2, r3
 8017e5a:	69f9      	ldr	r1, [r7, #28]
 8017e5c:	480d      	ldr	r0, [pc, #52]	@ (8017e94 <xPhyConfigure+0x208>)
 8017e5e:	f00a fbf1 	bl	8022644 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017e62:	69bb      	ldr	r3, [r7, #24]
 8017e64:	3301      	adds	r3, #1
 8017e66:	61bb      	str	r3, [r7, #24]
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e6c:	69ba      	ldr	r2, [r7, #24]
 8017e6e:	429a      	cmp	r2, r3
 8017e70:	f6ff af79 	blt.w	8017d66 <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	69fa      	ldr	r2, [r7, #28]
 8017e82:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8017e84:	2300      	movs	r3, #0
}
 8017e86:	4618      	mov	r0, r3
 8017e88:	3720      	adds	r7, #32
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}
 8017e8e:	bf00      	nop
 8017e90:	080279a0 	.word	0x080279a0
 8017e94:	080279c4 	.word	0x080279c4

08017e98 <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 8017e98:	b590      	push	{r4, r7, lr}
 8017e9a:	b095      	sub	sp, #84	@ 0x54
 8017e9c:	af02      	add	r7, sp, #8
 8017e9e:	6078      	str	r0, [r7, #4]
 8017ea0:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8017ea2:	683b      	ldr	r3, [r7, #0]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d101      	bne.n	8017eac <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	e18d      	b.n	80181c8 <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017eac:	2300      	movs	r3, #0
 8017eae:	647b      	str	r3, [r7, #68]	@ 0x44
 8017eb0:	e020      	b.n	8017ef4 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8017eb2:	683a      	ldr	r2, [r7, #0]
 8017eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8017eba:	f003 0301 	and.w	r3, r3, #1
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d015      	beq.n	8017eee <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017ec2:	687a      	ldr	r2, [r7, #4]
 8017ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017ec6:	4413      	add	r3, r2
 8017ec8:	3318      	adds	r3, #24
 8017eca:	781b      	ldrb	r3, [r3, #0]
 8017ecc:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	685b      	ldr	r3, [r3, #4]
 8017ed2:	687a      	ldr	r2, [r7, #4]
 8017ed4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8017ed6:	2104      	movs	r1, #4
 8017ed8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017eda:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	685b      	ldr	r3, [r3, #4]
 8017ee0:	687a      	ldr	r2, [r7, #4]
 8017ee2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017ee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017ee8:	2100      	movs	r1, #0
 8017eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017eec:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017ef0:	3301      	adds	r3, #1
 8017ef2:	647b      	str	r3, [r7, #68]	@ 0x44
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ef8:	461a      	mov	r2, r3
 8017efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017efc:	4293      	cmp	r3, r2
 8017efe:	d3d8      	bcc.n	8017eb2 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8017f00:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8017f04:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 8017f06:	f107 0318 	add.w	r3, r7, #24
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f7ed f9d6 	bl	80052bc <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8017f10:	2300      	movs	r3, #0
 8017f12:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8017f14:	2301      	movs	r3, #1
 8017f16:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017f18:	2300      	movs	r3, #0
 8017f1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8017f1c:	e025      	b.n	8017f6a <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8017f1e:	683a      	ldr	r2, [r7, #0]
 8017f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f22:	4013      	ands	r3, r2
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d01a      	beq.n	8017f5e <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 8017f28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f2c:	4013      	ands	r3, r2
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d115      	bne.n	8017f5e <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017f32:	687a      	ldr	r2, [r7, #4]
 8017f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f36:	4413      	add	r3, r2
 8017f38:	3318      	adds	r3, #24
 8017f3a:	781b      	ldrb	r3, [r3, #0]
 8017f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017f46:	2101      	movs	r1, #1
 8017f48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017f4a:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8017f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f4e:	f003 0320 	and.w	r3, r3, #32
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d003      	beq.n	8017f5e <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 8017f56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f5a:	4313      	orrs	r3, r2
 8017f5c:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f60:	3301      	adds	r3, #1
 8017f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8017f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f66:	005b      	lsls	r3, r3, #1
 8017f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f6e:	461a      	mov	r2, r3
 8017f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f72:	4293      	cmp	r3, r2
 8017f74:	d3d3      	bcc.n	8017f1e <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 8017f76:	683a      	ldr	r2, [r7, #0]
 8017f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d013      	beq.n	8017fa6 <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8017f7e:	f107 0220 	add.w	r2, r7, #32
 8017f82:	f107 0318 	add.w	r3, r7, #24
 8017f86:	4611      	mov	r1, r2
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7ed f9cf 	bl	800532c <xTaskCheckForTimeOut>
 8017f8e:	4603      	mov	r3, r0
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d004      	beq.n	8017f9e <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8017f94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017f96:	488e      	ldr	r0, [pc, #568]	@ (80181d0 <xPhyStartAutoNegotiation+0x338>)
 8017f98:	f00a fb54 	bl	8022644 <lUDPLoggingPrintf>
            break;
 8017f9c:	e004      	b.n	8017fa8 <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017f9e:	2032      	movs	r0, #50	@ 0x32
 8017fa0:	f7ec fc18 	bl	80047d4 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8017fa4:	e7b6      	b.n	8017f14 <xPhyStartAutoNegotiation+0x7c>
            break;
 8017fa6:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 8017fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	f000 810b 	beq.w	80181c6 <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017fba:	43db      	mvns	r3, r3
 8017fbc:	401a      	ands	r2, r3
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8017fc6:	e0f7      	b.n	80181b8 <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017fc8:	687a      	ldr	r2, [r7, #4]
 8017fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017fcc:	4413      	add	r3, r2
 8017fce:	3318      	adds	r3, #24
 8017fd0:	781b      	ldrb	r3, [r3, #0]
 8017fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017fd8:	3202      	adds	r2, #2
 8017fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017fde:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8017fe0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fe4:	4013      	ands	r3, r2
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	f000 80df 	beq.w	80181aa <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	685b      	ldr	r3, [r3, #4]
 8017ff0:	687a      	ldr	r2, [r7, #4]
 8017ff2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017ff4:	2100      	movs	r1, #0
 8017ff6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017ff8:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018002:	2101      	movs	r1, #1
 8018004:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018006:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 8018008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801800a:	f003 0304 	and.w	r3, r3, #4
 801800e:	2b00      	cmp	r3, #0
 8018010:	d005      	beq.n	801801e <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018018:	431a      	orrs	r2, r3
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 801801e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018020:	4a6c      	ldr	r2, [pc, #432]	@ (80181d4 <xPhyStartAutoNegotiation+0x33c>)
 8018022:	4293      	cmp	r3, r2
 8018024:	d130      	bne.n	8018088 <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	f107 0214 	add.w	r2, r7, #20
 801802e:	211e      	movs	r1, #30
 8018030:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018032:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8018034:	697b      	ldr	r3, [r7, #20]
 8018036:	f003 0307 	and.w	r3, r3, #7
 801803a:	3b01      	subs	r3, #1
 801803c:	2b05      	cmp	r3, #5
 801803e:	d814      	bhi.n	801806a <xPhyStartAutoNegotiation+0x1d2>
 8018040:	a201      	add	r2, pc, #4	@ (adr r2, 8018048 <xPhyStartAutoNegotiation+0x1b0>)
 8018042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018046:	bf00      	nop
 8018048:	08018061 	.word	0x08018061
 801804c:	0801806b 	.word	0x0801806b
 8018050:	0801806b 	.word	0x0801806b
 8018054:	0801806b 	.word	0x0801806b
 8018058:	08018061 	.word	0x08018061
 801805c:	0801806b 	.word	0x0801806b
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8018060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018062:	f043 0302 	orr.w	r3, r3, #2
 8018066:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8018068:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 801806a:	697b      	ldr	r3, [r7, #20]
 801806c:	f003 0307 	and.w	r3, r3, #7
 8018070:	2b02      	cmp	r3, #2
 8018072:	d801      	bhi.n	8018078 <xPhyStartAutoNegotiation+0x1e0>
 8018074:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 8018076:	e05b      	b.n	8018130 <xPhyStartAutoNegotiation+0x298>
 8018078:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 801807a:	2b01      	cmp	r3, #1
 801807c:	d858      	bhi.n	8018130 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 801807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018080:	f043 0304 	orr.w	r3, r3, #4
 8018084:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8018086:	e053      	b.n	8018130 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 8018088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801808a:	4a53      	ldr	r2, [pc, #332]	@ (80181d8 <xPhyStartAutoNegotiation+0x340>)
 801808c:	4293      	cmp	r3, r2
 801808e:	d126      	bne.n	80180de <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8018090:	2300      	movs	r3, #0
 8018092:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8018094:	2300      	movs	r3, #0
 8018096:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	f107 0210 	add.w	r2, r7, #16
 80180a0:	211f      	movs	r1, #31
 80180a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80180a4:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 80180a6:	693b      	ldr	r3, [r7, #16]
 80180a8:	0a1b      	lsrs	r3, r3, #8
 80180aa:	f003 0307 	and.w	r3, r3, #7
 80180ae:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 80180b0:	2300      	movs	r3, #0
 80180b2:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 80180b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180b6:	2b02      	cmp	r3, #2
 80180b8:	d002      	beq.n	80180c0 <xPhyStartAutoNegotiation+0x228>
 80180ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180bc:	2b05      	cmp	r3, #5
 80180be:	d103      	bne.n	80180c8 <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80180c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180c2:	f043 0302 	orr.w	r3, r3, #2
 80180c6:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 80180c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180ca:	2b05      	cmp	r3, #5
 80180cc:	d002      	beq.n	80180d4 <xPhyStartAutoNegotiation+0x23c>
 80180ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180d0:	2b06      	cmp	r3, #6
 80180d2:	d12d      	bne.n	8018130 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80180d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180d6:	f043 0304 	orr.w	r3, r3, #4
 80180da:	627b      	str	r3, [r7, #36]	@ 0x24
 80180dc:	e028      	b.n	8018130 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 80180de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80180e0:	f7ff fc66 	bl	80179b0 <xHas_1F_PHYSPCS>
 80180e4:	4603      	mov	r3, r0
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d01b      	beq.n	8018122 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	f107 020c 	add.w	r2, r7, #12
 80180f2:	211f      	movs	r1, #31
 80180f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80180f6:	4798      	blx	r3
                ulRegValue = 0;
 80180f8:	2300      	movs	r3, #0
 80180fa:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	f003 0310 	and.w	r3, r3, #16
 8018102:	2b00      	cmp	r3, #0
 8018104:	d003      	beq.n	801810e <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8018106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018108:	f043 0304 	orr.w	r3, r3, #4
 801810c:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	f003 030c 	and.w	r3, r3, #12
 8018114:	2b04      	cmp	r3, #4
 8018116:	d10b      	bne.n	8018130 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8018118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801811a:	f043 0302 	orr.w	r3, r3, #2
 801811e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018120:	e006      	b.n	8018130 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801812a:	2110      	movs	r1, #16
 801812c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801812e:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 8018130:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018134:	f003 0304 	and.w	r3, r3, #4
 8018138:	2b00      	cmp	r3, #0
 801813a:	d001      	beq.n	8018140 <xPhyStartAutoNegotiation+0x2a8>
 801813c:	4827      	ldr	r0, [pc, #156]	@ (80181dc <xPhyStartAutoNegotiation+0x344>)
 801813e:	e000      	b.n	8018142 <xPhyStartAutoNegotiation+0x2aa>
 8018140:	4827      	ldr	r0, [pc, #156]	@ (80181e0 <xPhyStartAutoNegotiation+0x348>)
 8018142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018144:	f003 0302 	and.w	r3, r3, #2
 8018148:	2b00      	cmp	r3, #0
 801814a:	d001      	beq.n	8018150 <xPhyStartAutoNegotiation+0x2b8>
 801814c:	240a      	movs	r4, #10
 801814e:	e000      	b.n	8018152 <xPhyStartAutoNegotiation+0x2ba>
 8018150:	2464      	movs	r4, #100	@ 0x64
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018158:	4013      	ands	r3, r2
 801815a:	2b00      	cmp	r3, #0
 801815c:	d001      	beq.n	8018162 <xPhyStartAutoNegotiation+0x2ca>
 801815e:	4b21      	ldr	r3, [pc, #132]	@ (80181e4 <xPhyStartAutoNegotiation+0x34c>)
 8018160:	e000      	b.n	8018164 <xPhyStartAutoNegotiation+0x2cc>
 8018162:	4b21      	ldr	r3, [pc, #132]	@ (80181e8 <xPhyStartAutoNegotiation+0x350>)
 8018164:	9300      	str	r3, [sp, #0]
 8018166:	4623      	mov	r3, r4
 8018168:	4602      	mov	r2, r0
 801816a:	4820      	ldr	r0, [pc, #128]	@ (80181ec <xPhyStartAutoNegotiation+0x354>)
 801816c:	f00a fa6a 	bl	8022644 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8018170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018172:	f003 0304 	and.w	r3, r3, #4
 8018176:	2b00      	cmp	r3, #0
 8018178:	d004      	beq.n	8018184 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	2202      	movs	r2, #2
 801817e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8018182:	e003      	b.n	801818c <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2201      	movs	r2, #1
 8018188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 801818c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801818e:	f003 0302 	and.w	r3, r3, #2
 8018192:	2b00      	cmp	r3, #0
 8018194:	d004      	beq.n	80181a0 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	2201      	movs	r2, #1
 801819a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801819e:	e005      	b.n	80181ac <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	2202      	movs	r2, #2
 80181a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80181a8:	e000      	b.n	80181ac <xPhyStartAutoNegotiation+0x314>
                continue;
 80181aa:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80181ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181ae:	3301      	adds	r3, #1
 80181b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80181b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181b4:	005b      	lsls	r3, r3, #1
 80181b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80181bc:	461a      	mov	r2, r3
 80181be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181c0:	4293      	cmp	r3, r2
 80181c2:	f4ff af01 	bcc.w	8017fc8 <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 80181c6:	2300      	movs	r3, #0
}
 80181c8:	4618      	mov	r0, r3
 80181ca:	374c      	adds	r7, #76	@ 0x4c
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd90      	pop	{r4, r7, pc}
 80181d0:	080279e8 	.word	0x080279e8
 80181d4:	00221560 	.word	0x00221560
 80181d8:	00221550 	.word	0x00221550
 80181dc:	08027a34 	.word	0x08027a34
 80181e0:	08027a3c 	.word	0x08027a3c
 80181e4:	08027a44 	.word	0x08027a44
 80181e8:	08027a4c 	.word	0x08027a4c
 80181ec:	08027a50 	.word	0x08027a50

080181f0 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b088      	sub	sp, #32
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
 80181f8:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 80181fa:	2301      	movs	r3, #1
 80181fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 80181fe:	2300      	movs	r3, #0
 8018200:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8018202:	683b      	ldr	r3, [r7, #0]
 8018204:	2b00      	cmp	r3, #0
 8018206:	dd2b      	ble.n	8018260 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	331c      	adds	r3, #28
 801820c:	4618      	mov	r0, r3
 801820e:	f7ed f855 	bl	80052bc <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8018218:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801821a:	2300      	movs	r3, #0
 801821c:	61bb      	str	r3, [r7, #24]
 801821e:	e019      	b.n	8018254 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018224:	69fb      	ldr	r3, [r7, #28]
 8018226:	4013      	ands	r3, r2
 8018228:	2b00      	cmp	r3, #0
 801822a:	d10d      	bne.n	8018248 <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018230:	69fb      	ldr	r3, [r7, #28]
 8018232:	431a      	orrs	r2, r3
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801823c:	4619      	mov	r1, r3
 801823e:	4842      	ldr	r0, [pc, #264]	@ (8018348 <xPhyCheckLinkStatus+0x158>)
 8018240:	f00a fa00 	bl	8022644 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 8018244:	2301      	movs	r3, #1
 8018246:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018248:	69bb      	ldr	r3, [r7, #24]
 801824a:	3301      	adds	r3, #1
 801824c:	61bb      	str	r3, [r7, #24]
 801824e:	69fb      	ldr	r3, [r7, #28]
 8018250:	005b      	lsls	r3, r3, #1
 8018252:	61fb      	str	r3, [r7, #28]
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018258:	69ba      	ldr	r2, [r7, #24]
 801825a:	429a      	cmp	r2, r3
 801825c:	dbe0      	blt.n	8018220 <xPhyCheckLinkStatus+0x30>
 801825e:	e06e      	b.n	801833e <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	f103 021c 	add.w	r2, r3, #28
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	3324      	adds	r3, #36	@ 0x24
 801826a:	4619      	mov	r1, r3
 801826c:	4610      	mov	r0, r2
 801826e:	f7ed f85d 	bl	800532c <xTaskCheckForTimeOut>
 8018272:	4603      	mov	r3, r0
 8018274:	2b00      	cmp	r3, #0
 8018276:	d062      	beq.n	801833e <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018278:	2300      	movs	r3, #0
 801827a:	61bb      	str	r3, [r7, #24]
 801827c:	e045      	b.n	801830a <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801827e:	687a      	ldr	r2, [r7, #4]
 8018280:	69bb      	ldr	r3, [r7, #24]
 8018282:	4413      	add	r3, r2
 8018284:	3318      	adds	r3, #24
 8018286:	781b      	ldrb	r3, [r3, #0]
 8018288:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	f107 020c 	add.w	r2, r7, #12
 8018292:	2101      	movs	r1, #1
 8018294:	6938      	ldr	r0, [r7, #16]
 8018296:	4798      	blx	r3
 8018298:	4603      	mov	r3, r0
 801829a:	2b00      	cmp	r3, #0
 801829c:	d12f      	bne.n	80182fe <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80182a2:	69fb      	ldr	r3, [r7, #28]
 80182a4:	4013      	ands	r3, r2
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	bf14      	ite	ne
 80182aa:	2301      	movne	r3, #1
 80182ac:	2300      	moveq	r3, #0
 80182ae:	b2da      	uxtb	r2, r3
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	f003 0304 	and.w	r3, r3, #4
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	bf14      	ite	ne
 80182ba:	2301      	movne	r3, #1
 80182bc:	2300      	moveq	r3, #0
 80182be:	b2db      	uxtb	r3, r3
 80182c0:	4053      	eors	r3, r2
 80182c2:	b2db      	uxtb	r3, r3
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d01a      	beq.n	80182fe <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	f003 0304 	and.w	r3, r3, #4
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d006      	beq.n	80182e0 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80182d6:	69fb      	ldr	r3, [r7, #28]
 80182d8:	431a      	orrs	r2, r3
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80182de:	e006      	b.n	80182ee <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80182e4:	69fb      	ldr	r3, [r7, #28]
 80182e6:	43db      	mvns	r3, r3
 80182e8:	401a      	ands	r2, r3
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80182f2:	4619      	mov	r1, r3
 80182f4:	4814      	ldr	r0, [pc, #80]	@ (8018348 <xPhyCheckLinkStatus+0x158>)
 80182f6:	f00a f9a5 	bl	8022644 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 80182fa:	2301      	movs	r3, #1
 80182fc:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80182fe:	69bb      	ldr	r3, [r7, #24]
 8018300:	3301      	adds	r3, #1
 8018302:	61bb      	str	r3, [r7, #24]
 8018304:	69fb      	ldr	r3, [r7, #28]
 8018306:	005b      	lsls	r3, r3, #1
 8018308:	61fb      	str	r3, [r7, #28]
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801830e:	69ba      	ldr	r2, [r7, #24]
 8018310:	429a      	cmp	r2, r3
 8018312:	dbb4      	blt.n	801827e <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	331c      	adds	r3, #28
 8018318:	4618      	mov	r0, r3
 801831a:	f7ec ffcf 	bl	80052bc <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018322:	69fb      	ldr	r3, [r7, #28]
 8018324:	085b      	lsrs	r3, r3, #1
 8018326:	4013      	ands	r3, r2
 8018328:	2b00      	cmp	r3, #0
 801832a:	d004      	beq.n	8018336 <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8018332:	625a      	str	r2, [r3, #36]	@ 0x24
 8018334:	e003      	b.n	801833e <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801833c:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 801833e:	697b      	ldr	r3, [r7, #20]
}
 8018340:	4618      	mov	r0, r3
 8018342:	3720      	adds	r7, #32
 8018344:	46bd      	mov	sp, r7
 8018346:	bd80      	pop	{r7, pc}
 8018348:	08027a84 	.word	0x08027a84

0801834c <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 801834c:	b480      	push	{r7}
 801834e:	b085      	sub	sp, #20
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 8018354:	2300      	movs	r3, #0
 8018356:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 8018358:	2300      	movs	r3, #0
 801835a:	60bb      	str	r3, [r7, #8]
 801835c:	e013      	b.n	8018386 <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 801835e:	2201      	movs	r2, #1
 8018360:	68bb      	ldr	r3, [r7, #8]
 8018362:	fa02 f303 	lsl.w	r3, r2, r3
 8018366:	461a      	mov	r2, r3
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	4013      	ands	r3, r2
 801836c:	2b00      	cmp	r3, #0
 801836e:	d007      	beq.n	8018380 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 8018370:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8018374:	68bb      	ldr	r3, [r7, #8]
 8018376:	fa22 f303 	lsr.w	r3, r2, r3
 801837a:	68fa      	ldr	r2, [r7, #12]
 801837c:	4313      	orrs	r3, r2
 801837e:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 8018380:	68bb      	ldr	r3, [r7, #8]
 8018382:	3301      	adds	r3, #1
 8018384:	60bb      	str	r3, [r7, #8]
 8018386:	68bb      	ldr	r3, [r7, #8]
 8018388:	2b1f      	cmp	r3, #31
 801838a:	dde8      	ble.n	801835e <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 801838c:	68fb      	ldr	r3, [r7, #12]
}
 801838e:	4618      	mov	r0, r3
 8018390:	3714      	adds	r7, #20
 8018392:	46bd      	mov	sp, r7
 8018394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018398:	4770      	bx	lr
	...

0801839c <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 801839c:	b590      	push	{r4, r7, lr}
 801839e:	b087      	sub	sp, #28
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 80183a4:	f04f 33ff 	mov.w	r3, #4294967295
 80183a8:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 80183aa:	2300      	movs	r3, #0
 80183ac:	613b      	str	r3, [r7, #16]
 80183ae:	e024      	b.n	80183fa <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 80183b0:	693b      	ldr	r3, [r7, #16]
 80183b2:	687a      	ldr	r2, [r7, #4]
 80183b4:	4413      	add	r3, r2
 80183b6:	781b      	ldrb	r3, [r3, #0]
 80183b8:	461a      	mov	r2, r3
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	4053      	eors	r3, r2
 80183be:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 80183c0:	2300      	movs	r3, #0
 80183c2:	617b      	str	r3, [r7, #20]
 80183c4:	e013      	b.n	80183ee <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	f003 0301 	and.w	r3, r3, #1
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d008      	beq.n	80183e2 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	085c      	lsrs	r4, r3, #1
 80183d4:	480e      	ldr	r0, [pc, #56]	@ (8018410 <prvComputeCRC32_MAC+0x74>)
 80183d6:	f7ff ffb9 	bl	801834c <prvRevBits32>
 80183da:	4603      	mov	r3, r0
 80183dc:	4063      	eors	r3, r4
 80183de:	60fb      	str	r3, [r7, #12]
 80183e0:	e002      	b.n	80183e8 <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	085b      	lsrs	r3, r3, #1
 80183e6:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 80183e8:	697b      	ldr	r3, [r7, #20]
 80183ea:	3301      	adds	r3, #1
 80183ec:	617b      	str	r3, [r7, #20]
 80183ee:	697b      	ldr	r3, [r7, #20]
 80183f0:	2b07      	cmp	r3, #7
 80183f2:	dde8      	ble.n	80183c6 <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 80183f4:	693b      	ldr	r3, [r7, #16]
 80183f6:	3301      	adds	r3, #1
 80183f8:	613b      	str	r3, [r7, #16]
 80183fa:	693b      	ldr	r3, [r7, #16]
 80183fc:	2b05      	cmp	r3, #5
 80183fe:	ddd7      	ble.n	80183b0 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	43db      	mvns	r3, r3
 8018404:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 8018406:	68fb      	ldr	r3, [r7, #12]
}
 8018408:	4618      	mov	r0, r3
 801840a:	371c      	adds	r7, #28
 801840c:	46bd      	mov	sp, r7
 801840e:	bd90      	pop	{r4, r7, pc}
 8018410:	04c11db7 	.word	0x04c11db7

08018414 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b084      	sub	sp, #16
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 801841c:	6878      	ldr	r0, [r7, #4]
 801841e:	f7ff ffbd 	bl	801839c <prvComputeCRC32_MAC>
 8018422:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 8018424:	68f8      	ldr	r0, [r7, #12]
 8018426:	f7ff ff91 	bl	801834c <prvRevBits32>
 801842a:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 801842c:	68bb      	ldr	r3, [r7, #8]
 801842e:	0e9b      	lsrs	r3, r3, #26
}
 8018430:	4618      	mov	r0, r3
 8018432:	3710      	adds	r7, #16
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}

08018438 <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 8018442:	6838      	ldr	r0, [r7, #0]
 8018444:	f7ff ffe6 	bl	8018414 <prvComputeEthernet_MACHash>
 8018448:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	2b1f      	cmp	r3, #31
 801844e:	d80c      	bhi.n	801846a <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	691a      	ldr	r2, [r3, #16]
 8018456:	2101      	movs	r1, #1
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	fa01 f303 	lsl.w	r3, r1, r3
 801845e:	4619      	mov	r1, r3
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	430a      	orrs	r2, r1
 8018466:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 8018468:	e00d      	b.n	8018486 <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	695a      	ldr	r2, [r3, #20]
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	f003 031f 	and.w	r3, r3, #31
 8018476:	2101      	movs	r1, #1
 8018478:	fa01 f303 	lsl.w	r3, r1, r3
 801847c:	4619      	mov	r1, r3
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	430a      	orrs	r2, r1
 8018484:	615a      	str	r2, [r3, #20]
}
 8018486:	bf00      	nop
 8018488:	3710      	adds	r7, #16
 801848a:	46bd      	mov	sp, r7
 801848c:	bd80      	pop	{r7, pc}

0801848e <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 801848e:	b580      	push	{r7, lr}
 8018490:	b086      	sub	sp, #24
 8018492:	af00      	add	r7, sp, #0
 8018494:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 8018496:	230a      	movs	r3, #10
 8018498:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 801849a:	2300      	movs	r3, #0
 801849c:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 801849e:	6939      	ldr	r1, [r7, #16]
 80184a0:	6878      	ldr	r0, [r7, #4]
 80184a2:	f7ff f9bf 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 80184a6:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d002      	beq.n	80184b4 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184b2:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 80184b4:	697b      	ldr	r3, [r7, #20]
}
 80184b6:	4618      	mov	r0, r3
 80184b8:	3718      	adds	r7, #24
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
	...

080184c0 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b08e      	sub	sp, #56	@ 0x38
 80184c4:	af02      	add	r7, sp, #8
 80184c6:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 80184c8:	2300      	movs	r3, #0
 80184ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 80184cc:	2300      	movs	r3, #0
 80184ce:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 80184d0:	4b8d      	ldr	r3, [pc, #564]	@ (8018708 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80184d2:	781b      	ldrb	r3, [r3, #0]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	f040 8104 	bne.w	80186e2 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 80184da:	4a8c      	ldr	r2, [pc, #560]	@ (801870c <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 80184e0:	6878      	ldr	r0, [r7, #4]
 80184e2:	f7f5 fa71 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 80184e6:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 80184e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d104      	bne.n	80184f8 <xSTM32H_NetworkInterfaceInitialise+0x38>
 80184ee:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80184f2:	4887      	ldr	r0, [pc, #540]	@ (8018710 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80184f4:	f7e9 fa42 	bl	800197c <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 80184f8:	4b86      	ldr	r3, [pc, #536]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80184fa:	4a87      	ldr	r2, [pc, #540]	@ (8018718 <xSTM32H_NetworkInterfaceInitialise+0x258>)
 80184fc:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 80184fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018500:	33e8      	adds	r3, #232	@ 0xe8
 8018502:	4a84      	ldr	r2, [pc, #528]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018504:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8018506:	4b83      	ldr	r3, [pc, #524]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018508:	2201      	movs	r2, #1
 801850a:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 801850c:	4b81      	ldr	r3, [pc, #516]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801850e:	4a83      	ldr	r2, [pc, #524]	@ (801871c <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8018510:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8018512:	4b80      	ldr	r3, [pc, #512]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018514:	4a82      	ldr	r2, [pc, #520]	@ (8018720 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8018516:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8018518:	4b7e      	ldr	r3, [pc, #504]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801851a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 801851e:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018520:	2260      	movs	r2, #96	@ 0x60
 8018522:	2100      	movs	r1, #0
 8018524:	487d      	ldr	r0, [pc, #500]	@ (801871c <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8018526:	f00a fbb6 	bl	8022c96 <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 801852a:	2260      	movs	r2, #96	@ 0x60
 801852c:	2100      	movs	r1, #0
 801852e:	487c      	ldr	r0, [pc, #496]	@ (8018720 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8018530:	f00a fbb1 	bl	8022c96 <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8018534:	4877      	ldr	r0, [pc, #476]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018536:	f000 fc71 	bl	8018e1c <HAL_ETH_Init>
 801853a:	4603      	mov	r3, r0
 801853c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 8018540:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018544:	2b00      	cmp	r3, #0
 8018546:	f040 80c9 	bne.w	80186dc <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 801854a:	4b72      	ldr	r3, [pc, #456]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	6899      	ldr	r1, [r3, #8]
 8018550:	4b70      	ldr	r3, [pc, #448]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018552:	681a      	ldr	r2, [r3, #0]
 8018554:	f240 4316 	movw	r3, #1046	@ 0x416
 8018558:	430b      	orrs	r3, r1
 801855a:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 801855c:	2234      	movs	r2, #52	@ 0x34
 801855e:	2100      	movs	r1, #0
 8018560:	4870      	ldr	r0, [pc, #448]	@ (8018724 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018562:	f00a fb98 	bl	8022c96 <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 8018566:	4b6f      	ldr	r3, [pc, #444]	@ (8018724 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018568:	2220      	movs	r2, #32
 801856a:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 801856c:	4b6d      	ldr	r3, [pc, #436]	@ (8018724 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	f043 0301 	orr.w	r3, r3, #1
 8018574:	4a6b      	ldr	r2, [pc, #428]	@ (8018724 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018576:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8018578:	4b6a      	ldr	r3, [pc, #424]	@ (8018724 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801857a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 801857e:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8018580:	4b68      	ldr	r3, [pc, #416]	@ (8018724 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018582:	2200      	movs	r2, #0
 8018584:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 8018586:	2104      	movs	r1, #4
 8018588:	2004      	movs	r0, #4
 801858a:	f7eb fa43 	bl	8003a14 <xQueueCreateCountingSemaphore>
 801858e:	4603      	mov	r3, r0
 8018590:	4a65      	ldr	r2, [pc, #404]	@ (8018728 <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8018592:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 8018594:	4b64      	ldr	r3, [pc, #400]	@ (8018728 <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d104      	bne.n	80185a6 <xSTM32H_NetworkInterfaceInitialise+0xe6>
 801859c:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80185a0:	485b      	ldr	r0, [pc, #364]	@ (8018710 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80185a2:	f7e9 f9eb 	bl	800197c <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 80185a6:	2001      	movs	r0, #1
 80185a8:	f7eb fa1b 	bl	80039e2 <xQueueCreateMutex>
 80185ac:	4603      	mov	r3, r0
 80185ae:	4a5f      	ldr	r2, [pc, #380]	@ (801872c <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 80185b0:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 80185b2:	4b5e      	ldr	r3, [pc, #376]	@ (801872c <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d104      	bne.n	80185c4 <xSTM32H_NetworkInterfaceInitialise+0x104>
 80185ba:	f240 117f 	movw	r1, #383	@ 0x17f
 80185be:	4854      	ldr	r0, [pc, #336]	@ (8018710 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80185c0:	f7e9 f9dc 	bl	800197c <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 80185c4:	2300      	movs	r3, #0
 80185c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80185c8:	e015      	b.n	80185f6 <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 80185ca:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80185ce:	f7ff ff5e 	bl	801848e <pucGetRXBuffer>
 80185d2:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 80185d4:	69fb      	ldr	r3, [r7, #28]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d104      	bne.n	80185e4 <xSTM32H_NetworkInterfaceInitialise+0x124>
 80185da:	f240 1189 	movw	r1, #393	@ 0x189
 80185de:	484c      	ldr	r0, [pc, #304]	@ (8018710 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80185e0:	f7e9 f9cc 	bl	800197c <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 80185e4:	2300      	movs	r3, #0
 80185e6:	69fa      	ldr	r2, [r7, #28]
 80185e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80185ea:	484a      	ldr	r0, [pc, #296]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80185ec:	f000 fd02 	bl	8018ff4 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 80185f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185f2:	3301      	adds	r3, #1
 80185f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80185f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185f8:	2b03      	cmp	r3, #3
 80185fa:	d9e6      	bls.n	80185ca <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 80185fc:	494c      	ldr	r1, [pc, #304]	@ (8018730 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 80185fe:	4845      	ldr	r0, [pc, #276]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018600:	f7ff ff1a 	bl	8018438 <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8018604:	494b      	ldr	r1, [pc, #300]	@ (8018734 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 8018606:	4843      	ldr	r0, [pc, #268]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018608:	f7ff ff16 	bl	8018438 <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 801860c:	e03a      	b.n	8018684 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 801860e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018610:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8018614:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018618:	b2db      	uxtb	r3, r3
 801861a:	2b00      	cmp	r3, #0
 801861c:	d002      	beq.n	8018624 <xSTM32H_NetworkInterfaceInitialise+0x164>
 801861e:	2b01      	cmp	r3, #1
 8018620:	d00d      	beq.n	801863e <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 8018622:	e028      	b.n	8018676 <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 8018624:	4b3b      	ldr	r3, [pc, #236]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018626:	685a      	ldr	r2, [r3, #4]
 8018628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801862a:	33e8      	adds	r3, #232	@ 0xe8
 801862c:	429a      	cmp	r2, r3
 801862e:	d021      	beq.n	8018674 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 8018630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018632:	33e8      	adds	r3, #232	@ 0xe8
 8018634:	4619      	mov	r1, r3
 8018636:	4837      	ldr	r0, [pc, #220]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018638:	f7ff fefe 	bl	8018438 <prvSetMAC_HashFilter>
                                break;
 801863c:	e01a      	b.n	8018674 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 801863e:	4a3e      	ldr	r2, [pc, #248]	@ (8018738 <xSTM32H_NetworkInterfaceInitialise+0x278>)
 8018640:	f107 0314 	add.w	r3, r7, #20
 8018644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018648:	6018      	str	r0, [r3, #0]
 801864a:	3304      	adds	r3, #4
 801864c:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 801864e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018650:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018654:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 8018656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018658:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801865c:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 801865e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018660:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8018664:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 8018666:	f107 0314 	add.w	r3, r7, #20
 801866a:	4619      	mov	r1, r3
 801866c:	4829      	ldr	r0, [pc, #164]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801866e:	f7ff fee3 	bl	8018438 <prvSetMAC_HashFilter>
                               break;
 8018672:	e000      	b.n	8018676 <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 8018674:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 8018676:	4b25      	ldr	r3, [pc, #148]	@ (801870c <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801867c:	4618      	mov	r0, r3
 801867e:	f7f5 f9c5 	bl	800da0c <FreeRTOS_NextEndPoint>
 8018682:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 8018684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018686:	2b00      	cmp	r3, #0
 8018688:	d1c1      	bne.n	801860e <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 801868a:	4a2c      	ldr	r2, [pc, #176]	@ (801873c <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 801868c:	f107 030c 	add.w	r3, r7, #12
 8018690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018694:	6018      	str	r0, [r3, #0]
 8018696:	3304      	adds	r3, #4
 8018698:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 801869a:	f107 030c 	add.w	r3, r7, #12
 801869e:	4619      	mov	r1, r3
 80186a0:	481c      	ldr	r0, [pc, #112]	@ (8018714 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80186a2:	f7ff fec9 	bl	8018438 <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 80186a6:	f000 f911 	bl	80188cc <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 80186aa:	2001      	movs	r0, #1
 80186ac:	f000 f926 	bl	80188fc <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 80186b0:	4b23      	ldr	r3, [pc, #140]	@ (8018740 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 80186b2:	9301      	str	r3, [sp, #4]
 80186b4:	2305      	movs	r3, #5
 80186b6:	9300      	str	r3, [sp, #0]
 80186b8:	2300      	movs	r3, #0
 80186ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80186be:	4921      	ldr	r1, [pc, #132]	@ (8018744 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 80186c0:	4821      	ldr	r0, [pc, #132]	@ (8018748 <xSTM32H_NetworkInterfaceInitialise+0x288>)
 80186c2:	f7eb fea9 	bl	8004418 <xTaskCreate>
 80186c6:	4603      	mov	r3, r0
 80186c8:	2b01      	cmp	r3, #1
 80186ca:	d103      	bne.n	80186d4 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 80186cc:	4b0e      	ldr	r3, [pc, #56]	@ (8018708 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80186ce:	2201      	movs	r2, #1
 80186d0:	701a      	strb	r2, [r3, #0]
 80186d2:	e006      	b.n	80186e2 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 80186d4:	4b0c      	ldr	r3, [pc, #48]	@ (8018708 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80186d6:	2202      	movs	r2, #2
 80186d8:	701a      	strb	r2, [r3, #0]
 80186da:	e002      	b.n	80186e2 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 80186dc:	4b0a      	ldr	r3, [pc, #40]	@ (8018708 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80186de:	2202      	movs	r2, #2
 80186e0:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 80186e2:	4b09      	ldr	r3, [pc, #36]	@ (8018708 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80186e4:	781b      	ldrb	r3, [r3, #0]
 80186e6:	2b01      	cmp	r3, #1
 80186e8:	d108      	bne.n	80186fc <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 80186ea:	4b18      	ldr	r3, [pc, #96]	@ (801874c <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 80186ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d004      	beq.n	80186fc <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 80186f2:	2301      	movs	r3, #1
 80186f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 80186f6:	4816      	ldr	r0, [pc, #88]	@ (8018750 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 80186f8:	f009 ffa4 	bl	8022644 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 80186fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80186fe:	4618      	mov	r0, r3
 8018700:	3730      	adds	r7, #48	@ 0x30
 8018702:	46bd      	mov	sp, r7
 8018704:	bd80      	pop	{r7, pc}
 8018706:	bf00      	nop
 8018708:	20002470 	.word	0x20002470
 801870c:	20002524 	.word	0x20002524
 8018710:	08027aac 	.word	0x08027aac
 8018714:	2000247c 	.word	0x2000247c
 8018718:	40028000 	.word	0x40028000
 801871c:	24040060 	.word	0x24040060
 8018720:	24040000 	.word	0x24040000
 8018724:	200024f0 	.word	0x200024f0
 8018728:	20002474 	.word	0x20002474
 801872c:	20002478 	.word	0x20002478
 8018730:	08027d44 	.word	0x08027d44
 8018734:	08027d4c 	.word	0x08027d4c
 8018738:	08027b24 	.word	0x08027b24
 801873c:	08027b2c 	.word	0x08027b2c
 8018740:	20002528 	.word	0x20002528
 8018744:	08027b00 	.word	0x08027b00
 8018748:	08018cb1 	.word	0x08018cb1
 801874c:	2000252c 	.word	0x2000252c
 8018750:	08027b0c 	.word	0x08027b0c

08018754 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 8018754:	b480      	push	{r7}
 8018756:	b085      	sub	sp, #20
 8018758:	af00      	add	r7, sp, #0
 801875a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 801875c:	4b07      	ldr	r3, [pc, #28]	@ (801877c <xSTM32H_GetPhyLinkStatus+0x28>)
 801875e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018760:	2b00      	cmp	r3, #0
 8018762:	d002      	beq.n	801876a <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 8018764:	2301      	movs	r3, #1
 8018766:	60fb      	str	r3, [r7, #12]
 8018768:	e001      	b.n	801876e <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 801876a:	2300      	movs	r3, #0
 801876c:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 801876e:	68fb      	ldr	r3, [r7, #12]
}
 8018770:	4618      	mov	r0, r3
 8018772:	3714      	adds	r7, #20
 8018774:	46bd      	mov	sp, r7
 8018776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801877a:	4770      	bx	lr
 801877c:	2000252c 	.word	0x2000252c

08018780 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 8018780:	b580      	push	{r7, lr}
 8018782:	b082      	sub	sp, #8
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
 8018788:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	4a10      	ldr	r2, [pc, #64]	@ (80187d0 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 801878e:	2111      	movs	r1, #17
 8018790:	4810      	ldr	r0, [pc, #64]	@ (80187d4 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8018792:	f00a ff83 	bl	802369c <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 8018796:	2228      	movs	r2, #40	@ 0x28
 8018798:	2100      	movs	r1, #0
 801879a:	6838      	ldr	r0, [r7, #0]
 801879c:	f00a fa7b 	bl	8022c96 <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 80187a0:	683b      	ldr	r3, [r7, #0]
 80187a2:	4a0c      	ldr	r2, [pc, #48]	@ (80187d4 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 80187a4:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 80187a6:	687a      	ldr	r2, [r7, #4]
 80187a8:	683b      	ldr	r3, [r7, #0]
 80187aa:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 80187ac:	683b      	ldr	r3, [r7, #0]
 80187ae:	4a0a      	ldr	r2, [pc, #40]	@ (80187d8 <pxSTM32H_FillInterfaceDescriptor+0x58>)
 80187b0:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 80187b2:	683b      	ldr	r3, [r7, #0]
 80187b4:	4a09      	ldr	r2, [pc, #36]	@ (80187dc <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 80187b6:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	4a09      	ldr	r2, [pc, #36]	@ (80187e0 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 80187bc:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 80187be:	6838      	ldr	r0, [r7, #0]
 80187c0:	f7f5 f82e 	bl	800d820 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 80187c4:	683b      	ldr	r3, [r7, #0]
}
 80187c6:	4618      	mov	r0, r3
 80187c8:	3708      	adds	r7, #8
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}
 80187ce:	bf00      	nop
 80187d0:	08027b34 	.word	0x08027b34
 80187d4:	2000256c 	.word	0x2000256c
 80187d8:	080184c1 	.word	0x080184c1
 80187dc:	080187e5 	.word	0x080187e5
 80187e0:	08018755 	.word	0x08018755

080187e4 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b08a      	sub	sp, #40	@ 0x28
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	60f8      	str	r0, [r7, #12]
 80187ec:	60b9      	str	r1, [r7, #8]
 80187ee:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 80187f0:	2300      	movs	r3, #0
 80187f2:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 80187f4:	2364      	movs	r3, #100	@ 0x64
 80187f6:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 80187f8:	68f8      	ldr	r0, [r7, #12]
 80187fa:	f7ff ffab 	bl	8018754 <xSTM32H_GetPhyLinkStatus>
 80187fe:	4603      	mov	r3, r0
 8018800:	2b01      	cmp	r3, #1
 8018802:	d14c      	bne.n	801889e <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 8018804:	68bb      	ldr	r3, [r7, #8]
 8018806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018808:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d104      	bne.n	801881a <xSTM32H_NetworkInterfaceOutput+0x36>
 8018810:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8018814:	4827      	ldr	r0, [pc, #156]	@ (80188b4 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 8018816:	f7e9 f8b1 	bl	800197c <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 801881a:	69fb      	ldr	r3, [r7, #28]
 801881c:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 801881e:	68bb      	ldr	r3, [r7, #8]
 8018820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 8018822:	617b      	str	r3, [r7, #20]
 8018824:	2300      	movs	r3, #0
 8018826:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 8018828:	68bb      	ldr	r3, [r7, #8]
 801882a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801882c:	4a22      	ldr	r2, [pc, #136]	@ (80188b8 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 801882e:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8018830:	4a21      	ldr	r2, [pc, #132]	@ (80188b8 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018832:	f107 0310 	add.w	r3, r7, #16
 8018836:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8018838:	4b20      	ldr	r3, [pc, #128]	@ (80188bc <xSTM32H_NetworkInterfaceOutput+0xd8>)
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	6a39      	ldr	r1, [r7, #32]
 801883e:	4618      	mov	r0, r3
 8018840:	f7eb faca 	bl	8003dd8 <xQueueSemaphoreTake>
 8018844:	4603      	mov	r3, r0
 8018846:	2b01      	cmp	r3, #1
 8018848:	d003      	beq.n	8018852 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 801884a:	481d      	ldr	r0, [pc, #116]	@ (80188c0 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 801884c:	f009 fefa 	bl	8022644 <lUDPLoggingPrintf>
 8018850:	e025      	b.n	801889e <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 8018852:	f3bf 8f4f 	dsb	sy
}
 8018856:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 8018858:	4b1a      	ldr	r3, [pc, #104]	@ (80188c4 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	6a39      	ldr	r1, [r7, #32]
 801885e:	4618      	mov	r0, r3
 8018860:	f7eb faba 	bl	8003dd8 <xQueueSemaphoreTake>
 8018864:	4603      	mov	r3, r0
 8018866:	2b00      	cmp	r3, #0
 8018868:	d019      	beq.n	801889e <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 801886a:	2300      	movs	r3, #0
 801886c:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 801886e:	4912      	ldr	r1, [pc, #72]	@ (80188b8 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018870:	4815      	ldr	r0, [pc, #84]	@ (80188c8 <xSTM32H_NetworkInterfaceOutput+0xe4>)
 8018872:	f000 fcef 	bl	8019254 <HAL_ETH_Transmit_IT>
 8018876:	4603      	mov	r3, r0
 8018878:	2b00      	cmp	r3, #0
 801887a:	d102      	bne.n	8018882 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 801887c:	2301      	movs	r3, #1
 801887e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018880:	e006      	b.n	8018890 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8018882:	4b0e      	ldr	r3, [pc, #56]	@ (80188bc <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8018884:	6818      	ldr	r0, [r3, #0]
 8018886:	2300      	movs	r3, #0
 8018888:	2200      	movs	r2, #0
 801888a:	2100      	movs	r1, #0
 801888c:	f7eb f8ec 	bl	8003a68 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 8018890:	4b0c      	ldr	r3, [pc, #48]	@ (80188c4 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8018892:	6818      	ldr	r0, [r3, #0]
 8018894:	2300      	movs	r3, #0
 8018896:	2200      	movs	r2, #0
 8018898:	2100      	movs	r1, #0
 801889a:	f7eb f8e5 	bl	8003a68 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d002      	beq.n	80188aa <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 80188a4:	68b8      	ldr	r0, [r7, #8]
 80188a6:	f7ff f825 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 80188aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80188ac:	4618      	mov	r0, r3
 80188ae:	3728      	adds	r7, #40	@ 0x28
 80188b0:	46bd      	mov	sp, r7
 80188b2:	bd80      	pop	{r7, pc}
 80188b4:	08027aac 	.word	0x08027aac
 80188b8:	200024f0 	.word	0x200024f0
 80188bc:	20002474 	.word	0x20002474
 80188c0:	08027b3c 	.word	0x08027b3c
 80188c4:	20002478 	.word	0x20002478
 80188c8:	2000247c 	.word	0x2000247c

080188cc <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 80188cc:	b580      	push	{r7, lr}
 80188ce:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 80188d0:	4a06      	ldr	r2, [pc, #24]	@ (80188ec <prvMACBProbePhy+0x20>)
 80188d2:	4907      	ldr	r1, [pc, #28]	@ (80188f0 <prvMACBProbePhy+0x24>)
 80188d4:	4807      	ldr	r0, [pc, #28]	@ (80188f4 <prvMACBProbePhy+0x28>)
 80188d6:	f7ff f8c5 	bl	8017a64 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 80188da:	4806      	ldr	r0, [pc, #24]	@ (80188f4 <prvMACBProbePhy+0x28>)
 80188dc:	f7ff f8d8 	bl	8017a90 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 80188e0:	4905      	ldr	r1, [pc, #20]	@ (80188f8 <prvMACBProbePhy+0x2c>)
 80188e2:	4804      	ldr	r0, [pc, #16]	@ (80188f4 <prvMACBProbePhy+0x28>)
 80188e4:	f7ff f9d2 	bl	8017c8c <xPhyConfigure>
}
 80188e8:	bf00      	nop
 80188ea:	bd80      	pop	{r7, pc}
 80188ec:	08018aed 	.word	0x08018aed
 80188f0:	08018ab5 	.word	0x08018ab5
 80188f4:	2000252c 	.word	0x2000252c
 80188f8:	08027e44 	.word	0x08027e44

080188fc <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b09e      	sub	sp, #120	@ 0x78
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 8018904:	2300      	movs	r3, #0
 8018906:	677b      	str	r3, [r7, #116]	@ 0x74
 8018908:	2300      	movs	r3, #0
 801890a:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 801890c:	4b25      	ldr	r3, [pc, #148]	@ (80189a4 <prvEthernetUpdateConfig+0xa8>)
 801890e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018910:	687a      	ldr	r2, [r7, #4]
 8018912:	4619      	mov	r1, r3
 8018914:	4824      	ldr	r0, [pc, #144]	@ (80189a8 <prvEthernetUpdateConfig+0xac>)
 8018916:	f009 fe95 	bl	8022644 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d103      	bne.n	8018928 <prvEthernetUpdateConfig+0x2c>
 8018920:	4b20      	ldr	r3, [pc, #128]	@ (80189a4 <prvEthernetUpdateConfig+0xa8>)
 8018922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018924:	2b00      	cmp	r3, #0
 8018926:	d035      	beq.n	8018994 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 8018928:	4b1e      	ldr	r3, [pc, #120]	@ (80189a4 <prvEthernetUpdateConfig+0xa8>)
 801892a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801892c:	2201      	movs	r2, #1
 801892e:	fa02 f303 	lsl.w	r3, r2, r3
 8018932:	3b01      	subs	r3, #1
 8018934:	4619      	mov	r1, r3
 8018936:	481b      	ldr	r0, [pc, #108]	@ (80189a4 <prvEthernetUpdateConfig+0xa8>)
 8018938:	f7ff faae 	bl	8017e98 <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 801893c:	4b19      	ldr	r3, [pc, #100]	@ (80189a4 <prvEthernetUpdateConfig+0xa8>)
 801893e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8018942:	2b02      	cmp	r3, #2
 8018944:	d103      	bne.n	801894e <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 8018946:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801894a:	673b      	str	r3, [r7, #112]	@ 0x70
 801894c:	e001      	b.n	8018952 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 801894e:	2300      	movs	r3, #0
 8018950:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8018952:	4b14      	ldr	r3, [pc, #80]	@ (80189a4 <prvEthernetUpdateConfig+0xa8>)
 8018954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8018958:	2b01      	cmp	r3, #1
 801895a:	d102      	bne.n	8018962 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 801895c:	2300      	movs	r3, #0
 801895e:	677b      	str	r3, [r7, #116]	@ 0x74
 8018960:	e002      	b.n	8018968 <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8018962:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018966:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8018968:	f107 030c 	add.w	r3, r7, #12
 801896c:	4619      	mov	r1, r3
 801896e:	480f      	ldr	r0, [pc, #60]	@ (80189ac <prvEthernetUpdateConfig+0xb0>)
 8018970:	f000 ffcc 	bl	801990c <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8018974:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018976:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 8018978:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801897a:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 801897c:	f107 030c 	add.w	r3, r7, #12
 8018980:	4619      	mov	r1, r3
 8018982:	480a      	ldr	r0, [pc, #40]	@ (80189ac <prvEthernetUpdateConfig+0xb0>)
 8018984:	f001 f996 	bl	8019cb4 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 8018988:	2301      	movs	r3, #1
 801898a:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 801898c:	4807      	ldr	r0, [pc, #28]	@ (80189ac <prvEthernetUpdateConfig+0xb0>)
 801898e:	f000 fb64 	bl	801905a <HAL_ETH_Start_IT>
 8018992:	e003      	b.n	801899c <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018994:	4805      	ldr	r0, [pc, #20]	@ (80189ac <prvEthernetUpdateConfig+0xb0>)
 8018996:	f000 fbe5 	bl	8019164 <HAL_ETH_Stop_IT>
    }
}
 801899a:	bf00      	nop
 801899c:	bf00      	nop
 801899e:	3778      	adds	r7, #120	@ 0x78
 80189a0:	46bd      	mov	sp, r7
 80189a2:	bd80      	pop	{r7, pc}
 80189a4:	2000252c 	.word	0x2000252c
 80189a8:	08027b74 	.word	0x08027b74
 80189ac:	2000247c 	.word	0x2000247c

080189b0 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b08c      	sub	sp, #48	@ 0x30
 80189b4:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 80189b6:	2300      	movs	r3, #0
 80189b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 80189ba:	2300      	movs	r3, #0
 80189bc:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 80189be:	f107 0308 	add.w	r3, r7, #8
 80189c2:	4619      	mov	r1, r3
 80189c4:	4838      	ldr	r0, [pc, #224]	@ (8018aa8 <prvNetworkInterfaceInput+0xf8>)
 80189c6:	f000 fd19 	bl	80193fc <HAL_ETH_GetRxData>
 80189ca:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 80189cc:	69fb      	ldr	r3, [r7, #28]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d101      	bne.n	80189d6 <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 80189d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189d4:	e064      	b.n	8018aa0 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 80189d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189d8:	3301      	adds	r3, #1
 80189da:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 80189dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80189e0:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 80189e2:	68bb      	ldr	r3, [r7, #8]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d004      	beq.n	80189f2 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 80189e8:	68bb      	ldr	r3, [r7, #8]
 80189ea:	4618      	mov	r0, r3
 80189ec:	f7f1 ff8d 	bl	800a90a <pxPacketBuffer_to_NetworkBuffer>
 80189f0:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 80189f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d102      	bne.n	80189fe <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 80189f8:	482c      	ldr	r0, [pc, #176]	@ (8018aac <prvNetworkInterfaceInput+0xfc>)
 80189fa:	f009 fe23 	bl	8022644 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 80189fe:	2100      	movs	r1, #0
 8018a00:	69b8      	ldr	r0, [r7, #24]
 8018a02:	f7fe ff0f 	bl	8017824 <pxGetNetworkBufferWithDescriptor>
 8018a06:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 8018a08:	697b      	ldr	r3, [r7, #20]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d102      	bne.n	8018a14 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 8018a0e:	2300      	movs	r3, #0
 8018a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018a12:	e005      	b.n	8018a20 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 8018a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d002      	beq.n	8018a20 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 8018a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a1c:	69fa      	ldr	r2, [r7, #28]
 8018a1e:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 8018a20:	2300      	movs	r3, #0
 8018a22:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 8018a24:	697b      	ldr	r3, [r7, #20]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d002      	beq.n	8018a30 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 8018a2a:	697b      	ldr	r3, [r7, #20]
 8018a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a2e:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8018a30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018a32:	481d      	ldr	r0, [pc, #116]	@ (8018aa8 <prvNetworkInterfaceInput+0xf8>)
 8018a34:	f000 fd2a 	bl	801948c <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 8018a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d0bd      	beq.n	80189ba <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8018a3e:	2300      	movs	r3, #0
 8018a40:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8018a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7f1 f8c6 	bl	8009bd8 <eConsiderFrameForProcessing>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	2b01      	cmp	r3, #1
 8018a50:	d002      	beq.n	8018a58 <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8018a52:	2301      	movs	r3, #1
 8018a54:	623b      	str	r3, [r7, #32]
 8018a56:	e01c      	b.n	8018a92 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 8018a58:	2301      	movs	r3, #1
 8018a5a:	703b      	strb	r3, [r7, #0]
 8018a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a5e:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8018a60:	4b13      	ldr	r3, [pc, #76]	@ (8018ab0 <prvNetworkInterfaceInput+0x100>)
 8018a62:	681a      	ldr	r2, [r3, #0]
 8018a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a66:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 8018a68:	4b11      	ldr	r3, [pc, #68]	@ (8018ab0 <prvNetworkInterfaceInput+0x100>)
 8018a6a:	681a      	ldr	r2, [r3, #0]
 8018a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a70:	4619      	mov	r1, r3
 8018a72:	4610      	mov	r0, r2
 8018a74:	f7f5 fa78 	bl	800df68 <FreeRTOS_MatchingEndpoint>
 8018a78:	4602      	mov	r2, r0
 8018a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a7c:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8018a7e:	463b      	mov	r3, r7
 8018a80:	2100      	movs	r1, #0
 8018a82:	4618      	mov	r0, r3
 8018a84:	f7f1 f854 	bl	8009b30 <xSendEventStructToIPTask>
 8018a88:	4603      	mov	r3, r0
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d101      	bne.n	8018a92 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8018a8e:	2301      	movs	r3, #1
 8018a90:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8018a92:	6a3b      	ldr	r3, [r7, #32]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d090      	beq.n	80189ba <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 8018a98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018a9a:	f7fe ff2b 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
    {
 8018a9e:	e78c      	b.n	80189ba <prvNetworkInterfaceInput+0xa>
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3730      	adds	r7, #48	@ 0x30
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}
 8018aa8:	2000247c 	.word	0x2000247c
 8018aac:	08027ba8 	.word	0x08027ba8
 8018ab0:	20002524 	.word	0x20002524

08018ab4 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	b086      	sub	sp, #24
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	60f8      	str	r0, [r7, #12]
 8018abc:	60b9      	str	r1, [r7, #8]
 8018abe:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ac4:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	68ba      	ldr	r2, [r7, #8]
 8018aca:	68f9      	ldr	r1, [r7, #12]
 8018acc:	4806      	ldr	r0, [pc, #24]	@ (8018ae8 <ETH_PHY_IO_ReadReg+0x34>)
 8018ace:	f000 fe75 	bl	80197bc <HAL_ETH_ReadPHYRegister>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d101      	bne.n	8018adc <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 8018ad8:	2300      	movs	r3, #0
 8018ada:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018adc:	697b      	ldr	r3, [r7, #20]
}
 8018ade:	4618      	mov	r0, r3
 8018ae0:	3718      	adds	r7, #24
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}
 8018ae6:	bf00      	nop
 8018ae8:	2000247c 	.word	0x2000247c

08018aec <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b086      	sub	sp, #24
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	60f8      	str	r0, [r7, #12]
 8018af4:	60b9      	str	r1, [r7, #8]
 8018af6:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018af8:	f04f 33ff 	mov.w	r3, #4294967295
 8018afc:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	68ba      	ldr	r2, [r7, #8]
 8018b02:	68f9      	ldr	r1, [r7, #12]
 8018b04:	4806      	ldr	r0, [pc, #24]	@ (8018b20 <ETH_PHY_IO_WriteReg+0x34>)
 8018b06:	f000 fead 	bl	8019864 <HAL_ETH_WritePHYRegister>
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d101      	bne.n	8018b14 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 8018b10:	2300      	movs	r3, #0
 8018b12:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018b14:	697b      	ldr	r3, [r7, #20]
}
 8018b16:	4618      	mov	r0, r3
 8018b18:	3718      	adds	r7, #24
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	bd80      	pop	{r7, pc}
 8018b1e:	bf00      	nop
 8018b20:	2000247c 	.word	0x2000247c

08018b24 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 8018b28:	4802      	ldr	r0, [pc, #8]	@ (8018b34 <ETH_IRQHandler+0x10>)
 8018b2a:	f000 fd27 	bl	801957c <HAL_ETH_IRQHandler>
}
 8018b2e:	bf00      	nop
 8018b30:	bd80      	pop	{r7, pc}
 8018b32:	bf00      	nop
 8018b34:	2000247c 	.word	0x2000247c

08018b38 <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b084      	sub	sp, #16
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8018b40:	2300      	movs	r3, #0
 8018b42:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 8018b44:	4b10      	ldr	r3, [pc, #64]	@ (8018b88 <prvSetFlagsAndNotify+0x50>)
 8018b46:	681a      	ldr	r2, [r3, #0]
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	4313      	orrs	r3, r2
 8018b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8018b88 <prvSetFlagsAndNotify+0x50>)
 8018b4e:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8018b50:	4b0e      	ldr	r3, [pc, #56]	@ (8018b8c <prvSetFlagsAndNotify+0x54>)
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d012      	beq.n	8018b7e <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8018b58:	4b0c      	ldr	r3, [pc, #48]	@ (8018b8c <prvSetFlagsAndNotify+0x54>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	f107 020c 	add.w	r2, r7, #12
 8018b60:	2100      	movs	r1, #0
 8018b62:	4618      	mov	r0, r3
 8018b64:	f7ed fab6 	bl	80060d4 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d007      	beq.n	8018b7e <prvSetFlagsAndNotify+0x46>
 8018b6e:	4b08      	ldr	r3, [pc, #32]	@ (8018b90 <prvSetFlagsAndNotify+0x58>)
 8018b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018b74:	601a      	str	r2, [r3, #0]
 8018b76:	f3bf 8f4f 	dsb	sy
 8018b7a:	f3bf 8f6f 	isb	sy
    }
}
 8018b7e:	bf00      	nop
 8018b80:	3710      	adds	r7, #16
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bd80      	pop	{r7, pc}
 8018b86:	bf00      	nop
 8018b88:	2000246c 	.word	0x2000246c
 8018b8c:	20002528 	.word	0x20002528
 8018b90:	e000ed04 	.word	0xe000ed04

08018b94 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b082      	sub	sp, #8
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8018b9c:	2002      	movs	r0, #2
 8018b9e:	f7ff ffcb 	bl	8018b38 <prvSetFlagsAndNotify>
}
 8018ba2:	bf00      	nop
 8018ba4:	3708      	adds	r7, #8
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}

08018baa <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018baa:	b580      	push	{r7, lr}
 8018bac:	b082      	sub	sp, #8
 8018bae:	af00      	add	r7, sp, #0
 8018bb0:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8018bb2:	2001      	movs	r0, #1
 8018bb4:	f7ff ffc0 	bl	8018b38 <prvSetFlagsAndNotify>
}
 8018bb8:	bf00      	nop
 8018bba:	3708      	adds	r7, #8
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	bd80      	pop	{r7, pc}

08018bc0 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8018bc0:	b580      	push	{r7, lr}
 8018bc2:	b082      	sub	sp, #8
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 8018bc8:	2004      	movs	r0, #4
 8018bca:	f7ff ffb5 	bl	8018b38 <prvSetFlagsAndNotify>
}
 8018bce:	bf00      	nop
 8018bd0:	3708      	adds	r7, #8
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd80      	pop	{r7, pc}
	...

08018bd8 <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 8018bd8:	b480      	push	{r7}
 8018bda:	b085      	sub	sp, #20
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8018be0:	4b15      	ldr	r3, [pc, #84]	@ (8018c38 <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8018be2:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018be4:	2300      	movs	r3, #0
 8018be6:	60bb      	str	r3, [r7, #8]
 8018be8:	e01c      	b.n	8018c24 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 8018bea:	68ba      	ldr	r2, [r7, #8]
 8018bec:	4613      	mov	r3, r2
 8018bee:	00db      	lsls	r3, r3, #3
 8018bf0:	1a9b      	subs	r3, r3, r2
 8018bf2:	00db      	lsls	r3, r3, #3
 8018bf4:	461a      	mov	r2, r3
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	4413      	add	r3, r2
 8018bfa:	68fa      	ldr	r2, [r7, #12]
 8018bfc:	320a      	adds	r2, #10
 8018bfe:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 8018c00:	68ba      	ldr	r2, [r7, #8]
 8018c02:	4613      	mov	r3, r2
 8018c04:	00db      	lsls	r3, r3, #3
 8018c06:	1a9b      	subs	r3, r3, r2
 8018c08:	00db      	lsls	r3, r3, #3
 8018c0a:	461a      	mov	r2, r3
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	4413      	add	r3, r2
 8018c10:	461a      	mov	r2, r3
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8018c1c:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	3301      	adds	r3, #1
 8018c22:	60bb      	str	r3, [r7, #8]
 8018c24:	68bb      	ldr	r3, [r7, #8]
 8018c26:	2b3f      	cmp	r3, #63	@ 0x3f
 8018c28:	d9df      	bls.n	8018bea <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 8018c2a:	bf00      	nop
 8018c2c:	bf00      	nop
 8018c2e:	3714      	adds	r7, #20
 8018c30:	46bd      	mov	sp, r7
 8018c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c36:	4770      	bx	lr
 8018c38:	240400c0 	.word	0x240400c0

08018c3c <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b082      	sub	sp, #8
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
 8018c44:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 8018c46:	f7ed fcfb 	bl	8006640 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	681a      	ldr	r2, [r3, #0]
 8018c4e:	683b      	ldr	r3, [r7, #0]
 8018c50:	43db      	mvns	r3, r3
 8018c52:	401a      	ands	r2, r3
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 8018c58:	f7ed fd1e 	bl	8006698 <vPortExitCritical>
}
 8018c5c:	bf00      	nop
 8018c5e:	3708      	adds	r7, #8
 8018c60:	46bd      	mov	sp, r7
 8018c62:	bd80      	pop	{r7, pc}

08018c64 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8018c64:	b480      	push	{r7}
 8018c66:	b087      	sub	sp, #28
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	3330      	adds	r3, #48	@ 0x30
 8018c74:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018c76:	2300      	movs	r3, #0
 8018c78:	617b      	str	r3, [r7, #20]
 8018c7a:	e00e      	b.n	8018c9a <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	697a      	ldr	r2, [r7, #20]
 8018c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8018c84:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 8018c86:	68bb      	ldr	r3, [r7, #8]
 8018c88:	68db      	ldr	r3, [r3, #12]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	da02      	bge.n	8018c94 <uxGetOwnCount+0x30>
            {
                xCount++;
 8018c8e:	693b      	ldr	r3, [r7, #16]
 8018c90:	3301      	adds	r3, #1
 8018c92:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018c94:	697b      	ldr	r3, [r7, #20]
 8018c96:	3301      	adds	r3, #1
 8018c98:	617b      	str	r3, [r7, #20]
 8018c9a:	697b      	ldr	r3, [r7, #20]
 8018c9c:	2b03      	cmp	r3, #3
 8018c9e:	d9ed      	bls.n	8018c7c <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8018ca0:	693b      	ldr	r3, [r7, #16]
    }
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	371c      	adds	r7, #28
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cac:	4770      	bx	lr
	...

08018cb0 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b088      	sub	sp, #32
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 8018cb8:	2364      	movs	r3, #100	@ 0x64
 8018cba:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8018cc0:	2304      	movs	r3, #4
 8018cc2:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 8018cc8:	f7f1 ffb8 	bl	800ac3c <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8018ccc:	4b43      	ldr	r3, [pc, #268]	@ (8018ddc <prvEMACHandlerTask+0x12c>)
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f7eb f96f 	bl	8003fb4 <uxQueueMessagesWaiting>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	f1c3 0304 	rsb	r3, r3, #4
 8018cdc:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8018cde:	69fa      	ldr	r2, [r7, #28]
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	429a      	cmp	r2, r3
 8018ce4:	d206      	bcs.n	8018cf4 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 8018cea:	2204      	movs	r2, #4
 8018cec:	69f9      	ldr	r1, [r7, #28]
 8018cee:	483c      	ldr	r0, [pc, #240]	@ (8018de0 <prvEMACHandlerTask+0x130>)
 8018cf0:	f009 fca8 	bl	8022644 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8018cf4:	483b      	ldr	r0, [pc, #236]	@ (8018de4 <prvEMACHandlerTask+0x134>)
 8018cf6:	f7ff ffb5 	bl	8018c64 <uxGetOwnCount>
 8018cfa:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 8018cfc:	69ba      	ldr	r2, [r7, #24]
 8018cfe:	68bb      	ldr	r3, [r7, #8]
 8018d00:	429a      	cmp	r2, r3
 8018d02:	d906      	bls.n	8018d12 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 8018d04:	68bb      	ldr	r3, [r7, #8]
 8018d06:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 8018d08:	2204      	movs	r2, #4
 8018d0a:	69b9      	ldr	r1, [r7, #24]
 8018d0c:	4836      	ldr	r0, [pc, #216]	@ (8018de8 <prvEMACHandlerTask+0x138>)
 8018d0e:	f009 fc99 	bl	8022644 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8018d12:	693a      	ldr	r2, [r7, #16]
 8018d14:	2100      	movs	r1, #0
 8018d16:	2000      	movs	r0, #0
 8018d18:	f7ec fe6c 	bl	80059f4 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8018d1c:	4b33      	ldr	r3, [pc, #204]	@ (8018dec <prvEMACHandlerTask+0x13c>)
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	f003 0301 	and.w	r3, r3, #1
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d006      	beq.n	8018d36 <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 8018d28:	2101      	movs	r1, #1
 8018d2a:	4830      	ldr	r0, [pc, #192]	@ (8018dec <prvEMACHandlerTask+0x13c>)
 8018d2c:	f7ff ff86 	bl	8018c3c <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8018d30:	f7ff fe3e 	bl	80189b0 <prvNetworkInterfaceInput>
 8018d34:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 8018d36:	4b2d      	ldr	r3, [pc, #180]	@ (8018dec <prvEMACHandlerTask+0x13c>)
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	f003 0302 	and.w	r3, r3, #2
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d017      	beq.n	8018d72 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8018d42:	2102      	movs	r1, #2
 8018d44:	4829      	ldr	r0, [pc, #164]	@ (8018dec <prvEMACHandlerTask+0x13c>)
 8018d46:	f7ff ff79 	bl	8018c3c <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 8018d4a:	4b29      	ldr	r3, [pc, #164]	@ (8018df0 <prvEMACHandlerTask+0x140>)
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8018d52:	4618      	mov	r0, r3
 8018d54:	f7eb f840 	bl	8003dd8 <xQueueSemaphoreTake>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d009      	beq.n	8018d72 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018d5e:	4821      	ldr	r0, [pc, #132]	@ (8018de4 <prvEMACHandlerTask+0x134>)
 8018d60:	f001 fb04 	bl	801a36c <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8018d64:	4b22      	ldr	r3, [pc, #136]	@ (8018df0 <prvEMACHandlerTask+0x140>)
 8018d66:	6818      	ldr	r0, [r3, #0]
 8018d68:	2300      	movs	r3, #0
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	2100      	movs	r1, #0
 8018d6e:	f7ea fe7b 	bl	8003a68 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8018d72:	4b1e      	ldr	r3, [pc, #120]	@ (8018dec <prvEMACHandlerTask+0x13c>)
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	f003 0304 	and.w	r3, r3, #4
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d00f      	beq.n	8018d9e <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8018d7e:	2104      	movs	r1, #4
 8018d80:	481a      	ldr	r0, [pc, #104]	@ (8018dec <prvEMACHandlerTask+0x13c>)
 8018d82:	f7ff ff5b 	bl	8018c3c <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 8018d86:	4b17      	ldr	r3, [pc, #92]	@ (8018de4 <prvEMACHandlerTask+0x134>)
 8018d88:	2210      	movs	r2, #16
 8018d8a:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8018d8c:	4815      	ldr	r0, [pc, #84]	@ (8018de4 <prvEMACHandlerTask+0x134>)
 8018d8e:	f000 f964 	bl	801905a <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8018d92:	f7ff fe0d 	bl	80189b0 <prvNetworkInterfaceInput>
 8018d96:	4602      	mov	r2, r0
 8018d98:	697b      	ldr	r3, [r7, #20]
 8018d9a:	4413      	add	r3, r2
 8018d9c:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 8018d9e:	6979      	ldr	r1, [r7, #20]
 8018da0:	4814      	ldr	r0, [pc, #80]	@ (8018df4 <prvEMACHandlerTask+0x144>)
 8018da2:	f7ff fa25 	bl	80181f0 <xPhyCheckLinkStatus>
 8018da6:	4603      	mov	r3, r0
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d08b      	beq.n	8018cc4 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8018dac:	4b12      	ldr	r3, [pc, #72]	@ (8018df8 <prvEMACHandlerTask+0x148>)
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	4618      	mov	r0, r3
 8018db2:	f7ff fccf 	bl	8018754 <xSTM32H_GetPhyLinkStatus>
 8018db6:	4603      	mov	r3, r0
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d10b      	bne.n	8018dd4 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018dbc:	4809      	ldr	r0, [pc, #36]	@ (8018de4 <prvEMACHandlerTask+0x134>)
 8018dbe:	f000 f9d1 	bl	8019164 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018dc2:	2260      	movs	r2, #96	@ 0x60
 8018dc4:	2100      	movs	r1, #0
 8018dc6:	480d      	ldr	r0, [pc, #52]	@ (8018dfc <prvEMACHandlerTask+0x14c>)
 8018dc8:	f009 ff65 	bl	8022c96 <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018dcc:	4805      	ldr	r0, [pc, #20]	@ (8018de4 <prvEMACHandlerTask+0x134>)
 8018dce:	f001 facd 	bl	801a36c <ETH_Clear_Tx_Descriptors>
 8018dd2:	e777      	b.n	8018cc4 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8018dd4:	2000      	movs	r0, #0
 8018dd6:	f7ff fd91 	bl	80188fc <prvEthernetUpdateConfig>
    {
 8018dda:	e773      	b.n	8018cc4 <prvEMACHandlerTask+0x14>
 8018ddc:	20002474 	.word	0x20002474
 8018de0:	08027bcc 	.word	0x08027bcc
 8018de4:	2000247c 	.word	0x2000247c
 8018de8:	08027be4 	.word	0x08027be4
 8018dec:	2000246c 	.word	0x2000246c
 8018df0:	20002478 	.word	0x20002478
 8018df4:	2000252c 	.word	0x2000252c
 8018df8:	20002524 	.word	0x20002524
 8018dfc:	24040060 	.word	0x24040060

08018e00 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8018e00:	b480      	push	{r7}
 8018e02:	b083      	sub	sp, #12
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
 8018e08:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	683a      	ldr	r2, [r7, #0]
 8018e0e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 8018e10:	bf00      	nop
 8018e12:	370c      	adds	r7, #12
 8018e14:	46bd      	mov	sp, r7
 8018e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1a:	4770      	bx	lr

08018e1c <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b084      	sub	sp, #16
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d101      	bne.n	8018e2e <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 8018e2a:	2301      	movs	r3, #1
 8018e2c:	e0d4      	b.n	8018fd8 <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d102      	bne.n	8018e3c <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 8018e36:	6878      	ldr	r0, [r7, #4]
 8018e38:	f7e9 fa48 	bl	80022cc <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2223      	movs	r2, #35	@ 0x23
 8018e40:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018e42:	4b67      	ldr	r3, [pc, #412]	@ (8018fe0 <HAL_ETH_Init+0x1c4>)
 8018e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8018e48:	4a65      	ldr	r2, [pc, #404]	@ (8018fe0 <HAL_ETH_Init+0x1c4>)
 8018e4a:	f043 0302 	orr.w	r3, r3, #2
 8018e4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8018e52:	4b63      	ldr	r3, [pc, #396]	@ (8018fe0 <HAL_ETH_Init+0x1c4>)
 8018e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8018e58:	f003 0302 	and.w	r3, r3, #2
 8018e5c:	60bb      	str	r3, [r7, #8]
 8018e5e:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	7a1b      	ldrb	r3, [r3, #8]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d103      	bne.n	8018e70 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 8018e68:	2000      	movs	r0, #0
 8018e6a:	f001 fc17 	bl	801a69c <HAL_SYSCFG_ETHInterfaceSelect>
 8018e6e:	e003      	b.n	8018e78 <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8018e70:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018e74:	f001 fc12 	bl	801a69c <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	687a      	ldr	r2, [r7, #4]
 8018e84:	6812      	ldr	r2, [r2, #0]
 8018e86:	f043 0301 	orr.w	r3, r3, #1
 8018e8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018e8e:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 8018e90:	f001 fbc8 	bl	801a624 <HAL_GetTick>
 8018e94:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 8018e96:	e010      	b.n	8018eba <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 8018e98:	f001 fbc4 	bl	801a624 <HAL_GetTick>
 8018e9c:	4602      	mov	r2, r0
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	1ad3      	subs	r3, r2, r3
 8018ea2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8018ea6:	d908      	bls.n	8018eba <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2204      	movs	r2, #4
 8018eac:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018eae:	21e0      	movs	r1, #224	@ 0xe0
 8018eb0:	6878      	ldr	r0, [r7, #4]
 8018eb2:	f7ff ffa5 	bl	8018e00 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 8018eb6:	2301      	movs	r3, #1
 8018eb8:	e08e      	b.n	8018fd8 <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	f003 0301 	and.w	r3, r3, #1
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d1e5      	bne.n	8018e98 <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 8018ecc:	6878      	ldr	r0, [r7, #4]
 8018ece:	f001 f94b 	bl	801a168 <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8018ed2:	f004 ff49 	bl	801dd68 <HAL_RCC_GetHCLKFreq>
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	4a42      	ldr	r2, [pc, #264]	@ (8018fe4 <HAL_ETH_Init+0x1c8>)
 8018eda:	fba2 2303 	umull	r2, r3, r2, r3
 8018ede:	0c9a      	lsrs	r2, r3, #18
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	3a01      	subs	r2, #1
 8018ee6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 8018eea:	6878      	ldr	r0, [r7, #4]
 8018eec:	f001 f89e 	bl	801a02c <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ef8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8018efc:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8018f00:	687a      	ldr	r2, [r7, #4]
 8018f02:	6812      	ldr	r2, [r2, #0]
 8018f04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8018f08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018f0c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	695b      	ldr	r3, [r3, #20]
 8018f14:	f003 0303 	and.w	r3, r3, #3
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d008      	beq.n	8018f2e <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	2201      	movs	r2, #1
 8018f20:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018f22:	21e0      	movs	r1, #224	@ 0xe0
 8018f24:	6878      	ldr	r0, [r7, #4]
 8018f26:	f7ff ff6b 	bl	8018e00 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 8018f2a:	2301      	movs	r3, #1
 8018f2c:	e054      	b.n	8018fd8 <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018f36:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8018f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8018fe8 <HAL_ETH_Init+0x1cc>)
 8018f3c:	4013      	ands	r3, r2
 8018f3e:	687a      	ldr	r2, [r7, #4]
 8018f40:	6952      	ldr	r2, [r2, #20]
 8018f42:	0051      	lsls	r1, r2, #1
 8018f44:	687a      	ldr	r2, [r7, #4]
 8018f46:	6812      	ldr	r2, [r2, #0]
 8018f48:	430b      	orrs	r3, r1
 8018f4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018f4e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 8018f52:	6878      	ldr	r0, [r7, #4]
 8018f54:	f001 f960 	bl	801a218 <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 8018f58:	6878      	ldr	r0, [r7, #4]
 8018f5a:	f001 f9a9 	bl	801a2b0 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	685b      	ldr	r3, [r3, #4]
 8018f62:	3305      	adds	r3, #5
 8018f64:	781b      	ldrb	r3, [r3, #0]
 8018f66:	021a      	lsls	r2, r3, #8
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	685b      	ldr	r3, [r3, #4]
 8018f6c:	3304      	adds	r3, #4
 8018f6e:	781b      	ldrb	r3, [r3, #0]
 8018f70:	4619      	mov	r1, r3
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	430a      	orrs	r2, r1
 8018f78:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	685b      	ldr	r3, [r3, #4]
 8018f80:	3303      	adds	r3, #3
 8018f82:	781b      	ldrb	r3, [r3, #0]
 8018f84:	061a      	lsls	r2, r3, #24
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	685b      	ldr	r3, [r3, #4]
 8018f8a:	3302      	adds	r3, #2
 8018f8c:	781b      	ldrb	r3, [r3, #0]
 8018f8e:	041b      	lsls	r3, r3, #16
 8018f90:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	685b      	ldr	r3, [r3, #4]
 8018f96:	3301      	adds	r3, #1
 8018f98:	781b      	ldrb	r3, [r3, #0]
 8018f9a:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018f9c:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	685b      	ldr	r3, [r3, #4]
 8018fa2:	781b      	ldrb	r3, [r3, #0]
 8018fa4:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018faa:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018fac:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	2210      	movs	r2, #16
 8018fba:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	2210      	movs	r2, #16
 8018fc0:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	4a09      	ldr	r2, [pc, #36]	@ (8018fec <HAL_ETH_Init+0x1d0>)
 8018fc8:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	4a07      	ldr	r2, [pc, #28]	@ (8018ff0 <HAL_ETH_Init+0x1d4>)
 8018fd2:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 8018fd6:	2300      	movs	r3, #0
        }
 8018fd8:	4618      	mov	r0, r3
 8018fda:	3710      	adds	r7, #16
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	bd80      	pop	{r7, pc}
 8018fe0:	58024400 	.word	0x58024400
 8018fe4:	431bde83 	.word	0x431bde83
 8018fe8:	ffff8001 	.word	0xffff8001
 8018fec:	0c020060 	.word	0x0c020060
 8018ff0:	0c20c000 	.word	0x0c20c000

08018ff4 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8018ff4:	b480      	push	{r7}
 8018ff6:	b087      	sub	sp, #28
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	60f8      	str	r0, [r7, #12]
 8018ffc:	60b9      	str	r1, [r7, #8]
 8018ffe:	607a      	str	r2, [r7, #4]
 8019000:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	68ba      	ldr	r2, [r7, #8]
 8019006:	320c      	adds	r2, #12
 8019008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801900c:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d002      	beq.n	801901a <HAL_ETH_DescAssignMemory+0x26>
 8019014:	68bb      	ldr	r3, [r7, #8]
 8019016:	2b03      	cmp	r3, #3
 8019018:	d904      	bls.n	8019024 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	2201      	movs	r2, #1
 801901e:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 8019020:	2301      	movs	r3, #1
 8019022:	e014      	b.n	801904e <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8019024:	687a      	ldr	r2, [r7, #4]
 8019026:	697b      	ldr	r3, [r7, #20]
 8019028:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 801902a:	687a      	ldr	r2, [r7, #4]
 801902c:	697b      	ldr	r3, [r7, #20]
 801902e:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8019030:	697b      	ldr	r3, [r7, #20]
 8019032:	68db      	ldr	r3, [r3, #12]
 8019034:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8019038:	697b      	ldr	r3, [r7, #20]
 801903a:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 801903c:	697b      	ldr	r3, [r7, #20]
 801903e:	68db      	ldr	r3, [r3, #12]
 8019040:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8019044:	697b      	ldr	r3, [r7, #20]
 8019046:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 8019048:	697b      	ldr	r3, [r7, #20]
 801904a:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 801904c:	2300      	movs	r3, #0
        }
 801904e:	4618      	mov	r0, r3
 8019050:	371c      	adds	r7, #28
 8019052:	46bd      	mov	sp, r7
 8019054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019058:	4770      	bx	lr

0801905a <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 801905a:	b480      	push	{r7}
 801905c:	b085      	sub	sp, #20
 801905e:	af00      	add	r7, sp, #0
 8019060:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019066:	2b10      	cmp	r3, #16
 8019068:	d175      	bne.n	8019156 <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	2223      	movs	r2, #35	@ 0x23
 801906e:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8019070:	2300      	movs	r3, #0
 8019072:	60fb      	str	r3, [r7, #12]
 8019074:	e00e      	b.n	8019094 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	68fa      	ldr	r2, [r7, #12]
 801907a:	320c      	adds	r2, #12
 801907c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019080:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8019082:	68bb      	ldr	r3, [r7, #8]
 8019084:	68db      	ldr	r3, [r3, #12]
 8019086:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801908a:	68bb      	ldr	r3, [r7, #8]
 801908c:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	3301      	adds	r3, #1
 8019092:	60fb      	str	r3, [r7, #12]
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	2b03      	cmp	r3, #3
 8019098:	d9ed      	bls.n	8019076 <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	2201      	movs	r2, #1
 801909e:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	681a      	ldr	r2, [r3, #0]
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	f042 0202 	orr.w	r2, r2, #2
 80190ae:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	681a      	ldr	r2, [r3, #0]
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	f042 0201 	orr.w	r2, r2, #1
 80190be:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	f042 0201 	orr.w	r2, r2, #1
 80190d0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80190dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80190e0:	687a      	ldr	r2, [r7, #4]
 80190e2:	6812      	ldr	r2, [r2, #0]
 80190e4:	f043 0301 	orr.w	r3, r3, #1
 80190e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80190ec:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80190f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80190fc:	687a      	ldr	r2, [r7, #4]
 80190fe:	6812      	ldr	r2, [r2, #0]
 8019100:	f043 0301 	orr.w	r3, r3, #1
 8019104:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019108:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019114:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019118:	687a      	ldr	r2, [r7, #4]
 801911a:	6812      	ldr	r2, [r2, #0]
 801911c:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8019120:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019124:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019130:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	681a      	ldr	r2, [r3, #0]
 8019138:	f24d 0341 	movw	r3, #53313	@ 0xd041
 801913c:	430b      	orrs	r3, r1
 801913e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019142:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	2210      	movs	r2, #16
 801914a:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	2222      	movs	r2, #34	@ 0x22
 8019150:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 8019152:	2300      	movs	r3, #0
 8019154:	e000      	b.n	8019158 <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 8019156:	2301      	movs	r3, #1
            }
        }
 8019158:	4618      	mov	r0, r3
 801915a:	3714      	adds	r7, #20
 801915c:	46bd      	mov	sp, r7
 801915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019162:	4770      	bx	lr

08019164 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 8019164:	b480      	push	{r7}
 8019166:	b085      	sub	sp, #20
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019170:	2b00      	cmp	r3, #0
 8019172:	d066      	beq.n	8019242 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	2223      	movs	r2, #35	@ 0x23
 8019178:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019182:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681a      	ldr	r2, [r3, #0]
 801918a:	4b31      	ldr	r3, [pc, #196]	@ (8019250 <HAL_ETH_Stop_IT+0xec>)
 801918c:	400b      	ands	r3, r1
 801918e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019192:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801919e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80191a2:	687a      	ldr	r2, [r7, #4]
 80191a4:	6812      	ldr	r2, [r2, #0]
 80191a6:	f023 0301 	bic.w	r3, r3, #1
 80191aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80191ae:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80191ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80191be:	687a      	ldr	r2, [r7, #4]
 80191c0:	6812      	ldr	r2, [r2, #0]
 80191c2:	f023 0301 	bic.w	r3, r3, #1
 80191c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80191ca:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	681a      	ldr	r2, [r3, #0]
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	f022 0201 	bic.w	r2, r2, #1
 80191dc:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	f042 0201 	orr.w	r2, r2, #1
 80191ee:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	681a      	ldr	r2, [r3, #0]
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	f022 0202 	bic.w	r2, r2, #2
 8019200:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8019202:	2300      	movs	r3, #0
 8019204:	60fb      	str	r3, [r7, #12]
 8019206:	e00e      	b.n	8019226 <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	68fa      	ldr	r2, [r7, #12]
 801920c:	320c      	adds	r2, #12
 801920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019212:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8019214:	68bb      	ldr	r3, [r7, #8]
 8019216:	68db      	ldr	r3, [r3, #12]
 8019218:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801921c:	68bb      	ldr	r3, [r7, #8]
 801921e:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	3301      	adds	r3, #1
 8019224:	60fb      	str	r3, [r7, #12]
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	2b03      	cmp	r3, #3
 801922a:	d9ed      	bls.n	8019208 <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	2200      	movs	r2, #0
 8019230:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	2210      	movs	r2, #16
 8019236:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	2210      	movs	r2, #16
 801923c:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 801923e:	2300      	movs	r3, #0
 8019240:	e000      	b.n	8019244 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 8019242:	2301      	movs	r3, #1
            }
        }
 8019244:	4618      	mov	r0, r3
 8019246:	3714      	adds	r7, #20
 8019248:	46bd      	mov	sp, r7
 801924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801924e:	4770      	bx	lr
 8019250:	ffff2fbe 	.word	0xffff2fbe

08019254 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 8019254:	b580      	push	{r7, lr}
 8019256:	b082      	sub	sp, #8
 8019258:	af00      	add	r7, sp, #0
 801925a:	6078      	str	r0, [r7, #4]
 801925c:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 801925e:	683b      	ldr	r3, [r7, #0]
 8019260:	2b00      	cmp	r3, #0
 8019262:	d107      	bne.n	8019274 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019268:	f043 0201 	orr.w	r2, r3, #1
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 8019270:	2301      	movs	r3, #1
 8019272:	e039      	b.n	80192e8 <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019278:	2b10      	cmp	r3, #16
 801927a:	d134      	bne.n	80192e6 <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 801927c:	2201      	movs	r2, #1
 801927e:	6839      	ldr	r1, [r7, #0]
 8019280:	6878      	ldr	r0, [r7, #4]
 8019282:	f001 f8c1 	bl	801a408 <ETH_Prepare_Tx_Descriptors>
 8019286:	4603      	mov	r3, r0
 8019288:	2b00      	cmp	r3, #0
 801928a:	d007      	beq.n	801929c <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019290:	f043 0202 	orr.w	r2, r3, #2
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 8019298:	2301      	movs	r3, #1
 801929a:	e025      	b.n	80192e8 <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192a0:	1c5a      	adds	r2, r3, #1
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192aa:	2b03      	cmp	r3, #3
 80192ac:	d904      	bls.n	80192b8 <HAL_ETH_Transmit_IT+0x64>
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192b2:	1f1a      	subs	r2, r3, #4
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	681a      	ldr	r2, [r3, #0]
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	3106      	adds	r1, #6
 80192c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80192c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192cc:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 80192d0:	f3bf 8f4f 	dsb	sy
}
 80192d4:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80192de:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 80192e2:	2300      	movs	r3, #0
 80192e4:	e000      	b.n	80192e8 <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 80192e6:	2301      	movs	r3, #1
            }
        }
 80192e8:	4618      	mov	r0, r3
 80192ea:	3708      	adds	r7, #8
 80192ec:	46bd      	mov	sp, r7
 80192ee:	bd80      	pop	{r7, pc}

080192f0 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b08a      	sub	sp, #40	@ 0x28
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	3330      	adds	r3, #48	@ 0x30
 80192fc:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 80192fe:	69bb      	ldr	r3, [r7, #24]
 8019300:	691b      	ldr	r3, [r3, #16]
 8019302:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019304:	69bb      	ldr	r3, [r7, #24]
 8019306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801930c:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 801930e:	2300      	movs	r3, #0
 8019310:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8019312:	2300      	movs	r3, #0
 8019314:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 8019316:	2300      	movs	r3, #0
 8019318:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801931a:	e055      	b.n	80193c8 <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 801931c:	697b      	ldr	r3, [r7, #20]
 801931e:	68db      	ldr	r3, [r3, #12]
 8019320:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 8019322:	6a3b      	ldr	r3, [r7, #32]
 8019324:	3301      	adds	r3, #1
 8019326:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801932e:	2b00      	cmp	r3, #0
 8019330:	d006      	beq.n	8019340 <HAL_ETH_IsRxDataAvailable+0x50>
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019338:	2b00      	cmp	r3, #0
 801933a:	d001      	beq.n	8019340 <HAL_ETH_IsRxDataAvailable+0x50>
 801933c:	2301      	movs	r3, #1
 801933e:	e000      	b.n	8019342 <HAL_ETH_IsRxDataAvailable+0x52>
 8019340:	2300      	movs	r3, #0
 8019342:	2b00      	cmp	r3, #0
 8019344:	d104      	bne.n	8019350 <HAL_ETH_IsRxDataAvailable+0x60>
 8019346:	f240 4195 	movw	r1, #1173	@ 0x495
 801934a:	482b      	ldr	r0, [pc, #172]	@ (80193f8 <HAL_ETH_IsRxDataAvailable+0x108>)
 801934c:	f7e8 fb16 	bl	800197c <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019356:	2b00      	cmp	r3, #0
 8019358:	d036      	beq.n	80193c8 <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 801935a:	693b      	ldr	r3, [r7, #16]
 801935c:	3301      	adds	r3, #1
 801935e:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 8019360:	693b      	ldr	r3, [r7, #16]
 8019362:	2b01      	cmp	r3, #1
 8019364:	d101      	bne.n	801936a <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 8019366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019368:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 801936a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801936c:	3301      	adds	r3, #1
 801936e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019372:	2b03      	cmp	r3, #3
 8019374:	d902      	bls.n	801937c <HAL_ETH_IsRxDataAvailable+0x8c>
 8019376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019378:	3b04      	subs	r3, #4
 801937a:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 801937c:	69bb      	ldr	r3, [r7, #24]
 801937e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019384:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 8019386:	697b      	ldr	r3, [r7, #20]
 8019388:	68db      	ldr	r3, [r3, #12]
 801938a:	2b00      	cmp	r3, #0
 801938c:	db11      	blt.n	80193b2 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 801938e:	697b      	ldr	r3, [r7, #20]
 8019390:	68db      	ldr	r3, [r3, #12]
 8019392:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8019396:	2b00      	cmp	r3, #0
 8019398:	d00b      	beq.n	80193b2 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 801939a:	69bb      	ldr	r3, [r7, #24]
 801939c:	2201      	movs	r2, #1
 801939e:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 80193a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193a2:	3301      	adds	r3, #1
 80193a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80193a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193a8:	2b03      	cmp	r3, #3
 80193aa:	d902      	bls.n	80193b2 <HAL_ETH_IsRxDataAvailable+0xc2>
 80193ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ae:	3b04      	subs	r3, #4
 80193b0:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 80193b2:	69bb      	ldr	r3, [r7, #24]
 80193b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80193b6:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 80193b8:	69bb      	ldr	r3, [r7, #24]
 80193ba:	69fa      	ldr	r2, [r7, #28]
 80193bc:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 80193be:	69bb      	ldr	r3, [r7, #24]
 80193c0:	693a      	ldr	r2, [r7, #16]
 80193c2:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 80193c4:	2301      	movs	r3, #1
 80193c6:	e012      	b.n	80193ee <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 80193c8:	697b      	ldr	r3, [r7, #20]
 80193ca:	68db      	ldr	r3, [r3, #12]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	db02      	blt.n	80193d6 <HAL_ETH_IsRxDataAvailable+0xe6>
 80193d0:	6a3b      	ldr	r3, [r7, #32]
 80193d2:	2b03      	cmp	r3, #3
 80193d4:	d9a2      	bls.n	801931c <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 80193d6:	693b      	ldr	r3, [r7, #16]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d004      	beq.n	80193e6 <HAL_ETH_IsRxDataAvailable+0xf6>
 80193dc:	f240 41db 	movw	r1, #1243	@ 0x4db
 80193e0:	4805      	ldr	r0, [pc, #20]	@ (80193f8 <HAL_ETH_IsRxDataAvailable+0x108>)
 80193e2:	f7e8 facb 	bl	800197c <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 80193e6:	69bb      	ldr	r3, [r7, #24]
 80193e8:	2200      	movs	r2, #0
 80193ea:	619a      	str	r2, [r3, #24]

            return 0;
 80193ec:	2300      	movs	r3, #0
        }
 80193ee:	4618      	mov	r0, r3
 80193f0:	3728      	adds	r7, #40	@ 0x28
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}
 80193f6:	bf00      	nop
 80193f8:	08027bfc 	.word	0x08027bfc

080193fc <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b086      	sub	sp, #24
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
 8019404:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	3330      	adds	r3, #48	@ 0x30
 801940a:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 801940c:	683b      	ldr	r3, [r7, #0]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d104      	bne.n	801941c <HAL_ETH_GetRxData+0x20>
 8019412:	f240 511f 	movw	r1, #1311	@ 0x51f
 8019416:	481c      	ldr	r0, [pc, #112]	@ (8019488 <HAL_ETH_GetRxData+0x8c>)
 8019418:	f7e8 fab0 	bl	800197c <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 801941c:	6878      	ldr	r0, [r7, #4]
 801941e:	f7ff ff67 	bl	80192f0 <HAL_ETH_IsRxDataAvailable>
 8019422:	4603      	mov	r3, r0
 8019424:	2b00      	cmp	r3, #0
 8019426:	d101      	bne.n	801942c <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 8019428:	2300      	movs	r3, #0
 801942a:	e028      	b.n	801947e <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 801942c:	697b      	ldr	r3, [r7, #20]
 801942e:	695b      	ldr	r3, [r3, #20]
 8019430:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019432:	697b      	ldr	r3, [r7, #20]
 8019434:	693a      	ldr	r2, [r7, #16]
 8019436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801943a:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 801943c:	697b      	ldr	r3, [r7, #20]
 801943e:	699b      	ldr	r3, [r3, #24]
 8019440:	2b01      	cmp	r3, #1
 8019442:	d004      	beq.n	801944e <HAL_ETH_GetRxData+0x52>
 8019444:	f240 512a 	movw	r1, #1322	@ 0x52a
 8019448:	480f      	ldr	r0, [pc, #60]	@ (8019488 <HAL_ETH_GetRxData+0x8c>)
 801944a:	f7e8 fa97 	bl	800197c <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	68db      	ldr	r3, [r3, #12]
 8019452:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8019456:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	691b      	ldr	r3, [r3, #16]
 801945c:	461a      	mov	r2, r3
 801945e:	683b      	ldr	r3, [r7, #0]
 8019460:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 8019462:	683b      	ldr	r3, [r7, #0]
 8019464:	68ba      	ldr	r2, [r7, #8]
 8019466:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	695b      	ldr	r3, [r3, #20]
 801946c:	68ba      	ldr	r2, [r7, #8]
 801946e:	429a      	cmp	r2, r3
 8019470:	d904      	bls.n	801947c <HAL_ETH_GetRxData+0x80>
 8019472:	f240 5133 	movw	r1, #1331	@ 0x533
 8019476:	4804      	ldr	r0, [pc, #16]	@ (8019488 <HAL_ETH_GetRxData+0x8c>)
 8019478:	f7e8 fa80 	bl	800197c <vAssertCalled>

            return packet_length;
 801947c:	68bb      	ldr	r3, [r7, #8]
        }
 801947e:	4618      	mov	r0, r3
 8019480:	3718      	adds	r7, #24
 8019482:	46bd      	mov	sp, r7
 8019484:	bd80      	pop	{r7, pc}
 8019486:	bf00      	nop
 8019488:	08027bfc 	.word	0x08027bfc

0801948c <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 801948c:	b480      	push	{r7}
 801948e:	b08b      	sub	sp, #44	@ 0x2c
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
 8019494:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	3330      	adds	r3, #48	@ 0x30
 801949a:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	695b      	ldr	r3, [r3, #20]
 80194a0:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80194a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80194aa:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	699b      	ldr	r3, [r3, #24]
 80194b0:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	699b      	ldr	r3, [r3, #24]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d101      	bne.n	80194be <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 80194ba:	2301      	movs	r3, #1
 80194bc:	e057      	b.n	801956e <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	69db      	ldr	r3, [r3, #28]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d002      	beq.n	80194cc <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 80194c6:	69fb      	ldr	r3, [r7, #28]
 80194c8:	3301      	adds	r3, #1
 80194ca:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 80194cc:	2300      	movs	r3, #0
 80194ce:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 80194d0:	683b      	ldr	r3, [r7, #0]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d005      	beq.n	80194e2 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 80194d6:	683b      	ldr	r3, [r7, #0]
 80194d8:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 80194da:	683a      	ldr	r2, [r7, #0]
 80194dc:	6a3b      	ldr	r3, [r7, #32]
 80194de:	611a      	str	r2, [r3, #16]
 80194e0:	e002      	b.n	80194e8 <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 80194e2:	6a3b      	ldr	r3, [r7, #32]
 80194e4:	691b      	ldr	r3, [r3, #16]
 80194e6:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 80194e8:	693a      	ldr	r2, [r7, #16]
 80194ea:	6a3b      	ldr	r3, [r7, #32]
 80194ec:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 80194ee:	6a3b      	ldr	r3, [r7, #32]
 80194f0:	68db      	ldr	r3, [r3, #12]
 80194f2:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 80194f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80194f8:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	6a1b      	ldr	r3, [r3, #32]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d003      	beq.n	801950a <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8019502:	697b      	ldr	r3, [r7, #20]
 8019504:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8019508:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 801950a:	697b      	ldr	r3, [r7, #20]
 801950c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019510:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8019512:	6a3b      	ldr	r3, [r7, #32]
 8019514:	697a      	ldr	r2, [r7, #20]
 8019516:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8019518:	f3bf 8f4f 	dsb	sy
}
 801951c:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 801951e:	6a3b      	ldr	r3, [r7, #32]
 8019520:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8019522:	69fb      	ldr	r3, [r7, #28]
 8019524:	3b01      	subs	r3, #1
 8019526:	69ba      	ldr	r2, [r7, #24]
 8019528:	429a      	cmp	r2, r3
 801952a:	d211      	bcs.n	8019550 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 801952c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801952e:	3301      	adds	r3, #1
 8019530:	627b      	str	r3, [r7, #36]	@ 0x24
 8019532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019534:	2b03      	cmp	r3, #3
 8019536:	d902      	bls.n	801953e <HAL_ETH_BuildRxDescriptors+0xb2>
 8019538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801953a:	3b04      	subs	r3, #4
 801953c:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019546:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8019548:	69bb      	ldr	r3, [r7, #24]
 801954a:	3301      	adds	r3, #1
 801954c:	61bb      	str	r3, [r7, #24]
            {
 801954e:	e7bf      	b.n	80194d0 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 8019550:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	681a      	ldr	r2, [r3, #0]
 8019556:	6a3b      	ldr	r3, [r7, #32]
 8019558:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801955c:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	2200      	movs	r2, #0
 8019564:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	2200      	movs	r2, #0
 801956a:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 801956c:	2300      	movs	r3, #0
        }
 801956e:	4618      	mov	r0, r3
 8019570:	372c      	adds	r7, #44	@ 0x2c
 8019572:	46bd      	mov	sp, r7
 8019574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019578:	4770      	bx	lr
	...

0801957c <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 801957c:	b580      	push	{r7, lr}
 801957e:	b082      	sub	sp, #8
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801958c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019594:	2b40      	cmp	r3, #64	@ 0x40
 8019596:	d115      	bne.n	80195c4 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80195a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80195a8:	2b40      	cmp	r3, #64	@ 0x40
 80195aa:	d10b      	bne.n	80195c4 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 80195ac:	6878      	ldr	r0, [r7, #4]
 80195ae:	f7ff fafc 	bl	8018baa <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195ba:	461a      	mov	r2, r3
 80195bc:	f248 0340 	movw	r3, #32832	@ 0x8040
 80195c0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195cc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80195d0:	f003 0301 	and.w	r3, r3, #1
 80195d4:	2b01      	cmp	r3, #1
 80195d6:	d115      	bne.n	8019604 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80195e4:	f003 0301 	and.w	r3, r3, #1
 80195e8:	2b01      	cmp	r3, #1
 80195ea:	d10b      	bne.n	8019604 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 80195ec:	6878      	ldr	r0, [r7, #4]
 80195ee:	f7ff fad1 	bl	8018b94 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195fa:	461a      	mov	r2, r3
 80195fc:	f248 0301 	movw	r3, #32769	@ 0x8001
 8019600:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801960c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019614:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019618:	d14f      	bne.n	80196ba <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019622:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801962a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801962e:	d144      	bne.n	80196ba <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019634:	f043 0208 	orr.w	r2, r3, #8
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019644:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801964c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019650:	d11d      	bne.n	801968e <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801965a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 801965e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8019662:	4013      	ands	r3, r2
 8019664:	687a      	ldr	r2, [r7, #4]
 8019666:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019670:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019674:	687a      	ldr	r2, [r7, #4]
 8019676:	6812      	ldr	r2, [r2, #0]
 8019678:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 801967c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019680:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 8019684:	21e0      	movs	r1, #224	@ 0xe0
 8019686:	6878      	ldr	r0, [r7, #4]
 8019688:	f7ff fbba 	bl	8018e00 <set_error_state>
 801968c:	e012      	b.n	80196b4 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019696:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801969a:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80196aa:	461a      	mov	r2, r3
 80196ac:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 80196b0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 80196b4:	6878      	ldr	r0, [r7, #4]
 80196b6:	f7ff fa83 	bl	8018bc0 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80196c2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80196c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80196ca:	d10f      	bne.n	80196ec <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 80196d8:	21e0      	movs	r1, #224	@ 0xe0
 80196da:	6878      	ldr	r0, [r7, #4]
 80196dc:	f7ff fb90 	bl	8018e00 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 80196e0:	6878      	ldr	r0, [r7, #4]
 80196e2:	f000 f843 	bl	801976c <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	2200      	movs	r2, #0
 80196ea:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80196f4:	f003 0310 	and.w	r3, r3, #16
 80196f8:	2b10      	cmp	r3, #16
 80196fa:	d10d      	bne.n	8019718 <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019704:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 801970c:	6878      	ldr	r0, [r7, #4]
 801970e:	f000 f837 	bl	8019780 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	2200      	movs	r2, #0
 8019716:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019720:	f003 0320 	and.w	r3, r3, #32
 8019724:	2b20      	cmp	r3, #32
 8019726:	d10d      	bne.n	8019744 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019730:	f003 020f 	and.w	r2, r3, #15
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 8019738:	6878      	ldr	r0, [r7, #4]
 801973a:	f000 f82b 	bl	8019794 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	2200      	movs	r2, #0
 8019742:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8019744:	4b08      	ldr	r3, [pc, #32]	@ (8019768 <HAL_ETH_IRQHandler+0x1ec>)
 8019746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801974c:	2b00      	cmp	r3, #0
 801974e:	d006      	beq.n	801975e <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8019750:	4b05      	ldr	r3, [pc, #20]	@ (8019768 <HAL_ETH_IRQHandler+0x1ec>)
 8019752:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8019756:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 8019758:	6878      	ldr	r0, [r7, #4]
 801975a:	f000 f825 	bl	80197a8 <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 801975e:	bf00      	nop
 8019760:	3708      	adds	r7, #8
 8019762:	46bd      	mov	sp, r7
 8019764:	bd80      	pop	{r7, pc}
 8019766:	bf00      	nop
 8019768:	58000080 	.word	0x58000080

0801976c <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 801976c:	b480      	push	{r7}
 801976e:	b083      	sub	sp, #12
 8019770:	af00      	add	r7, sp, #0
 8019772:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 8019774:	bf00      	nop
 8019776:	370c      	adds	r7, #12
 8019778:	46bd      	mov	sp, r7
 801977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977e:	4770      	bx	lr

08019780 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8019780:	b480      	push	{r7}
 8019782:	b083      	sub	sp, #12
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 8019788:	bf00      	nop
 801978a:	370c      	adds	r7, #12
 801978c:	46bd      	mov	sp, r7
 801978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019792:	4770      	bx	lr

08019794 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 8019794:	b480      	push	{r7}
 8019796:	b083      	sub	sp, #12
 8019798:	af00      	add	r7, sp, #0
 801979a:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 801979c:	bf00      	nop
 801979e:	370c      	adds	r7, #12
 80197a0:	46bd      	mov	sp, r7
 80197a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a6:	4770      	bx	lr

080197a8 <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 80197a8:	b480      	push	{r7}
 80197aa:	b083      	sub	sp, #12
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 80197b0:	bf00      	nop
 80197b2:	370c      	adds	r7, #12
 80197b4:	46bd      	mov	sp, r7
 80197b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ba:	4770      	bx	lr

080197bc <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 80197bc:	b580      	push	{r7, lr}
 80197be:	b086      	sub	sp, #24
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	60f8      	str	r0, [r7, #12]
 80197c4:	60b9      	str	r1, [r7, #8]
 80197c6:	607a      	str	r2, [r7, #4]
 80197c8:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80197d2:	f003 0301 	and.w	r3, r3, #1
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d001      	beq.n	80197de <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 80197da:	2301      	movs	r3, #1
 80197dc:	e03e      	b.n	801985c <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80197e6:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80197ee:	68bb      	ldr	r3, [r7, #8]
 80197f0:	055b      	lsls	r3, r3, #21
 80197f2:	4313      	orrs	r3, r2
 80197f4:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 80197f6:	697b      	ldr	r3, [r7, #20]
 80197f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	041b      	lsls	r3, r3, #16
 8019800:	4313      	orrs	r3, r2
 8019802:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8019804:	697b      	ldr	r3, [r7, #20]
 8019806:	f043 030c 	orr.w	r3, r3, #12
 801980a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 801980c:	697b      	ldr	r3, [r7, #20]
 801980e:	f043 0301 	orr.w	r3, r3, #1
 8019812:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8019814:	68fb      	ldr	r3, [r7, #12]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	697a      	ldr	r2, [r7, #20]
 801981a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 801981e:	f000 ff01 	bl	801a624 <HAL_GetTick>
 8019822:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019824:	e009      	b.n	801983a <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8019826:	f000 fefd 	bl	801a624 <HAL_GetTick>
 801982a:	4602      	mov	r2, r0
 801982c:	693b      	ldr	r3, [r7, #16]
 801982e:	1ad3      	subs	r3, r2, r3
 8019830:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019834:	d901      	bls.n	801983a <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 8019836:	2301      	movs	r3, #1
 8019838:	e010      	b.n	801985c <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019842:	f003 0301 	and.w	r3, r3, #1
 8019846:	2b00      	cmp	r3, #0
 8019848:	d1ed      	bne.n	8019826 <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019852:	b29b      	uxth	r3, r3
 8019854:	461a      	mov	r2, r3
 8019856:	683b      	ldr	r3, [r7, #0]
 8019858:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 801985a:	2300      	movs	r3, #0
        }
 801985c:	4618      	mov	r0, r3
 801985e:	3718      	adds	r7, #24
 8019860:	46bd      	mov	sp, r7
 8019862:	bd80      	pop	{r7, pc}

08019864 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8019864:	b580      	push	{r7, lr}
 8019866:	b086      	sub	sp, #24
 8019868:	af00      	add	r7, sp, #0
 801986a:	60f8      	str	r0, [r7, #12]
 801986c:	60b9      	str	r1, [r7, #8]
 801986e:	607a      	str	r2, [r7, #4]
 8019870:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801987a:	f003 0301 	and.w	r3, r3, #1
 801987e:	2b00      	cmp	r3, #0
 8019880:	d001      	beq.n	8019886 <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8019882:	2301      	movs	r3, #1
 8019884:	e03c      	b.n	8019900 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801988e:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8019890:	697b      	ldr	r3, [r7, #20]
 8019892:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8019896:	68bb      	ldr	r3, [r7, #8]
 8019898:	055b      	lsls	r3, r3, #21
 801989a:	4313      	orrs	r3, r2
 801989c:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 801989e:	697b      	ldr	r3, [r7, #20]
 80198a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	041b      	lsls	r3, r3, #16
 80198a8:	4313      	orrs	r3, r2
 80198aa:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 80198ac:	697b      	ldr	r3, [r7, #20]
 80198ae:	f023 030c 	bic.w	r3, r3, #12
 80198b2:	f043 0304 	orr.w	r3, r3, #4
 80198b6:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 80198b8:	697b      	ldr	r3, [r7, #20]
 80198ba:	f043 0301 	orr.w	r3, r3, #1
 80198be:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 80198c0:	683b      	ldr	r3, [r7, #0]
 80198c2:	b29a      	uxth	r2, r3
 80198c4:	4b10      	ldr	r3, [pc, #64]	@ (8019908 <HAL_ETH_WritePHYRegister+0xa4>)
 80198c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 80198ca:	4a0f      	ldr	r2, [pc, #60]	@ (8019908 <HAL_ETH_WritePHYRegister+0xa4>)
 80198cc:	697b      	ldr	r3, [r7, #20]
 80198ce:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 80198d2:	f000 fea7 	bl	801a624 <HAL_GetTick>
 80198d6:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80198d8:	e009      	b.n	80198ee <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 80198da:	f000 fea3 	bl	801a624 <HAL_GetTick>
 80198de:	4602      	mov	r2, r0
 80198e0:	693b      	ldr	r3, [r7, #16]
 80198e2:	1ad3      	subs	r3, r2, r3
 80198e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80198e8:	d901      	bls.n	80198ee <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 80198ea:	2301      	movs	r3, #1
 80198ec:	e008      	b.n	8019900 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80198f6:	f003 0301 	and.w	r3, r3, #1
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d1ed      	bne.n	80198da <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 80198fe:	2300      	movs	r3, #0
        }
 8019900:	4618      	mov	r0, r3
 8019902:	3718      	adds	r7, #24
 8019904:	46bd      	mov	sp, r7
 8019906:	bd80      	pop	{r7, pc}
 8019908:	40028000 	.word	0x40028000

0801990c <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 801990c:	b480      	push	{r7}
 801990e:	b083      	sub	sp, #12
 8019910:	af00      	add	r7, sp, #0
 8019912:	6078      	str	r0, [r7, #4]
 8019914:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019916:	683b      	ldr	r3, [r7, #0]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d101      	bne.n	8019920 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 801991c:	2301      	movs	r3, #1
 801991e:	e1c3      	b.n	8019ca8 <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	f003 020c 	and.w	r2, r3, #12
 801992a:	683b      	ldr	r3, [r7, #0]
 801992c:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	f003 0310 	and.w	r3, r3, #16
 8019938:	2b00      	cmp	r3, #0
 801993a:	bf14      	ite	ne
 801993c:	2301      	movne	r3, #1
 801993e:	2300      	moveq	r3, #0
 8019940:	b2db      	uxtb	r3, r3
 8019942:	461a      	mov	r2, r3
 8019944:	683b      	ldr	r3, [r7, #0]
 8019946:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019954:	683b      	ldr	r3, [r7, #0]
 8019956:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019962:	2b00      	cmp	r3, #0
 8019964:	bf0c      	ite	eq
 8019966:	2301      	moveq	r3, #1
 8019968:	2300      	movne	r3, #0
 801996a:	b2db      	uxtb	r3, r3
 801996c:	461a      	mov	r2, r3
 801996e:	683b      	ldr	r3, [r7, #0]
 8019970:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801997e:	2b00      	cmp	r3, #0
 8019980:	bf14      	ite	ne
 8019982:	2301      	movne	r3, #1
 8019984:	2300      	moveq	r3, #0
 8019986:	b2db      	uxtb	r3, r3
 8019988:	461a      	mov	r2, r3
 801998a:	683b      	ldr	r3, [r7, #0]
 801998c:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019998:	2b00      	cmp	r3, #0
 801999a:	bf0c      	ite	eq
 801999c:	2301      	moveq	r3, #1
 801999e:	2300      	movne	r3, #0
 80199a0:	b2db      	uxtb	r3, r3
 80199a2:	461a      	mov	r2, r3
 80199a4:	683b      	ldr	r3, [r7, #0]
 80199a6:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	bf14      	ite	ne
 80199b6:	2301      	movne	r3, #1
 80199b8:	2300      	moveq	r3, #0
 80199ba:	b2db      	uxtb	r3, r3
 80199bc:	461a      	mov	r2, r3
 80199be:	683b      	ldr	r3, [r7, #0]
 80199c0:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	bf14      	ite	ne
 80199d0:	2301      	movne	r3, #1
 80199d2:	2300      	moveq	r3, #0
 80199d4:	b2db      	uxtb	r3, r3
 80199d6:	461a      	mov	r2, r3
 80199d8:	683b      	ldr	r3, [r7, #0]
 80199da:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80199e6:	683b      	ldr	r3, [r7, #0]
 80199e8:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80199f4:	683b      	ldr	r3, [r7, #0]
 80199f6:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	bf14      	ite	ne
 8019a06:	2301      	movne	r3, #1
 8019a08:	2300      	moveq	r3, #0
 8019a0a:	b2db      	uxtb	r3, r3
 8019a0c:	461a      	mov	r2, r3
 8019a0e:	683b      	ldr	r3, [r7, #0]
 8019a10:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	bf0c      	ite	eq
 8019a20:	2301      	moveq	r3, #1
 8019a22:	2300      	movne	r3, #0
 8019a24:	b2db      	uxtb	r3, r3
 8019a26:	461a      	mov	r2, r3
 8019a28:	683b      	ldr	r3, [r7, #0]
 8019a2a:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	bf0c      	ite	eq
 8019a3a:	2301      	moveq	r3, #1
 8019a3c:	2300      	movne	r3, #0
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	461a      	mov	r2, r3
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	bf14      	ite	ne
 8019a54:	2301      	movne	r3, #1
 8019a56:	2300      	moveq	r3, #0
 8019a58:	b2db      	uxtb	r3, r3
 8019a5a:	461a      	mov	r2, r3
 8019a5c:	683b      	ldr	r3, [r7, #0]
 8019a5e:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	bf14      	ite	ne
 8019a6e:	2301      	movne	r3, #1
 8019a70:	2300      	moveq	r3, #0
 8019a72:	b2db      	uxtb	r3, r3
 8019a74:	461a      	mov	r2, r3
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	bf14      	ite	ne
 8019a88:	2301      	movne	r3, #1
 8019a8a:	2300      	moveq	r3, #0
 8019a8c:	b2db      	uxtb	r3, r3
 8019a8e:	461a      	mov	r2, r3
 8019a90:	683b      	ldr	r3, [r7, #0]
 8019a92:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	bf14      	ite	ne
 8019aa2:	2301      	movne	r3, #1
 8019aa4:	2300      	moveq	r3, #0
 8019aa6:	b2db      	uxtb	r3, r3
 8019aa8:	461a      	mov	r2, r3
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8019ab8:	683b      	ldr	r3, [r7, #0]
 8019aba:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	bf14      	ite	ne
 8019aca:	2301      	movne	r3, #1
 8019acc:	2300      	moveq	r3, #0
 8019ace:	b2db      	uxtb	r3, r3
 8019ad0:	461a      	mov	r2, r3
 8019ad2:	683b      	ldr	r3, [r7, #0]
 8019ad4:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8019ae0:	683b      	ldr	r3, [r7, #0]
 8019ae2:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	685b      	ldr	r3, [r3, #4]
 8019aea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8019aee:	683b      	ldr	r3, [r7, #0]
 8019af0:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	685b      	ldr	r3, [r3, #4]
 8019af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	bf0c      	ite	eq
 8019b00:	2301      	moveq	r3, #1
 8019b02:	2300      	movne	r3, #0
 8019b04:	b2db      	uxtb	r3, r3
 8019b06:	461a      	mov	r2, r3
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	685b      	ldr	r3, [r3, #4]
 8019b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	bf14      	ite	ne
 8019b1c:	2301      	movne	r3, #1
 8019b1e:	2300      	moveq	r3, #0
 8019b20:	b2db      	uxtb	r3, r3
 8019b22:	461a      	mov	r2, r3
 8019b24:	683b      	ldr	r3, [r7, #0]
 8019b26:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	685b      	ldr	r3, [r3, #4]
 8019b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	bf14      	ite	ne
 8019b38:	2301      	movne	r3, #1
 8019b3a:	2300      	moveq	r3, #0
 8019b3c:	b2db      	uxtb	r3, r3
 8019b3e:	461a      	mov	r2, r3
 8019b40:	683b      	ldr	r3, [r7, #0]
 8019b42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	685b      	ldr	r3, [r3, #4]
 8019b4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	bf14      	ite	ne
 8019b54:	2301      	movne	r3, #1
 8019b56:	2300      	moveq	r3, #0
 8019b58:	b2db      	uxtb	r3, r3
 8019b5a:	461a      	mov	r2, r3
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	685b      	ldr	r3, [r3, #4]
 8019b68:	0e5b      	lsrs	r3, r3, #25
 8019b6a:	f003 021f 	and.w	r2, r3, #31
 8019b6e:	683b      	ldr	r3, [r7, #0]
 8019b70:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	68db      	ldr	r3, [r3, #12]
 8019b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	bf14      	ite	ne
 8019b80:	2301      	movne	r3, #1
 8019b82:	2300      	moveq	r3, #0
 8019b84:	b2db      	uxtb	r3, r3
 8019b86:	461a      	mov	r2, r3
 8019b88:	683b      	ldr	r3, [r7, #0]
 8019b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	68db      	ldr	r3, [r3, #12]
 8019b94:	f003 020f 	and.w	r2, r3, #15
 8019b98:	683b      	ldr	r3, [r7, #0]
 8019b9a:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ba2:	f003 0302 	and.w	r3, r3, #2
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	bf14      	ite	ne
 8019baa:	2301      	movne	r3, #1
 8019bac:	2300      	moveq	r3, #0
 8019bae:	b2db      	uxtb	r3, r3
 8019bb0:	461a      	mov	r2, r3
 8019bb2:	683b      	ldr	r3, [r7, #0]
 8019bb4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	bf0c      	ite	eq
 8019bc6:	2301      	moveq	r3, #1
 8019bc8:	2300      	movne	r3, #0
 8019bca:	b2db      	uxtb	r3, r3
 8019bcc:	461a      	mov	r2, r3
 8019bce:	683b      	ldr	r3, [r7, #0]
 8019bd0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019bda:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8019bde:	683b      	ldr	r3, [r7, #0]
 8019be0:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019be8:	0c1b      	lsrs	r3, r3, #16
 8019bea:	b29a      	uxth	r2, r3
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019bf8:	f003 0301 	and.w	r3, r3, #1
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	bf14      	ite	ne
 8019c00:	2301      	movne	r3, #1
 8019c02:	2300      	moveq	r3, #0
 8019c04:	b2db      	uxtb	r3, r3
 8019c06:	461a      	mov	r2, r3
 8019c08:	683b      	ldr	r3, [r7, #0]
 8019c0a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019c16:	f003 0302 	and.w	r3, r3, #2
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	bf14      	ite	ne
 8019c1e:	2301      	movne	r3, #1
 8019c20:	2300      	moveq	r3, #0
 8019c22:	b2db      	uxtb	r3, r3
 8019c24:	461a      	mov	r2, r3
 8019c26:	683b      	ldr	r3, [r7, #0]
 8019c28:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019c34:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019c44:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8019c48:	683b      	ldr	r3, [r7, #0]
 8019c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019c54:	f003 0308 	and.w	r3, r3, #8
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	bf14      	ite	ne
 8019c5c:	2301      	movne	r3, #1
 8019c5e:	2300      	moveq	r3, #0
 8019c60:	b2db      	uxtb	r3, r3
 8019c62:	461a      	mov	r2, r3
 8019c64:	683b      	ldr	r3, [r7, #0]
 8019c66:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019c72:	f003 0310 	and.w	r3, r3, #16
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	bf14      	ite	ne
 8019c7a:	2301      	movne	r3, #1
 8019c7c:	2300      	moveq	r3, #0
 8019c7e:	b2db      	uxtb	r3, r3
 8019c80:	461a      	mov	r2, r3
 8019c82:	683b      	ldr	r3, [r7, #0]
 8019c84:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	bf0c      	ite	eq
 8019c98:	2301      	moveq	r3, #1
 8019c9a:	2300      	movne	r3, #0
 8019c9c:	b2db      	uxtb	r3, r3
 8019c9e:	461a      	mov	r2, r3
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 8019ca6:	2300      	movs	r3, #0
        }
 8019ca8:	4618      	mov	r0, r3
 8019caa:	370c      	adds	r7, #12
 8019cac:	46bd      	mov	sp, r7
 8019cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb2:	4770      	bx	lr

08019cb4 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b082      	sub	sp, #8
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	6078      	str	r0, [r7, #4]
 8019cbc:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019cbe:	683b      	ldr	r3, [r7, #0]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d101      	bne.n	8019cc8 <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019cc4:	2301      	movs	r3, #1
 8019cc6:	e00a      	b.n	8019cde <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019ccc:	2b10      	cmp	r3, #16
 8019cce:	d105      	bne.n	8019cdc <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8019cd0:	6839      	ldr	r1, [r7, #0]
 8019cd2:	6878      	ldr	r0, [r7, #4]
 8019cd4:	f000 f808 	bl	8019ce8 <ETH_SetMACConfig>

                return HAL_OK;
 8019cd8:	2300      	movs	r3, #0
 8019cda:	e000      	b.n	8019cde <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8019cdc:	2301      	movs	r3, #1
            }
        }
 8019cde:	4618      	mov	r0, r3
 8019ce0:	3708      	adds	r7, #8
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	bd80      	pop	{r7, pc}
	...

08019ce8 <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 8019ce8:	b480      	push	{r7}
 8019cea:	b085      	sub	sp, #20
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	6078      	str	r0, [r7, #4]
 8019cf0:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 8019cf2:	683b      	ldr	r3, [r7, #0]
 8019cf4:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 8019cfa:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8019cfc:	683b      	ldr	r3, [r7, #0]
 8019cfe:	791b      	ldrb	r3, [r3, #4]
 8019d00:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 8019d02:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019d04:	683b      	ldr	r3, [r7, #0]
 8019d06:	7b1b      	ldrb	r3, [r3, #12]
 8019d08:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8019d0a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8019d0c:	683b      	ldr	r3, [r7, #0]
 8019d0e:	7b5b      	ldrb	r3, [r3, #13]
 8019d10:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019d12:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019d14:	683b      	ldr	r3, [r7, #0]
 8019d16:	7b9b      	ldrb	r3, [r3, #14]
 8019d18:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8019d1a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	7bdb      	ldrb	r3, [r3, #15]
 8019d20:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019d22:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8019d24:	683a      	ldr	r2, [r7, #0]
 8019d26:	7c12      	ldrb	r2, [r2, #16]
 8019d28:	2a00      	cmp	r2, #0
 8019d2a:	d102      	bne.n	8019d32 <ETH_SetMACConfig+0x4a>
 8019d2c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8019d30:	e000      	b.n	8019d34 <ETH_SetMACConfig+0x4c>
 8019d32:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019d34:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8019d36:	683a      	ldr	r2, [r7, #0]
 8019d38:	7c52      	ldrb	r2, [r2, #17]
 8019d3a:	2a00      	cmp	r2, #0
 8019d3c:	d102      	bne.n	8019d44 <ETH_SetMACConfig+0x5c>
 8019d3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8019d42:	e000      	b.n	8019d46 <ETH_SetMACConfig+0x5e>
 8019d44:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8019d46:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8019d48:	683b      	ldr	r3, [r7, #0]
 8019d4a:	7c9b      	ldrb	r3, [r3, #18]
 8019d4c:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8019d4e:	431a      	orrs	r2, r3
                          macconf->Speed |
 8019d50:	683b      	ldr	r3, [r7, #0]
 8019d52:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8019d54:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 8019d5a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8019d5c:	683b      	ldr	r3, [r7, #0]
 8019d5e:	7f1b      	ldrb	r3, [r3, #28]
 8019d60:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 8019d62:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019d64:	683b      	ldr	r3, [r7, #0]
 8019d66:	7f5b      	ldrb	r3, [r3, #29]
 8019d68:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8019d6a:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019d6c:	683a      	ldr	r2, [r7, #0]
 8019d6e:	7f92      	ldrb	r2, [r2, #30]
 8019d70:	2a00      	cmp	r2, #0
 8019d72:	d102      	bne.n	8019d7a <ETH_SetMACConfig+0x92>
 8019d74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019d78:	e000      	b.n	8019d7c <ETH_SetMACConfig+0x94>
 8019d7a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019d7c:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	7fdb      	ldrb	r3, [r3, #31]
 8019d82:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019d84:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8019d86:	683a      	ldr	r2, [r7, #0]
 8019d88:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019d8c:	2a00      	cmp	r2, #0
 8019d8e:	d102      	bne.n	8019d96 <ETH_SetMACConfig+0xae>
 8019d90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019d94:	e000      	b.n	8019d98 <ETH_SetMACConfig+0xb0>
 8019d96:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8019d98:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8019d9a:	683b      	ldr	r3, [r7, #0]
 8019d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8019d9e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8019da0:	683b      	ldr	r3, [r7, #0]
 8019da2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019da6:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 8019da8:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 8019daa:	683b      	ldr	r3, [r7, #0]
 8019dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8019dae:	4313      	orrs	r3, r2
 8019db0:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	681a      	ldr	r2, [r3, #0]
 8019db8:	4b56      	ldr	r3, [pc, #344]	@ (8019f14 <ETH_SetMACConfig+0x22c>)
 8019dba:	4013      	ands	r3, r2
 8019dbc:	687a      	ldr	r2, [r7, #4]
 8019dbe:	6812      	ldr	r2, [r2, #0]
 8019dc0:	68f9      	ldr	r1, [r7, #12]
 8019dc2:	430b      	orrs	r3, r1
 8019dc4:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019dc6:	683b      	ldr	r3, [r7, #0]
 8019dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019dca:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019dcc:	683b      	ldr	r3, [r7, #0]
 8019dce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019dd2:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019dd4:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8019dd6:	683b      	ldr	r3, [r7, #0]
 8019dd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019ddc:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019dde:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019de0:	683b      	ldr	r3, [r7, #0]
 8019de2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019de6:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8019de8:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 8019dea:	683a      	ldr	r2, [r7, #0]
 8019dec:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8019df0:	2a00      	cmp	r2, #0
 8019df2:	d102      	bne.n	8019dfa <ETH_SetMACConfig+0x112>
 8019df4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8019df8:	e000      	b.n	8019dfc <ETH_SetMACConfig+0x114>
 8019dfa:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019dfc:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019e02:	4313      	orrs	r3, r2
 8019e04:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	685a      	ldr	r2, [r3, #4]
 8019e0c:	4b42      	ldr	r3, [pc, #264]	@ (8019f18 <ETH_SetMACConfig+0x230>)
 8019e0e:	4013      	ands	r3, r2
 8019e10:	687a      	ldr	r2, [r7, #4]
 8019e12:	6812      	ldr	r2, [r2, #0]
 8019e14:	68f9      	ldr	r1, [r7, #12]
 8019e16:	430b      	orrs	r3, r1
 8019e18:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 8019e1a:	683b      	ldr	r3, [r7, #0]
 8019e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019e20:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 8019e22:	683b      	ldr	r3, [r7, #0]
 8019e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 8019e26:	4313      	orrs	r3, r2
 8019e28:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	68da      	ldr	r2, [r3, #12]
 8019e30:	4b3a      	ldr	r3, [pc, #232]	@ (8019f1c <ETH_SetMACConfig+0x234>)
 8019e32:	4013      	ands	r3, r2
 8019e34:	687a      	ldr	r2, [r7, #4]
 8019e36:	6812      	ldr	r2, [r2, #0]
 8019e38:	68f9      	ldr	r1, [r7, #12]
 8019e3a:	430b      	orrs	r3, r1
 8019e3c:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019e3e:	683b      	ldr	r3, [r7, #0]
 8019e40:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8019e44:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 8019e46:	683b      	ldr	r3, [r7, #0]
 8019e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019e4a:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 8019e4c:	683a      	ldr	r2, [r7, #0]
 8019e4e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8019e52:	2a00      	cmp	r2, #0
 8019e54:	d101      	bne.n	8019e5a <ETH_SetMACConfig+0x172>
 8019e56:	2280      	movs	r2, #128	@ 0x80
 8019e58:	e000      	b.n	8019e5c <ETH_SetMACConfig+0x174>
 8019e5a:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 8019e5c:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 8019e5e:	683b      	ldr	r3, [r7, #0]
 8019e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019e62:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019e64:	4313      	orrs	r3, r2
 8019e66:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019e6e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8019e72:	4013      	ands	r3, r2
 8019e74:	687a      	ldr	r2, [r7, #4]
 8019e76:	6812      	ldr	r2, [r2, #0]
 8019e78:	68f9      	ldr	r1, [r7, #12]
 8019e7a:	430b      	orrs	r3, r1
 8019e7c:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019e7e:	683b      	ldr	r3, [r7, #0]
 8019e80:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019e84:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 8019e86:	683b      	ldr	r3, [r7, #0]
 8019e88:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019e8c:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019e8e:	4313      	orrs	r3, r2
 8019e90:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e9a:	f023 0103 	bic.w	r1, r3, #3
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	68fa      	ldr	r2, [r7, #12]
 8019ea4:	430a      	orrs	r2, r1
 8019ea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019eb2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8019eb6:	683b      	ldr	r3, [r7, #0]
 8019eb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	430a      	orrs	r2, r1
 8019ec0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 8019ec4:	683b      	ldr	r3, [r7, #0]
 8019ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8019ec8:	683a      	ldr	r2, [r7, #0]
 8019eca:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8019ece:	2a00      	cmp	r2, #0
 8019ed0:	d101      	bne.n	8019ed6 <ETH_SetMACConfig+0x1ee>
 8019ed2:	2240      	movs	r2, #64	@ 0x40
 8019ed4:	e000      	b.n	8019ed8 <ETH_SetMACConfig+0x1f0>
 8019ed6:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 8019ed8:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 8019eda:	683b      	ldr	r3, [r7, #0]
 8019edc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8019ee0:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8019ee2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8019ee4:	683b      	ldr	r3, [r7, #0]
 8019ee6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8019eea:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 8019eec:	4313      	orrs	r3, r2
 8019eee:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019ef8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	68fa      	ldr	r2, [r7, #12]
 8019f02:	430a      	orrs	r2, r1
 8019f04:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 8019f08:	bf00      	nop
 8019f0a:	3714      	adds	r7, #20
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f12:	4770      	bx	lr
 8019f14:	00048083 	.word	0x00048083
 8019f18:	c0f88000 	.word	0xc0f88000
 8019f1c:	fffffef0 	.word	0xfffffef0

08019f20 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 8019f20:	b480      	push	{r7}
 8019f22:	b085      	sub	sp, #20
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	6078      	str	r0, [r7, #4]
 8019f28:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019f32:	681a      	ldr	r2, [r3, #0]
 8019f34:	4b38      	ldr	r3, [pc, #224]	@ (801a018 <ETH_SetDMAConfig+0xf8>)
 8019f36:	4013      	ands	r3, r2
 8019f38:	683a      	ldr	r2, [r7, #0]
 8019f3a:	6811      	ldr	r1, [r2, #0]
 8019f3c:	687a      	ldr	r2, [r7, #4]
 8019f3e:	6812      	ldr	r2, [r2, #0]
 8019f40:	430b      	orrs	r3, r1
 8019f42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019f46:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	791b      	ldrb	r3, [r3, #4]
 8019f4c:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8019f52:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 8019f54:	683b      	ldr	r3, [r7, #0]
 8019f56:	7b1b      	ldrb	r3, [r3, #12]
 8019f58:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8019f5a:	4313      	orrs	r3, r2
 8019f5c:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019f66:	685a      	ldr	r2, [r3, #4]
 8019f68:	4b2c      	ldr	r3, [pc, #176]	@ (801a01c <ETH_SetDMAConfig+0xfc>)
 8019f6a:	4013      	ands	r3, r2
 8019f6c:	687a      	ldr	r2, [r7, #4]
 8019f6e:	6812      	ldr	r2, [r2, #0]
 8019f70:	68f9      	ldr	r1, [r7, #12]
 8019f72:	430b      	orrs	r3, r1
 8019f74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019f78:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8019f7a:	683b      	ldr	r3, [r7, #0]
 8019f7c:	7b5b      	ldrb	r3, [r3, #13]
 8019f7e:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 8019f80:	683b      	ldr	r3, [r7, #0]
 8019f82:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8019f84:	4313      	orrs	r3, r2
 8019f86:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019f90:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8019f94:	4b22      	ldr	r3, [pc, #136]	@ (801a020 <ETH_SetDMAConfig+0x100>)
 8019f96:	4013      	ands	r3, r2
 8019f98:	687a      	ldr	r2, [r7, #4]
 8019f9a:	6812      	ldr	r2, [r2, #0]
 8019f9c:	68f9      	ldr	r1, [r7, #12]
 8019f9e:	430b      	orrs	r3, r1
 8019fa0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019fa4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 8019fa8:	683b      	ldr	r3, [r7, #0]
 8019faa:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8019fac:	683b      	ldr	r3, [r7, #0]
 8019fae:	7d1b      	ldrb	r3, [r3, #20]
 8019fb0:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 8019fb2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8019fb4:	683b      	ldr	r3, [r7, #0]
 8019fb6:	7f5b      	ldrb	r3, [r3, #29]
 8019fb8:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 8019fba:	4313      	orrs	r3, r2
 8019fbc:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019fc6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8019fca:	4b16      	ldr	r3, [pc, #88]	@ (801a024 <ETH_SetDMAConfig+0x104>)
 8019fcc:	4013      	ands	r3, r2
 8019fce:	687a      	ldr	r2, [r7, #4]
 8019fd0:	6812      	ldr	r2, [r2, #0]
 8019fd2:	68f9      	ldr	r1, [r7, #12]
 8019fd4:	430b      	orrs	r3, r1
 8019fd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019fda:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	7f1b      	ldrb	r3, [r3, #28]
 8019fe2:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 8019fe4:	683b      	ldr	r3, [r7, #0]
 8019fe6:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8019fe8:	4313      	orrs	r3, r2
 8019fea:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019ff4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8019ff8:	4b0b      	ldr	r3, [pc, #44]	@ (801a028 <ETH_SetDMAConfig+0x108>)
 8019ffa:	4013      	ands	r3, r2
 8019ffc:	687a      	ldr	r2, [r7, #4]
 8019ffe:	6812      	ldr	r2, [r2, #0]
 801a000:	68f9      	ldr	r1, [r7, #12]
 801a002:	430b      	orrs	r3, r1
 801a004:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a008:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 801a00c:	bf00      	nop
 801a00e:	3714      	adds	r7, #20
 801a010:	46bd      	mov	sp, r7
 801a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a016:	4770      	bx	lr
 801a018:	ffff87fd 	.word	0xffff87fd
 801a01c:	ffff2ffe 	.word	0xffff2ffe
 801a020:	fffec000 	.word	0xfffec000
 801a024:	ffc0efef 	.word	0xffc0efef
 801a028:	7fc0ffff 	.word	0x7fc0ffff

0801a02c <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b0a4      	sub	sp, #144	@ 0x90
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 801a034:	2301      	movs	r3, #1
 801a036:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801a03a:	2300      	movs	r3, #0
 801a03c:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 801a03e:	2300      	movs	r3, #0
 801a040:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801a044:	2300      	movs	r3, #0
 801a046:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 801a04a:	2301      	movs	r3, #1
 801a04c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 801a050:	2301      	movs	r3, #1
 801a052:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 801a056:	2301      	movs	r3, #1
 801a058:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 801a05c:	2300      	movs	r3, #0
 801a05e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 801a062:	2301      	movs	r3, #1
 801a064:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801a068:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801a06c:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 801a06e:	2300      	movs	r3, #0
 801a070:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 801a074:	2300      	movs	r3, #0
 801a076:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 801a078:	2300      	movs	r3, #0
 801a07a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 801a07e:	2300      	movs	r3, #0
 801a080:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 801a084:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 801a088:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801a08a:	2300      	movs	r3, #0
 801a08c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 801a090:	2300      	movs	r3, #0
 801a092:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 801a094:	2301      	movs	r3, #1
 801a096:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 801a09a:	2300      	movs	r3, #0
 801a09c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 801a0aa:	2300      	movs	r3, #0
 801a0ac:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 801a0ae:	2300      	movs	r3, #0
 801a0b0:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 801a0b8:	2300      	movs	r3, #0
 801a0ba:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 801a0be:	2301      	movs	r3, #1
 801a0c0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 801a0c4:	2320      	movs	r3, #32
 801a0c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 801a0ca:	2301      	movs	r3, #1
 801a0cc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801a0d6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801a0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 801a0dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a0e0:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801a0e8:	2302      	movs	r3, #2
 801a0ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801a0f4:	2300      	movs	r3, #0
 801a0f6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801a0fa:	2300      	movs	r3, #0
 801a0fc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 801a100:	2301      	movs	r3, #1
 801a102:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 801a106:	2300      	movs	r3, #0
 801a108:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 801a10a:	2301      	movs	r3, #1
 801a10c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 801a110:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a114:	4619      	mov	r1, r3
 801a116:	6878      	ldr	r0, [r7, #4]
 801a118:	f7ff fde6 	bl	8019ce8 <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801a11c:	2301      	movs	r3, #1
 801a11e:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801a120:	2301      	movs	r3, #1
 801a122:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 801a124:	2300      	movs	r3, #0
 801a126:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 801a128:	2300      	movs	r3, #0
 801a12a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 801a12e:	2300      	movs	r3, #0
 801a130:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 801a132:	2300      	movs	r3, #0
 801a134:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801a136:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a13a:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 801a13c:	2300      	movs	r3, #0
 801a13e:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801a140:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a144:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 801a146:	2300      	movs	r3, #0
 801a148:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 801a14c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801a150:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 801a152:	f107 0308 	add.w	r3, r7, #8
 801a156:	4619      	mov	r1, r3
 801a158:	6878      	ldr	r0, [r7, #4]
 801a15a:	f7ff fee1 	bl	8019f20 <ETH_SetDMAConfig>
        }
 801a15e:	bf00      	nop
 801a160:	3790      	adds	r7, #144	@ 0x90
 801a162:	46bd      	mov	sp, r7
 801a164:	bd80      	pop	{r7, pc}
	...

0801a168 <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 801a168:	b580      	push	{r7, lr}
 801a16a:	b084      	sub	sp, #16
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801a178:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801a180:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 801a182:	f003 fdf1 	bl	801dd68 <HAL_RCC_GetHCLKFreq>
 801a186:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 801a188:	68bb      	ldr	r3, [r7, #8]
 801a18a:	4a1e      	ldr	r2, [pc, #120]	@ (801a204 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 801a18c:	4293      	cmp	r3, r2
 801a18e:	d908      	bls.n	801a1a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 801a190:	68bb      	ldr	r3, [r7, #8]
 801a192:	4a1d      	ldr	r2, [pc, #116]	@ (801a208 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801a194:	4293      	cmp	r3, r2
 801a196:	d804      	bhi.n	801a1a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801a19e:	60fb      	str	r3, [r7, #12]
 801a1a0:	e027      	b.n	801a1f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 801a1a2:	68bb      	ldr	r3, [r7, #8]
 801a1a4:	4a18      	ldr	r2, [pc, #96]	@ (801a208 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801a1a6:	4293      	cmp	r3, r2
 801a1a8:	d908      	bls.n	801a1bc <ETH_MAC_MDIO_ClkConfig+0x54>
 801a1aa:	68bb      	ldr	r3, [r7, #8]
 801a1ac:	4a17      	ldr	r2, [pc, #92]	@ (801a20c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 801a1ae:	4293      	cmp	r3, r2
 801a1b0:	d204      	bcs.n	801a1bc <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801a1b8:	60fb      	str	r3, [r7, #12]
 801a1ba:	e01a      	b.n	801a1f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 801a1bc:	68bb      	ldr	r3, [r7, #8]
 801a1be:	4a13      	ldr	r2, [pc, #76]	@ (801a20c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 801a1c0:	4293      	cmp	r3, r2
 801a1c2:	d303      	bcc.n	801a1cc <ETH_MAC_MDIO_ClkConfig+0x64>
 801a1c4:	68bb      	ldr	r3, [r7, #8]
 801a1c6:	4a12      	ldr	r2, [pc, #72]	@ (801a210 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801a1c8:	4293      	cmp	r3, r2
 801a1ca:	d911      	bls.n	801a1f0 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 801a1cc:	68bb      	ldr	r3, [r7, #8]
 801a1ce:	4a10      	ldr	r2, [pc, #64]	@ (801a210 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801a1d0:	4293      	cmp	r3, r2
 801a1d2:	d908      	bls.n	801a1e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 801a1d4:	68bb      	ldr	r3, [r7, #8]
 801a1d6:	4a0f      	ldr	r2, [pc, #60]	@ (801a214 <ETH_MAC_MDIO_ClkConfig+0xac>)
 801a1d8:	4293      	cmp	r3, r2
 801a1da:	d804      	bhi.n	801a1e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a1e2:	60fb      	str	r3, [r7, #12]
 801a1e4:	e005      	b.n	801a1f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801a1ec:	60fb      	str	r3, [r7, #12]
 801a1ee:	e000      	b.n	801a1f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 801a1f0:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	68fa      	ldr	r2, [r7, #12]
 801a1f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 801a1fc:	bf00      	nop
 801a1fe:	3710      	adds	r7, #16
 801a200:	46bd      	mov	sp, r7
 801a202:	bd80      	pop	{r7, pc}
 801a204:	01312cff 	.word	0x01312cff
 801a208:	02160ebf 	.word	0x02160ebf
 801a20c:	03938700 	.word	0x03938700
 801a210:	05f5e0ff 	.word	0x05f5e0ff
 801a214:	08f0d17f 	.word	0x08f0d17f

0801a218 <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 801a218:	b480      	push	{r7}
 801a21a:	b085      	sub	sp, #20
 801a21c:	af00      	add	r7, sp, #0
 801a21e:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 801a220:	2300      	movs	r3, #0
 801a222:	60fb      	str	r3, [r7, #12]
 801a224:	e01d      	b.n	801a262 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	68d9      	ldr	r1, [r3, #12]
 801a22a:	68fa      	ldr	r2, [r7, #12]
 801a22c:	4613      	mov	r3, r2
 801a22e:	005b      	lsls	r3, r3, #1
 801a230:	4413      	add	r3, r2
 801a232:	00db      	lsls	r3, r3, #3
 801a234:	440b      	add	r3, r1
 801a236:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 801a238:	68bb      	ldr	r3, [r7, #8]
 801a23a:	2200      	movs	r2, #0
 801a23c:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 801a23e:	68bb      	ldr	r3, [r7, #8]
 801a240:	2200      	movs	r2, #0
 801a242:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	2200      	movs	r2, #0
 801a248:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 801a24a:	68bb      	ldr	r3, [r7, #8]
 801a24c:	2200      	movs	r2, #0
 801a24e:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 801a250:	68b9      	ldr	r1, [r7, #8]
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	68fa      	ldr	r2, [r7, #12]
 801a256:	3206      	adds	r2, #6
 801a258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	3301      	adds	r3, #1
 801a260:	60fb      	str	r3, [r7, #12]
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	2b03      	cmp	r3, #3
 801a266:	d9de      	bls.n	801a226 <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	2200      	movs	r2, #0
 801a26c:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	2200      	movs	r2, #0
 801a272:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a27c:	461a      	mov	r2, r3
 801a27e:	2303      	movs	r3, #3
 801a280:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	68da      	ldr	r2, [r3, #12]
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a290:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	68da      	ldr	r2, [r3, #12]
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a2a0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 801a2a4:	bf00      	nop
 801a2a6:	3714      	adds	r7, #20
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ae:	4770      	bx	lr

0801a2b0 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 801a2b0:	b480      	push	{r7}
 801a2b2:	b085      	sub	sp, #20
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	60fb      	str	r3, [r7, #12]
 801a2bc:	e023      	b.n	801a306 <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	6919      	ldr	r1, [r3, #16]
 801a2c2:	68fa      	ldr	r2, [r7, #12]
 801a2c4:	4613      	mov	r3, r2
 801a2c6:	005b      	lsls	r3, r3, #1
 801a2c8:	4413      	add	r3, r2
 801a2ca:	00db      	lsls	r3, r3, #3
 801a2cc:	440b      	add	r3, r1
 801a2ce:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 801a2d0:	68bb      	ldr	r3, [r7, #8]
 801a2d2:	2200      	movs	r2, #0
 801a2d4:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 801a2d6:	68bb      	ldr	r3, [r7, #8]
 801a2d8:	2200      	movs	r2, #0
 801a2da:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 801a2dc:	68bb      	ldr	r3, [r7, #8]
 801a2de:	2200      	movs	r2, #0
 801a2e0:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 801a2e2:	68bb      	ldr	r3, [r7, #8]
 801a2e4:	2200      	movs	r2, #0
 801a2e6:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 801a2e8:	68bb      	ldr	r3, [r7, #8]
 801a2ea:	2200      	movs	r2, #0
 801a2ec:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 801a2ee:	68bb      	ldr	r3, [r7, #8]
 801a2f0:	2200      	movs	r2, #0
 801a2f2:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 801a2f4:	68b9      	ldr	r1, [r7, #8]
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	68fa      	ldr	r2, [r7, #12]
 801a2fa:	320c      	adds	r2, #12
 801a2fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	3301      	adds	r3, #1
 801a304:	60fb      	str	r3, [r7, #12]
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	2b03      	cmp	r3, #3
 801a30a:	d9d8      	bls.n	801a2be <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	2200      	movs	r2, #0
 801a310:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	2200      	movs	r2, #0
 801a316:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	2200      	movs	r2, #0
 801a31c:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	2200      	movs	r2, #0
 801a322:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	2200      	movs	r2, #0
 801a328:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a332:	461a      	mov	r2, r3
 801a334:	2303      	movs	r3, #3
 801a336:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	691a      	ldr	r2, [r3, #16]
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a346:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	691b      	ldr	r3, [r3, #16]
 801a34e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a35a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 801a35e:	bf00      	nop
 801a360:	3714      	adds	r7, #20
 801a362:	46bd      	mov	sp, r7
 801a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a368:	4770      	bx	lr
	...

0801a36c <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 801a36c:	b580      	push	{r7, lr}
 801a36e:	b086      	sub	sp, #24
 801a370:	af00      	add	r7, sp, #0
 801a372:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a378:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801a37a:	e032      	b.n	801a3e2 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	697a      	ldr	r2, [r7, #20]
 801a380:	3206      	adds	r2, #6
 801a382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a386:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 801a388:	693b      	ldr	r3, [r7, #16]
 801a38a:	68db      	ldr	r3, [r3, #12]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	db31      	blt.n	801a3f4 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 801a390:	693b      	ldr	r3, [r7, #16]
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d02d      	beq.n	801a3f8 <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 801a39c:	68f8      	ldr	r0, [r7, #12]
 801a39e:	f7f0 fab4 	bl	800a90a <pxPacketBuffer_to_NetworkBuffer>
 801a3a2:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 801a3a4:	68bb      	ldr	r3, [r7, #8]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d002      	beq.n	801a3b0 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801a3aa:	68b8      	ldr	r0, [r7, #8]
 801a3ac:	f7fd faa2 	bl	80178f4 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 801a3b0:	693b      	ldr	r3, [r7, #16]
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 801a3b6:	697b      	ldr	r3, [r7, #20]
 801a3b8:	3301      	adds	r3, #1
 801a3ba:	617b      	str	r3, [r7, #20]
 801a3bc:	697b      	ldr	r3, [r7, #20]
 801a3be:	2b03      	cmp	r3, #3
 801a3c0:	d902      	bls.n	801a3c8 <ETH_Clear_Tx_Descriptors+0x5c>
 801a3c2:	697b      	ldr	r3, [r7, #20]
 801a3c4:	3b04      	subs	r3, #4
 801a3c6:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	697a      	ldr	r2, [r7, #20]
 801a3cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 801a3ce:	f3bf 8f4f 	dsb	sy
}
 801a3d2:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 801a3d4:	4b0b      	ldr	r3, [pc, #44]	@ (801a404 <ETH_Clear_Tx_Descriptors+0x98>)
 801a3d6:	6818      	ldr	r0, [r3, #0]
 801a3d8:	2300      	movs	r3, #0
 801a3da:	2200      	movs	r2, #0
 801a3dc:	2100      	movs	r1, #0
 801a3de:	f7e9 fb43 	bl	8003a68 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801a3e2:	4b08      	ldr	r3, [pc, #32]	@ (801a404 <ETH_Clear_Tx_Descriptors+0x98>)
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	f7e9 fde4 	bl	8003fb4 <uxQueueMessagesWaiting>
 801a3ec:	4603      	mov	r3, r0
 801a3ee:	2b04      	cmp	r3, #4
 801a3f0:	d1c4      	bne.n	801a37c <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 801a3f2:	e002      	b.n	801a3fa <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 801a3f4:	bf00      	nop
 801a3f6:	e000      	b.n	801a3fa <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 801a3f8:	bf00      	nop
        }
 801a3fa:	bf00      	nop
 801a3fc:	3718      	adds	r7, #24
 801a3fe:	46bd      	mov	sp, r7
 801a400:	bd80      	pop	{r7, pc}
 801a402:	bf00      	nop
 801a404:	20002474 	.word	0x20002474

0801a408 <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 801a408:	b480      	push	{r7}
 801a40a:	b08b      	sub	sp, #44	@ 0x2c
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	60f8      	str	r0, [r7, #12]
 801a410:	60b9      	str	r1, [r7, #8]
 801a412:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	3318      	adds	r3, #24
 801a418:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801a41a:	6a3b      	ldr	r3, [r7, #32]
 801a41c:	691b      	ldr	r3, [r3, #16]
 801a41e:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 801a420:	6a3b      	ldr	r3, [r7, #32]
 801a422:	69fa      	ldr	r2, [r7, #28]
 801a424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a428:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 801a42a:	68bb      	ldr	r3, [r7, #8]
 801a42c:	689b      	ldr	r3, [r3, #8]
 801a42e:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 801a430:	697b      	ldr	r3, [r7, #20]
 801a432:	2200      	movs	r2, #0
 801a434:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 801a436:	69bb      	ldr	r3, [r7, #24]
 801a438:	68db      	ldr	r3, [r3, #12]
 801a43a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 801a43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a43e:	2b00      	cmp	r3, #0
 801a440:	da01      	bge.n	801a446 <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 801a442:	2302      	movs	r3, #2
 801a444:	e05c      	b.n	801a500 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 801a446:	697b      	ldr	r3, [r7, #20]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	461a      	mov	r2, r3
 801a44c:	69bb      	ldr	r3, [r7, #24]
 801a44e:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 801a450:	69bb      	ldr	r3, [r7, #24]
 801a452:	689a      	ldr	r2, [r3, #8]
 801a454:	4b2d      	ldr	r3, [pc, #180]	@ (801a50c <ETH_Prepare_Tx_Descriptors+0x104>)
 801a456:	4013      	ands	r3, r2
 801a458:	697a      	ldr	r2, [r7, #20]
 801a45a:	6852      	ldr	r2, [r2, #4]
 801a45c:	431a      	orrs	r2, r3
 801a45e:	69bb      	ldr	r3, [r7, #24]
 801a460:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 801a462:	69bb      	ldr	r3, [r7, #24]
 801a464:	2200      	movs	r2, #0
 801a466:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 801a468:	69bb      	ldr	r3, [r7, #24]
 801a46a:	689a      	ldr	r2, [r3, #8]
 801a46c:	4b28      	ldr	r3, [pc, #160]	@ (801a510 <ETH_Prepare_Tx_Descriptors+0x108>)
 801a46e:	4013      	ands	r3, r2
 801a470:	69ba      	ldr	r2, [r7, #24]
 801a472:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 801a474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a476:	4b27      	ldr	r3, [pc, #156]	@ (801a514 <ETH_Prepare_Tx_Descriptors+0x10c>)
 801a478:	4013      	ands	r3, r2
 801a47a:	68ba      	ldr	r2, [r7, #8]
 801a47c:	6852      	ldr	r2, [r2, #4]
 801a47e:	4313      	orrs	r3, r2
 801a480:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 801a482:	68bb      	ldr	r3, [r7, #8]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	f003 0301 	and.w	r3, r3, #1
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d006      	beq.n	801a49c <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 801a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a490:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801a494:	68bb      	ldr	r3, [r7, #8]
 801a496:	695b      	ldr	r3, [r3, #20]
 801a498:	4313      	orrs	r3, r2
 801a49a:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 801a49c:	68bb      	ldr	r3, [r7, #8]
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	f003 0320 	and.w	r3, r3, #32
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d006      	beq.n	801a4b6 <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 801a4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801a4ae:	68bb      	ldr	r3, [r7, #8]
 801a4b0:	691b      	ldr	r3, [r3, #16]
 801a4b2:	4313      	orrs	r3, r2
 801a4b4:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 801a4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4b8:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 801a4bc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 801a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801a4c4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 801a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a4cc:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d006      	beq.n	801a4e2 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 801a4d4:	69bb      	ldr	r3, [r7, #24]
 801a4d6:	689b      	ldr	r3, [r3, #8]
 801a4d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801a4dc:	69bb      	ldr	r3, [r7, #24]
 801a4de:	609a      	str	r2, [r3, #8]
 801a4e0:	e005      	b.n	801a4ee <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 801a4e2:	69bb      	ldr	r3, [r7, #24]
 801a4e4:	689b      	ldr	r3, [r3, #8]
 801a4e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a4ea:	69bb      	ldr	r3, [r7, #24]
 801a4ec:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 801a4ee:	69bb      	ldr	r3, [r7, #24]
 801a4f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a4f2:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 801a4f4:	69bb      	ldr	r3, [r7, #24]
 801a4f6:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801a4f8:	f3bf 8f4f 	dsb	sy
}
 801a4fc:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 801a4fe:	2300      	movs	r3, #0
        }
 801a500:	4618      	mov	r0, r3
 801a502:	372c      	adds	r7, #44	@ 0x2c
 801a504:	46bd      	mov	sp, r7
 801a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a50a:	4770      	bx	lr
 801a50c:	ffffc000 	.word	0xffffc000
 801a510:	c000ffff 	.word	0xc000ffff
 801a514:	ffff8000 	.word	0xffff8000

0801a518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a518:	b580      	push	{r7, lr}
 801a51a:	b082      	sub	sp, #8
 801a51c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a51e:	2003      	movs	r0, #3
 801a520:	f000 f9a0 	bl	801a864 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801a524:	f003 faa6 	bl	801da74 <HAL_RCC_GetSysClockFreq>
 801a528:	4602      	mov	r2, r0
 801a52a:	4b15      	ldr	r3, [pc, #84]	@ (801a580 <HAL_Init+0x68>)
 801a52c:	699b      	ldr	r3, [r3, #24]
 801a52e:	0a1b      	lsrs	r3, r3, #8
 801a530:	f003 030f 	and.w	r3, r3, #15
 801a534:	4913      	ldr	r1, [pc, #76]	@ (801a584 <HAL_Init+0x6c>)
 801a536:	5ccb      	ldrb	r3, [r1, r3]
 801a538:	f003 031f 	and.w	r3, r3, #31
 801a53c:	fa22 f303 	lsr.w	r3, r2, r3
 801a540:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801a542:	4b0f      	ldr	r3, [pc, #60]	@ (801a580 <HAL_Init+0x68>)
 801a544:	699b      	ldr	r3, [r3, #24]
 801a546:	f003 030f 	and.w	r3, r3, #15
 801a54a:	4a0e      	ldr	r2, [pc, #56]	@ (801a584 <HAL_Init+0x6c>)
 801a54c:	5cd3      	ldrb	r3, [r2, r3]
 801a54e:	f003 031f 	and.w	r3, r3, #31
 801a552:	687a      	ldr	r2, [r7, #4]
 801a554:	fa22 f303 	lsr.w	r3, r2, r3
 801a558:	4a0b      	ldr	r2, [pc, #44]	@ (801a588 <HAL_Init+0x70>)
 801a55a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801a55c:	4a0b      	ldr	r2, [pc, #44]	@ (801a58c <HAL_Init+0x74>)
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801a562:	200f      	movs	r0, #15
 801a564:	f000 f814 	bl	801a590 <HAL_InitTick>
 801a568:	4603      	mov	r3, r0
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d001      	beq.n	801a572 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801a56e:	2301      	movs	r3, #1
 801a570:	e002      	b.n	801a578 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801a572:	f7e7 fe91 	bl	8002298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801a576:	2300      	movs	r3, #0
}
 801a578:	4618      	mov	r0, r3
 801a57a:	3708      	adds	r7, #8
 801a57c:	46bd      	mov	sp, r7
 801a57e:	bd80      	pop	{r7, pc}
 801a580:	58024400 	.word	0x58024400
 801a584:	08027d0c 	.word	0x08027d0c
 801a588:	20000004 	.word	0x20000004
 801a58c:	20000000 	.word	0x20000000

0801a590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801a590:	b580      	push	{r7, lr}
 801a592:	b082      	sub	sp, #8
 801a594:	af00      	add	r7, sp, #0
 801a596:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801a598:	4b15      	ldr	r3, [pc, #84]	@ (801a5f0 <HAL_InitTick+0x60>)
 801a59a:	781b      	ldrb	r3, [r3, #0]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d101      	bne.n	801a5a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801a5a0:	2301      	movs	r3, #1
 801a5a2:	e021      	b.n	801a5e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801a5a4:	4b13      	ldr	r3, [pc, #76]	@ (801a5f4 <HAL_InitTick+0x64>)
 801a5a6:	681a      	ldr	r2, [r3, #0]
 801a5a8:	4b11      	ldr	r3, [pc, #68]	@ (801a5f0 <HAL_InitTick+0x60>)
 801a5aa:	781b      	ldrb	r3, [r3, #0]
 801a5ac:	4619      	mov	r1, r3
 801a5ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801a5b2:	fbb3 f3f1 	udiv	r3, r3, r1
 801a5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	f000 f985 	bl	801a8ca <HAL_SYSTICK_Config>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d001      	beq.n	801a5ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801a5c6:	2301      	movs	r3, #1
 801a5c8:	e00e      	b.n	801a5e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	2b0f      	cmp	r3, #15
 801a5ce:	d80a      	bhi.n	801a5e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	6879      	ldr	r1, [r7, #4]
 801a5d4:	f04f 30ff 	mov.w	r0, #4294967295
 801a5d8:	f000 f94f 	bl	801a87a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801a5dc:	4a06      	ldr	r2, [pc, #24]	@ (801a5f8 <HAL_InitTick+0x68>)
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	e000      	b.n	801a5e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801a5e6:	2301      	movs	r3, #1
}
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	3708      	adds	r7, #8
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	bd80      	pop	{r7, pc}
 801a5f0:	20000024 	.word	0x20000024
 801a5f4:	20000000 	.word	0x20000000
 801a5f8:	20000020 	.word	0x20000020

0801a5fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801a5fc:	b480      	push	{r7}
 801a5fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801a600:	4b06      	ldr	r3, [pc, #24]	@ (801a61c <HAL_IncTick+0x20>)
 801a602:	781b      	ldrb	r3, [r3, #0]
 801a604:	461a      	mov	r2, r3
 801a606:	4b06      	ldr	r3, [pc, #24]	@ (801a620 <HAL_IncTick+0x24>)
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	4413      	add	r3, r2
 801a60c:	4a04      	ldr	r2, [pc, #16]	@ (801a620 <HAL_IncTick+0x24>)
 801a60e:	6013      	str	r3, [r2, #0]
}
 801a610:	bf00      	nop
 801a612:	46bd      	mov	sp, r7
 801a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a618:	4770      	bx	lr
 801a61a:	bf00      	nop
 801a61c:	20000024 	.word	0x20000024
 801a620:	20002580 	.word	0x20002580

0801a624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801a624:	b480      	push	{r7}
 801a626:	af00      	add	r7, sp, #0
  return uwTick;
 801a628:	4b03      	ldr	r3, [pc, #12]	@ (801a638 <HAL_GetTick+0x14>)
 801a62a:	681b      	ldr	r3, [r3, #0]
}
 801a62c:	4618      	mov	r0, r3
 801a62e:	46bd      	mov	sp, r7
 801a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a634:	4770      	bx	lr
 801a636:	bf00      	nop
 801a638:	20002580 	.word	0x20002580

0801a63c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801a63c:	b580      	push	{r7, lr}
 801a63e:	b084      	sub	sp, #16
 801a640:	af00      	add	r7, sp, #0
 801a642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801a644:	f7ff ffee 	bl	801a624 <HAL_GetTick>
 801a648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a654:	d005      	beq.n	801a662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801a656:	4b0a      	ldr	r3, [pc, #40]	@ (801a680 <HAL_Delay+0x44>)
 801a658:	781b      	ldrb	r3, [r3, #0]
 801a65a:	461a      	mov	r2, r3
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	4413      	add	r3, r2
 801a660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801a662:	bf00      	nop
 801a664:	f7ff ffde 	bl	801a624 <HAL_GetTick>
 801a668:	4602      	mov	r2, r0
 801a66a:	68bb      	ldr	r3, [r7, #8]
 801a66c:	1ad3      	subs	r3, r2, r3
 801a66e:	68fa      	ldr	r2, [r7, #12]
 801a670:	429a      	cmp	r2, r3
 801a672:	d8f7      	bhi.n	801a664 <HAL_Delay+0x28>
  {
  }
}
 801a674:	bf00      	nop
 801a676:	bf00      	nop
 801a678:	3710      	adds	r7, #16
 801a67a:	46bd      	mov	sp, r7
 801a67c:	bd80      	pop	{r7, pc}
 801a67e:	bf00      	nop
 801a680:	20000024 	.word	0x20000024

0801a684 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801a684:	b480      	push	{r7}
 801a686:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801a688:	4b03      	ldr	r3, [pc, #12]	@ (801a698 <HAL_GetREVID+0x14>)
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	0c1b      	lsrs	r3, r3, #16
}
 801a68e:	4618      	mov	r0, r3
 801a690:	46bd      	mov	sp, r7
 801a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a696:	4770      	bx	lr
 801a698:	5c001000 	.word	0x5c001000

0801a69c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 801a69c:	b480      	push	{r7}
 801a69e:	b083      	sub	sp, #12
 801a6a0:	af00      	add	r7, sp, #0
 801a6a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 801a6a4:	4b06      	ldr	r3, [pc, #24]	@ (801a6c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a6a6:	685b      	ldr	r3, [r3, #4]
 801a6a8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 801a6ac:	4904      	ldr	r1, [pc, #16]	@ (801a6c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	4313      	orrs	r3, r2
 801a6b2:	604b      	str	r3, [r1, #4]
}
 801a6b4:	bf00      	nop
 801a6b6:	370c      	adds	r7, #12
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6be:	4770      	bx	lr
 801a6c0:	58000400 	.word	0x58000400

0801a6c4 <__NVIC_SetPriorityGrouping>:
{
 801a6c4:	b480      	push	{r7}
 801a6c6:	b085      	sub	sp, #20
 801a6c8:	af00      	add	r7, sp, #0
 801a6ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	f003 0307 	and.w	r3, r3, #7
 801a6d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a6d4:	4b0b      	ldr	r3, [pc, #44]	@ (801a704 <__NVIC_SetPriorityGrouping+0x40>)
 801a6d6:	68db      	ldr	r3, [r3, #12]
 801a6d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a6da:	68ba      	ldr	r2, [r7, #8]
 801a6dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801a6e0:	4013      	ands	r3, r2
 801a6e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a6e8:	68bb      	ldr	r3, [r7, #8]
 801a6ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801a6ec:	4b06      	ldr	r3, [pc, #24]	@ (801a708 <__NVIC_SetPriorityGrouping+0x44>)
 801a6ee:	4313      	orrs	r3, r2
 801a6f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a6f2:	4a04      	ldr	r2, [pc, #16]	@ (801a704 <__NVIC_SetPriorityGrouping+0x40>)
 801a6f4:	68bb      	ldr	r3, [r7, #8]
 801a6f6:	60d3      	str	r3, [r2, #12]
}
 801a6f8:	bf00      	nop
 801a6fa:	3714      	adds	r7, #20
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a702:	4770      	bx	lr
 801a704:	e000ed00 	.word	0xe000ed00
 801a708:	05fa0000 	.word	0x05fa0000

0801a70c <__NVIC_GetPriorityGrouping>:
{
 801a70c:	b480      	push	{r7}
 801a70e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a710:	4b04      	ldr	r3, [pc, #16]	@ (801a724 <__NVIC_GetPriorityGrouping+0x18>)
 801a712:	68db      	ldr	r3, [r3, #12]
 801a714:	0a1b      	lsrs	r3, r3, #8
 801a716:	f003 0307 	and.w	r3, r3, #7
}
 801a71a:	4618      	mov	r0, r3
 801a71c:	46bd      	mov	sp, r7
 801a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a722:	4770      	bx	lr
 801a724:	e000ed00 	.word	0xe000ed00

0801a728 <__NVIC_EnableIRQ>:
{
 801a728:	b480      	push	{r7}
 801a72a:	b083      	sub	sp, #12
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	4603      	mov	r3, r0
 801a730:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a736:	2b00      	cmp	r3, #0
 801a738:	db0b      	blt.n	801a752 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a73a:	88fb      	ldrh	r3, [r7, #6]
 801a73c:	f003 021f 	and.w	r2, r3, #31
 801a740:	4907      	ldr	r1, [pc, #28]	@ (801a760 <__NVIC_EnableIRQ+0x38>)
 801a742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a746:	095b      	lsrs	r3, r3, #5
 801a748:	2001      	movs	r0, #1
 801a74a:	fa00 f202 	lsl.w	r2, r0, r2
 801a74e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a752:	bf00      	nop
 801a754:	370c      	adds	r7, #12
 801a756:	46bd      	mov	sp, r7
 801a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a75c:	4770      	bx	lr
 801a75e:	bf00      	nop
 801a760:	e000e100 	.word	0xe000e100

0801a764 <__NVIC_SetPriority>:
{
 801a764:	b480      	push	{r7}
 801a766:	b083      	sub	sp, #12
 801a768:	af00      	add	r7, sp, #0
 801a76a:	4603      	mov	r3, r0
 801a76c:	6039      	str	r1, [r7, #0]
 801a76e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a774:	2b00      	cmp	r3, #0
 801a776:	db0a      	blt.n	801a78e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a778:	683b      	ldr	r3, [r7, #0]
 801a77a:	b2da      	uxtb	r2, r3
 801a77c:	490c      	ldr	r1, [pc, #48]	@ (801a7b0 <__NVIC_SetPriority+0x4c>)
 801a77e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a782:	0112      	lsls	r2, r2, #4
 801a784:	b2d2      	uxtb	r2, r2
 801a786:	440b      	add	r3, r1
 801a788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a78c:	e00a      	b.n	801a7a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a78e:	683b      	ldr	r3, [r7, #0]
 801a790:	b2da      	uxtb	r2, r3
 801a792:	4908      	ldr	r1, [pc, #32]	@ (801a7b4 <__NVIC_SetPriority+0x50>)
 801a794:	88fb      	ldrh	r3, [r7, #6]
 801a796:	f003 030f 	and.w	r3, r3, #15
 801a79a:	3b04      	subs	r3, #4
 801a79c:	0112      	lsls	r2, r2, #4
 801a79e:	b2d2      	uxtb	r2, r2
 801a7a0:	440b      	add	r3, r1
 801a7a2:	761a      	strb	r2, [r3, #24]
}
 801a7a4:	bf00      	nop
 801a7a6:	370c      	adds	r7, #12
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ae:	4770      	bx	lr
 801a7b0:	e000e100 	.word	0xe000e100
 801a7b4:	e000ed00 	.word	0xe000ed00

0801a7b8 <NVIC_EncodePriority>:
{
 801a7b8:	b480      	push	{r7}
 801a7ba:	b089      	sub	sp, #36	@ 0x24
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	60f8      	str	r0, [r7, #12]
 801a7c0:	60b9      	str	r1, [r7, #8]
 801a7c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	f003 0307 	and.w	r3, r3, #7
 801a7ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a7cc:	69fb      	ldr	r3, [r7, #28]
 801a7ce:	f1c3 0307 	rsb	r3, r3, #7
 801a7d2:	2b04      	cmp	r3, #4
 801a7d4:	bf28      	it	cs
 801a7d6:	2304      	movcs	r3, #4
 801a7d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a7da:	69fb      	ldr	r3, [r7, #28]
 801a7dc:	3304      	adds	r3, #4
 801a7de:	2b06      	cmp	r3, #6
 801a7e0:	d902      	bls.n	801a7e8 <NVIC_EncodePriority+0x30>
 801a7e2:	69fb      	ldr	r3, [r7, #28]
 801a7e4:	3b03      	subs	r3, #3
 801a7e6:	e000      	b.n	801a7ea <NVIC_EncodePriority+0x32>
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a7ec:	f04f 32ff 	mov.w	r2, #4294967295
 801a7f0:	69bb      	ldr	r3, [r7, #24]
 801a7f2:	fa02 f303 	lsl.w	r3, r2, r3
 801a7f6:	43da      	mvns	r2, r3
 801a7f8:	68bb      	ldr	r3, [r7, #8]
 801a7fa:	401a      	ands	r2, r3
 801a7fc:	697b      	ldr	r3, [r7, #20]
 801a7fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a800:	f04f 31ff 	mov.w	r1, #4294967295
 801a804:	697b      	ldr	r3, [r7, #20]
 801a806:	fa01 f303 	lsl.w	r3, r1, r3
 801a80a:	43d9      	mvns	r1, r3
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a810:	4313      	orrs	r3, r2
}
 801a812:	4618      	mov	r0, r3
 801a814:	3724      	adds	r7, #36	@ 0x24
 801a816:	46bd      	mov	sp, r7
 801a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a81c:	4770      	bx	lr
	...

0801a820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801a820:	b580      	push	{r7, lr}
 801a822:	b082      	sub	sp, #8
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	3b01      	subs	r3, #1
 801a82c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a830:	d301      	bcc.n	801a836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801a832:	2301      	movs	r3, #1
 801a834:	e00f      	b.n	801a856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801a836:	4a0a      	ldr	r2, [pc, #40]	@ (801a860 <SysTick_Config+0x40>)
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	3b01      	subs	r3, #1
 801a83c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801a83e:	210f      	movs	r1, #15
 801a840:	f04f 30ff 	mov.w	r0, #4294967295
 801a844:	f7ff ff8e 	bl	801a764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801a848:	4b05      	ldr	r3, [pc, #20]	@ (801a860 <SysTick_Config+0x40>)
 801a84a:	2200      	movs	r2, #0
 801a84c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801a84e:	4b04      	ldr	r3, [pc, #16]	@ (801a860 <SysTick_Config+0x40>)
 801a850:	2207      	movs	r2, #7
 801a852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801a854:	2300      	movs	r3, #0
}
 801a856:	4618      	mov	r0, r3
 801a858:	3708      	adds	r7, #8
 801a85a:	46bd      	mov	sp, r7
 801a85c:	bd80      	pop	{r7, pc}
 801a85e:	bf00      	nop
 801a860:	e000e010 	.word	0xe000e010

0801a864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a864:	b580      	push	{r7, lr}
 801a866:	b082      	sub	sp, #8
 801a868:	af00      	add	r7, sp, #0
 801a86a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a86c:	6878      	ldr	r0, [r7, #4]
 801a86e:	f7ff ff29 	bl	801a6c4 <__NVIC_SetPriorityGrouping>
}
 801a872:	bf00      	nop
 801a874:	3708      	adds	r7, #8
 801a876:	46bd      	mov	sp, r7
 801a878:	bd80      	pop	{r7, pc}

0801a87a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801a87a:	b580      	push	{r7, lr}
 801a87c:	b086      	sub	sp, #24
 801a87e:	af00      	add	r7, sp, #0
 801a880:	4603      	mov	r3, r0
 801a882:	60b9      	str	r1, [r7, #8]
 801a884:	607a      	str	r2, [r7, #4]
 801a886:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801a888:	f7ff ff40 	bl	801a70c <__NVIC_GetPriorityGrouping>
 801a88c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801a88e:	687a      	ldr	r2, [r7, #4]
 801a890:	68b9      	ldr	r1, [r7, #8]
 801a892:	6978      	ldr	r0, [r7, #20]
 801a894:	f7ff ff90 	bl	801a7b8 <NVIC_EncodePriority>
 801a898:	4602      	mov	r2, r0
 801a89a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a89e:	4611      	mov	r1, r2
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	f7ff ff5f 	bl	801a764 <__NVIC_SetPriority>
}
 801a8a6:	bf00      	nop
 801a8a8:	3718      	adds	r7, #24
 801a8aa:	46bd      	mov	sp, r7
 801a8ac:	bd80      	pop	{r7, pc}

0801a8ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801a8ae:	b580      	push	{r7, lr}
 801a8b0:	b082      	sub	sp, #8
 801a8b2:	af00      	add	r7, sp, #0
 801a8b4:	4603      	mov	r3, r0
 801a8b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801a8b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a8bc:	4618      	mov	r0, r3
 801a8be:	f7ff ff33 	bl	801a728 <__NVIC_EnableIRQ>
}
 801a8c2:	bf00      	nop
 801a8c4:	3708      	adds	r7, #8
 801a8c6:	46bd      	mov	sp, r7
 801a8c8:	bd80      	pop	{r7, pc}

0801a8ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801a8ca:	b580      	push	{r7, lr}
 801a8cc:	b082      	sub	sp, #8
 801a8ce:	af00      	add	r7, sp, #0
 801a8d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801a8d2:	6878      	ldr	r0, [r7, #4]
 801a8d4:	f7ff ffa4 	bl	801a820 <SysTick_Config>
 801a8d8:	4603      	mov	r3, r0
}
 801a8da:	4618      	mov	r0, r3
 801a8dc:	3708      	adds	r7, #8
 801a8de:	46bd      	mov	sp, r7
 801a8e0:	bd80      	pop	{r7, pc}
	...

0801a8e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801a8e4:	b480      	push	{r7}
 801a8e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801a8e8:	f3bf 8f5f 	dmb	sy
}
 801a8ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801a8ee:	4b07      	ldr	r3, [pc, #28]	@ (801a90c <HAL_MPU_Disable+0x28>)
 801a8f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a8f2:	4a06      	ldr	r2, [pc, #24]	@ (801a90c <HAL_MPU_Disable+0x28>)
 801a8f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a8f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801a8fa:	4b05      	ldr	r3, [pc, #20]	@ (801a910 <HAL_MPU_Disable+0x2c>)
 801a8fc:	2200      	movs	r2, #0
 801a8fe:	605a      	str	r2, [r3, #4]
}
 801a900:	bf00      	nop
 801a902:	46bd      	mov	sp, r7
 801a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a908:	4770      	bx	lr
 801a90a:	bf00      	nop
 801a90c:	e000ed00 	.word	0xe000ed00
 801a910:	e000ed90 	.word	0xe000ed90

0801a914 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801a914:	b480      	push	{r7}
 801a916:	b083      	sub	sp, #12
 801a918:	af00      	add	r7, sp, #0
 801a91a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801a91c:	4a0b      	ldr	r2, [pc, #44]	@ (801a94c <HAL_MPU_Enable+0x38>)
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	f043 0301 	orr.w	r3, r3, #1
 801a924:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801a926:	4b0a      	ldr	r3, [pc, #40]	@ (801a950 <HAL_MPU_Enable+0x3c>)
 801a928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a92a:	4a09      	ldr	r2, [pc, #36]	@ (801a950 <HAL_MPU_Enable+0x3c>)
 801a92c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a930:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801a932:	f3bf 8f4f 	dsb	sy
}
 801a936:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801a938:	f3bf 8f6f 	isb	sy
}
 801a93c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801a93e:	bf00      	nop
 801a940:	370c      	adds	r7, #12
 801a942:	46bd      	mov	sp, r7
 801a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a948:	4770      	bx	lr
 801a94a:	bf00      	nop
 801a94c:	e000ed90 	.word	0xe000ed90
 801a950:	e000ed00 	.word	0xe000ed00

0801a954 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801a954:	b480      	push	{r7}
 801a956:	b083      	sub	sp, #12
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	785a      	ldrb	r2, [r3, #1]
 801a960:	4b1b      	ldr	r3, [pc, #108]	@ (801a9d0 <HAL_MPU_ConfigRegion+0x7c>)
 801a962:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801a964:	4b1a      	ldr	r3, [pc, #104]	@ (801a9d0 <HAL_MPU_ConfigRegion+0x7c>)
 801a966:	691b      	ldr	r3, [r3, #16]
 801a968:	4a19      	ldr	r2, [pc, #100]	@ (801a9d0 <HAL_MPU_ConfigRegion+0x7c>)
 801a96a:	f023 0301 	bic.w	r3, r3, #1
 801a96e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801a970:	4a17      	ldr	r2, [pc, #92]	@ (801a9d0 <HAL_MPU_ConfigRegion+0x7c>)
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	685b      	ldr	r3, [r3, #4]
 801a976:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	7b1b      	ldrb	r3, [r3, #12]
 801a97c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	7adb      	ldrb	r3, [r3, #11]
 801a982:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a984:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	7a9b      	ldrb	r3, [r3, #10]
 801a98a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a98c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	7b5b      	ldrb	r3, [r3, #13]
 801a992:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801a994:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	7b9b      	ldrb	r3, [r3, #14]
 801a99a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801a99c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	7bdb      	ldrb	r3, [r3, #15]
 801a9a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801a9a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	7a5b      	ldrb	r3, [r3, #9]
 801a9aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801a9ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	7a1b      	ldrb	r3, [r3, #8]
 801a9b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801a9b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801a9b6:	687a      	ldr	r2, [r7, #4]
 801a9b8:	7812      	ldrb	r2, [r2, #0]
 801a9ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a9bc:	4a04      	ldr	r2, [pc, #16]	@ (801a9d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a9be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a9c0:	6113      	str	r3, [r2, #16]
}
 801a9c2:	bf00      	nop
 801a9c4:	370c      	adds	r7, #12
 801a9c6:	46bd      	mov	sp, r7
 801a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9cc:	4770      	bx	lr
 801a9ce:	bf00      	nop
 801a9d0:	e000ed90 	.word	0xe000ed90

0801a9d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801a9d4:	b580      	push	{r7, lr}
 801a9d6:	b086      	sub	sp, #24
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801a9dc:	f7ff fe22 	bl	801a624 <HAL_GetTick>
 801a9e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d101      	bne.n	801a9ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801a9e8:	2301      	movs	r3, #1
 801a9ea:	e316      	b.n	801b01a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	4a66      	ldr	r2, [pc, #408]	@ (801ab8c <HAL_DMA_Init+0x1b8>)
 801a9f2:	4293      	cmp	r3, r2
 801a9f4:	d04a      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	4a65      	ldr	r2, [pc, #404]	@ (801ab90 <HAL_DMA_Init+0x1bc>)
 801a9fc:	4293      	cmp	r3, r2
 801a9fe:	d045      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	4a63      	ldr	r2, [pc, #396]	@ (801ab94 <HAL_DMA_Init+0x1c0>)
 801aa06:	4293      	cmp	r3, r2
 801aa08:	d040      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	4a62      	ldr	r2, [pc, #392]	@ (801ab98 <HAL_DMA_Init+0x1c4>)
 801aa10:	4293      	cmp	r3, r2
 801aa12:	d03b      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	4a60      	ldr	r2, [pc, #384]	@ (801ab9c <HAL_DMA_Init+0x1c8>)
 801aa1a:	4293      	cmp	r3, r2
 801aa1c:	d036      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	4a5f      	ldr	r2, [pc, #380]	@ (801aba0 <HAL_DMA_Init+0x1cc>)
 801aa24:	4293      	cmp	r3, r2
 801aa26:	d031      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	4a5d      	ldr	r2, [pc, #372]	@ (801aba4 <HAL_DMA_Init+0x1d0>)
 801aa2e:	4293      	cmp	r3, r2
 801aa30:	d02c      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	4a5c      	ldr	r2, [pc, #368]	@ (801aba8 <HAL_DMA_Init+0x1d4>)
 801aa38:	4293      	cmp	r3, r2
 801aa3a:	d027      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	4a5a      	ldr	r2, [pc, #360]	@ (801abac <HAL_DMA_Init+0x1d8>)
 801aa42:	4293      	cmp	r3, r2
 801aa44:	d022      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	4a59      	ldr	r2, [pc, #356]	@ (801abb0 <HAL_DMA_Init+0x1dc>)
 801aa4c:	4293      	cmp	r3, r2
 801aa4e:	d01d      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	4a57      	ldr	r2, [pc, #348]	@ (801abb4 <HAL_DMA_Init+0x1e0>)
 801aa56:	4293      	cmp	r3, r2
 801aa58:	d018      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	4a56      	ldr	r2, [pc, #344]	@ (801abb8 <HAL_DMA_Init+0x1e4>)
 801aa60:	4293      	cmp	r3, r2
 801aa62:	d013      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	4a54      	ldr	r2, [pc, #336]	@ (801abbc <HAL_DMA_Init+0x1e8>)
 801aa6a:	4293      	cmp	r3, r2
 801aa6c:	d00e      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	4a53      	ldr	r2, [pc, #332]	@ (801abc0 <HAL_DMA_Init+0x1ec>)
 801aa74:	4293      	cmp	r3, r2
 801aa76:	d009      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	4a51      	ldr	r2, [pc, #324]	@ (801abc4 <HAL_DMA_Init+0x1f0>)
 801aa7e:	4293      	cmp	r3, r2
 801aa80:	d004      	beq.n	801aa8c <HAL_DMA_Init+0xb8>
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	4a50      	ldr	r2, [pc, #320]	@ (801abc8 <HAL_DMA_Init+0x1f4>)
 801aa88:	4293      	cmp	r3, r2
 801aa8a:	d101      	bne.n	801aa90 <HAL_DMA_Init+0xbc>
 801aa8c:	2301      	movs	r3, #1
 801aa8e:	e000      	b.n	801aa92 <HAL_DMA_Init+0xbe>
 801aa90:	2300      	movs	r3, #0
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	f000 813b 	beq.w	801ad0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	2202      	movs	r2, #2
 801aa9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	2200      	movs	r2, #0
 801aaa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	4a37      	ldr	r2, [pc, #220]	@ (801ab8c <HAL_DMA_Init+0x1b8>)
 801aaae:	4293      	cmp	r3, r2
 801aab0:	d04a      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	4a36      	ldr	r2, [pc, #216]	@ (801ab90 <HAL_DMA_Init+0x1bc>)
 801aab8:	4293      	cmp	r3, r2
 801aaba:	d045      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	4a34      	ldr	r2, [pc, #208]	@ (801ab94 <HAL_DMA_Init+0x1c0>)
 801aac2:	4293      	cmp	r3, r2
 801aac4:	d040      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	4a33      	ldr	r2, [pc, #204]	@ (801ab98 <HAL_DMA_Init+0x1c4>)
 801aacc:	4293      	cmp	r3, r2
 801aace:	d03b      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	4a31      	ldr	r2, [pc, #196]	@ (801ab9c <HAL_DMA_Init+0x1c8>)
 801aad6:	4293      	cmp	r3, r2
 801aad8:	d036      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	4a30      	ldr	r2, [pc, #192]	@ (801aba0 <HAL_DMA_Init+0x1cc>)
 801aae0:	4293      	cmp	r3, r2
 801aae2:	d031      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	4a2e      	ldr	r2, [pc, #184]	@ (801aba4 <HAL_DMA_Init+0x1d0>)
 801aaea:	4293      	cmp	r3, r2
 801aaec:	d02c      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	4a2d      	ldr	r2, [pc, #180]	@ (801aba8 <HAL_DMA_Init+0x1d4>)
 801aaf4:	4293      	cmp	r3, r2
 801aaf6:	d027      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	4a2b      	ldr	r2, [pc, #172]	@ (801abac <HAL_DMA_Init+0x1d8>)
 801aafe:	4293      	cmp	r3, r2
 801ab00:	d022      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	4a2a      	ldr	r2, [pc, #168]	@ (801abb0 <HAL_DMA_Init+0x1dc>)
 801ab08:	4293      	cmp	r3, r2
 801ab0a:	d01d      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	4a28      	ldr	r2, [pc, #160]	@ (801abb4 <HAL_DMA_Init+0x1e0>)
 801ab12:	4293      	cmp	r3, r2
 801ab14:	d018      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	4a27      	ldr	r2, [pc, #156]	@ (801abb8 <HAL_DMA_Init+0x1e4>)
 801ab1c:	4293      	cmp	r3, r2
 801ab1e:	d013      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	4a25      	ldr	r2, [pc, #148]	@ (801abbc <HAL_DMA_Init+0x1e8>)
 801ab26:	4293      	cmp	r3, r2
 801ab28:	d00e      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	4a24      	ldr	r2, [pc, #144]	@ (801abc0 <HAL_DMA_Init+0x1ec>)
 801ab30:	4293      	cmp	r3, r2
 801ab32:	d009      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	4a22      	ldr	r2, [pc, #136]	@ (801abc4 <HAL_DMA_Init+0x1f0>)
 801ab3a:	4293      	cmp	r3, r2
 801ab3c:	d004      	beq.n	801ab48 <HAL_DMA_Init+0x174>
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	4a21      	ldr	r2, [pc, #132]	@ (801abc8 <HAL_DMA_Init+0x1f4>)
 801ab44:	4293      	cmp	r3, r2
 801ab46:	d108      	bne.n	801ab5a <HAL_DMA_Init+0x186>
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	681a      	ldr	r2, [r3, #0]
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	f022 0201 	bic.w	r2, r2, #1
 801ab56:	601a      	str	r2, [r3, #0]
 801ab58:	e007      	b.n	801ab6a <HAL_DMA_Init+0x196>
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	681a      	ldr	r2, [r3, #0]
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	f022 0201 	bic.w	r2, r2, #1
 801ab68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801ab6a:	e02f      	b.n	801abcc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801ab6c:	f7ff fd5a 	bl	801a624 <HAL_GetTick>
 801ab70:	4602      	mov	r2, r0
 801ab72:	693b      	ldr	r3, [r7, #16]
 801ab74:	1ad3      	subs	r3, r2, r3
 801ab76:	2b05      	cmp	r3, #5
 801ab78:	d928      	bls.n	801abcc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	2220      	movs	r2, #32
 801ab7e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	2203      	movs	r2, #3
 801ab84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801ab88:	2301      	movs	r3, #1
 801ab8a:	e246      	b.n	801b01a <HAL_DMA_Init+0x646>
 801ab8c:	40020010 	.word	0x40020010
 801ab90:	40020028 	.word	0x40020028
 801ab94:	40020040 	.word	0x40020040
 801ab98:	40020058 	.word	0x40020058
 801ab9c:	40020070 	.word	0x40020070
 801aba0:	40020088 	.word	0x40020088
 801aba4:	400200a0 	.word	0x400200a0
 801aba8:	400200b8 	.word	0x400200b8
 801abac:	40020410 	.word	0x40020410
 801abb0:	40020428 	.word	0x40020428
 801abb4:	40020440 	.word	0x40020440
 801abb8:	40020458 	.word	0x40020458
 801abbc:	40020470 	.word	0x40020470
 801abc0:	40020488 	.word	0x40020488
 801abc4:	400204a0 	.word	0x400204a0
 801abc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	f003 0301 	and.w	r3, r3, #1
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d1c8      	bne.n	801ab6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801abe2:	697a      	ldr	r2, [r7, #20]
 801abe4:	4b83      	ldr	r3, [pc, #524]	@ (801adf4 <HAL_DMA_Init+0x420>)
 801abe6:	4013      	ands	r3, r2
 801abe8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801abf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	691b      	ldr	r3, [r3, #16]
 801abf8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801abfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	699b      	ldr	r3, [r3, #24]
 801ac04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801ac0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	6a1b      	ldr	r3, [r3, #32]
 801ac10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801ac12:	697a      	ldr	r2, [r7, #20]
 801ac14:	4313      	orrs	r3, r2
 801ac16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac1c:	2b04      	cmp	r3, #4
 801ac1e:	d107      	bne.n	801ac30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ac28:	4313      	orrs	r3, r2
 801ac2a:	697a      	ldr	r2, [r7, #20]
 801ac2c:	4313      	orrs	r3, r2
 801ac2e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801ac30:	4b71      	ldr	r3, [pc, #452]	@ (801adf8 <HAL_DMA_Init+0x424>)
 801ac32:	681a      	ldr	r2, [r3, #0]
 801ac34:	4b71      	ldr	r3, [pc, #452]	@ (801adfc <HAL_DMA_Init+0x428>)
 801ac36:	4013      	ands	r3, r2
 801ac38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ac3c:	d328      	bcc.n	801ac90 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	685b      	ldr	r3, [r3, #4]
 801ac42:	2b28      	cmp	r3, #40	@ 0x28
 801ac44:	d903      	bls.n	801ac4e <HAL_DMA_Init+0x27a>
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	685b      	ldr	r3, [r3, #4]
 801ac4a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac4c:	d917      	bls.n	801ac7e <HAL_DMA_Init+0x2aa>
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	685b      	ldr	r3, [r3, #4]
 801ac52:	2b3e      	cmp	r3, #62	@ 0x3e
 801ac54:	d903      	bls.n	801ac5e <HAL_DMA_Init+0x28a>
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	685b      	ldr	r3, [r3, #4]
 801ac5a:	2b42      	cmp	r3, #66	@ 0x42
 801ac5c:	d90f      	bls.n	801ac7e <HAL_DMA_Init+0x2aa>
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	685b      	ldr	r3, [r3, #4]
 801ac62:	2b46      	cmp	r3, #70	@ 0x46
 801ac64:	d903      	bls.n	801ac6e <HAL_DMA_Init+0x29a>
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	685b      	ldr	r3, [r3, #4]
 801ac6a:	2b48      	cmp	r3, #72	@ 0x48
 801ac6c:	d907      	bls.n	801ac7e <HAL_DMA_Init+0x2aa>
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	685b      	ldr	r3, [r3, #4]
 801ac72:	2b4e      	cmp	r3, #78	@ 0x4e
 801ac74:	d905      	bls.n	801ac82 <HAL_DMA_Init+0x2ae>
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	685b      	ldr	r3, [r3, #4]
 801ac7a:	2b52      	cmp	r3, #82	@ 0x52
 801ac7c:	d801      	bhi.n	801ac82 <HAL_DMA_Init+0x2ae>
 801ac7e:	2301      	movs	r3, #1
 801ac80:	e000      	b.n	801ac84 <HAL_DMA_Init+0x2b0>
 801ac82:	2300      	movs	r3, #0
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d003      	beq.n	801ac90 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801ac88:	697b      	ldr	r3, [r7, #20]
 801ac8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ac8e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	697a      	ldr	r2, [r7, #20]
 801ac96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	695b      	ldr	r3, [r3, #20]
 801ac9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801aca0:	697b      	ldr	r3, [r7, #20]
 801aca2:	f023 0307 	bic.w	r3, r3, #7
 801aca6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801acac:	697a      	ldr	r2, [r7, #20]
 801acae:	4313      	orrs	r3, r2
 801acb0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801acb6:	2b04      	cmp	r3, #4
 801acb8:	d117      	bne.n	801acea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801acbe:	697a      	ldr	r2, [r7, #20]
 801acc0:	4313      	orrs	r3, r2
 801acc2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d00e      	beq.n	801acea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801accc:	6878      	ldr	r0, [r7, #4]
 801acce:	f001 fbff 	bl	801c4d0 <DMA_CheckFifoParam>
 801acd2:	4603      	mov	r3, r0
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d008      	beq.n	801acea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	2240      	movs	r2, #64	@ 0x40
 801acdc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	2201      	movs	r2, #1
 801ace2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801ace6:	2301      	movs	r3, #1
 801ace8:	e197      	b.n	801b01a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	697a      	ldr	r2, [r7, #20]
 801acf0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801acf2:	6878      	ldr	r0, [r7, #4]
 801acf4:	f001 fb3a 	bl	801c36c <DMA_CalcBaseAndBitshift>
 801acf8:	4603      	mov	r3, r0
 801acfa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ad00:	f003 031f 	and.w	r3, r3, #31
 801ad04:	223f      	movs	r2, #63	@ 0x3f
 801ad06:	409a      	lsls	r2, r3
 801ad08:	68bb      	ldr	r3, [r7, #8]
 801ad0a:	609a      	str	r2, [r3, #8]
 801ad0c:	e0cd      	b.n	801aeaa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	4a3b      	ldr	r2, [pc, #236]	@ (801ae00 <HAL_DMA_Init+0x42c>)
 801ad14:	4293      	cmp	r3, r2
 801ad16:	d022      	beq.n	801ad5e <HAL_DMA_Init+0x38a>
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	4a39      	ldr	r2, [pc, #228]	@ (801ae04 <HAL_DMA_Init+0x430>)
 801ad1e:	4293      	cmp	r3, r2
 801ad20:	d01d      	beq.n	801ad5e <HAL_DMA_Init+0x38a>
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	4a38      	ldr	r2, [pc, #224]	@ (801ae08 <HAL_DMA_Init+0x434>)
 801ad28:	4293      	cmp	r3, r2
 801ad2a:	d018      	beq.n	801ad5e <HAL_DMA_Init+0x38a>
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	4a36      	ldr	r2, [pc, #216]	@ (801ae0c <HAL_DMA_Init+0x438>)
 801ad32:	4293      	cmp	r3, r2
 801ad34:	d013      	beq.n	801ad5e <HAL_DMA_Init+0x38a>
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	4a35      	ldr	r2, [pc, #212]	@ (801ae10 <HAL_DMA_Init+0x43c>)
 801ad3c:	4293      	cmp	r3, r2
 801ad3e:	d00e      	beq.n	801ad5e <HAL_DMA_Init+0x38a>
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	4a33      	ldr	r2, [pc, #204]	@ (801ae14 <HAL_DMA_Init+0x440>)
 801ad46:	4293      	cmp	r3, r2
 801ad48:	d009      	beq.n	801ad5e <HAL_DMA_Init+0x38a>
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	4a32      	ldr	r2, [pc, #200]	@ (801ae18 <HAL_DMA_Init+0x444>)
 801ad50:	4293      	cmp	r3, r2
 801ad52:	d004      	beq.n	801ad5e <HAL_DMA_Init+0x38a>
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	4a30      	ldr	r2, [pc, #192]	@ (801ae1c <HAL_DMA_Init+0x448>)
 801ad5a:	4293      	cmp	r3, r2
 801ad5c:	d101      	bne.n	801ad62 <HAL_DMA_Init+0x38e>
 801ad5e:	2301      	movs	r3, #1
 801ad60:	e000      	b.n	801ad64 <HAL_DMA_Init+0x390>
 801ad62:	2300      	movs	r3, #0
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	f000 8097 	beq.w	801ae98 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	4a24      	ldr	r2, [pc, #144]	@ (801ae00 <HAL_DMA_Init+0x42c>)
 801ad70:	4293      	cmp	r3, r2
 801ad72:	d021      	beq.n	801adb8 <HAL_DMA_Init+0x3e4>
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	4a22      	ldr	r2, [pc, #136]	@ (801ae04 <HAL_DMA_Init+0x430>)
 801ad7a:	4293      	cmp	r3, r2
 801ad7c:	d01c      	beq.n	801adb8 <HAL_DMA_Init+0x3e4>
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	4a21      	ldr	r2, [pc, #132]	@ (801ae08 <HAL_DMA_Init+0x434>)
 801ad84:	4293      	cmp	r3, r2
 801ad86:	d017      	beq.n	801adb8 <HAL_DMA_Init+0x3e4>
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	4a1f      	ldr	r2, [pc, #124]	@ (801ae0c <HAL_DMA_Init+0x438>)
 801ad8e:	4293      	cmp	r3, r2
 801ad90:	d012      	beq.n	801adb8 <HAL_DMA_Init+0x3e4>
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	4a1e      	ldr	r2, [pc, #120]	@ (801ae10 <HAL_DMA_Init+0x43c>)
 801ad98:	4293      	cmp	r3, r2
 801ad9a:	d00d      	beq.n	801adb8 <HAL_DMA_Init+0x3e4>
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	4a1c      	ldr	r2, [pc, #112]	@ (801ae14 <HAL_DMA_Init+0x440>)
 801ada2:	4293      	cmp	r3, r2
 801ada4:	d008      	beq.n	801adb8 <HAL_DMA_Init+0x3e4>
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	4a1b      	ldr	r2, [pc, #108]	@ (801ae18 <HAL_DMA_Init+0x444>)
 801adac:	4293      	cmp	r3, r2
 801adae:	d003      	beq.n	801adb8 <HAL_DMA_Init+0x3e4>
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	4a19      	ldr	r2, [pc, #100]	@ (801ae1c <HAL_DMA_Init+0x448>)
 801adb6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	2202      	movs	r2, #2
 801adbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	2200      	movs	r2, #0
 801adc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801add0:	697a      	ldr	r2, [r7, #20]
 801add2:	4b13      	ldr	r3, [pc, #76]	@ (801ae20 <HAL_DMA_Init+0x44c>)
 801add4:	4013      	ands	r3, r2
 801add6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	689b      	ldr	r3, [r3, #8]
 801addc:	2b40      	cmp	r3, #64	@ 0x40
 801adde:	d021      	beq.n	801ae24 <HAL_DMA_Init+0x450>
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	689b      	ldr	r3, [r3, #8]
 801ade4:	2b80      	cmp	r3, #128	@ 0x80
 801ade6:	d102      	bne.n	801adee <HAL_DMA_Init+0x41a>
 801ade8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801adec:	e01b      	b.n	801ae26 <HAL_DMA_Init+0x452>
 801adee:	2300      	movs	r3, #0
 801adf0:	e019      	b.n	801ae26 <HAL_DMA_Init+0x452>
 801adf2:	bf00      	nop
 801adf4:	fe10803f 	.word	0xfe10803f
 801adf8:	5c001000 	.word	0x5c001000
 801adfc:	ffff0000 	.word	0xffff0000
 801ae00:	58025408 	.word	0x58025408
 801ae04:	5802541c 	.word	0x5802541c
 801ae08:	58025430 	.word	0x58025430
 801ae0c:	58025444 	.word	0x58025444
 801ae10:	58025458 	.word	0x58025458
 801ae14:	5802546c 	.word	0x5802546c
 801ae18:	58025480 	.word	0x58025480
 801ae1c:	58025494 	.word	0x58025494
 801ae20:	fffe000f 	.word	0xfffe000f
 801ae24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801ae26:	687a      	ldr	r2, [r7, #4]
 801ae28:	68d2      	ldr	r2, [r2, #12]
 801ae2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801ae2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	691b      	ldr	r3, [r3, #16]
 801ae32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801ae34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	695b      	ldr	r3, [r3, #20]
 801ae3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801ae3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	699b      	ldr	r3, [r3, #24]
 801ae42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801ae44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	69db      	ldr	r3, [r3, #28]
 801ae4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801ae4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	6a1b      	ldr	r3, [r3, #32]
 801ae52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801ae54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801ae56:	697a      	ldr	r2, [r7, #20]
 801ae58:	4313      	orrs	r3, r2
 801ae5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	697a      	ldr	r2, [r7, #20]
 801ae62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	461a      	mov	r2, r3
 801ae6a:	4b6e      	ldr	r3, [pc, #440]	@ (801b024 <HAL_DMA_Init+0x650>)
 801ae6c:	4413      	add	r3, r2
 801ae6e:	4a6e      	ldr	r2, [pc, #440]	@ (801b028 <HAL_DMA_Init+0x654>)
 801ae70:	fba2 2303 	umull	r2, r3, r2, r3
 801ae74:	091b      	lsrs	r3, r3, #4
 801ae76:	009a      	lsls	r2, r3, #2
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801ae7c:	6878      	ldr	r0, [r7, #4]
 801ae7e:	f001 fa75 	bl	801c36c <DMA_CalcBaseAndBitshift>
 801ae82:	4603      	mov	r3, r0
 801ae84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ae8a:	f003 031f 	and.w	r3, r3, #31
 801ae8e:	2201      	movs	r2, #1
 801ae90:	409a      	lsls	r2, r3
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	605a      	str	r2, [r3, #4]
 801ae96:	e008      	b.n	801aeaa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	2240      	movs	r2, #64	@ 0x40
 801ae9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	2203      	movs	r2, #3
 801aea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801aea6:	2301      	movs	r3, #1
 801aea8:	e0b7      	b.n	801b01a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	4a5f      	ldr	r2, [pc, #380]	@ (801b02c <HAL_DMA_Init+0x658>)
 801aeb0:	4293      	cmp	r3, r2
 801aeb2:	d072      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	4a5d      	ldr	r2, [pc, #372]	@ (801b030 <HAL_DMA_Init+0x65c>)
 801aeba:	4293      	cmp	r3, r2
 801aebc:	d06d      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	4a5c      	ldr	r2, [pc, #368]	@ (801b034 <HAL_DMA_Init+0x660>)
 801aec4:	4293      	cmp	r3, r2
 801aec6:	d068      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	4a5a      	ldr	r2, [pc, #360]	@ (801b038 <HAL_DMA_Init+0x664>)
 801aece:	4293      	cmp	r3, r2
 801aed0:	d063      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	4a59      	ldr	r2, [pc, #356]	@ (801b03c <HAL_DMA_Init+0x668>)
 801aed8:	4293      	cmp	r3, r2
 801aeda:	d05e      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	4a57      	ldr	r2, [pc, #348]	@ (801b040 <HAL_DMA_Init+0x66c>)
 801aee2:	4293      	cmp	r3, r2
 801aee4:	d059      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	4a56      	ldr	r2, [pc, #344]	@ (801b044 <HAL_DMA_Init+0x670>)
 801aeec:	4293      	cmp	r3, r2
 801aeee:	d054      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	4a54      	ldr	r2, [pc, #336]	@ (801b048 <HAL_DMA_Init+0x674>)
 801aef6:	4293      	cmp	r3, r2
 801aef8:	d04f      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	4a53      	ldr	r2, [pc, #332]	@ (801b04c <HAL_DMA_Init+0x678>)
 801af00:	4293      	cmp	r3, r2
 801af02:	d04a      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	681b      	ldr	r3, [r3, #0]
 801af08:	4a51      	ldr	r2, [pc, #324]	@ (801b050 <HAL_DMA_Init+0x67c>)
 801af0a:	4293      	cmp	r3, r2
 801af0c:	d045      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	4a50      	ldr	r2, [pc, #320]	@ (801b054 <HAL_DMA_Init+0x680>)
 801af14:	4293      	cmp	r3, r2
 801af16:	d040      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	4a4e      	ldr	r2, [pc, #312]	@ (801b058 <HAL_DMA_Init+0x684>)
 801af1e:	4293      	cmp	r3, r2
 801af20:	d03b      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	4a4d      	ldr	r2, [pc, #308]	@ (801b05c <HAL_DMA_Init+0x688>)
 801af28:	4293      	cmp	r3, r2
 801af2a:	d036      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	4a4b      	ldr	r2, [pc, #300]	@ (801b060 <HAL_DMA_Init+0x68c>)
 801af32:	4293      	cmp	r3, r2
 801af34:	d031      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	4a4a      	ldr	r2, [pc, #296]	@ (801b064 <HAL_DMA_Init+0x690>)
 801af3c:	4293      	cmp	r3, r2
 801af3e:	d02c      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	4a48      	ldr	r2, [pc, #288]	@ (801b068 <HAL_DMA_Init+0x694>)
 801af46:	4293      	cmp	r3, r2
 801af48:	d027      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	4a47      	ldr	r2, [pc, #284]	@ (801b06c <HAL_DMA_Init+0x698>)
 801af50:	4293      	cmp	r3, r2
 801af52:	d022      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	4a45      	ldr	r2, [pc, #276]	@ (801b070 <HAL_DMA_Init+0x69c>)
 801af5a:	4293      	cmp	r3, r2
 801af5c:	d01d      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	4a44      	ldr	r2, [pc, #272]	@ (801b074 <HAL_DMA_Init+0x6a0>)
 801af64:	4293      	cmp	r3, r2
 801af66:	d018      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	4a42      	ldr	r2, [pc, #264]	@ (801b078 <HAL_DMA_Init+0x6a4>)
 801af6e:	4293      	cmp	r3, r2
 801af70:	d013      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	4a41      	ldr	r2, [pc, #260]	@ (801b07c <HAL_DMA_Init+0x6a8>)
 801af78:	4293      	cmp	r3, r2
 801af7a:	d00e      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	4a3f      	ldr	r2, [pc, #252]	@ (801b080 <HAL_DMA_Init+0x6ac>)
 801af82:	4293      	cmp	r3, r2
 801af84:	d009      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	4a3e      	ldr	r2, [pc, #248]	@ (801b084 <HAL_DMA_Init+0x6b0>)
 801af8c:	4293      	cmp	r3, r2
 801af8e:	d004      	beq.n	801af9a <HAL_DMA_Init+0x5c6>
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	4a3c      	ldr	r2, [pc, #240]	@ (801b088 <HAL_DMA_Init+0x6b4>)
 801af96:	4293      	cmp	r3, r2
 801af98:	d101      	bne.n	801af9e <HAL_DMA_Init+0x5ca>
 801af9a:	2301      	movs	r3, #1
 801af9c:	e000      	b.n	801afa0 <HAL_DMA_Init+0x5cc>
 801af9e:	2300      	movs	r3, #0
 801afa0:	2b00      	cmp	r3, #0
 801afa2:	d032      	beq.n	801b00a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801afa4:	6878      	ldr	r0, [r7, #4]
 801afa6:	f001 fb0f 	bl	801c5c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	689b      	ldr	r3, [r3, #8]
 801afae:	2b80      	cmp	r3, #128	@ 0x80
 801afb0:	d102      	bne.n	801afb8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	2200      	movs	r2, #0
 801afb6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	685a      	ldr	r2, [r3, #4]
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801afc0:	b2d2      	uxtb	r2, r2
 801afc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801afc8:	687a      	ldr	r2, [r7, #4]
 801afca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801afcc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	685b      	ldr	r3, [r3, #4]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d010      	beq.n	801aff8 <HAL_DMA_Init+0x624>
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	685b      	ldr	r3, [r3, #4]
 801afda:	2b08      	cmp	r3, #8
 801afdc:	d80c      	bhi.n	801aff8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801afde:	6878      	ldr	r0, [r7, #4]
 801afe0:	f001 fb8c 	bl	801c6fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801afe8:	2200      	movs	r2, #0
 801afea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aff0:	687a      	ldr	r2, [r7, #4]
 801aff2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801aff4:	605a      	str	r2, [r3, #4]
 801aff6:	e008      	b.n	801b00a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	2200      	movs	r2, #0
 801affc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	2200      	movs	r2, #0
 801b002:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	2200      	movs	r2, #0
 801b008:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	2200      	movs	r2, #0
 801b00e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	2201      	movs	r2, #1
 801b014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801b018:	2300      	movs	r3, #0
}
 801b01a:	4618      	mov	r0, r3
 801b01c:	3718      	adds	r7, #24
 801b01e:	46bd      	mov	sp, r7
 801b020:	bd80      	pop	{r7, pc}
 801b022:	bf00      	nop
 801b024:	a7fdabf8 	.word	0xa7fdabf8
 801b028:	cccccccd 	.word	0xcccccccd
 801b02c:	40020010 	.word	0x40020010
 801b030:	40020028 	.word	0x40020028
 801b034:	40020040 	.word	0x40020040
 801b038:	40020058 	.word	0x40020058
 801b03c:	40020070 	.word	0x40020070
 801b040:	40020088 	.word	0x40020088
 801b044:	400200a0 	.word	0x400200a0
 801b048:	400200b8 	.word	0x400200b8
 801b04c:	40020410 	.word	0x40020410
 801b050:	40020428 	.word	0x40020428
 801b054:	40020440 	.word	0x40020440
 801b058:	40020458 	.word	0x40020458
 801b05c:	40020470 	.word	0x40020470
 801b060:	40020488 	.word	0x40020488
 801b064:	400204a0 	.word	0x400204a0
 801b068:	400204b8 	.word	0x400204b8
 801b06c:	58025408 	.word	0x58025408
 801b070:	5802541c 	.word	0x5802541c
 801b074:	58025430 	.word	0x58025430
 801b078:	58025444 	.word	0x58025444
 801b07c:	58025458 	.word	0x58025458
 801b080:	5802546c 	.word	0x5802546c
 801b084:	58025480 	.word	0x58025480
 801b088:	58025494 	.word	0x58025494

0801b08c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801b08c:	b580      	push	{r7, lr}
 801b08e:	b084      	sub	sp, #16
 801b090:	af00      	add	r7, sp, #0
 801b092:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d101      	bne.n	801b09e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801b09a:	2301      	movs	r3, #1
 801b09c:	e237      	b.n	801b50e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801b0a4:	b2db      	uxtb	r3, r3
 801b0a6:	2b02      	cmp	r3, #2
 801b0a8:	d004      	beq.n	801b0b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	2280      	movs	r2, #128	@ 0x80
 801b0ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801b0b0:	2301      	movs	r3, #1
 801b0b2:	e22c      	b.n	801b50e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	4a5c      	ldr	r2, [pc, #368]	@ (801b22c <HAL_DMA_Abort_IT+0x1a0>)
 801b0ba:	4293      	cmp	r3, r2
 801b0bc:	d04a      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	4a5b      	ldr	r2, [pc, #364]	@ (801b230 <HAL_DMA_Abort_IT+0x1a4>)
 801b0c4:	4293      	cmp	r3, r2
 801b0c6:	d045      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	4a59      	ldr	r2, [pc, #356]	@ (801b234 <HAL_DMA_Abort_IT+0x1a8>)
 801b0ce:	4293      	cmp	r3, r2
 801b0d0:	d040      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	4a58      	ldr	r2, [pc, #352]	@ (801b238 <HAL_DMA_Abort_IT+0x1ac>)
 801b0d8:	4293      	cmp	r3, r2
 801b0da:	d03b      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	4a56      	ldr	r2, [pc, #344]	@ (801b23c <HAL_DMA_Abort_IT+0x1b0>)
 801b0e2:	4293      	cmp	r3, r2
 801b0e4:	d036      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	4a55      	ldr	r2, [pc, #340]	@ (801b240 <HAL_DMA_Abort_IT+0x1b4>)
 801b0ec:	4293      	cmp	r3, r2
 801b0ee:	d031      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	4a53      	ldr	r2, [pc, #332]	@ (801b244 <HAL_DMA_Abort_IT+0x1b8>)
 801b0f6:	4293      	cmp	r3, r2
 801b0f8:	d02c      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	4a52      	ldr	r2, [pc, #328]	@ (801b248 <HAL_DMA_Abort_IT+0x1bc>)
 801b100:	4293      	cmp	r3, r2
 801b102:	d027      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	4a50      	ldr	r2, [pc, #320]	@ (801b24c <HAL_DMA_Abort_IT+0x1c0>)
 801b10a:	4293      	cmp	r3, r2
 801b10c:	d022      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	4a4f      	ldr	r2, [pc, #316]	@ (801b250 <HAL_DMA_Abort_IT+0x1c4>)
 801b114:	4293      	cmp	r3, r2
 801b116:	d01d      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	4a4d      	ldr	r2, [pc, #308]	@ (801b254 <HAL_DMA_Abort_IT+0x1c8>)
 801b11e:	4293      	cmp	r3, r2
 801b120:	d018      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	4a4c      	ldr	r2, [pc, #304]	@ (801b258 <HAL_DMA_Abort_IT+0x1cc>)
 801b128:	4293      	cmp	r3, r2
 801b12a:	d013      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	4a4a      	ldr	r2, [pc, #296]	@ (801b25c <HAL_DMA_Abort_IT+0x1d0>)
 801b132:	4293      	cmp	r3, r2
 801b134:	d00e      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	4a49      	ldr	r2, [pc, #292]	@ (801b260 <HAL_DMA_Abort_IT+0x1d4>)
 801b13c:	4293      	cmp	r3, r2
 801b13e:	d009      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	4a47      	ldr	r2, [pc, #284]	@ (801b264 <HAL_DMA_Abort_IT+0x1d8>)
 801b146:	4293      	cmp	r3, r2
 801b148:	d004      	beq.n	801b154 <HAL_DMA_Abort_IT+0xc8>
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	4a46      	ldr	r2, [pc, #280]	@ (801b268 <HAL_DMA_Abort_IT+0x1dc>)
 801b150:	4293      	cmp	r3, r2
 801b152:	d101      	bne.n	801b158 <HAL_DMA_Abort_IT+0xcc>
 801b154:	2301      	movs	r3, #1
 801b156:	e000      	b.n	801b15a <HAL_DMA_Abort_IT+0xce>
 801b158:	2300      	movs	r3, #0
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	f000 8086 	beq.w	801b26c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	2204      	movs	r2, #4
 801b164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	4a2f      	ldr	r2, [pc, #188]	@ (801b22c <HAL_DMA_Abort_IT+0x1a0>)
 801b16e:	4293      	cmp	r3, r2
 801b170:	d04a      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	4a2e      	ldr	r2, [pc, #184]	@ (801b230 <HAL_DMA_Abort_IT+0x1a4>)
 801b178:	4293      	cmp	r3, r2
 801b17a:	d045      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	4a2c      	ldr	r2, [pc, #176]	@ (801b234 <HAL_DMA_Abort_IT+0x1a8>)
 801b182:	4293      	cmp	r3, r2
 801b184:	d040      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	4a2b      	ldr	r2, [pc, #172]	@ (801b238 <HAL_DMA_Abort_IT+0x1ac>)
 801b18c:	4293      	cmp	r3, r2
 801b18e:	d03b      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	4a29      	ldr	r2, [pc, #164]	@ (801b23c <HAL_DMA_Abort_IT+0x1b0>)
 801b196:	4293      	cmp	r3, r2
 801b198:	d036      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	4a28      	ldr	r2, [pc, #160]	@ (801b240 <HAL_DMA_Abort_IT+0x1b4>)
 801b1a0:	4293      	cmp	r3, r2
 801b1a2:	d031      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	4a26      	ldr	r2, [pc, #152]	@ (801b244 <HAL_DMA_Abort_IT+0x1b8>)
 801b1aa:	4293      	cmp	r3, r2
 801b1ac:	d02c      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	4a25      	ldr	r2, [pc, #148]	@ (801b248 <HAL_DMA_Abort_IT+0x1bc>)
 801b1b4:	4293      	cmp	r3, r2
 801b1b6:	d027      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	4a23      	ldr	r2, [pc, #140]	@ (801b24c <HAL_DMA_Abort_IT+0x1c0>)
 801b1be:	4293      	cmp	r3, r2
 801b1c0:	d022      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	4a22      	ldr	r2, [pc, #136]	@ (801b250 <HAL_DMA_Abort_IT+0x1c4>)
 801b1c8:	4293      	cmp	r3, r2
 801b1ca:	d01d      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	4a20      	ldr	r2, [pc, #128]	@ (801b254 <HAL_DMA_Abort_IT+0x1c8>)
 801b1d2:	4293      	cmp	r3, r2
 801b1d4:	d018      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	4a1f      	ldr	r2, [pc, #124]	@ (801b258 <HAL_DMA_Abort_IT+0x1cc>)
 801b1dc:	4293      	cmp	r3, r2
 801b1de:	d013      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	4a1d      	ldr	r2, [pc, #116]	@ (801b25c <HAL_DMA_Abort_IT+0x1d0>)
 801b1e6:	4293      	cmp	r3, r2
 801b1e8:	d00e      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	4a1c      	ldr	r2, [pc, #112]	@ (801b260 <HAL_DMA_Abort_IT+0x1d4>)
 801b1f0:	4293      	cmp	r3, r2
 801b1f2:	d009      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	4a1a      	ldr	r2, [pc, #104]	@ (801b264 <HAL_DMA_Abort_IT+0x1d8>)
 801b1fa:	4293      	cmp	r3, r2
 801b1fc:	d004      	beq.n	801b208 <HAL_DMA_Abort_IT+0x17c>
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	4a19      	ldr	r2, [pc, #100]	@ (801b268 <HAL_DMA_Abort_IT+0x1dc>)
 801b204:	4293      	cmp	r3, r2
 801b206:	d108      	bne.n	801b21a <HAL_DMA_Abort_IT+0x18e>
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	681a      	ldr	r2, [r3, #0]
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	f022 0201 	bic.w	r2, r2, #1
 801b216:	601a      	str	r2, [r3, #0]
 801b218:	e178      	b.n	801b50c <HAL_DMA_Abort_IT+0x480>
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	681a      	ldr	r2, [r3, #0]
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	f022 0201 	bic.w	r2, r2, #1
 801b228:	601a      	str	r2, [r3, #0]
 801b22a:	e16f      	b.n	801b50c <HAL_DMA_Abort_IT+0x480>
 801b22c:	40020010 	.word	0x40020010
 801b230:	40020028 	.word	0x40020028
 801b234:	40020040 	.word	0x40020040
 801b238:	40020058 	.word	0x40020058
 801b23c:	40020070 	.word	0x40020070
 801b240:	40020088 	.word	0x40020088
 801b244:	400200a0 	.word	0x400200a0
 801b248:	400200b8 	.word	0x400200b8
 801b24c:	40020410 	.word	0x40020410
 801b250:	40020428 	.word	0x40020428
 801b254:	40020440 	.word	0x40020440
 801b258:	40020458 	.word	0x40020458
 801b25c:	40020470 	.word	0x40020470
 801b260:	40020488 	.word	0x40020488
 801b264:	400204a0 	.word	0x400204a0
 801b268:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	681a      	ldr	r2, [r3, #0]
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	f022 020e 	bic.w	r2, r2, #14
 801b27a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	4a6c      	ldr	r2, [pc, #432]	@ (801b434 <HAL_DMA_Abort_IT+0x3a8>)
 801b282:	4293      	cmp	r3, r2
 801b284:	d04a      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	4a6b      	ldr	r2, [pc, #428]	@ (801b438 <HAL_DMA_Abort_IT+0x3ac>)
 801b28c:	4293      	cmp	r3, r2
 801b28e:	d045      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	4a69      	ldr	r2, [pc, #420]	@ (801b43c <HAL_DMA_Abort_IT+0x3b0>)
 801b296:	4293      	cmp	r3, r2
 801b298:	d040      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	4a68      	ldr	r2, [pc, #416]	@ (801b440 <HAL_DMA_Abort_IT+0x3b4>)
 801b2a0:	4293      	cmp	r3, r2
 801b2a2:	d03b      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	4a66      	ldr	r2, [pc, #408]	@ (801b444 <HAL_DMA_Abort_IT+0x3b8>)
 801b2aa:	4293      	cmp	r3, r2
 801b2ac:	d036      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	681b      	ldr	r3, [r3, #0]
 801b2b2:	4a65      	ldr	r2, [pc, #404]	@ (801b448 <HAL_DMA_Abort_IT+0x3bc>)
 801b2b4:	4293      	cmp	r3, r2
 801b2b6:	d031      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	681b      	ldr	r3, [r3, #0]
 801b2bc:	4a63      	ldr	r2, [pc, #396]	@ (801b44c <HAL_DMA_Abort_IT+0x3c0>)
 801b2be:	4293      	cmp	r3, r2
 801b2c0:	d02c      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	4a62      	ldr	r2, [pc, #392]	@ (801b450 <HAL_DMA_Abort_IT+0x3c4>)
 801b2c8:	4293      	cmp	r3, r2
 801b2ca:	d027      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	4a60      	ldr	r2, [pc, #384]	@ (801b454 <HAL_DMA_Abort_IT+0x3c8>)
 801b2d2:	4293      	cmp	r3, r2
 801b2d4:	d022      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	4a5f      	ldr	r2, [pc, #380]	@ (801b458 <HAL_DMA_Abort_IT+0x3cc>)
 801b2dc:	4293      	cmp	r3, r2
 801b2de:	d01d      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	4a5d      	ldr	r2, [pc, #372]	@ (801b45c <HAL_DMA_Abort_IT+0x3d0>)
 801b2e6:	4293      	cmp	r3, r2
 801b2e8:	d018      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	4a5c      	ldr	r2, [pc, #368]	@ (801b460 <HAL_DMA_Abort_IT+0x3d4>)
 801b2f0:	4293      	cmp	r3, r2
 801b2f2:	d013      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	4a5a      	ldr	r2, [pc, #360]	@ (801b464 <HAL_DMA_Abort_IT+0x3d8>)
 801b2fa:	4293      	cmp	r3, r2
 801b2fc:	d00e      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	4a59      	ldr	r2, [pc, #356]	@ (801b468 <HAL_DMA_Abort_IT+0x3dc>)
 801b304:	4293      	cmp	r3, r2
 801b306:	d009      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	4a57      	ldr	r2, [pc, #348]	@ (801b46c <HAL_DMA_Abort_IT+0x3e0>)
 801b30e:	4293      	cmp	r3, r2
 801b310:	d004      	beq.n	801b31c <HAL_DMA_Abort_IT+0x290>
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	4a56      	ldr	r2, [pc, #344]	@ (801b470 <HAL_DMA_Abort_IT+0x3e4>)
 801b318:	4293      	cmp	r3, r2
 801b31a:	d108      	bne.n	801b32e <HAL_DMA_Abort_IT+0x2a2>
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	681a      	ldr	r2, [r3, #0]
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	f022 0201 	bic.w	r2, r2, #1
 801b32a:	601a      	str	r2, [r3, #0]
 801b32c:	e007      	b.n	801b33e <HAL_DMA_Abort_IT+0x2b2>
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	681a      	ldr	r2, [r3, #0]
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	f022 0201 	bic.w	r2, r2, #1
 801b33c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	4a3c      	ldr	r2, [pc, #240]	@ (801b434 <HAL_DMA_Abort_IT+0x3a8>)
 801b344:	4293      	cmp	r3, r2
 801b346:	d072      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	4a3a      	ldr	r2, [pc, #232]	@ (801b438 <HAL_DMA_Abort_IT+0x3ac>)
 801b34e:	4293      	cmp	r3, r2
 801b350:	d06d      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	4a39      	ldr	r2, [pc, #228]	@ (801b43c <HAL_DMA_Abort_IT+0x3b0>)
 801b358:	4293      	cmp	r3, r2
 801b35a:	d068      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	4a37      	ldr	r2, [pc, #220]	@ (801b440 <HAL_DMA_Abort_IT+0x3b4>)
 801b362:	4293      	cmp	r3, r2
 801b364:	d063      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	4a36      	ldr	r2, [pc, #216]	@ (801b444 <HAL_DMA_Abort_IT+0x3b8>)
 801b36c:	4293      	cmp	r3, r2
 801b36e:	d05e      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	4a34      	ldr	r2, [pc, #208]	@ (801b448 <HAL_DMA_Abort_IT+0x3bc>)
 801b376:	4293      	cmp	r3, r2
 801b378:	d059      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	4a33      	ldr	r2, [pc, #204]	@ (801b44c <HAL_DMA_Abort_IT+0x3c0>)
 801b380:	4293      	cmp	r3, r2
 801b382:	d054      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	4a31      	ldr	r2, [pc, #196]	@ (801b450 <HAL_DMA_Abort_IT+0x3c4>)
 801b38a:	4293      	cmp	r3, r2
 801b38c:	d04f      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	4a30      	ldr	r2, [pc, #192]	@ (801b454 <HAL_DMA_Abort_IT+0x3c8>)
 801b394:	4293      	cmp	r3, r2
 801b396:	d04a      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	4a2e      	ldr	r2, [pc, #184]	@ (801b458 <HAL_DMA_Abort_IT+0x3cc>)
 801b39e:	4293      	cmp	r3, r2
 801b3a0:	d045      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	4a2d      	ldr	r2, [pc, #180]	@ (801b45c <HAL_DMA_Abort_IT+0x3d0>)
 801b3a8:	4293      	cmp	r3, r2
 801b3aa:	d040      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	4a2b      	ldr	r2, [pc, #172]	@ (801b460 <HAL_DMA_Abort_IT+0x3d4>)
 801b3b2:	4293      	cmp	r3, r2
 801b3b4:	d03b      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	4a2a      	ldr	r2, [pc, #168]	@ (801b464 <HAL_DMA_Abort_IT+0x3d8>)
 801b3bc:	4293      	cmp	r3, r2
 801b3be:	d036      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	4a28      	ldr	r2, [pc, #160]	@ (801b468 <HAL_DMA_Abort_IT+0x3dc>)
 801b3c6:	4293      	cmp	r3, r2
 801b3c8:	d031      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	4a27      	ldr	r2, [pc, #156]	@ (801b46c <HAL_DMA_Abort_IT+0x3e0>)
 801b3d0:	4293      	cmp	r3, r2
 801b3d2:	d02c      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	4a25      	ldr	r2, [pc, #148]	@ (801b470 <HAL_DMA_Abort_IT+0x3e4>)
 801b3da:	4293      	cmp	r3, r2
 801b3dc:	d027      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	4a24      	ldr	r2, [pc, #144]	@ (801b474 <HAL_DMA_Abort_IT+0x3e8>)
 801b3e4:	4293      	cmp	r3, r2
 801b3e6:	d022      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	4a22      	ldr	r2, [pc, #136]	@ (801b478 <HAL_DMA_Abort_IT+0x3ec>)
 801b3ee:	4293      	cmp	r3, r2
 801b3f0:	d01d      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	4a21      	ldr	r2, [pc, #132]	@ (801b47c <HAL_DMA_Abort_IT+0x3f0>)
 801b3f8:	4293      	cmp	r3, r2
 801b3fa:	d018      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	4a1f      	ldr	r2, [pc, #124]	@ (801b480 <HAL_DMA_Abort_IT+0x3f4>)
 801b402:	4293      	cmp	r3, r2
 801b404:	d013      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	4a1e      	ldr	r2, [pc, #120]	@ (801b484 <HAL_DMA_Abort_IT+0x3f8>)
 801b40c:	4293      	cmp	r3, r2
 801b40e:	d00e      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	4a1c      	ldr	r2, [pc, #112]	@ (801b488 <HAL_DMA_Abort_IT+0x3fc>)
 801b416:	4293      	cmp	r3, r2
 801b418:	d009      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	4a1b      	ldr	r2, [pc, #108]	@ (801b48c <HAL_DMA_Abort_IT+0x400>)
 801b420:	4293      	cmp	r3, r2
 801b422:	d004      	beq.n	801b42e <HAL_DMA_Abort_IT+0x3a2>
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	4a19      	ldr	r2, [pc, #100]	@ (801b490 <HAL_DMA_Abort_IT+0x404>)
 801b42a:	4293      	cmp	r3, r2
 801b42c:	d132      	bne.n	801b494 <HAL_DMA_Abort_IT+0x408>
 801b42e:	2301      	movs	r3, #1
 801b430:	e031      	b.n	801b496 <HAL_DMA_Abort_IT+0x40a>
 801b432:	bf00      	nop
 801b434:	40020010 	.word	0x40020010
 801b438:	40020028 	.word	0x40020028
 801b43c:	40020040 	.word	0x40020040
 801b440:	40020058 	.word	0x40020058
 801b444:	40020070 	.word	0x40020070
 801b448:	40020088 	.word	0x40020088
 801b44c:	400200a0 	.word	0x400200a0
 801b450:	400200b8 	.word	0x400200b8
 801b454:	40020410 	.word	0x40020410
 801b458:	40020428 	.word	0x40020428
 801b45c:	40020440 	.word	0x40020440
 801b460:	40020458 	.word	0x40020458
 801b464:	40020470 	.word	0x40020470
 801b468:	40020488 	.word	0x40020488
 801b46c:	400204a0 	.word	0x400204a0
 801b470:	400204b8 	.word	0x400204b8
 801b474:	58025408 	.word	0x58025408
 801b478:	5802541c 	.word	0x5802541c
 801b47c:	58025430 	.word	0x58025430
 801b480:	58025444 	.word	0x58025444
 801b484:	58025458 	.word	0x58025458
 801b488:	5802546c 	.word	0x5802546c
 801b48c:	58025480 	.word	0x58025480
 801b490:	58025494 	.word	0x58025494
 801b494:	2300      	movs	r3, #0
 801b496:	2b00      	cmp	r3, #0
 801b498:	d028      	beq.n	801b4ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b49e:	681a      	ldr	r2, [r3, #0]
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b4a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b4a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b4ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b4b4:	f003 031f 	and.w	r3, r3, #31
 801b4b8:	2201      	movs	r2, #1
 801b4ba:	409a      	lsls	r2, r3
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b4c4:	687a      	ldr	r2, [r7, #4]
 801b4c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801b4c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d00c      	beq.n	801b4ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b4d6:	681a      	ldr	r2, [r3, #0]
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b4dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b4e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b4e6:	687a      	ldr	r2, [r7, #4]
 801b4e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b4ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	2201      	movs	r2, #1
 801b4f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	2200      	movs	r2, #0
 801b4f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b500:	2b00      	cmp	r3, #0
 801b502:	d003      	beq.n	801b50c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b508:	6878      	ldr	r0, [r7, #4]
 801b50a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801b50c:	2300      	movs	r3, #0
}
 801b50e:	4618      	mov	r0, r3
 801b510:	3710      	adds	r7, #16
 801b512:	46bd      	mov	sp, r7
 801b514:	bd80      	pop	{r7, pc}
 801b516:	bf00      	nop

0801b518 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b518:	b580      	push	{r7, lr}
 801b51a:	b08a      	sub	sp, #40	@ 0x28
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801b520:	2300      	movs	r3, #0
 801b522:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801b524:	4b67      	ldr	r3, [pc, #412]	@ (801b6c4 <HAL_DMA_IRQHandler+0x1ac>)
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	4a67      	ldr	r2, [pc, #412]	@ (801b6c8 <HAL_DMA_IRQHandler+0x1b0>)
 801b52a:	fba2 2303 	umull	r2, r3, r2, r3
 801b52e:	0a9b      	lsrs	r3, r3, #10
 801b530:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b536:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b53c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801b53e:	6a3b      	ldr	r3, [r7, #32]
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801b544:	69fb      	ldr	r3, [r7, #28]
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	4a5f      	ldr	r2, [pc, #380]	@ (801b6cc <HAL_DMA_IRQHandler+0x1b4>)
 801b550:	4293      	cmp	r3, r2
 801b552:	d04a      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	4a5d      	ldr	r2, [pc, #372]	@ (801b6d0 <HAL_DMA_IRQHandler+0x1b8>)
 801b55a:	4293      	cmp	r3, r2
 801b55c:	d045      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	681b      	ldr	r3, [r3, #0]
 801b562:	4a5c      	ldr	r2, [pc, #368]	@ (801b6d4 <HAL_DMA_IRQHandler+0x1bc>)
 801b564:	4293      	cmp	r3, r2
 801b566:	d040      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	4a5a      	ldr	r2, [pc, #360]	@ (801b6d8 <HAL_DMA_IRQHandler+0x1c0>)
 801b56e:	4293      	cmp	r3, r2
 801b570:	d03b      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	4a59      	ldr	r2, [pc, #356]	@ (801b6dc <HAL_DMA_IRQHandler+0x1c4>)
 801b578:	4293      	cmp	r3, r2
 801b57a:	d036      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	4a57      	ldr	r2, [pc, #348]	@ (801b6e0 <HAL_DMA_IRQHandler+0x1c8>)
 801b582:	4293      	cmp	r3, r2
 801b584:	d031      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	4a56      	ldr	r2, [pc, #344]	@ (801b6e4 <HAL_DMA_IRQHandler+0x1cc>)
 801b58c:	4293      	cmp	r3, r2
 801b58e:	d02c      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	4a54      	ldr	r2, [pc, #336]	@ (801b6e8 <HAL_DMA_IRQHandler+0x1d0>)
 801b596:	4293      	cmp	r3, r2
 801b598:	d027      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	4a53      	ldr	r2, [pc, #332]	@ (801b6ec <HAL_DMA_IRQHandler+0x1d4>)
 801b5a0:	4293      	cmp	r3, r2
 801b5a2:	d022      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	4a51      	ldr	r2, [pc, #324]	@ (801b6f0 <HAL_DMA_IRQHandler+0x1d8>)
 801b5aa:	4293      	cmp	r3, r2
 801b5ac:	d01d      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	4a50      	ldr	r2, [pc, #320]	@ (801b6f4 <HAL_DMA_IRQHandler+0x1dc>)
 801b5b4:	4293      	cmp	r3, r2
 801b5b6:	d018      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	4a4e      	ldr	r2, [pc, #312]	@ (801b6f8 <HAL_DMA_IRQHandler+0x1e0>)
 801b5be:	4293      	cmp	r3, r2
 801b5c0:	d013      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	4a4d      	ldr	r2, [pc, #308]	@ (801b6fc <HAL_DMA_IRQHandler+0x1e4>)
 801b5c8:	4293      	cmp	r3, r2
 801b5ca:	d00e      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	4a4b      	ldr	r2, [pc, #300]	@ (801b700 <HAL_DMA_IRQHandler+0x1e8>)
 801b5d2:	4293      	cmp	r3, r2
 801b5d4:	d009      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	4a4a      	ldr	r2, [pc, #296]	@ (801b704 <HAL_DMA_IRQHandler+0x1ec>)
 801b5dc:	4293      	cmp	r3, r2
 801b5de:	d004      	beq.n	801b5ea <HAL_DMA_IRQHandler+0xd2>
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	4a48      	ldr	r2, [pc, #288]	@ (801b708 <HAL_DMA_IRQHandler+0x1f0>)
 801b5e6:	4293      	cmp	r3, r2
 801b5e8:	d101      	bne.n	801b5ee <HAL_DMA_IRQHandler+0xd6>
 801b5ea:	2301      	movs	r3, #1
 801b5ec:	e000      	b.n	801b5f0 <HAL_DMA_IRQHandler+0xd8>
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	f000 842b 	beq.w	801be4c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b5fa:	f003 031f 	and.w	r3, r3, #31
 801b5fe:	2208      	movs	r2, #8
 801b600:	409a      	lsls	r2, r3
 801b602:	69bb      	ldr	r3, [r7, #24]
 801b604:	4013      	ands	r3, r2
 801b606:	2b00      	cmp	r3, #0
 801b608:	f000 80a2 	beq.w	801b750 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	4a2e      	ldr	r2, [pc, #184]	@ (801b6cc <HAL_DMA_IRQHandler+0x1b4>)
 801b612:	4293      	cmp	r3, r2
 801b614:	d04a      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	4a2d      	ldr	r2, [pc, #180]	@ (801b6d0 <HAL_DMA_IRQHandler+0x1b8>)
 801b61c:	4293      	cmp	r3, r2
 801b61e:	d045      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	4a2b      	ldr	r2, [pc, #172]	@ (801b6d4 <HAL_DMA_IRQHandler+0x1bc>)
 801b626:	4293      	cmp	r3, r2
 801b628:	d040      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	4a2a      	ldr	r2, [pc, #168]	@ (801b6d8 <HAL_DMA_IRQHandler+0x1c0>)
 801b630:	4293      	cmp	r3, r2
 801b632:	d03b      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	4a28      	ldr	r2, [pc, #160]	@ (801b6dc <HAL_DMA_IRQHandler+0x1c4>)
 801b63a:	4293      	cmp	r3, r2
 801b63c:	d036      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	4a27      	ldr	r2, [pc, #156]	@ (801b6e0 <HAL_DMA_IRQHandler+0x1c8>)
 801b644:	4293      	cmp	r3, r2
 801b646:	d031      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	4a25      	ldr	r2, [pc, #148]	@ (801b6e4 <HAL_DMA_IRQHandler+0x1cc>)
 801b64e:	4293      	cmp	r3, r2
 801b650:	d02c      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	4a24      	ldr	r2, [pc, #144]	@ (801b6e8 <HAL_DMA_IRQHandler+0x1d0>)
 801b658:	4293      	cmp	r3, r2
 801b65a:	d027      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	4a22      	ldr	r2, [pc, #136]	@ (801b6ec <HAL_DMA_IRQHandler+0x1d4>)
 801b662:	4293      	cmp	r3, r2
 801b664:	d022      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	4a21      	ldr	r2, [pc, #132]	@ (801b6f0 <HAL_DMA_IRQHandler+0x1d8>)
 801b66c:	4293      	cmp	r3, r2
 801b66e:	d01d      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	4a1f      	ldr	r2, [pc, #124]	@ (801b6f4 <HAL_DMA_IRQHandler+0x1dc>)
 801b676:	4293      	cmp	r3, r2
 801b678:	d018      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	4a1e      	ldr	r2, [pc, #120]	@ (801b6f8 <HAL_DMA_IRQHandler+0x1e0>)
 801b680:	4293      	cmp	r3, r2
 801b682:	d013      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	4a1c      	ldr	r2, [pc, #112]	@ (801b6fc <HAL_DMA_IRQHandler+0x1e4>)
 801b68a:	4293      	cmp	r3, r2
 801b68c:	d00e      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	4a1b      	ldr	r2, [pc, #108]	@ (801b700 <HAL_DMA_IRQHandler+0x1e8>)
 801b694:	4293      	cmp	r3, r2
 801b696:	d009      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	4a19      	ldr	r2, [pc, #100]	@ (801b704 <HAL_DMA_IRQHandler+0x1ec>)
 801b69e:	4293      	cmp	r3, r2
 801b6a0:	d004      	beq.n	801b6ac <HAL_DMA_IRQHandler+0x194>
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	681b      	ldr	r3, [r3, #0]
 801b6a6:	4a18      	ldr	r2, [pc, #96]	@ (801b708 <HAL_DMA_IRQHandler+0x1f0>)
 801b6a8:	4293      	cmp	r3, r2
 801b6aa:	d12f      	bne.n	801b70c <HAL_DMA_IRQHandler+0x1f4>
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	f003 0304 	and.w	r3, r3, #4
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	bf14      	ite	ne
 801b6ba:	2301      	movne	r3, #1
 801b6bc:	2300      	moveq	r3, #0
 801b6be:	b2db      	uxtb	r3, r3
 801b6c0:	e02e      	b.n	801b720 <HAL_DMA_IRQHandler+0x208>
 801b6c2:	bf00      	nop
 801b6c4:	20000000 	.word	0x20000000
 801b6c8:	1b4e81b5 	.word	0x1b4e81b5
 801b6cc:	40020010 	.word	0x40020010
 801b6d0:	40020028 	.word	0x40020028
 801b6d4:	40020040 	.word	0x40020040
 801b6d8:	40020058 	.word	0x40020058
 801b6dc:	40020070 	.word	0x40020070
 801b6e0:	40020088 	.word	0x40020088
 801b6e4:	400200a0 	.word	0x400200a0
 801b6e8:	400200b8 	.word	0x400200b8
 801b6ec:	40020410 	.word	0x40020410
 801b6f0:	40020428 	.word	0x40020428
 801b6f4:	40020440 	.word	0x40020440
 801b6f8:	40020458 	.word	0x40020458
 801b6fc:	40020470 	.word	0x40020470
 801b700:	40020488 	.word	0x40020488
 801b704:	400204a0 	.word	0x400204a0
 801b708:	400204b8 	.word	0x400204b8
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	f003 0308 	and.w	r3, r3, #8
 801b716:	2b00      	cmp	r3, #0
 801b718:	bf14      	ite	ne
 801b71a:	2301      	movne	r3, #1
 801b71c:	2300      	moveq	r3, #0
 801b71e:	b2db      	uxtb	r3, r3
 801b720:	2b00      	cmp	r3, #0
 801b722:	d015      	beq.n	801b750 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	681b      	ldr	r3, [r3, #0]
 801b728:	681a      	ldr	r2, [r3, #0]
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	f022 0204 	bic.w	r2, r2, #4
 801b732:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b738:	f003 031f 	and.w	r3, r3, #31
 801b73c:	2208      	movs	r2, #8
 801b73e:	409a      	lsls	r2, r3
 801b740:	6a3b      	ldr	r3, [r7, #32]
 801b742:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b748:	f043 0201 	orr.w	r2, r3, #1
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b754:	f003 031f 	and.w	r3, r3, #31
 801b758:	69ba      	ldr	r2, [r7, #24]
 801b75a:	fa22 f303 	lsr.w	r3, r2, r3
 801b75e:	f003 0301 	and.w	r3, r3, #1
 801b762:	2b00      	cmp	r3, #0
 801b764:	d06e      	beq.n	801b844 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	4a69      	ldr	r2, [pc, #420]	@ (801b910 <HAL_DMA_IRQHandler+0x3f8>)
 801b76c:	4293      	cmp	r3, r2
 801b76e:	d04a      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	4a67      	ldr	r2, [pc, #412]	@ (801b914 <HAL_DMA_IRQHandler+0x3fc>)
 801b776:	4293      	cmp	r3, r2
 801b778:	d045      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	4a66      	ldr	r2, [pc, #408]	@ (801b918 <HAL_DMA_IRQHandler+0x400>)
 801b780:	4293      	cmp	r3, r2
 801b782:	d040      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	4a64      	ldr	r2, [pc, #400]	@ (801b91c <HAL_DMA_IRQHandler+0x404>)
 801b78a:	4293      	cmp	r3, r2
 801b78c:	d03b      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	4a63      	ldr	r2, [pc, #396]	@ (801b920 <HAL_DMA_IRQHandler+0x408>)
 801b794:	4293      	cmp	r3, r2
 801b796:	d036      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	4a61      	ldr	r2, [pc, #388]	@ (801b924 <HAL_DMA_IRQHandler+0x40c>)
 801b79e:	4293      	cmp	r3, r2
 801b7a0:	d031      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	4a60      	ldr	r2, [pc, #384]	@ (801b928 <HAL_DMA_IRQHandler+0x410>)
 801b7a8:	4293      	cmp	r3, r2
 801b7aa:	d02c      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	4a5e      	ldr	r2, [pc, #376]	@ (801b92c <HAL_DMA_IRQHandler+0x414>)
 801b7b2:	4293      	cmp	r3, r2
 801b7b4:	d027      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	4a5d      	ldr	r2, [pc, #372]	@ (801b930 <HAL_DMA_IRQHandler+0x418>)
 801b7bc:	4293      	cmp	r3, r2
 801b7be:	d022      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	4a5b      	ldr	r2, [pc, #364]	@ (801b934 <HAL_DMA_IRQHandler+0x41c>)
 801b7c6:	4293      	cmp	r3, r2
 801b7c8:	d01d      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	4a5a      	ldr	r2, [pc, #360]	@ (801b938 <HAL_DMA_IRQHandler+0x420>)
 801b7d0:	4293      	cmp	r3, r2
 801b7d2:	d018      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	4a58      	ldr	r2, [pc, #352]	@ (801b93c <HAL_DMA_IRQHandler+0x424>)
 801b7da:	4293      	cmp	r3, r2
 801b7dc:	d013      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	4a57      	ldr	r2, [pc, #348]	@ (801b940 <HAL_DMA_IRQHandler+0x428>)
 801b7e4:	4293      	cmp	r3, r2
 801b7e6:	d00e      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	681b      	ldr	r3, [r3, #0]
 801b7ec:	4a55      	ldr	r2, [pc, #340]	@ (801b944 <HAL_DMA_IRQHandler+0x42c>)
 801b7ee:	4293      	cmp	r3, r2
 801b7f0:	d009      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	4a54      	ldr	r2, [pc, #336]	@ (801b948 <HAL_DMA_IRQHandler+0x430>)
 801b7f8:	4293      	cmp	r3, r2
 801b7fa:	d004      	beq.n	801b806 <HAL_DMA_IRQHandler+0x2ee>
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	4a52      	ldr	r2, [pc, #328]	@ (801b94c <HAL_DMA_IRQHandler+0x434>)
 801b802:	4293      	cmp	r3, r2
 801b804:	d10a      	bne.n	801b81c <HAL_DMA_IRQHandler+0x304>
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	695b      	ldr	r3, [r3, #20]
 801b80c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b810:	2b00      	cmp	r3, #0
 801b812:	bf14      	ite	ne
 801b814:	2301      	movne	r3, #1
 801b816:	2300      	moveq	r3, #0
 801b818:	b2db      	uxtb	r3, r3
 801b81a:	e003      	b.n	801b824 <HAL_DMA_IRQHandler+0x30c>
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	681b      	ldr	r3, [r3, #0]
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	2300      	movs	r3, #0
 801b824:	2b00      	cmp	r3, #0
 801b826:	d00d      	beq.n	801b844 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b82c:	f003 031f 	and.w	r3, r3, #31
 801b830:	2201      	movs	r2, #1
 801b832:	409a      	lsls	r2, r3
 801b834:	6a3b      	ldr	r3, [r7, #32]
 801b836:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b83c:	f043 0202 	orr.w	r2, r3, #2
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b848:	f003 031f 	and.w	r3, r3, #31
 801b84c:	2204      	movs	r2, #4
 801b84e:	409a      	lsls	r2, r3
 801b850:	69bb      	ldr	r3, [r7, #24]
 801b852:	4013      	ands	r3, r2
 801b854:	2b00      	cmp	r3, #0
 801b856:	f000 808f 	beq.w	801b978 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	4a2c      	ldr	r2, [pc, #176]	@ (801b910 <HAL_DMA_IRQHandler+0x3f8>)
 801b860:	4293      	cmp	r3, r2
 801b862:	d04a      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	4a2a      	ldr	r2, [pc, #168]	@ (801b914 <HAL_DMA_IRQHandler+0x3fc>)
 801b86a:	4293      	cmp	r3, r2
 801b86c:	d045      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	4a29      	ldr	r2, [pc, #164]	@ (801b918 <HAL_DMA_IRQHandler+0x400>)
 801b874:	4293      	cmp	r3, r2
 801b876:	d040      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	4a27      	ldr	r2, [pc, #156]	@ (801b91c <HAL_DMA_IRQHandler+0x404>)
 801b87e:	4293      	cmp	r3, r2
 801b880:	d03b      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	681b      	ldr	r3, [r3, #0]
 801b886:	4a26      	ldr	r2, [pc, #152]	@ (801b920 <HAL_DMA_IRQHandler+0x408>)
 801b888:	4293      	cmp	r3, r2
 801b88a:	d036      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	681b      	ldr	r3, [r3, #0]
 801b890:	4a24      	ldr	r2, [pc, #144]	@ (801b924 <HAL_DMA_IRQHandler+0x40c>)
 801b892:	4293      	cmp	r3, r2
 801b894:	d031      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	4a23      	ldr	r2, [pc, #140]	@ (801b928 <HAL_DMA_IRQHandler+0x410>)
 801b89c:	4293      	cmp	r3, r2
 801b89e:	d02c      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	4a21      	ldr	r2, [pc, #132]	@ (801b92c <HAL_DMA_IRQHandler+0x414>)
 801b8a6:	4293      	cmp	r3, r2
 801b8a8:	d027      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	4a20      	ldr	r2, [pc, #128]	@ (801b930 <HAL_DMA_IRQHandler+0x418>)
 801b8b0:	4293      	cmp	r3, r2
 801b8b2:	d022      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	4a1e      	ldr	r2, [pc, #120]	@ (801b934 <HAL_DMA_IRQHandler+0x41c>)
 801b8ba:	4293      	cmp	r3, r2
 801b8bc:	d01d      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	4a1d      	ldr	r2, [pc, #116]	@ (801b938 <HAL_DMA_IRQHandler+0x420>)
 801b8c4:	4293      	cmp	r3, r2
 801b8c6:	d018      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	4a1b      	ldr	r2, [pc, #108]	@ (801b93c <HAL_DMA_IRQHandler+0x424>)
 801b8ce:	4293      	cmp	r3, r2
 801b8d0:	d013      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	4a1a      	ldr	r2, [pc, #104]	@ (801b940 <HAL_DMA_IRQHandler+0x428>)
 801b8d8:	4293      	cmp	r3, r2
 801b8da:	d00e      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	4a18      	ldr	r2, [pc, #96]	@ (801b944 <HAL_DMA_IRQHandler+0x42c>)
 801b8e2:	4293      	cmp	r3, r2
 801b8e4:	d009      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	4a17      	ldr	r2, [pc, #92]	@ (801b948 <HAL_DMA_IRQHandler+0x430>)
 801b8ec:	4293      	cmp	r3, r2
 801b8ee:	d004      	beq.n	801b8fa <HAL_DMA_IRQHandler+0x3e2>
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	4a15      	ldr	r2, [pc, #84]	@ (801b94c <HAL_DMA_IRQHandler+0x434>)
 801b8f6:	4293      	cmp	r3, r2
 801b8f8:	d12a      	bne.n	801b950 <HAL_DMA_IRQHandler+0x438>
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	f003 0302 	and.w	r3, r3, #2
 801b904:	2b00      	cmp	r3, #0
 801b906:	bf14      	ite	ne
 801b908:	2301      	movne	r3, #1
 801b90a:	2300      	moveq	r3, #0
 801b90c:	b2db      	uxtb	r3, r3
 801b90e:	e023      	b.n	801b958 <HAL_DMA_IRQHandler+0x440>
 801b910:	40020010 	.word	0x40020010
 801b914:	40020028 	.word	0x40020028
 801b918:	40020040 	.word	0x40020040
 801b91c:	40020058 	.word	0x40020058
 801b920:	40020070 	.word	0x40020070
 801b924:	40020088 	.word	0x40020088
 801b928:	400200a0 	.word	0x400200a0
 801b92c:	400200b8 	.word	0x400200b8
 801b930:	40020410 	.word	0x40020410
 801b934:	40020428 	.word	0x40020428
 801b938:	40020440 	.word	0x40020440
 801b93c:	40020458 	.word	0x40020458
 801b940:	40020470 	.word	0x40020470
 801b944:	40020488 	.word	0x40020488
 801b948:	400204a0 	.word	0x400204a0
 801b94c:	400204b8 	.word	0x400204b8
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	2300      	movs	r3, #0
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d00d      	beq.n	801b978 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b960:	f003 031f 	and.w	r3, r3, #31
 801b964:	2204      	movs	r2, #4
 801b966:	409a      	lsls	r2, r3
 801b968:	6a3b      	ldr	r3, [r7, #32]
 801b96a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b970:	f043 0204 	orr.w	r2, r3, #4
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b97c:	f003 031f 	and.w	r3, r3, #31
 801b980:	2210      	movs	r2, #16
 801b982:	409a      	lsls	r2, r3
 801b984:	69bb      	ldr	r3, [r7, #24]
 801b986:	4013      	ands	r3, r2
 801b988:	2b00      	cmp	r3, #0
 801b98a:	f000 80a6 	beq.w	801bada <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	4a85      	ldr	r2, [pc, #532]	@ (801bba8 <HAL_DMA_IRQHandler+0x690>)
 801b994:	4293      	cmp	r3, r2
 801b996:	d04a      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	4a83      	ldr	r2, [pc, #524]	@ (801bbac <HAL_DMA_IRQHandler+0x694>)
 801b99e:	4293      	cmp	r3, r2
 801b9a0:	d045      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	4a82      	ldr	r2, [pc, #520]	@ (801bbb0 <HAL_DMA_IRQHandler+0x698>)
 801b9a8:	4293      	cmp	r3, r2
 801b9aa:	d040      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	4a80      	ldr	r2, [pc, #512]	@ (801bbb4 <HAL_DMA_IRQHandler+0x69c>)
 801b9b2:	4293      	cmp	r3, r2
 801b9b4:	d03b      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	681b      	ldr	r3, [r3, #0]
 801b9ba:	4a7f      	ldr	r2, [pc, #508]	@ (801bbb8 <HAL_DMA_IRQHandler+0x6a0>)
 801b9bc:	4293      	cmp	r3, r2
 801b9be:	d036      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	4a7d      	ldr	r2, [pc, #500]	@ (801bbbc <HAL_DMA_IRQHandler+0x6a4>)
 801b9c6:	4293      	cmp	r3, r2
 801b9c8:	d031      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	4a7c      	ldr	r2, [pc, #496]	@ (801bbc0 <HAL_DMA_IRQHandler+0x6a8>)
 801b9d0:	4293      	cmp	r3, r2
 801b9d2:	d02c      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	4a7a      	ldr	r2, [pc, #488]	@ (801bbc4 <HAL_DMA_IRQHandler+0x6ac>)
 801b9da:	4293      	cmp	r3, r2
 801b9dc:	d027      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	4a79      	ldr	r2, [pc, #484]	@ (801bbc8 <HAL_DMA_IRQHandler+0x6b0>)
 801b9e4:	4293      	cmp	r3, r2
 801b9e6:	d022      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	681b      	ldr	r3, [r3, #0]
 801b9ec:	4a77      	ldr	r2, [pc, #476]	@ (801bbcc <HAL_DMA_IRQHandler+0x6b4>)
 801b9ee:	4293      	cmp	r3, r2
 801b9f0:	d01d      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	4a76      	ldr	r2, [pc, #472]	@ (801bbd0 <HAL_DMA_IRQHandler+0x6b8>)
 801b9f8:	4293      	cmp	r3, r2
 801b9fa:	d018      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	4a74      	ldr	r2, [pc, #464]	@ (801bbd4 <HAL_DMA_IRQHandler+0x6bc>)
 801ba02:	4293      	cmp	r3, r2
 801ba04:	d013      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	4a73      	ldr	r2, [pc, #460]	@ (801bbd8 <HAL_DMA_IRQHandler+0x6c0>)
 801ba0c:	4293      	cmp	r3, r2
 801ba0e:	d00e      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	4a71      	ldr	r2, [pc, #452]	@ (801bbdc <HAL_DMA_IRQHandler+0x6c4>)
 801ba16:	4293      	cmp	r3, r2
 801ba18:	d009      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	4a70      	ldr	r2, [pc, #448]	@ (801bbe0 <HAL_DMA_IRQHandler+0x6c8>)
 801ba20:	4293      	cmp	r3, r2
 801ba22:	d004      	beq.n	801ba2e <HAL_DMA_IRQHandler+0x516>
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	4a6e      	ldr	r2, [pc, #440]	@ (801bbe4 <HAL_DMA_IRQHandler+0x6cc>)
 801ba2a:	4293      	cmp	r3, r2
 801ba2c:	d10a      	bne.n	801ba44 <HAL_DMA_IRQHandler+0x52c>
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	f003 0308 	and.w	r3, r3, #8
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	bf14      	ite	ne
 801ba3c:	2301      	movne	r3, #1
 801ba3e:	2300      	moveq	r3, #0
 801ba40:	b2db      	uxtb	r3, r3
 801ba42:	e009      	b.n	801ba58 <HAL_DMA_IRQHandler+0x540>
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	f003 0304 	and.w	r3, r3, #4
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	bf14      	ite	ne
 801ba52:	2301      	movne	r3, #1
 801ba54:	2300      	moveq	r3, #0
 801ba56:	b2db      	uxtb	r3, r3
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d03e      	beq.n	801bada <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ba60:	f003 031f 	and.w	r3, r3, #31
 801ba64:	2210      	movs	r2, #16
 801ba66:	409a      	lsls	r2, r3
 801ba68:	6a3b      	ldr	r3, [r7, #32]
 801ba6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d018      	beq.n	801baac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	681b      	ldr	r3, [r3, #0]
 801ba80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d108      	bne.n	801ba9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d024      	beq.n	801bada <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ba94:	6878      	ldr	r0, [r7, #4]
 801ba96:	4798      	blx	r3
 801ba98:	e01f      	b.n	801bada <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d01b      	beq.n	801bada <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801baa6:	6878      	ldr	r0, [r7, #4]
 801baa8:	4798      	blx	r3
 801baaa:	e016      	b.n	801bada <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d107      	bne.n	801baca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	681a      	ldr	r2, [r3, #0]
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	f022 0208 	bic.w	r2, r2, #8
 801bac8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d003      	beq.n	801bada <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bad6:	6878      	ldr	r0, [r7, #4]
 801bad8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bade:	f003 031f 	and.w	r3, r3, #31
 801bae2:	2220      	movs	r2, #32
 801bae4:	409a      	lsls	r2, r3
 801bae6:	69bb      	ldr	r3, [r7, #24]
 801bae8:	4013      	ands	r3, r2
 801baea:	2b00      	cmp	r3, #0
 801baec:	f000 8110 	beq.w	801bd10 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	4a2c      	ldr	r2, [pc, #176]	@ (801bba8 <HAL_DMA_IRQHandler+0x690>)
 801baf6:	4293      	cmp	r3, r2
 801baf8:	d04a      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	4a2b      	ldr	r2, [pc, #172]	@ (801bbac <HAL_DMA_IRQHandler+0x694>)
 801bb00:	4293      	cmp	r3, r2
 801bb02:	d045      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	4a29      	ldr	r2, [pc, #164]	@ (801bbb0 <HAL_DMA_IRQHandler+0x698>)
 801bb0a:	4293      	cmp	r3, r2
 801bb0c:	d040      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	4a28      	ldr	r2, [pc, #160]	@ (801bbb4 <HAL_DMA_IRQHandler+0x69c>)
 801bb14:	4293      	cmp	r3, r2
 801bb16:	d03b      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	4a26      	ldr	r2, [pc, #152]	@ (801bbb8 <HAL_DMA_IRQHandler+0x6a0>)
 801bb1e:	4293      	cmp	r3, r2
 801bb20:	d036      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	4a25      	ldr	r2, [pc, #148]	@ (801bbbc <HAL_DMA_IRQHandler+0x6a4>)
 801bb28:	4293      	cmp	r3, r2
 801bb2a:	d031      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	4a23      	ldr	r2, [pc, #140]	@ (801bbc0 <HAL_DMA_IRQHandler+0x6a8>)
 801bb32:	4293      	cmp	r3, r2
 801bb34:	d02c      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	4a22      	ldr	r2, [pc, #136]	@ (801bbc4 <HAL_DMA_IRQHandler+0x6ac>)
 801bb3c:	4293      	cmp	r3, r2
 801bb3e:	d027      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	4a20      	ldr	r2, [pc, #128]	@ (801bbc8 <HAL_DMA_IRQHandler+0x6b0>)
 801bb46:	4293      	cmp	r3, r2
 801bb48:	d022      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	4a1f      	ldr	r2, [pc, #124]	@ (801bbcc <HAL_DMA_IRQHandler+0x6b4>)
 801bb50:	4293      	cmp	r3, r2
 801bb52:	d01d      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	4a1d      	ldr	r2, [pc, #116]	@ (801bbd0 <HAL_DMA_IRQHandler+0x6b8>)
 801bb5a:	4293      	cmp	r3, r2
 801bb5c:	d018      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	4a1c      	ldr	r2, [pc, #112]	@ (801bbd4 <HAL_DMA_IRQHandler+0x6bc>)
 801bb64:	4293      	cmp	r3, r2
 801bb66:	d013      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	4a1a      	ldr	r2, [pc, #104]	@ (801bbd8 <HAL_DMA_IRQHandler+0x6c0>)
 801bb6e:	4293      	cmp	r3, r2
 801bb70:	d00e      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	4a19      	ldr	r2, [pc, #100]	@ (801bbdc <HAL_DMA_IRQHandler+0x6c4>)
 801bb78:	4293      	cmp	r3, r2
 801bb7a:	d009      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	4a17      	ldr	r2, [pc, #92]	@ (801bbe0 <HAL_DMA_IRQHandler+0x6c8>)
 801bb82:	4293      	cmp	r3, r2
 801bb84:	d004      	beq.n	801bb90 <HAL_DMA_IRQHandler+0x678>
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	4a16      	ldr	r2, [pc, #88]	@ (801bbe4 <HAL_DMA_IRQHandler+0x6cc>)
 801bb8c:	4293      	cmp	r3, r2
 801bb8e:	d12b      	bne.n	801bbe8 <HAL_DMA_IRQHandler+0x6d0>
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	f003 0310 	and.w	r3, r3, #16
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	bf14      	ite	ne
 801bb9e:	2301      	movne	r3, #1
 801bba0:	2300      	moveq	r3, #0
 801bba2:	b2db      	uxtb	r3, r3
 801bba4:	e02a      	b.n	801bbfc <HAL_DMA_IRQHandler+0x6e4>
 801bba6:	bf00      	nop
 801bba8:	40020010 	.word	0x40020010
 801bbac:	40020028 	.word	0x40020028
 801bbb0:	40020040 	.word	0x40020040
 801bbb4:	40020058 	.word	0x40020058
 801bbb8:	40020070 	.word	0x40020070
 801bbbc:	40020088 	.word	0x40020088
 801bbc0:	400200a0 	.word	0x400200a0
 801bbc4:	400200b8 	.word	0x400200b8
 801bbc8:	40020410 	.word	0x40020410
 801bbcc:	40020428 	.word	0x40020428
 801bbd0:	40020440 	.word	0x40020440
 801bbd4:	40020458 	.word	0x40020458
 801bbd8:	40020470 	.word	0x40020470
 801bbdc:	40020488 	.word	0x40020488
 801bbe0:	400204a0 	.word	0x400204a0
 801bbe4:	400204b8 	.word	0x400204b8
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	f003 0302 	and.w	r3, r3, #2
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	bf14      	ite	ne
 801bbf6:	2301      	movne	r3, #1
 801bbf8:	2300      	moveq	r3, #0
 801bbfa:	b2db      	uxtb	r3, r3
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	f000 8087 	beq.w	801bd10 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bc06:	f003 031f 	and.w	r3, r3, #31
 801bc0a:	2220      	movs	r2, #32
 801bc0c:	409a      	lsls	r2, r3
 801bc0e:	6a3b      	ldr	r3, [r7, #32]
 801bc10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801bc18:	b2db      	uxtb	r3, r3
 801bc1a:	2b04      	cmp	r3, #4
 801bc1c:	d139      	bne.n	801bc92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	681a      	ldr	r2, [r3, #0]
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	f022 0216 	bic.w	r2, r2, #22
 801bc2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	695a      	ldr	r2, [r3, #20]
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801bc3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d103      	bne.n	801bc4e <HAL_DMA_IRQHandler+0x736>
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d007      	beq.n	801bc5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	681a      	ldr	r2, [r3, #0]
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	f022 0208 	bic.w	r2, r2, #8
 801bc5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bc62:	f003 031f 	and.w	r3, r3, #31
 801bc66:	223f      	movs	r2, #63	@ 0x3f
 801bc68:	409a      	lsls	r2, r3
 801bc6a:	6a3b      	ldr	r3, [r7, #32]
 801bc6c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	2201      	movs	r2, #1
 801bc72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	2200      	movs	r2, #0
 801bc7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	f000 834a 	beq.w	801c31c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bc8c:	6878      	ldr	r0, [r7, #4]
 801bc8e:	4798      	blx	r3
          }
          return;
 801bc90:	e344      	b.n	801c31c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	681b      	ldr	r3, [r3, #0]
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d018      	beq.n	801bcd2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d108      	bne.n	801bcc0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d02c      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bcba:	6878      	ldr	r0, [r7, #4]
 801bcbc:	4798      	blx	r3
 801bcbe:	e027      	b.n	801bd10 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d023      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bccc:	6878      	ldr	r0, [r7, #4]
 801bcce:	4798      	blx	r3
 801bcd0:	e01e      	b.n	801bd10 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d10f      	bne.n	801bd00 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	681a      	ldr	r2, [r3, #0]
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	f022 0210 	bic.w	r2, r2, #16
 801bcee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	2201      	movs	r2, #1
 801bcf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d003      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bd0c:	6878      	ldr	r0, [r7, #4]
 801bd0e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	f000 8306 	beq.w	801c326 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bd1e:	f003 0301 	and.w	r3, r3, #1
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	f000 8088 	beq.w	801be38 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	2204      	movs	r2, #4
 801bd2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	4a7a      	ldr	r2, [pc, #488]	@ (801bf20 <HAL_DMA_IRQHandler+0xa08>)
 801bd36:	4293      	cmp	r3, r2
 801bd38:	d04a      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	681b      	ldr	r3, [r3, #0]
 801bd3e:	4a79      	ldr	r2, [pc, #484]	@ (801bf24 <HAL_DMA_IRQHandler+0xa0c>)
 801bd40:	4293      	cmp	r3, r2
 801bd42:	d045      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	4a77      	ldr	r2, [pc, #476]	@ (801bf28 <HAL_DMA_IRQHandler+0xa10>)
 801bd4a:	4293      	cmp	r3, r2
 801bd4c:	d040      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	4a76      	ldr	r2, [pc, #472]	@ (801bf2c <HAL_DMA_IRQHandler+0xa14>)
 801bd54:	4293      	cmp	r3, r2
 801bd56:	d03b      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	4a74      	ldr	r2, [pc, #464]	@ (801bf30 <HAL_DMA_IRQHandler+0xa18>)
 801bd5e:	4293      	cmp	r3, r2
 801bd60:	d036      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	4a73      	ldr	r2, [pc, #460]	@ (801bf34 <HAL_DMA_IRQHandler+0xa1c>)
 801bd68:	4293      	cmp	r3, r2
 801bd6a:	d031      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	4a71      	ldr	r2, [pc, #452]	@ (801bf38 <HAL_DMA_IRQHandler+0xa20>)
 801bd72:	4293      	cmp	r3, r2
 801bd74:	d02c      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	4a70      	ldr	r2, [pc, #448]	@ (801bf3c <HAL_DMA_IRQHandler+0xa24>)
 801bd7c:	4293      	cmp	r3, r2
 801bd7e:	d027      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	4a6e      	ldr	r2, [pc, #440]	@ (801bf40 <HAL_DMA_IRQHandler+0xa28>)
 801bd86:	4293      	cmp	r3, r2
 801bd88:	d022      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	4a6d      	ldr	r2, [pc, #436]	@ (801bf44 <HAL_DMA_IRQHandler+0xa2c>)
 801bd90:	4293      	cmp	r3, r2
 801bd92:	d01d      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	4a6b      	ldr	r2, [pc, #428]	@ (801bf48 <HAL_DMA_IRQHandler+0xa30>)
 801bd9a:	4293      	cmp	r3, r2
 801bd9c:	d018      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	4a6a      	ldr	r2, [pc, #424]	@ (801bf4c <HAL_DMA_IRQHandler+0xa34>)
 801bda4:	4293      	cmp	r3, r2
 801bda6:	d013      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	4a68      	ldr	r2, [pc, #416]	@ (801bf50 <HAL_DMA_IRQHandler+0xa38>)
 801bdae:	4293      	cmp	r3, r2
 801bdb0:	d00e      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	4a67      	ldr	r2, [pc, #412]	@ (801bf54 <HAL_DMA_IRQHandler+0xa3c>)
 801bdb8:	4293      	cmp	r3, r2
 801bdba:	d009      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	4a65      	ldr	r2, [pc, #404]	@ (801bf58 <HAL_DMA_IRQHandler+0xa40>)
 801bdc2:	4293      	cmp	r3, r2
 801bdc4:	d004      	beq.n	801bdd0 <HAL_DMA_IRQHandler+0x8b8>
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	4a64      	ldr	r2, [pc, #400]	@ (801bf5c <HAL_DMA_IRQHandler+0xa44>)
 801bdcc:	4293      	cmp	r3, r2
 801bdce:	d108      	bne.n	801bde2 <HAL_DMA_IRQHandler+0x8ca>
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	681a      	ldr	r2, [r3, #0]
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	f022 0201 	bic.w	r2, r2, #1
 801bdde:	601a      	str	r2, [r3, #0]
 801bde0:	e007      	b.n	801bdf2 <HAL_DMA_IRQHandler+0x8da>
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	681a      	ldr	r2, [r3, #0]
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	f022 0201 	bic.w	r2, r2, #1
 801bdf0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	3301      	adds	r3, #1
 801bdf6:	60fb      	str	r3, [r7, #12]
 801bdf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bdfa:	429a      	cmp	r2, r3
 801bdfc:	d307      	bcc.n	801be0e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	681b      	ldr	r3, [r3, #0]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	f003 0301 	and.w	r3, r3, #1
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d1f2      	bne.n	801bdf2 <HAL_DMA_IRQHandler+0x8da>
 801be0c:	e000      	b.n	801be10 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801be0e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	f003 0301 	and.w	r3, r3, #1
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d004      	beq.n	801be28 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	2203      	movs	r2, #3
 801be22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801be26:	e003      	b.n	801be30 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	2201      	movs	r2, #1
 801be2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	2200      	movs	r2, #0
 801be34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	f000 8272 	beq.w	801c326 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801be46:	6878      	ldr	r0, [r7, #4]
 801be48:	4798      	blx	r3
 801be4a:	e26c      	b.n	801c326 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	4a43      	ldr	r2, [pc, #268]	@ (801bf60 <HAL_DMA_IRQHandler+0xa48>)
 801be52:	4293      	cmp	r3, r2
 801be54:	d022      	beq.n	801be9c <HAL_DMA_IRQHandler+0x984>
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	4a42      	ldr	r2, [pc, #264]	@ (801bf64 <HAL_DMA_IRQHandler+0xa4c>)
 801be5c:	4293      	cmp	r3, r2
 801be5e:	d01d      	beq.n	801be9c <HAL_DMA_IRQHandler+0x984>
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	4a40      	ldr	r2, [pc, #256]	@ (801bf68 <HAL_DMA_IRQHandler+0xa50>)
 801be66:	4293      	cmp	r3, r2
 801be68:	d018      	beq.n	801be9c <HAL_DMA_IRQHandler+0x984>
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	681b      	ldr	r3, [r3, #0]
 801be6e:	4a3f      	ldr	r2, [pc, #252]	@ (801bf6c <HAL_DMA_IRQHandler+0xa54>)
 801be70:	4293      	cmp	r3, r2
 801be72:	d013      	beq.n	801be9c <HAL_DMA_IRQHandler+0x984>
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	4a3d      	ldr	r2, [pc, #244]	@ (801bf70 <HAL_DMA_IRQHandler+0xa58>)
 801be7a:	4293      	cmp	r3, r2
 801be7c:	d00e      	beq.n	801be9c <HAL_DMA_IRQHandler+0x984>
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	4a3c      	ldr	r2, [pc, #240]	@ (801bf74 <HAL_DMA_IRQHandler+0xa5c>)
 801be84:	4293      	cmp	r3, r2
 801be86:	d009      	beq.n	801be9c <HAL_DMA_IRQHandler+0x984>
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	4a3a      	ldr	r2, [pc, #232]	@ (801bf78 <HAL_DMA_IRQHandler+0xa60>)
 801be8e:	4293      	cmp	r3, r2
 801be90:	d004      	beq.n	801be9c <HAL_DMA_IRQHandler+0x984>
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	4a39      	ldr	r2, [pc, #228]	@ (801bf7c <HAL_DMA_IRQHandler+0xa64>)
 801be98:	4293      	cmp	r3, r2
 801be9a:	d101      	bne.n	801bea0 <HAL_DMA_IRQHandler+0x988>
 801be9c:	2301      	movs	r3, #1
 801be9e:	e000      	b.n	801bea2 <HAL_DMA_IRQHandler+0x98a>
 801bea0:	2300      	movs	r3, #0
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	f000 823f 	beq.w	801c326 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801beb4:	f003 031f 	and.w	r3, r3, #31
 801beb8:	2204      	movs	r2, #4
 801beba:	409a      	lsls	r2, r3
 801bebc:	697b      	ldr	r3, [r7, #20]
 801bebe:	4013      	ands	r3, r2
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	f000 80cd 	beq.w	801c060 <HAL_DMA_IRQHandler+0xb48>
 801bec6:	693b      	ldr	r3, [r7, #16]
 801bec8:	f003 0304 	and.w	r3, r3, #4
 801becc:	2b00      	cmp	r3, #0
 801bece:	f000 80c7 	beq.w	801c060 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bed6:	f003 031f 	and.w	r3, r3, #31
 801beda:	2204      	movs	r2, #4
 801bedc:	409a      	lsls	r2, r3
 801bede:	69fb      	ldr	r3, [r7, #28]
 801bee0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bee2:	693b      	ldr	r3, [r7, #16]
 801bee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d049      	beq.n	801bf80 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801beec:	693b      	ldr	r3, [r7, #16]
 801beee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d109      	bne.n	801bf0a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801befa:	2b00      	cmp	r3, #0
 801befc:	f000 8210 	beq.w	801c320 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bf04:	6878      	ldr	r0, [r7, #4]
 801bf06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bf08:	e20a      	b.n	801c320 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	f000 8206 	beq.w	801c320 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bf18:	6878      	ldr	r0, [r7, #4]
 801bf1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bf1c:	e200      	b.n	801c320 <HAL_DMA_IRQHandler+0xe08>
 801bf1e:	bf00      	nop
 801bf20:	40020010 	.word	0x40020010
 801bf24:	40020028 	.word	0x40020028
 801bf28:	40020040 	.word	0x40020040
 801bf2c:	40020058 	.word	0x40020058
 801bf30:	40020070 	.word	0x40020070
 801bf34:	40020088 	.word	0x40020088
 801bf38:	400200a0 	.word	0x400200a0
 801bf3c:	400200b8 	.word	0x400200b8
 801bf40:	40020410 	.word	0x40020410
 801bf44:	40020428 	.word	0x40020428
 801bf48:	40020440 	.word	0x40020440
 801bf4c:	40020458 	.word	0x40020458
 801bf50:	40020470 	.word	0x40020470
 801bf54:	40020488 	.word	0x40020488
 801bf58:	400204a0 	.word	0x400204a0
 801bf5c:	400204b8 	.word	0x400204b8
 801bf60:	58025408 	.word	0x58025408
 801bf64:	5802541c 	.word	0x5802541c
 801bf68:	58025430 	.word	0x58025430
 801bf6c:	58025444 	.word	0x58025444
 801bf70:	58025458 	.word	0x58025458
 801bf74:	5802546c 	.word	0x5802546c
 801bf78:	58025480 	.word	0x58025480
 801bf7c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801bf80:	693b      	ldr	r3, [r7, #16]
 801bf82:	f003 0320 	and.w	r3, r3, #32
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d160      	bne.n	801c04c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	681b      	ldr	r3, [r3, #0]
 801bf8e:	4a7f      	ldr	r2, [pc, #508]	@ (801c18c <HAL_DMA_IRQHandler+0xc74>)
 801bf90:	4293      	cmp	r3, r2
 801bf92:	d04a      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	681b      	ldr	r3, [r3, #0]
 801bf98:	4a7d      	ldr	r2, [pc, #500]	@ (801c190 <HAL_DMA_IRQHandler+0xc78>)
 801bf9a:	4293      	cmp	r3, r2
 801bf9c:	d045      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	681b      	ldr	r3, [r3, #0]
 801bfa2:	4a7c      	ldr	r2, [pc, #496]	@ (801c194 <HAL_DMA_IRQHandler+0xc7c>)
 801bfa4:	4293      	cmp	r3, r2
 801bfa6:	d040      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	4a7a      	ldr	r2, [pc, #488]	@ (801c198 <HAL_DMA_IRQHandler+0xc80>)
 801bfae:	4293      	cmp	r3, r2
 801bfb0:	d03b      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	4a79      	ldr	r2, [pc, #484]	@ (801c19c <HAL_DMA_IRQHandler+0xc84>)
 801bfb8:	4293      	cmp	r3, r2
 801bfba:	d036      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	4a77      	ldr	r2, [pc, #476]	@ (801c1a0 <HAL_DMA_IRQHandler+0xc88>)
 801bfc2:	4293      	cmp	r3, r2
 801bfc4:	d031      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	4a76      	ldr	r2, [pc, #472]	@ (801c1a4 <HAL_DMA_IRQHandler+0xc8c>)
 801bfcc:	4293      	cmp	r3, r2
 801bfce:	d02c      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	681b      	ldr	r3, [r3, #0]
 801bfd4:	4a74      	ldr	r2, [pc, #464]	@ (801c1a8 <HAL_DMA_IRQHandler+0xc90>)
 801bfd6:	4293      	cmp	r3, r2
 801bfd8:	d027      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	4a73      	ldr	r2, [pc, #460]	@ (801c1ac <HAL_DMA_IRQHandler+0xc94>)
 801bfe0:	4293      	cmp	r3, r2
 801bfe2:	d022      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	4a71      	ldr	r2, [pc, #452]	@ (801c1b0 <HAL_DMA_IRQHandler+0xc98>)
 801bfea:	4293      	cmp	r3, r2
 801bfec:	d01d      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	4a70      	ldr	r2, [pc, #448]	@ (801c1b4 <HAL_DMA_IRQHandler+0xc9c>)
 801bff4:	4293      	cmp	r3, r2
 801bff6:	d018      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	4a6e      	ldr	r2, [pc, #440]	@ (801c1b8 <HAL_DMA_IRQHandler+0xca0>)
 801bffe:	4293      	cmp	r3, r2
 801c000:	d013      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	4a6d      	ldr	r2, [pc, #436]	@ (801c1bc <HAL_DMA_IRQHandler+0xca4>)
 801c008:	4293      	cmp	r3, r2
 801c00a:	d00e      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	4a6b      	ldr	r2, [pc, #428]	@ (801c1c0 <HAL_DMA_IRQHandler+0xca8>)
 801c012:	4293      	cmp	r3, r2
 801c014:	d009      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	4a6a      	ldr	r2, [pc, #424]	@ (801c1c4 <HAL_DMA_IRQHandler+0xcac>)
 801c01c:	4293      	cmp	r3, r2
 801c01e:	d004      	beq.n	801c02a <HAL_DMA_IRQHandler+0xb12>
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	4a68      	ldr	r2, [pc, #416]	@ (801c1c8 <HAL_DMA_IRQHandler+0xcb0>)
 801c026:	4293      	cmp	r3, r2
 801c028:	d108      	bne.n	801c03c <HAL_DMA_IRQHandler+0xb24>
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	681a      	ldr	r2, [r3, #0]
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	f022 0208 	bic.w	r2, r2, #8
 801c038:	601a      	str	r2, [r3, #0]
 801c03a:	e007      	b.n	801c04c <HAL_DMA_IRQHandler+0xb34>
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	681a      	ldr	r2, [r3, #0]
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	f022 0204 	bic.w	r2, r2, #4
 801c04a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c050:	2b00      	cmp	r3, #0
 801c052:	f000 8165 	beq.w	801c320 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c05a:	6878      	ldr	r0, [r7, #4]
 801c05c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c05e:	e15f      	b.n	801c320 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c064:	f003 031f 	and.w	r3, r3, #31
 801c068:	2202      	movs	r2, #2
 801c06a:	409a      	lsls	r2, r3
 801c06c:	697b      	ldr	r3, [r7, #20]
 801c06e:	4013      	ands	r3, r2
 801c070:	2b00      	cmp	r3, #0
 801c072:	f000 80c5 	beq.w	801c200 <HAL_DMA_IRQHandler+0xce8>
 801c076:	693b      	ldr	r3, [r7, #16]
 801c078:	f003 0302 	and.w	r3, r3, #2
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	f000 80bf 	beq.w	801c200 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c086:	f003 031f 	and.w	r3, r3, #31
 801c08a:	2202      	movs	r2, #2
 801c08c:	409a      	lsls	r2, r3
 801c08e:	69fb      	ldr	r3, [r7, #28]
 801c090:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c092:	693b      	ldr	r3, [r7, #16]
 801c094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d018      	beq.n	801c0ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801c09c:	693b      	ldr	r3, [r7, #16]
 801c09e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d109      	bne.n	801c0ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	f000 813a 	beq.w	801c324 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c0b4:	6878      	ldr	r0, [r7, #4]
 801c0b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c0b8:	e134      	b.n	801c324 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	f000 8130 	beq.w	801c324 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c0c8:	6878      	ldr	r0, [r7, #4]
 801c0ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c0cc:	e12a      	b.n	801c324 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801c0ce:	693b      	ldr	r3, [r7, #16]
 801c0d0:	f003 0320 	and.w	r3, r3, #32
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	f040 8089 	bne.w	801c1ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	4a2b      	ldr	r2, [pc, #172]	@ (801c18c <HAL_DMA_IRQHandler+0xc74>)
 801c0e0:	4293      	cmp	r3, r2
 801c0e2:	d04a      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	4a29      	ldr	r2, [pc, #164]	@ (801c190 <HAL_DMA_IRQHandler+0xc78>)
 801c0ea:	4293      	cmp	r3, r2
 801c0ec:	d045      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	681b      	ldr	r3, [r3, #0]
 801c0f2:	4a28      	ldr	r2, [pc, #160]	@ (801c194 <HAL_DMA_IRQHandler+0xc7c>)
 801c0f4:	4293      	cmp	r3, r2
 801c0f6:	d040      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	4a26      	ldr	r2, [pc, #152]	@ (801c198 <HAL_DMA_IRQHandler+0xc80>)
 801c0fe:	4293      	cmp	r3, r2
 801c100:	d03b      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	4a25      	ldr	r2, [pc, #148]	@ (801c19c <HAL_DMA_IRQHandler+0xc84>)
 801c108:	4293      	cmp	r3, r2
 801c10a:	d036      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	4a23      	ldr	r2, [pc, #140]	@ (801c1a0 <HAL_DMA_IRQHandler+0xc88>)
 801c112:	4293      	cmp	r3, r2
 801c114:	d031      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	4a22      	ldr	r2, [pc, #136]	@ (801c1a4 <HAL_DMA_IRQHandler+0xc8c>)
 801c11c:	4293      	cmp	r3, r2
 801c11e:	d02c      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	4a20      	ldr	r2, [pc, #128]	@ (801c1a8 <HAL_DMA_IRQHandler+0xc90>)
 801c126:	4293      	cmp	r3, r2
 801c128:	d027      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	4a1f      	ldr	r2, [pc, #124]	@ (801c1ac <HAL_DMA_IRQHandler+0xc94>)
 801c130:	4293      	cmp	r3, r2
 801c132:	d022      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	4a1d      	ldr	r2, [pc, #116]	@ (801c1b0 <HAL_DMA_IRQHandler+0xc98>)
 801c13a:	4293      	cmp	r3, r2
 801c13c:	d01d      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	681b      	ldr	r3, [r3, #0]
 801c142:	4a1c      	ldr	r2, [pc, #112]	@ (801c1b4 <HAL_DMA_IRQHandler+0xc9c>)
 801c144:	4293      	cmp	r3, r2
 801c146:	d018      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	4a1a      	ldr	r2, [pc, #104]	@ (801c1b8 <HAL_DMA_IRQHandler+0xca0>)
 801c14e:	4293      	cmp	r3, r2
 801c150:	d013      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	4a19      	ldr	r2, [pc, #100]	@ (801c1bc <HAL_DMA_IRQHandler+0xca4>)
 801c158:	4293      	cmp	r3, r2
 801c15a:	d00e      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	4a17      	ldr	r2, [pc, #92]	@ (801c1c0 <HAL_DMA_IRQHandler+0xca8>)
 801c162:	4293      	cmp	r3, r2
 801c164:	d009      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	4a16      	ldr	r2, [pc, #88]	@ (801c1c4 <HAL_DMA_IRQHandler+0xcac>)
 801c16c:	4293      	cmp	r3, r2
 801c16e:	d004      	beq.n	801c17a <HAL_DMA_IRQHandler+0xc62>
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	4a14      	ldr	r2, [pc, #80]	@ (801c1c8 <HAL_DMA_IRQHandler+0xcb0>)
 801c176:	4293      	cmp	r3, r2
 801c178:	d128      	bne.n	801c1cc <HAL_DMA_IRQHandler+0xcb4>
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	681a      	ldr	r2, [r3, #0]
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	f022 0214 	bic.w	r2, r2, #20
 801c188:	601a      	str	r2, [r3, #0]
 801c18a:	e027      	b.n	801c1dc <HAL_DMA_IRQHandler+0xcc4>
 801c18c:	40020010 	.word	0x40020010
 801c190:	40020028 	.word	0x40020028
 801c194:	40020040 	.word	0x40020040
 801c198:	40020058 	.word	0x40020058
 801c19c:	40020070 	.word	0x40020070
 801c1a0:	40020088 	.word	0x40020088
 801c1a4:	400200a0 	.word	0x400200a0
 801c1a8:	400200b8 	.word	0x400200b8
 801c1ac:	40020410 	.word	0x40020410
 801c1b0:	40020428 	.word	0x40020428
 801c1b4:	40020440 	.word	0x40020440
 801c1b8:	40020458 	.word	0x40020458
 801c1bc:	40020470 	.word	0x40020470
 801c1c0:	40020488 	.word	0x40020488
 801c1c4:	400204a0 	.word	0x400204a0
 801c1c8:	400204b8 	.word	0x400204b8
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	681a      	ldr	r2, [r3, #0]
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	f022 020a 	bic.w	r2, r2, #10
 801c1da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	2201      	movs	r2, #1
 801c1e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	2200      	movs	r2, #0
 801c1e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	f000 8097 	beq.w	801c324 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c1fa:	6878      	ldr	r0, [r7, #4]
 801c1fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c1fe:	e091      	b.n	801c324 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c204:	f003 031f 	and.w	r3, r3, #31
 801c208:	2208      	movs	r2, #8
 801c20a:	409a      	lsls	r2, r3
 801c20c:	697b      	ldr	r3, [r7, #20]
 801c20e:	4013      	ands	r3, r2
 801c210:	2b00      	cmp	r3, #0
 801c212:	f000 8088 	beq.w	801c326 <HAL_DMA_IRQHandler+0xe0e>
 801c216:	693b      	ldr	r3, [r7, #16]
 801c218:	f003 0308 	and.w	r3, r3, #8
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	f000 8082 	beq.w	801c326 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	4a41      	ldr	r2, [pc, #260]	@ (801c32c <HAL_DMA_IRQHandler+0xe14>)
 801c228:	4293      	cmp	r3, r2
 801c22a:	d04a      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	4a3f      	ldr	r2, [pc, #252]	@ (801c330 <HAL_DMA_IRQHandler+0xe18>)
 801c232:	4293      	cmp	r3, r2
 801c234:	d045      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	4a3e      	ldr	r2, [pc, #248]	@ (801c334 <HAL_DMA_IRQHandler+0xe1c>)
 801c23c:	4293      	cmp	r3, r2
 801c23e:	d040      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	681b      	ldr	r3, [r3, #0]
 801c244:	4a3c      	ldr	r2, [pc, #240]	@ (801c338 <HAL_DMA_IRQHandler+0xe20>)
 801c246:	4293      	cmp	r3, r2
 801c248:	d03b      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	4a3b      	ldr	r2, [pc, #236]	@ (801c33c <HAL_DMA_IRQHandler+0xe24>)
 801c250:	4293      	cmp	r3, r2
 801c252:	d036      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	4a39      	ldr	r2, [pc, #228]	@ (801c340 <HAL_DMA_IRQHandler+0xe28>)
 801c25a:	4293      	cmp	r3, r2
 801c25c:	d031      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	4a38      	ldr	r2, [pc, #224]	@ (801c344 <HAL_DMA_IRQHandler+0xe2c>)
 801c264:	4293      	cmp	r3, r2
 801c266:	d02c      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	4a36      	ldr	r2, [pc, #216]	@ (801c348 <HAL_DMA_IRQHandler+0xe30>)
 801c26e:	4293      	cmp	r3, r2
 801c270:	d027      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	4a35      	ldr	r2, [pc, #212]	@ (801c34c <HAL_DMA_IRQHandler+0xe34>)
 801c278:	4293      	cmp	r3, r2
 801c27a:	d022      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	4a33      	ldr	r2, [pc, #204]	@ (801c350 <HAL_DMA_IRQHandler+0xe38>)
 801c282:	4293      	cmp	r3, r2
 801c284:	d01d      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	4a32      	ldr	r2, [pc, #200]	@ (801c354 <HAL_DMA_IRQHandler+0xe3c>)
 801c28c:	4293      	cmp	r3, r2
 801c28e:	d018      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	4a30      	ldr	r2, [pc, #192]	@ (801c358 <HAL_DMA_IRQHandler+0xe40>)
 801c296:	4293      	cmp	r3, r2
 801c298:	d013      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	4a2f      	ldr	r2, [pc, #188]	@ (801c35c <HAL_DMA_IRQHandler+0xe44>)
 801c2a0:	4293      	cmp	r3, r2
 801c2a2:	d00e      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	4a2d      	ldr	r2, [pc, #180]	@ (801c360 <HAL_DMA_IRQHandler+0xe48>)
 801c2aa:	4293      	cmp	r3, r2
 801c2ac:	d009      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	681b      	ldr	r3, [r3, #0]
 801c2b2:	4a2c      	ldr	r2, [pc, #176]	@ (801c364 <HAL_DMA_IRQHandler+0xe4c>)
 801c2b4:	4293      	cmp	r3, r2
 801c2b6:	d004      	beq.n	801c2c2 <HAL_DMA_IRQHandler+0xdaa>
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	4a2a      	ldr	r2, [pc, #168]	@ (801c368 <HAL_DMA_IRQHandler+0xe50>)
 801c2be:	4293      	cmp	r3, r2
 801c2c0:	d108      	bne.n	801c2d4 <HAL_DMA_IRQHandler+0xdbc>
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	681a      	ldr	r2, [r3, #0]
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	f022 021c 	bic.w	r2, r2, #28
 801c2d0:	601a      	str	r2, [r3, #0]
 801c2d2:	e007      	b.n	801c2e4 <HAL_DMA_IRQHandler+0xdcc>
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	681a      	ldr	r2, [r3, #0]
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	f022 020e 	bic.w	r2, r2, #14
 801c2e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c2e8:	f003 031f 	and.w	r3, r3, #31
 801c2ec:	2201      	movs	r2, #1
 801c2ee:	409a      	lsls	r2, r3
 801c2f0:	69fb      	ldr	r3, [r7, #28]
 801c2f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	2201      	movs	r2, #1
 801c2f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	2201      	movs	r2, #1
 801c2fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	2200      	movs	r2, #0
 801c306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d009      	beq.n	801c326 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c316:	6878      	ldr	r0, [r7, #4]
 801c318:	4798      	blx	r3
 801c31a:	e004      	b.n	801c326 <HAL_DMA_IRQHandler+0xe0e>
          return;
 801c31c:	bf00      	nop
 801c31e:	e002      	b.n	801c326 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c320:	bf00      	nop
 801c322:	e000      	b.n	801c326 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c324:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801c326:	3728      	adds	r7, #40	@ 0x28
 801c328:	46bd      	mov	sp, r7
 801c32a:	bd80      	pop	{r7, pc}
 801c32c:	40020010 	.word	0x40020010
 801c330:	40020028 	.word	0x40020028
 801c334:	40020040 	.word	0x40020040
 801c338:	40020058 	.word	0x40020058
 801c33c:	40020070 	.word	0x40020070
 801c340:	40020088 	.word	0x40020088
 801c344:	400200a0 	.word	0x400200a0
 801c348:	400200b8 	.word	0x400200b8
 801c34c:	40020410 	.word	0x40020410
 801c350:	40020428 	.word	0x40020428
 801c354:	40020440 	.word	0x40020440
 801c358:	40020458 	.word	0x40020458
 801c35c:	40020470 	.word	0x40020470
 801c360:	40020488 	.word	0x40020488
 801c364:	400204a0 	.word	0x400204a0
 801c368:	400204b8 	.word	0x400204b8

0801c36c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801c36c:	b480      	push	{r7}
 801c36e:	b085      	sub	sp, #20
 801c370:	af00      	add	r7, sp, #0
 801c372:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	4a42      	ldr	r2, [pc, #264]	@ (801c484 <DMA_CalcBaseAndBitshift+0x118>)
 801c37a:	4293      	cmp	r3, r2
 801c37c:	d04a      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	4a41      	ldr	r2, [pc, #260]	@ (801c488 <DMA_CalcBaseAndBitshift+0x11c>)
 801c384:	4293      	cmp	r3, r2
 801c386:	d045      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	4a3f      	ldr	r2, [pc, #252]	@ (801c48c <DMA_CalcBaseAndBitshift+0x120>)
 801c38e:	4293      	cmp	r3, r2
 801c390:	d040      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	4a3e      	ldr	r2, [pc, #248]	@ (801c490 <DMA_CalcBaseAndBitshift+0x124>)
 801c398:	4293      	cmp	r3, r2
 801c39a:	d03b      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	4a3c      	ldr	r2, [pc, #240]	@ (801c494 <DMA_CalcBaseAndBitshift+0x128>)
 801c3a2:	4293      	cmp	r3, r2
 801c3a4:	d036      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	4a3b      	ldr	r2, [pc, #236]	@ (801c498 <DMA_CalcBaseAndBitshift+0x12c>)
 801c3ac:	4293      	cmp	r3, r2
 801c3ae:	d031      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	4a39      	ldr	r2, [pc, #228]	@ (801c49c <DMA_CalcBaseAndBitshift+0x130>)
 801c3b6:	4293      	cmp	r3, r2
 801c3b8:	d02c      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	4a38      	ldr	r2, [pc, #224]	@ (801c4a0 <DMA_CalcBaseAndBitshift+0x134>)
 801c3c0:	4293      	cmp	r3, r2
 801c3c2:	d027      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	4a36      	ldr	r2, [pc, #216]	@ (801c4a4 <DMA_CalcBaseAndBitshift+0x138>)
 801c3ca:	4293      	cmp	r3, r2
 801c3cc:	d022      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	4a35      	ldr	r2, [pc, #212]	@ (801c4a8 <DMA_CalcBaseAndBitshift+0x13c>)
 801c3d4:	4293      	cmp	r3, r2
 801c3d6:	d01d      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	4a33      	ldr	r2, [pc, #204]	@ (801c4ac <DMA_CalcBaseAndBitshift+0x140>)
 801c3de:	4293      	cmp	r3, r2
 801c3e0:	d018      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	4a32      	ldr	r2, [pc, #200]	@ (801c4b0 <DMA_CalcBaseAndBitshift+0x144>)
 801c3e8:	4293      	cmp	r3, r2
 801c3ea:	d013      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	4a30      	ldr	r2, [pc, #192]	@ (801c4b4 <DMA_CalcBaseAndBitshift+0x148>)
 801c3f2:	4293      	cmp	r3, r2
 801c3f4:	d00e      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	4a2f      	ldr	r2, [pc, #188]	@ (801c4b8 <DMA_CalcBaseAndBitshift+0x14c>)
 801c3fc:	4293      	cmp	r3, r2
 801c3fe:	d009      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	4a2d      	ldr	r2, [pc, #180]	@ (801c4bc <DMA_CalcBaseAndBitshift+0x150>)
 801c406:	4293      	cmp	r3, r2
 801c408:	d004      	beq.n	801c414 <DMA_CalcBaseAndBitshift+0xa8>
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	4a2c      	ldr	r2, [pc, #176]	@ (801c4c0 <DMA_CalcBaseAndBitshift+0x154>)
 801c410:	4293      	cmp	r3, r2
 801c412:	d101      	bne.n	801c418 <DMA_CalcBaseAndBitshift+0xac>
 801c414:	2301      	movs	r3, #1
 801c416:	e000      	b.n	801c41a <DMA_CalcBaseAndBitshift+0xae>
 801c418:	2300      	movs	r3, #0
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d024      	beq.n	801c468 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	b2db      	uxtb	r3, r3
 801c424:	3b10      	subs	r3, #16
 801c426:	4a27      	ldr	r2, [pc, #156]	@ (801c4c4 <DMA_CalcBaseAndBitshift+0x158>)
 801c428:	fba2 2303 	umull	r2, r3, r2, r3
 801c42c:	091b      	lsrs	r3, r3, #4
 801c42e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	f003 0307 	and.w	r3, r3, #7
 801c436:	4a24      	ldr	r2, [pc, #144]	@ (801c4c8 <DMA_CalcBaseAndBitshift+0x15c>)
 801c438:	5cd3      	ldrb	r3, [r2, r3]
 801c43a:	461a      	mov	r2, r3
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801c440:	68fb      	ldr	r3, [r7, #12]
 801c442:	2b03      	cmp	r3, #3
 801c444:	d908      	bls.n	801c458 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	461a      	mov	r2, r3
 801c44c:	4b1f      	ldr	r3, [pc, #124]	@ (801c4cc <DMA_CalcBaseAndBitshift+0x160>)
 801c44e:	4013      	ands	r3, r2
 801c450:	1d1a      	adds	r2, r3, #4
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	659a      	str	r2, [r3, #88]	@ 0x58
 801c456:	e00d      	b.n	801c474 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	461a      	mov	r2, r3
 801c45e:	4b1b      	ldr	r3, [pc, #108]	@ (801c4cc <DMA_CalcBaseAndBitshift+0x160>)
 801c460:	4013      	ands	r3, r2
 801c462:	687a      	ldr	r2, [r7, #4]
 801c464:	6593      	str	r3, [r2, #88]	@ 0x58
 801c466:	e005      	b.n	801c474 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801c478:	4618      	mov	r0, r3
 801c47a:	3714      	adds	r7, #20
 801c47c:	46bd      	mov	sp, r7
 801c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c482:	4770      	bx	lr
 801c484:	40020010 	.word	0x40020010
 801c488:	40020028 	.word	0x40020028
 801c48c:	40020040 	.word	0x40020040
 801c490:	40020058 	.word	0x40020058
 801c494:	40020070 	.word	0x40020070
 801c498:	40020088 	.word	0x40020088
 801c49c:	400200a0 	.word	0x400200a0
 801c4a0:	400200b8 	.word	0x400200b8
 801c4a4:	40020410 	.word	0x40020410
 801c4a8:	40020428 	.word	0x40020428
 801c4ac:	40020440 	.word	0x40020440
 801c4b0:	40020458 	.word	0x40020458
 801c4b4:	40020470 	.word	0x40020470
 801c4b8:	40020488 	.word	0x40020488
 801c4bc:	400204a0 	.word	0x400204a0
 801c4c0:	400204b8 	.word	0x400204b8
 801c4c4:	aaaaaaab 	.word	0xaaaaaaab
 801c4c8:	08027e48 	.word	0x08027e48
 801c4cc:	fffffc00 	.word	0xfffffc00

0801c4d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801c4d0:	b480      	push	{r7}
 801c4d2:	b085      	sub	sp, #20
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c4d8:	2300      	movs	r3, #0
 801c4da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	699b      	ldr	r3, [r3, #24]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d120      	bne.n	801c526 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c4e8:	2b03      	cmp	r3, #3
 801c4ea:	d858      	bhi.n	801c59e <DMA_CheckFifoParam+0xce>
 801c4ec:	a201      	add	r2, pc, #4	@ (adr r2, 801c4f4 <DMA_CheckFifoParam+0x24>)
 801c4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c4f2:	bf00      	nop
 801c4f4:	0801c505 	.word	0x0801c505
 801c4f8:	0801c517 	.word	0x0801c517
 801c4fc:	0801c505 	.word	0x0801c505
 801c500:	0801c59f 	.word	0x0801c59f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c508:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d048      	beq.n	801c5a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801c510:	2301      	movs	r3, #1
 801c512:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c514:	e045      	b.n	801c5a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c51a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c51e:	d142      	bne.n	801c5a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801c520:	2301      	movs	r3, #1
 801c522:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c524:	e03f      	b.n	801c5a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	699b      	ldr	r3, [r3, #24]
 801c52a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c52e:	d123      	bne.n	801c578 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c534:	2b03      	cmp	r3, #3
 801c536:	d838      	bhi.n	801c5aa <DMA_CheckFifoParam+0xda>
 801c538:	a201      	add	r2, pc, #4	@ (adr r2, 801c540 <DMA_CheckFifoParam+0x70>)
 801c53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c53e:	bf00      	nop
 801c540:	0801c551 	.word	0x0801c551
 801c544:	0801c557 	.word	0x0801c557
 801c548:	0801c551 	.word	0x0801c551
 801c54c:	0801c569 	.word	0x0801c569
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801c550:	2301      	movs	r3, #1
 801c552:	73fb      	strb	r3, [r7, #15]
        break;
 801c554:	e030      	b.n	801c5b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c55a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d025      	beq.n	801c5ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801c562:	2301      	movs	r3, #1
 801c564:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c566:	e022      	b.n	801c5ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c56c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c570:	d11f      	bne.n	801c5b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801c572:	2301      	movs	r3, #1
 801c574:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c576:	e01c      	b.n	801c5b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c57c:	2b02      	cmp	r3, #2
 801c57e:	d902      	bls.n	801c586 <DMA_CheckFifoParam+0xb6>
 801c580:	2b03      	cmp	r3, #3
 801c582:	d003      	beq.n	801c58c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801c584:	e018      	b.n	801c5b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801c586:	2301      	movs	r3, #1
 801c588:	73fb      	strb	r3, [r7, #15]
        break;
 801c58a:	e015      	b.n	801c5b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c594:	2b00      	cmp	r3, #0
 801c596:	d00e      	beq.n	801c5b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801c598:	2301      	movs	r3, #1
 801c59a:	73fb      	strb	r3, [r7, #15]
    break;
 801c59c:	e00b      	b.n	801c5b6 <DMA_CheckFifoParam+0xe6>
        break;
 801c59e:	bf00      	nop
 801c5a0:	e00a      	b.n	801c5b8 <DMA_CheckFifoParam+0xe8>
        break;
 801c5a2:	bf00      	nop
 801c5a4:	e008      	b.n	801c5b8 <DMA_CheckFifoParam+0xe8>
        break;
 801c5a6:	bf00      	nop
 801c5a8:	e006      	b.n	801c5b8 <DMA_CheckFifoParam+0xe8>
        break;
 801c5aa:	bf00      	nop
 801c5ac:	e004      	b.n	801c5b8 <DMA_CheckFifoParam+0xe8>
        break;
 801c5ae:	bf00      	nop
 801c5b0:	e002      	b.n	801c5b8 <DMA_CheckFifoParam+0xe8>
        break;
 801c5b2:	bf00      	nop
 801c5b4:	e000      	b.n	801c5b8 <DMA_CheckFifoParam+0xe8>
    break;
 801c5b6:	bf00      	nop
    }
  }

  return status;
 801c5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	3714      	adds	r7, #20
 801c5be:	46bd      	mov	sp, r7
 801c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5c4:	4770      	bx	lr
 801c5c6:	bf00      	nop

0801c5c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c5c8:	b480      	push	{r7}
 801c5ca:	b085      	sub	sp, #20
 801c5cc:	af00      	add	r7, sp, #0
 801c5ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	4a38      	ldr	r2, [pc, #224]	@ (801c6bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801c5dc:	4293      	cmp	r3, r2
 801c5de:	d022      	beq.n	801c626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	4a36      	ldr	r2, [pc, #216]	@ (801c6c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801c5e6:	4293      	cmp	r3, r2
 801c5e8:	d01d      	beq.n	801c626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	4a35      	ldr	r2, [pc, #212]	@ (801c6c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801c5f0:	4293      	cmp	r3, r2
 801c5f2:	d018      	beq.n	801c626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	4a33      	ldr	r2, [pc, #204]	@ (801c6c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801c5fa:	4293      	cmp	r3, r2
 801c5fc:	d013      	beq.n	801c626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	4a32      	ldr	r2, [pc, #200]	@ (801c6cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801c604:	4293      	cmp	r3, r2
 801c606:	d00e      	beq.n	801c626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	4a30      	ldr	r2, [pc, #192]	@ (801c6d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801c60e:	4293      	cmp	r3, r2
 801c610:	d009      	beq.n	801c626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	4a2f      	ldr	r2, [pc, #188]	@ (801c6d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801c618:	4293      	cmp	r3, r2
 801c61a:	d004      	beq.n	801c626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	4a2d      	ldr	r2, [pc, #180]	@ (801c6d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801c622:	4293      	cmp	r3, r2
 801c624:	d101      	bne.n	801c62a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801c626:	2301      	movs	r3, #1
 801c628:	e000      	b.n	801c62c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801c62a:	2300      	movs	r3, #0
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d01a      	beq.n	801c666 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	b2db      	uxtb	r3, r3
 801c636:	3b08      	subs	r3, #8
 801c638:	4a28      	ldr	r2, [pc, #160]	@ (801c6dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801c63a:	fba2 2303 	umull	r2, r3, r2, r3
 801c63e:	091b      	lsrs	r3, r3, #4
 801c640:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801c642:	68fa      	ldr	r2, [r7, #12]
 801c644:	4b26      	ldr	r3, [pc, #152]	@ (801c6e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801c646:	4413      	add	r3, r2
 801c648:	009b      	lsls	r3, r3, #2
 801c64a:	461a      	mov	r2, r3
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	4a24      	ldr	r2, [pc, #144]	@ (801c6e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801c654:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	f003 031f 	and.w	r3, r3, #31
 801c65c:	2201      	movs	r2, #1
 801c65e:	409a      	lsls	r2, r3
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801c664:	e024      	b.n	801c6b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	b2db      	uxtb	r3, r3
 801c66c:	3b10      	subs	r3, #16
 801c66e:	4a1e      	ldr	r2, [pc, #120]	@ (801c6e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801c670:	fba2 2303 	umull	r2, r3, r2, r3
 801c674:	091b      	lsrs	r3, r3, #4
 801c676:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801c678:	68bb      	ldr	r3, [r7, #8]
 801c67a:	4a1c      	ldr	r2, [pc, #112]	@ (801c6ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801c67c:	4293      	cmp	r3, r2
 801c67e:	d806      	bhi.n	801c68e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801c680:	68bb      	ldr	r3, [r7, #8]
 801c682:	4a1b      	ldr	r2, [pc, #108]	@ (801c6f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801c684:	4293      	cmp	r3, r2
 801c686:	d902      	bls.n	801c68e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	3308      	adds	r3, #8
 801c68c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801c68e:	68fa      	ldr	r2, [r7, #12]
 801c690:	4b18      	ldr	r3, [pc, #96]	@ (801c6f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801c692:	4413      	add	r3, r2
 801c694:	009b      	lsls	r3, r3, #2
 801c696:	461a      	mov	r2, r3
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	4a16      	ldr	r2, [pc, #88]	@ (801c6f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801c6a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	f003 031f 	and.w	r3, r3, #31
 801c6a8:	2201      	movs	r2, #1
 801c6aa:	409a      	lsls	r2, r3
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801c6b0:	bf00      	nop
 801c6b2:	3714      	adds	r7, #20
 801c6b4:	46bd      	mov	sp, r7
 801c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ba:	4770      	bx	lr
 801c6bc:	58025408 	.word	0x58025408
 801c6c0:	5802541c 	.word	0x5802541c
 801c6c4:	58025430 	.word	0x58025430
 801c6c8:	58025444 	.word	0x58025444
 801c6cc:	58025458 	.word	0x58025458
 801c6d0:	5802546c 	.word	0x5802546c
 801c6d4:	58025480 	.word	0x58025480
 801c6d8:	58025494 	.word	0x58025494
 801c6dc:	cccccccd 	.word	0xcccccccd
 801c6e0:	16009600 	.word	0x16009600
 801c6e4:	58025880 	.word	0x58025880
 801c6e8:	aaaaaaab 	.word	0xaaaaaaab
 801c6ec:	400204b8 	.word	0x400204b8
 801c6f0:	4002040f 	.word	0x4002040f
 801c6f4:	10008200 	.word	0x10008200
 801c6f8:	40020880 	.word	0x40020880

0801c6fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c6fc:	b480      	push	{r7}
 801c6fe:	b085      	sub	sp, #20
 801c700:	af00      	add	r7, sp, #0
 801c702:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	685b      	ldr	r3, [r3, #4]
 801c708:	b2db      	uxtb	r3, r3
 801c70a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d04a      	beq.n	801c7a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	2b08      	cmp	r3, #8
 801c716:	d847      	bhi.n	801c7a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	4a25      	ldr	r2, [pc, #148]	@ (801c7b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801c71e:	4293      	cmp	r3, r2
 801c720:	d022      	beq.n	801c768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	4a24      	ldr	r2, [pc, #144]	@ (801c7b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801c728:	4293      	cmp	r3, r2
 801c72a:	d01d      	beq.n	801c768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	4a22      	ldr	r2, [pc, #136]	@ (801c7bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801c732:	4293      	cmp	r3, r2
 801c734:	d018      	beq.n	801c768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	4a21      	ldr	r2, [pc, #132]	@ (801c7c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801c73c:	4293      	cmp	r3, r2
 801c73e:	d013      	beq.n	801c768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	4a1f      	ldr	r2, [pc, #124]	@ (801c7c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801c746:	4293      	cmp	r3, r2
 801c748:	d00e      	beq.n	801c768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	4a1e      	ldr	r2, [pc, #120]	@ (801c7c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801c750:	4293      	cmp	r3, r2
 801c752:	d009      	beq.n	801c768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	4a1c      	ldr	r2, [pc, #112]	@ (801c7cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801c75a:	4293      	cmp	r3, r2
 801c75c:	d004      	beq.n	801c768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	4a1b      	ldr	r2, [pc, #108]	@ (801c7d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801c764:	4293      	cmp	r3, r2
 801c766:	d101      	bne.n	801c76c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801c768:	2301      	movs	r3, #1
 801c76a:	e000      	b.n	801c76e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801c76c:	2300      	movs	r3, #0
 801c76e:	2b00      	cmp	r3, #0
 801c770:	d00a      	beq.n	801c788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801c772:	68fa      	ldr	r2, [r7, #12]
 801c774:	4b17      	ldr	r3, [pc, #92]	@ (801c7d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801c776:	4413      	add	r3, r2
 801c778:	009b      	lsls	r3, r3, #2
 801c77a:	461a      	mov	r2, r3
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	4a15      	ldr	r2, [pc, #84]	@ (801c7d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801c784:	671a      	str	r2, [r3, #112]	@ 0x70
 801c786:	e009      	b.n	801c79c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801c788:	68fa      	ldr	r2, [r7, #12]
 801c78a:	4b14      	ldr	r3, [pc, #80]	@ (801c7dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801c78c:	4413      	add	r3, r2
 801c78e:	009b      	lsls	r3, r3, #2
 801c790:	461a      	mov	r2, r3
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801c796:	687b      	ldr	r3, [r7, #4]
 801c798:	4a11      	ldr	r2, [pc, #68]	@ (801c7e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801c79a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	3b01      	subs	r3, #1
 801c7a0:	2201      	movs	r2, #1
 801c7a2:	409a      	lsls	r2, r3
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801c7a8:	bf00      	nop
 801c7aa:	3714      	adds	r7, #20
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7b2:	4770      	bx	lr
 801c7b4:	58025408 	.word	0x58025408
 801c7b8:	5802541c 	.word	0x5802541c
 801c7bc:	58025430 	.word	0x58025430
 801c7c0:	58025444 	.word	0x58025444
 801c7c4:	58025458 	.word	0x58025458
 801c7c8:	5802546c 	.word	0x5802546c
 801c7cc:	58025480 	.word	0x58025480
 801c7d0:	58025494 	.word	0x58025494
 801c7d4:	1600963f 	.word	0x1600963f
 801c7d8:	58025940 	.word	0x58025940
 801c7dc:	1000823f 	.word	0x1000823f
 801c7e0:	40020940 	.word	0x40020940

0801c7e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c7e4:	b480      	push	{r7}
 801c7e6:	b089      	sub	sp, #36	@ 0x24
 801c7e8:	af00      	add	r7, sp, #0
 801c7ea:	6078      	str	r0, [r7, #4]
 801c7ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801c7ee:	2300      	movs	r3, #0
 801c7f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801c7f2:	4b89      	ldr	r3, [pc, #548]	@ (801ca18 <HAL_GPIO_Init+0x234>)
 801c7f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c7f6:	e194      	b.n	801cb22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801c7f8:	683b      	ldr	r3, [r7, #0]
 801c7fa:	681a      	ldr	r2, [r3, #0]
 801c7fc:	2101      	movs	r1, #1
 801c7fe:	69fb      	ldr	r3, [r7, #28]
 801c800:	fa01 f303 	lsl.w	r3, r1, r3
 801c804:	4013      	ands	r3, r2
 801c806:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801c808:	693b      	ldr	r3, [r7, #16]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	f000 8186 	beq.w	801cb1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c810:	683b      	ldr	r3, [r7, #0]
 801c812:	685b      	ldr	r3, [r3, #4]
 801c814:	f003 0303 	and.w	r3, r3, #3
 801c818:	2b01      	cmp	r3, #1
 801c81a:	d005      	beq.n	801c828 <HAL_GPIO_Init+0x44>
 801c81c:	683b      	ldr	r3, [r7, #0]
 801c81e:	685b      	ldr	r3, [r3, #4]
 801c820:	f003 0303 	and.w	r3, r3, #3
 801c824:	2b02      	cmp	r3, #2
 801c826:	d130      	bne.n	801c88a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	689b      	ldr	r3, [r3, #8]
 801c82c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801c82e:	69fb      	ldr	r3, [r7, #28]
 801c830:	005b      	lsls	r3, r3, #1
 801c832:	2203      	movs	r2, #3
 801c834:	fa02 f303 	lsl.w	r3, r2, r3
 801c838:	43db      	mvns	r3, r3
 801c83a:	69ba      	ldr	r2, [r7, #24]
 801c83c:	4013      	ands	r3, r2
 801c83e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c840:	683b      	ldr	r3, [r7, #0]
 801c842:	68da      	ldr	r2, [r3, #12]
 801c844:	69fb      	ldr	r3, [r7, #28]
 801c846:	005b      	lsls	r3, r3, #1
 801c848:	fa02 f303 	lsl.w	r3, r2, r3
 801c84c:	69ba      	ldr	r2, [r7, #24]
 801c84e:	4313      	orrs	r3, r2
 801c850:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	69ba      	ldr	r2, [r7, #24]
 801c856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	685b      	ldr	r3, [r3, #4]
 801c85c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c85e:	2201      	movs	r2, #1
 801c860:	69fb      	ldr	r3, [r7, #28]
 801c862:	fa02 f303 	lsl.w	r3, r2, r3
 801c866:	43db      	mvns	r3, r3
 801c868:	69ba      	ldr	r2, [r7, #24]
 801c86a:	4013      	ands	r3, r2
 801c86c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c86e:	683b      	ldr	r3, [r7, #0]
 801c870:	685b      	ldr	r3, [r3, #4]
 801c872:	091b      	lsrs	r3, r3, #4
 801c874:	f003 0201 	and.w	r2, r3, #1
 801c878:	69fb      	ldr	r3, [r7, #28]
 801c87a:	fa02 f303 	lsl.w	r3, r2, r3
 801c87e:	69ba      	ldr	r2, [r7, #24]
 801c880:	4313      	orrs	r3, r2
 801c882:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	69ba      	ldr	r2, [r7, #24]
 801c888:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c88a:	683b      	ldr	r3, [r7, #0]
 801c88c:	685b      	ldr	r3, [r3, #4]
 801c88e:	f003 0303 	and.w	r3, r3, #3
 801c892:	2b03      	cmp	r3, #3
 801c894:	d017      	beq.n	801c8c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	68db      	ldr	r3, [r3, #12]
 801c89a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c89c:	69fb      	ldr	r3, [r7, #28]
 801c89e:	005b      	lsls	r3, r3, #1
 801c8a0:	2203      	movs	r2, #3
 801c8a2:	fa02 f303 	lsl.w	r3, r2, r3
 801c8a6:	43db      	mvns	r3, r3
 801c8a8:	69ba      	ldr	r2, [r7, #24]
 801c8aa:	4013      	ands	r3, r2
 801c8ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c8ae:	683b      	ldr	r3, [r7, #0]
 801c8b0:	689a      	ldr	r2, [r3, #8]
 801c8b2:	69fb      	ldr	r3, [r7, #28]
 801c8b4:	005b      	lsls	r3, r3, #1
 801c8b6:	fa02 f303 	lsl.w	r3, r2, r3
 801c8ba:	69ba      	ldr	r2, [r7, #24]
 801c8bc:	4313      	orrs	r3, r2
 801c8be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	69ba      	ldr	r2, [r7, #24]
 801c8c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c8c6:	683b      	ldr	r3, [r7, #0]
 801c8c8:	685b      	ldr	r3, [r3, #4]
 801c8ca:	f003 0303 	and.w	r3, r3, #3
 801c8ce:	2b02      	cmp	r3, #2
 801c8d0:	d123      	bne.n	801c91a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c8d2:	69fb      	ldr	r3, [r7, #28]
 801c8d4:	08da      	lsrs	r2, r3, #3
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	3208      	adds	r2, #8
 801c8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c8de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801c8e0:	69fb      	ldr	r3, [r7, #28]
 801c8e2:	f003 0307 	and.w	r3, r3, #7
 801c8e6:	009b      	lsls	r3, r3, #2
 801c8e8:	220f      	movs	r2, #15
 801c8ea:	fa02 f303 	lsl.w	r3, r2, r3
 801c8ee:	43db      	mvns	r3, r3
 801c8f0:	69ba      	ldr	r2, [r7, #24]
 801c8f2:	4013      	ands	r3, r2
 801c8f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801c8f6:	683b      	ldr	r3, [r7, #0]
 801c8f8:	691a      	ldr	r2, [r3, #16]
 801c8fa:	69fb      	ldr	r3, [r7, #28]
 801c8fc:	f003 0307 	and.w	r3, r3, #7
 801c900:	009b      	lsls	r3, r3, #2
 801c902:	fa02 f303 	lsl.w	r3, r2, r3
 801c906:	69ba      	ldr	r2, [r7, #24]
 801c908:	4313      	orrs	r3, r2
 801c90a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801c90c:	69fb      	ldr	r3, [r7, #28]
 801c90e:	08da      	lsrs	r2, r3, #3
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	3208      	adds	r2, #8
 801c914:	69b9      	ldr	r1, [r7, #24]
 801c916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801c920:	69fb      	ldr	r3, [r7, #28]
 801c922:	005b      	lsls	r3, r3, #1
 801c924:	2203      	movs	r2, #3
 801c926:	fa02 f303 	lsl.w	r3, r2, r3
 801c92a:	43db      	mvns	r3, r3
 801c92c:	69ba      	ldr	r2, [r7, #24]
 801c92e:	4013      	ands	r3, r2
 801c930:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c932:	683b      	ldr	r3, [r7, #0]
 801c934:	685b      	ldr	r3, [r3, #4]
 801c936:	f003 0203 	and.w	r2, r3, #3
 801c93a:	69fb      	ldr	r3, [r7, #28]
 801c93c:	005b      	lsls	r3, r3, #1
 801c93e:	fa02 f303 	lsl.w	r3, r2, r3
 801c942:	69ba      	ldr	r2, [r7, #24]
 801c944:	4313      	orrs	r3, r2
 801c946:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	69ba      	ldr	r2, [r7, #24]
 801c94c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801c94e:	683b      	ldr	r3, [r7, #0]
 801c950:	685b      	ldr	r3, [r3, #4]
 801c952:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801c956:	2b00      	cmp	r3, #0
 801c958:	f000 80e0 	beq.w	801cb1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c95c:	4b2f      	ldr	r3, [pc, #188]	@ (801ca1c <HAL_GPIO_Init+0x238>)
 801c95e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c962:	4a2e      	ldr	r2, [pc, #184]	@ (801ca1c <HAL_GPIO_Init+0x238>)
 801c964:	f043 0302 	orr.w	r3, r3, #2
 801c968:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801c96c:	4b2b      	ldr	r3, [pc, #172]	@ (801ca1c <HAL_GPIO_Init+0x238>)
 801c96e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c972:	f003 0302 	and.w	r3, r3, #2
 801c976:	60fb      	str	r3, [r7, #12]
 801c978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c97a:	4a29      	ldr	r2, [pc, #164]	@ (801ca20 <HAL_GPIO_Init+0x23c>)
 801c97c:	69fb      	ldr	r3, [r7, #28]
 801c97e:	089b      	lsrs	r3, r3, #2
 801c980:	3302      	adds	r3, #2
 801c982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801c988:	69fb      	ldr	r3, [r7, #28]
 801c98a:	f003 0303 	and.w	r3, r3, #3
 801c98e:	009b      	lsls	r3, r3, #2
 801c990:	220f      	movs	r2, #15
 801c992:	fa02 f303 	lsl.w	r3, r2, r3
 801c996:	43db      	mvns	r3, r3
 801c998:	69ba      	ldr	r2, [r7, #24]
 801c99a:	4013      	ands	r3, r2
 801c99c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	4a20      	ldr	r2, [pc, #128]	@ (801ca24 <HAL_GPIO_Init+0x240>)
 801c9a2:	4293      	cmp	r3, r2
 801c9a4:	d052      	beq.n	801ca4c <HAL_GPIO_Init+0x268>
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	4a1f      	ldr	r2, [pc, #124]	@ (801ca28 <HAL_GPIO_Init+0x244>)
 801c9aa:	4293      	cmp	r3, r2
 801c9ac:	d031      	beq.n	801ca12 <HAL_GPIO_Init+0x22e>
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	4a1e      	ldr	r2, [pc, #120]	@ (801ca2c <HAL_GPIO_Init+0x248>)
 801c9b2:	4293      	cmp	r3, r2
 801c9b4:	d02b      	beq.n	801ca0e <HAL_GPIO_Init+0x22a>
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	4a1d      	ldr	r2, [pc, #116]	@ (801ca30 <HAL_GPIO_Init+0x24c>)
 801c9ba:	4293      	cmp	r3, r2
 801c9bc:	d025      	beq.n	801ca0a <HAL_GPIO_Init+0x226>
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	4a1c      	ldr	r2, [pc, #112]	@ (801ca34 <HAL_GPIO_Init+0x250>)
 801c9c2:	4293      	cmp	r3, r2
 801c9c4:	d01f      	beq.n	801ca06 <HAL_GPIO_Init+0x222>
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	4a1b      	ldr	r2, [pc, #108]	@ (801ca38 <HAL_GPIO_Init+0x254>)
 801c9ca:	4293      	cmp	r3, r2
 801c9cc:	d019      	beq.n	801ca02 <HAL_GPIO_Init+0x21e>
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	4a1a      	ldr	r2, [pc, #104]	@ (801ca3c <HAL_GPIO_Init+0x258>)
 801c9d2:	4293      	cmp	r3, r2
 801c9d4:	d013      	beq.n	801c9fe <HAL_GPIO_Init+0x21a>
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	4a19      	ldr	r2, [pc, #100]	@ (801ca40 <HAL_GPIO_Init+0x25c>)
 801c9da:	4293      	cmp	r3, r2
 801c9dc:	d00d      	beq.n	801c9fa <HAL_GPIO_Init+0x216>
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	4a18      	ldr	r2, [pc, #96]	@ (801ca44 <HAL_GPIO_Init+0x260>)
 801c9e2:	4293      	cmp	r3, r2
 801c9e4:	d007      	beq.n	801c9f6 <HAL_GPIO_Init+0x212>
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	4a17      	ldr	r2, [pc, #92]	@ (801ca48 <HAL_GPIO_Init+0x264>)
 801c9ea:	4293      	cmp	r3, r2
 801c9ec:	d101      	bne.n	801c9f2 <HAL_GPIO_Init+0x20e>
 801c9ee:	2309      	movs	r3, #9
 801c9f0:	e02d      	b.n	801ca4e <HAL_GPIO_Init+0x26a>
 801c9f2:	230a      	movs	r3, #10
 801c9f4:	e02b      	b.n	801ca4e <HAL_GPIO_Init+0x26a>
 801c9f6:	2308      	movs	r3, #8
 801c9f8:	e029      	b.n	801ca4e <HAL_GPIO_Init+0x26a>
 801c9fa:	2307      	movs	r3, #7
 801c9fc:	e027      	b.n	801ca4e <HAL_GPIO_Init+0x26a>
 801c9fe:	2306      	movs	r3, #6
 801ca00:	e025      	b.n	801ca4e <HAL_GPIO_Init+0x26a>
 801ca02:	2305      	movs	r3, #5
 801ca04:	e023      	b.n	801ca4e <HAL_GPIO_Init+0x26a>
 801ca06:	2304      	movs	r3, #4
 801ca08:	e021      	b.n	801ca4e <HAL_GPIO_Init+0x26a>
 801ca0a:	2303      	movs	r3, #3
 801ca0c:	e01f      	b.n	801ca4e <HAL_GPIO_Init+0x26a>
 801ca0e:	2302      	movs	r3, #2
 801ca10:	e01d      	b.n	801ca4e <HAL_GPIO_Init+0x26a>
 801ca12:	2301      	movs	r3, #1
 801ca14:	e01b      	b.n	801ca4e <HAL_GPIO_Init+0x26a>
 801ca16:	bf00      	nop
 801ca18:	58000080 	.word	0x58000080
 801ca1c:	58024400 	.word	0x58024400
 801ca20:	58000400 	.word	0x58000400
 801ca24:	58020000 	.word	0x58020000
 801ca28:	58020400 	.word	0x58020400
 801ca2c:	58020800 	.word	0x58020800
 801ca30:	58020c00 	.word	0x58020c00
 801ca34:	58021000 	.word	0x58021000
 801ca38:	58021400 	.word	0x58021400
 801ca3c:	58021800 	.word	0x58021800
 801ca40:	58021c00 	.word	0x58021c00
 801ca44:	58022000 	.word	0x58022000
 801ca48:	58022400 	.word	0x58022400
 801ca4c:	2300      	movs	r3, #0
 801ca4e:	69fa      	ldr	r2, [r7, #28]
 801ca50:	f002 0203 	and.w	r2, r2, #3
 801ca54:	0092      	lsls	r2, r2, #2
 801ca56:	4093      	lsls	r3, r2
 801ca58:	69ba      	ldr	r2, [r7, #24]
 801ca5a:	4313      	orrs	r3, r2
 801ca5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801ca5e:	4938      	ldr	r1, [pc, #224]	@ (801cb40 <HAL_GPIO_Init+0x35c>)
 801ca60:	69fb      	ldr	r3, [r7, #28]
 801ca62:	089b      	lsrs	r3, r3, #2
 801ca64:	3302      	adds	r3, #2
 801ca66:	69ba      	ldr	r2, [r7, #24]
 801ca68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801ca6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ca74:	693b      	ldr	r3, [r7, #16]
 801ca76:	43db      	mvns	r3, r3
 801ca78:	69ba      	ldr	r2, [r7, #24]
 801ca7a:	4013      	ands	r3, r2
 801ca7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801ca7e:	683b      	ldr	r3, [r7, #0]
 801ca80:	685b      	ldr	r3, [r3, #4]
 801ca82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d003      	beq.n	801ca92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801ca8a:	69ba      	ldr	r2, [r7, #24]
 801ca8c:	693b      	ldr	r3, [r7, #16]
 801ca8e:	4313      	orrs	r3, r2
 801ca90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801ca92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801ca96:	69bb      	ldr	r3, [r7, #24]
 801ca98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801ca9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801ca9e:	685b      	ldr	r3, [r3, #4]
 801caa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801caa2:	693b      	ldr	r3, [r7, #16]
 801caa4:	43db      	mvns	r3, r3
 801caa6:	69ba      	ldr	r2, [r7, #24]
 801caa8:	4013      	ands	r3, r2
 801caaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801caac:	683b      	ldr	r3, [r7, #0]
 801caae:	685b      	ldr	r3, [r3, #4]
 801cab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d003      	beq.n	801cac0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801cab8:	69ba      	ldr	r2, [r7, #24]
 801caba:	693b      	ldr	r3, [r7, #16]
 801cabc:	4313      	orrs	r3, r2
 801cabe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801cac0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801cac4:	69bb      	ldr	r3, [r7, #24]
 801cac6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801cac8:	697b      	ldr	r3, [r7, #20]
 801caca:	685b      	ldr	r3, [r3, #4]
 801cacc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cace:	693b      	ldr	r3, [r7, #16]
 801cad0:	43db      	mvns	r3, r3
 801cad2:	69ba      	ldr	r2, [r7, #24]
 801cad4:	4013      	ands	r3, r2
 801cad6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801cad8:	683b      	ldr	r3, [r7, #0]
 801cada:	685b      	ldr	r3, [r3, #4]
 801cadc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d003      	beq.n	801caec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801cae4:	69ba      	ldr	r2, [r7, #24]
 801cae6:	693b      	ldr	r3, [r7, #16]
 801cae8:	4313      	orrs	r3, r2
 801caea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801caec:	697b      	ldr	r3, [r7, #20]
 801caee:	69ba      	ldr	r2, [r7, #24]
 801caf0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801caf2:	697b      	ldr	r3, [r7, #20]
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801caf8:	693b      	ldr	r3, [r7, #16]
 801cafa:	43db      	mvns	r3, r3
 801cafc:	69ba      	ldr	r2, [r7, #24]
 801cafe:	4013      	ands	r3, r2
 801cb00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801cb02:	683b      	ldr	r3, [r7, #0]
 801cb04:	685b      	ldr	r3, [r3, #4]
 801cb06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d003      	beq.n	801cb16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801cb0e:	69ba      	ldr	r2, [r7, #24]
 801cb10:	693b      	ldr	r3, [r7, #16]
 801cb12:	4313      	orrs	r3, r2
 801cb14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801cb16:	697b      	ldr	r3, [r7, #20]
 801cb18:	69ba      	ldr	r2, [r7, #24]
 801cb1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801cb1c:	69fb      	ldr	r3, [r7, #28]
 801cb1e:	3301      	adds	r3, #1
 801cb20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801cb22:	683b      	ldr	r3, [r7, #0]
 801cb24:	681a      	ldr	r2, [r3, #0]
 801cb26:	69fb      	ldr	r3, [r7, #28]
 801cb28:	fa22 f303 	lsr.w	r3, r2, r3
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	f47f ae63 	bne.w	801c7f8 <HAL_GPIO_Init+0x14>
  }
}
 801cb32:	bf00      	nop
 801cb34:	bf00      	nop
 801cb36:	3724      	adds	r7, #36	@ 0x24
 801cb38:	46bd      	mov	sp, r7
 801cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb3e:	4770      	bx	lr
 801cb40:	58000400 	.word	0x58000400

0801cb44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801cb44:	b480      	push	{r7}
 801cb46:	b083      	sub	sp, #12
 801cb48:	af00      	add	r7, sp, #0
 801cb4a:	6078      	str	r0, [r7, #4]
 801cb4c:	460b      	mov	r3, r1
 801cb4e:	807b      	strh	r3, [r7, #2]
 801cb50:	4613      	mov	r3, r2
 801cb52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801cb54:	787b      	ldrb	r3, [r7, #1]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d003      	beq.n	801cb62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801cb5a:	887a      	ldrh	r2, [r7, #2]
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801cb60:	e003      	b.n	801cb6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801cb62:	887b      	ldrh	r3, [r7, #2]
 801cb64:	041a      	lsls	r2, r3, #16
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	619a      	str	r2, [r3, #24]
}
 801cb6a:	bf00      	nop
 801cb6c:	370c      	adds	r7, #12
 801cb6e:	46bd      	mov	sp, r7
 801cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb74:	4770      	bx	lr
	...

0801cb78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801cb78:	b580      	push	{r7, lr}
 801cb7a:	b082      	sub	sp, #8
 801cb7c:	af00      	add	r7, sp, #0
 801cb7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d101      	bne.n	801cb8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801cb86:	2301      	movs	r3, #1
 801cb88:	e08b      	b.n	801cca2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801cb90:	b2db      	uxtb	r3, r3
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d106      	bne.n	801cba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	2200      	movs	r2, #0
 801cb9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801cb9e:	6878      	ldr	r0, [r7, #4]
 801cba0:	f7e5 fc70 	bl	8002484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	2224      	movs	r2, #36	@ 0x24
 801cba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	681a      	ldr	r2, [r3, #0]
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	f022 0201 	bic.w	r2, r2, #1
 801cbba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	685a      	ldr	r2, [r3, #4]
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	681b      	ldr	r3, [r3, #0]
 801cbc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801cbc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	689a      	ldr	r2, [r3, #8]
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801cbd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	68db      	ldr	r3, [r3, #12]
 801cbde:	2b01      	cmp	r3, #1
 801cbe0:	d107      	bne.n	801cbf2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	689a      	ldr	r2, [r3, #8]
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801cbee:	609a      	str	r2, [r3, #8]
 801cbf0:	e006      	b.n	801cc00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	689a      	ldr	r2, [r3, #8]
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801cbfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	68db      	ldr	r3, [r3, #12]
 801cc04:	2b02      	cmp	r3, #2
 801cc06:	d108      	bne.n	801cc1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	685a      	ldr	r2, [r3, #4]
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801cc16:	605a      	str	r2, [r3, #4]
 801cc18:	e007      	b.n	801cc2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	681b      	ldr	r3, [r3, #0]
 801cc1e:	685a      	ldr	r2, [r3, #4]
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801cc28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	681b      	ldr	r3, [r3, #0]
 801cc2e:	6859      	ldr	r1, [r3, #4]
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	681a      	ldr	r2, [r3, #0]
 801cc34:	4b1d      	ldr	r3, [pc, #116]	@ (801ccac <HAL_I2C_Init+0x134>)
 801cc36:	430b      	orrs	r3, r1
 801cc38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	681b      	ldr	r3, [r3, #0]
 801cc3e:	68da      	ldr	r2, [r3, #12]
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	681b      	ldr	r3, [r3, #0]
 801cc44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801cc48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	691a      	ldr	r2, [r3, #16]
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	695b      	ldr	r3, [r3, #20]
 801cc52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	699b      	ldr	r3, [r3, #24]
 801cc5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	430a      	orrs	r2, r1
 801cc62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	69d9      	ldr	r1, [r3, #28]
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	6a1a      	ldr	r2, [r3, #32]
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	430a      	orrs	r2, r1
 801cc72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	681a      	ldr	r2, [r3, #0]
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	f042 0201 	orr.w	r2, r2, #1
 801cc82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	2200      	movs	r2, #0
 801cc88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	2220      	movs	r2, #32
 801cc8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	2200      	movs	r2, #0
 801cc96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	2200      	movs	r2, #0
 801cc9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801cca0:	2300      	movs	r3, #0
}
 801cca2:	4618      	mov	r0, r3
 801cca4:	3708      	adds	r7, #8
 801cca6:	46bd      	mov	sp, r7
 801cca8:	bd80      	pop	{r7, pc}
 801ccaa:	bf00      	nop
 801ccac:	02008000 	.word	0x02008000

0801ccb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801ccb0:	b480      	push	{r7}
 801ccb2:	b083      	sub	sp, #12
 801ccb4:	af00      	add	r7, sp, #0
 801ccb6:	6078      	str	r0, [r7, #4]
 801ccb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801ccc0:	b2db      	uxtb	r3, r3
 801ccc2:	2b20      	cmp	r3, #32
 801ccc4:	d138      	bne.n	801cd38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801cccc:	2b01      	cmp	r3, #1
 801ccce:	d101      	bne.n	801ccd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801ccd0:	2302      	movs	r3, #2
 801ccd2:	e032      	b.n	801cd3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	2201      	movs	r2, #1
 801ccd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	2224      	movs	r2, #36	@ 0x24
 801cce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	681b      	ldr	r3, [r3, #0]
 801cce8:	681a      	ldr	r2, [r3, #0]
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	f022 0201 	bic.w	r2, r2, #1
 801ccf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	681b      	ldr	r3, [r3, #0]
 801ccf8:	681a      	ldr	r2, [r3, #0]
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801cd02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	6819      	ldr	r1, [r3, #0]
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	683a      	ldr	r2, [r7, #0]
 801cd10:	430a      	orrs	r2, r1
 801cd12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	681b      	ldr	r3, [r3, #0]
 801cd18:	681a      	ldr	r2, [r3, #0]
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	681b      	ldr	r3, [r3, #0]
 801cd1e:	f042 0201 	orr.w	r2, r2, #1
 801cd22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	2220      	movs	r2, #32
 801cd28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	2200      	movs	r2, #0
 801cd30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801cd34:	2300      	movs	r3, #0
 801cd36:	e000      	b.n	801cd3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801cd38:	2302      	movs	r3, #2
  }
}
 801cd3a:	4618      	mov	r0, r3
 801cd3c:	370c      	adds	r7, #12
 801cd3e:	46bd      	mov	sp, r7
 801cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd44:	4770      	bx	lr

0801cd46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801cd46:	b480      	push	{r7}
 801cd48:	b085      	sub	sp, #20
 801cd4a:	af00      	add	r7, sp, #0
 801cd4c:	6078      	str	r0, [r7, #4]
 801cd4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801cd56:	b2db      	uxtb	r3, r3
 801cd58:	2b20      	cmp	r3, #32
 801cd5a:	d139      	bne.n	801cdd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801cd62:	2b01      	cmp	r3, #1
 801cd64:	d101      	bne.n	801cd6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801cd66:	2302      	movs	r3, #2
 801cd68:	e033      	b.n	801cdd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	2201      	movs	r2, #1
 801cd6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	2224      	movs	r2, #36	@ 0x24
 801cd76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	681a      	ldr	r2, [r3, #0]
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	681b      	ldr	r3, [r3, #0]
 801cd84:	f022 0201 	bic.w	r2, r2, #1
 801cd88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	681b      	ldr	r3, [r3, #0]
 801cd90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801cd92:	68fb      	ldr	r3, [r7, #12]
 801cd94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801cd98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801cd9a:	683b      	ldr	r3, [r7, #0]
 801cd9c:	021b      	lsls	r3, r3, #8
 801cd9e:	68fa      	ldr	r2, [r7, #12]
 801cda0:	4313      	orrs	r3, r2
 801cda2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	68fa      	ldr	r2, [r7, #12]
 801cdaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	681a      	ldr	r2, [r3, #0]
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	f042 0201 	orr.w	r2, r2, #1
 801cdba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	2220      	movs	r2, #32
 801cdc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	2200      	movs	r2, #0
 801cdc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801cdcc:	2300      	movs	r3, #0
 801cdce:	e000      	b.n	801cdd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801cdd0:	2302      	movs	r3, #2
  }
}
 801cdd2:	4618      	mov	r0, r3
 801cdd4:	3714      	adds	r7, #20
 801cdd6:	46bd      	mov	sp, r7
 801cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cddc:	4770      	bx	lr
	...

0801cde0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801cde0:	b580      	push	{r7, lr}
 801cde2:	b084      	sub	sp, #16
 801cde4:	af00      	add	r7, sp, #0
 801cde6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801cde8:	4b19      	ldr	r3, [pc, #100]	@ (801ce50 <HAL_PWREx_ConfigSupply+0x70>)
 801cdea:	68db      	ldr	r3, [r3, #12]
 801cdec:	f003 0304 	and.w	r3, r3, #4
 801cdf0:	2b04      	cmp	r3, #4
 801cdf2:	d00a      	beq.n	801ce0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801cdf4:	4b16      	ldr	r3, [pc, #88]	@ (801ce50 <HAL_PWREx_ConfigSupply+0x70>)
 801cdf6:	68db      	ldr	r3, [r3, #12]
 801cdf8:	f003 0307 	and.w	r3, r3, #7
 801cdfc:	687a      	ldr	r2, [r7, #4]
 801cdfe:	429a      	cmp	r2, r3
 801ce00:	d001      	beq.n	801ce06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801ce02:	2301      	movs	r3, #1
 801ce04:	e01f      	b.n	801ce46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801ce06:	2300      	movs	r3, #0
 801ce08:	e01d      	b.n	801ce46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801ce0a:	4b11      	ldr	r3, [pc, #68]	@ (801ce50 <HAL_PWREx_ConfigSupply+0x70>)
 801ce0c:	68db      	ldr	r3, [r3, #12]
 801ce0e:	f023 0207 	bic.w	r2, r3, #7
 801ce12:	490f      	ldr	r1, [pc, #60]	@ (801ce50 <HAL_PWREx_ConfigSupply+0x70>)
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	4313      	orrs	r3, r2
 801ce18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801ce1a:	f7fd fc03 	bl	801a624 <HAL_GetTick>
 801ce1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801ce20:	e009      	b.n	801ce36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801ce22:	f7fd fbff 	bl	801a624 <HAL_GetTick>
 801ce26:	4602      	mov	r2, r0
 801ce28:	68fb      	ldr	r3, [r7, #12]
 801ce2a:	1ad3      	subs	r3, r2, r3
 801ce2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ce30:	d901      	bls.n	801ce36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801ce32:	2301      	movs	r3, #1
 801ce34:	e007      	b.n	801ce46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801ce36:	4b06      	ldr	r3, [pc, #24]	@ (801ce50 <HAL_PWREx_ConfigSupply+0x70>)
 801ce38:	685b      	ldr	r3, [r3, #4]
 801ce3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ce3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ce42:	d1ee      	bne.n	801ce22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801ce44:	2300      	movs	r3, #0
}
 801ce46:	4618      	mov	r0, r3
 801ce48:	3710      	adds	r7, #16
 801ce4a:	46bd      	mov	sp, r7
 801ce4c:	bd80      	pop	{r7, pc}
 801ce4e:	bf00      	nop
 801ce50:	58024800 	.word	0x58024800

0801ce54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801ce54:	b580      	push	{r7, lr}
 801ce56:	b08c      	sub	sp, #48	@ 0x30
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d102      	bne.n	801ce68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801ce62:	2301      	movs	r3, #1
 801ce64:	f000 bc48 	b.w	801d6f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	f003 0301 	and.w	r3, r3, #1
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	f000 8088 	beq.w	801cf86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ce76:	4b99      	ldr	r3, [pc, #612]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801ce78:	691b      	ldr	r3, [r3, #16]
 801ce7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ce7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801ce80:	4b96      	ldr	r3, [pc, #600]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801ce82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ce84:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801ce86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce88:	2b10      	cmp	r3, #16
 801ce8a:	d007      	beq.n	801ce9c <HAL_RCC_OscConfig+0x48>
 801ce8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce8e:	2b18      	cmp	r3, #24
 801ce90:	d111      	bne.n	801ceb6 <HAL_RCC_OscConfig+0x62>
 801ce92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce94:	f003 0303 	and.w	r3, r3, #3
 801ce98:	2b02      	cmp	r3, #2
 801ce9a:	d10c      	bne.n	801ceb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ce9c:	4b8f      	ldr	r3, [pc, #572]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d06d      	beq.n	801cf84 <HAL_RCC_OscConfig+0x130>
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	685b      	ldr	r3, [r3, #4]
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d169      	bne.n	801cf84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801ceb0:	2301      	movs	r3, #1
 801ceb2:	f000 bc21 	b.w	801d6f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	685b      	ldr	r3, [r3, #4]
 801ceba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cebe:	d106      	bne.n	801cece <HAL_RCC_OscConfig+0x7a>
 801cec0:	4b86      	ldr	r3, [pc, #536]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	4a85      	ldr	r2, [pc, #532]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ceca:	6013      	str	r3, [r2, #0]
 801cecc:	e02e      	b.n	801cf2c <HAL_RCC_OscConfig+0xd8>
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	685b      	ldr	r3, [r3, #4]
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d10c      	bne.n	801cef0 <HAL_RCC_OscConfig+0x9c>
 801ced6:	4b81      	ldr	r3, [pc, #516]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	4a80      	ldr	r2, [pc, #512]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cedc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801cee0:	6013      	str	r3, [r2, #0]
 801cee2:	4b7e      	ldr	r3, [pc, #504]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	4a7d      	ldr	r2, [pc, #500]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cee8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ceec:	6013      	str	r3, [r2, #0]
 801ceee:	e01d      	b.n	801cf2c <HAL_RCC_OscConfig+0xd8>
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	685b      	ldr	r3, [r3, #4]
 801cef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cef8:	d10c      	bne.n	801cf14 <HAL_RCC_OscConfig+0xc0>
 801cefa:	4b78      	ldr	r3, [pc, #480]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	4a77      	ldr	r2, [pc, #476]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cf00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801cf04:	6013      	str	r3, [r2, #0]
 801cf06:	4b75      	ldr	r3, [pc, #468]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	4a74      	ldr	r2, [pc, #464]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cf0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cf10:	6013      	str	r3, [r2, #0]
 801cf12:	e00b      	b.n	801cf2c <HAL_RCC_OscConfig+0xd8>
 801cf14:	4b71      	ldr	r3, [pc, #452]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	4a70      	ldr	r2, [pc, #448]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cf1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801cf1e:	6013      	str	r3, [r2, #0]
 801cf20:	4b6e      	ldr	r3, [pc, #440]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cf22:	681b      	ldr	r3, [r3, #0]
 801cf24:	4a6d      	ldr	r2, [pc, #436]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cf26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801cf2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	685b      	ldr	r3, [r3, #4]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d013      	beq.n	801cf5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cf34:	f7fd fb76 	bl	801a624 <HAL_GetTick>
 801cf38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801cf3a:	e008      	b.n	801cf4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cf3c:	f7fd fb72 	bl	801a624 <HAL_GetTick>
 801cf40:	4602      	mov	r2, r0
 801cf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf44:	1ad3      	subs	r3, r2, r3
 801cf46:	2b64      	cmp	r3, #100	@ 0x64
 801cf48:	d901      	bls.n	801cf4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801cf4a:	2303      	movs	r3, #3
 801cf4c:	e3d4      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801cf4e:	4b63      	ldr	r3, [pc, #396]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	d0f0      	beq.n	801cf3c <HAL_RCC_OscConfig+0xe8>
 801cf5a:	e014      	b.n	801cf86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cf5c:	f7fd fb62 	bl	801a624 <HAL_GetTick>
 801cf60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801cf62:	e008      	b.n	801cf76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cf64:	f7fd fb5e 	bl	801a624 <HAL_GetTick>
 801cf68:	4602      	mov	r2, r0
 801cf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf6c:	1ad3      	subs	r3, r2, r3
 801cf6e:	2b64      	cmp	r3, #100	@ 0x64
 801cf70:	d901      	bls.n	801cf76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801cf72:	2303      	movs	r3, #3
 801cf74:	e3c0      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801cf76:	4b59      	ldr	r3, [pc, #356]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d1f0      	bne.n	801cf64 <HAL_RCC_OscConfig+0x110>
 801cf82:	e000      	b.n	801cf86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cf84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	f003 0302 	and.w	r3, r3, #2
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	f000 80ca 	beq.w	801d128 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cf94:	4b51      	ldr	r3, [pc, #324]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cf96:	691b      	ldr	r3, [r3, #16]
 801cf98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cf9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801cf9e:	4b4f      	ldr	r3, [pc, #316]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cfa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cfa2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801cfa4:	6a3b      	ldr	r3, [r7, #32]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d007      	beq.n	801cfba <HAL_RCC_OscConfig+0x166>
 801cfaa:	6a3b      	ldr	r3, [r7, #32]
 801cfac:	2b18      	cmp	r3, #24
 801cfae:	d156      	bne.n	801d05e <HAL_RCC_OscConfig+0x20a>
 801cfb0:	69fb      	ldr	r3, [r7, #28]
 801cfb2:	f003 0303 	and.w	r3, r3, #3
 801cfb6:	2b00      	cmp	r3, #0
 801cfb8:	d151      	bne.n	801d05e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801cfba:	4b48      	ldr	r3, [pc, #288]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	f003 0304 	and.w	r3, r3, #4
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d005      	beq.n	801cfd2 <HAL_RCC_OscConfig+0x17e>
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	68db      	ldr	r3, [r3, #12]
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d101      	bne.n	801cfd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801cfce:	2301      	movs	r3, #1
 801cfd0:	e392      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801cfd2:	4b42      	ldr	r3, [pc, #264]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	f023 0219 	bic.w	r2, r3, #25
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	68db      	ldr	r3, [r3, #12]
 801cfde:	493f      	ldr	r1, [pc, #252]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801cfe0:	4313      	orrs	r3, r2
 801cfe2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cfe4:	f7fd fb1e 	bl	801a624 <HAL_GetTick>
 801cfe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cfea:	e008      	b.n	801cffe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cfec:	f7fd fb1a 	bl	801a624 <HAL_GetTick>
 801cff0:	4602      	mov	r2, r0
 801cff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cff4:	1ad3      	subs	r3, r2, r3
 801cff6:	2b02      	cmp	r3, #2
 801cff8:	d901      	bls.n	801cffe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801cffa:	2303      	movs	r3, #3
 801cffc:	e37c      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cffe:	4b37      	ldr	r3, [pc, #220]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	f003 0304 	and.w	r3, r3, #4
 801d006:	2b00      	cmp	r3, #0
 801d008:	d0f0      	beq.n	801cfec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d00a:	f7fd fb3b 	bl	801a684 <HAL_GetREVID>
 801d00e:	4603      	mov	r3, r0
 801d010:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d014:	4293      	cmp	r3, r2
 801d016:	d817      	bhi.n	801d048 <HAL_RCC_OscConfig+0x1f4>
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	691b      	ldr	r3, [r3, #16]
 801d01c:	2b40      	cmp	r3, #64	@ 0x40
 801d01e:	d108      	bne.n	801d032 <HAL_RCC_OscConfig+0x1de>
 801d020:	4b2e      	ldr	r3, [pc, #184]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d022:	685b      	ldr	r3, [r3, #4]
 801d024:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801d028:	4a2c      	ldr	r2, [pc, #176]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d02a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d02e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d030:	e07a      	b.n	801d128 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d032:	4b2a      	ldr	r3, [pc, #168]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d034:	685b      	ldr	r3, [r3, #4]
 801d036:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	691b      	ldr	r3, [r3, #16]
 801d03e:	031b      	lsls	r3, r3, #12
 801d040:	4926      	ldr	r1, [pc, #152]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d042:	4313      	orrs	r3, r2
 801d044:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d046:	e06f      	b.n	801d128 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d048:	4b24      	ldr	r3, [pc, #144]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d04a:	685b      	ldr	r3, [r3, #4]
 801d04c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	691b      	ldr	r3, [r3, #16]
 801d054:	061b      	lsls	r3, r3, #24
 801d056:	4921      	ldr	r1, [pc, #132]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d058:	4313      	orrs	r3, r2
 801d05a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d05c:	e064      	b.n	801d128 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	68db      	ldr	r3, [r3, #12]
 801d062:	2b00      	cmp	r3, #0
 801d064:	d047      	beq.n	801d0f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801d066:	4b1d      	ldr	r3, [pc, #116]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	f023 0219 	bic.w	r2, r3, #25
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	68db      	ldr	r3, [r3, #12]
 801d072:	491a      	ldr	r1, [pc, #104]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d074:	4313      	orrs	r3, r2
 801d076:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d078:	f7fd fad4 	bl	801a624 <HAL_GetTick>
 801d07c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d07e:	e008      	b.n	801d092 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d080:	f7fd fad0 	bl	801a624 <HAL_GetTick>
 801d084:	4602      	mov	r2, r0
 801d086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d088:	1ad3      	subs	r3, r2, r3
 801d08a:	2b02      	cmp	r3, #2
 801d08c:	d901      	bls.n	801d092 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801d08e:	2303      	movs	r3, #3
 801d090:	e332      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d092:	4b12      	ldr	r3, [pc, #72]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d094:	681b      	ldr	r3, [r3, #0]
 801d096:	f003 0304 	and.w	r3, r3, #4
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d0f0      	beq.n	801d080 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d09e:	f7fd faf1 	bl	801a684 <HAL_GetREVID>
 801d0a2:	4603      	mov	r3, r0
 801d0a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d0a8:	4293      	cmp	r3, r2
 801d0aa:	d819      	bhi.n	801d0e0 <HAL_RCC_OscConfig+0x28c>
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	691b      	ldr	r3, [r3, #16]
 801d0b0:	2b40      	cmp	r3, #64	@ 0x40
 801d0b2:	d108      	bne.n	801d0c6 <HAL_RCC_OscConfig+0x272>
 801d0b4:	4b09      	ldr	r3, [pc, #36]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d0b6:	685b      	ldr	r3, [r3, #4]
 801d0b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801d0bc:	4a07      	ldr	r2, [pc, #28]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d0be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d0c2:	6053      	str	r3, [r2, #4]
 801d0c4:	e030      	b.n	801d128 <HAL_RCC_OscConfig+0x2d4>
 801d0c6:	4b05      	ldr	r3, [pc, #20]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d0c8:	685b      	ldr	r3, [r3, #4]
 801d0ca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	691b      	ldr	r3, [r3, #16]
 801d0d2:	031b      	lsls	r3, r3, #12
 801d0d4:	4901      	ldr	r1, [pc, #4]	@ (801d0dc <HAL_RCC_OscConfig+0x288>)
 801d0d6:	4313      	orrs	r3, r2
 801d0d8:	604b      	str	r3, [r1, #4]
 801d0da:	e025      	b.n	801d128 <HAL_RCC_OscConfig+0x2d4>
 801d0dc:	58024400 	.word	0x58024400
 801d0e0:	4b9a      	ldr	r3, [pc, #616]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d0e2:	685b      	ldr	r3, [r3, #4]
 801d0e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	691b      	ldr	r3, [r3, #16]
 801d0ec:	061b      	lsls	r3, r3, #24
 801d0ee:	4997      	ldr	r1, [pc, #604]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d0f0:	4313      	orrs	r3, r2
 801d0f2:	604b      	str	r3, [r1, #4]
 801d0f4:	e018      	b.n	801d128 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801d0f6:	4b95      	ldr	r3, [pc, #596]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	4a94      	ldr	r2, [pc, #592]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d0fc:	f023 0301 	bic.w	r3, r3, #1
 801d100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d102:	f7fd fa8f 	bl	801a624 <HAL_GetTick>
 801d106:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801d108:	e008      	b.n	801d11c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d10a:	f7fd fa8b 	bl	801a624 <HAL_GetTick>
 801d10e:	4602      	mov	r2, r0
 801d110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d112:	1ad3      	subs	r3, r2, r3
 801d114:	2b02      	cmp	r3, #2
 801d116:	d901      	bls.n	801d11c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801d118:	2303      	movs	r3, #3
 801d11a:	e2ed      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801d11c:	4b8b      	ldr	r3, [pc, #556]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d11e:	681b      	ldr	r3, [r3, #0]
 801d120:	f003 0304 	and.w	r3, r3, #4
 801d124:	2b00      	cmp	r3, #0
 801d126:	d1f0      	bne.n	801d10a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	f003 0310 	and.w	r3, r3, #16
 801d130:	2b00      	cmp	r3, #0
 801d132:	f000 80a9 	beq.w	801d288 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d136:	4b85      	ldr	r3, [pc, #532]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d138:	691b      	ldr	r3, [r3, #16]
 801d13a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d13e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801d140:	4b82      	ldr	r3, [pc, #520]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d144:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801d146:	69bb      	ldr	r3, [r7, #24]
 801d148:	2b08      	cmp	r3, #8
 801d14a:	d007      	beq.n	801d15c <HAL_RCC_OscConfig+0x308>
 801d14c:	69bb      	ldr	r3, [r7, #24]
 801d14e:	2b18      	cmp	r3, #24
 801d150:	d13a      	bne.n	801d1c8 <HAL_RCC_OscConfig+0x374>
 801d152:	697b      	ldr	r3, [r7, #20]
 801d154:	f003 0303 	and.w	r3, r3, #3
 801d158:	2b01      	cmp	r3, #1
 801d15a:	d135      	bne.n	801d1c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d15c:	4b7b      	ldr	r3, [pc, #492]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d164:	2b00      	cmp	r3, #0
 801d166:	d005      	beq.n	801d174 <HAL_RCC_OscConfig+0x320>
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	69db      	ldr	r3, [r3, #28]
 801d16c:	2b80      	cmp	r3, #128	@ 0x80
 801d16e:	d001      	beq.n	801d174 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801d170:	2301      	movs	r3, #1
 801d172:	e2c1      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d174:	f7fd fa86 	bl	801a684 <HAL_GetREVID>
 801d178:	4603      	mov	r3, r0
 801d17a:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d17e:	4293      	cmp	r3, r2
 801d180:	d817      	bhi.n	801d1b2 <HAL_RCC_OscConfig+0x35e>
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	6a1b      	ldr	r3, [r3, #32]
 801d186:	2b20      	cmp	r3, #32
 801d188:	d108      	bne.n	801d19c <HAL_RCC_OscConfig+0x348>
 801d18a:	4b70      	ldr	r3, [pc, #448]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d18c:	685b      	ldr	r3, [r3, #4]
 801d18e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801d192:	4a6e      	ldr	r2, [pc, #440]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d194:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d198:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d19a:	e075      	b.n	801d288 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d19c:	4b6b      	ldr	r3, [pc, #428]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d19e:	685b      	ldr	r3, [r3, #4]
 801d1a0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	6a1b      	ldr	r3, [r3, #32]
 801d1a8:	069b      	lsls	r3, r3, #26
 801d1aa:	4968      	ldr	r1, [pc, #416]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d1ac:	4313      	orrs	r3, r2
 801d1ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d1b0:	e06a      	b.n	801d288 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d1b2:	4b66      	ldr	r3, [pc, #408]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d1b4:	68db      	ldr	r3, [r3, #12]
 801d1b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	6a1b      	ldr	r3, [r3, #32]
 801d1be:	061b      	lsls	r3, r3, #24
 801d1c0:	4962      	ldr	r1, [pc, #392]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d1c2:	4313      	orrs	r3, r2
 801d1c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d1c6:	e05f      	b.n	801d288 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	69db      	ldr	r3, [r3, #28]
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d042      	beq.n	801d256 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801d1d0:	4b5e      	ldr	r3, [pc, #376]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	4a5d      	ldr	r2, [pc, #372]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d1da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d1dc:	f7fd fa22 	bl	801a624 <HAL_GetTick>
 801d1e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d1e2:	e008      	b.n	801d1f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801d1e4:	f7fd fa1e 	bl	801a624 <HAL_GetTick>
 801d1e8:	4602      	mov	r2, r0
 801d1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1ec:	1ad3      	subs	r3, r2, r3
 801d1ee:	2b02      	cmp	r3, #2
 801d1f0:	d901      	bls.n	801d1f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801d1f2:	2303      	movs	r3, #3
 801d1f4:	e280      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d1f6:	4b55      	ldr	r3, [pc, #340]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d0f0      	beq.n	801d1e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d202:	f7fd fa3f 	bl	801a684 <HAL_GetREVID>
 801d206:	4603      	mov	r3, r0
 801d208:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d20c:	4293      	cmp	r3, r2
 801d20e:	d817      	bhi.n	801d240 <HAL_RCC_OscConfig+0x3ec>
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	6a1b      	ldr	r3, [r3, #32]
 801d214:	2b20      	cmp	r3, #32
 801d216:	d108      	bne.n	801d22a <HAL_RCC_OscConfig+0x3d6>
 801d218:	4b4c      	ldr	r3, [pc, #304]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d21a:	685b      	ldr	r3, [r3, #4]
 801d21c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801d220:	4a4a      	ldr	r2, [pc, #296]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d222:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d226:	6053      	str	r3, [r2, #4]
 801d228:	e02e      	b.n	801d288 <HAL_RCC_OscConfig+0x434>
 801d22a:	4b48      	ldr	r3, [pc, #288]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d22c:	685b      	ldr	r3, [r3, #4]
 801d22e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	6a1b      	ldr	r3, [r3, #32]
 801d236:	069b      	lsls	r3, r3, #26
 801d238:	4944      	ldr	r1, [pc, #272]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d23a:	4313      	orrs	r3, r2
 801d23c:	604b      	str	r3, [r1, #4]
 801d23e:	e023      	b.n	801d288 <HAL_RCC_OscConfig+0x434>
 801d240:	4b42      	ldr	r3, [pc, #264]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d242:	68db      	ldr	r3, [r3, #12]
 801d244:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	6a1b      	ldr	r3, [r3, #32]
 801d24c:	061b      	lsls	r3, r3, #24
 801d24e:	493f      	ldr	r1, [pc, #252]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d250:	4313      	orrs	r3, r2
 801d252:	60cb      	str	r3, [r1, #12]
 801d254:	e018      	b.n	801d288 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801d256:	4b3d      	ldr	r3, [pc, #244]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	4a3c      	ldr	r2, [pc, #240]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d25c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d262:	f7fd f9df 	bl	801a624 <HAL_GetTick>
 801d266:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801d268:	e008      	b.n	801d27c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801d26a:	f7fd f9db 	bl	801a624 <HAL_GetTick>
 801d26e:	4602      	mov	r2, r0
 801d270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d272:	1ad3      	subs	r3, r2, r3
 801d274:	2b02      	cmp	r3, #2
 801d276:	d901      	bls.n	801d27c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801d278:	2303      	movs	r3, #3
 801d27a:	e23d      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801d27c:	4b33      	ldr	r3, [pc, #204]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d27e:	681b      	ldr	r3, [r3, #0]
 801d280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d284:	2b00      	cmp	r3, #0
 801d286:	d1f0      	bne.n	801d26a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	f003 0308 	and.w	r3, r3, #8
 801d290:	2b00      	cmp	r3, #0
 801d292:	d036      	beq.n	801d302 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	695b      	ldr	r3, [r3, #20]
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d019      	beq.n	801d2d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801d29c:	4b2b      	ldr	r3, [pc, #172]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d29e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d2a0:	4a2a      	ldr	r2, [pc, #168]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d2a2:	f043 0301 	orr.w	r3, r3, #1
 801d2a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d2a8:	f7fd f9bc 	bl	801a624 <HAL_GetTick>
 801d2ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801d2ae:	e008      	b.n	801d2c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d2b0:	f7fd f9b8 	bl	801a624 <HAL_GetTick>
 801d2b4:	4602      	mov	r2, r0
 801d2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2b8:	1ad3      	subs	r3, r2, r3
 801d2ba:	2b02      	cmp	r3, #2
 801d2bc:	d901      	bls.n	801d2c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801d2be:	2303      	movs	r3, #3
 801d2c0:	e21a      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801d2c2:	4b22      	ldr	r3, [pc, #136]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d2c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d2c6:	f003 0302 	and.w	r3, r3, #2
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d0f0      	beq.n	801d2b0 <HAL_RCC_OscConfig+0x45c>
 801d2ce:	e018      	b.n	801d302 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801d2d0:	4b1e      	ldr	r3, [pc, #120]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d2d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d2d4:	4a1d      	ldr	r2, [pc, #116]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d2d6:	f023 0301 	bic.w	r3, r3, #1
 801d2da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d2dc:	f7fd f9a2 	bl	801a624 <HAL_GetTick>
 801d2e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801d2e2:	e008      	b.n	801d2f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d2e4:	f7fd f99e 	bl	801a624 <HAL_GetTick>
 801d2e8:	4602      	mov	r2, r0
 801d2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2ec:	1ad3      	subs	r3, r2, r3
 801d2ee:	2b02      	cmp	r3, #2
 801d2f0:	d901      	bls.n	801d2f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801d2f2:	2303      	movs	r3, #3
 801d2f4:	e200      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801d2f6:	4b15      	ldr	r3, [pc, #84]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d2f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d2fa:	f003 0302 	and.w	r3, r3, #2
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d1f0      	bne.n	801d2e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	681b      	ldr	r3, [r3, #0]
 801d306:	f003 0320 	and.w	r3, r3, #32
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d039      	beq.n	801d382 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	699b      	ldr	r3, [r3, #24]
 801d312:	2b00      	cmp	r3, #0
 801d314:	d01c      	beq.n	801d350 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801d316:	4b0d      	ldr	r3, [pc, #52]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	4a0c      	ldr	r2, [pc, #48]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d31c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801d320:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d322:	f7fd f97f 	bl	801a624 <HAL_GetTick>
 801d326:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d328:	e008      	b.n	801d33c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d32a:	f7fd f97b 	bl	801a624 <HAL_GetTick>
 801d32e:	4602      	mov	r2, r0
 801d330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d332:	1ad3      	subs	r3, r2, r3
 801d334:	2b02      	cmp	r3, #2
 801d336:	d901      	bls.n	801d33c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801d338:	2303      	movs	r3, #3
 801d33a:	e1dd      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d33c:	4b03      	ldr	r3, [pc, #12]	@ (801d34c <HAL_RCC_OscConfig+0x4f8>)
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d344:	2b00      	cmp	r3, #0
 801d346:	d0f0      	beq.n	801d32a <HAL_RCC_OscConfig+0x4d6>
 801d348:	e01b      	b.n	801d382 <HAL_RCC_OscConfig+0x52e>
 801d34a:	bf00      	nop
 801d34c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801d350:	4b9b      	ldr	r3, [pc, #620]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	4a9a      	ldr	r2, [pc, #616]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d356:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d35a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d35c:	f7fd f962 	bl	801a624 <HAL_GetTick>
 801d360:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d362:	e008      	b.n	801d376 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d364:	f7fd f95e 	bl	801a624 <HAL_GetTick>
 801d368:	4602      	mov	r2, r0
 801d36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d36c:	1ad3      	subs	r3, r2, r3
 801d36e:	2b02      	cmp	r3, #2
 801d370:	d901      	bls.n	801d376 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801d372:	2303      	movs	r3, #3
 801d374:	e1c0      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d376:	4b92      	ldr	r3, [pc, #584]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d1f0      	bne.n	801d364 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	f003 0304 	and.w	r3, r3, #4
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	f000 8081 	beq.w	801d492 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801d390:	4b8c      	ldr	r3, [pc, #560]	@ (801d5c4 <HAL_RCC_OscConfig+0x770>)
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	4a8b      	ldr	r2, [pc, #556]	@ (801d5c4 <HAL_RCC_OscConfig+0x770>)
 801d396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d39a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d39c:	f7fd f942 	bl	801a624 <HAL_GetTick>
 801d3a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d3a2:	e008      	b.n	801d3b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d3a4:	f7fd f93e 	bl	801a624 <HAL_GetTick>
 801d3a8:	4602      	mov	r2, r0
 801d3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3ac:	1ad3      	subs	r3, r2, r3
 801d3ae:	2b64      	cmp	r3, #100	@ 0x64
 801d3b0:	d901      	bls.n	801d3b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801d3b2:	2303      	movs	r3, #3
 801d3b4:	e1a0      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d3b6:	4b83      	ldr	r3, [pc, #524]	@ (801d5c4 <HAL_RCC_OscConfig+0x770>)
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d0f0      	beq.n	801d3a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	689b      	ldr	r3, [r3, #8]
 801d3c6:	2b01      	cmp	r3, #1
 801d3c8:	d106      	bne.n	801d3d8 <HAL_RCC_OscConfig+0x584>
 801d3ca:	4b7d      	ldr	r3, [pc, #500]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d3cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d3ce:	4a7c      	ldr	r2, [pc, #496]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d3d0:	f043 0301 	orr.w	r3, r3, #1
 801d3d4:	6713      	str	r3, [r2, #112]	@ 0x70
 801d3d6:	e02d      	b.n	801d434 <HAL_RCC_OscConfig+0x5e0>
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	689b      	ldr	r3, [r3, #8]
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d10c      	bne.n	801d3fa <HAL_RCC_OscConfig+0x5a6>
 801d3e0:	4b77      	ldr	r3, [pc, #476]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d3e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d3e4:	4a76      	ldr	r2, [pc, #472]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d3e6:	f023 0301 	bic.w	r3, r3, #1
 801d3ea:	6713      	str	r3, [r2, #112]	@ 0x70
 801d3ec:	4b74      	ldr	r3, [pc, #464]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d3ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d3f0:	4a73      	ldr	r2, [pc, #460]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d3f2:	f023 0304 	bic.w	r3, r3, #4
 801d3f6:	6713      	str	r3, [r2, #112]	@ 0x70
 801d3f8:	e01c      	b.n	801d434 <HAL_RCC_OscConfig+0x5e0>
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	689b      	ldr	r3, [r3, #8]
 801d3fe:	2b05      	cmp	r3, #5
 801d400:	d10c      	bne.n	801d41c <HAL_RCC_OscConfig+0x5c8>
 801d402:	4b6f      	ldr	r3, [pc, #444]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d406:	4a6e      	ldr	r2, [pc, #440]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d408:	f043 0304 	orr.w	r3, r3, #4
 801d40c:	6713      	str	r3, [r2, #112]	@ 0x70
 801d40e:	4b6c      	ldr	r3, [pc, #432]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d412:	4a6b      	ldr	r2, [pc, #428]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d414:	f043 0301 	orr.w	r3, r3, #1
 801d418:	6713      	str	r3, [r2, #112]	@ 0x70
 801d41a:	e00b      	b.n	801d434 <HAL_RCC_OscConfig+0x5e0>
 801d41c:	4b68      	ldr	r3, [pc, #416]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d41e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d420:	4a67      	ldr	r2, [pc, #412]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d422:	f023 0301 	bic.w	r3, r3, #1
 801d426:	6713      	str	r3, [r2, #112]	@ 0x70
 801d428:	4b65      	ldr	r3, [pc, #404]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d42a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d42c:	4a64      	ldr	r2, [pc, #400]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d42e:	f023 0304 	bic.w	r3, r3, #4
 801d432:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	689b      	ldr	r3, [r3, #8]
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d015      	beq.n	801d468 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d43c:	f7fd f8f2 	bl	801a624 <HAL_GetTick>
 801d440:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d442:	e00a      	b.n	801d45a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d444:	f7fd f8ee 	bl	801a624 <HAL_GetTick>
 801d448:	4602      	mov	r2, r0
 801d44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d44c:	1ad3      	subs	r3, r2, r3
 801d44e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d452:	4293      	cmp	r3, r2
 801d454:	d901      	bls.n	801d45a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801d456:	2303      	movs	r3, #3
 801d458:	e14e      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d45a:	4b59      	ldr	r3, [pc, #356]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d45c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d45e:	f003 0302 	and.w	r3, r3, #2
 801d462:	2b00      	cmp	r3, #0
 801d464:	d0ee      	beq.n	801d444 <HAL_RCC_OscConfig+0x5f0>
 801d466:	e014      	b.n	801d492 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d468:	f7fd f8dc 	bl	801a624 <HAL_GetTick>
 801d46c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d46e:	e00a      	b.n	801d486 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d470:	f7fd f8d8 	bl	801a624 <HAL_GetTick>
 801d474:	4602      	mov	r2, r0
 801d476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d478:	1ad3      	subs	r3, r2, r3
 801d47a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d47e:	4293      	cmp	r3, r2
 801d480:	d901      	bls.n	801d486 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801d482:	2303      	movs	r3, #3
 801d484:	e138      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d486:	4b4e      	ldr	r3, [pc, #312]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d48a:	f003 0302 	and.w	r3, r3, #2
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d1ee      	bne.n	801d470 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d496:	2b00      	cmp	r3, #0
 801d498:	f000 812d 	beq.w	801d6f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801d49c:	4b48      	ldr	r3, [pc, #288]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d49e:	691b      	ldr	r3, [r3, #16]
 801d4a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d4a4:	2b18      	cmp	r3, #24
 801d4a6:	f000 80bd 	beq.w	801d624 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d4ae:	2b02      	cmp	r3, #2
 801d4b0:	f040 809e 	bne.w	801d5f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d4b4:	4b42      	ldr	r3, [pc, #264]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	4a41      	ldr	r2, [pc, #260]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d4ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d4be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d4c0:	f7fd f8b0 	bl	801a624 <HAL_GetTick>
 801d4c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d4c6:	e008      	b.n	801d4da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d4c8:	f7fd f8ac 	bl	801a624 <HAL_GetTick>
 801d4cc:	4602      	mov	r2, r0
 801d4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4d0:	1ad3      	subs	r3, r2, r3
 801d4d2:	2b02      	cmp	r3, #2
 801d4d4:	d901      	bls.n	801d4da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801d4d6:	2303      	movs	r3, #3
 801d4d8:	e10e      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d4da:	4b39      	ldr	r3, [pc, #228]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d1f0      	bne.n	801d4c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d4e6:	4b36      	ldr	r3, [pc, #216]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d4e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d4ea:	4b37      	ldr	r3, [pc, #220]	@ (801d5c8 <HAL_RCC_OscConfig+0x774>)
 801d4ec:	4013      	ands	r3, r2
 801d4ee:	687a      	ldr	r2, [r7, #4]
 801d4f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801d4f2:	687a      	ldr	r2, [r7, #4]
 801d4f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801d4f6:	0112      	lsls	r2, r2, #4
 801d4f8:	430a      	orrs	r2, r1
 801d4fa:	4931      	ldr	r1, [pc, #196]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d4fc:	4313      	orrs	r3, r2
 801d4fe:	628b      	str	r3, [r1, #40]	@ 0x28
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d504:	3b01      	subs	r3, #1
 801d506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d50e:	3b01      	subs	r3, #1
 801d510:	025b      	lsls	r3, r3, #9
 801d512:	b29b      	uxth	r3, r3
 801d514:	431a      	orrs	r2, r3
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d51a:	3b01      	subs	r3, #1
 801d51c:	041b      	lsls	r3, r3, #16
 801d51e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801d522:	431a      	orrs	r2, r3
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d528:	3b01      	subs	r3, #1
 801d52a:	061b      	lsls	r3, r3, #24
 801d52c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801d530:	4923      	ldr	r1, [pc, #140]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d532:	4313      	orrs	r3, r2
 801d534:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801d536:	4b22      	ldr	r3, [pc, #136]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d53a:	4a21      	ldr	r2, [pc, #132]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d53c:	f023 0301 	bic.w	r3, r3, #1
 801d540:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d542:	4b1f      	ldr	r3, [pc, #124]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d546:	4b21      	ldr	r3, [pc, #132]	@ (801d5cc <HAL_RCC_OscConfig+0x778>)
 801d548:	4013      	ands	r3, r2
 801d54a:	687a      	ldr	r2, [r7, #4]
 801d54c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d54e:	00d2      	lsls	r2, r2, #3
 801d550:	491b      	ldr	r1, [pc, #108]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d552:	4313      	orrs	r3, r2
 801d554:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801d556:	4b1a      	ldr	r3, [pc, #104]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d55a:	f023 020c 	bic.w	r2, r3, #12
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d562:	4917      	ldr	r1, [pc, #92]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d564:	4313      	orrs	r3, r2
 801d566:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801d568:	4b15      	ldr	r3, [pc, #84]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d56c:	f023 0202 	bic.w	r2, r3, #2
 801d570:	687b      	ldr	r3, [r7, #4]
 801d572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d574:	4912      	ldr	r1, [pc, #72]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d576:	4313      	orrs	r3, r2
 801d578:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801d57a:	4b11      	ldr	r3, [pc, #68]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d57c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d57e:	4a10      	ldr	r2, [pc, #64]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d586:	4b0e      	ldr	r3, [pc, #56]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d58a:	4a0d      	ldr	r2, [pc, #52]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d58c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801d592:	4b0b      	ldr	r3, [pc, #44]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d596:	4a0a      	ldr	r2, [pc, #40]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d59c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801d59e:	4b08      	ldr	r3, [pc, #32]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d5a2:	4a07      	ldr	r2, [pc, #28]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d5a4:	f043 0301 	orr.w	r3, r3, #1
 801d5a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d5aa:	4b05      	ldr	r3, [pc, #20]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	4a04      	ldr	r2, [pc, #16]	@ (801d5c0 <HAL_RCC_OscConfig+0x76c>)
 801d5b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d5b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d5b6:	f7fd f835 	bl	801a624 <HAL_GetTick>
 801d5ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d5bc:	e011      	b.n	801d5e2 <HAL_RCC_OscConfig+0x78e>
 801d5be:	bf00      	nop
 801d5c0:	58024400 	.word	0x58024400
 801d5c4:	58024800 	.word	0x58024800
 801d5c8:	fffffc0c 	.word	0xfffffc0c
 801d5cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d5d0:	f7fd f828 	bl	801a624 <HAL_GetTick>
 801d5d4:	4602      	mov	r2, r0
 801d5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5d8:	1ad3      	subs	r3, r2, r3
 801d5da:	2b02      	cmp	r3, #2
 801d5dc:	d901      	bls.n	801d5e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801d5de:	2303      	movs	r3, #3
 801d5e0:	e08a      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d5e2:	4b47      	ldr	r3, [pc, #284]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	d0f0      	beq.n	801d5d0 <HAL_RCC_OscConfig+0x77c>
 801d5ee:	e082      	b.n	801d6f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d5f0:	4b43      	ldr	r3, [pc, #268]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	4a42      	ldr	r2, [pc, #264]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d5f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d5fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d5fc:	f7fd f812 	bl	801a624 <HAL_GetTick>
 801d600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d602:	e008      	b.n	801d616 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d604:	f7fd f80e 	bl	801a624 <HAL_GetTick>
 801d608:	4602      	mov	r2, r0
 801d60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d60c:	1ad3      	subs	r3, r2, r3
 801d60e:	2b02      	cmp	r3, #2
 801d610:	d901      	bls.n	801d616 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801d612:	2303      	movs	r3, #3
 801d614:	e070      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d616:	4b3a      	ldr	r3, [pc, #232]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d61e:	2b00      	cmp	r3, #0
 801d620:	d1f0      	bne.n	801d604 <HAL_RCC_OscConfig+0x7b0>
 801d622:	e068      	b.n	801d6f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801d624:	4b36      	ldr	r3, [pc, #216]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d628:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801d62a:	4b35      	ldr	r3, [pc, #212]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d62c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d62e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d634:	2b01      	cmp	r3, #1
 801d636:	d031      	beq.n	801d69c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d638:	693b      	ldr	r3, [r7, #16]
 801d63a:	f003 0203 	and.w	r2, r3, #3
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d642:	429a      	cmp	r2, r3
 801d644:	d12a      	bne.n	801d69c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d646:	693b      	ldr	r3, [r7, #16]
 801d648:	091b      	lsrs	r3, r3, #4
 801d64a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d652:	429a      	cmp	r2, r3
 801d654:	d122      	bne.n	801d69c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d660:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d662:	429a      	cmp	r2, r3
 801d664:	d11a      	bne.n	801d69c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	0a5b      	lsrs	r3, r3, #9
 801d66a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d672:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d674:	429a      	cmp	r2, r3
 801d676:	d111      	bne.n	801d69c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d678:	68fb      	ldr	r3, [r7, #12]
 801d67a:	0c1b      	lsrs	r3, r3, #16
 801d67c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d684:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d686:	429a      	cmp	r2, r3
 801d688:	d108      	bne.n	801d69c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	0e1b      	lsrs	r3, r3, #24
 801d68e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d696:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d698:	429a      	cmp	r2, r3
 801d69a:	d001      	beq.n	801d6a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801d69c:	2301      	movs	r3, #1
 801d69e:	e02b      	b.n	801d6f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801d6a0:	4b17      	ldr	r3, [pc, #92]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d6a4:	08db      	lsrs	r3, r3, #3
 801d6a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d6aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d6b0:	693a      	ldr	r2, [r7, #16]
 801d6b2:	429a      	cmp	r2, r3
 801d6b4:	d01f      	beq.n	801d6f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801d6b6:	4b12      	ldr	r3, [pc, #72]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6ba:	4a11      	ldr	r2, [pc, #68]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d6bc:	f023 0301 	bic.w	r3, r3, #1
 801d6c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801d6c2:	f7fc ffaf 	bl	801a624 <HAL_GetTick>
 801d6c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801d6c8:	bf00      	nop
 801d6ca:	f7fc ffab 	bl	801a624 <HAL_GetTick>
 801d6ce:	4602      	mov	r2, r0
 801d6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6d2:	4293      	cmp	r3, r2
 801d6d4:	d0f9      	beq.n	801d6ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d6d6:	4b0a      	ldr	r3, [pc, #40]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d6d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d6da:	4b0a      	ldr	r3, [pc, #40]	@ (801d704 <HAL_RCC_OscConfig+0x8b0>)
 801d6dc:	4013      	ands	r3, r2
 801d6de:	687a      	ldr	r2, [r7, #4]
 801d6e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d6e2:	00d2      	lsls	r2, r2, #3
 801d6e4:	4906      	ldr	r1, [pc, #24]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d6e6:	4313      	orrs	r3, r2
 801d6e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801d6ea:	4b05      	ldr	r3, [pc, #20]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6ee:	4a04      	ldr	r2, [pc, #16]	@ (801d700 <HAL_RCC_OscConfig+0x8ac>)
 801d6f0:	f043 0301 	orr.w	r3, r3, #1
 801d6f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801d6f6:	2300      	movs	r3, #0
}
 801d6f8:	4618      	mov	r0, r3
 801d6fa:	3730      	adds	r7, #48	@ 0x30
 801d6fc:	46bd      	mov	sp, r7
 801d6fe:	bd80      	pop	{r7, pc}
 801d700:	58024400 	.word	0x58024400
 801d704:	ffff0007 	.word	0xffff0007

0801d708 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d708:	b580      	push	{r7, lr}
 801d70a:	b086      	sub	sp, #24
 801d70c:	af00      	add	r7, sp, #0
 801d70e:	6078      	str	r0, [r7, #4]
 801d710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	2b00      	cmp	r3, #0
 801d716:	d101      	bne.n	801d71c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801d718:	2301      	movs	r3, #1
 801d71a:	e19c      	b.n	801da56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d71c:	4b8a      	ldr	r3, [pc, #552]	@ (801d948 <HAL_RCC_ClockConfig+0x240>)
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	f003 030f 	and.w	r3, r3, #15
 801d724:	683a      	ldr	r2, [r7, #0]
 801d726:	429a      	cmp	r2, r3
 801d728:	d910      	bls.n	801d74c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d72a:	4b87      	ldr	r3, [pc, #540]	@ (801d948 <HAL_RCC_ClockConfig+0x240>)
 801d72c:	681b      	ldr	r3, [r3, #0]
 801d72e:	f023 020f 	bic.w	r2, r3, #15
 801d732:	4985      	ldr	r1, [pc, #532]	@ (801d948 <HAL_RCC_ClockConfig+0x240>)
 801d734:	683b      	ldr	r3, [r7, #0]
 801d736:	4313      	orrs	r3, r2
 801d738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d73a:	4b83      	ldr	r3, [pc, #524]	@ (801d948 <HAL_RCC_ClockConfig+0x240>)
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	f003 030f 	and.w	r3, r3, #15
 801d742:	683a      	ldr	r2, [r7, #0]
 801d744:	429a      	cmp	r2, r3
 801d746:	d001      	beq.n	801d74c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801d748:	2301      	movs	r3, #1
 801d74a:	e184      	b.n	801da56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	f003 0304 	and.w	r3, r3, #4
 801d754:	2b00      	cmp	r3, #0
 801d756:	d010      	beq.n	801d77a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	691a      	ldr	r2, [r3, #16]
 801d75c:	4b7b      	ldr	r3, [pc, #492]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d75e:	699b      	ldr	r3, [r3, #24]
 801d760:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d764:	429a      	cmp	r2, r3
 801d766:	d908      	bls.n	801d77a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d768:	4b78      	ldr	r3, [pc, #480]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d76a:	699b      	ldr	r3, [r3, #24]
 801d76c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	691b      	ldr	r3, [r3, #16]
 801d774:	4975      	ldr	r1, [pc, #468]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d776:	4313      	orrs	r3, r2
 801d778:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	f003 0308 	and.w	r3, r3, #8
 801d782:	2b00      	cmp	r3, #0
 801d784:	d010      	beq.n	801d7a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	695a      	ldr	r2, [r3, #20]
 801d78a:	4b70      	ldr	r3, [pc, #448]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d78c:	69db      	ldr	r3, [r3, #28]
 801d78e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d792:	429a      	cmp	r2, r3
 801d794:	d908      	bls.n	801d7a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d796:	4b6d      	ldr	r3, [pc, #436]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d798:	69db      	ldr	r3, [r3, #28]
 801d79a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	695b      	ldr	r3, [r3, #20]
 801d7a2:	496a      	ldr	r1, [pc, #424]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d7a4:	4313      	orrs	r3, r2
 801d7a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	681b      	ldr	r3, [r3, #0]
 801d7ac:	f003 0310 	and.w	r3, r3, #16
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	d010      	beq.n	801d7d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	699a      	ldr	r2, [r3, #24]
 801d7b8:	4b64      	ldr	r3, [pc, #400]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d7ba:	69db      	ldr	r3, [r3, #28]
 801d7bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d7c0:	429a      	cmp	r2, r3
 801d7c2:	d908      	bls.n	801d7d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d7c4:	4b61      	ldr	r3, [pc, #388]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d7c6:	69db      	ldr	r3, [r3, #28]
 801d7c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	699b      	ldr	r3, [r3, #24]
 801d7d0:	495e      	ldr	r1, [pc, #376]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d7d2:	4313      	orrs	r3, r2
 801d7d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	681b      	ldr	r3, [r3, #0]
 801d7da:	f003 0320 	and.w	r3, r3, #32
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d010      	beq.n	801d804 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	69da      	ldr	r2, [r3, #28]
 801d7e6:	4b59      	ldr	r3, [pc, #356]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d7e8:	6a1b      	ldr	r3, [r3, #32]
 801d7ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d7ee:	429a      	cmp	r2, r3
 801d7f0:	d908      	bls.n	801d804 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d7f2:	4b56      	ldr	r3, [pc, #344]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d7f4:	6a1b      	ldr	r3, [r3, #32]
 801d7f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	69db      	ldr	r3, [r3, #28]
 801d7fe:	4953      	ldr	r1, [pc, #332]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d800:	4313      	orrs	r3, r2
 801d802:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	f003 0302 	and.w	r3, r3, #2
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	d010      	beq.n	801d832 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	68da      	ldr	r2, [r3, #12]
 801d814:	4b4d      	ldr	r3, [pc, #308]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d816:	699b      	ldr	r3, [r3, #24]
 801d818:	f003 030f 	and.w	r3, r3, #15
 801d81c:	429a      	cmp	r2, r3
 801d81e:	d908      	bls.n	801d832 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d820:	4b4a      	ldr	r3, [pc, #296]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d822:	699b      	ldr	r3, [r3, #24]
 801d824:	f023 020f 	bic.w	r2, r3, #15
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	68db      	ldr	r3, [r3, #12]
 801d82c:	4947      	ldr	r1, [pc, #284]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d82e:	4313      	orrs	r3, r2
 801d830:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	681b      	ldr	r3, [r3, #0]
 801d836:	f003 0301 	and.w	r3, r3, #1
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d055      	beq.n	801d8ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801d83e:	4b43      	ldr	r3, [pc, #268]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d840:	699b      	ldr	r3, [r3, #24]
 801d842:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	689b      	ldr	r3, [r3, #8]
 801d84a:	4940      	ldr	r1, [pc, #256]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d84c:	4313      	orrs	r3, r2
 801d84e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	685b      	ldr	r3, [r3, #4]
 801d854:	2b02      	cmp	r3, #2
 801d856:	d107      	bne.n	801d868 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d858:	4b3c      	ldr	r3, [pc, #240]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d85a:	681b      	ldr	r3, [r3, #0]
 801d85c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d860:	2b00      	cmp	r3, #0
 801d862:	d121      	bne.n	801d8a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d864:	2301      	movs	r3, #1
 801d866:	e0f6      	b.n	801da56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	685b      	ldr	r3, [r3, #4]
 801d86c:	2b03      	cmp	r3, #3
 801d86e:	d107      	bne.n	801d880 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d870:	4b36      	ldr	r3, [pc, #216]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d115      	bne.n	801d8a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d87c:	2301      	movs	r3, #1
 801d87e:	e0ea      	b.n	801da56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	685b      	ldr	r3, [r3, #4]
 801d884:	2b01      	cmp	r3, #1
 801d886:	d107      	bne.n	801d898 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d888:	4b30      	ldr	r3, [pc, #192]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d890:	2b00      	cmp	r3, #0
 801d892:	d109      	bne.n	801d8a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d894:	2301      	movs	r3, #1
 801d896:	e0de      	b.n	801da56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d898:	4b2c      	ldr	r3, [pc, #176]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	f003 0304 	and.w	r3, r3, #4
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d101      	bne.n	801d8a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d8a4:	2301      	movs	r3, #1
 801d8a6:	e0d6      	b.n	801da56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801d8a8:	4b28      	ldr	r3, [pc, #160]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d8aa:	691b      	ldr	r3, [r3, #16]
 801d8ac:	f023 0207 	bic.w	r2, r3, #7
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	685b      	ldr	r3, [r3, #4]
 801d8b4:	4925      	ldr	r1, [pc, #148]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d8b6:	4313      	orrs	r3, r2
 801d8b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d8ba:	f7fc feb3 	bl	801a624 <HAL_GetTick>
 801d8be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d8c0:	e00a      	b.n	801d8d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d8c2:	f7fc feaf 	bl	801a624 <HAL_GetTick>
 801d8c6:	4602      	mov	r2, r0
 801d8c8:	697b      	ldr	r3, [r7, #20]
 801d8ca:	1ad3      	subs	r3, r2, r3
 801d8cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d8d0:	4293      	cmp	r3, r2
 801d8d2:	d901      	bls.n	801d8d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801d8d4:	2303      	movs	r3, #3
 801d8d6:	e0be      	b.n	801da56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d8d8:	4b1c      	ldr	r3, [pc, #112]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d8da:	691b      	ldr	r3, [r3, #16]
 801d8dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	685b      	ldr	r3, [r3, #4]
 801d8e4:	00db      	lsls	r3, r3, #3
 801d8e6:	429a      	cmp	r2, r3
 801d8e8:	d1eb      	bne.n	801d8c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	f003 0302 	and.w	r3, r3, #2
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d010      	beq.n	801d918 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	68da      	ldr	r2, [r3, #12]
 801d8fa:	4b14      	ldr	r3, [pc, #80]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d8fc:	699b      	ldr	r3, [r3, #24]
 801d8fe:	f003 030f 	and.w	r3, r3, #15
 801d902:	429a      	cmp	r2, r3
 801d904:	d208      	bcs.n	801d918 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d906:	4b11      	ldr	r3, [pc, #68]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d908:	699b      	ldr	r3, [r3, #24]
 801d90a:	f023 020f 	bic.w	r2, r3, #15
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	68db      	ldr	r3, [r3, #12]
 801d912:	490e      	ldr	r1, [pc, #56]	@ (801d94c <HAL_RCC_ClockConfig+0x244>)
 801d914:	4313      	orrs	r3, r2
 801d916:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d918:	4b0b      	ldr	r3, [pc, #44]	@ (801d948 <HAL_RCC_ClockConfig+0x240>)
 801d91a:	681b      	ldr	r3, [r3, #0]
 801d91c:	f003 030f 	and.w	r3, r3, #15
 801d920:	683a      	ldr	r2, [r7, #0]
 801d922:	429a      	cmp	r2, r3
 801d924:	d214      	bcs.n	801d950 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d926:	4b08      	ldr	r3, [pc, #32]	@ (801d948 <HAL_RCC_ClockConfig+0x240>)
 801d928:	681b      	ldr	r3, [r3, #0]
 801d92a:	f023 020f 	bic.w	r2, r3, #15
 801d92e:	4906      	ldr	r1, [pc, #24]	@ (801d948 <HAL_RCC_ClockConfig+0x240>)
 801d930:	683b      	ldr	r3, [r7, #0]
 801d932:	4313      	orrs	r3, r2
 801d934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d936:	4b04      	ldr	r3, [pc, #16]	@ (801d948 <HAL_RCC_ClockConfig+0x240>)
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	f003 030f 	and.w	r3, r3, #15
 801d93e:	683a      	ldr	r2, [r7, #0]
 801d940:	429a      	cmp	r2, r3
 801d942:	d005      	beq.n	801d950 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801d944:	2301      	movs	r3, #1
 801d946:	e086      	b.n	801da56 <HAL_RCC_ClockConfig+0x34e>
 801d948:	52002000 	.word	0x52002000
 801d94c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d950:	687b      	ldr	r3, [r7, #4]
 801d952:	681b      	ldr	r3, [r3, #0]
 801d954:	f003 0304 	and.w	r3, r3, #4
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d010      	beq.n	801d97e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	691a      	ldr	r2, [r3, #16]
 801d960:	4b3f      	ldr	r3, [pc, #252]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801d962:	699b      	ldr	r3, [r3, #24]
 801d964:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d968:	429a      	cmp	r2, r3
 801d96a:	d208      	bcs.n	801d97e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d96c:	4b3c      	ldr	r3, [pc, #240]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801d96e:	699b      	ldr	r3, [r3, #24]
 801d970:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	691b      	ldr	r3, [r3, #16]
 801d978:	4939      	ldr	r1, [pc, #228]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801d97a:	4313      	orrs	r3, r2
 801d97c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	681b      	ldr	r3, [r3, #0]
 801d982:	f003 0308 	and.w	r3, r3, #8
 801d986:	2b00      	cmp	r3, #0
 801d988:	d010      	beq.n	801d9ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	695a      	ldr	r2, [r3, #20]
 801d98e:	4b34      	ldr	r3, [pc, #208]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801d990:	69db      	ldr	r3, [r3, #28]
 801d992:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d996:	429a      	cmp	r2, r3
 801d998:	d208      	bcs.n	801d9ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d99a:	4b31      	ldr	r3, [pc, #196]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801d99c:	69db      	ldr	r3, [r3, #28]
 801d99e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	695b      	ldr	r3, [r3, #20]
 801d9a6:	492e      	ldr	r1, [pc, #184]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801d9a8:	4313      	orrs	r3, r2
 801d9aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	f003 0310 	and.w	r3, r3, #16
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d010      	beq.n	801d9da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	699a      	ldr	r2, [r3, #24]
 801d9bc:	4b28      	ldr	r3, [pc, #160]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801d9be:	69db      	ldr	r3, [r3, #28]
 801d9c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d9c4:	429a      	cmp	r2, r3
 801d9c6:	d208      	bcs.n	801d9da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d9c8:	4b25      	ldr	r3, [pc, #148]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801d9ca:	69db      	ldr	r3, [r3, #28]
 801d9cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	699b      	ldr	r3, [r3, #24]
 801d9d4:	4922      	ldr	r1, [pc, #136]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801d9d6:	4313      	orrs	r3, r2
 801d9d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	681b      	ldr	r3, [r3, #0]
 801d9de:	f003 0320 	and.w	r3, r3, #32
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	d010      	beq.n	801da08 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	69da      	ldr	r2, [r3, #28]
 801d9ea:	4b1d      	ldr	r3, [pc, #116]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801d9ec:	6a1b      	ldr	r3, [r3, #32]
 801d9ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d9f2:	429a      	cmp	r2, r3
 801d9f4:	d208      	bcs.n	801da08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d9f6:	4b1a      	ldr	r3, [pc, #104]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801d9f8:	6a1b      	ldr	r3, [r3, #32]
 801d9fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	69db      	ldr	r3, [r3, #28]
 801da02:	4917      	ldr	r1, [pc, #92]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801da04:	4313      	orrs	r3, r2
 801da06:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801da08:	f000 f834 	bl	801da74 <HAL_RCC_GetSysClockFreq>
 801da0c:	4602      	mov	r2, r0
 801da0e:	4b14      	ldr	r3, [pc, #80]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801da10:	699b      	ldr	r3, [r3, #24]
 801da12:	0a1b      	lsrs	r3, r3, #8
 801da14:	f003 030f 	and.w	r3, r3, #15
 801da18:	4912      	ldr	r1, [pc, #72]	@ (801da64 <HAL_RCC_ClockConfig+0x35c>)
 801da1a:	5ccb      	ldrb	r3, [r1, r3]
 801da1c:	f003 031f 	and.w	r3, r3, #31
 801da20:	fa22 f303 	lsr.w	r3, r2, r3
 801da24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801da26:	4b0e      	ldr	r3, [pc, #56]	@ (801da60 <HAL_RCC_ClockConfig+0x358>)
 801da28:	699b      	ldr	r3, [r3, #24]
 801da2a:	f003 030f 	and.w	r3, r3, #15
 801da2e:	4a0d      	ldr	r2, [pc, #52]	@ (801da64 <HAL_RCC_ClockConfig+0x35c>)
 801da30:	5cd3      	ldrb	r3, [r2, r3]
 801da32:	f003 031f 	and.w	r3, r3, #31
 801da36:	693a      	ldr	r2, [r7, #16]
 801da38:	fa22 f303 	lsr.w	r3, r2, r3
 801da3c:	4a0a      	ldr	r2, [pc, #40]	@ (801da68 <HAL_RCC_ClockConfig+0x360>)
 801da3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801da40:	4a0a      	ldr	r2, [pc, #40]	@ (801da6c <HAL_RCC_ClockConfig+0x364>)
 801da42:	693b      	ldr	r3, [r7, #16]
 801da44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801da46:	4b0a      	ldr	r3, [pc, #40]	@ (801da70 <HAL_RCC_ClockConfig+0x368>)
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	4618      	mov	r0, r3
 801da4c:	f7fc fda0 	bl	801a590 <HAL_InitTick>
 801da50:	4603      	mov	r3, r0
 801da52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801da54:	7bfb      	ldrb	r3, [r7, #15]
}
 801da56:	4618      	mov	r0, r3
 801da58:	3718      	adds	r7, #24
 801da5a:	46bd      	mov	sp, r7
 801da5c:	bd80      	pop	{r7, pc}
 801da5e:	bf00      	nop
 801da60:	58024400 	.word	0x58024400
 801da64:	08027d0c 	.word	0x08027d0c
 801da68:	20000004 	.word	0x20000004
 801da6c:	20000000 	.word	0x20000000
 801da70:	20000020 	.word	0x20000020

0801da74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801da74:	b480      	push	{r7}
 801da76:	b089      	sub	sp, #36	@ 0x24
 801da78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801da7a:	4bb3      	ldr	r3, [pc, #716]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801da7c:	691b      	ldr	r3, [r3, #16]
 801da7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801da82:	2b18      	cmp	r3, #24
 801da84:	f200 8155 	bhi.w	801dd32 <HAL_RCC_GetSysClockFreq+0x2be>
 801da88:	a201      	add	r2, pc, #4	@ (adr r2, 801da90 <HAL_RCC_GetSysClockFreq+0x1c>)
 801da8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da8e:	bf00      	nop
 801da90:	0801daf5 	.word	0x0801daf5
 801da94:	0801dd33 	.word	0x0801dd33
 801da98:	0801dd33 	.word	0x0801dd33
 801da9c:	0801dd33 	.word	0x0801dd33
 801daa0:	0801dd33 	.word	0x0801dd33
 801daa4:	0801dd33 	.word	0x0801dd33
 801daa8:	0801dd33 	.word	0x0801dd33
 801daac:	0801dd33 	.word	0x0801dd33
 801dab0:	0801db1b 	.word	0x0801db1b
 801dab4:	0801dd33 	.word	0x0801dd33
 801dab8:	0801dd33 	.word	0x0801dd33
 801dabc:	0801dd33 	.word	0x0801dd33
 801dac0:	0801dd33 	.word	0x0801dd33
 801dac4:	0801dd33 	.word	0x0801dd33
 801dac8:	0801dd33 	.word	0x0801dd33
 801dacc:	0801dd33 	.word	0x0801dd33
 801dad0:	0801db21 	.word	0x0801db21
 801dad4:	0801dd33 	.word	0x0801dd33
 801dad8:	0801dd33 	.word	0x0801dd33
 801dadc:	0801dd33 	.word	0x0801dd33
 801dae0:	0801dd33 	.word	0x0801dd33
 801dae4:	0801dd33 	.word	0x0801dd33
 801dae8:	0801dd33 	.word	0x0801dd33
 801daec:	0801dd33 	.word	0x0801dd33
 801daf0:	0801db27 	.word	0x0801db27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801daf4:	4b94      	ldr	r3, [pc, #592]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801daf6:	681b      	ldr	r3, [r3, #0]
 801daf8:	f003 0320 	and.w	r3, r3, #32
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	d009      	beq.n	801db14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801db00:	4b91      	ldr	r3, [pc, #580]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801db02:	681b      	ldr	r3, [r3, #0]
 801db04:	08db      	lsrs	r3, r3, #3
 801db06:	f003 0303 	and.w	r3, r3, #3
 801db0a:	4a90      	ldr	r2, [pc, #576]	@ (801dd4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801db0c:	fa22 f303 	lsr.w	r3, r2, r3
 801db10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801db12:	e111      	b.n	801dd38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801db14:	4b8d      	ldr	r3, [pc, #564]	@ (801dd4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801db16:	61bb      	str	r3, [r7, #24]
      break;
 801db18:	e10e      	b.n	801dd38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801db1a:	4b8d      	ldr	r3, [pc, #564]	@ (801dd50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801db1c:	61bb      	str	r3, [r7, #24]
      break;
 801db1e:	e10b      	b.n	801dd38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801db20:	4b8c      	ldr	r3, [pc, #560]	@ (801dd54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801db22:	61bb      	str	r3, [r7, #24]
      break;
 801db24:	e108      	b.n	801dd38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801db26:	4b88      	ldr	r3, [pc, #544]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801db28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801db2a:	f003 0303 	and.w	r3, r3, #3
 801db2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801db30:	4b85      	ldr	r3, [pc, #532]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801db32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801db34:	091b      	lsrs	r3, r3, #4
 801db36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801db3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801db3c:	4b82      	ldr	r3, [pc, #520]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801db3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db40:	f003 0301 	and.w	r3, r3, #1
 801db44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801db46:	4b80      	ldr	r3, [pc, #512]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801db48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801db4a:	08db      	lsrs	r3, r3, #3
 801db4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801db50:	68fa      	ldr	r2, [r7, #12]
 801db52:	fb02 f303 	mul.w	r3, r2, r3
 801db56:	ee07 3a90 	vmov	s15, r3
 801db5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801db62:	693b      	ldr	r3, [r7, #16]
 801db64:	2b00      	cmp	r3, #0
 801db66:	f000 80e1 	beq.w	801dd2c <HAL_RCC_GetSysClockFreq+0x2b8>
 801db6a:	697b      	ldr	r3, [r7, #20]
 801db6c:	2b02      	cmp	r3, #2
 801db6e:	f000 8083 	beq.w	801dc78 <HAL_RCC_GetSysClockFreq+0x204>
 801db72:	697b      	ldr	r3, [r7, #20]
 801db74:	2b02      	cmp	r3, #2
 801db76:	f200 80a1 	bhi.w	801dcbc <HAL_RCC_GetSysClockFreq+0x248>
 801db7a:	697b      	ldr	r3, [r7, #20]
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d003      	beq.n	801db88 <HAL_RCC_GetSysClockFreq+0x114>
 801db80:	697b      	ldr	r3, [r7, #20]
 801db82:	2b01      	cmp	r3, #1
 801db84:	d056      	beq.n	801dc34 <HAL_RCC_GetSysClockFreq+0x1c0>
 801db86:	e099      	b.n	801dcbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801db88:	4b6f      	ldr	r3, [pc, #444]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	f003 0320 	and.w	r3, r3, #32
 801db90:	2b00      	cmp	r3, #0
 801db92:	d02d      	beq.n	801dbf0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801db94:	4b6c      	ldr	r3, [pc, #432]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	08db      	lsrs	r3, r3, #3
 801db9a:	f003 0303 	and.w	r3, r3, #3
 801db9e:	4a6b      	ldr	r2, [pc, #428]	@ (801dd4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801dba0:	fa22 f303 	lsr.w	r3, r2, r3
 801dba4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	ee07 3a90 	vmov	s15, r3
 801dbac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dbb0:	693b      	ldr	r3, [r7, #16]
 801dbb2:	ee07 3a90 	vmov	s15, r3
 801dbb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dbbe:	4b62      	ldr	r3, [pc, #392]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dbc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dbc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dbc6:	ee07 3a90 	vmov	s15, r3
 801dbca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dbce:	ed97 6a02 	vldr	s12, [r7, #8]
 801dbd2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801dd58 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dbd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dbda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dbde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dbe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dbe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dbea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801dbee:	e087      	b.n	801dd00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dbf0:	693b      	ldr	r3, [r7, #16]
 801dbf2:	ee07 3a90 	vmov	s15, r3
 801dbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbfa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801dd5c <HAL_RCC_GetSysClockFreq+0x2e8>
 801dbfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dc02:	4b51      	ldr	r3, [pc, #324]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dc06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc0a:	ee07 3a90 	vmov	s15, r3
 801dc0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc12:	ed97 6a02 	vldr	s12, [r7, #8]
 801dc16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801dd58 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dc1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dc26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801dc32:	e065      	b.n	801dd00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dc34:	693b      	ldr	r3, [r7, #16]
 801dc36:	ee07 3a90 	vmov	s15, r3
 801dc3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801dd60 <HAL_RCC_GetSysClockFreq+0x2ec>
 801dc42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dc46:	4b40      	ldr	r3, [pc, #256]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dc4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc4e:	ee07 3a90 	vmov	s15, r3
 801dc52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc56:	ed97 6a02 	vldr	s12, [r7, #8]
 801dc5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801dd58 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dc5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dc6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801dc76:	e043      	b.n	801dd00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dc78:	693b      	ldr	r3, [r7, #16]
 801dc7a:	ee07 3a90 	vmov	s15, r3
 801dc7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801dd64 <HAL_RCC_GetSysClockFreq+0x2f0>
 801dc86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dc8a:	4b2f      	ldr	r3, [pc, #188]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dc8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc92:	ee07 3a90 	vmov	s15, r3
 801dc96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc9a:	ed97 6a02 	vldr	s12, [r7, #8]
 801dc9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801dd58 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dcaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dcae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dcb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dcb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801dcba:	e021      	b.n	801dd00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dcbc:	693b      	ldr	r3, [r7, #16]
 801dcbe:	ee07 3a90 	vmov	s15, r3
 801dcc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801dd60 <HAL_RCC_GetSysClockFreq+0x2ec>
 801dcca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dcce:	4b1e      	ldr	r3, [pc, #120]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dcd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dcd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dcd6:	ee07 3a90 	vmov	s15, r3
 801dcda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dcde:	ed97 6a02 	vldr	s12, [r7, #8]
 801dce2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801dd58 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dcea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dcee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dcf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dcf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dcfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801dcfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801dd00:	4b11      	ldr	r3, [pc, #68]	@ (801dd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dd02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dd04:	0a5b      	lsrs	r3, r3, #9
 801dd06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dd0a:	3301      	adds	r3, #1
 801dd0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801dd0e:	683b      	ldr	r3, [r7, #0]
 801dd10:	ee07 3a90 	vmov	s15, r3
 801dd14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801dd18:	edd7 6a07 	vldr	s13, [r7, #28]
 801dd1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dd20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dd24:	ee17 3a90 	vmov	r3, s15
 801dd28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801dd2a:	e005      	b.n	801dd38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801dd2c:	2300      	movs	r3, #0
 801dd2e:	61bb      	str	r3, [r7, #24]
      break;
 801dd30:	e002      	b.n	801dd38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801dd32:	4b07      	ldr	r3, [pc, #28]	@ (801dd50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801dd34:	61bb      	str	r3, [r7, #24]
      break;
 801dd36:	bf00      	nop
  }

  return sysclockfreq;
 801dd38:	69bb      	ldr	r3, [r7, #24]
}
 801dd3a:	4618      	mov	r0, r3
 801dd3c:	3724      	adds	r7, #36	@ 0x24
 801dd3e:	46bd      	mov	sp, r7
 801dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd44:	4770      	bx	lr
 801dd46:	bf00      	nop
 801dd48:	58024400 	.word	0x58024400
 801dd4c:	03d09000 	.word	0x03d09000
 801dd50:	003d0900 	.word	0x003d0900
 801dd54:	017d7840 	.word	0x017d7840
 801dd58:	46000000 	.word	0x46000000
 801dd5c:	4c742400 	.word	0x4c742400
 801dd60:	4a742400 	.word	0x4a742400
 801dd64:	4bbebc20 	.word	0x4bbebc20

0801dd68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801dd68:	b580      	push	{r7, lr}
 801dd6a:	b082      	sub	sp, #8
 801dd6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801dd6e:	f7ff fe81 	bl	801da74 <HAL_RCC_GetSysClockFreq>
 801dd72:	4602      	mov	r2, r0
 801dd74:	4b10      	ldr	r3, [pc, #64]	@ (801ddb8 <HAL_RCC_GetHCLKFreq+0x50>)
 801dd76:	699b      	ldr	r3, [r3, #24]
 801dd78:	0a1b      	lsrs	r3, r3, #8
 801dd7a:	f003 030f 	and.w	r3, r3, #15
 801dd7e:	490f      	ldr	r1, [pc, #60]	@ (801ddbc <HAL_RCC_GetHCLKFreq+0x54>)
 801dd80:	5ccb      	ldrb	r3, [r1, r3]
 801dd82:	f003 031f 	and.w	r3, r3, #31
 801dd86:	fa22 f303 	lsr.w	r3, r2, r3
 801dd8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801dd8c:	4b0a      	ldr	r3, [pc, #40]	@ (801ddb8 <HAL_RCC_GetHCLKFreq+0x50>)
 801dd8e:	699b      	ldr	r3, [r3, #24]
 801dd90:	f003 030f 	and.w	r3, r3, #15
 801dd94:	4a09      	ldr	r2, [pc, #36]	@ (801ddbc <HAL_RCC_GetHCLKFreq+0x54>)
 801dd96:	5cd3      	ldrb	r3, [r2, r3]
 801dd98:	f003 031f 	and.w	r3, r3, #31
 801dd9c:	687a      	ldr	r2, [r7, #4]
 801dd9e:	fa22 f303 	lsr.w	r3, r2, r3
 801dda2:	4a07      	ldr	r2, [pc, #28]	@ (801ddc0 <HAL_RCC_GetHCLKFreq+0x58>)
 801dda4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801dda6:	4a07      	ldr	r2, [pc, #28]	@ (801ddc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801ddac:	4b04      	ldr	r3, [pc, #16]	@ (801ddc0 <HAL_RCC_GetHCLKFreq+0x58>)
 801ddae:	681b      	ldr	r3, [r3, #0]
}
 801ddb0:	4618      	mov	r0, r3
 801ddb2:	3708      	adds	r7, #8
 801ddb4:	46bd      	mov	sp, r7
 801ddb6:	bd80      	pop	{r7, pc}
 801ddb8:	58024400 	.word	0x58024400
 801ddbc:	08027d0c 	.word	0x08027d0c
 801ddc0:	20000004 	.word	0x20000004
 801ddc4:	20000000 	.word	0x20000000

0801ddc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801ddc8:	b580      	push	{r7, lr}
 801ddca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801ddcc:	f7ff ffcc 	bl	801dd68 <HAL_RCC_GetHCLKFreq>
 801ddd0:	4602      	mov	r2, r0
 801ddd2:	4b06      	ldr	r3, [pc, #24]	@ (801ddec <HAL_RCC_GetPCLK1Freq+0x24>)
 801ddd4:	69db      	ldr	r3, [r3, #28]
 801ddd6:	091b      	lsrs	r3, r3, #4
 801ddd8:	f003 0307 	and.w	r3, r3, #7
 801dddc:	4904      	ldr	r1, [pc, #16]	@ (801ddf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 801ddde:	5ccb      	ldrb	r3, [r1, r3]
 801dde0:	f003 031f 	and.w	r3, r3, #31
 801dde4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801dde8:	4618      	mov	r0, r3
 801ddea:	bd80      	pop	{r7, pc}
 801ddec:	58024400 	.word	0x58024400
 801ddf0:	08027d0c 	.word	0x08027d0c

0801ddf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801ddf4:	b580      	push	{r7, lr}
 801ddf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801ddf8:	f7ff ffb6 	bl	801dd68 <HAL_RCC_GetHCLKFreq>
 801ddfc:	4602      	mov	r2, r0
 801ddfe:	4b06      	ldr	r3, [pc, #24]	@ (801de18 <HAL_RCC_GetPCLK2Freq+0x24>)
 801de00:	69db      	ldr	r3, [r3, #28]
 801de02:	0a1b      	lsrs	r3, r3, #8
 801de04:	f003 0307 	and.w	r3, r3, #7
 801de08:	4904      	ldr	r1, [pc, #16]	@ (801de1c <HAL_RCC_GetPCLK2Freq+0x28>)
 801de0a:	5ccb      	ldrb	r3, [r1, r3]
 801de0c:	f003 031f 	and.w	r3, r3, #31
 801de10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801de14:	4618      	mov	r0, r3
 801de16:	bd80      	pop	{r7, pc}
 801de18:	58024400 	.word	0x58024400
 801de1c:	08027d0c 	.word	0x08027d0c

0801de20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801de20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801de24:	b0ca      	sub	sp, #296	@ 0x128
 801de26:	af00      	add	r7, sp, #0
 801de28:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801de2c:	2300      	movs	r3, #0
 801de2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801de32:	2300      	movs	r3, #0
 801de34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801de38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801de44:	2500      	movs	r5, #0
 801de46:	ea54 0305 	orrs.w	r3, r4, r5
 801de4a:	d049      	beq.n	801dee0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801de4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801de52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801de56:	d02f      	beq.n	801deb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801de58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801de5c:	d828      	bhi.n	801deb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801de5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801de62:	d01a      	beq.n	801de9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801de64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801de68:	d822      	bhi.n	801deb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d003      	beq.n	801de76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801de6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801de72:	d007      	beq.n	801de84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801de74:	e01c      	b.n	801deb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801de76:	4bb8      	ldr	r3, [pc, #736]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801de78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de7a:	4ab7      	ldr	r2, [pc, #732]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801de7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801de80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801de82:	e01a      	b.n	801deba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801de84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de88:	3308      	adds	r3, #8
 801de8a:	2102      	movs	r1, #2
 801de8c:	4618      	mov	r0, r3
 801de8e:	f001 fc8f 	bl	801f7b0 <RCCEx_PLL2_Config>
 801de92:	4603      	mov	r3, r0
 801de94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801de98:	e00f      	b.n	801deba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801de9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de9e:	3328      	adds	r3, #40	@ 0x28
 801dea0:	2102      	movs	r1, #2
 801dea2:	4618      	mov	r0, r3
 801dea4:	f001 fd36 	bl	801f914 <RCCEx_PLL3_Config>
 801dea8:	4603      	mov	r3, r0
 801deaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801deae:	e004      	b.n	801deba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801deb0:	2301      	movs	r3, #1
 801deb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801deb6:	e000      	b.n	801deba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801deb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801deba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d10a      	bne.n	801ded8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801dec2:	4ba5      	ldr	r3, [pc, #660]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dec6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801deca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ded0:	4aa1      	ldr	r2, [pc, #644]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ded2:	430b      	orrs	r3, r1
 801ded4:	6513      	str	r3, [r2, #80]	@ 0x50
 801ded6:	e003      	b.n	801dee0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ded8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dedc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801dee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dee8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801deec:	f04f 0900 	mov.w	r9, #0
 801def0:	ea58 0309 	orrs.w	r3, r8, r9
 801def4:	d047      	beq.n	801df86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801def6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801defa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801defc:	2b04      	cmp	r3, #4
 801defe:	d82a      	bhi.n	801df56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801df00:	a201      	add	r2, pc, #4	@ (adr r2, 801df08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801df02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df06:	bf00      	nop
 801df08:	0801df1d 	.word	0x0801df1d
 801df0c:	0801df2b 	.word	0x0801df2b
 801df10:	0801df41 	.word	0x0801df41
 801df14:	0801df5f 	.word	0x0801df5f
 801df18:	0801df5f 	.word	0x0801df5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801df1c:	4b8e      	ldr	r3, [pc, #568]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801df1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801df20:	4a8d      	ldr	r2, [pc, #564]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801df22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801df26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801df28:	e01a      	b.n	801df60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801df2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df2e:	3308      	adds	r3, #8
 801df30:	2100      	movs	r1, #0
 801df32:	4618      	mov	r0, r3
 801df34:	f001 fc3c 	bl	801f7b0 <RCCEx_PLL2_Config>
 801df38:	4603      	mov	r3, r0
 801df3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801df3e:	e00f      	b.n	801df60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801df40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df44:	3328      	adds	r3, #40	@ 0x28
 801df46:	2100      	movs	r1, #0
 801df48:	4618      	mov	r0, r3
 801df4a:	f001 fce3 	bl	801f914 <RCCEx_PLL3_Config>
 801df4e:	4603      	mov	r3, r0
 801df50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801df54:	e004      	b.n	801df60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801df56:	2301      	movs	r3, #1
 801df58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801df5c:	e000      	b.n	801df60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801df5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801df60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df64:	2b00      	cmp	r3, #0
 801df66:	d10a      	bne.n	801df7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801df68:	4b7b      	ldr	r3, [pc, #492]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801df6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801df6c:	f023 0107 	bic.w	r1, r3, #7
 801df70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801df76:	4a78      	ldr	r2, [pc, #480]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801df78:	430b      	orrs	r3, r1
 801df7a:	6513      	str	r3, [r2, #80]	@ 0x50
 801df7c:	e003      	b.n	801df86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801df7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801df86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df8e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801df92:	f04f 0b00 	mov.w	fp, #0
 801df96:	ea5a 030b 	orrs.w	r3, sl, fp
 801df9a:	d04c      	beq.n	801e036 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801df9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801dfa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dfa6:	d030      	beq.n	801e00a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801dfa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dfac:	d829      	bhi.n	801e002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801dfae:	2bc0      	cmp	r3, #192	@ 0xc0
 801dfb0:	d02d      	beq.n	801e00e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801dfb2:	2bc0      	cmp	r3, #192	@ 0xc0
 801dfb4:	d825      	bhi.n	801e002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801dfb6:	2b80      	cmp	r3, #128	@ 0x80
 801dfb8:	d018      	beq.n	801dfec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801dfba:	2b80      	cmp	r3, #128	@ 0x80
 801dfbc:	d821      	bhi.n	801e002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d002      	beq.n	801dfc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801dfc2:	2b40      	cmp	r3, #64	@ 0x40
 801dfc4:	d007      	beq.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801dfc6:	e01c      	b.n	801e002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dfc8:	4b63      	ldr	r3, [pc, #396]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dfca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dfcc:	4a62      	ldr	r2, [pc, #392]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dfce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dfd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801dfd4:	e01c      	b.n	801e010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dfd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfda:	3308      	adds	r3, #8
 801dfdc:	2100      	movs	r1, #0
 801dfde:	4618      	mov	r0, r3
 801dfe0:	f001 fbe6 	bl	801f7b0 <RCCEx_PLL2_Config>
 801dfe4:	4603      	mov	r3, r0
 801dfe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801dfea:	e011      	b.n	801e010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801dfec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dff0:	3328      	adds	r3, #40	@ 0x28
 801dff2:	2100      	movs	r1, #0
 801dff4:	4618      	mov	r0, r3
 801dff6:	f001 fc8d 	bl	801f914 <RCCEx_PLL3_Config>
 801dffa:	4603      	mov	r3, r0
 801dffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e000:	e006      	b.n	801e010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e002:	2301      	movs	r3, #1
 801e004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e008:	e002      	b.n	801e010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801e00a:	bf00      	nop
 801e00c:	e000      	b.n	801e010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801e00e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e014:	2b00      	cmp	r3, #0
 801e016:	d10a      	bne.n	801e02e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801e018:	4b4f      	ldr	r3, [pc, #316]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e01a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e01c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801e020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e026:	4a4c      	ldr	r2, [pc, #304]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e028:	430b      	orrs	r3, r1
 801e02a:	6513      	str	r3, [r2, #80]	@ 0x50
 801e02c:	e003      	b.n	801e036 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e02e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801e036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e03e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801e042:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801e046:	2300      	movs	r3, #0
 801e048:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801e04c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801e050:	460b      	mov	r3, r1
 801e052:	4313      	orrs	r3, r2
 801e054:	d053      	beq.n	801e0fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801e056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e05a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801e05e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e062:	d035      	beq.n	801e0d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801e064:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e068:	d82e      	bhi.n	801e0c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e06a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e06e:	d031      	beq.n	801e0d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801e070:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e074:	d828      	bhi.n	801e0c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e076:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e07a:	d01a      	beq.n	801e0b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801e07c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e080:	d822      	bhi.n	801e0c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e082:	2b00      	cmp	r3, #0
 801e084:	d003      	beq.n	801e08e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801e086:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e08a:	d007      	beq.n	801e09c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801e08c:	e01c      	b.n	801e0c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e08e:	4b32      	ldr	r3, [pc, #200]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e092:	4a31      	ldr	r2, [pc, #196]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e098:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e09a:	e01c      	b.n	801e0d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0a0:	3308      	adds	r3, #8
 801e0a2:	2100      	movs	r1, #0
 801e0a4:	4618      	mov	r0, r3
 801e0a6:	f001 fb83 	bl	801f7b0 <RCCEx_PLL2_Config>
 801e0aa:	4603      	mov	r3, r0
 801e0ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801e0b0:	e011      	b.n	801e0d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0b6:	3328      	adds	r3, #40	@ 0x28
 801e0b8:	2100      	movs	r1, #0
 801e0ba:	4618      	mov	r0, r3
 801e0bc:	f001 fc2a 	bl	801f914 <RCCEx_PLL3_Config>
 801e0c0:	4603      	mov	r3, r0
 801e0c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e0c6:	e006      	b.n	801e0d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801e0c8:	2301      	movs	r3, #1
 801e0ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e0ce:	e002      	b.n	801e0d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801e0d0:	bf00      	nop
 801e0d2:	e000      	b.n	801e0d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801e0d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d10b      	bne.n	801e0f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801e0de:	4b1e      	ldr	r3, [pc, #120]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e0e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e0e2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801e0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801e0ee:	4a1a      	ldr	r2, [pc, #104]	@ (801e158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e0f0:	430b      	orrs	r3, r1
 801e0f2:	6593      	str	r3, [r2, #88]	@ 0x58
 801e0f4:	e003      	b.n	801e0fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801e0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e106:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801e10a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801e10e:	2300      	movs	r3, #0
 801e110:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801e114:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801e118:	460b      	mov	r3, r1
 801e11a:	4313      	orrs	r3, r2
 801e11c:	d056      	beq.n	801e1cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801e11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e122:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801e126:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e12a:	d038      	beq.n	801e19e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801e12c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e130:	d831      	bhi.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e132:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e136:	d034      	beq.n	801e1a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801e138:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e13c:	d82b      	bhi.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e13e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e142:	d01d      	beq.n	801e180 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801e144:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e148:	d825      	bhi.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	d006      	beq.n	801e15c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801e14e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e152:	d00a      	beq.n	801e16a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801e154:	e01f      	b.n	801e196 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e156:	bf00      	nop
 801e158:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e15c:	4ba2      	ldr	r3, [pc, #648]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e160:	4aa1      	ldr	r2, [pc, #644]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e168:	e01c      	b.n	801e1a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e16e:	3308      	adds	r3, #8
 801e170:	2100      	movs	r1, #0
 801e172:	4618      	mov	r0, r3
 801e174:	f001 fb1c 	bl	801f7b0 <RCCEx_PLL2_Config>
 801e178:	4603      	mov	r3, r0
 801e17a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801e17e:	e011      	b.n	801e1a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e184:	3328      	adds	r3, #40	@ 0x28
 801e186:	2100      	movs	r1, #0
 801e188:	4618      	mov	r0, r3
 801e18a:	f001 fbc3 	bl	801f914 <RCCEx_PLL3_Config>
 801e18e:	4603      	mov	r3, r0
 801e190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e194:	e006      	b.n	801e1a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801e196:	2301      	movs	r3, #1
 801e198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e19c:	e002      	b.n	801e1a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801e19e:	bf00      	nop
 801e1a0:	e000      	b.n	801e1a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801e1a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e1a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	d10b      	bne.n	801e1c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801e1ac:	4b8e      	ldr	r3, [pc, #568]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e1ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e1b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801e1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801e1bc:	4a8a      	ldr	r2, [pc, #552]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e1be:	430b      	orrs	r3, r1
 801e1c0:	6593      	str	r3, [r2, #88]	@ 0x58
 801e1c2:	e003      	b.n	801e1cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e1c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801e1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801e1d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801e1dc:	2300      	movs	r3, #0
 801e1de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801e1e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801e1e6:	460b      	mov	r3, r1
 801e1e8:	4313      	orrs	r3, r2
 801e1ea:	d03a      	beq.n	801e262 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801e1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e1f2:	2b30      	cmp	r3, #48	@ 0x30
 801e1f4:	d01f      	beq.n	801e236 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801e1f6:	2b30      	cmp	r3, #48	@ 0x30
 801e1f8:	d819      	bhi.n	801e22e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801e1fa:	2b20      	cmp	r3, #32
 801e1fc:	d00c      	beq.n	801e218 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801e1fe:	2b20      	cmp	r3, #32
 801e200:	d815      	bhi.n	801e22e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801e202:	2b00      	cmp	r3, #0
 801e204:	d019      	beq.n	801e23a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801e206:	2b10      	cmp	r3, #16
 801e208:	d111      	bne.n	801e22e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e20a:	4b77      	ldr	r3, [pc, #476]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e20e:	4a76      	ldr	r2, [pc, #472]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801e216:	e011      	b.n	801e23c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e21c:	3308      	adds	r3, #8
 801e21e:	2102      	movs	r1, #2
 801e220:	4618      	mov	r0, r3
 801e222:	f001 fac5 	bl	801f7b0 <RCCEx_PLL2_Config>
 801e226:	4603      	mov	r3, r0
 801e228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801e22c:	e006      	b.n	801e23c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e22e:	2301      	movs	r3, #1
 801e230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e234:	e002      	b.n	801e23c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801e236:	bf00      	nop
 801e238:	e000      	b.n	801e23c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801e23a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e23c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e240:	2b00      	cmp	r3, #0
 801e242:	d10a      	bne.n	801e25a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801e244:	4b68      	ldr	r3, [pc, #416]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e248:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801e24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e252:	4a65      	ldr	r2, [pc, #404]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e254:	430b      	orrs	r3, r1
 801e256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e258:	e003      	b.n	801e262 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e25a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e25e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801e262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e26a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801e26e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801e272:	2300      	movs	r3, #0
 801e274:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801e278:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801e27c:	460b      	mov	r3, r1
 801e27e:	4313      	orrs	r3, r2
 801e280:	d051      	beq.n	801e326 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801e282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e288:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e28c:	d035      	beq.n	801e2fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801e28e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e292:	d82e      	bhi.n	801e2f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e294:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e298:	d031      	beq.n	801e2fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801e29a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e29e:	d828      	bhi.n	801e2f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e2a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e2a4:	d01a      	beq.n	801e2dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801e2a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e2aa:	d822      	bhi.n	801e2f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	d003      	beq.n	801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801e2b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e2b4:	d007      	beq.n	801e2c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801e2b6:	e01c      	b.n	801e2f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e2b8:	4b4b      	ldr	r3, [pc, #300]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e2bc:	4a4a      	ldr	r2, [pc, #296]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e2be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e2c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e2c4:	e01c      	b.n	801e300 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2ca:	3308      	adds	r3, #8
 801e2cc:	2100      	movs	r1, #0
 801e2ce:	4618      	mov	r0, r3
 801e2d0:	f001 fa6e 	bl	801f7b0 <RCCEx_PLL2_Config>
 801e2d4:	4603      	mov	r3, r0
 801e2d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e2da:	e011      	b.n	801e300 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2e0:	3328      	adds	r3, #40	@ 0x28
 801e2e2:	2100      	movs	r1, #0
 801e2e4:	4618      	mov	r0, r3
 801e2e6:	f001 fb15 	bl	801f914 <RCCEx_PLL3_Config>
 801e2ea:	4603      	mov	r3, r0
 801e2ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e2f0:	e006      	b.n	801e300 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e2f2:	2301      	movs	r3, #1
 801e2f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e2f8:	e002      	b.n	801e300 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801e2fa:	bf00      	nop
 801e2fc:	e000      	b.n	801e300 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801e2fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e304:	2b00      	cmp	r3, #0
 801e306:	d10a      	bne.n	801e31e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801e308:	4b37      	ldr	r3, [pc, #220]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e30a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e30c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801e310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e316:	4a34      	ldr	r2, [pc, #208]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e318:	430b      	orrs	r3, r1
 801e31a:	6513      	str	r3, [r2, #80]	@ 0x50
 801e31c:	e003      	b.n	801e326 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e31e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801e326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e32e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801e332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801e336:	2300      	movs	r3, #0
 801e338:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801e33c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801e340:	460b      	mov	r3, r1
 801e342:	4313      	orrs	r3, r2
 801e344:	d056      	beq.n	801e3f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801e346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e34a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e34c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e350:	d033      	beq.n	801e3ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801e352:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e356:	d82c      	bhi.n	801e3b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e358:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e35c:	d02f      	beq.n	801e3be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801e35e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e362:	d826      	bhi.n	801e3b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e368:	d02b      	beq.n	801e3c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801e36a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e36e:	d820      	bhi.n	801e3b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e374:	d012      	beq.n	801e39c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801e376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e37a:	d81a      	bhi.n	801e3b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	d022      	beq.n	801e3c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801e380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e384:	d115      	bne.n	801e3b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e38a:	3308      	adds	r3, #8
 801e38c:	2101      	movs	r1, #1
 801e38e:	4618      	mov	r0, r3
 801e390:	f001 fa0e 	bl	801f7b0 <RCCEx_PLL2_Config>
 801e394:	4603      	mov	r3, r0
 801e396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e39a:	e015      	b.n	801e3c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3a0:	3328      	adds	r3, #40	@ 0x28
 801e3a2:	2101      	movs	r1, #1
 801e3a4:	4618      	mov	r0, r3
 801e3a6:	f001 fab5 	bl	801f914 <RCCEx_PLL3_Config>
 801e3aa:	4603      	mov	r3, r0
 801e3ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e3b0:	e00a      	b.n	801e3c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e3b2:	2301      	movs	r3, #1
 801e3b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e3b8:	e006      	b.n	801e3c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e3ba:	bf00      	nop
 801e3bc:	e004      	b.n	801e3c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e3be:	bf00      	nop
 801e3c0:	e002      	b.n	801e3c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e3c2:	bf00      	nop
 801e3c4:	e000      	b.n	801e3c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e3c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e3c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d10d      	bne.n	801e3ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801e3d0:	4b05      	ldr	r3, [pc, #20]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e3d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e3d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801e3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e3de:	4a02      	ldr	r2, [pc, #8]	@ (801e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e3e0:	430b      	orrs	r3, r1
 801e3e2:	6513      	str	r3, [r2, #80]	@ 0x50
 801e3e4:	e006      	b.n	801e3f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801e3e6:	bf00      	nop
 801e3e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e3ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801e3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3fc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801e400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801e404:	2300      	movs	r3, #0
 801e406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801e40a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801e40e:	460b      	mov	r3, r1
 801e410:	4313      	orrs	r3, r2
 801e412:	d055      	beq.n	801e4c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801e414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e418:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e41c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e420:	d033      	beq.n	801e48a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801e422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e426:	d82c      	bhi.n	801e482 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e42c:	d02f      	beq.n	801e48e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801e42e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e432:	d826      	bhi.n	801e482 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e434:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e438:	d02b      	beq.n	801e492 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801e43a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e43e:	d820      	bhi.n	801e482 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e444:	d012      	beq.n	801e46c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801e446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e44a:	d81a      	bhi.n	801e482 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d022      	beq.n	801e496 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801e450:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e454:	d115      	bne.n	801e482 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e45a:	3308      	adds	r3, #8
 801e45c:	2101      	movs	r1, #1
 801e45e:	4618      	mov	r0, r3
 801e460:	f001 f9a6 	bl	801f7b0 <RCCEx_PLL2_Config>
 801e464:	4603      	mov	r3, r0
 801e466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e46a:	e015      	b.n	801e498 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e470:	3328      	adds	r3, #40	@ 0x28
 801e472:	2101      	movs	r1, #1
 801e474:	4618      	mov	r0, r3
 801e476:	f001 fa4d 	bl	801f914 <RCCEx_PLL3_Config>
 801e47a:	4603      	mov	r3, r0
 801e47c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e480:	e00a      	b.n	801e498 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801e482:	2301      	movs	r3, #1
 801e484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e488:	e006      	b.n	801e498 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e48a:	bf00      	nop
 801e48c:	e004      	b.n	801e498 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e48e:	bf00      	nop
 801e490:	e002      	b.n	801e498 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e492:	bf00      	nop
 801e494:	e000      	b.n	801e498 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e496:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d10b      	bne.n	801e4b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801e4a0:	4ba3      	ldr	r3, [pc, #652]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e4a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e4a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e4a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e4b0:	4a9f      	ldr	r2, [pc, #636]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e4b2:	430b      	orrs	r3, r1
 801e4b4:	6593      	str	r3, [r2, #88]	@ 0x58
 801e4b6:	e003      	b.n	801e4c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e4b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801e4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801e4cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801e4d0:	2300      	movs	r3, #0
 801e4d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801e4d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801e4da:	460b      	mov	r3, r1
 801e4dc:	4313      	orrs	r3, r2
 801e4de:	d037      	beq.n	801e550 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801e4e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e4e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e4ea:	d00e      	beq.n	801e50a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801e4ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e4f0:	d816      	bhi.n	801e520 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	d018      	beq.n	801e528 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801e4f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e4fa:	d111      	bne.n	801e520 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e4fc:	4b8c      	ldr	r3, [pc, #560]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e500:	4a8b      	ldr	r2, [pc, #556]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e508:	e00f      	b.n	801e52a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e50e:	3308      	adds	r3, #8
 801e510:	2101      	movs	r1, #1
 801e512:	4618      	mov	r0, r3
 801e514:	f001 f94c 	bl	801f7b0 <RCCEx_PLL2_Config>
 801e518:	4603      	mov	r3, r0
 801e51a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e51e:	e004      	b.n	801e52a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e520:	2301      	movs	r3, #1
 801e522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e526:	e000      	b.n	801e52a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801e528:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e52a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e52e:	2b00      	cmp	r3, #0
 801e530:	d10a      	bne.n	801e548 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801e532:	4b7f      	ldr	r3, [pc, #508]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e536:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e53e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e540:	4a7b      	ldr	r2, [pc, #492]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e542:	430b      	orrs	r3, r1
 801e544:	6513      	str	r3, [r2, #80]	@ 0x50
 801e546:	e003      	b.n	801e550 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e54c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801e550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e554:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e558:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801e55c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801e560:	2300      	movs	r3, #0
 801e562:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801e566:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801e56a:	460b      	mov	r3, r1
 801e56c:	4313      	orrs	r3, r2
 801e56e:	d039      	beq.n	801e5e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801e570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e576:	2b03      	cmp	r3, #3
 801e578:	d81c      	bhi.n	801e5b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801e57a:	a201      	add	r2, pc, #4	@ (adr r2, 801e580 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801e57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e580:	0801e5bd 	.word	0x0801e5bd
 801e584:	0801e591 	.word	0x0801e591
 801e588:	0801e59f 	.word	0x0801e59f
 801e58c:	0801e5bd 	.word	0x0801e5bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e590:	4b67      	ldr	r3, [pc, #412]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e594:	4a66      	ldr	r2, [pc, #408]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e59a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e59c:	e00f      	b.n	801e5be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5a2:	3308      	adds	r3, #8
 801e5a4:	2102      	movs	r1, #2
 801e5a6:	4618      	mov	r0, r3
 801e5a8:	f001 f902 	bl	801f7b0 <RCCEx_PLL2_Config>
 801e5ac:	4603      	mov	r3, r0
 801e5ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e5b2:	e004      	b.n	801e5be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e5b4:	2301      	movs	r3, #1
 801e5b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e5ba:	e000      	b.n	801e5be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801e5bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e5be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e5c2:	2b00      	cmp	r3, #0
 801e5c4:	d10a      	bne.n	801e5dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801e5c6:	4b5a      	ldr	r3, [pc, #360]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e5c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e5ca:	f023 0103 	bic.w	r1, r3, #3
 801e5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e5d4:	4a56      	ldr	r2, [pc, #344]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e5d6:	430b      	orrs	r3, r1
 801e5d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e5da:	e003      	b.n	801e5e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e5dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e5e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801e5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801e5f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801e5f4:	2300      	movs	r3, #0
 801e5f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801e5fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801e5fe:	460b      	mov	r3, r1
 801e600:	4313      	orrs	r3, r2
 801e602:	f000 809f 	beq.w	801e744 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801e606:	4b4b      	ldr	r3, [pc, #300]	@ (801e734 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e608:	681b      	ldr	r3, [r3, #0]
 801e60a:	4a4a      	ldr	r2, [pc, #296]	@ (801e734 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e60c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e610:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801e612:	f7fc f807 	bl	801a624 <HAL_GetTick>
 801e616:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e61a:	e00b      	b.n	801e634 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801e61c:	f7fc f802 	bl	801a624 <HAL_GetTick>
 801e620:	4602      	mov	r2, r0
 801e622:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e626:	1ad3      	subs	r3, r2, r3
 801e628:	2b64      	cmp	r3, #100	@ 0x64
 801e62a:	d903      	bls.n	801e634 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801e62c:	2303      	movs	r3, #3
 801e62e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e632:	e005      	b.n	801e640 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e634:	4b3f      	ldr	r3, [pc, #252]	@ (801e734 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e636:	681b      	ldr	r3, [r3, #0]
 801e638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d0ed      	beq.n	801e61c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801e640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e644:	2b00      	cmp	r3, #0
 801e646:	d179      	bne.n	801e73c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801e648:	4b39      	ldr	r3, [pc, #228]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e64a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801e64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e650:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e654:	4053      	eors	r3, r2
 801e656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d015      	beq.n	801e68a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801e65e:	4b34      	ldr	r3, [pc, #208]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801e666:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801e66a:	4b31      	ldr	r3, [pc, #196]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e66c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e66e:	4a30      	ldr	r2, [pc, #192]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e674:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801e676:	4b2e      	ldr	r3, [pc, #184]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e67a:	4a2d      	ldr	r2, [pc, #180]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e67c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e680:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801e682:	4a2b      	ldr	r2, [pc, #172]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e684:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801e688:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801e68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e68e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e696:	d118      	bne.n	801e6ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e698:	f7fb ffc4 	bl	801a624 <HAL_GetTick>
 801e69c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e6a0:	e00d      	b.n	801e6be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801e6a2:	f7fb ffbf 	bl	801a624 <HAL_GetTick>
 801e6a6:	4602      	mov	r2, r0
 801e6a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e6ac:	1ad2      	subs	r2, r2, r3
 801e6ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 801e6b2:	429a      	cmp	r2, r3
 801e6b4:	d903      	bls.n	801e6be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801e6b6:	2303      	movs	r3, #3
 801e6b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801e6bc:	e005      	b.n	801e6ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e6be:	4b1c      	ldr	r3, [pc, #112]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e6c2:	f003 0302 	and.w	r3, r3, #2
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	d0eb      	beq.n	801e6a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801e6ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6ce:	2b00      	cmp	r3, #0
 801e6d0:	d129      	bne.n	801e726 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801e6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e6da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e6de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e6e2:	d10e      	bne.n	801e702 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801e6e4:	4b12      	ldr	r3, [pc, #72]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6e6:	691b      	ldr	r3, [r3, #16]
 801e6e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801e6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e6f4:	091a      	lsrs	r2, r3, #4
 801e6f6:	4b10      	ldr	r3, [pc, #64]	@ (801e738 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801e6f8:	4013      	ands	r3, r2
 801e6fa:	4a0d      	ldr	r2, [pc, #52]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6fc:	430b      	orrs	r3, r1
 801e6fe:	6113      	str	r3, [r2, #16]
 801e700:	e005      	b.n	801e70e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801e702:	4b0b      	ldr	r3, [pc, #44]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e704:	691b      	ldr	r3, [r3, #16]
 801e706:	4a0a      	ldr	r2, [pc, #40]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e708:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e70c:	6113      	str	r3, [r2, #16]
 801e70e:	4b08      	ldr	r3, [pc, #32]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e710:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801e712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e716:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e71a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e71e:	4a04      	ldr	r2, [pc, #16]	@ (801e730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e720:	430b      	orrs	r3, r1
 801e722:	6713      	str	r3, [r2, #112]	@ 0x70
 801e724:	e00e      	b.n	801e744 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801e726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e72a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e72e:	e009      	b.n	801e744 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801e730:	58024400 	.word	0x58024400
 801e734:	58024800 	.word	0x58024800
 801e738:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e73c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801e744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e74c:	f002 0301 	and.w	r3, r2, #1
 801e750:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801e754:	2300      	movs	r3, #0
 801e756:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801e75a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801e75e:	460b      	mov	r3, r1
 801e760:	4313      	orrs	r3, r2
 801e762:	f000 8089 	beq.w	801e878 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801e766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e76a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e76c:	2b28      	cmp	r3, #40	@ 0x28
 801e76e:	d86b      	bhi.n	801e848 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801e770:	a201      	add	r2, pc, #4	@ (adr r2, 801e778 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801e772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e776:	bf00      	nop
 801e778:	0801e851 	.word	0x0801e851
 801e77c:	0801e849 	.word	0x0801e849
 801e780:	0801e849 	.word	0x0801e849
 801e784:	0801e849 	.word	0x0801e849
 801e788:	0801e849 	.word	0x0801e849
 801e78c:	0801e849 	.word	0x0801e849
 801e790:	0801e849 	.word	0x0801e849
 801e794:	0801e849 	.word	0x0801e849
 801e798:	0801e81d 	.word	0x0801e81d
 801e79c:	0801e849 	.word	0x0801e849
 801e7a0:	0801e849 	.word	0x0801e849
 801e7a4:	0801e849 	.word	0x0801e849
 801e7a8:	0801e849 	.word	0x0801e849
 801e7ac:	0801e849 	.word	0x0801e849
 801e7b0:	0801e849 	.word	0x0801e849
 801e7b4:	0801e849 	.word	0x0801e849
 801e7b8:	0801e833 	.word	0x0801e833
 801e7bc:	0801e849 	.word	0x0801e849
 801e7c0:	0801e849 	.word	0x0801e849
 801e7c4:	0801e849 	.word	0x0801e849
 801e7c8:	0801e849 	.word	0x0801e849
 801e7cc:	0801e849 	.word	0x0801e849
 801e7d0:	0801e849 	.word	0x0801e849
 801e7d4:	0801e849 	.word	0x0801e849
 801e7d8:	0801e851 	.word	0x0801e851
 801e7dc:	0801e849 	.word	0x0801e849
 801e7e0:	0801e849 	.word	0x0801e849
 801e7e4:	0801e849 	.word	0x0801e849
 801e7e8:	0801e849 	.word	0x0801e849
 801e7ec:	0801e849 	.word	0x0801e849
 801e7f0:	0801e849 	.word	0x0801e849
 801e7f4:	0801e849 	.word	0x0801e849
 801e7f8:	0801e851 	.word	0x0801e851
 801e7fc:	0801e849 	.word	0x0801e849
 801e800:	0801e849 	.word	0x0801e849
 801e804:	0801e849 	.word	0x0801e849
 801e808:	0801e849 	.word	0x0801e849
 801e80c:	0801e849 	.word	0x0801e849
 801e810:	0801e849 	.word	0x0801e849
 801e814:	0801e849 	.word	0x0801e849
 801e818:	0801e851 	.word	0x0801e851
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e820:	3308      	adds	r3, #8
 801e822:	2101      	movs	r1, #1
 801e824:	4618      	mov	r0, r3
 801e826:	f000 ffc3 	bl	801f7b0 <RCCEx_PLL2_Config>
 801e82a:	4603      	mov	r3, r0
 801e82c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e830:	e00f      	b.n	801e852 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e836:	3328      	adds	r3, #40	@ 0x28
 801e838:	2101      	movs	r1, #1
 801e83a:	4618      	mov	r0, r3
 801e83c:	f001 f86a 	bl	801f914 <RCCEx_PLL3_Config>
 801e840:	4603      	mov	r3, r0
 801e842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e846:	e004      	b.n	801e852 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e848:	2301      	movs	r3, #1
 801e84a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e84e:	e000      	b.n	801e852 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801e850:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e856:	2b00      	cmp	r3, #0
 801e858:	d10a      	bne.n	801e870 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801e85a:	4bbf      	ldr	r3, [pc, #764]	@ (801eb58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e85c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e85e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801e862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e868:	4abb      	ldr	r2, [pc, #748]	@ (801eb58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e86a:	430b      	orrs	r3, r1
 801e86c:	6553      	str	r3, [r2, #84]	@ 0x54
 801e86e:	e003      	b.n	801e878 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e870:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e874:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801e878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e880:	f002 0302 	and.w	r3, r2, #2
 801e884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801e888:	2300      	movs	r3, #0
 801e88a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801e88e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801e892:	460b      	mov	r3, r1
 801e894:	4313      	orrs	r3, r2
 801e896:	d041      	beq.n	801e91c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801e898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e89c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e89e:	2b05      	cmp	r3, #5
 801e8a0:	d824      	bhi.n	801e8ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801e8a2:	a201      	add	r2, pc, #4	@ (adr r2, 801e8a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801e8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e8a8:	0801e8f5 	.word	0x0801e8f5
 801e8ac:	0801e8c1 	.word	0x0801e8c1
 801e8b0:	0801e8d7 	.word	0x0801e8d7
 801e8b4:	0801e8f5 	.word	0x0801e8f5
 801e8b8:	0801e8f5 	.word	0x0801e8f5
 801e8bc:	0801e8f5 	.word	0x0801e8f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8c4:	3308      	adds	r3, #8
 801e8c6:	2101      	movs	r1, #1
 801e8c8:	4618      	mov	r0, r3
 801e8ca:	f000 ff71 	bl	801f7b0 <RCCEx_PLL2_Config>
 801e8ce:	4603      	mov	r3, r0
 801e8d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801e8d4:	e00f      	b.n	801e8f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8da:	3328      	adds	r3, #40	@ 0x28
 801e8dc:	2101      	movs	r1, #1
 801e8de:	4618      	mov	r0, r3
 801e8e0:	f001 f818 	bl	801f914 <RCCEx_PLL3_Config>
 801e8e4:	4603      	mov	r3, r0
 801e8e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801e8ea:	e004      	b.n	801e8f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e8ec:	2301      	movs	r3, #1
 801e8ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e8f2:	e000      	b.n	801e8f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801e8f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e8f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d10a      	bne.n	801e914 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801e8fe:	4b96      	ldr	r3, [pc, #600]	@ (801eb58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e902:	f023 0107 	bic.w	r1, r3, #7
 801e906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e90a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e90c:	4a92      	ldr	r2, [pc, #584]	@ (801eb58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e90e:	430b      	orrs	r3, r1
 801e910:	6553      	str	r3, [r2, #84]	@ 0x54
 801e912:	e003      	b.n	801e91c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801e91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e920:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e924:	f002 0304 	and.w	r3, r2, #4
 801e928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801e92c:	2300      	movs	r3, #0
 801e92e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801e932:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801e936:	460b      	mov	r3, r1
 801e938:	4313      	orrs	r3, r2
 801e93a:	d044      	beq.n	801e9c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801e93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e944:	2b05      	cmp	r3, #5
 801e946:	d825      	bhi.n	801e994 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801e948:	a201      	add	r2, pc, #4	@ (adr r2, 801e950 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801e94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e94e:	bf00      	nop
 801e950:	0801e99d 	.word	0x0801e99d
 801e954:	0801e969 	.word	0x0801e969
 801e958:	0801e97f 	.word	0x0801e97f
 801e95c:	0801e99d 	.word	0x0801e99d
 801e960:	0801e99d 	.word	0x0801e99d
 801e964:	0801e99d 	.word	0x0801e99d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e96c:	3308      	adds	r3, #8
 801e96e:	2101      	movs	r1, #1
 801e970:	4618      	mov	r0, r3
 801e972:	f000 ff1d 	bl	801f7b0 <RCCEx_PLL2_Config>
 801e976:	4603      	mov	r3, r0
 801e978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801e97c:	e00f      	b.n	801e99e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e982:	3328      	adds	r3, #40	@ 0x28
 801e984:	2101      	movs	r1, #1
 801e986:	4618      	mov	r0, r3
 801e988:	f000 ffc4 	bl	801f914 <RCCEx_PLL3_Config>
 801e98c:	4603      	mov	r3, r0
 801e98e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801e992:	e004      	b.n	801e99e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e994:	2301      	movs	r3, #1
 801e996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e99a:	e000      	b.n	801e99e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801e99c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e99e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d10b      	bne.n	801e9be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801e9a6:	4b6c      	ldr	r3, [pc, #432]	@ (801eb58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e9a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e9aa:	f023 0107 	bic.w	r1, r3, #7
 801e9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e9b6:	4a68      	ldr	r2, [pc, #416]	@ (801eb58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e9b8:	430b      	orrs	r3, r1
 801e9ba:	6593      	str	r3, [r2, #88]	@ 0x58
 801e9bc:	e003      	b.n	801e9c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e9be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e9c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801e9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9ce:	f002 0320 	and.w	r3, r2, #32
 801e9d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801e9d6:	2300      	movs	r3, #0
 801e9d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e9dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801e9e0:	460b      	mov	r3, r1
 801e9e2:	4313      	orrs	r3, r2
 801e9e4:	d055      	beq.n	801ea92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801e9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e9ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e9f2:	d033      	beq.n	801ea5c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801e9f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e9f8:	d82c      	bhi.n	801ea54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e9fe:	d02f      	beq.n	801ea60 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801ea00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ea04:	d826      	bhi.n	801ea54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801ea06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801ea0a:	d02b      	beq.n	801ea64 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801ea0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801ea10:	d820      	bhi.n	801ea54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801ea12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ea16:	d012      	beq.n	801ea3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801ea18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ea1c:	d81a      	bhi.n	801ea54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801ea1e:	2b00      	cmp	r3, #0
 801ea20:	d022      	beq.n	801ea68 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801ea22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ea26:	d115      	bne.n	801ea54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ea28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea2c:	3308      	adds	r3, #8
 801ea2e:	2100      	movs	r1, #0
 801ea30:	4618      	mov	r0, r3
 801ea32:	f000 febd 	bl	801f7b0 <RCCEx_PLL2_Config>
 801ea36:	4603      	mov	r3, r0
 801ea38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801ea3c:	e015      	b.n	801ea6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ea3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea42:	3328      	adds	r3, #40	@ 0x28
 801ea44:	2102      	movs	r1, #2
 801ea46:	4618      	mov	r0, r3
 801ea48:	f000 ff64 	bl	801f914 <RCCEx_PLL3_Config>
 801ea4c:	4603      	mov	r3, r0
 801ea4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801ea52:	e00a      	b.n	801ea6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ea54:	2301      	movs	r3, #1
 801ea56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ea5a:	e006      	b.n	801ea6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ea5c:	bf00      	nop
 801ea5e:	e004      	b.n	801ea6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ea60:	bf00      	nop
 801ea62:	e002      	b.n	801ea6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ea64:	bf00      	nop
 801ea66:	e000      	b.n	801ea6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ea68:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ea6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	d10b      	bne.n	801ea8a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ea72:	4b39      	ldr	r3, [pc, #228]	@ (801eb58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ea74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ea76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801ea7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ea82:	4a35      	ldr	r2, [pc, #212]	@ (801eb58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ea84:	430b      	orrs	r3, r1
 801ea86:	6553      	str	r3, [r2, #84]	@ 0x54
 801ea88:	e003      	b.n	801ea92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ea8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801ea92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea9a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801ea9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801eaa2:	2300      	movs	r3, #0
 801eaa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801eaa8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801eaac:	460b      	mov	r3, r1
 801eaae:	4313      	orrs	r3, r2
 801eab0:	d058      	beq.n	801eb64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801eab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801eaba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801eabe:	d033      	beq.n	801eb28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801eac0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801eac4:	d82c      	bhi.n	801eb20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801eac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801eaca:	d02f      	beq.n	801eb2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801eacc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ead0:	d826      	bhi.n	801eb20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ead2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801ead6:	d02b      	beq.n	801eb30 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801ead8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801eadc:	d820      	bhi.n	801eb20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801eade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801eae2:	d012      	beq.n	801eb0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801eae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801eae8:	d81a      	bhi.n	801eb20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	d022      	beq.n	801eb34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801eaee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801eaf2:	d115      	bne.n	801eb20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801eaf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eaf8:	3308      	adds	r3, #8
 801eafa:	2100      	movs	r1, #0
 801eafc:	4618      	mov	r0, r3
 801eafe:	f000 fe57 	bl	801f7b0 <RCCEx_PLL2_Config>
 801eb02:	4603      	mov	r3, r0
 801eb04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801eb08:	e015      	b.n	801eb36 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801eb0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb0e:	3328      	adds	r3, #40	@ 0x28
 801eb10:	2102      	movs	r1, #2
 801eb12:	4618      	mov	r0, r3
 801eb14:	f000 fefe 	bl	801f914 <RCCEx_PLL3_Config>
 801eb18:	4603      	mov	r3, r0
 801eb1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801eb1e:	e00a      	b.n	801eb36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eb20:	2301      	movs	r3, #1
 801eb22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eb26:	e006      	b.n	801eb36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801eb28:	bf00      	nop
 801eb2a:	e004      	b.n	801eb36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801eb2c:	bf00      	nop
 801eb2e:	e002      	b.n	801eb36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801eb30:	bf00      	nop
 801eb32:	e000      	b.n	801eb36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801eb34:	bf00      	nop
    }

    if (ret == HAL_OK)
 801eb36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	d10e      	bne.n	801eb5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801eb3e:	4b06      	ldr	r3, [pc, #24]	@ (801eb58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eb40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801eb42:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801eb46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801eb4e:	4a02      	ldr	r2, [pc, #8]	@ (801eb58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eb50:	430b      	orrs	r3, r1
 801eb52:	6593      	str	r3, [r2, #88]	@ 0x58
 801eb54:	e006      	b.n	801eb64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801eb56:	bf00      	nop
 801eb58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eb5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801eb64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801eb70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801eb74:	2300      	movs	r3, #0
 801eb76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801eb7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801eb7e:	460b      	mov	r3, r1
 801eb80:	4313      	orrs	r3, r2
 801eb82:	d055      	beq.n	801ec30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801eb84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801eb8c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801eb90:	d033      	beq.n	801ebfa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801eb92:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801eb96:	d82c      	bhi.n	801ebf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801eb98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801eb9c:	d02f      	beq.n	801ebfe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801eb9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801eba2:	d826      	bhi.n	801ebf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801eba4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801eba8:	d02b      	beq.n	801ec02 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801ebaa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801ebae:	d820      	bhi.n	801ebf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ebb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ebb4:	d012      	beq.n	801ebdc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801ebb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ebba:	d81a      	bhi.n	801ebf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ebbc:	2b00      	cmp	r3, #0
 801ebbe:	d022      	beq.n	801ec06 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801ebc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ebc4:	d115      	bne.n	801ebf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ebc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebca:	3308      	adds	r3, #8
 801ebcc:	2100      	movs	r1, #0
 801ebce:	4618      	mov	r0, r3
 801ebd0:	f000 fdee 	bl	801f7b0 <RCCEx_PLL2_Config>
 801ebd4:	4603      	mov	r3, r0
 801ebd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ebda:	e015      	b.n	801ec08 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ebdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebe0:	3328      	adds	r3, #40	@ 0x28
 801ebe2:	2102      	movs	r1, #2
 801ebe4:	4618      	mov	r0, r3
 801ebe6:	f000 fe95 	bl	801f914 <RCCEx_PLL3_Config>
 801ebea:	4603      	mov	r3, r0
 801ebec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ebf0:	e00a      	b.n	801ec08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ebf2:	2301      	movs	r3, #1
 801ebf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ebf8:	e006      	b.n	801ec08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ebfa:	bf00      	nop
 801ebfc:	e004      	b.n	801ec08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ebfe:	bf00      	nop
 801ec00:	e002      	b.n	801ec08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ec02:	bf00      	nop
 801ec04:	e000      	b.n	801ec08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ec06:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ec08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	d10b      	bne.n	801ec28 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801ec10:	4ba1      	ldr	r3, [pc, #644]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ec12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ec14:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801ec18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801ec20:	4a9d      	ldr	r2, [pc, #628]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ec22:	430b      	orrs	r3, r1
 801ec24:	6593      	str	r3, [r2, #88]	@ 0x58
 801ec26:	e003      	b.n	801ec30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ec28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801ec30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec38:	f002 0308 	and.w	r3, r2, #8
 801ec3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801ec40:	2300      	movs	r3, #0
 801ec42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801ec46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801ec4a:	460b      	mov	r3, r1
 801ec4c:	4313      	orrs	r3, r2
 801ec4e:	d01e      	beq.n	801ec8e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801ec50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ec58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ec5c:	d10c      	bne.n	801ec78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ec5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec62:	3328      	adds	r3, #40	@ 0x28
 801ec64:	2102      	movs	r1, #2
 801ec66:	4618      	mov	r0, r3
 801ec68:	f000 fe54 	bl	801f914 <RCCEx_PLL3_Config>
 801ec6c:	4603      	mov	r3, r0
 801ec6e:	2b00      	cmp	r3, #0
 801ec70:	d002      	beq.n	801ec78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801ec72:	2301      	movs	r3, #1
 801ec74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801ec78:	4b87      	ldr	r3, [pc, #540]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ec7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ec7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801ec80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ec88:	4a83      	ldr	r2, [pc, #524]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ec8a:	430b      	orrs	r3, r1
 801ec8c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801ec8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec96:	f002 0310 	and.w	r3, r2, #16
 801ec9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801ec9e:	2300      	movs	r3, #0
 801eca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801eca4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801eca8:	460b      	mov	r3, r1
 801ecaa:	4313      	orrs	r3, r2
 801ecac:	d01e      	beq.n	801ecec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801ecae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ecb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ecba:	d10c      	bne.n	801ecd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ecbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecc0:	3328      	adds	r3, #40	@ 0x28
 801ecc2:	2102      	movs	r1, #2
 801ecc4:	4618      	mov	r0, r3
 801ecc6:	f000 fe25 	bl	801f914 <RCCEx_PLL3_Config>
 801ecca:	4603      	mov	r3, r0
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d002      	beq.n	801ecd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801ecd0:	2301      	movs	r3, #1
 801ecd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801ecd6:	4b70      	ldr	r3, [pc, #448]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ecd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ecda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801ecde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ece2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ece6:	4a6c      	ldr	r2, [pc, #432]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ece8:	430b      	orrs	r3, r1
 801ecea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801ecec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecf4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801ecf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ed02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801ed06:	460b      	mov	r3, r1
 801ed08:	4313      	orrs	r3, r2
 801ed0a:	d03e      	beq.n	801ed8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801ed0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801ed14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ed18:	d022      	beq.n	801ed60 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801ed1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ed1e:	d81b      	bhi.n	801ed58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d003      	beq.n	801ed2c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801ed24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ed28:	d00b      	beq.n	801ed42 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801ed2a:	e015      	b.n	801ed58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ed2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed30:	3308      	adds	r3, #8
 801ed32:	2100      	movs	r1, #0
 801ed34:	4618      	mov	r0, r3
 801ed36:	f000 fd3b 	bl	801f7b0 <RCCEx_PLL2_Config>
 801ed3a:	4603      	mov	r3, r0
 801ed3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801ed40:	e00f      	b.n	801ed62 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ed42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed46:	3328      	adds	r3, #40	@ 0x28
 801ed48:	2102      	movs	r1, #2
 801ed4a:	4618      	mov	r0, r3
 801ed4c:	f000 fde2 	bl	801f914 <RCCEx_PLL3_Config>
 801ed50:	4603      	mov	r3, r0
 801ed52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801ed56:	e004      	b.n	801ed62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ed58:	2301      	movs	r3, #1
 801ed5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ed5e:	e000      	b.n	801ed62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801ed60:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ed62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ed66:	2b00      	cmp	r3, #0
 801ed68:	d10b      	bne.n	801ed82 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801ed6a:	4b4b      	ldr	r3, [pc, #300]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ed6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ed6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801ed72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801ed7a:	4a47      	ldr	r2, [pc, #284]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ed7c:	430b      	orrs	r3, r1
 801ed7e:	6593      	str	r3, [r2, #88]	@ 0x58
 801ed80:	e003      	b.n	801ed8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ed82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ed86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801ed8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed92:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801ed96:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ed98:	2300      	movs	r3, #0
 801ed9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ed9c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801eda0:	460b      	mov	r3, r1
 801eda2:	4313      	orrs	r3, r2
 801eda4:	d03b      	beq.n	801ee1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801eda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801edae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801edb2:	d01f      	beq.n	801edf4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801edb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801edb8:	d818      	bhi.n	801edec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801edba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801edbe:	d003      	beq.n	801edc8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801edc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801edc4:	d007      	beq.n	801edd6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801edc6:	e011      	b.n	801edec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801edc8:	4b33      	ldr	r3, [pc, #204]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801edca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801edcc:	4a32      	ldr	r2, [pc, #200]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801edce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801edd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801edd4:	e00f      	b.n	801edf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801edd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edda:	3328      	adds	r3, #40	@ 0x28
 801eddc:	2101      	movs	r1, #1
 801edde:	4618      	mov	r0, r3
 801ede0:	f000 fd98 	bl	801f914 <RCCEx_PLL3_Config>
 801ede4:	4603      	mov	r3, r0
 801ede6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801edea:	e004      	b.n	801edf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801edec:	2301      	movs	r3, #1
 801edee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801edf2:	e000      	b.n	801edf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801edf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801edf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	d10b      	bne.n	801ee16 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801edfe:	4b26      	ldr	r3, [pc, #152]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ee02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801ee06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ee0e:	4a22      	ldr	r2, [pc, #136]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee10:	430b      	orrs	r3, r1
 801ee12:	6553      	str	r3, [r2, #84]	@ 0x54
 801ee14:	e003      	b.n	801ee1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ee16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801ee1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801ee2a:	673b      	str	r3, [r7, #112]	@ 0x70
 801ee2c:	2300      	movs	r3, #0
 801ee2e:	677b      	str	r3, [r7, #116]	@ 0x74
 801ee30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801ee34:	460b      	mov	r3, r1
 801ee36:	4313      	orrs	r3, r2
 801ee38:	d034      	beq.n	801eea4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801ee3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d003      	beq.n	801ee4c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801ee44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ee48:	d007      	beq.n	801ee5a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801ee4a:	e011      	b.n	801ee70 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ee4c:	4b12      	ldr	r3, [pc, #72]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee50:	4a11      	ldr	r2, [pc, #68]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ee56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801ee58:	e00e      	b.n	801ee78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801ee5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee5e:	3308      	adds	r3, #8
 801ee60:	2102      	movs	r1, #2
 801ee62:	4618      	mov	r0, r3
 801ee64:	f000 fca4 	bl	801f7b0 <RCCEx_PLL2_Config>
 801ee68:	4603      	mov	r3, r0
 801ee6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801ee6e:	e003      	b.n	801ee78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801ee70:	2301      	movs	r3, #1
 801ee72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ee76:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ee78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	d10d      	bne.n	801ee9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801ee80:	4b05      	ldr	r3, [pc, #20]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ee84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801ee88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ee8e:	4a02      	ldr	r2, [pc, #8]	@ (801ee98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee90:	430b      	orrs	r3, r1
 801ee92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801ee94:	e006      	b.n	801eea4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801ee96:	bf00      	nop
 801ee98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ee9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eea0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801eea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801eeb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 801eeb2:	2300      	movs	r3, #0
 801eeb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801eeb6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801eeba:	460b      	mov	r3, r1
 801eebc:	4313      	orrs	r3, r2
 801eebe:	d00c      	beq.n	801eeda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801eec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eec4:	3328      	adds	r3, #40	@ 0x28
 801eec6:	2102      	movs	r1, #2
 801eec8:	4618      	mov	r0, r3
 801eeca:	f000 fd23 	bl	801f914 <RCCEx_PLL3_Config>
 801eece:	4603      	mov	r3, r0
 801eed0:	2b00      	cmp	r3, #0
 801eed2:	d002      	beq.n	801eeda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801eed4:	2301      	movs	r3, #1
 801eed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801eeda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eee2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801eee6:	663b      	str	r3, [r7, #96]	@ 0x60
 801eee8:	2300      	movs	r3, #0
 801eeea:	667b      	str	r3, [r7, #100]	@ 0x64
 801eeec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801eef0:	460b      	mov	r3, r1
 801eef2:	4313      	orrs	r3, r2
 801eef4:	d038      	beq.n	801ef68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801eef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eefa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801eefe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ef02:	d018      	beq.n	801ef36 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801ef04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ef08:	d811      	bhi.n	801ef2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801ef0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ef0e:	d014      	beq.n	801ef3a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801ef10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ef14:	d80b      	bhi.n	801ef2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	d011      	beq.n	801ef3e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801ef1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ef1e:	d106      	bne.n	801ef2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ef20:	4bc3      	ldr	r3, [pc, #780]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ef22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef24:	4ac2      	ldr	r2, [pc, #776]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ef26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ef2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801ef2c:	e008      	b.n	801ef40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ef2e:	2301      	movs	r3, #1
 801ef30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ef34:	e004      	b.n	801ef40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801ef36:	bf00      	nop
 801ef38:	e002      	b.n	801ef40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801ef3a:	bf00      	nop
 801ef3c:	e000      	b.n	801ef40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801ef3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ef40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d10b      	bne.n	801ef60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801ef48:	4bb9      	ldr	r3, [pc, #740]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ef4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ef4c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801ef50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ef58:	4ab5      	ldr	r2, [pc, #724]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ef5a:	430b      	orrs	r3, r1
 801ef5c:	6553      	str	r3, [r2, #84]	@ 0x54
 801ef5e:	e003      	b.n	801ef68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ef60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801ef68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef70:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801ef74:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ef76:	2300      	movs	r3, #0
 801ef78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ef7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801ef7e:	460b      	mov	r3, r1
 801ef80:	4313      	orrs	r3, r2
 801ef82:	d009      	beq.n	801ef98 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801ef84:	4baa      	ldr	r3, [pc, #680]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ef86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ef88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ef8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ef92:	4aa7      	ldr	r2, [pc, #668]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ef94:	430b      	orrs	r3, r1
 801ef96:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801ef98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efa0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801efa4:	653b      	str	r3, [r7, #80]	@ 0x50
 801efa6:	2300      	movs	r3, #0
 801efa8:	657b      	str	r3, [r7, #84]	@ 0x54
 801efaa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801efae:	460b      	mov	r3, r1
 801efb0:	4313      	orrs	r3, r2
 801efb2:	d00a      	beq.n	801efca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801efb4:	4b9e      	ldr	r3, [pc, #632]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801efb6:	691b      	ldr	r3, [r3, #16]
 801efb8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801efbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801efc4:	4a9a      	ldr	r2, [pc, #616]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801efc6:	430b      	orrs	r3, r1
 801efc8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801efca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efd2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801efd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801efd8:	2300      	movs	r3, #0
 801efda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801efdc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801efe0:	460b      	mov	r3, r1
 801efe2:	4313      	orrs	r3, r2
 801efe4:	d009      	beq.n	801effa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801efe6:	4b92      	ldr	r3, [pc, #584]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801efe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801efea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801efee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eff4:	4a8e      	ldr	r2, [pc, #568]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801eff6:	430b      	orrs	r3, r1
 801eff8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801effa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801effe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f002:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801f006:	643b      	str	r3, [r7, #64]	@ 0x40
 801f008:	2300      	movs	r3, #0
 801f00a:	647b      	str	r3, [r7, #68]	@ 0x44
 801f00c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801f010:	460b      	mov	r3, r1
 801f012:	4313      	orrs	r3, r2
 801f014:	d00e      	beq.n	801f034 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801f016:	4b86      	ldr	r3, [pc, #536]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f018:	691b      	ldr	r3, [r3, #16]
 801f01a:	4a85      	ldr	r2, [pc, #532]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f01c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801f020:	6113      	str	r3, [r2, #16]
 801f022:	4b83      	ldr	r3, [pc, #524]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f024:	6919      	ldr	r1, [r3, #16]
 801f026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f02a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801f02e:	4a80      	ldr	r2, [pc, #512]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f030:	430b      	orrs	r3, r1
 801f032:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801f034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f03c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801f040:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f042:	2300      	movs	r3, #0
 801f044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f046:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801f04a:	460b      	mov	r3, r1
 801f04c:	4313      	orrs	r3, r2
 801f04e:	d009      	beq.n	801f064 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801f050:	4b77      	ldr	r3, [pc, #476]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f054:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801f058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f05c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f05e:	4a74      	ldr	r2, [pc, #464]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f060:	430b      	orrs	r3, r1
 801f062:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801f064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f06c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801f070:	633b      	str	r3, [r7, #48]	@ 0x30
 801f072:	2300      	movs	r3, #0
 801f074:	637b      	str	r3, [r7, #52]	@ 0x34
 801f076:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801f07a:	460b      	mov	r3, r1
 801f07c:	4313      	orrs	r3, r2
 801f07e:	d00a      	beq.n	801f096 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801f080:	4b6b      	ldr	r3, [pc, #428]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f084:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801f088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801f090:	4a67      	ldr	r2, [pc, #412]	@ (801f230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f092:	430b      	orrs	r3, r1
 801f094:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801f096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f09e:	2100      	movs	r1, #0
 801f0a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 801f0a2:	f003 0301 	and.w	r3, r3, #1
 801f0a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f0a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801f0ac:	460b      	mov	r3, r1
 801f0ae:	4313      	orrs	r3, r2
 801f0b0:	d011      	beq.n	801f0d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801f0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0b6:	3308      	adds	r3, #8
 801f0b8:	2100      	movs	r1, #0
 801f0ba:	4618      	mov	r0, r3
 801f0bc:	f000 fb78 	bl	801f7b0 <RCCEx_PLL2_Config>
 801f0c0:	4603      	mov	r3, r0
 801f0c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f0ca:	2b00      	cmp	r3, #0
 801f0cc:	d003      	beq.n	801f0d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f0d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801f0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0de:	2100      	movs	r1, #0
 801f0e0:	6239      	str	r1, [r7, #32]
 801f0e2:	f003 0302 	and.w	r3, r3, #2
 801f0e6:	627b      	str	r3, [r7, #36]	@ 0x24
 801f0e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801f0ec:	460b      	mov	r3, r1
 801f0ee:	4313      	orrs	r3, r2
 801f0f0:	d011      	beq.n	801f116 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801f0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0f6:	3308      	adds	r3, #8
 801f0f8:	2101      	movs	r1, #1
 801f0fa:	4618      	mov	r0, r3
 801f0fc:	f000 fb58 	bl	801f7b0 <RCCEx_PLL2_Config>
 801f100:	4603      	mov	r3, r0
 801f102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d003      	beq.n	801f116 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f10e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801f116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f11e:	2100      	movs	r1, #0
 801f120:	61b9      	str	r1, [r7, #24]
 801f122:	f003 0304 	and.w	r3, r3, #4
 801f126:	61fb      	str	r3, [r7, #28]
 801f128:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801f12c:	460b      	mov	r3, r1
 801f12e:	4313      	orrs	r3, r2
 801f130:	d011      	beq.n	801f156 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801f132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f136:	3308      	adds	r3, #8
 801f138:	2102      	movs	r1, #2
 801f13a:	4618      	mov	r0, r3
 801f13c:	f000 fb38 	bl	801f7b0 <RCCEx_PLL2_Config>
 801f140:	4603      	mov	r3, r0
 801f142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d003      	beq.n	801f156 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f14e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f152:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801f156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f15e:	2100      	movs	r1, #0
 801f160:	6139      	str	r1, [r7, #16]
 801f162:	f003 0308 	and.w	r3, r3, #8
 801f166:	617b      	str	r3, [r7, #20]
 801f168:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801f16c:	460b      	mov	r3, r1
 801f16e:	4313      	orrs	r3, r2
 801f170:	d011      	beq.n	801f196 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801f172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f176:	3328      	adds	r3, #40	@ 0x28
 801f178:	2100      	movs	r1, #0
 801f17a:	4618      	mov	r0, r3
 801f17c:	f000 fbca 	bl	801f914 <RCCEx_PLL3_Config>
 801f180:	4603      	mov	r3, r0
 801f182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801f186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	d003      	beq.n	801f196 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f18e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801f196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f19e:	2100      	movs	r1, #0
 801f1a0:	60b9      	str	r1, [r7, #8]
 801f1a2:	f003 0310 	and.w	r3, r3, #16
 801f1a6:	60fb      	str	r3, [r7, #12]
 801f1a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801f1ac:	460b      	mov	r3, r1
 801f1ae:	4313      	orrs	r3, r2
 801f1b0:	d011      	beq.n	801f1d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801f1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1b6:	3328      	adds	r3, #40	@ 0x28
 801f1b8:	2101      	movs	r1, #1
 801f1ba:	4618      	mov	r0, r3
 801f1bc:	f000 fbaa 	bl	801f914 <RCCEx_PLL3_Config>
 801f1c0:	4603      	mov	r3, r0
 801f1c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f1c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f1ca:	2b00      	cmp	r3, #0
 801f1cc:	d003      	beq.n	801f1d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f1ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f1d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801f1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1de:	2100      	movs	r1, #0
 801f1e0:	6039      	str	r1, [r7, #0]
 801f1e2:	f003 0320 	and.w	r3, r3, #32
 801f1e6:	607b      	str	r3, [r7, #4]
 801f1e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 801f1ec:	460b      	mov	r3, r1
 801f1ee:	4313      	orrs	r3, r2
 801f1f0:	d011      	beq.n	801f216 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801f1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1f6:	3328      	adds	r3, #40	@ 0x28
 801f1f8:	2102      	movs	r1, #2
 801f1fa:	4618      	mov	r0, r3
 801f1fc:	f000 fb8a 	bl	801f914 <RCCEx_PLL3_Config>
 801f200:	4603      	mov	r3, r0
 801f202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f20a:	2b00      	cmp	r3, #0
 801f20c:	d003      	beq.n	801f216 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f20e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f212:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801f216:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	d101      	bne.n	801f222 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801f21e:	2300      	movs	r3, #0
 801f220:	e000      	b.n	801f224 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801f222:	2301      	movs	r3, #1
}
 801f224:	4618      	mov	r0, r3
 801f226:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801f22a:	46bd      	mov	sp, r7
 801f22c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f230:	58024400 	.word	0x58024400

0801f234 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801f234:	b580      	push	{r7, lr}
 801f236:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801f238:	f7fe fd96 	bl	801dd68 <HAL_RCC_GetHCLKFreq>
 801f23c:	4602      	mov	r2, r0
 801f23e:	4b06      	ldr	r3, [pc, #24]	@ (801f258 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801f240:	6a1b      	ldr	r3, [r3, #32]
 801f242:	091b      	lsrs	r3, r3, #4
 801f244:	f003 0307 	and.w	r3, r3, #7
 801f248:	4904      	ldr	r1, [pc, #16]	@ (801f25c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801f24a:	5ccb      	ldrb	r3, [r1, r3]
 801f24c:	f003 031f 	and.w	r3, r3, #31
 801f250:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801f254:	4618      	mov	r0, r3
 801f256:	bd80      	pop	{r7, pc}
 801f258:	58024400 	.word	0x58024400
 801f25c:	08027d0c 	.word	0x08027d0c

0801f260 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801f260:	b480      	push	{r7}
 801f262:	b089      	sub	sp, #36	@ 0x24
 801f264:	af00      	add	r7, sp, #0
 801f266:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f268:	4ba1      	ldr	r3, [pc, #644]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f26c:	f003 0303 	and.w	r3, r3, #3
 801f270:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801f272:	4b9f      	ldr	r3, [pc, #636]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f276:	0b1b      	lsrs	r3, r3, #12
 801f278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f27c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801f27e:	4b9c      	ldr	r3, [pc, #624]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f282:	091b      	lsrs	r3, r3, #4
 801f284:	f003 0301 	and.w	r3, r3, #1
 801f288:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801f28a:	4b99      	ldr	r3, [pc, #612]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f28c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f28e:	08db      	lsrs	r3, r3, #3
 801f290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f294:	693a      	ldr	r2, [r7, #16]
 801f296:	fb02 f303 	mul.w	r3, r2, r3
 801f29a:	ee07 3a90 	vmov	s15, r3
 801f29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f2a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801f2a6:	697b      	ldr	r3, [r7, #20]
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	f000 8111 	beq.w	801f4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801f2ae:	69bb      	ldr	r3, [r7, #24]
 801f2b0:	2b02      	cmp	r3, #2
 801f2b2:	f000 8083 	beq.w	801f3bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801f2b6:	69bb      	ldr	r3, [r7, #24]
 801f2b8:	2b02      	cmp	r3, #2
 801f2ba:	f200 80a1 	bhi.w	801f400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801f2be:	69bb      	ldr	r3, [r7, #24]
 801f2c0:	2b00      	cmp	r3, #0
 801f2c2:	d003      	beq.n	801f2cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801f2c4:	69bb      	ldr	r3, [r7, #24]
 801f2c6:	2b01      	cmp	r3, #1
 801f2c8:	d056      	beq.n	801f378 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801f2ca:	e099      	b.n	801f400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f2cc:	4b88      	ldr	r3, [pc, #544]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f2ce:	681b      	ldr	r3, [r3, #0]
 801f2d0:	f003 0320 	and.w	r3, r3, #32
 801f2d4:	2b00      	cmp	r3, #0
 801f2d6:	d02d      	beq.n	801f334 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f2d8:	4b85      	ldr	r3, [pc, #532]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f2da:	681b      	ldr	r3, [r3, #0]
 801f2dc:	08db      	lsrs	r3, r3, #3
 801f2de:	f003 0303 	and.w	r3, r3, #3
 801f2e2:	4a84      	ldr	r2, [pc, #528]	@ (801f4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801f2e4:	fa22 f303 	lsr.w	r3, r2, r3
 801f2e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f2ea:	68bb      	ldr	r3, [r7, #8]
 801f2ec:	ee07 3a90 	vmov	s15, r3
 801f2f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f2f4:	697b      	ldr	r3, [r7, #20]
 801f2f6:	ee07 3a90 	vmov	s15, r3
 801f2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f302:	4b7b      	ldr	r3, [pc, #492]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f30a:	ee07 3a90 	vmov	s15, r3
 801f30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f312:	ed97 6a03 	vldr	s12, [r7, #12]
 801f316:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f32e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f332:	e087      	b.n	801f444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f334:	697b      	ldr	r3, [r7, #20]
 801f336:	ee07 3a90 	vmov	s15, r3
 801f33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f33e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f4fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801f342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f346:	4b6a      	ldr	r3, [pc, #424]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f34e:	ee07 3a90 	vmov	s15, r3
 801f352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f356:	ed97 6a03 	vldr	s12, [r7, #12]
 801f35a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f376:	e065      	b.n	801f444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f378:	697b      	ldr	r3, [r7, #20]
 801f37a:	ee07 3a90 	vmov	s15, r3
 801f37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f382:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f38a:	4b59      	ldr	r3, [pc, #356]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f392:	ee07 3a90 	vmov	s15, r3
 801f396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f39a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f39e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f3aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f3b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f3ba:	e043      	b.n	801f444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f3bc:	697b      	ldr	r3, [r7, #20]
 801f3be:	ee07 3a90 	vmov	s15, r3
 801f3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f3c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801f3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f3ce:	4b48      	ldr	r3, [pc, #288]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f3d6:	ee07 3a90 	vmov	s15, r3
 801f3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f3de:	ed97 6a03 	vldr	s12, [r7, #12]
 801f3e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f3ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f3fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f3fe:	e021      	b.n	801f444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f400:	697b      	ldr	r3, [r7, #20]
 801f402:	ee07 3a90 	vmov	s15, r3
 801f406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f40a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f412:	4b37      	ldr	r3, [pc, #220]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f41a:	ee07 3a90 	vmov	s15, r3
 801f41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f422:	ed97 6a03 	vldr	s12, [r7, #12]
 801f426:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f43e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f442:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801f444:	4b2a      	ldr	r3, [pc, #168]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f448:	0a5b      	lsrs	r3, r3, #9
 801f44a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f44e:	ee07 3a90 	vmov	s15, r3
 801f452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f45a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f45e:	edd7 6a07 	vldr	s13, [r7, #28]
 801f462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f46a:	ee17 2a90 	vmov	r2, s15
 801f46e:	687b      	ldr	r3, [r7, #4]
 801f470:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801f472:	4b1f      	ldr	r3, [pc, #124]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f476:	0c1b      	lsrs	r3, r3, #16
 801f478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f47c:	ee07 3a90 	vmov	s15, r3
 801f480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f484:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f488:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f48c:	edd7 6a07 	vldr	s13, [r7, #28]
 801f490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f498:	ee17 2a90 	vmov	r2, s15
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801f4a0:	4b13      	ldr	r3, [pc, #76]	@ (801f4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f4a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f4a4:	0e1b      	lsrs	r3, r3, #24
 801f4a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f4aa:	ee07 3a90 	vmov	s15, r3
 801f4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f4b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f4b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f4ba:	edd7 6a07 	vldr	s13, [r7, #28]
 801f4be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f4c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f4c6:	ee17 2a90 	vmov	r2, s15
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801f4ce:	e008      	b.n	801f4e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	2200      	movs	r2, #0
 801f4d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	2200      	movs	r2, #0
 801f4da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	2200      	movs	r2, #0
 801f4e0:	609a      	str	r2, [r3, #8]
}
 801f4e2:	bf00      	nop
 801f4e4:	3724      	adds	r7, #36	@ 0x24
 801f4e6:	46bd      	mov	sp, r7
 801f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4ec:	4770      	bx	lr
 801f4ee:	bf00      	nop
 801f4f0:	58024400 	.word	0x58024400
 801f4f4:	03d09000 	.word	0x03d09000
 801f4f8:	46000000 	.word	0x46000000
 801f4fc:	4c742400 	.word	0x4c742400
 801f500:	4a742400 	.word	0x4a742400
 801f504:	4bbebc20 	.word	0x4bbebc20

0801f508 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801f508:	b480      	push	{r7}
 801f50a:	b089      	sub	sp, #36	@ 0x24
 801f50c:	af00      	add	r7, sp, #0
 801f50e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f510:	4ba1      	ldr	r3, [pc, #644]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f514:	f003 0303 	and.w	r3, r3, #3
 801f518:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801f51a:	4b9f      	ldr	r3, [pc, #636]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f51e:	0d1b      	lsrs	r3, r3, #20
 801f520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f524:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801f526:	4b9c      	ldr	r3, [pc, #624]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f52a:	0a1b      	lsrs	r3, r3, #8
 801f52c:	f003 0301 	and.w	r3, r3, #1
 801f530:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801f532:	4b99      	ldr	r3, [pc, #612]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f536:	08db      	lsrs	r3, r3, #3
 801f538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f53c:	693a      	ldr	r2, [r7, #16]
 801f53e:	fb02 f303 	mul.w	r3, r2, r3
 801f542:	ee07 3a90 	vmov	s15, r3
 801f546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f54a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801f54e:	697b      	ldr	r3, [r7, #20]
 801f550:	2b00      	cmp	r3, #0
 801f552:	f000 8111 	beq.w	801f778 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801f556:	69bb      	ldr	r3, [r7, #24]
 801f558:	2b02      	cmp	r3, #2
 801f55a:	f000 8083 	beq.w	801f664 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801f55e:	69bb      	ldr	r3, [r7, #24]
 801f560:	2b02      	cmp	r3, #2
 801f562:	f200 80a1 	bhi.w	801f6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801f566:	69bb      	ldr	r3, [r7, #24]
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d003      	beq.n	801f574 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801f56c:	69bb      	ldr	r3, [r7, #24]
 801f56e:	2b01      	cmp	r3, #1
 801f570:	d056      	beq.n	801f620 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801f572:	e099      	b.n	801f6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f574:	4b88      	ldr	r3, [pc, #544]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	f003 0320 	and.w	r3, r3, #32
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	d02d      	beq.n	801f5dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f580:	4b85      	ldr	r3, [pc, #532]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	08db      	lsrs	r3, r3, #3
 801f586:	f003 0303 	and.w	r3, r3, #3
 801f58a:	4a84      	ldr	r2, [pc, #528]	@ (801f79c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801f58c:	fa22 f303 	lsr.w	r3, r2, r3
 801f590:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f592:	68bb      	ldr	r3, [r7, #8]
 801f594:	ee07 3a90 	vmov	s15, r3
 801f598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f59c:	697b      	ldr	r3, [r7, #20]
 801f59e:	ee07 3a90 	vmov	s15, r3
 801f5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f5aa:	4b7b      	ldr	r3, [pc, #492]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f5b2:	ee07 3a90 	vmov	s15, r3
 801f5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f5ba:	ed97 6a03 	vldr	s12, [r7, #12]
 801f5be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f5ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f5d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f5da:	e087      	b.n	801f6ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f5dc:	697b      	ldr	r3, [r7, #20]
 801f5de:	ee07 3a90 	vmov	s15, r3
 801f5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f5e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801f5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f5ee:	4b6a      	ldr	r3, [pc, #424]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f5f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f5f6:	ee07 3a90 	vmov	s15, r3
 801f5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 801f602:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f60e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f616:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f61a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f61e:	e065      	b.n	801f6ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f620:	697b      	ldr	r3, [r7, #20]
 801f622:	ee07 3a90 	vmov	s15, r3
 801f626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f62a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f632:	4b59      	ldr	r3, [pc, #356]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f63a:	ee07 3a90 	vmov	s15, r3
 801f63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f642:	ed97 6a03 	vldr	s12, [r7, #12]
 801f646:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f65e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f662:	e043      	b.n	801f6ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f664:	697b      	ldr	r3, [r7, #20]
 801f666:	ee07 3a90 	vmov	s15, r3
 801f66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f66e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f7ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801f672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f676:	4b48      	ldr	r3, [pc, #288]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f67e:	ee07 3a90 	vmov	s15, r3
 801f682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f686:	ed97 6a03 	vldr	s12, [r7, #12]
 801f68a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f6a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f6a6:	e021      	b.n	801f6ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f6a8:	697b      	ldr	r3, [r7, #20]
 801f6aa:	ee07 3a90 	vmov	s15, r3
 801f6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f6ba:	4b37      	ldr	r3, [pc, #220]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f6c2:	ee07 3a90 	vmov	s15, r3
 801f6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f6ca:	ed97 6a03 	vldr	s12, [r7, #12]
 801f6ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f6da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f6e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f6ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801f6ec:	4b2a      	ldr	r3, [pc, #168]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f6ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f6f0:	0a5b      	lsrs	r3, r3, #9
 801f6f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f6f6:	ee07 3a90 	vmov	s15, r3
 801f6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f702:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f706:	edd7 6a07 	vldr	s13, [r7, #28]
 801f70a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f70e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f712:	ee17 2a90 	vmov	r2, s15
 801f716:	687b      	ldr	r3, [r7, #4]
 801f718:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801f71a:	4b1f      	ldr	r3, [pc, #124]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f71c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f71e:	0c1b      	lsrs	r3, r3, #16
 801f720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f724:	ee07 3a90 	vmov	s15, r3
 801f728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f72c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f730:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f734:	edd7 6a07 	vldr	s13, [r7, #28]
 801f738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f73c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f740:	ee17 2a90 	vmov	r2, s15
 801f744:	687b      	ldr	r3, [r7, #4]
 801f746:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801f748:	4b13      	ldr	r3, [pc, #76]	@ (801f798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f74a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f74c:	0e1b      	lsrs	r3, r3, #24
 801f74e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f752:	ee07 3a90 	vmov	s15, r3
 801f756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f75a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f75e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f762:	edd7 6a07 	vldr	s13, [r7, #28]
 801f766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f76a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f76e:	ee17 2a90 	vmov	r2, s15
 801f772:	687b      	ldr	r3, [r7, #4]
 801f774:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801f776:	e008      	b.n	801f78a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	2200      	movs	r2, #0
 801f77c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801f77e:	687b      	ldr	r3, [r7, #4]
 801f780:	2200      	movs	r2, #0
 801f782:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	2200      	movs	r2, #0
 801f788:	609a      	str	r2, [r3, #8]
}
 801f78a:	bf00      	nop
 801f78c:	3724      	adds	r7, #36	@ 0x24
 801f78e:	46bd      	mov	sp, r7
 801f790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f794:	4770      	bx	lr
 801f796:	bf00      	nop
 801f798:	58024400 	.word	0x58024400
 801f79c:	03d09000 	.word	0x03d09000
 801f7a0:	46000000 	.word	0x46000000
 801f7a4:	4c742400 	.word	0x4c742400
 801f7a8:	4a742400 	.word	0x4a742400
 801f7ac:	4bbebc20 	.word	0x4bbebc20

0801f7b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801f7b0:	b580      	push	{r7, lr}
 801f7b2:	b084      	sub	sp, #16
 801f7b4:	af00      	add	r7, sp, #0
 801f7b6:	6078      	str	r0, [r7, #4]
 801f7b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f7ba:	2300      	movs	r3, #0
 801f7bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f7be:	4b53      	ldr	r3, [pc, #332]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7c2:	f003 0303 	and.w	r3, r3, #3
 801f7c6:	2b03      	cmp	r3, #3
 801f7c8:	d101      	bne.n	801f7ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801f7ca:	2301      	movs	r3, #1
 801f7cc:	e099      	b.n	801f902 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801f7ce:	4b4f      	ldr	r3, [pc, #316]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f7d0:	681b      	ldr	r3, [r3, #0]
 801f7d2:	4a4e      	ldr	r2, [pc, #312]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f7d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801f7d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f7da:	f7fa ff23 	bl	801a624 <HAL_GetTick>
 801f7de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f7e0:	e008      	b.n	801f7f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f7e2:	f7fa ff1f 	bl	801a624 <HAL_GetTick>
 801f7e6:	4602      	mov	r2, r0
 801f7e8:	68bb      	ldr	r3, [r7, #8]
 801f7ea:	1ad3      	subs	r3, r2, r3
 801f7ec:	2b02      	cmp	r3, #2
 801f7ee:	d901      	bls.n	801f7f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f7f0:	2303      	movs	r3, #3
 801f7f2:	e086      	b.n	801f902 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f7f4:	4b45      	ldr	r3, [pc, #276]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f7f6:	681b      	ldr	r3, [r3, #0]
 801f7f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f7fc:	2b00      	cmp	r3, #0
 801f7fe:	d1f0      	bne.n	801f7e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801f800:	4b42      	ldr	r3, [pc, #264]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f804:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801f808:	687b      	ldr	r3, [r7, #4]
 801f80a:	681b      	ldr	r3, [r3, #0]
 801f80c:	031b      	lsls	r3, r3, #12
 801f80e:	493f      	ldr	r1, [pc, #252]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f810:	4313      	orrs	r3, r2
 801f812:	628b      	str	r3, [r1, #40]	@ 0x28
 801f814:	687b      	ldr	r3, [r7, #4]
 801f816:	685b      	ldr	r3, [r3, #4]
 801f818:	3b01      	subs	r3, #1
 801f81a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	689b      	ldr	r3, [r3, #8]
 801f822:	3b01      	subs	r3, #1
 801f824:	025b      	lsls	r3, r3, #9
 801f826:	b29b      	uxth	r3, r3
 801f828:	431a      	orrs	r2, r3
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	68db      	ldr	r3, [r3, #12]
 801f82e:	3b01      	subs	r3, #1
 801f830:	041b      	lsls	r3, r3, #16
 801f832:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f836:	431a      	orrs	r2, r3
 801f838:	687b      	ldr	r3, [r7, #4]
 801f83a:	691b      	ldr	r3, [r3, #16]
 801f83c:	3b01      	subs	r3, #1
 801f83e:	061b      	lsls	r3, r3, #24
 801f840:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f844:	4931      	ldr	r1, [pc, #196]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f846:	4313      	orrs	r3, r2
 801f848:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801f84a:	4b30      	ldr	r3, [pc, #192]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f84e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	695b      	ldr	r3, [r3, #20]
 801f856:	492d      	ldr	r1, [pc, #180]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f858:	4313      	orrs	r3, r2
 801f85a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801f85c:	4b2b      	ldr	r3, [pc, #172]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f860:	f023 0220 	bic.w	r2, r3, #32
 801f864:	687b      	ldr	r3, [r7, #4]
 801f866:	699b      	ldr	r3, [r3, #24]
 801f868:	4928      	ldr	r1, [pc, #160]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f86a:	4313      	orrs	r3, r2
 801f86c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801f86e:	4b27      	ldr	r3, [pc, #156]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f872:	4a26      	ldr	r2, [pc, #152]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f874:	f023 0310 	bic.w	r3, r3, #16
 801f878:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801f87a:	4b24      	ldr	r3, [pc, #144]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f87c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f87e:	4b24      	ldr	r3, [pc, #144]	@ (801f910 <RCCEx_PLL2_Config+0x160>)
 801f880:	4013      	ands	r3, r2
 801f882:	687a      	ldr	r2, [r7, #4]
 801f884:	69d2      	ldr	r2, [r2, #28]
 801f886:	00d2      	lsls	r2, r2, #3
 801f888:	4920      	ldr	r1, [pc, #128]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f88a:	4313      	orrs	r3, r2
 801f88c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801f88e:	4b1f      	ldr	r3, [pc, #124]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f892:	4a1e      	ldr	r2, [pc, #120]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f894:	f043 0310 	orr.w	r3, r3, #16
 801f898:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f89a:	683b      	ldr	r3, [r7, #0]
 801f89c:	2b00      	cmp	r3, #0
 801f89e:	d106      	bne.n	801f8ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801f8a0:	4b1a      	ldr	r3, [pc, #104]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f8a4:	4a19      	ldr	r2, [pc, #100]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f8a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f8ac:	e00f      	b.n	801f8ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f8ae:	683b      	ldr	r3, [r7, #0]
 801f8b0:	2b01      	cmp	r3, #1
 801f8b2:	d106      	bne.n	801f8c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801f8b4:	4b15      	ldr	r3, [pc, #84]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f8b8:	4a14      	ldr	r2, [pc, #80]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f8ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f8be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f8c0:	e005      	b.n	801f8ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801f8c2:	4b12      	ldr	r3, [pc, #72]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f8c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f8c6:	4a11      	ldr	r2, [pc, #68]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f8c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801f8cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801f8ce:	4b0f      	ldr	r3, [pc, #60]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f8d0:	681b      	ldr	r3, [r3, #0]
 801f8d2:	4a0e      	ldr	r2, [pc, #56]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f8d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801f8d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f8da:	f7fa fea3 	bl	801a624 <HAL_GetTick>
 801f8de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f8e0:	e008      	b.n	801f8f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f8e2:	f7fa fe9f 	bl	801a624 <HAL_GetTick>
 801f8e6:	4602      	mov	r2, r0
 801f8e8:	68bb      	ldr	r3, [r7, #8]
 801f8ea:	1ad3      	subs	r3, r2, r3
 801f8ec:	2b02      	cmp	r3, #2
 801f8ee:	d901      	bls.n	801f8f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f8f0:	2303      	movs	r3, #3
 801f8f2:	e006      	b.n	801f902 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f8f4:	4b05      	ldr	r3, [pc, #20]	@ (801f90c <RCCEx_PLL2_Config+0x15c>)
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d0f0      	beq.n	801f8e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801f900:	7bfb      	ldrb	r3, [r7, #15]
}
 801f902:	4618      	mov	r0, r3
 801f904:	3710      	adds	r7, #16
 801f906:	46bd      	mov	sp, r7
 801f908:	bd80      	pop	{r7, pc}
 801f90a:	bf00      	nop
 801f90c:	58024400 	.word	0x58024400
 801f910:	ffff0007 	.word	0xffff0007

0801f914 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801f914:	b580      	push	{r7, lr}
 801f916:	b084      	sub	sp, #16
 801f918:	af00      	add	r7, sp, #0
 801f91a:	6078      	str	r0, [r7, #4]
 801f91c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f91e:	2300      	movs	r3, #0
 801f920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f922:	4b53      	ldr	r3, [pc, #332]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f926:	f003 0303 	and.w	r3, r3, #3
 801f92a:	2b03      	cmp	r3, #3
 801f92c:	d101      	bne.n	801f932 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801f92e:	2301      	movs	r3, #1
 801f930:	e099      	b.n	801fa66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801f932:	4b4f      	ldr	r3, [pc, #316]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f934:	681b      	ldr	r3, [r3, #0]
 801f936:	4a4e      	ldr	r2, [pc, #312]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801f93c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f93e:	f7fa fe71 	bl	801a624 <HAL_GetTick>
 801f942:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f944:	e008      	b.n	801f958 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f946:	f7fa fe6d 	bl	801a624 <HAL_GetTick>
 801f94a:	4602      	mov	r2, r0
 801f94c:	68bb      	ldr	r3, [r7, #8]
 801f94e:	1ad3      	subs	r3, r2, r3
 801f950:	2b02      	cmp	r3, #2
 801f952:	d901      	bls.n	801f958 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f954:	2303      	movs	r3, #3
 801f956:	e086      	b.n	801fa66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f958:	4b45      	ldr	r3, [pc, #276]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f960:	2b00      	cmp	r3, #0
 801f962:	d1f0      	bne.n	801f946 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801f964:	4b42      	ldr	r3, [pc, #264]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f968:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	681b      	ldr	r3, [r3, #0]
 801f970:	051b      	lsls	r3, r3, #20
 801f972:	493f      	ldr	r1, [pc, #252]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f974:	4313      	orrs	r3, r2
 801f976:	628b      	str	r3, [r1, #40]	@ 0x28
 801f978:	687b      	ldr	r3, [r7, #4]
 801f97a:	685b      	ldr	r3, [r3, #4]
 801f97c:	3b01      	subs	r3, #1
 801f97e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f982:	687b      	ldr	r3, [r7, #4]
 801f984:	689b      	ldr	r3, [r3, #8]
 801f986:	3b01      	subs	r3, #1
 801f988:	025b      	lsls	r3, r3, #9
 801f98a:	b29b      	uxth	r3, r3
 801f98c:	431a      	orrs	r2, r3
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	68db      	ldr	r3, [r3, #12]
 801f992:	3b01      	subs	r3, #1
 801f994:	041b      	lsls	r3, r3, #16
 801f996:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f99a:	431a      	orrs	r2, r3
 801f99c:	687b      	ldr	r3, [r7, #4]
 801f99e:	691b      	ldr	r3, [r3, #16]
 801f9a0:	3b01      	subs	r3, #1
 801f9a2:	061b      	lsls	r3, r3, #24
 801f9a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f9a8:	4931      	ldr	r1, [pc, #196]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f9aa:	4313      	orrs	r3, r2
 801f9ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801f9ae:	4b30      	ldr	r3, [pc, #192]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	695b      	ldr	r3, [r3, #20]
 801f9ba:	492d      	ldr	r1, [pc, #180]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f9bc:	4313      	orrs	r3, r2
 801f9be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801f9c0:	4b2b      	ldr	r3, [pc, #172]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	699b      	ldr	r3, [r3, #24]
 801f9cc:	4928      	ldr	r1, [pc, #160]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f9ce:	4313      	orrs	r3, r2
 801f9d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801f9d2:	4b27      	ldr	r3, [pc, #156]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9d6:	4a26      	ldr	r2, [pc, #152]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f9d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801f9dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801f9de:	4b24      	ldr	r3, [pc, #144]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f9e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801f9e2:	4b24      	ldr	r3, [pc, #144]	@ (801fa74 <RCCEx_PLL3_Config+0x160>)
 801f9e4:	4013      	ands	r3, r2
 801f9e6:	687a      	ldr	r2, [r7, #4]
 801f9e8:	69d2      	ldr	r2, [r2, #28]
 801f9ea:	00d2      	lsls	r2, r2, #3
 801f9ec:	4920      	ldr	r1, [pc, #128]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f9ee:	4313      	orrs	r3, r2
 801f9f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801f9f2:	4b1f      	ldr	r3, [pc, #124]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9f6:	4a1e      	ldr	r2, [pc, #120]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801f9f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f9fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f9fe:	683b      	ldr	r3, [r7, #0]
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	d106      	bne.n	801fa12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801fa04:	4b1a      	ldr	r3, [pc, #104]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801fa06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa08:	4a19      	ldr	r2, [pc, #100]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801fa0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801fa0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fa10:	e00f      	b.n	801fa32 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801fa12:	683b      	ldr	r3, [r7, #0]
 801fa14:	2b01      	cmp	r3, #1
 801fa16:	d106      	bne.n	801fa26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801fa18:	4b15      	ldr	r3, [pc, #84]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801fa1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa1c:	4a14      	ldr	r2, [pc, #80]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801fa1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801fa22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fa24:	e005      	b.n	801fa32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801fa26:	4b12      	ldr	r3, [pc, #72]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801fa28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa2a:	4a11      	ldr	r2, [pc, #68]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801fa2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801fa30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801fa32:	4b0f      	ldr	r3, [pc, #60]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	4a0e      	ldr	r2, [pc, #56]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801fa38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801fa3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fa3e:	f7fa fdf1 	bl	801a624 <HAL_GetTick>
 801fa42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fa44:	e008      	b.n	801fa58 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801fa46:	f7fa fded 	bl	801a624 <HAL_GetTick>
 801fa4a:	4602      	mov	r2, r0
 801fa4c:	68bb      	ldr	r3, [r7, #8]
 801fa4e:	1ad3      	subs	r3, r2, r3
 801fa50:	2b02      	cmp	r3, #2
 801fa52:	d901      	bls.n	801fa58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801fa54:	2303      	movs	r3, #3
 801fa56:	e006      	b.n	801fa66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fa58:	4b05      	ldr	r3, [pc, #20]	@ (801fa70 <RCCEx_PLL3_Config+0x15c>)
 801fa5a:	681b      	ldr	r3, [r3, #0]
 801fa5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801fa60:	2b00      	cmp	r3, #0
 801fa62:	d0f0      	beq.n	801fa46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801fa64:	7bfb      	ldrb	r3, [r7, #15]
}
 801fa66:	4618      	mov	r0, r3
 801fa68:	3710      	adds	r7, #16
 801fa6a:	46bd      	mov	sp, r7
 801fa6c:	bd80      	pop	{r7, pc}
 801fa6e:	bf00      	nop
 801fa70:	58024400 	.word	0x58024400
 801fa74:	ffff0007 	.word	0xffff0007

0801fa78 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801fa78:	b580      	push	{r7, lr}
 801fa7a:	b084      	sub	sp, #16
 801fa7c:	af00      	add	r7, sp, #0
 801fa7e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d101      	bne.n	801fa8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801fa86:	2301      	movs	r3, #1
 801fa88:	e10f      	b.n	801fcaa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801fa8a:	687b      	ldr	r3, [r7, #4]
 801fa8c:	2200      	movs	r2, #0
 801fa8e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	681b      	ldr	r3, [r3, #0]
 801fa94:	4a87      	ldr	r2, [pc, #540]	@ (801fcb4 <HAL_SPI_Init+0x23c>)
 801fa96:	4293      	cmp	r3, r2
 801fa98:	d00f      	beq.n	801faba <HAL_SPI_Init+0x42>
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	681b      	ldr	r3, [r3, #0]
 801fa9e:	4a86      	ldr	r2, [pc, #536]	@ (801fcb8 <HAL_SPI_Init+0x240>)
 801faa0:	4293      	cmp	r3, r2
 801faa2:	d00a      	beq.n	801faba <HAL_SPI_Init+0x42>
 801faa4:	687b      	ldr	r3, [r7, #4]
 801faa6:	681b      	ldr	r3, [r3, #0]
 801faa8:	4a84      	ldr	r2, [pc, #528]	@ (801fcbc <HAL_SPI_Init+0x244>)
 801faaa:	4293      	cmp	r3, r2
 801faac:	d005      	beq.n	801faba <HAL_SPI_Init+0x42>
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	68db      	ldr	r3, [r3, #12]
 801fab2:	2b0f      	cmp	r3, #15
 801fab4:	d901      	bls.n	801faba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801fab6:	2301      	movs	r3, #1
 801fab8:	e0f7      	b.n	801fcaa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801faba:	6878      	ldr	r0, [r7, #4]
 801fabc:	f000 fbba 	bl	8020234 <SPI_GetPacketSize>
 801fac0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801fac2:	687b      	ldr	r3, [r7, #4]
 801fac4:	681b      	ldr	r3, [r3, #0]
 801fac6:	4a7b      	ldr	r2, [pc, #492]	@ (801fcb4 <HAL_SPI_Init+0x23c>)
 801fac8:	4293      	cmp	r3, r2
 801faca:	d00c      	beq.n	801fae6 <HAL_SPI_Init+0x6e>
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	681b      	ldr	r3, [r3, #0]
 801fad0:	4a79      	ldr	r2, [pc, #484]	@ (801fcb8 <HAL_SPI_Init+0x240>)
 801fad2:	4293      	cmp	r3, r2
 801fad4:	d007      	beq.n	801fae6 <HAL_SPI_Init+0x6e>
 801fad6:	687b      	ldr	r3, [r7, #4]
 801fad8:	681b      	ldr	r3, [r3, #0]
 801fada:	4a78      	ldr	r2, [pc, #480]	@ (801fcbc <HAL_SPI_Init+0x244>)
 801fadc:	4293      	cmp	r3, r2
 801fade:	d002      	beq.n	801fae6 <HAL_SPI_Init+0x6e>
 801fae0:	68fb      	ldr	r3, [r7, #12]
 801fae2:	2b08      	cmp	r3, #8
 801fae4:	d811      	bhi.n	801fb0a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801fae6:	687b      	ldr	r3, [r7, #4]
 801fae8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801faea:	4a72      	ldr	r2, [pc, #456]	@ (801fcb4 <HAL_SPI_Init+0x23c>)
 801faec:	4293      	cmp	r3, r2
 801faee:	d009      	beq.n	801fb04 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801faf0:	687b      	ldr	r3, [r7, #4]
 801faf2:	681b      	ldr	r3, [r3, #0]
 801faf4:	4a70      	ldr	r2, [pc, #448]	@ (801fcb8 <HAL_SPI_Init+0x240>)
 801faf6:	4293      	cmp	r3, r2
 801faf8:	d004      	beq.n	801fb04 <HAL_SPI_Init+0x8c>
 801fafa:	687b      	ldr	r3, [r7, #4]
 801fafc:	681b      	ldr	r3, [r3, #0]
 801fafe:	4a6f      	ldr	r2, [pc, #444]	@ (801fcbc <HAL_SPI_Init+0x244>)
 801fb00:	4293      	cmp	r3, r2
 801fb02:	d104      	bne.n	801fb0e <HAL_SPI_Init+0x96>
 801fb04:	68fb      	ldr	r3, [r7, #12]
 801fb06:	2b10      	cmp	r3, #16
 801fb08:	d901      	bls.n	801fb0e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801fb0a:	2301      	movs	r3, #1
 801fb0c:	e0cd      	b.n	801fcaa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801fb0e:	687b      	ldr	r3, [r7, #4]
 801fb10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fb14:	b2db      	uxtb	r3, r3
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	d106      	bne.n	801fb28 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801fb1a:	687b      	ldr	r3, [r7, #4]
 801fb1c:	2200      	movs	r2, #0
 801fb1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801fb22:	6878      	ldr	r0, [r7, #4]
 801fb24:	f7e2 fd18 	bl	8002558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801fb28:	687b      	ldr	r3, [r7, #4]
 801fb2a:	2202      	movs	r2, #2
 801fb2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801fb30:	687b      	ldr	r3, [r7, #4]
 801fb32:	681b      	ldr	r3, [r3, #0]
 801fb34:	681a      	ldr	r2, [r3, #0]
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	681b      	ldr	r3, [r3, #0]
 801fb3a:	f022 0201 	bic.w	r2, r2, #1
 801fb3e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	689b      	ldr	r3, [r3, #8]
 801fb46:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801fb4a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801fb4c:	687b      	ldr	r3, [r7, #4]
 801fb4e:	699b      	ldr	r3, [r3, #24]
 801fb50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fb54:	d119      	bne.n	801fb8a <HAL_SPI_Init+0x112>
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	685b      	ldr	r3, [r3, #4]
 801fb5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fb5e:	d103      	bne.n	801fb68 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801fb60:	687b      	ldr	r3, [r7, #4]
 801fb62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801fb64:	2b00      	cmp	r3, #0
 801fb66:	d008      	beq.n	801fb7a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801fb68:	687b      	ldr	r3, [r7, #4]
 801fb6a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d10c      	bne.n	801fb8a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801fb74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801fb78:	d107      	bne.n	801fb8a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	681b      	ldr	r3, [r3, #0]
 801fb7e:	681a      	ldr	r2, [r3, #0]
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	681b      	ldr	r3, [r3, #0]
 801fb84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801fb88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	685b      	ldr	r3, [r3, #4]
 801fb8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d00f      	beq.n	801fbb6 <HAL_SPI_Init+0x13e>
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	68db      	ldr	r3, [r3, #12]
 801fb9a:	2b06      	cmp	r3, #6
 801fb9c:	d90b      	bls.n	801fbb6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801fb9e:	687b      	ldr	r3, [r7, #4]
 801fba0:	681b      	ldr	r3, [r3, #0]
 801fba2:	681b      	ldr	r3, [r3, #0]
 801fba4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801fba8:	687b      	ldr	r3, [r7, #4]
 801fbaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801fbac:	687b      	ldr	r3, [r7, #4]
 801fbae:	681b      	ldr	r3, [r3, #0]
 801fbb0:	430a      	orrs	r2, r1
 801fbb2:	601a      	str	r2, [r3, #0]
 801fbb4:	e007      	b.n	801fbc6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801fbb6:	687b      	ldr	r3, [r7, #4]
 801fbb8:	681b      	ldr	r3, [r3, #0]
 801fbba:	681a      	ldr	r2, [r3, #0]
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801fbc4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801fbc6:	687b      	ldr	r3, [r7, #4]
 801fbc8:	69da      	ldr	r2, [r3, #28]
 801fbca:	687b      	ldr	r3, [r7, #4]
 801fbcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fbce:	431a      	orrs	r2, r3
 801fbd0:	68bb      	ldr	r3, [r7, #8]
 801fbd2:	431a      	orrs	r2, r3
 801fbd4:	687b      	ldr	r3, [r7, #4]
 801fbd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fbd8:	ea42 0103 	orr.w	r1, r2, r3
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	68da      	ldr	r2, [r3, #12]
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	681b      	ldr	r3, [r3, #0]
 801fbe4:	430a      	orrs	r2, r1
 801fbe6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fbf0:	431a      	orrs	r2, r3
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fbf6:	431a      	orrs	r2, r3
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	699b      	ldr	r3, [r3, #24]
 801fbfc:	431a      	orrs	r2, r3
 801fbfe:	687b      	ldr	r3, [r7, #4]
 801fc00:	691b      	ldr	r3, [r3, #16]
 801fc02:	431a      	orrs	r2, r3
 801fc04:	687b      	ldr	r3, [r7, #4]
 801fc06:	695b      	ldr	r3, [r3, #20]
 801fc08:	431a      	orrs	r2, r3
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	6a1b      	ldr	r3, [r3, #32]
 801fc0e:	431a      	orrs	r2, r3
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	685b      	ldr	r3, [r3, #4]
 801fc14:	431a      	orrs	r2, r3
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fc1a:	431a      	orrs	r2, r3
 801fc1c:	687b      	ldr	r3, [r7, #4]
 801fc1e:	689b      	ldr	r3, [r3, #8]
 801fc20:	431a      	orrs	r2, r3
 801fc22:	687b      	ldr	r3, [r7, #4]
 801fc24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801fc26:	ea42 0103 	orr.w	r1, r2, r3
 801fc2a:	687b      	ldr	r3, [r7, #4]
 801fc2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	681b      	ldr	r3, [r3, #0]
 801fc32:	430a      	orrs	r2, r1
 801fc34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	685b      	ldr	r3, [r3, #4]
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	d113      	bne.n	801fc66 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	689b      	ldr	r3, [r3, #8]
 801fc44:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	681b      	ldr	r3, [r3, #0]
 801fc4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fc50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801fc52:	687b      	ldr	r3, [r7, #4]
 801fc54:	681b      	ldr	r3, [r3, #0]
 801fc56:	689b      	ldr	r3, [r3, #8]
 801fc58:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801fc5c:	687b      	ldr	r3, [r7, #4]
 801fc5e:	681b      	ldr	r3, [r3, #0]
 801fc60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801fc64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	681b      	ldr	r3, [r3, #0]
 801fc6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801fc6c:	687b      	ldr	r3, [r7, #4]
 801fc6e:	681b      	ldr	r3, [r3, #0]
 801fc70:	f022 0201 	bic.w	r2, r2, #1
 801fc74:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801fc76:	687b      	ldr	r3, [r7, #4]
 801fc78:	685b      	ldr	r3, [r3, #4]
 801fc7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d00a      	beq.n	801fc98 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	681b      	ldr	r3, [r3, #0]
 801fc86:	68db      	ldr	r3, [r3, #12]
 801fc88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801fc8c:	687b      	ldr	r3, [r7, #4]
 801fc8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801fc90:	687b      	ldr	r3, [r7, #4]
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	430a      	orrs	r2, r1
 801fc96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	2200      	movs	r2, #0
 801fc9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	2201      	movs	r2, #1
 801fca4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801fca8:	2300      	movs	r3, #0
}
 801fcaa:	4618      	mov	r0, r3
 801fcac:	3710      	adds	r7, #16
 801fcae:	46bd      	mov	sp, r7
 801fcb0:	bd80      	pop	{r7, pc}
 801fcb2:	bf00      	nop
 801fcb4:	40013000 	.word	0x40013000
 801fcb8:	40003800 	.word	0x40003800
 801fcbc:	40003c00 	.word	0x40003c00

0801fcc0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801fcc0:	b580      	push	{r7, lr}
 801fcc2:	b08a      	sub	sp, #40	@ 0x28
 801fcc4:	af00      	add	r7, sp, #0
 801fcc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	681b      	ldr	r3, [r3, #0]
 801fccc:	691b      	ldr	r3, [r3, #16]
 801fcce:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	681b      	ldr	r3, [r3, #0]
 801fcd4:	695b      	ldr	r3, [r3, #20]
 801fcd6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801fcd8:	6a3a      	ldr	r2, [r7, #32]
 801fcda:	69fb      	ldr	r3, [r7, #28]
 801fcdc:	4013      	ands	r3, r2
 801fcde:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	689b      	ldr	r3, [r3, #8]
 801fce6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801fce8:	2300      	movs	r3, #0
 801fcea:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801fcec:	687b      	ldr	r3, [r7, #4]
 801fcee:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fcf2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	681b      	ldr	r3, [r3, #0]
 801fcf8:	3330      	adds	r3, #48	@ 0x30
 801fcfa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801fcfc:	69fb      	ldr	r3, [r7, #28]
 801fcfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d010      	beq.n	801fd28 <HAL_SPI_IRQHandler+0x68>
 801fd06:	6a3b      	ldr	r3, [r7, #32]
 801fd08:	f003 0308 	and.w	r3, r3, #8
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d00b      	beq.n	801fd28 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	681b      	ldr	r3, [r3, #0]
 801fd14:	699a      	ldr	r2, [r3, #24]
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	681b      	ldr	r3, [r3, #0]
 801fd1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fd1e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801fd20:	6878      	ldr	r0, [r7, #4]
 801fd22:	f000 f9c3 	bl	80200ac <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801fd26:	e192      	b.n	802004e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801fd28:	69bb      	ldr	r3, [r7, #24]
 801fd2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	d113      	bne.n	801fd5a <HAL_SPI_IRQHandler+0x9a>
 801fd32:	69bb      	ldr	r3, [r7, #24]
 801fd34:	f003 0320 	and.w	r3, r3, #32
 801fd38:	2b00      	cmp	r3, #0
 801fd3a:	d10e      	bne.n	801fd5a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801fd3c:	69bb      	ldr	r3, [r7, #24]
 801fd3e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	d009      	beq.n	801fd5a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fd4a:	6878      	ldr	r0, [r7, #4]
 801fd4c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fd52:	6878      	ldr	r0, [r7, #4]
 801fd54:	4798      	blx	r3
    handled = 1UL;
 801fd56:	2301      	movs	r3, #1
 801fd58:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801fd5a:	69bb      	ldr	r3, [r7, #24]
 801fd5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	d10f      	bne.n	801fd84 <HAL_SPI_IRQHandler+0xc4>
 801fd64:	69bb      	ldr	r3, [r7, #24]
 801fd66:	f003 0301 	and.w	r3, r3, #1
 801fd6a:	2b00      	cmp	r3, #0
 801fd6c:	d00a      	beq.n	801fd84 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801fd6e:	69bb      	ldr	r3, [r7, #24]
 801fd70:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	d105      	bne.n	801fd84 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fd7c:	6878      	ldr	r0, [r7, #4]
 801fd7e:	4798      	blx	r3
    handled = 1UL;
 801fd80:	2301      	movs	r3, #1
 801fd82:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801fd84:	69bb      	ldr	r3, [r7, #24]
 801fd86:	f003 0320 	and.w	r3, r3, #32
 801fd8a:	2b00      	cmp	r3, #0
 801fd8c:	d10f      	bne.n	801fdae <HAL_SPI_IRQHandler+0xee>
 801fd8e:	69bb      	ldr	r3, [r7, #24]
 801fd90:	f003 0302 	and.w	r3, r3, #2
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	d00a      	beq.n	801fdae <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801fd98:	69bb      	ldr	r3, [r7, #24]
 801fd9a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	d105      	bne.n	801fdae <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fda6:	6878      	ldr	r0, [r7, #4]
 801fda8:	4798      	blx	r3
    handled = 1UL;
 801fdaa:	2301      	movs	r3, #1
 801fdac:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801fdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdb0:	2b00      	cmp	r3, #0
 801fdb2:	f040 8147 	bne.w	8020044 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801fdb6:	69bb      	ldr	r3, [r7, #24]
 801fdb8:	f003 0308 	and.w	r3, r3, #8
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	f000 808b 	beq.w	801fed8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801fdc2:	687b      	ldr	r3, [r7, #4]
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	699a      	ldr	r2, [r3, #24]
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	681b      	ldr	r3, [r3, #0]
 801fdcc:	f042 0208 	orr.w	r2, r2, #8
 801fdd0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	681b      	ldr	r3, [r3, #0]
 801fdd6:	699a      	ldr	r2, [r3, #24]
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	f042 0210 	orr.w	r2, r2, #16
 801fde0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	699a      	ldr	r2, [r3, #24]
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	681b      	ldr	r3, [r3, #0]
 801fdec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fdf0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	691a      	ldr	r2, [r3, #16]
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	681b      	ldr	r3, [r3, #0]
 801fdfc:	f022 0208 	bic.w	r2, r2, #8
 801fe00:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	689b      	ldr	r3, [r3, #8]
 801fe08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	d13d      	bne.n	801fe8c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801fe10:	e036      	b.n	801fe80 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	68db      	ldr	r3, [r3, #12]
 801fe16:	2b0f      	cmp	r3, #15
 801fe18:	d90b      	bls.n	801fe32 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801fe1a:	687b      	ldr	r3, [r7, #4]
 801fe1c:	681a      	ldr	r2, [r3, #0]
 801fe1e:	687b      	ldr	r3, [r7, #4]
 801fe20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801fe22:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801fe24:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801fe2a:	1d1a      	adds	r2, r3, #4
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	665a      	str	r2, [r3, #100]	@ 0x64
 801fe30:	e01d      	b.n	801fe6e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801fe32:	687b      	ldr	r3, [r7, #4]
 801fe34:	68db      	ldr	r3, [r3, #12]
 801fe36:	2b07      	cmp	r3, #7
 801fe38:	d90b      	bls.n	801fe52 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801fe3a:	687b      	ldr	r3, [r7, #4]
 801fe3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801fe3e:	68fa      	ldr	r2, [r7, #12]
 801fe40:	8812      	ldrh	r2, [r2, #0]
 801fe42:	b292      	uxth	r2, r2
 801fe44:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801fe4a:	1c9a      	adds	r2, r3, #2
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	665a      	str	r2, [r3, #100]	@ 0x64
 801fe50:	e00d      	b.n	801fe6e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801fe52:	687b      	ldr	r3, [r7, #4]
 801fe54:	681b      	ldr	r3, [r3, #0]
 801fe56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801fe5a:	687b      	ldr	r3, [r7, #4]
 801fe5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801fe5e:	7812      	ldrb	r2, [r2, #0]
 801fe60:	b2d2      	uxtb	r2, r2
 801fe62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801fe68:	1c5a      	adds	r2, r3, #1
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801fe74:	b29b      	uxth	r3, r3
 801fe76:	3b01      	subs	r3, #1
 801fe78:	b29a      	uxth	r2, r3
 801fe7a:	687b      	ldr	r3, [r7, #4]
 801fe7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801fe80:	687b      	ldr	r3, [r7, #4]
 801fe82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801fe86:	b29b      	uxth	r3, r3
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d1c2      	bne.n	801fe12 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801fe8c:	6878      	ldr	r0, [r7, #4]
 801fe8e:	f000 f931 	bl	80200f4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	2201      	movs	r2, #1
 801fe96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801fe9a:	687b      	ldr	r3, [r7, #4]
 801fe9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fea0:	2b00      	cmp	r3, #0
 801fea2:	d003      	beq.n	801feac <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801fea4:	6878      	ldr	r0, [r7, #4]
 801fea6:	f000 f8f7 	bl	8020098 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801feaa:	e0d0      	b.n	802004e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801feac:	7cfb      	ldrb	r3, [r7, #19]
 801feae:	2b05      	cmp	r3, #5
 801feb0:	d103      	bne.n	801feba <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801feb2:	6878      	ldr	r0, [r7, #4]
 801feb4:	f000 f8e6 	bl	8020084 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801feb8:	e0c6      	b.n	8020048 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801feba:	7cfb      	ldrb	r3, [r7, #19]
 801febc:	2b04      	cmp	r3, #4
 801febe:	d103      	bne.n	801fec8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801fec0:	6878      	ldr	r0, [r7, #4]
 801fec2:	f000 f8d5 	bl	8020070 <HAL_SPI_RxCpltCallback>
    return;
 801fec6:	e0bf      	b.n	8020048 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801fec8:	7cfb      	ldrb	r3, [r7, #19]
 801feca:	2b03      	cmp	r3, #3
 801fecc:	f040 80bc 	bne.w	8020048 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801fed0:	6878      	ldr	r0, [r7, #4]
 801fed2:	f000 f8c3 	bl	802005c <HAL_SPI_TxCpltCallback>
    return;
 801fed6:	e0b7      	b.n	8020048 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801fed8:	69bb      	ldr	r3, [r7, #24]
 801feda:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801fede:	2b00      	cmp	r3, #0
 801fee0:	f000 80b5 	beq.w	802004e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801fee4:	69bb      	ldr	r3, [r7, #24]
 801fee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801feea:	2b00      	cmp	r3, #0
 801feec:	d00f      	beq.n	801ff0e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801feee:	687b      	ldr	r3, [r7, #4]
 801fef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fef4:	f043 0204 	orr.w	r2, r3, #4
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801fefe:	687b      	ldr	r3, [r7, #4]
 801ff00:	681b      	ldr	r3, [r3, #0]
 801ff02:	699a      	ldr	r2, [r3, #24]
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801ff0c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801ff0e:	69bb      	ldr	r3, [r7, #24]
 801ff10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	d00f      	beq.n	801ff38 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801ff18:	687b      	ldr	r3, [r7, #4]
 801ff1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ff1e:	f043 0201 	orr.w	r2, r3, #1
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	681b      	ldr	r3, [r3, #0]
 801ff2c:	699a      	ldr	r2, [r3, #24]
 801ff2e:	687b      	ldr	r3, [r7, #4]
 801ff30:	681b      	ldr	r3, [r3, #0]
 801ff32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801ff36:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801ff38:	69bb      	ldr	r3, [r7, #24]
 801ff3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ff3e:	2b00      	cmp	r3, #0
 801ff40:	d00f      	beq.n	801ff62 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ff48:	f043 0208 	orr.w	r2, r3, #8
 801ff4c:	687b      	ldr	r3, [r7, #4]
 801ff4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	699a      	ldr	r2, [r3, #24]
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801ff60:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801ff62:	69bb      	ldr	r3, [r7, #24]
 801ff64:	f003 0320 	and.w	r3, r3, #32
 801ff68:	2b00      	cmp	r3, #0
 801ff6a:	d00f      	beq.n	801ff8c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801ff6c:	687b      	ldr	r3, [r7, #4]
 801ff6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ff72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801ff76:	687b      	ldr	r3, [r7, #4]
 801ff78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801ff7c:	687b      	ldr	r3, [r7, #4]
 801ff7e:	681b      	ldr	r3, [r3, #0]
 801ff80:	699a      	ldr	r2, [r3, #24]
 801ff82:	687b      	ldr	r3, [r7, #4]
 801ff84:	681b      	ldr	r3, [r3, #0]
 801ff86:	f042 0220 	orr.w	r2, r2, #32
 801ff8a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ff8c:	687b      	ldr	r3, [r7, #4]
 801ff8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d05a      	beq.n	802004c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801ff96:	687b      	ldr	r3, [r7, #4]
 801ff98:	681b      	ldr	r3, [r3, #0]
 801ff9a:	681a      	ldr	r2, [r3, #0]
 801ff9c:	687b      	ldr	r3, [r7, #4]
 801ff9e:	681b      	ldr	r3, [r3, #0]
 801ffa0:	f022 0201 	bic.w	r2, r2, #1
 801ffa4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801ffa6:	687b      	ldr	r3, [r7, #4]
 801ffa8:	681b      	ldr	r3, [r3, #0]
 801ffaa:	6919      	ldr	r1, [r3, #16]
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	681a      	ldr	r2, [r3, #0]
 801ffb0:	4b28      	ldr	r3, [pc, #160]	@ (8020054 <HAL_SPI_IRQHandler+0x394>)
 801ffb2:	400b      	ands	r3, r1
 801ffb4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801ffb6:	697b      	ldr	r3, [r7, #20]
 801ffb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801ffbc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801ffc0:	d138      	bne.n	8020034 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801ffc2:	687b      	ldr	r3, [r7, #4]
 801ffc4:	681b      	ldr	r3, [r3, #0]
 801ffc6:	689a      	ldr	r2, [r3, #8]
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	681b      	ldr	r3, [r3, #0]
 801ffcc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801ffd0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d013      	beq.n	8020002 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ffde:	4a1e      	ldr	r2, [pc, #120]	@ (8020058 <HAL_SPI_IRQHandler+0x398>)
 801ffe0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ffe6:	4618      	mov	r0, r3
 801ffe8:	f7fb f850 	bl	801b08c <HAL_DMA_Abort_IT>
 801ffec:	4603      	mov	r3, r0
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	d007      	beq.n	8020002 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801fff2:	687b      	ldr	r3, [r7, #4]
 801fff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fff8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801fffc:	687b      	ldr	r3, [r7, #4]
 801fffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020006:	2b00      	cmp	r3, #0
 8020008:	d020      	beq.n	802004c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802000a:	687b      	ldr	r3, [r7, #4]
 802000c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 802000e:	4a12      	ldr	r2, [pc, #72]	@ (8020058 <HAL_SPI_IRQHandler+0x398>)
 8020010:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020016:	4618      	mov	r0, r3
 8020018:	f7fb f838 	bl	801b08c <HAL_DMA_Abort_IT>
 802001c:	4603      	mov	r3, r0
 802001e:	2b00      	cmp	r3, #0
 8020020:	d014      	beq.n	802004c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8020022:	687b      	ldr	r3, [r7, #4]
 8020024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020028:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 802002c:	687b      	ldr	r3, [r7, #4]
 802002e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8020032:	e00b      	b.n	802004c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	2201      	movs	r2, #1
 8020038:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 802003c:	6878      	ldr	r0, [r7, #4]
 802003e:	f000 f82b 	bl	8020098 <HAL_SPI_ErrorCallback>
    return;
 8020042:	e003      	b.n	802004c <HAL_SPI_IRQHandler+0x38c>
    return;
 8020044:	bf00      	nop
 8020046:	e002      	b.n	802004e <HAL_SPI_IRQHandler+0x38e>
    return;
 8020048:	bf00      	nop
 802004a:	e000      	b.n	802004e <HAL_SPI_IRQHandler+0x38e>
    return;
 802004c:	bf00      	nop
  }
}
 802004e:	3728      	adds	r7, #40	@ 0x28
 8020050:	46bd      	mov	sp, r7
 8020052:	bd80      	pop	{r7, pc}
 8020054:	fffffc94 	.word	0xfffffc94
 8020058:	080200c1 	.word	0x080200c1

0802005c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 802005c:	b480      	push	{r7}
 802005e:	b083      	sub	sp, #12
 8020060:	af00      	add	r7, sp, #0
 8020062:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8020064:	bf00      	nop
 8020066:	370c      	adds	r7, #12
 8020068:	46bd      	mov	sp, r7
 802006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802006e:	4770      	bx	lr

08020070 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8020070:	b480      	push	{r7}
 8020072:	b083      	sub	sp, #12
 8020074:	af00      	add	r7, sp, #0
 8020076:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8020078:	bf00      	nop
 802007a:	370c      	adds	r7, #12
 802007c:	46bd      	mov	sp, r7
 802007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020082:	4770      	bx	lr

08020084 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8020084:	b480      	push	{r7}
 8020086:	b083      	sub	sp, #12
 8020088:	af00      	add	r7, sp, #0
 802008a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 802008c:	bf00      	nop
 802008e:	370c      	adds	r7, #12
 8020090:	46bd      	mov	sp, r7
 8020092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020096:	4770      	bx	lr

08020098 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8020098:	b480      	push	{r7}
 802009a:	b083      	sub	sp, #12
 802009c:	af00      	add	r7, sp, #0
 802009e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80200a0:	bf00      	nop
 80200a2:	370c      	adds	r7, #12
 80200a4:	46bd      	mov	sp, r7
 80200a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200aa:	4770      	bx	lr

080200ac <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80200ac:	b480      	push	{r7}
 80200ae:	b083      	sub	sp, #12
 80200b0:	af00      	add	r7, sp, #0
 80200b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80200b4:	bf00      	nop
 80200b6:	370c      	adds	r7, #12
 80200b8:	46bd      	mov	sp, r7
 80200ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200be:	4770      	bx	lr

080200c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80200c0:	b580      	push	{r7, lr}
 80200c2:	b084      	sub	sp, #16
 80200c4:	af00      	add	r7, sp, #0
 80200c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80200cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80200ce:	68fb      	ldr	r3, [r7, #12]
 80200d0:	2200      	movs	r2, #0
 80200d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80200d6:	68fb      	ldr	r3, [r7, #12]
 80200d8:	2200      	movs	r2, #0
 80200da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80200de:	68fb      	ldr	r3, [r7, #12]
 80200e0:	2201      	movs	r2, #1
 80200e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80200e6:	68f8      	ldr	r0, [r7, #12]
 80200e8:	f7ff ffd6 	bl	8020098 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80200ec:	bf00      	nop
 80200ee:	3710      	adds	r7, #16
 80200f0:	46bd      	mov	sp, r7
 80200f2:	bd80      	pop	{r7, pc}

080200f4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80200f4:	b480      	push	{r7}
 80200f6:	b085      	sub	sp, #20
 80200f8:	af00      	add	r7, sp, #0
 80200fa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80200fc:	687b      	ldr	r3, [r7, #4]
 80200fe:	681b      	ldr	r3, [r3, #0]
 8020100:	695b      	ldr	r3, [r3, #20]
 8020102:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	699a      	ldr	r2, [r3, #24]
 802010a:	687b      	ldr	r3, [r7, #4]
 802010c:	681b      	ldr	r3, [r3, #0]
 802010e:	f042 0208 	orr.w	r2, r2, #8
 8020112:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8020114:	687b      	ldr	r3, [r7, #4]
 8020116:	681b      	ldr	r3, [r3, #0]
 8020118:	699a      	ldr	r2, [r3, #24]
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	681b      	ldr	r3, [r3, #0]
 802011e:	f042 0210 	orr.w	r2, r2, #16
 8020122:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8020124:	687b      	ldr	r3, [r7, #4]
 8020126:	681b      	ldr	r3, [r3, #0]
 8020128:	681a      	ldr	r2, [r3, #0]
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	681b      	ldr	r3, [r3, #0]
 802012e:	f022 0201 	bic.w	r2, r2, #1
 8020132:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	681b      	ldr	r3, [r3, #0]
 8020138:	6919      	ldr	r1, [r3, #16]
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	681a      	ldr	r2, [r3, #0]
 802013e:	4b3c      	ldr	r3, [pc, #240]	@ (8020230 <SPI_CloseTransfer+0x13c>)
 8020140:	400b      	ands	r3, r1
 8020142:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8020144:	687b      	ldr	r3, [r7, #4]
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	689a      	ldr	r2, [r3, #8]
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	681b      	ldr	r3, [r3, #0]
 802014e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8020152:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 802015a:	b2db      	uxtb	r3, r3
 802015c:	2b04      	cmp	r3, #4
 802015e:	d014      	beq.n	802018a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8020160:	68fb      	ldr	r3, [r7, #12]
 8020162:	f003 0320 	and.w	r3, r3, #32
 8020166:	2b00      	cmp	r3, #0
 8020168:	d00f      	beq.n	802018a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020170:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 802017a:	687b      	ldr	r3, [r7, #4]
 802017c:	681b      	ldr	r3, [r3, #0]
 802017e:	699a      	ldr	r2, [r3, #24]
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	681b      	ldr	r3, [r3, #0]
 8020184:	f042 0220 	orr.w	r2, r2, #32
 8020188:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802018a:	687b      	ldr	r3, [r7, #4]
 802018c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8020190:	b2db      	uxtb	r3, r3
 8020192:	2b03      	cmp	r3, #3
 8020194:	d014      	beq.n	80201c0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8020196:	68fb      	ldr	r3, [r7, #12]
 8020198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802019c:	2b00      	cmp	r3, #0
 802019e:	d00f      	beq.n	80201c0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80201a6:	f043 0204 	orr.w	r2, r3, #4
 80201aa:	687b      	ldr	r3, [r7, #4]
 80201ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80201b0:	687b      	ldr	r3, [r7, #4]
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	699a      	ldr	r2, [r3, #24]
 80201b6:	687b      	ldr	r3, [r7, #4]
 80201b8:	681b      	ldr	r3, [r3, #0]
 80201ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80201be:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80201c0:	68fb      	ldr	r3, [r7, #12]
 80201c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80201c6:	2b00      	cmp	r3, #0
 80201c8:	d00f      	beq.n	80201ea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80201d0:	f043 0201 	orr.w	r2, r3, #1
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	681b      	ldr	r3, [r3, #0]
 80201de:	699a      	ldr	r2, [r3, #24]
 80201e0:	687b      	ldr	r3, [r7, #4]
 80201e2:	681b      	ldr	r3, [r3, #0]
 80201e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80201e8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80201ea:	68fb      	ldr	r3, [r7, #12]
 80201ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80201f0:	2b00      	cmp	r3, #0
 80201f2:	d00f      	beq.n	8020214 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80201fa:	f043 0208 	orr.w	r2, r3, #8
 80201fe:	687b      	ldr	r3, [r7, #4]
 8020200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	699a      	ldr	r2, [r3, #24]
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8020212:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	2200      	movs	r2, #0
 8020218:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	2200      	movs	r2, #0
 8020220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8020224:	bf00      	nop
 8020226:	3714      	adds	r7, #20
 8020228:	46bd      	mov	sp, r7
 802022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802022e:	4770      	bx	lr
 8020230:	fffffc90 	.word	0xfffffc90

08020234 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8020234:	b480      	push	{r7}
 8020236:	b085      	sub	sp, #20
 8020238:	af00      	add	r7, sp, #0
 802023a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020240:	095b      	lsrs	r3, r3, #5
 8020242:	3301      	adds	r3, #1
 8020244:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	68db      	ldr	r3, [r3, #12]
 802024a:	3301      	adds	r3, #1
 802024c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 802024e:	68bb      	ldr	r3, [r7, #8]
 8020250:	3307      	adds	r3, #7
 8020252:	08db      	lsrs	r3, r3, #3
 8020254:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8020256:	68bb      	ldr	r3, [r7, #8]
 8020258:	68fa      	ldr	r2, [r7, #12]
 802025a:	fb02 f303 	mul.w	r3, r2, r3
}
 802025e:	4618      	mov	r0, r3
 8020260:	3714      	adds	r7, #20
 8020262:	46bd      	mov	sp, r7
 8020264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020268:	4770      	bx	lr

0802026a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802026a:	b580      	push	{r7, lr}
 802026c:	b082      	sub	sp, #8
 802026e:	af00      	add	r7, sp, #0
 8020270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	2b00      	cmp	r3, #0
 8020276:	d101      	bne.n	802027c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8020278:	2301      	movs	r3, #1
 802027a:	e049      	b.n	8020310 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8020282:	b2db      	uxtb	r3, r3
 8020284:	2b00      	cmp	r3, #0
 8020286:	d106      	bne.n	8020296 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020288:	687b      	ldr	r3, [r7, #4]
 802028a:	2200      	movs	r2, #0
 802028c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8020290:	6878      	ldr	r0, [r7, #4]
 8020292:	f7e2 fb2d 	bl	80028f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	2202      	movs	r2, #2
 802029a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802029e:	687b      	ldr	r3, [r7, #4]
 80202a0:	681a      	ldr	r2, [r3, #0]
 80202a2:	687b      	ldr	r3, [r7, #4]
 80202a4:	3304      	adds	r3, #4
 80202a6:	4619      	mov	r1, r3
 80202a8:	4610      	mov	r0, r2
 80202aa:	f000 fb1b 	bl	80208e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80202ae:	687b      	ldr	r3, [r7, #4]
 80202b0:	2201      	movs	r2, #1
 80202b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	2201      	movs	r2, #1
 80202ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80202be:	687b      	ldr	r3, [r7, #4]
 80202c0:	2201      	movs	r2, #1
 80202c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80202c6:	687b      	ldr	r3, [r7, #4]
 80202c8:	2201      	movs	r2, #1
 80202ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80202ce:	687b      	ldr	r3, [r7, #4]
 80202d0:	2201      	movs	r2, #1
 80202d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80202d6:	687b      	ldr	r3, [r7, #4]
 80202d8:	2201      	movs	r2, #1
 80202da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80202de:	687b      	ldr	r3, [r7, #4]
 80202e0:	2201      	movs	r2, #1
 80202e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80202e6:	687b      	ldr	r3, [r7, #4]
 80202e8:	2201      	movs	r2, #1
 80202ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80202ee:	687b      	ldr	r3, [r7, #4]
 80202f0:	2201      	movs	r2, #1
 80202f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	2201      	movs	r2, #1
 80202fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80202fe:	687b      	ldr	r3, [r7, #4]
 8020300:	2201      	movs	r2, #1
 8020302:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020306:	687b      	ldr	r3, [r7, #4]
 8020308:	2201      	movs	r2, #1
 802030a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 802030e:	2300      	movs	r3, #0
}
 8020310:	4618      	mov	r0, r3
 8020312:	3708      	adds	r7, #8
 8020314:	46bd      	mov	sp, r7
 8020316:	bd80      	pop	{r7, pc}

08020318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8020318:	b480      	push	{r7}
 802031a:	b085      	sub	sp, #20
 802031c:	af00      	add	r7, sp, #0
 802031e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8020326:	b2db      	uxtb	r3, r3
 8020328:	2b01      	cmp	r3, #1
 802032a:	d001      	beq.n	8020330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802032c:	2301      	movs	r3, #1
 802032e:	e054      	b.n	80203da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	2202      	movs	r2, #2
 8020334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8020338:	687b      	ldr	r3, [r7, #4]
 802033a:	681b      	ldr	r3, [r3, #0]
 802033c:	68da      	ldr	r2, [r3, #12]
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	681b      	ldr	r3, [r3, #0]
 8020342:	f042 0201 	orr.w	r2, r2, #1
 8020346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	681b      	ldr	r3, [r3, #0]
 802034c:	4a26      	ldr	r2, [pc, #152]	@ (80203e8 <HAL_TIM_Base_Start_IT+0xd0>)
 802034e:	4293      	cmp	r3, r2
 8020350:	d022      	beq.n	8020398 <HAL_TIM_Base_Start_IT+0x80>
 8020352:	687b      	ldr	r3, [r7, #4]
 8020354:	681b      	ldr	r3, [r3, #0]
 8020356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802035a:	d01d      	beq.n	8020398 <HAL_TIM_Base_Start_IT+0x80>
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	681b      	ldr	r3, [r3, #0]
 8020360:	4a22      	ldr	r2, [pc, #136]	@ (80203ec <HAL_TIM_Base_Start_IT+0xd4>)
 8020362:	4293      	cmp	r3, r2
 8020364:	d018      	beq.n	8020398 <HAL_TIM_Base_Start_IT+0x80>
 8020366:	687b      	ldr	r3, [r7, #4]
 8020368:	681b      	ldr	r3, [r3, #0]
 802036a:	4a21      	ldr	r2, [pc, #132]	@ (80203f0 <HAL_TIM_Base_Start_IT+0xd8>)
 802036c:	4293      	cmp	r3, r2
 802036e:	d013      	beq.n	8020398 <HAL_TIM_Base_Start_IT+0x80>
 8020370:	687b      	ldr	r3, [r7, #4]
 8020372:	681b      	ldr	r3, [r3, #0]
 8020374:	4a1f      	ldr	r2, [pc, #124]	@ (80203f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8020376:	4293      	cmp	r3, r2
 8020378:	d00e      	beq.n	8020398 <HAL_TIM_Base_Start_IT+0x80>
 802037a:	687b      	ldr	r3, [r7, #4]
 802037c:	681b      	ldr	r3, [r3, #0]
 802037e:	4a1e      	ldr	r2, [pc, #120]	@ (80203f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8020380:	4293      	cmp	r3, r2
 8020382:	d009      	beq.n	8020398 <HAL_TIM_Base_Start_IT+0x80>
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	681b      	ldr	r3, [r3, #0]
 8020388:	4a1c      	ldr	r2, [pc, #112]	@ (80203fc <HAL_TIM_Base_Start_IT+0xe4>)
 802038a:	4293      	cmp	r3, r2
 802038c:	d004      	beq.n	8020398 <HAL_TIM_Base_Start_IT+0x80>
 802038e:	687b      	ldr	r3, [r7, #4]
 8020390:	681b      	ldr	r3, [r3, #0]
 8020392:	4a1b      	ldr	r2, [pc, #108]	@ (8020400 <HAL_TIM_Base_Start_IT+0xe8>)
 8020394:	4293      	cmp	r3, r2
 8020396:	d115      	bne.n	80203c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	681b      	ldr	r3, [r3, #0]
 802039c:	689a      	ldr	r2, [r3, #8]
 802039e:	4b19      	ldr	r3, [pc, #100]	@ (8020404 <HAL_TIM_Base_Start_IT+0xec>)
 80203a0:	4013      	ands	r3, r2
 80203a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80203a4:	68fb      	ldr	r3, [r7, #12]
 80203a6:	2b06      	cmp	r3, #6
 80203a8:	d015      	beq.n	80203d6 <HAL_TIM_Base_Start_IT+0xbe>
 80203aa:	68fb      	ldr	r3, [r7, #12]
 80203ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80203b0:	d011      	beq.n	80203d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80203b2:	687b      	ldr	r3, [r7, #4]
 80203b4:	681b      	ldr	r3, [r3, #0]
 80203b6:	681a      	ldr	r2, [r3, #0]
 80203b8:	687b      	ldr	r3, [r7, #4]
 80203ba:	681b      	ldr	r3, [r3, #0]
 80203bc:	f042 0201 	orr.w	r2, r2, #1
 80203c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80203c2:	e008      	b.n	80203d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	681b      	ldr	r3, [r3, #0]
 80203c8:	681a      	ldr	r2, [r3, #0]
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	681b      	ldr	r3, [r3, #0]
 80203ce:	f042 0201 	orr.w	r2, r2, #1
 80203d2:	601a      	str	r2, [r3, #0]
 80203d4:	e000      	b.n	80203d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80203d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80203d8:	2300      	movs	r3, #0
}
 80203da:	4618      	mov	r0, r3
 80203dc:	3714      	adds	r7, #20
 80203de:	46bd      	mov	sp, r7
 80203e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203e4:	4770      	bx	lr
 80203e6:	bf00      	nop
 80203e8:	40010000 	.word	0x40010000
 80203ec:	40000400 	.word	0x40000400
 80203f0:	40000800 	.word	0x40000800
 80203f4:	40000c00 	.word	0x40000c00
 80203f8:	40010400 	.word	0x40010400
 80203fc:	40001800 	.word	0x40001800
 8020400:	40014000 	.word	0x40014000
 8020404:	00010007 	.word	0x00010007

08020408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8020408:	b580      	push	{r7, lr}
 802040a:	b082      	sub	sp, #8
 802040c:	af00      	add	r7, sp, #0
 802040e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020410:	687b      	ldr	r3, [r7, #4]
 8020412:	2b00      	cmp	r3, #0
 8020414:	d101      	bne.n	802041a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8020416:	2301      	movs	r3, #1
 8020418:	e049      	b.n	80204ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802041a:	687b      	ldr	r3, [r7, #4]
 802041c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8020420:	b2db      	uxtb	r3, r3
 8020422:	2b00      	cmp	r3, #0
 8020424:	d106      	bne.n	8020434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020426:	687b      	ldr	r3, [r7, #4]
 8020428:	2200      	movs	r2, #0
 802042a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 802042e:	6878      	ldr	r0, [r7, #4]
 8020430:	f000 f841 	bl	80204b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	2202      	movs	r2, #2
 8020438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	681a      	ldr	r2, [r3, #0]
 8020440:	687b      	ldr	r3, [r7, #4]
 8020442:	3304      	adds	r3, #4
 8020444:	4619      	mov	r1, r3
 8020446:	4610      	mov	r0, r2
 8020448:	f000 fa4c 	bl	80208e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802044c:	687b      	ldr	r3, [r7, #4]
 802044e:	2201      	movs	r2, #1
 8020450:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020454:	687b      	ldr	r3, [r7, #4]
 8020456:	2201      	movs	r2, #1
 8020458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 802045c:	687b      	ldr	r3, [r7, #4]
 802045e:	2201      	movs	r2, #1
 8020460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8020464:	687b      	ldr	r3, [r7, #4]
 8020466:	2201      	movs	r2, #1
 8020468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 802046c:	687b      	ldr	r3, [r7, #4]
 802046e:	2201      	movs	r2, #1
 8020470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8020474:	687b      	ldr	r3, [r7, #4]
 8020476:	2201      	movs	r2, #1
 8020478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 802047c:	687b      	ldr	r3, [r7, #4]
 802047e:	2201      	movs	r2, #1
 8020480:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	2201      	movs	r2, #1
 8020488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 802048c:	687b      	ldr	r3, [r7, #4]
 802048e:	2201      	movs	r2, #1
 8020490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8020494:	687b      	ldr	r3, [r7, #4]
 8020496:	2201      	movs	r2, #1
 8020498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	2201      	movs	r2, #1
 80204a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80204a4:	687b      	ldr	r3, [r7, #4]
 80204a6:	2201      	movs	r2, #1
 80204a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80204ac:	2300      	movs	r3, #0
}
 80204ae:	4618      	mov	r0, r3
 80204b0:	3708      	adds	r7, #8
 80204b2:	46bd      	mov	sp, r7
 80204b4:	bd80      	pop	{r7, pc}

080204b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80204b6:	b480      	push	{r7}
 80204b8:	b083      	sub	sp, #12
 80204ba:	af00      	add	r7, sp, #0
 80204bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80204be:	bf00      	nop
 80204c0:	370c      	adds	r7, #12
 80204c2:	46bd      	mov	sp, r7
 80204c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204c8:	4770      	bx	lr
	...

080204cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80204cc:	b580      	push	{r7, lr}
 80204ce:	b086      	sub	sp, #24
 80204d0:	af00      	add	r7, sp, #0
 80204d2:	60f8      	str	r0, [r7, #12]
 80204d4:	60b9      	str	r1, [r7, #8]
 80204d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80204d8:	2300      	movs	r3, #0
 80204da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80204dc:	68fb      	ldr	r3, [r7, #12]
 80204de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80204e2:	2b01      	cmp	r3, #1
 80204e4:	d101      	bne.n	80204ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80204e6:	2302      	movs	r3, #2
 80204e8:	e0ff      	b.n	80206ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80204ea:	68fb      	ldr	r3, [r7, #12]
 80204ec:	2201      	movs	r2, #1
 80204ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80204f2:	687b      	ldr	r3, [r7, #4]
 80204f4:	2b14      	cmp	r3, #20
 80204f6:	f200 80f0 	bhi.w	80206da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80204fa:	a201      	add	r2, pc, #4	@ (adr r2, 8020500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80204fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020500:	08020555 	.word	0x08020555
 8020504:	080206db 	.word	0x080206db
 8020508:	080206db 	.word	0x080206db
 802050c:	080206db 	.word	0x080206db
 8020510:	08020595 	.word	0x08020595
 8020514:	080206db 	.word	0x080206db
 8020518:	080206db 	.word	0x080206db
 802051c:	080206db 	.word	0x080206db
 8020520:	080205d7 	.word	0x080205d7
 8020524:	080206db 	.word	0x080206db
 8020528:	080206db 	.word	0x080206db
 802052c:	080206db 	.word	0x080206db
 8020530:	08020617 	.word	0x08020617
 8020534:	080206db 	.word	0x080206db
 8020538:	080206db 	.word	0x080206db
 802053c:	080206db 	.word	0x080206db
 8020540:	08020659 	.word	0x08020659
 8020544:	080206db 	.word	0x080206db
 8020548:	080206db 	.word	0x080206db
 802054c:	080206db 	.word	0x080206db
 8020550:	08020699 	.word	0x08020699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8020554:	68fb      	ldr	r3, [r7, #12]
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	68b9      	ldr	r1, [r7, #8]
 802055a:	4618      	mov	r0, r3
 802055c:	f000 fa68 	bl	8020a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8020560:	68fb      	ldr	r3, [r7, #12]
 8020562:	681b      	ldr	r3, [r3, #0]
 8020564:	699a      	ldr	r2, [r3, #24]
 8020566:	68fb      	ldr	r3, [r7, #12]
 8020568:	681b      	ldr	r3, [r3, #0]
 802056a:	f042 0208 	orr.w	r2, r2, #8
 802056e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020570:	68fb      	ldr	r3, [r7, #12]
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	699a      	ldr	r2, [r3, #24]
 8020576:	68fb      	ldr	r3, [r7, #12]
 8020578:	681b      	ldr	r3, [r3, #0]
 802057a:	f022 0204 	bic.w	r2, r2, #4
 802057e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020580:	68fb      	ldr	r3, [r7, #12]
 8020582:	681b      	ldr	r3, [r3, #0]
 8020584:	6999      	ldr	r1, [r3, #24]
 8020586:	68bb      	ldr	r3, [r7, #8]
 8020588:	691a      	ldr	r2, [r3, #16]
 802058a:	68fb      	ldr	r3, [r7, #12]
 802058c:	681b      	ldr	r3, [r3, #0]
 802058e:	430a      	orrs	r2, r1
 8020590:	619a      	str	r2, [r3, #24]
      break;
 8020592:	e0a5      	b.n	80206e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8020594:	68fb      	ldr	r3, [r7, #12]
 8020596:	681b      	ldr	r3, [r3, #0]
 8020598:	68b9      	ldr	r1, [r7, #8]
 802059a:	4618      	mov	r0, r3
 802059c:	f000 fad8 	bl	8020b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80205a0:	68fb      	ldr	r3, [r7, #12]
 80205a2:	681b      	ldr	r3, [r3, #0]
 80205a4:	699a      	ldr	r2, [r3, #24]
 80205a6:	68fb      	ldr	r3, [r7, #12]
 80205a8:	681b      	ldr	r3, [r3, #0]
 80205aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80205ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80205b0:	68fb      	ldr	r3, [r7, #12]
 80205b2:	681b      	ldr	r3, [r3, #0]
 80205b4:	699a      	ldr	r2, [r3, #24]
 80205b6:	68fb      	ldr	r3, [r7, #12]
 80205b8:	681b      	ldr	r3, [r3, #0]
 80205ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80205be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80205c0:	68fb      	ldr	r3, [r7, #12]
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	6999      	ldr	r1, [r3, #24]
 80205c6:	68bb      	ldr	r3, [r7, #8]
 80205c8:	691b      	ldr	r3, [r3, #16]
 80205ca:	021a      	lsls	r2, r3, #8
 80205cc:	68fb      	ldr	r3, [r7, #12]
 80205ce:	681b      	ldr	r3, [r3, #0]
 80205d0:	430a      	orrs	r2, r1
 80205d2:	619a      	str	r2, [r3, #24]
      break;
 80205d4:	e084      	b.n	80206e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80205d6:	68fb      	ldr	r3, [r7, #12]
 80205d8:	681b      	ldr	r3, [r3, #0]
 80205da:	68b9      	ldr	r1, [r7, #8]
 80205dc:	4618      	mov	r0, r3
 80205de:	f000 fb41 	bl	8020c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80205e2:	68fb      	ldr	r3, [r7, #12]
 80205e4:	681b      	ldr	r3, [r3, #0]
 80205e6:	69da      	ldr	r2, [r3, #28]
 80205e8:	68fb      	ldr	r3, [r7, #12]
 80205ea:	681b      	ldr	r3, [r3, #0]
 80205ec:	f042 0208 	orr.w	r2, r2, #8
 80205f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80205f2:	68fb      	ldr	r3, [r7, #12]
 80205f4:	681b      	ldr	r3, [r3, #0]
 80205f6:	69da      	ldr	r2, [r3, #28]
 80205f8:	68fb      	ldr	r3, [r7, #12]
 80205fa:	681b      	ldr	r3, [r3, #0]
 80205fc:	f022 0204 	bic.w	r2, r2, #4
 8020600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020602:	68fb      	ldr	r3, [r7, #12]
 8020604:	681b      	ldr	r3, [r3, #0]
 8020606:	69d9      	ldr	r1, [r3, #28]
 8020608:	68bb      	ldr	r3, [r7, #8]
 802060a:	691a      	ldr	r2, [r3, #16]
 802060c:	68fb      	ldr	r3, [r7, #12]
 802060e:	681b      	ldr	r3, [r3, #0]
 8020610:	430a      	orrs	r2, r1
 8020612:	61da      	str	r2, [r3, #28]
      break;
 8020614:	e064      	b.n	80206e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8020616:	68fb      	ldr	r3, [r7, #12]
 8020618:	681b      	ldr	r3, [r3, #0]
 802061a:	68b9      	ldr	r1, [r7, #8]
 802061c:	4618      	mov	r0, r3
 802061e:	f000 fba9 	bl	8020d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8020622:	68fb      	ldr	r3, [r7, #12]
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	69da      	ldr	r2, [r3, #28]
 8020628:	68fb      	ldr	r3, [r7, #12]
 802062a:	681b      	ldr	r3, [r3, #0]
 802062c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8020630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8020632:	68fb      	ldr	r3, [r7, #12]
 8020634:	681b      	ldr	r3, [r3, #0]
 8020636:	69da      	ldr	r2, [r3, #28]
 8020638:	68fb      	ldr	r3, [r7, #12]
 802063a:	681b      	ldr	r3, [r3, #0]
 802063c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8020640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8020642:	68fb      	ldr	r3, [r7, #12]
 8020644:	681b      	ldr	r3, [r3, #0]
 8020646:	69d9      	ldr	r1, [r3, #28]
 8020648:	68bb      	ldr	r3, [r7, #8]
 802064a:	691b      	ldr	r3, [r3, #16]
 802064c:	021a      	lsls	r2, r3, #8
 802064e:	68fb      	ldr	r3, [r7, #12]
 8020650:	681b      	ldr	r3, [r3, #0]
 8020652:	430a      	orrs	r2, r1
 8020654:	61da      	str	r2, [r3, #28]
      break;
 8020656:	e043      	b.n	80206e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8020658:	68fb      	ldr	r3, [r7, #12]
 802065a:	681b      	ldr	r3, [r3, #0]
 802065c:	68b9      	ldr	r1, [r7, #8]
 802065e:	4618      	mov	r0, r3
 8020660:	f000 fbf2 	bl	8020e48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8020664:	68fb      	ldr	r3, [r7, #12]
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802066a:	68fb      	ldr	r3, [r7, #12]
 802066c:	681b      	ldr	r3, [r3, #0]
 802066e:	f042 0208 	orr.w	r2, r2, #8
 8020672:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8020674:	68fb      	ldr	r3, [r7, #12]
 8020676:	681b      	ldr	r3, [r3, #0]
 8020678:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802067a:	68fb      	ldr	r3, [r7, #12]
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	f022 0204 	bic.w	r2, r2, #4
 8020682:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8020684:	68fb      	ldr	r3, [r7, #12]
 8020686:	681b      	ldr	r3, [r3, #0]
 8020688:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 802068a:	68bb      	ldr	r3, [r7, #8]
 802068c:	691a      	ldr	r2, [r3, #16]
 802068e:	68fb      	ldr	r3, [r7, #12]
 8020690:	681b      	ldr	r3, [r3, #0]
 8020692:	430a      	orrs	r2, r1
 8020694:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8020696:	e023      	b.n	80206e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8020698:	68fb      	ldr	r3, [r7, #12]
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	68b9      	ldr	r1, [r7, #8]
 802069e:	4618      	mov	r0, r3
 80206a0:	f000 fc36 	bl	8020f10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80206a4:	68fb      	ldr	r3, [r7, #12]
 80206a6:	681b      	ldr	r3, [r3, #0]
 80206a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80206aa:	68fb      	ldr	r3, [r7, #12]
 80206ac:	681b      	ldr	r3, [r3, #0]
 80206ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80206b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80206b4:	68fb      	ldr	r3, [r7, #12]
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80206ba:	68fb      	ldr	r3, [r7, #12]
 80206bc:	681b      	ldr	r3, [r3, #0]
 80206be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80206c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80206c4:	68fb      	ldr	r3, [r7, #12]
 80206c6:	681b      	ldr	r3, [r3, #0]
 80206c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80206ca:	68bb      	ldr	r3, [r7, #8]
 80206cc:	691b      	ldr	r3, [r3, #16]
 80206ce:	021a      	lsls	r2, r3, #8
 80206d0:	68fb      	ldr	r3, [r7, #12]
 80206d2:	681b      	ldr	r3, [r3, #0]
 80206d4:	430a      	orrs	r2, r1
 80206d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80206d8:	e002      	b.n	80206e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80206da:	2301      	movs	r3, #1
 80206dc:	75fb      	strb	r3, [r7, #23]
      break;
 80206de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80206e0:	68fb      	ldr	r3, [r7, #12]
 80206e2:	2200      	movs	r2, #0
 80206e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80206e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80206ea:	4618      	mov	r0, r3
 80206ec:	3718      	adds	r7, #24
 80206ee:	46bd      	mov	sp, r7
 80206f0:	bd80      	pop	{r7, pc}
 80206f2:	bf00      	nop

080206f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80206f4:	b580      	push	{r7, lr}
 80206f6:	b084      	sub	sp, #16
 80206f8:	af00      	add	r7, sp, #0
 80206fa:	6078      	str	r0, [r7, #4]
 80206fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80206fe:	2300      	movs	r3, #0
 8020700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020702:	687b      	ldr	r3, [r7, #4]
 8020704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8020708:	2b01      	cmp	r3, #1
 802070a:	d101      	bne.n	8020710 <HAL_TIM_ConfigClockSource+0x1c>
 802070c:	2302      	movs	r3, #2
 802070e:	e0dc      	b.n	80208ca <HAL_TIM_ConfigClockSource+0x1d6>
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	2201      	movs	r2, #1
 8020714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8020718:	687b      	ldr	r3, [r7, #4]
 802071a:	2202      	movs	r2, #2
 802071c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020720:	687b      	ldr	r3, [r7, #4]
 8020722:	681b      	ldr	r3, [r3, #0]
 8020724:	689b      	ldr	r3, [r3, #8]
 8020726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8020728:	68ba      	ldr	r2, [r7, #8]
 802072a:	4b6a      	ldr	r3, [pc, #424]	@ (80208d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 802072c:	4013      	ands	r3, r2
 802072e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020730:	68bb      	ldr	r3, [r7, #8]
 8020732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8020736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8020738:	687b      	ldr	r3, [r7, #4]
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	68ba      	ldr	r2, [r7, #8]
 802073e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8020740:	683b      	ldr	r3, [r7, #0]
 8020742:	681b      	ldr	r3, [r3, #0]
 8020744:	4a64      	ldr	r2, [pc, #400]	@ (80208d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8020746:	4293      	cmp	r3, r2
 8020748:	f000 80a9 	beq.w	802089e <HAL_TIM_ConfigClockSource+0x1aa>
 802074c:	4a62      	ldr	r2, [pc, #392]	@ (80208d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 802074e:	4293      	cmp	r3, r2
 8020750:	f200 80ae 	bhi.w	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8020754:	4a61      	ldr	r2, [pc, #388]	@ (80208dc <HAL_TIM_ConfigClockSource+0x1e8>)
 8020756:	4293      	cmp	r3, r2
 8020758:	f000 80a1 	beq.w	802089e <HAL_TIM_ConfigClockSource+0x1aa>
 802075c:	4a5f      	ldr	r2, [pc, #380]	@ (80208dc <HAL_TIM_ConfigClockSource+0x1e8>)
 802075e:	4293      	cmp	r3, r2
 8020760:	f200 80a6 	bhi.w	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8020764:	4a5e      	ldr	r2, [pc, #376]	@ (80208e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8020766:	4293      	cmp	r3, r2
 8020768:	f000 8099 	beq.w	802089e <HAL_TIM_ConfigClockSource+0x1aa>
 802076c:	4a5c      	ldr	r2, [pc, #368]	@ (80208e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 802076e:	4293      	cmp	r3, r2
 8020770:	f200 809e 	bhi.w	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8020774:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8020778:	f000 8091 	beq.w	802089e <HAL_TIM_ConfigClockSource+0x1aa>
 802077c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8020780:	f200 8096 	bhi.w	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8020784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020788:	f000 8089 	beq.w	802089e <HAL_TIM_ConfigClockSource+0x1aa>
 802078c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020790:	f200 808e 	bhi.w	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8020794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020798:	d03e      	beq.n	8020818 <HAL_TIM_ConfigClockSource+0x124>
 802079a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802079e:	f200 8087 	bhi.w	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80207a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80207a6:	f000 8086 	beq.w	80208b6 <HAL_TIM_ConfigClockSource+0x1c2>
 80207aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80207ae:	d87f      	bhi.n	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80207b0:	2b70      	cmp	r3, #112	@ 0x70
 80207b2:	d01a      	beq.n	80207ea <HAL_TIM_ConfigClockSource+0xf6>
 80207b4:	2b70      	cmp	r3, #112	@ 0x70
 80207b6:	d87b      	bhi.n	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80207b8:	2b60      	cmp	r3, #96	@ 0x60
 80207ba:	d050      	beq.n	802085e <HAL_TIM_ConfigClockSource+0x16a>
 80207bc:	2b60      	cmp	r3, #96	@ 0x60
 80207be:	d877      	bhi.n	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80207c0:	2b50      	cmp	r3, #80	@ 0x50
 80207c2:	d03c      	beq.n	802083e <HAL_TIM_ConfigClockSource+0x14a>
 80207c4:	2b50      	cmp	r3, #80	@ 0x50
 80207c6:	d873      	bhi.n	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80207c8:	2b40      	cmp	r3, #64	@ 0x40
 80207ca:	d058      	beq.n	802087e <HAL_TIM_ConfigClockSource+0x18a>
 80207cc:	2b40      	cmp	r3, #64	@ 0x40
 80207ce:	d86f      	bhi.n	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80207d0:	2b30      	cmp	r3, #48	@ 0x30
 80207d2:	d064      	beq.n	802089e <HAL_TIM_ConfigClockSource+0x1aa>
 80207d4:	2b30      	cmp	r3, #48	@ 0x30
 80207d6:	d86b      	bhi.n	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80207d8:	2b20      	cmp	r3, #32
 80207da:	d060      	beq.n	802089e <HAL_TIM_ConfigClockSource+0x1aa>
 80207dc:	2b20      	cmp	r3, #32
 80207de:	d867      	bhi.n	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d05c      	beq.n	802089e <HAL_TIM_ConfigClockSource+0x1aa>
 80207e4:	2b10      	cmp	r3, #16
 80207e6:	d05a      	beq.n	802089e <HAL_TIM_ConfigClockSource+0x1aa>
 80207e8:	e062      	b.n	80208b0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80207ee:	683b      	ldr	r3, [r7, #0]
 80207f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80207f2:	683b      	ldr	r3, [r7, #0]
 80207f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80207f6:	683b      	ldr	r3, [r7, #0]
 80207f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80207fa:	f000 fc6d 	bl	80210d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	681b      	ldr	r3, [r3, #0]
 8020802:	689b      	ldr	r3, [r3, #8]
 8020804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8020806:	68bb      	ldr	r3, [r7, #8]
 8020808:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 802080c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 802080e:	687b      	ldr	r3, [r7, #4]
 8020810:	681b      	ldr	r3, [r3, #0]
 8020812:	68ba      	ldr	r2, [r7, #8]
 8020814:	609a      	str	r2, [r3, #8]
      break;
 8020816:	e04f      	b.n	80208b8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8020818:	687b      	ldr	r3, [r7, #4]
 802081a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 802081c:	683b      	ldr	r3, [r7, #0]
 802081e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8020820:	683b      	ldr	r3, [r7, #0]
 8020822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8020824:	683b      	ldr	r3, [r7, #0]
 8020826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8020828:	f000 fc56 	bl	80210d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802082c:	687b      	ldr	r3, [r7, #4]
 802082e:	681b      	ldr	r3, [r3, #0]
 8020830:	689a      	ldr	r2, [r3, #8]
 8020832:	687b      	ldr	r3, [r7, #4]
 8020834:	681b      	ldr	r3, [r3, #0]
 8020836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 802083a:	609a      	str	r2, [r3, #8]
      break;
 802083c:	e03c      	b.n	80208b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020842:	683b      	ldr	r3, [r7, #0]
 8020844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8020846:	683b      	ldr	r3, [r7, #0]
 8020848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 802084a:	461a      	mov	r2, r3
 802084c:	f000 fbc6 	bl	8020fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	2150      	movs	r1, #80	@ 0x50
 8020856:	4618      	mov	r0, r3
 8020858:	f000 fc20 	bl	802109c <TIM_ITRx_SetConfig>
      break;
 802085c:	e02c      	b.n	80208b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802085e:	687b      	ldr	r3, [r7, #4]
 8020860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020862:	683b      	ldr	r3, [r7, #0]
 8020864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8020866:	683b      	ldr	r3, [r7, #0]
 8020868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 802086a:	461a      	mov	r2, r3
 802086c:	f000 fbe5 	bl	802103a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8020870:	687b      	ldr	r3, [r7, #4]
 8020872:	681b      	ldr	r3, [r3, #0]
 8020874:	2160      	movs	r1, #96	@ 0x60
 8020876:	4618      	mov	r0, r3
 8020878:	f000 fc10 	bl	802109c <TIM_ITRx_SetConfig>
      break;
 802087c:	e01c      	b.n	80208b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020882:	683b      	ldr	r3, [r7, #0]
 8020884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8020886:	683b      	ldr	r3, [r7, #0]
 8020888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 802088a:	461a      	mov	r2, r3
 802088c:	f000 fba6 	bl	8020fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	681b      	ldr	r3, [r3, #0]
 8020894:	2140      	movs	r1, #64	@ 0x40
 8020896:	4618      	mov	r0, r3
 8020898:	f000 fc00 	bl	802109c <TIM_ITRx_SetConfig>
      break;
 802089c:	e00c      	b.n	80208b8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802089e:	687b      	ldr	r3, [r7, #4]
 80208a0:	681a      	ldr	r2, [r3, #0]
 80208a2:	683b      	ldr	r3, [r7, #0]
 80208a4:	681b      	ldr	r3, [r3, #0]
 80208a6:	4619      	mov	r1, r3
 80208a8:	4610      	mov	r0, r2
 80208aa:	f000 fbf7 	bl	802109c <TIM_ITRx_SetConfig>
      break;
 80208ae:	e003      	b.n	80208b8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80208b0:	2301      	movs	r3, #1
 80208b2:	73fb      	strb	r3, [r7, #15]
      break;
 80208b4:	e000      	b.n	80208b8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80208b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80208b8:	687b      	ldr	r3, [r7, #4]
 80208ba:	2201      	movs	r2, #1
 80208bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80208c0:	687b      	ldr	r3, [r7, #4]
 80208c2:	2200      	movs	r2, #0
 80208c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80208c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80208ca:	4618      	mov	r0, r3
 80208cc:	3710      	adds	r7, #16
 80208ce:	46bd      	mov	sp, r7
 80208d0:	bd80      	pop	{r7, pc}
 80208d2:	bf00      	nop
 80208d4:	ffceff88 	.word	0xffceff88
 80208d8:	00100040 	.word	0x00100040
 80208dc:	00100030 	.word	0x00100030
 80208e0:	00100020 	.word	0x00100020

080208e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80208e4:	b480      	push	{r7}
 80208e6:	b085      	sub	sp, #20
 80208e8:	af00      	add	r7, sp, #0
 80208ea:	6078      	str	r0, [r7, #4]
 80208ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80208ee:	687b      	ldr	r3, [r7, #4]
 80208f0:	681b      	ldr	r3, [r3, #0]
 80208f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80208f4:	687b      	ldr	r3, [r7, #4]
 80208f6:	4a46      	ldr	r2, [pc, #280]	@ (8020a10 <TIM_Base_SetConfig+0x12c>)
 80208f8:	4293      	cmp	r3, r2
 80208fa:	d013      	beq.n	8020924 <TIM_Base_SetConfig+0x40>
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020902:	d00f      	beq.n	8020924 <TIM_Base_SetConfig+0x40>
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	4a43      	ldr	r2, [pc, #268]	@ (8020a14 <TIM_Base_SetConfig+0x130>)
 8020908:	4293      	cmp	r3, r2
 802090a:	d00b      	beq.n	8020924 <TIM_Base_SetConfig+0x40>
 802090c:	687b      	ldr	r3, [r7, #4]
 802090e:	4a42      	ldr	r2, [pc, #264]	@ (8020a18 <TIM_Base_SetConfig+0x134>)
 8020910:	4293      	cmp	r3, r2
 8020912:	d007      	beq.n	8020924 <TIM_Base_SetConfig+0x40>
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	4a41      	ldr	r2, [pc, #260]	@ (8020a1c <TIM_Base_SetConfig+0x138>)
 8020918:	4293      	cmp	r3, r2
 802091a:	d003      	beq.n	8020924 <TIM_Base_SetConfig+0x40>
 802091c:	687b      	ldr	r3, [r7, #4]
 802091e:	4a40      	ldr	r2, [pc, #256]	@ (8020a20 <TIM_Base_SetConfig+0x13c>)
 8020920:	4293      	cmp	r3, r2
 8020922:	d108      	bne.n	8020936 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020924:	68fb      	ldr	r3, [r7, #12]
 8020926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 802092a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802092c:	683b      	ldr	r3, [r7, #0]
 802092e:	685b      	ldr	r3, [r3, #4]
 8020930:	68fa      	ldr	r2, [r7, #12]
 8020932:	4313      	orrs	r3, r2
 8020934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	4a35      	ldr	r2, [pc, #212]	@ (8020a10 <TIM_Base_SetConfig+0x12c>)
 802093a:	4293      	cmp	r3, r2
 802093c:	d01f      	beq.n	802097e <TIM_Base_SetConfig+0x9a>
 802093e:	687b      	ldr	r3, [r7, #4]
 8020940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020944:	d01b      	beq.n	802097e <TIM_Base_SetConfig+0x9a>
 8020946:	687b      	ldr	r3, [r7, #4]
 8020948:	4a32      	ldr	r2, [pc, #200]	@ (8020a14 <TIM_Base_SetConfig+0x130>)
 802094a:	4293      	cmp	r3, r2
 802094c:	d017      	beq.n	802097e <TIM_Base_SetConfig+0x9a>
 802094e:	687b      	ldr	r3, [r7, #4]
 8020950:	4a31      	ldr	r2, [pc, #196]	@ (8020a18 <TIM_Base_SetConfig+0x134>)
 8020952:	4293      	cmp	r3, r2
 8020954:	d013      	beq.n	802097e <TIM_Base_SetConfig+0x9a>
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	4a30      	ldr	r2, [pc, #192]	@ (8020a1c <TIM_Base_SetConfig+0x138>)
 802095a:	4293      	cmp	r3, r2
 802095c:	d00f      	beq.n	802097e <TIM_Base_SetConfig+0x9a>
 802095e:	687b      	ldr	r3, [r7, #4]
 8020960:	4a2f      	ldr	r2, [pc, #188]	@ (8020a20 <TIM_Base_SetConfig+0x13c>)
 8020962:	4293      	cmp	r3, r2
 8020964:	d00b      	beq.n	802097e <TIM_Base_SetConfig+0x9a>
 8020966:	687b      	ldr	r3, [r7, #4]
 8020968:	4a2e      	ldr	r2, [pc, #184]	@ (8020a24 <TIM_Base_SetConfig+0x140>)
 802096a:	4293      	cmp	r3, r2
 802096c:	d007      	beq.n	802097e <TIM_Base_SetConfig+0x9a>
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	4a2d      	ldr	r2, [pc, #180]	@ (8020a28 <TIM_Base_SetConfig+0x144>)
 8020972:	4293      	cmp	r3, r2
 8020974:	d003      	beq.n	802097e <TIM_Base_SetConfig+0x9a>
 8020976:	687b      	ldr	r3, [r7, #4]
 8020978:	4a2c      	ldr	r2, [pc, #176]	@ (8020a2c <TIM_Base_SetConfig+0x148>)
 802097a:	4293      	cmp	r3, r2
 802097c:	d108      	bne.n	8020990 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802097e:	68fb      	ldr	r3, [r7, #12]
 8020980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8020986:	683b      	ldr	r3, [r7, #0]
 8020988:	68db      	ldr	r3, [r3, #12]
 802098a:	68fa      	ldr	r2, [r7, #12]
 802098c:	4313      	orrs	r3, r2
 802098e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020990:	68fb      	ldr	r3, [r7, #12]
 8020992:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8020996:	683b      	ldr	r3, [r7, #0]
 8020998:	695b      	ldr	r3, [r3, #20]
 802099a:	4313      	orrs	r3, r2
 802099c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802099e:	687b      	ldr	r3, [r7, #4]
 80209a0:	68fa      	ldr	r2, [r7, #12]
 80209a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80209a4:	683b      	ldr	r3, [r7, #0]
 80209a6:	689a      	ldr	r2, [r3, #8]
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80209ac:	683b      	ldr	r3, [r7, #0]
 80209ae:	681a      	ldr	r2, [r3, #0]
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	4a16      	ldr	r2, [pc, #88]	@ (8020a10 <TIM_Base_SetConfig+0x12c>)
 80209b8:	4293      	cmp	r3, r2
 80209ba:	d00f      	beq.n	80209dc <TIM_Base_SetConfig+0xf8>
 80209bc:	687b      	ldr	r3, [r7, #4]
 80209be:	4a18      	ldr	r2, [pc, #96]	@ (8020a20 <TIM_Base_SetConfig+0x13c>)
 80209c0:	4293      	cmp	r3, r2
 80209c2:	d00b      	beq.n	80209dc <TIM_Base_SetConfig+0xf8>
 80209c4:	687b      	ldr	r3, [r7, #4]
 80209c6:	4a17      	ldr	r2, [pc, #92]	@ (8020a24 <TIM_Base_SetConfig+0x140>)
 80209c8:	4293      	cmp	r3, r2
 80209ca:	d007      	beq.n	80209dc <TIM_Base_SetConfig+0xf8>
 80209cc:	687b      	ldr	r3, [r7, #4]
 80209ce:	4a16      	ldr	r2, [pc, #88]	@ (8020a28 <TIM_Base_SetConfig+0x144>)
 80209d0:	4293      	cmp	r3, r2
 80209d2:	d003      	beq.n	80209dc <TIM_Base_SetConfig+0xf8>
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	4a15      	ldr	r2, [pc, #84]	@ (8020a2c <TIM_Base_SetConfig+0x148>)
 80209d8:	4293      	cmp	r3, r2
 80209da:	d103      	bne.n	80209e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80209dc:	683b      	ldr	r3, [r7, #0]
 80209de:	691a      	ldr	r2, [r3, #16]
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	2201      	movs	r2, #1
 80209e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80209ea:	687b      	ldr	r3, [r7, #4]
 80209ec:	691b      	ldr	r3, [r3, #16]
 80209ee:	f003 0301 	and.w	r3, r3, #1
 80209f2:	2b01      	cmp	r3, #1
 80209f4:	d105      	bne.n	8020a02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80209f6:	687b      	ldr	r3, [r7, #4]
 80209f8:	691b      	ldr	r3, [r3, #16]
 80209fa:	f023 0201 	bic.w	r2, r3, #1
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	611a      	str	r2, [r3, #16]
  }
}
 8020a02:	bf00      	nop
 8020a04:	3714      	adds	r7, #20
 8020a06:	46bd      	mov	sp, r7
 8020a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a0c:	4770      	bx	lr
 8020a0e:	bf00      	nop
 8020a10:	40010000 	.word	0x40010000
 8020a14:	40000400 	.word	0x40000400
 8020a18:	40000800 	.word	0x40000800
 8020a1c:	40000c00 	.word	0x40000c00
 8020a20:	40010400 	.word	0x40010400
 8020a24:	40014000 	.word	0x40014000
 8020a28:	40014400 	.word	0x40014400
 8020a2c:	40014800 	.word	0x40014800

08020a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020a30:	b480      	push	{r7}
 8020a32:	b087      	sub	sp, #28
 8020a34:	af00      	add	r7, sp, #0
 8020a36:	6078      	str	r0, [r7, #4]
 8020a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	6a1b      	ldr	r3, [r3, #32]
 8020a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020a40:	687b      	ldr	r3, [r7, #4]
 8020a42:	6a1b      	ldr	r3, [r3, #32]
 8020a44:	f023 0201 	bic.w	r2, r3, #1
 8020a48:	687b      	ldr	r3, [r7, #4]
 8020a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	685b      	ldr	r3, [r3, #4]
 8020a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020a52:	687b      	ldr	r3, [r7, #4]
 8020a54:	699b      	ldr	r3, [r3, #24]
 8020a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020a58:	68fa      	ldr	r2, [r7, #12]
 8020a5a:	4b37      	ldr	r3, [pc, #220]	@ (8020b38 <TIM_OC1_SetConfig+0x108>)
 8020a5c:	4013      	ands	r3, r2
 8020a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020a60:	68fb      	ldr	r3, [r7, #12]
 8020a62:	f023 0303 	bic.w	r3, r3, #3
 8020a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020a68:	683b      	ldr	r3, [r7, #0]
 8020a6a:	681b      	ldr	r3, [r3, #0]
 8020a6c:	68fa      	ldr	r2, [r7, #12]
 8020a6e:	4313      	orrs	r3, r2
 8020a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020a72:	697b      	ldr	r3, [r7, #20]
 8020a74:	f023 0302 	bic.w	r3, r3, #2
 8020a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8020a7a:	683b      	ldr	r3, [r7, #0]
 8020a7c:	689b      	ldr	r3, [r3, #8]
 8020a7e:	697a      	ldr	r2, [r7, #20]
 8020a80:	4313      	orrs	r3, r2
 8020a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	4a2d      	ldr	r2, [pc, #180]	@ (8020b3c <TIM_OC1_SetConfig+0x10c>)
 8020a88:	4293      	cmp	r3, r2
 8020a8a:	d00f      	beq.n	8020aac <TIM_OC1_SetConfig+0x7c>
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8020b40 <TIM_OC1_SetConfig+0x110>)
 8020a90:	4293      	cmp	r3, r2
 8020a92:	d00b      	beq.n	8020aac <TIM_OC1_SetConfig+0x7c>
 8020a94:	687b      	ldr	r3, [r7, #4]
 8020a96:	4a2b      	ldr	r2, [pc, #172]	@ (8020b44 <TIM_OC1_SetConfig+0x114>)
 8020a98:	4293      	cmp	r3, r2
 8020a9a:	d007      	beq.n	8020aac <TIM_OC1_SetConfig+0x7c>
 8020a9c:	687b      	ldr	r3, [r7, #4]
 8020a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8020b48 <TIM_OC1_SetConfig+0x118>)
 8020aa0:	4293      	cmp	r3, r2
 8020aa2:	d003      	beq.n	8020aac <TIM_OC1_SetConfig+0x7c>
 8020aa4:	687b      	ldr	r3, [r7, #4]
 8020aa6:	4a29      	ldr	r2, [pc, #164]	@ (8020b4c <TIM_OC1_SetConfig+0x11c>)
 8020aa8:	4293      	cmp	r3, r2
 8020aaa:	d10c      	bne.n	8020ac6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8020aac:	697b      	ldr	r3, [r7, #20]
 8020aae:	f023 0308 	bic.w	r3, r3, #8
 8020ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020ab4:	683b      	ldr	r3, [r7, #0]
 8020ab6:	68db      	ldr	r3, [r3, #12]
 8020ab8:	697a      	ldr	r2, [r7, #20]
 8020aba:	4313      	orrs	r3, r2
 8020abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8020abe:	697b      	ldr	r3, [r7, #20]
 8020ac0:	f023 0304 	bic.w	r3, r3, #4
 8020ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8020b3c <TIM_OC1_SetConfig+0x10c>)
 8020aca:	4293      	cmp	r3, r2
 8020acc:	d00f      	beq.n	8020aee <TIM_OC1_SetConfig+0xbe>
 8020ace:	687b      	ldr	r3, [r7, #4]
 8020ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8020b40 <TIM_OC1_SetConfig+0x110>)
 8020ad2:	4293      	cmp	r3, r2
 8020ad4:	d00b      	beq.n	8020aee <TIM_OC1_SetConfig+0xbe>
 8020ad6:	687b      	ldr	r3, [r7, #4]
 8020ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8020b44 <TIM_OC1_SetConfig+0x114>)
 8020ada:	4293      	cmp	r3, r2
 8020adc:	d007      	beq.n	8020aee <TIM_OC1_SetConfig+0xbe>
 8020ade:	687b      	ldr	r3, [r7, #4]
 8020ae0:	4a19      	ldr	r2, [pc, #100]	@ (8020b48 <TIM_OC1_SetConfig+0x118>)
 8020ae2:	4293      	cmp	r3, r2
 8020ae4:	d003      	beq.n	8020aee <TIM_OC1_SetConfig+0xbe>
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	4a18      	ldr	r2, [pc, #96]	@ (8020b4c <TIM_OC1_SetConfig+0x11c>)
 8020aea:	4293      	cmp	r3, r2
 8020aec:	d111      	bne.n	8020b12 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020aee:	693b      	ldr	r3, [r7, #16]
 8020af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8020af6:	693b      	ldr	r3, [r7, #16]
 8020af8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020afe:	683b      	ldr	r3, [r7, #0]
 8020b00:	695b      	ldr	r3, [r3, #20]
 8020b02:	693a      	ldr	r2, [r7, #16]
 8020b04:	4313      	orrs	r3, r2
 8020b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020b08:	683b      	ldr	r3, [r7, #0]
 8020b0a:	699b      	ldr	r3, [r3, #24]
 8020b0c:	693a      	ldr	r2, [r7, #16]
 8020b0e:	4313      	orrs	r3, r2
 8020b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	693a      	ldr	r2, [r7, #16]
 8020b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020b18:	687b      	ldr	r3, [r7, #4]
 8020b1a:	68fa      	ldr	r2, [r7, #12]
 8020b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020b1e:	683b      	ldr	r3, [r7, #0]
 8020b20:	685a      	ldr	r2, [r3, #4]
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	697a      	ldr	r2, [r7, #20]
 8020b2a:	621a      	str	r2, [r3, #32]
}
 8020b2c:	bf00      	nop
 8020b2e:	371c      	adds	r7, #28
 8020b30:	46bd      	mov	sp, r7
 8020b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b36:	4770      	bx	lr
 8020b38:	fffeff8f 	.word	0xfffeff8f
 8020b3c:	40010000 	.word	0x40010000
 8020b40:	40010400 	.word	0x40010400
 8020b44:	40014000 	.word	0x40014000
 8020b48:	40014400 	.word	0x40014400
 8020b4c:	40014800 	.word	0x40014800

08020b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020b50:	b480      	push	{r7}
 8020b52:	b087      	sub	sp, #28
 8020b54:	af00      	add	r7, sp, #0
 8020b56:	6078      	str	r0, [r7, #4]
 8020b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020b5a:	687b      	ldr	r3, [r7, #4]
 8020b5c:	6a1b      	ldr	r3, [r3, #32]
 8020b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	6a1b      	ldr	r3, [r3, #32]
 8020b64:	f023 0210 	bic.w	r2, r3, #16
 8020b68:	687b      	ldr	r3, [r7, #4]
 8020b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020b6c:	687b      	ldr	r3, [r7, #4]
 8020b6e:	685b      	ldr	r3, [r3, #4]
 8020b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020b72:	687b      	ldr	r3, [r7, #4]
 8020b74:	699b      	ldr	r3, [r3, #24]
 8020b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020b78:	68fa      	ldr	r2, [r7, #12]
 8020b7a:	4b34      	ldr	r3, [pc, #208]	@ (8020c4c <TIM_OC2_SetConfig+0xfc>)
 8020b7c:	4013      	ands	r3, r2
 8020b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020b80:	68fb      	ldr	r3, [r7, #12]
 8020b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020b88:	683b      	ldr	r3, [r7, #0]
 8020b8a:	681b      	ldr	r3, [r3, #0]
 8020b8c:	021b      	lsls	r3, r3, #8
 8020b8e:	68fa      	ldr	r2, [r7, #12]
 8020b90:	4313      	orrs	r3, r2
 8020b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020b94:	697b      	ldr	r3, [r7, #20]
 8020b96:	f023 0320 	bic.w	r3, r3, #32
 8020b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020b9c:	683b      	ldr	r3, [r7, #0]
 8020b9e:	689b      	ldr	r3, [r3, #8]
 8020ba0:	011b      	lsls	r3, r3, #4
 8020ba2:	697a      	ldr	r2, [r7, #20]
 8020ba4:	4313      	orrs	r3, r2
 8020ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020ba8:	687b      	ldr	r3, [r7, #4]
 8020baa:	4a29      	ldr	r2, [pc, #164]	@ (8020c50 <TIM_OC2_SetConfig+0x100>)
 8020bac:	4293      	cmp	r3, r2
 8020bae:	d003      	beq.n	8020bb8 <TIM_OC2_SetConfig+0x68>
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	4a28      	ldr	r2, [pc, #160]	@ (8020c54 <TIM_OC2_SetConfig+0x104>)
 8020bb4:	4293      	cmp	r3, r2
 8020bb6:	d10d      	bne.n	8020bd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020bb8:	697b      	ldr	r3, [r7, #20]
 8020bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020bc0:	683b      	ldr	r3, [r7, #0]
 8020bc2:	68db      	ldr	r3, [r3, #12]
 8020bc4:	011b      	lsls	r3, r3, #4
 8020bc6:	697a      	ldr	r2, [r7, #20]
 8020bc8:	4313      	orrs	r3, r2
 8020bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020bcc:	697b      	ldr	r3, [r7, #20]
 8020bce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020bd4:	687b      	ldr	r3, [r7, #4]
 8020bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8020c50 <TIM_OC2_SetConfig+0x100>)
 8020bd8:	4293      	cmp	r3, r2
 8020bda:	d00f      	beq.n	8020bfc <TIM_OC2_SetConfig+0xac>
 8020bdc:	687b      	ldr	r3, [r7, #4]
 8020bde:	4a1d      	ldr	r2, [pc, #116]	@ (8020c54 <TIM_OC2_SetConfig+0x104>)
 8020be0:	4293      	cmp	r3, r2
 8020be2:	d00b      	beq.n	8020bfc <TIM_OC2_SetConfig+0xac>
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	4a1c      	ldr	r2, [pc, #112]	@ (8020c58 <TIM_OC2_SetConfig+0x108>)
 8020be8:	4293      	cmp	r3, r2
 8020bea:	d007      	beq.n	8020bfc <TIM_OC2_SetConfig+0xac>
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	4a1b      	ldr	r2, [pc, #108]	@ (8020c5c <TIM_OC2_SetConfig+0x10c>)
 8020bf0:	4293      	cmp	r3, r2
 8020bf2:	d003      	beq.n	8020bfc <TIM_OC2_SetConfig+0xac>
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8020c60 <TIM_OC2_SetConfig+0x110>)
 8020bf8:	4293      	cmp	r3, r2
 8020bfa:	d113      	bne.n	8020c24 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020bfc:	693b      	ldr	r3, [r7, #16]
 8020bfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020c04:	693b      	ldr	r3, [r7, #16]
 8020c06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020c0c:	683b      	ldr	r3, [r7, #0]
 8020c0e:	695b      	ldr	r3, [r3, #20]
 8020c10:	009b      	lsls	r3, r3, #2
 8020c12:	693a      	ldr	r2, [r7, #16]
 8020c14:	4313      	orrs	r3, r2
 8020c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020c18:	683b      	ldr	r3, [r7, #0]
 8020c1a:	699b      	ldr	r3, [r3, #24]
 8020c1c:	009b      	lsls	r3, r3, #2
 8020c1e:	693a      	ldr	r2, [r7, #16]
 8020c20:	4313      	orrs	r3, r2
 8020c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020c24:	687b      	ldr	r3, [r7, #4]
 8020c26:	693a      	ldr	r2, [r7, #16]
 8020c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020c2a:	687b      	ldr	r3, [r7, #4]
 8020c2c:	68fa      	ldr	r2, [r7, #12]
 8020c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020c30:	683b      	ldr	r3, [r7, #0]
 8020c32:	685a      	ldr	r2, [r3, #4]
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020c38:	687b      	ldr	r3, [r7, #4]
 8020c3a:	697a      	ldr	r2, [r7, #20]
 8020c3c:	621a      	str	r2, [r3, #32]
}
 8020c3e:	bf00      	nop
 8020c40:	371c      	adds	r7, #28
 8020c42:	46bd      	mov	sp, r7
 8020c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c48:	4770      	bx	lr
 8020c4a:	bf00      	nop
 8020c4c:	feff8fff 	.word	0xfeff8fff
 8020c50:	40010000 	.word	0x40010000
 8020c54:	40010400 	.word	0x40010400
 8020c58:	40014000 	.word	0x40014000
 8020c5c:	40014400 	.word	0x40014400
 8020c60:	40014800 	.word	0x40014800

08020c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020c64:	b480      	push	{r7}
 8020c66:	b087      	sub	sp, #28
 8020c68:	af00      	add	r7, sp, #0
 8020c6a:	6078      	str	r0, [r7, #4]
 8020c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020c6e:	687b      	ldr	r3, [r7, #4]
 8020c70:	6a1b      	ldr	r3, [r3, #32]
 8020c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020c74:	687b      	ldr	r3, [r7, #4]
 8020c76:	6a1b      	ldr	r3, [r3, #32]
 8020c78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8020c7c:	687b      	ldr	r3, [r7, #4]
 8020c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020c80:	687b      	ldr	r3, [r7, #4]
 8020c82:	685b      	ldr	r3, [r3, #4]
 8020c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	69db      	ldr	r3, [r3, #28]
 8020c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020c8c:	68fa      	ldr	r2, [r7, #12]
 8020c8e:	4b33      	ldr	r3, [pc, #204]	@ (8020d5c <TIM_OC3_SetConfig+0xf8>)
 8020c90:	4013      	ands	r3, r2
 8020c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020c94:	68fb      	ldr	r3, [r7, #12]
 8020c96:	f023 0303 	bic.w	r3, r3, #3
 8020c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020c9c:	683b      	ldr	r3, [r7, #0]
 8020c9e:	681b      	ldr	r3, [r3, #0]
 8020ca0:	68fa      	ldr	r2, [r7, #12]
 8020ca2:	4313      	orrs	r3, r2
 8020ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020ca6:	697b      	ldr	r3, [r7, #20]
 8020ca8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020cae:	683b      	ldr	r3, [r7, #0]
 8020cb0:	689b      	ldr	r3, [r3, #8]
 8020cb2:	021b      	lsls	r3, r3, #8
 8020cb4:	697a      	ldr	r2, [r7, #20]
 8020cb6:	4313      	orrs	r3, r2
 8020cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020cba:	687b      	ldr	r3, [r7, #4]
 8020cbc:	4a28      	ldr	r2, [pc, #160]	@ (8020d60 <TIM_OC3_SetConfig+0xfc>)
 8020cbe:	4293      	cmp	r3, r2
 8020cc0:	d003      	beq.n	8020cca <TIM_OC3_SetConfig+0x66>
 8020cc2:	687b      	ldr	r3, [r7, #4]
 8020cc4:	4a27      	ldr	r2, [pc, #156]	@ (8020d64 <TIM_OC3_SetConfig+0x100>)
 8020cc6:	4293      	cmp	r3, r2
 8020cc8:	d10d      	bne.n	8020ce6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020cca:	697b      	ldr	r3, [r7, #20]
 8020ccc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020cd2:	683b      	ldr	r3, [r7, #0]
 8020cd4:	68db      	ldr	r3, [r3, #12]
 8020cd6:	021b      	lsls	r3, r3, #8
 8020cd8:	697a      	ldr	r2, [r7, #20]
 8020cda:	4313      	orrs	r3, r2
 8020cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020cde:	697b      	ldr	r3, [r7, #20]
 8020ce0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020ce6:	687b      	ldr	r3, [r7, #4]
 8020ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8020d60 <TIM_OC3_SetConfig+0xfc>)
 8020cea:	4293      	cmp	r3, r2
 8020cec:	d00f      	beq.n	8020d0e <TIM_OC3_SetConfig+0xaa>
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8020d64 <TIM_OC3_SetConfig+0x100>)
 8020cf2:	4293      	cmp	r3, r2
 8020cf4:	d00b      	beq.n	8020d0e <TIM_OC3_SetConfig+0xaa>
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8020d68 <TIM_OC3_SetConfig+0x104>)
 8020cfa:	4293      	cmp	r3, r2
 8020cfc:	d007      	beq.n	8020d0e <TIM_OC3_SetConfig+0xaa>
 8020cfe:	687b      	ldr	r3, [r7, #4]
 8020d00:	4a1a      	ldr	r2, [pc, #104]	@ (8020d6c <TIM_OC3_SetConfig+0x108>)
 8020d02:	4293      	cmp	r3, r2
 8020d04:	d003      	beq.n	8020d0e <TIM_OC3_SetConfig+0xaa>
 8020d06:	687b      	ldr	r3, [r7, #4]
 8020d08:	4a19      	ldr	r2, [pc, #100]	@ (8020d70 <TIM_OC3_SetConfig+0x10c>)
 8020d0a:	4293      	cmp	r3, r2
 8020d0c:	d113      	bne.n	8020d36 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020d0e:	693b      	ldr	r3, [r7, #16]
 8020d10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020d16:	693b      	ldr	r3, [r7, #16]
 8020d18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020d1e:	683b      	ldr	r3, [r7, #0]
 8020d20:	695b      	ldr	r3, [r3, #20]
 8020d22:	011b      	lsls	r3, r3, #4
 8020d24:	693a      	ldr	r2, [r7, #16]
 8020d26:	4313      	orrs	r3, r2
 8020d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020d2a:	683b      	ldr	r3, [r7, #0]
 8020d2c:	699b      	ldr	r3, [r3, #24]
 8020d2e:	011b      	lsls	r3, r3, #4
 8020d30:	693a      	ldr	r2, [r7, #16]
 8020d32:	4313      	orrs	r3, r2
 8020d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020d36:	687b      	ldr	r3, [r7, #4]
 8020d38:	693a      	ldr	r2, [r7, #16]
 8020d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020d3c:	687b      	ldr	r3, [r7, #4]
 8020d3e:	68fa      	ldr	r2, [r7, #12]
 8020d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020d42:	683b      	ldr	r3, [r7, #0]
 8020d44:	685a      	ldr	r2, [r3, #4]
 8020d46:	687b      	ldr	r3, [r7, #4]
 8020d48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	697a      	ldr	r2, [r7, #20]
 8020d4e:	621a      	str	r2, [r3, #32]
}
 8020d50:	bf00      	nop
 8020d52:	371c      	adds	r7, #28
 8020d54:	46bd      	mov	sp, r7
 8020d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d5a:	4770      	bx	lr
 8020d5c:	fffeff8f 	.word	0xfffeff8f
 8020d60:	40010000 	.word	0x40010000
 8020d64:	40010400 	.word	0x40010400
 8020d68:	40014000 	.word	0x40014000
 8020d6c:	40014400 	.word	0x40014400
 8020d70:	40014800 	.word	0x40014800

08020d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020d74:	b480      	push	{r7}
 8020d76:	b087      	sub	sp, #28
 8020d78:	af00      	add	r7, sp, #0
 8020d7a:	6078      	str	r0, [r7, #4]
 8020d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020d7e:	687b      	ldr	r3, [r7, #4]
 8020d80:	6a1b      	ldr	r3, [r3, #32]
 8020d82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020d84:	687b      	ldr	r3, [r7, #4]
 8020d86:	6a1b      	ldr	r3, [r3, #32]
 8020d88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020d90:	687b      	ldr	r3, [r7, #4]
 8020d92:	685b      	ldr	r3, [r3, #4]
 8020d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020d96:	687b      	ldr	r3, [r7, #4]
 8020d98:	69db      	ldr	r3, [r3, #28]
 8020d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020d9c:	68fa      	ldr	r2, [r7, #12]
 8020d9e:	4b24      	ldr	r3, [pc, #144]	@ (8020e30 <TIM_OC4_SetConfig+0xbc>)
 8020da0:	4013      	ands	r3, r2
 8020da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020da4:	68fb      	ldr	r3, [r7, #12]
 8020da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020dac:	683b      	ldr	r3, [r7, #0]
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	021b      	lsls	r3, r3, #8
 8020db2:	68fa      	ldr	r2, [r7, #12]
 8020db4:	4313      	orrs	r3, r2
 8020db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020db8:	693b      	ldr	r3, [r7, #16]
 8020dba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020dc0:	683b      	ldr	r3, [r7, #0]
 8020dc2:	689b      	ldr	r3, [r3, #8]
 8020dc4:	031b      	lsls	r3, r3, #12
 8020dc6:	693a      	ldr	r2, [r7, #16]
 8020dc8:	4313      	orrs	r3, r2
 8020dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	4a19      	ldr	r2, [pc, #100]	@ (8020e34 <TIM_OC4_SetConfig+0xc0>)
 8020dd0:	4293      	cmp	r3, r2
 8020dd2:	d00f      	beq.n	8020df4 <TIM_OC4_SetConfig+0x80>
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	4a18      	ldr	r2, [pc, #96]	@ (8020e38 <TIM_OC4_SetConfig+0xc4>)
 8020dd8:	4293      	cmp	r3, r2
 8020dda:	d00b      	beq.n	8020df4 <TIM_OC4_SetConfig+0x80>
 8020ddc:	687b      	ldr	r3, [r7, #4]
 8020dde:	4a17      	ldr	r2, [pc, #92]	@ (8020e3c <TIM_OC4_SetConfig+0xc8>)
 8020de0:	4293      	cmp	r3, r2
 8020de2:	d007      	beq.n	8020df4 <TIM_OC4_SetConfig+0x80>
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	4a16      	ldr	r2, [pc, #88]	@ (8020e40 <TIM_OC4_SetConfig+0xcc>)
 8020de8:	4293      	cmp	r3, r2
 8020dea:	d003      	beq.n	8020df4 <TIM_OC4_SetConfig+0x80>
 8020dec:	687b      	ldr	r3, [r7, #4]
 8020dee:	4a15      	ldr	r2, [pc, #84]	@ (8020e44 <TIM_OC4_SetConfig+0xd0>)
 8020df0:	4293      	cmp	r3, r2
 8020df2:	d109      	bne.n	8020e08 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020df4:	697b      	ldr	r3, [r7, #20]
 8020df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8020dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020dfc:	683b      	ldr	r3, [r7, #0]
 8020dfe:	695b      	ldr	r3, [r3, #20]
 8020e00:	019b      	lsls	r3, r3, #6
 8020e02:	697a      	ldr	r2, [r7, #20]
 8020e04:	4313      	orrs	r3, r2
 8020e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020e08:	687b      	ldr	r3, [r7, #4]
 8020e0a:	697a      	ldr	r2, [r7, #20]
 8020e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	68fa      	ldr	r2, [r7, #12]
 8020e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020e14:	683b      	ldr	r3, [r7, #0]
 8020e16:	685a      	ldr	r2, [r3, #4]
 8020e18:	687b      	ldr	r3, [r7, #4]
 8020e1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	693a      	ldr	r2, [r7, #16]
 8020e20:	621a      	str	r2, [r3, #32]
}
 8020e22:	bf00      	nop
 8020e24:	371c      	adds	r7, #28
 8020e26:	46bd      	mov	sp, r7
 8020e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e2c:	4770      	bx	lr
 8020e2e:	bf00      	nop
 8020e30:	feff8fff 	.word	0xfeff8fff
 8020e34:	40010000 	.word	0x40010000
 8020e38:	40010400 	.word	0x40010400
 8020e3c:	40014000 	.word	0x40014000
 8020e40:	40014400 	.word	0x40014400
 8020e44:	40014800 	.word	0x40014800

08020e48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020e48:	b480      	push	{r7}
 8020e4a:	b087      	sub	sp, #28
 8020e4c:	af00      	add	r7, sp, #0
 8020e4e:	6078      	str	r0, [r7, #4]
 8020e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020e52:	687b      	ldr	r3, [r7, #4]
 8020e54:	6a1b      	ldr	r3, [r3, #32]
 8020e56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8020e58:	687b      	ldr	r3, [r7, #4]
 8020e5a:	6a1b      	ldr	r3, [r3, #32]
 8020e5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	685b      	ldr	r3, [r3, #4]
 8020e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020e6a:	687b      	ldr	r3, [r7, #4]
 8020e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8020e70:	68fa      	ldr	r2, [r7, #12]
 8020e72:	4b21      	ldr	r3, [pc, #132]	@ (8020ef8 <TIM_OC5_SetConfig+0xb0>)
 8020e74:	4013      	ands	r3, r2
 8020e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020e78:	683b      	ldr	r3, [r7, #0]
 8020e7a:	681b      	ldr	r3, [r3, #0]
 8020e7c:	68fa      	ldr	r2, [r7, #12]
 8020e7e:	4313      	orrs	r3, r2
 8020e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8020e82:	693b      	ldr	r3, [r7, #16]
 8020e84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8020e88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8020e8a:	683b      	ldr	r3, [r7, #0]
 8020e8c:	689b      	ldr	r3, [r3, #8]
 8020e8e:	041b      	lsls	r3, r3, #16
 8020e90:	693a      	ldr	r2, [r7, #16]
 8020e92:	4313      	orrs	r3, r2
 8020e94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020e96:	687b      	ldr	r3, [r7, #4]
 8020e98:	4a18      	ldr	r2, [pc, #96]	@ (8020efc <TIM_OC5_SetConfig+0xb4>)
 8020e9a:	4293      	cmp	r3, r2
 8020e9c:	d00f      	beq.n	8020ebe <TIM_OC5_SetConfig+0x76>
 8020e9e:	687b      	ldr	r3, [r7, #4]
 8020ea0:	4a17      	ldr	r2, [pc, #92]	@ (8020f00 <TIM_OC5_SetConfig+0xb8>)
 8020ea2:	4293      	cmp	r3, r2
 8020ea4:	d00b      	beq.n	8020ebe <TIM_OC5_SetConfig+0x76>
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	4a16      	ldr	r2, [pc, #88]	@ (8020f04 <TIM_OC5_SetConfig+0xbc>)
 8020eaa:	4293      	cmp	r3, r2
 8020eac:	d007      	beq.n	8020ebe <TIM_OC5_SetConfig+0x76>
 8020eae:	687b      	ldr	r3, [r7, #4]
 8020eb0:	4a15      	ldr	r2, [pc, #84]	@ (8020f08 <TIM_OC5_SetConfig+0xc0>)
 8020eb2:	4293      	cmp	r3, r2
 8020eb4:	d003      	beq.n	8020ebe <TIM_OC5_SetConfig+0x76>
 8020eb6:	687b      	ldr	r3, [r7, #4]
 8020eb8:	4a14      	ldr	r2, [pc, #80]	@ (8020f0c <TIM_OC5_SetConfig+0xc4>)
 8020eba:	4293      	cmp	r3, r2
 8020ebc:	d109      	bne.n	8020ed2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8020ebe:	697b      	ldr	r3, [r7, #20]
 8020ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8020ec6:	683b      	ldr	r3, [r7, #0]
 8020ec8:	695b      	ldr	r3, [r3, #20]
 8020eca:	021b      	lsls	r3, r3, #8
 8020ecc:	697a      	ldr	r2, [r7, #20]
 8020ece:	4313      	orrs	r3, r2
 8020ed0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020ed2:	687b      	ldr	r3, [r7, #4]
 8020ed4:	697a      	ldr	r2, [r7, #20]
 8020ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	68fa      	ldr	r2, [r7, #12]
 8020edc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8020ede:	683b      	ldr	r3, [r7, #0]
 8020ee0:	685a      	ldr	r2, [r3, #4]
 8020ee2:	687b      	ldr	r3, [r7, #4]
 8020ee4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	693a      	ldr	r2, [r7, #16]
 8020eea:	621a      	str	r2, [r3, #32]
}
 8020eec:	bf00      	nop
 8020eee:	371c      	adds	r7, #28
 8020ef0:	46bd      	mov	sp, r7
 8020ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ef6:	4770      	bx	lr
 8020ef8:	fffeff8f 	.word	0xfffeff8f
 8020efc:	40010000 	.word	0x40010000
 8020f00:	40010400 	.word	0x40010400
 8020f04:	40014000 	.word	0x40014000
 8020f08:	40014400 	.word	0x40014400
 8020f0c:	40014800 	.word	0x40014800

08020f10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020f10:	b480      	push	{r7}
 8020f12:	b087      	sub	sp, #28
 8020f14:	af00      	add	r7, sp, #0
 8020f16:	6078      	str	r0, [r7, #4]
 8020f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020f1a:	687b      	ldr	r3, [r7, #4]
 8020f1c:	6a1b      	ldr	r3, [r3, #32]
 8020f1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8020f20:	687b      	ldr	r3, [r7, #4]
 8020f22:	6a1b      	ldr	r3, [r3, #32]
 8020f24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8020f28:	687b      	ldr	r3, [r7, #4]
 8020f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020f2c:	687b      	ldr	r3, [r7, #4]
 8020f2e:	685b      	ldr	r3, [r3, #4]
 8020f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8020f38:	68fa      	ldr	r2, [r7, #12]
 8020f3a:	4b22      	ldr	r3, [pc, #136]	@ (8020fc4 <TIM_OC6_SetConfig+0xb4>)
 8020f3c:	4013      	ands	r3, r2
 8020f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020f40:	683b      	ldr	r3, [r7, #0]
 8020f42:	681b      	ldr	r3, [r3, #0]
 8020f44:	021b      	lsls	r3, r3, #8
 8020f46:	68fa      	ldr	r2, [r7, #12]
 8020f48:	4313      	orrs	r3, r2
 8020f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8020f4c:	693b      	ldr	r3, [r7, #16]
 8020f4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8020f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8020f54:	683b      	ldr	r3, [r7, #0]
 8020f56:	689b      	ldr	r3, [r3, #8]
 8020f58:	051b      	lsls	r3, r3, #20
 8020f5a:	693a      	ldr	r2, [r7, #16]
 8020f5c:	4313      	orrs	r3, r2
 8020f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020f60:	687b      	ldr	r3, [r7, #4]
 8020f62:	4a19      	ldr	r2, [pc, #100]	@ (8020fc8 <TIM_OC6_SetConfig+0xb8>)
 8020f64:	4293      	cmp	r3, r2
 8020f66:	d00f      	beq.n	8020f88 <TIM_OC6_SetConfig+0x78>
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	4a18      	ldr	r2, [pc, #96]	@ (8020fcc <TIM_OC6_SetConfig+0xbc>)
 8020f6c:	4293      	cmp	r3, r2
 8020f6e:	d00b      	beq.n	8020f88 <TIM_OC6_SetConfig+0x78>
 8020f70:	687b      	ldr	r3, [r7, #4]
 8020f72:	4a17      	ldr	r2, [pc, #92]	@ (8020fd0 <TIM_OC6_SetConfig+0xc0>)
 8020f74:	4293      	cmp	r3, r2
 8020f76:	d007      	beq.n	8020f88 <TIM_OC6_SetConfig+0x78>
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	4a16      	ldr	r2, [pc, #88]	@ (8020fd4 <TIM_OC6_SetConfig+0xc4>)
 8020f7c:	4293      	cmp	r3, r2
 8020f7e:	d003      	beq.n	8020f88 <TIM_OC6_SetConfig+0x78>
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	4a15      	ldr	r2, [pc, #84]	@ (8020fd8 <TIM_OC6_SetConfig+0xc8>)
 8020f84:	4293      	cmp	r3, r2
 8020f86:	d109      	bne.n	8020f9c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8020f88:	697b      	ldr	r3, [r7, #20]
 8020f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8020f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	695b      	ldr	r3, [r3, #20]
 8020f94:	029b      	lsls	r3, r3, #10
 8020f96:	697a      	ldr	r2, [r7, #20]
 8020f98:	4313      	orrs	r3, r2
 8020f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	697a      	ldr	r2, [r7, #20]
 8020fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	68fa      	ldr	r2, [r7, #12]
 8020fa6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8020fa8:	683b      	ldr	r3, [r7, #0]
 8020faa:	685a      	ldr	r2, [r3, #4]
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	693a      	ldr	r2, [r7, #16]
 8020fb4:	621a      	str	r2, [r3, #32]
}
 8020fb6:	bf00      	nop
 8020fb8:	371c      	adds	r7, #28
 8020fba:	46bd      	mov	sp, r7
 8020fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fc0:	4770      	bx	lr
 8020fc2:	bf00      	nop
 8020fc4:	feff8fff 	.word	0xfeff8fff
 8020fc8:	40010000 	.word	0x40010000
 8020fcc:	40010400 	.word	0x40010400
 8020fd0:	40014000 	.word	0x40014000
 8020fd4:	40014400 	.word	0x40014400
 8020fd8:	40014800 	.word	0x40014800

08020fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020fdc:	b480      	push	{r7}
 8020fde:	b087      	sub	sp, #28
 8020fe0:	af00      	add	r7, sp, #0
 8020fe2:	60f8      	str	r0, [r7, #12]
 8020fe4:	60b9      	str	r1, [r7, #8]
 8020fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020fe8:	68fb      	ldr	r3, [r7, #12]
 8020fea:	6a1b      	ldr	r3, [r3, #32]
 8020fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020fee:	68fb      	ldr	r3, [r7, #12]
 8020ff0:	6a1b      	ldr	r3, [r3, #32]
 8020ff2:	f023 0201 	bic.w	r2, r3, #1
 8020ff6:	68fb      	ldr	r3, [r7, #12]
 8020ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020ffa:	68fb      	ldr	r3, [r7, #12]
 8020ffc:	699b      	ldr	r3, [r3, #24]
 8020ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8021000:	693b      	ldr	r3, [r7, #16]
 8021002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8021006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	011b      	lsls	r3, r3, #4
 802100c:	693a      	ldr	r2, [r7, #16]
 802100e:	4313      	orrs	r3, r2
 8021010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8021012:	697b      	ldr	r3, [r7, #20]
 8021014:	f023 030a 	bic.w	r3, r3, #10
 8021018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802101a:	697a      	ldr	r2, [r7, #20]
 802101c:	68bb      	ldr	r3, [r7, #8]
 802101e:	4313      	orrs	r3, r2
 8021020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8021022:	68fb      	ldr	r3, [r7, #12]
 8021024:	693a      	ldr	r2, [r7, #16]
 8021026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021028:	68fb      	ldr	r3, [r7, #12]
 802102a:	697a      	ldr	r2, [r7, #20]
 802102c:	621a      	str	r2, [r3, #32]
}
 802102e:	bf00      	nop
 8021030:	371c      	adds	r7, #28
 8021032:	46bd      	mov	sp, r7
 8021034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021038:	4770      	bx	lr

0802103a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802103a:	b480      	push	{r7}
 802103c:	b087      	sub	sp, #28
 802103e:	af00      	add	r7, sp, #0
 8021040:	60f8      	str	r0, [r7, #12]
 8021042:	60b9      	str	r1, [r7, #8]
 8021044:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8021046:	68fb      	ldr	r3, [r7, #12]
 8021048:	6a1b      	ldr	r3, [r3, #32]
 802104a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802104c:	68fb      	ldr	r3, [r7, #12]
 802104e:	6a1b      	ldr	r3, [r3, #32]
 8021050:	f023 0210 	bic.w	r2, r3, #16
 8021054:	68fb      	ldr	r3, [r7, #12]
 8021056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021058:	68fb      	ldr	r3, [r7, #12]
 802105a:	699b      	ldr	r3, [r3, #24]
 802105c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802105e:	693b      	ldr	r3, [r7, #16]
 8021060:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8021064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	031b      	lsls	r3, r3, #12
 802106a:	693a      	ldr	r2, [r7, #16]
 802106c:	4313      	orrs	r3, r2
 802106e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8021070:	697b      	ldr	r3, [r7, #20]
 8021072:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8021076:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8021078:	68bb      	ldr	r3, [r7, #8]
 802107a:	011b      	lsls	r3, r3, #4
 802107c:	697a      	ldr	r2, [r7, #20]
 802107e:	4313      	orrs	r3, r2
 8021080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8021082:	68fb      	ldr	r3, [r7, #12]
 8021084:	693a      	ldr	r2, [r7, #16]
 8021086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021088:	68fb      	ldr	r3, [r7, #12]
 802108a:	697a      	ldr	r2, [r7, #20]
 802108c:	621a      	str	r2, [r3, #32]
}
 802108e:	bf00      	nop
 8021090:	371c      	adds	r7, #28
 8021092:	46bd      	mov	sp, r7
 8021094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021098:	4770      	bx	lr
	...

0802109c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802109c:	b480      	push	{r7}
 802109e:	b085      	sub	sp, #20
 80210a0:	af00      	add	r7, sp, #0
 80210a2:	6078      	str	r0, [r7, #4]
 80210a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80210a6:	687b      	ldr	r3, [r7, #4]
 80210a8:	689b      	ldr	r3, [r3, #8]
 80210aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80210ac:	68fa      	ldr	r2, [r7, #12]
 80210ae:	4b09      	ldr	r3, [pc, #36]	@ (80210d4 <TIM_ITRx_SetConfig+0x38>)
 80210b0:	4013      	ands	r3, r2
 80210b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80210b4:	683a      	ldr	r2, [r7, #0]
 80210b6:	68fb      	ldr	r3, [r7, #12]
 80210b8:	4313      	orrs	r3, r2
 80210ba:	f043 0307 	orr.w	r3, r3, #7
 80210be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	68fa      	ldr	r2, [r7, #12]
 80210c4:	609a      	str	r2, [r3, #8]
}
 80210c6:	bf00      	nop
 80210c8:	3714      	adds	r7, #20
 80210ca:	46bd      	mov	sp, r7
 80210cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210d0:	4770      	bx	lr
 80210d2:	bf00      	nop
 80210d4:	ffcfff8f 	.word	0xffcfff8f

080210d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80210d8:	b480      	push	{r7}
 80210da:	b087      	sub	sp, #28
 80210dc:	af00      	add	r7, sp, #0
 80210de:	60f8      	str	r0, [r7, #12]
 80210e0:	60b9      	str	r1, [r7, #8]
 80210e2:	607a      	str	r2, [r7, #4]
 80210e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80210e6:	68fb      	ldr	r3, [r7, #12]
 80210e8:	689b      	ldr	r3, [r3, #8]
 80210ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80210ec:	697b      	ldr	r3, [r7, #20]
 80210ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80210f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80210f4:	683b      	ldr	r3, [r7, #0]
 80210f6:	021a      	lsls	r2, r3, #8
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	431a      	orrs	r2, r3
 80210fc:	68bb      	ldr	r3, [r7, #8]
 80210fe:	4313      	orrs	r3, r2
 8021100:	697a      	ldr	r2, [r7, #20]
 8021102:	4313      	orrs	r3, r2
 8021104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021106:	68fb      	ldr	r3, [r7, #12]
 8021108:	697a      	ldr	r2, [r7, #20]
 802110a:	609a      	str	r2, [r3, #8]
}
 802110c:	bf00      	nop
 802110e:	371c      	adds	r7, #28
 8021110:	46bd      	mov	sp, r7
 8021112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021116:	4770      	bx	lr

08021118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8021118:	b480      	push	{r7}
 802111a:	b085      	sub	sp, #20
 802111c:	af00      	add	r7, sp, #0
 802111e:	6078      	str	r0, [r7, #4]
 8021120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8021122:	687b      	ldr	r3, [r7, #4]
 8021124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8021128:	2b01      	cmp	r3, #1
 802112a:	d101      	bne.n	8021130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802112c:	2302      	movs	r3, #2
 802112e:	e06d      	b.n	802120c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8021130:	687b      	ldr	r3, [r7, #4]
 8021132:	2201      	movs	r2, #1
 8021134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021138:	687b      	ldr	r3, [r7, #4]
 802113a:	2202      	movs	r2, #2
 802113c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8021140:	687b      	ldr	r3, [r7, #4]
 8021142:	681b      	ldr	r3, [r3, #0]
 8021144:	685b      	ldr	r3, [r3, #4]
 8021146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	689b      	ldr	r3, [r3, #8]
 802114e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	681b      	ldr	r3, [r3, #0]
 8021154:	4a30      	ldr	r2, [pc, #192]	@ (8021218 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8021156:	4293      	cmp	r3, r2
 8021158:	d004      	beq.n	8021164 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802115a:	687b      	ldr	r3, [r7, #4]
 802115c:	681b      	ldr	r3, [r3, #0]
 802115e:	4a2f      	ldr	r2, [pc, #188]	@ (802121c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8021160:	4293      	cmp	r3, r2
 8021162:	d108      	bne.n	8021176 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8021164:	68fb      	ldr	r3, [r7, #12]
 8021166:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 802116a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 802116c:	683b      	ldr	r3, [r7, #0]
 802116e:	685b      	ldr	r3, [r3, #4]
 8021170:	68fa      	ldr	r2, [r7, #12]
 8021172:	4313      	orrs	r3, r2
 8021174:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8021176:	68fb      	ldr	r3, [r7, #12]
 8021178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 802117c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802117e:	683b      	ldr	r3, [r7, #0]
 8021180:	681b      	ldr	r3, [r3, #0]
 8021182:	68fa      	ldr	r2, [r7, #12]
 8021184:	4313      	orrs	r3, r2
 8021186:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8021188:	687b      	ldr	r3, [r7, #4]
 802118a:	681b      	ldr	r3, [r3, #0]
 802118c:	68fa      	ldr	r2, [r7, #12]
 802118e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021190:	687b      	ldr	r3, [r7, #4]
 8021192:	681b      	ldr	r3, [r3, #0]
 8021194:	4a20      	ldr	r2, [pc, #128]	@ (8021218 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8021196:	4293      	cmp	r3, r2
 8021198:	d022      	beq.n	80211e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80211a2:	d01d      	beq.n	80211e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	681b      	ldr	r3, [r3, #0]
 80211a8:	4a1d      	ldr	r2, [pc, #116]	@ (8021220 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80211aa:	4293      	cmp	r3, r2
 80211ac:	d018      	beq.n	80211e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80211ae:	687b      	ldr	r3, [r7, #4]
 80211b0:	681b      	ldr	r3, [r3, #0]
 80211b2:	4a1c      	ldr	r2, [pc, #112]	@ (8021224 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80211b4:	4293      	cmp	r3, r2
 80211b6:	d013      	beq.n	80211e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	681b      	ldr	r3, [r3, #0]
 80211bc:	4a1a      	ldr	r2, [pc, #104]	@ (8021228 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80211be:	4293      	cmp	r3, r2
 80211c0:	d00e      	beq.n	80211e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	4a15      	ldr	r2, [pc, #84]	@ (802121c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80211c8:	4293      	cmp	r3, r2
 80211ca:	d009      	beq.n	80211e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80211cc:	687b      	ldr	r3, [r7, #4]
 80211ce:	681b      	ldr	r3, [r3, #0]
 80211d0:	4a16      	ldr	r2, [pc, #88]	@ (802122c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80211d2:	4293      	cmp	r3, r2
 80211d4:	d004      	beq.n	80211e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80211d6:	687b      	ldr	r3, [r7, #4]
 80211d8:	681b      	ldr	r3, [r3, #0]
 80211da:	4a15      	ldr	r2, [pc, #84]	@ (8021230 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80211dc:	4293      	cmp	r3, r2
 80211de:	d10c      	bne.n	80211fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80211e0:	68bb      	ldr	r3, [r7, #8]
 80211e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80211e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80211e8:	683b      	ldr	r3, [r7, #0]
 80211ea:	689b      	ldr	r3, [r3, #8]
 80211ec:	68ba      	ldr	r2, [r7, #8]
 80211ee:	4313      	orrs	r3, r2
 80211f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	681b      	ldr	r3, [r3, #0]
 80211f6:	68ba      	ldr	r2, [r7, #8]
 80211f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	2201      	movs	r2, #1
 80211fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8021202:	687b      	ldr	r3, [r7, #4]
 8021204:	2200      	movs	r2, #0
 8021206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 802120a:	2300      	movs	r3, #0
}
 802120c:	4618      	mov	r0, r3
 802120e:	3714      	adds	r7, #20
 8021210:	46bd      	mov	sp, r7
 8021212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021216:	4770      	bx	lr
 8021218:	40010000 	.word	0x40010000
 802121c:	40010400 	.word	0x40010400
 8021220:	40000400 	.word	0x40000400
 8021224:	40000800 	.word	0x40000800
 8021228:	40000c00 	.word	0x40000c00
 802122c:	40001800 	.word	0x40001800
 8021230:	40014000 	.word	0x40014000

08021234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021234:	b580      	push	{r7, lr}
 8021236:	b082      	sub	sp, #8
 8021238:	af00      	add	r7, sp, #0
 802123a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	2b00      	cmp	r3, #0
 8021240:	d101      	bne.n	8021246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021242:	2301      	movs	r3, #1
 8021244:	e042      	b.n	80212cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802124c:	2b00      	cmp	r3, #0
 802124e:	d106      	bne.n	802125e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	2200      	movs	r2, #0
 8021254:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021258:	6878      	ldr	r0, [r7, #4]
 802125a:	f7e1 fd01 	bl	8002c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	2224      	movs	r2, #36	@ 0x24
 8021262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8021266:	687b      	ldr	r3, [r7, #4]
 8021268:	681b      	ldr	r3, [r3, #0]
 802126a:	681a      	ldr	r2, [r3, #0]
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	f022 0201 	bic.w	r2, r2, #1
 8021274:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802127a:	2b00      	cmp	r3, #0
 802127c:	d002      	beq.n	8021284 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 802127e:	6878      	ldr	r0, [r7, #4]
 8021280:	f000 fd90 	bl	8021da4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8021284:	6878      	ldr	r0, [r7, #4]
 8021286:	f000 f825 	bl	80212d4 <UART_SetConfig>
 802128a:	4603      	mov	r3, r0
 802128c:	2b01      	cmp	r3, #1
 802128e:	d101      	bne.n	8021294 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8021290:	2301      	movs	r3, #1
 8021292:	e01b      	b.n	80212cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021294:	687b      	ldr	r3, [r7, #4]
 8021296:	681b      	ldr	r3, [r3, #0]
 8021298:	685a      	ldr	r2, [r3, #4]
 802129a:	687b      	ldr	r3, [r7, #4]
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80212a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	681b      	ldr	r3, [r3, #0]
 80212a8:	689a      	ldr	r2, [r3, #8]
 80212aa:	687b      	ldr	r3, [r7, #4]
 80212ac:	681b      	ldr	r3, [r3, #0]
 80212ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80212b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	681b      	ldr	r3, [r3, #0]
 80212b8:	681a      	ldr	r2, [r3, #0]
 80212ba:	687b      	ldr	r3, [r7, #4]
 80212bc:	681b      	ldr	r3, [r3, #0]
 80212be:	f042 0201 	orr.w	r2, r2, #1
 80212c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80212c4:	6878      	ldr	r0, [r7, #4]
 80212c6:	f000 fe0f 	bl	8021ee8 <UART_CheckIdleState>
 80212ca:	4603      	mov	r3, r0
}
 80212cc:	4618      	mov	r0, r3
 80212ce:	3708      	adds	r7, #8
 80212d0:	46bd      	mov	sp, r7
 80212d2:	bd80      	pop	{r7, pc}

080212d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80212d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80212d8:	b092      	sub	sp, #72	@ 0x48
 80212da:	af00      	add	r7, sp, #0
 80212dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80212de:	2300      	movs	r3, #0
 80212e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80212e4:	697b      	ldr	r3, [r7, #20]
 80212e6:	689a      	ldr	r2, [r3, #8]
 80212e8:	697b      	ldr	r3, [r7, #20]
 80212ea:	691b      	ldr	r3, [r3, #16]
 80212ec:	431a      	orrs	r2, r3
 80212ee:	697b      	ldr	r3, [r7, #20]
 80212f0:	695b      	ldr	r3, [r3, #20]
 80212f2:	431a      	orrs	r2, r3
 80212f4:	697b      	ldr	r3, [r7, #20]
 80212f6:	69db      	ldr	r3, [r3, #28]
 80212f8:	4313      	orrs	r3, r2
 80212fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80212fc:	697b      	ldr	r3, [r7, #20]
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	681a      	ldr	r2, [r3, #0]
 8021302:	4bbe      	ldr	r3, [pc, #760]	@ (80215fc <UART_SetConfig+0x328>)
 8021304:	4013      	ands	r3, r2
 8021306:	697a      	ldr	r2, [r7, #20]
 8021308:	6812      	ldr	r2, [r2, #0]
 802130a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 802130c:	430b      	orrs	r3, r1
 802130e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021310:	697b      	ldr	r3, [r7, #20]
 8021312:	681b      	ldr	r3, [r3, #0]
 8021314:	685b      	ldr	r3, [r3, #4]
 8021316:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 802131a:	697b      	ldr	r3, [r7, #20]
 802131c:	68da      	ldr	r2, [r3, #12]
 802131e:	697b      	ldr	r3, [r7, #20]
 8021320:	681b      	ldr	r3, [r3, #0]
 8021322:	430a      	orrs	r2, r1
 8021324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8021326:	697b      	ldr	r3, [r7, #20]
 8021328:	699b      	ldr	r3, [r3, #24]
 802132a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802132c:	697b      	ldr	r3, [r7, #20]
 802132e:	681b      	ldr	r3, [r3, #0]
 8021330:	4ab3      	ldr	r2, [pc, #716]	@ (8021600 <UART_SetConfig+0x32c>)
 8021332:	4293      	cmp	r3, r2
 8021334:	d004      	beq.n	8021340 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8021336:	697b      	ldr	r3, [r7, #20]
 8021338:	6a1b      	ldr	r3, [r3, #32]
 802133a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802133c:	4313      	orrs	r3, r2
 802133e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8021340:	697b      	ldr	r3, [r7, #20]
 8021342:	681b      	ldr	r3, [r3, #0]
 8021344:	689a      	ldr	r2, [r3, #8]
 8021346:	4baf      	ldr	r3, [pc, #700]	@ (8021604 <UART_SetConfig+0x330>)
 8021348:	4013      	ands	r3, r2
 802134a:	697a      	ldr	r2, [r7, #20]
 802134c:	6812      	ldr	r2, [r2, #0]
 802134e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8021350:	430b      	orrs	r3, r1
 8021352:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8021354:	697b      	ldr	r3, [r7, #20]
 8021356:	681b      	ldr	r3, [r3, #0]
 8021358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802135a:	f023 010f 	bic.w	r1, r3, #15
 802135e:	697b      	ldr	r3, [r7, #20]
 8021360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8021362:	697b      	ldr	r3, [r7, #20]
 8021364:	681b      	ldr	r3, [r3, #0]
 8021366:	430a      	orrs	r2, r1
 8021368:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802136a:	697b      	ldr	r3, [r7, #20]
 802136c:	681b      	ldr	r3, [r3, #0]
 802136e:	4aa6      	ldr	r2, [pc, #664]	@ (8021608 <UART_SetConfig+0x334>)
 8021370:	4293      	cmp	r3, r2
 8021372:	d177      	bne.n	8021464 <UART_SetConfig+0x190>
 8021374:	4ba5      	ldr	r3, [pc, #660]	@ (802160c <UART_SetConfig+0x338>)
 8021376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021378:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802137c:	2b28      	cmp	r3, #40	@ 0x28
 802137e:	d86d      	bhi.n	802145c <UART_SetConfig+0x188>
 8021380:	a201      	add	r2, pc, #4	@ (adr r2, 8021388 <UART_SetConfig+0xb4>)
 8021382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021386:	bf00      	nop
 8021388:	0802142d 	.word	0x0802142d
 802138c:	0802145d 	.word	0x0802145d
 8021390:	0802145d 	.word	0x0802145d
 8021394:	0802145d 	.word	0x0802145d
 8021398:	0802145d 	.word	0x0802145d
 802139c:	0802145d 	.word	0x0802145d
 80213a0:	0802145d 	.word	0x0802145d
 80213a4:	0802145d 	.word	0x0802145d
 80213a8:	08021435 	.word	0x08021435
 80213ac:	0802145d 	.word	0x0802145d
 80213b0:	0802145d 	.word	0x0802145d
 80213b4:	0802145d 	.word	0x0802145d
 80213b8:	0802145d 	.word	0x0802145d
 80213bc:	0802145d 	.word	0x0802145d
 80213c0:	0802145d 	.word	0x0802145d
 80213c4:	0802145d 	.word	0x0802145d
 80213c8:	0802143d 	.word	0x0802143d
 80213cc:	0802145d 	.word	0x0802145d
 80213d0:	0802145d 	.word	0x0802145d
 80213d4:	0802145d 	.word	0x0802145d
 80213d8:	0802145d 	.word	0x0802145d
 80213dc:	0802145d 	.word	0x0802145d
 80213e0:	0802145d 	.word	0x0802145d
 80213e4:	0802145d 	.word	0x0802145d
 80213e8:	08021445 	.word	0x08021445
 80213ec:	0802145d 	.word	0x0802145d
 80213f0:	0802145d 	.word	0x0802145d
 80213f4:	0802145d 	.word	0x0802145d
 80213f8:	0802145d 	.word	0x0802145d
 80213fc:	0802145d 	.word	0x0802145d
 8021400:	0802145d 	.word	0x0802145d
 8021404:	0802145d 	.word	0x0802145d
 8021408:	0802144d 	.word	0x0802144d
 802140c:	0802145d 	.word	0x0802145d
 8021410:	0802145d 	.word	0x0802145d
 8021414:	0802145d 	.word	0x0802145d
 8021418:	0802145d 	.word	0x0802145d
 802141c:	0802145d 	.word	0x0802145d
 8021420:	0802145d 	.word	0x0802145d
 8021424:	0802145d 	.word	0x0802145d
 8021428:	08021455 	.word	0x08021455
 802142c:	2301      	movs	r3, #1
 802142e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021432:	e222      	b.n	802187a <UART_SetConfig+0x5a6>
 8021434:	2304      	movs	r3, #4
 8021436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802143a:	e21e      	b.n	802187a <UART_SetConfig+0x5a6>
 802143c:	2308      	movs	r3, #8
 802143e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021442:	e21a      	b.n	802187a <UART_SetConfig+0x5a6>
 8021444:	2310      	movs	r3, #16
 8021446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802144a:	e216      	b.n	802187a <UART_SetConfig+0x5a6>
 802144c:	2320      	movs	r3, #32
 802144e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021452:	e212      	b.n	802187a <UART_SetConfig+0x5a6>
 8021454:	2340      	movs	r3, #64	@ 0x40
 8021456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802145a:	e20e      	b.n	802187a <UART_SetConfig+0x5a6>
 802145c:	2380      	movs	r3, #128	@ 0x80
 802145e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021462:	e20a      	b.n	802187a <UART_SetConfig+0x5a6>
 8021464:	697b      	ldr	r3, [r7, #20]
 8021466:	681b      	ldr	r3, [r3, #0]
 8021468:	4a69      	ldr	r2, [pc, #420]	@ (8021610 <UART_SetConfig+0x33c>)
 802146a:	4293      	cmp	r3, r2
 802146c:	d130      	bne.n	80214d0 <UART_SetConfig+0x1fc>
 802146e:	4b67      	ldr	r3, [pc, #412]	@ (802160c <UART_SetConfig+0x338>)
 8021470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021472:	f003 0307 	and.w	r3, r3, #7
 8021476:	2b05      	cmp	r3, #5
 8021478:	d826      	bhi.n	80214c8 <UART_SetConfig+0x1f4>
 802147a:	a201      	add	r2, pc, #4	@ (adr r2, 8021480 <UART_SetConfig+0x1ac>)
 802147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021480:	08021499 	.word	0x08021499
 8021484:	080214a1 	.word	0x080214a1
 8021488:	080214a9 	.word	0x080214a9
 802148c:	080214b1 	.word	0x080214b1
 8021490:	080214b9 	.word	0x080214b9
 8021494:	080214c1 	.word	0x080214c1
 8021498:	2300      	movs	r3, #0
 802149a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802149e:	e1ec      	b.n	802187a <UART_SetConfig+0x5a6>
 80214a0:	2304      	movs	r3, #4
 80214a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80214a6:	e1e8      	b.n	802187a <UART_SetConfig+0x5a6>
 80214a8:	2308      	movs	r3, #8
 80214aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80214ae:	e1e4      	b.n	802187a <UART_SetConfig+0x5a6>
 80214b0:	2310      	movs	r3, #16
 80214b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80214b6:	e1e0      	b.n	802187a <UART_SetConfig+0x5a6>
 80214b8:	2320      	movs	r3, #32
 80214ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80214be:	e1dc      	b.n	802187a <UART_SetConfig+0x5a6>
 80214c0:	2340      	movs	r3, #64	@ 0x40
 80214c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80214c6:	e1d8      	b.n	802187a <UART_SetConfig+0x5a6>
 80214c8:	2380      	movs	r3, #128	@ 0x80
 80214ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80214ce:	e1d4      	b.n	802187a <UART_SetConfig+0x5a6>
 80214d0:	697b      	ldr	r3, [r7, #20]
 80214d2:	681b      	ldr	r3, [r3, #0]
 80214d4:	4a4f      	ldr	r2, [pc, #316]	@ (8021614 <UART_SetConfig+0x340>)
 80214d6:	4293      	cmp	r3, r2
 80214d8:	d130      	bne.n	802153c <UART_SetConfig+0x268>
 80214da:	4b4c      	ldr	r3, [pc, #304]	@ (802160c <UART_SetConfig+0x338>)
 80214dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80214de:	f003 0307 	and.w	r3, r3, #7
 80214e2:	2b05      	cmp	r3, #5
 80214e4:	d826      	bhi.n	8021534 <UART_SetConfig+0x260>
 80214e6:	a201      	add	r2, pc, #4	@ (adr r2, 80214ec <UART_SetConfig+0x218>)
 80214e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80214ec:	08021505 	.word	0x08021505
 80214f0:	0802150d 	.word	0x0802150d
 80214f4:	08021515 	.word	0x08021515
 80214f8:	0802151d 	.word	0x0802151d
 80214fc:	08021525 	.word	0x08021525
 8021500:	0802152d 	.word	0x0802152d
 8021504:	2300      	movs	r3, #0
 8021506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802150a:	e1b6      	b.n	802187a <UART_SetConfig+0x5a6>
 802150c:	2304      	movs	r3, #4
 802150e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021512:	e1b2      	b.n	802187a <UART_SetConfig+0x5a6>
 8021514:	2308      	movs	r3, #8
 8021516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802151a:	e1ae      	b.n	802187a <UART_SetConfig+0x5a6>
 802151c:	2310      	movs	r3, #16
 802151e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021522:	e1aa      	b.n	802187a <UART_SetConfig+0x5a6>
 8021524:	2320      	movs	r3, #32
 8021526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802152a:	e1a6      	b.n	802187a <UART_SetConfig+0x5a6>
 802152c:	2340      	movs	r3, #64	@ 0x40
 802152e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021532:	e1a2      	b.n	802187a <UART_SetConfig+0x5a6>
 8021534:	2380      	movs	r3, #128	@ 0x80
 8021536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802153a:	e19e      	b.n	802187a <UART_SetConfig+0x5a6>
 802153c:	697b      	ldr	r3, [r7, #20]
 802153e:	681b      	ldr	r3, [r3, #0]
 8021540:	4a35      	ldr	r2, [pc, #212]	@ (8021618 <UART_SetConfig+0x344>)
 8021542:	4293      	cmp	r3, r2
 8021544:	d130      	bne.n	80215a8 <UART_SetConfig+0x2d4>
 8021546:	4b31      	ldr	r3, [pc, #196]	@ (802160c <UART_SetConfig+0x338>)
 8021548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802154a:	f003 0307 	and.w	r3, r3, #7
 802154e:	2b05      	cmp	r3, #5
 8021550:	d826      	bhi.n	80215a0 <UART_SetConfig+0x2cc>
 8021552:	a201      	add	r2, pc, #4	@ (adr r2, 8021558 <UART_SetConfig+0x284>)
 8021554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021558:	08021571 	.word	0x08021571
 802155c:	08021579 	.word	0x08021579
 8021560:	08021581 	.word	0x08021581
 8021564:	08021589 	.word	0x08021589
 8021568:	08021591 	.word	0x08021591
 802156c:	08021599 	.word	0x08021599
 8021570:	2300      	movs	r3, #0
 8021572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021576:	e180      	b.n	802187a <UART_SetConfig+0x5a6>
 8021578:	2304      	movs	r3, #4
 802157a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802157e:	e17c      	b.n	802187a <UART_SetConfig+0x5a6>
 8021580:	2308      	movs	r3, #8
 8021582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021586:	e178      	b.n	802187a <UART_SetConfig+0x5a6>
 8021588:	2310      	movs	r3, #16
 802158a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802158e:	e174      	b.n	802187a <UART_SetConfig+0x5a6>
 8021590:	2320      	movs	r3, #32
 8021592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021596:	e170      	b.n	802187a <UART_SetConfig+0x5a6>
 8021598:	2340      	movs	r3, #64	@ 0x40
 802159a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802159e:	e16c      	b.n	802187a <UART_SetConfig+0x5a6>
 80215a0:	2380      	movs	r3, #128	@ 0x80
 80215a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215a6:	e168      	b.n	802187a <UART_SetConfig+0x5a6>
 80215a8:	697b      	ldr	r3, [r7, #20]
 80215aa:	681b      	ldr	r3, [r3, #0]
 80215ac:	4a1b      	ldr	r2, [pc, #108]	@ (802161c <UART_SetConfig+0x348>)
 80215ae:	4293      	cmp	r3, r2
 80215b0:	d142      	bne.n	8021638 <UART_SetConfig+0x364>
 80215b2:	4b16      	ldr	r3, [pc, #88]	@ (802160c <UART_SetConfig+0x338>)
 80215b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80215b6:	f003 0307 	and.w	r3, r3, #7
 80215ba:	2b05      	cmp	r3, #5
 80215bc:	d838      	bhi.n	8021630 <UART_SetConfig+0x35c>
 80215be:	a201      	add	r2, pc, #4	@ (adr r2, 80215c4 <UART_SetConfig+0x2f0>)
 80215c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80215c4:	080215dd 	.word	0x080215dd
 80215c8:	080215e5 	.word	0x080215e5
 80215cc:	080215ed 	.word	0x080215ed
 80215d0:	080215f5 	.word	0x080215f5
 80215d4:	08021621 	.word	0x08021621
 80215d8:	08021629 	.word	0x08021629
 80215dc:	2300      	movs	r3, #0
 80215de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215e2:	e14a      	b.n	802187a <UART_SetConfig+0x5a6>
 80215e4:	2304      	movs	r3, #4
 80215e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215ea:	e146      	b.n	802187a <UART_SetConfig+0x5a6>
 80215ec:	2308      	movs	r3, #8
 80215ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215f2:	e142      	b.n	802187a <UART_SetConfig+0x5a6>
 80215f4:	2310      	movs	r3, #16
 80215f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215fa:	e13e      	b.n	802187a <UART_SetConfig+0x5a6>
 80215fc:	cfff69f3 	.word	0xcfff69f3
 8021600:	58000c00 	.word	0x58000c00
 8021604:	11fff4ff 	.word	0x11fff4ff
 8021608:	40011000 	.word	0x40011000
 802160c:	58024400 	.word	0x58024400
 8021610:	40004400 	.word	0x40004400
 8021614:	40004800 	.word	0x40004800
 8021618:	40004c00 	.word	0x40004c00
 802161c:	40005000 	.word	0x40005000
 8021620:	2320      	movs	r3, #32
 8021622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021626:	e128      	b.n	802187a <UART_SetConfig+0x5a6>
 8021628:	2340      	movs	r3, #64	@ 0x40
 802162a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802162e:	e124      	b.n	802187a <UART_SetConfig+0x5a6>
 8021630:	2380      	movs	r3, #128	@ 0x80
 8021632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021636:	e120      	b.n	802187a <UART_SetConfig+0x5a6>
 8021638:	697b      	ldr	r3, [r7, #20]
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	4acb      	ldr	r2, [pc, #812]	@ (802196c <UART_SetConfig+0x698>)
 802163e:	4293      	cmp	r3, r2
 8021640:	d176      	bne.n	8021730 <UART_SetConfig+0x45c>
 8021642:	4bcb      	ldr	r3, [pc, #812]	@ (8021970 <UART_SetConfig+0x69c>)
 8021644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802164a:	2b28      	cmp	r3, #40	@ 0x28
 802164c:	d86c      	bhi.n	8021728 <UART_SetConfig+0x454>
 802164e:	a201      	add	r2, pc, #4	@ (adr r2, 8021654 <UART_SetConfig+0x380>)
 8021650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021654:	080216f9 	.word	0x080216f9
 8021658:	08021729 	.word	0x08021729
 802165c:	08021729 	.word	0x08021729
 8021660:	08021729 	.word	0x08021729
 8021664:	08021729 	.word	0x08021729
 8021668:	08021729 	.word	0x08021729
 802166c:	08021729 	.word	0x08021729
 8021670:	08021729 	.word	0x08021729
 8021674:	08021701 	.word	0x08021701
 8021678:	08021729 	.word	0x08021729
 802167c:	08021729 	.word	0x08021729
 8021680:	08021729 	.word	0x08021729
 8021684:	08021729 	.word	0x08021729
 8021688:	08021729 	.word	0x08021729
 802168c:	08021729 	.word	0x08021729
 8021690:	08021729 	.word	0x08021729
 8021694:	08021709 	.word	0x08021709
 8021698:	08021729 	.word	0x08021729
 802169c:	08021729 	.word	0x08021729
 80216a0:	08021729 	.word	0x08021729
 80216a4:	08021729 	.word	0x08021729
 80216a8:	08021729 	.word	0x08021729
 80216ac:	08021729 	.word	0x08021729
 80216b0:	08021729 	.word	0x08021729
 80216b4:	08021711 	.word	0x08021711
 80216b8:	08021729 	.word	0x08021729
 80216bc:	08021729 	.word	0x08021729
 80216c0:	08021729 	.word	0x08021729
 80216c4:	08021729 	.word	0x08021729
 80216c8:	08021729 	.word	0x08021729
 80216cc:	08021729 	.word	0x08021729
 80216d0:	08021729 	.word	0x08021729
 80216d4:	08021719 	.word	0x08021719
 80216d8:	08021729 	.word	0x08021729
 80216dc:	08021729 	.word	0x08021729
 80216e0:	08021729 	.word	0x08021729
 80216e4:	08021729 	.word	0x08021729
 80216e8:	08021729 	.word	0x08021729
 80216ec:	08021729 	.word	0x08021729
 80216f0:	08021729 	.word	0x08021729
 80216f4:	08021721 	.word	0x08021721
 80216f8:	2301      	movs	r3, #1
 80216fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216fe:	e0bc      	b.n	802187a <UART_SetConfig+0x5a6>
 8021700:	2304      	movs	r3, #4
 8021702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021706:	e0b8      	b.n	802187a <UART_SetConfig+0x5a6>
 8021708:	2308      	movs	r3, #8
 802170a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802170e:	e0b4      	b.n	802187a <UART_SetConfig+0x5a6>
 8021710:	2310      	movs	r3, #16
 8021712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021716:	e0b0      	b.n	802187a <UART_SetConfig+0x5a6>
 8021718:	2320      	movs	r3, #32
 802171a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802171e:	e0ac      	b.n	802187a <UART_SetConfig+0x5a6>
 8021720:	2340      	movs	r3, #64	@ 0x40
 8021722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021726:	e0a8      	b.n	802187a <UART_SetConfig+0x5a6>
 8021728:	2380      	movs	r3, #128	@ 0x80
 802172a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802172e:	e0a4      	b.n	802187a <UART_SetConfig+0x5a6>
 8021730:	697b      	ldr	r3, [r7, #20]
 8021732:	681b      	ldr	r3, [r3, #0]
 8021734:	4a8f      	ldr	r2, [pc, #572]	@ (8021974 <UART_SetConfig+0x6a0>)
 8021736:	4293      	cmp	r3, r2
 8021738:	d130      	bne.n	802179c <UART_SetConfig+0x4c8>
 802173a:	4b8d      	ldr	r3, [pc, #564]	@ (8021970 <UART_SetConfig+0x69c>)
 802173c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802173e:	f003 0307 	and.w	r3, r3, #7
 8021742:	2b05      	cmp	r3, #5
 8021744:	d826      	bhi.n	8021794 <UART_SetConfig+0x4c0>
 8021746:	a201      	add	r2, pc, #4	@ (adr r2, 802174c <UART_SetConfig+0x478>)
 8021748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802174c:	08021765 	.word	0x08021765
 8021750:	0802176d 	.word	0x0802176d
 8021754:	08021775 	.word	0x08021775
 8021758:	0802177d 	.word	0x0802177d
 802175c:	08021785 	.word	0x08021785
 8021760:	0802178d 	.word	0x0802178d
 8021764:	2300      	movs	r3, #0
 8021766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802176a:	e086      	b.n	802187a <UART_SetConfig+0x5a6>
 802176c:	2304      	movs	r3, #4
 802176e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021772:	e082      	b.n	802187a <UART_SetConfig+0x5a6>
 8021774:	2308      	movs	r3, #8
 8021776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802177a:	e07e      	b.n	802187a <UART_SetConfig+0x5a6>
 802177c:	2310      	movs	r3, #16
 802177e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021782:	e07a      	b.n	802187a <UART_SetConfig+0x5a6>
 8021784:	2320      	movs	r3, #32
 8021786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802178a:	e076      	b.n	802187a <UART_SetConfig+0x5a6>
 802178c:	2340      	movs	r3, #64	@ 0x40
 802178e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021792:	e072      	b.n	802187a <UART_SetConfig+0x5a6>
 8021794:	2380      	movs	r3, #128	@ 0x80
 8021796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802179a:	e06e      	b.n	802187a <UART_SetConfig+0x5a6>
 802179c:	697b      	ldr	r3, [r7, #20]
 802179e:	681b      	ldr	r3, [r3, #0]
 80217a0:	4a75      	ldr	r2, [pc, #468]	@ (8021978 <UART_SetConfig+0x6a4>)
 80217a2:	4293      	cmp	r3, r2
 80217a4:	d130      	bne.n	8021808 <UART_SetConfig+0x534>
 80217a6:	4b72      	ldr	r3, [pc, #456]	@ (8021970 <UART_SetConfig+0x69c>)
 80217a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80217aa:	f003 0307 	and.w	r3, r3, #7
 80217ae:	2b05      	cmp	r3, #5
 80217b0:	d826      	bhi.n	8021800 <UART_SetConfig+0x52c>
 80217b2:	a201      	add	r2, pc, #4	@ (adr r2, 80217b8 <UART_SetConfig+0x4e4>)
 80217b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80217b8:	080217d1 	.word	0x080217d1
 80217bc:	080217d9 	.word	0x080217d9
 80217c0:	080217e1 	.word	0x080217e1
 80217c4:	080217e9 	.word	0x080217e9
 80217c8:	080217f1 	.word	0x080217f1
 80217cc:	080217f9 	.word	0x080217f9
 80217d0:	2300      	movs	r3, #0
 80217d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80217d6:	e050      	b.n	802187a <UART_SetConfig+0x5a6>
 80217d8:	2304      	movs	r3, #4
 80217da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80217de:	e04c      	b.n	802187a <UART_SetConfig+0x5a6>
 80217e0:	2308      	movs	r3, #8
 80217e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80217e6:	e048      	b.n	802187a <UART_SetConfig+0x5a6>
 80217e8:	2310      	movs	r3, #16
 80217ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80217ee:	e044      	b.n	802187a <UART_SetConfig+0x5a6>
 80217f0:	2320      	movs	r3, #32
 80217f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80217f6:	e040      	b.n	802187a <UART_SetConfig+0x5a6>
 80217f8:	2340      	movs	r3, #64	@ 0x40
 80217fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80217fe:	e03c      	b.n	802187a <UART_SetConfig+0x5a6>
 8021800:	2380      	movs	r3, #128	@ 0x80
 8021802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021806:	e038      	b.n	802187a <UART_SetConfig+0x5a6>
 8021808:	697b      	ldr	r3, [r7, #20]
 802180a:	681b      	ldr	r3, [r3, #0]
 802180c:	4a5b      	ldr	r2, [pc, #364]	@ (802197c <UART_SetConfig+0x6a8>)
 802180e:	4293      	cmp	r3, r2
 8021810:	d130      	bne.n	8021874 <UART_SetConfig+0x5a0>
 8021812:	4b57      	ldr	r3, [pc, #348]	@ (8021970 <UART_SetConfig+0x69c>)
 8021814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021816:	f003 0307 	and.w	r3, r3, #7
 802181a:	2b05      	cmp	r3, #5
 802181c:	d826      	bhi.n	802186c <UART_SetConfig+0x598>
 802181e:	a201      	add	r2, pc, #4	@ (adr r2, 8021824 <UART_SetConfig+0x550>)
 8021820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021824:	0802183d 	.word	0x0802183d
 8021828:	08021845 	.word	0x08021845
 802182c:	0802184d 	.word	0x0802184d
 8021830:	08021855 	.word	0x08021855
 8021834:	0802185d 	.word	0x0802185d
 8021838:	08021865 	.word	0x08021865
 802183c:	2302      	movs	r3, #2
 802183e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021842:	e01a      	b.n	802187a <UART_SetConfig+0x5a6>
 8021844:	2304      	movs	r3, #4
 8021846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802184a:	e016      	b.n	802187a <UART_SetConfig+0x5a6>
 802184c:	2308      	movs	r3, #8
 802184e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021852:	e012      	b.n	802187a <UART_SetConfig+0x5a6>
 8021854:	2310      	movs	r3, #16
 8021856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802185a:	e00e      	b.n	802187a <UART_SetConfig+0x5a6>
 802185c:	2320      	movs	r3, #32
 802185e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021862:	e00a      	b.n	802187a <UART_SetConfig+0x5a6>
 8021864:	2340      	movs	r3, #64	@ 0x40
 8021866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802186a:	e006      	b.n	802187a <UART_SetConfig+0x5a6>
 802186c:	2380      	movs	r3, #128	@ 0x80
 802186e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021872:	e002      	b.n	802187a <UART_SetConfig+0x5a6>
 8021874:	2380      	movs	r3, #128	@ 0x80
 8021876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802187a:	697b      	ldr	r3, [r7, #20]
 802187c:	681b      	ldr	r3, [r3, #0]
 802187e:	4a3f      	ldr	r2, [pc, #252]	@ (802197c <UART_SetConfig+0x6a8>)
 8021880:	4293      	cmp	r3, r2
 8021882:	f040 80f8 	bne.w	8021a76 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8021886:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802188a:	2b20      	cmp	r3, #32
 802188c:	dc46      	bgt.n	802191c <UART_SetConfig+0x648>
 802188e:	2b02      	cmp	r3, #2
 8021890:	f2c0 8082 	blt.w	8021998 <UART_SetConfig+0x6c4>
 8021894:	3b02      	subs	r3, #2
 8021896:	2b1e      	cmp	r3, #30
 8021898:	d87e      	bhi.n	8021998 <UART_SetConfig+0x6c4>
 802189a:	a201      	add	r2, pc, #4	@ (adr r2, 80218a0 <UART_SetConfig+0x5cc>)
 802189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218a0:	08021923 	.word	0x08021923
 80218a4:	08021999 	.word	0x08021999
 80218a8:	0802192b 	.word	0x0802192b
 80218ac:	08021999 	.word	0x08021999
 80218b0:	08021999 	.word	0x08021999
 80218b4:	08021999 	.word	0x08021999
 80218b8:	0802193b 	.word	0x0802193b
 80218bc:	08021999 	.word	0x08021999
 80218c0:	08021999 	.word	0x08021999
 80218c4:	08021999 	.word	0x08021999
 80218c8:	08021999 	.word	0x08021999
 80218cc:	08021999 	.word	0x08021999
 80218d0:	08021999 	.word	0x08021999
 80218d4:	08021999 	.word	0x08021999
 80218d8:	0802194b 	.word	0x0802194b
 80218dc:	08021999 	.word	0x08021999
 80218e0:	08021999 	.word	0x08021999
 80218e4:	08021999 	.word	0x08021999
 80218e8:	08021999 	.word	0x08021999
 80218ec:	08021999 	.word	0x08021999
 80218f0:	08021999 	.word	0x08021999
 80218f4:	08021999 	.word	0x08021999
 80218f8:	08021999 	.word	0x08021999
 80218fc:	08021999 	.word	0x08021999
 8021900:	08021999 	.word	0x08021999
 8021904:	08021999 	.word	0x08021999
 8021908:	08021999 	.word	0x08021999
 802190c:	08021999 	.word	0x08021999
 8021910:	08021999 	.word	0x08021999
 8021914:	08021999 	.word	0x08021999
 8021918:	0802198b 	.word	0x0802198b
 802191c:	2b40      	cmp	r3, #64	@ 0x40
 802191e:	d037      	beq.n	8021990 <UART_SetConfig+0x6bc>
 8021920:	e03a      	b.n	8021998 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8021922:	f7fd fc87 	bl	801f234 <HAL_RCCEx_GetD3PCLK1Freq>
 8021926:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021928:	e03c      	b.n	80219a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802192a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802192e:	4618      	mov	r0, r3
 8021930:	f7fd fc96 	bl	801f260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021938:	e034      	b.n	80219a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802193a:	f107 0318 	add.w	r3, r7, #24
 802193e:	4618      	mov	r0, r3
 8021940:	f7fd fde2 	bl	801f508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021944:	69fb      	ldr	r3, [r7, #28]
 8021946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021948:	e02c      	b.n	80219a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802194a:	4b09      	ldr	r3, [pc, #36]	@ (8021970 <UART_SetConfig+0x69c>)
 802194c:	681b      	ldr	r3, [r3, #0]
 802194e:	f003 0320 	and.w	r3, r3, #32
 8021952:	2b00      	cmp	r3, #0
 8021954:	d016      	beq.n	8021984 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021956:	4b06      	ldr	r3, [pc, #24]	@ (8021970 <UART_SetConfig+0x69c>)
 8021958:	681b      	ldr	r3, [r3, #0]
 802195a:	08db      	lsrs	r3, r3, #3
 802195c:	f003 0303 	and.w	r3, r3, #3
 8021960:	4a07      	ldr	r2, [pc, #28]	@ (8021980 <UART_SetConfig+0x6ac>)
 8021962:	fa22 f303 	lsr.w	r3, r2, r3
 8021966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021968:	e01c      	b.n	80219a4 <UART_SetConfig+0x6d0>
 802196a:	bf00      	nop
 802196c:	40011400 	.word	0x40011400
 8021970:	58024400 	.word	0x58024400
 8021974:	40007800 	.word	0x40007800
 8021978:	40007c00 	.word	0x40007c00
 802197c:	58000c00 	.word	0x58000c00
 8021980:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8021984:	4b9d      	ldr	r3, [pc, #628]	@ (8021bfc <UART_SetConfig+0x928>)
 8021986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021988:	e00c      	b.n	80219a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802198a:	4b9d      	ldr	r3, [pc, #628]	@ (8021c00 <UART_SetConfig+0x92c>)
 802198c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802198e:	e009      	b.n	80219a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021990:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021996:	e005      	b.n	80219a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8021998:	2300      	movs	r3, #0
 802199a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802199c:	2301      	movs	r3, #1
 802199e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80219a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80219a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80219a6:	2b00      	cmp	r3, #0
 80219a8:	f000 81de 	beq.w	8021d68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80219ac:	697b      	ldr	r3, [r7, #20]
 80219ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80219b0:	4a94      	ldr	r2, [pc, #592]	@ (8021c04 <UART_SetConfig+0x930>)
 80219b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80219b6:	461a      	mov	r2, r3
 80219b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80219ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80219be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80219c0:	697b      	ldr	r3, [r7, #20]
 80219c2:	685a      	ldr	r2, [r3, #4]
 80219c4:	4613      	mov	r3, r2
 80219c6:	005b      	lsls	r3, r3, #1
 80219c8:	4413      	add	r3, r2
 80219ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80219cc:	429a      	cmp	r2, r3
 80219ce:	d305      	bcc.n	80219dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80219d0:	697b      	ldr	r3, [r7, #20]
 80219d2:	685b      	ldr	r3, [r3, #4]
 80219d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80219d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80219d8:	429a      	cmp	r2, r3
 80219da:	d903      	bls.n	80219e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80219dc:	2301      	movs	r3, #1
 80219de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80219e2:	e1c1      	b.n	8021d68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80219e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80219e6:	2200      	movs	r2, #0
 80219e8:	60bb      	str	r3, [r7, #8]
 80219ea:	60fa      	str	r2, [r7, #12]
 80219ec:	697b      	ldr	r3, [r7, #20]
 80219ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80219f0:	4a84      	ldr	r2, [pc, #528]	@ (8021c04 <UART_SetConfig+0x930>)
 80219f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80219f6:	b29b      	uxth	r3, r3
 80219f8:	2200      	movs	r2, #0
 80219fa:	603b      	str	r3, [r7, #0]
 80219fc:	607a      	str	r2, [r7, #4]
 80219fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021a02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021a06:	f7de fcd3 	bl	80003b0 <__aeabi_uldivmod>
 8021a0a:	4602      	mov	r2, r0
 8021a0c:	460b      	mov	r3, r1
 8021a0e:	4610      	mov	r0, r2
 8021a10:	4619      	mov	r1, r3
 8021a12:	f04f 0200 	mov.w	r2, #0
 8021a16:	f04f 0300 	mov.w	r3, #0
 8021a1a:	020b      	lsls	r3, r1, #8
 8021a1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8021a20:	0202      	lsls	r2, r0, #8
 8021a22:	6979      	ldr	r1, [r7, #20]
 8021a24:	6849      	ldr	r1, [r1, #4]
 8021a26:	0849      	lsrs	r1, r1, #1
 8021a28:	2000      	movs	r0, #0
 8021a2a:	460c      	mov	r4, r1
 8021a2c:	4605      	mov	r5, r0
 8021a2e:	eb12 0804 	adds.w	r8, r2, r4
 8021a32:	eb43 0905 	adc.w	r9, r3, r5
 8021a36:	697b      	ldr	r3, [r7, #20]
 8021a38:	685b      	ldr	r3, [r3, #4]
 8021a3a:	2200      	movs	r2, #0
 8021a3c:	469a      	mov	sl, r3
 8021a3e:	4693      	mov	fp, r2
 8021a40:	4652      	mov	r2, sl
 8021a42:	465b      	mov	r3, fp
 8021a44:	4640      	mov	r0, r8
 8021a46:	4649      	mov	r1, r9
 8021a48:	f7de fcb2 	bl	80003b0 <__aeabi_uldivmod>
 8021a4c:	4602      	mov	r2, r0
 8021a4e:	460b      	mov	r3, r1
 8021a50:	4613      	mov	r3, r2
 8021a52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8021a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021a56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8021a5a:	d308      	bcc.n	8021a6e <UART_SetConfig+0x79a>
 8021a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021a5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021a62:	d204      	bcs.n	8021a6e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8021a64:	697b      	ldr	r3, [r7, #20]
 8021a66:	681b      	ldr	r3, [r3, #0]
 8021a68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8021a6a:	60da      	str	r2, [r3, #12]
 8021a6c:	e17c      	b.n	8021d68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8021a6e:	2301      	movs	r3, #1
 8021a70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021a74:	e178      	b.n	8021d68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021a76:	697b      	ldr	r3, [r7, #20]
 8021a78:	69db      	ldr	r3, [r3, #28]
 8021a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021a7e:	f040 80c5 	bne.w	8021c0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8021a82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021a86:	2b20      	cmp	r3, #32
 8021a88:	dc48      	bgt.n	8021b1c <UART_SetConfig+0x848>
 8021a8a:	2b00      	cmp	r3, #0
 8021a8c:	db7b      	blt.n	8021b86 <UART_SetConfig+0x8b2>
 8021a8e:	2b20      	cmp	r3, #32
 8021a90:	d879      	bhi.n	8021b86 <UART_SetConfig+0x8b2>
 8021a92:	a201      	add	r2, pc, #4	@ (adr r2, 8021a98 <UART_SetConfig+0x7c4>)
 8021a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021a98:	08021b23 	.word	0x08021b23
 8021a9c:	08021b2b 	.word	0x08021b2b
 8021aa0:	08021b87 	.word	0x08021b87
 8021aa4:	08021b87 	.word	0x08021b87
 8021aa8:	08021b33 	.word	0x08021b33
 8021aac:	08021b87 	.word	0x08021b87
 8021ab0:	08021b87 	.word	0x08021b87
 8021ab4:	08021b87 	.word	0x08021b87
 8021ab8:	08021b43 	.word	0x08021b43
 8021abc:	08021b87 	.word	0x08021b87
 8021ac0:	08021b87 	.word	0x08021b87
 8021ac4:	08021b87 	.word	0x08021b87
 8021ac8:	08021b87 	.word	0x08021b87
 8021acc:	08021b87 	.word	0x08021b87
 8021ad0:	08021b87 	.word	0x08021b87
 8021ad4:	08021b87 	.word	0x08021b87
 8021ad8:	08021b53 	.word	0x08021b53
 8021adc:	08021b87 	.word	0x08021b87
 8021ae0:	08021b87 	.word	0x08021b87
 8021ae4:	08021b87 	.word	0x08021b87
 8021ae8:	08021b87 	.word	0x08021b87
 8021aec:	08021b87 	.word	0x08021b87
 8021af0:	08021b87 	.word	0x08021b87
 8021af4:	08021b87 	.word	0x08021b87
 8021af8:	08021b87 	.word	0x08021b87
 8021afc:	08021b87 	.word	0x08021b87
 8021b00:	08021b87 	.word	0x08021b87
 8021b04:	08021b87 	.word	0x08021b87
 8021b08:	08021b87 	.word	0x08021b87
 8021b0c:	08021b87 	.word	0x08021b87
 8021b10:	08021b87 	.word	0x08021b87
 8021b14:	08021b87 	.word	0x08021b87
 8021b18:	08021b79 	.word	0x08021b79
 8021b1c:	2b40      	cmp	r3, #64	@ 0x40
 8021b1e:	d02e      	beq.n	8021b7e <UART_SetConfig+0x8aa>
 8021b20:	e031      	b.n	8021b86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021b22:	f7fc f951 	bl	801ddc8 <HAL_RCC_GetPCLK1Freq>
 8021b26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021b28:	e033      	b.n	8021b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021b2a:	f7fc f963 	bl	801ddf4 <HAL_RCC_GetPCLK2Freq>
 8021b2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021b30:	e02f      	b.n	8021b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021b36:	4618      	mov	r0, r3
 8021b38:	f7fd fb92 	bl	801f260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021b40:	e027      	b.n	8021b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021b42:	f107 0318 	add.w	r3, r7, #24
 8021b46:	4618      	mov	r0, r3
 8021b48:	f7fd fcde 	bl	801f508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021b4c:	69fb      	ldr	r3, [r7, #28]
 8021b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021b50:	e01f      	b.n	8021b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021b52:	4b2d      	ldr	r3, [pc, #180]	@ (8021c08 <UART_SetConfig+0x934>)
 8021b54:	681b      	ldr	r3, [r3, #0]
 8021b56:	f003 0320 	and.w	r3, r3, #32
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	d009      	beq.n	8021b72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8021c08 <UART_SetConfig+0x934>)
 8021b60:	681b      	ldr	r3, [r3, #0]
 8021b62:	08db      	lsrs	r3, r3, #3
 8021b64:	f003 0303 	and.w	r3, r3, #3
 8021b68:	4a24      	ldr	r2, [pc, #144]	@ (8021bfc <UART_SetConfig+0x928>)
 8021b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8021b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021b70:	e00f      	b.n	8021b92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8021b72:	4b22      	ldr	r3, [pc, #136]	@ (8021bfc <UART_SetConfig+0x928>)
 8021b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021b76:	e00c      	b.n	8021b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021b78:	4b21      	ldr	r3, [pc, #132]	@ (8021c00 <UART_SetConfig+0x92c>)
 8021b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021b7c:	e009      	b.n	8021b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021b84:	e005      	b.n	8021b92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8021b86:	2300      	movs	r3, #0
 8021b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021b8a:	2301      	movs	r3, #1
 8021b8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021b90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8021b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b94:	2b00      	cmp	r3, #0
 8021b96:	f000 80e7 	beq.w	8021d68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021b9a:	697b      	ldr	r3, [r7, #20]
 8021b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021b9e:	4a19      	ldr	r2, [pc, #100]	@ (8021c04 <UART_SetConfig+0x930>)
 8021ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021ba4:	461a      	mov	r2, r3
 8021ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8021bac:	005a      	lsls	r2, r3, #1
 8021bae:	697b      	ldr	r3, [r7, #20]
 8021bb0:	685b      	ldr	r3, [r3, #4]
 8021bb2:	085b      	lsrs	r3, r3, #1
 8021bb4:	441a      	add	r2, r3
 8021bb6:	697b      	ldr	r3, [r7, #20]
 8021bb8:	685b      	ldr	r3, [r3, #4]
 8021bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8021bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bc2:	2b0f      	cmp	r3, #15
 8021bc4:	d916      	bls.n	8021bf4 <UART_SetConfig+0x920>
 8021bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021bcc:	d212      	bcs.n	8021bf4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8021bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bd0:	b29b      	uxth	r3, r3
 8021bd2:	f023 030f 	bic.w	r3, r3, #15
 8021bd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8021bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bda:	085b      	lsrs	r3, r3, #1
 8021bdc:	b29b      	uxth	r3, r3
 8021bde:	f003 0307 	and.w	r3, r3, #7
 8021be2:	b29a      	uxth	r2, r3
 8021be4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8021be6:	4313      	orrs	r3, r2
 8021be8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8021bea:	697b      	ldr	r3, [r7, #20]
 8021bec:	681b      	ldr	r3, [r3, #0]
 8021bee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8021bf0:	60da      	str	r2, [r3, #12]
 8021bf2:	e0b9      	b.n	8021d68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021bf4:	2301      	movs	r3, #1
 8021bf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021bfa:	e0b5      	b.n	8021d68 <UART_SetConfig+0xa94>
 8021bfc:	03d09000 	.word	0x03d09000
 8021c00:	003d0900 	.word	0x003d0900
 8021c04:	08027e50 	.word	0x08027e50
 8021c08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8021c0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021c10:	2b20      	cmp	r3, #32
 8021c12:	dc49      	bgt.n	8021ca8 <UART_SetConfig+0x9d4>
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	db7c      	blt.n	8021d12 <UART_SetConfig+0xa3e>
 8021c18:	2b20      	cmp	r3, #32
 8021c1a:	d87a      	bhi.n	8021d12 <UART_SetConfig+0xa3e>
 8021c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8021c24 <UART_SetConfig+0x950>)
 8021c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c22:	bf00      	nop
 8021c24:	08021caf 	.word	0x08021caf
 8021c28:	08021cb7 	.word	0x08021cb7
 8021c2c:	08021d13 	.word	0x08021d13
 8021c30:	08021d13 	.word	0x08021d13
 8021c34:	08021cbf 	.word	0x08021cbf
 8021c38:	08021d13 	.word	0x08021d13
 8021c3c:	08021d13 	.word	0x08021d13
 8021c40:	08021d13 	.word	0x08021d13
 8021c44:	08021ccf 	.word	0x08021ccf
 8021c48:	08021d13 	.word	0x08021d13
 8021c4c:	08021d13 	.word	0x08021d13
 8021c50:	08021d13 	.word	0x08021d13
 8021c54:	08021d13 	.word	0x08021d13
 8021c58:	08021d13 	.word	0x08021d13
 8021c5c:	08021d13 	.word	0x08021d13
 8021c60:	08021d13 	.word	0x08021d13
 8021c64:	08021cdf 	.word	0x08021cdf
 8021c68:	08021d13 	.word	0x08021d13
 8021c6c:	08021d13 	.word	0x08021d13
 8021c70:	08021d13 	.word	0x08021d13
 8021c74:	08021d13 	.word	0x08021d13
 8021c78:	08021d13 	.word	0x08021d13
 8021c7c:	08021d13 	.word	0x08021d13
 8021c80:	08021d13 	.word	0x08021d13
 8021c84:	08021d13 	.word	0x08021d13
 8021c88:	08021d13 	.word	0x08021d13
 8021c8c:	08021d13 	.word	0x08021d13
 8021c90:	08021d13 	.word	0x08021d13
 8021c94:	08021d13 	.word	0x08021d13
 8021c98:	08021d13 	.word	0x08021d13
 8021c9c:	08021d13 	.word	0x08021d13
 8021ca0:	08021d13 	.word	0x08021d13
 8021ca4:	08021d05 	.word	0x08021d05
 8021ca8:	2b40      	cmp	r3, #64	@ 0x40
 8021caa:	d02e      	beq.n	8021d0a <UART_SetConfig+0xa36>
 8021cac:	e031      	b.n	8021d12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021cae:	f7fc f88b 	bl	801ddc8 <HAL_RCC_GetPCLK1Freq>
 8021cb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021cb4:	e033      	b.n	8021d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021cb6:	f7fc f89d 	bl	801ddf4 <HAL_RCC_GetPCLK2Freq>
 8021cba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021cbc:	e02f      	b.n	8021d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021cc2:	4618      	mov	r0, r3
 8021cc4:	f7fd facc 	bl	801f260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021ccc:	e027      	b.n	8021d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021cce:	f107 0318 	add.w	r3, r7, #24
 8021cd2:	4618      	mov	r0, r3
 8021cd4:	f7fd fc18 	bl	801f508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021cd8:	69fb      	ldr	r3, [r7, #28]
 8021cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021cdc:	e01f      	b.n	8021d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021cde:	4b2d      	ldr	r3, [pc, #180]	@ (8021d94 <UART_SetConfig+0xac0>)
 8021ce0:	681b      	ldr	r3, [r3, #0]
 8021ce2:	f003 0320 	and.w	r3, r3, #32
 8021ce6:	2b00      	cmp	r3, #0
 8021ce8:	d009      	beq.n	8021cfe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021cea:	4b2a      	ldr	r3, [pc, #168]	@ (8021d94 <UART_SetConfig+0xac0>)
 8021cec:	681b      	ldr	r3, [r3, #0]
 8021cee:	08db      	lsrs	r3, r3, #3
 8021cf0:	f003 0303 	and.w	r3, r3, #3
 8021cf4:	4a28      	ldr	r2, [pc, #160]	@ (8021d98 <UART_SetConfig+0xac4>)
 8021cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8021cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021cfc:	e00f      	b.n	8021d1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8021cfe:	4b26      	ldr	r3, [pc, #152]	@ (8021d98 <UART_SetConfig+0xac4>)
 8021d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021d02:	e00c      	b.n	8021d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021d04:	4b25      	ldr	r3, [pc, #148]	@ (8021d9c <UART_SetConfig+0xac8>)
 8021d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021d08:	e009      	b.n	8021d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021d10:	e005      	b.n	8021d1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8021d12:	2300      	movs	r3, #0
 8021d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021d16:	2301      	movs	r3, #1
 8021d18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021d1c:	bf00      	nop
    }

    if (pclk != 0U)
 8021d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021d20:	2b00      	cmp	r3, #0
 8021d22:	d021      	beq.n	8021d68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021d24:	697b      	ldr	r3, [r7, #20]
 8021d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021d28:	4a1d      	ldr	r2, [pc, #116]	@ (8021da0 <UART_SetConfig+0xacc>)
 8021d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021d2e:	461a      	mov	r2, r3
 8021d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021d32:	fbb3 f2f2 	udiv	r2, r3, r2
 8021d36:	697b      	ldr	r3, [r7, #20]
 8021d38:	685b      	ldr	r3, [r3, #4]
 8021d3a:	085b      	lsrs	r3, r3, #1
 8021d3c:	441a      	add	r2, r3
 8021d3e:	697b      	ldr	r3, [r7, #20]
 8021d40:	685b      	ldr	r3, [r3, #4]
 8021d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8021d46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021d4a:	2b0f      	cmp	r3, #15
 8021d4c:	d909      	bls.n	8021d62 <UART_SetConfig+0xa8e>
 8021d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021d54:	d205      	bcs.n	8021d62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8021d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021d58:	b29a      	uxth	r2, r3
 8021d5a:	697b      	ldr	r3, [r7, #20]
 8021d5c:	681b      	ldr	r3, [r3, #0]
 8021d5e:	60da      	str	r2, [r3, #12]
 8021d60:	e002      	b.n	8021d68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021d62:	2301      	movs	r3, #1
 8021d64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8021d68:	697b      	ldr	r3, [r7, #20]
 8021d6a:	2201      	movs	r2, #1
 8021d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8021d70:	697b      	ldr	r3, [r7, #20]
 8021d72:	2201      	movs	r2, #1
 8021d74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8021d78:	697b      	ldr	r3, [r7, #20]
 8021d7a:	2200      	movs	r2, #0
 8021d7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8021d7e:	697b      	ldr	r3, [r7, #20]
 8021d80:	2200      	movs	r2, #0
 8021d82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8021d84:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8021d88:	4618      	mov	r0, r3
 8021d8a:	3748      	adds	r7, #72	@ 0x48
 8021d8c:	46bd      	mov	sp, r7
 8021d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021d92:	bf00      	nop
 8021d94:	58024400 	.word	0x58024400
 8021d98:	03d09000 	.word	0x03d09000
 8021d9c:	003d0900 	.word	0x003d0900
 8021da0:	08027e50 	.word	0x08027e50

08021da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8021da4:	b480      	push	{r7}
 8021da6:	b083      	sub	sp, #12
 8021da8:	af00      	add	r7, sp, #0
 8021daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021dac:	687b      	ldr	r3, [r7, #4]
 8021dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021db0:	f003 0308 	and.w	r3, r3, #8
 8021db4:	2b00      	cmp	r3, #0
 8021db6:	d00a      	beq.n	8021dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8021db8:	687b      	ldr	r3, [r7, #4]
 8021dba:	681b      	ldr	r3, [r3, #0]
 8021dbc:	685b      	ldr	r3, [r3, #4]
 8021dbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8021dc2:	687b      	ldr	r3, [r7, #4]
 8021dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021dc6:	687b      	ldr	r3, [r7, #4]
 8021dc8:	681b      	ldr	r3, [r3, #0]
 8021dca:	430a      	orrs	r2, r1
 8021dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021dce:	687b      	ldr	r3, [r7, #4]
 8021dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021dd2:	f003 0301 	and.w	r3, r3, #1
 8021dd6:	2b00      	cmp	r3, #0
 8021dd8:	d00a      	beq.n	8021df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8021dda:	687b      	ldr	r3, [r7, #4]
 8021ddc:	681b      	ldr	r3, [r3, #0]
 8021dde:	685b      	ldr	r3, [r3, #4]
 8021de0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8021de4:	687b      	ldr	r3, [r7, #4]
 8021de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021de8:	687b      	ldr	r3, [r7, #4]
 8021dea:	681b      	ldr	r3, [r3, #0]
 8021dec:	430a      	orrs	r2, r1
 8021dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8021df0:	687b      	ldr	r3, [r7, #4]
 8021df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021df4:	f003 0302 	and.w	r3, r3, #2
 8021df8:	2b00      	cmp	r3, #0
 8021dfa:	d00a      	beq.n	8021e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8021dfc:	687b      	ldr	r3, [r7, #4]
 8021dfe:	681b      	ldr	r3, [r3, #0]
 8021e00:	685b      	ldr	r3, [r3, #4]
 8021e02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8021e0a:	687b      	ldr	r3, [r7, #4]
 8021e0c:	681b      	ldr	r3, [r3, #0]
 8021e0e:	430a      	orrs	r2, r1
 8021e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8021e12:	687b      	ldr	r3, [r7, #4]
 8021e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021e16:	f003 0304 	and.w	r3, r3, #4
 8021e1a:	2b00      	cmp	r3, #0
 8021e1c:	d00a      	beq.n	8021e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8021e1e:	687b      	ldr	r3, [r7, #4]
 8021e20:	681b      	ldr	r3, [r3, #0]
 8021e22:	685b      	ldr	r3, [r3, #4]
 8021e24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	681b      	ldr	r3, [r3, #0]
 8021e30:	430a      	orrs	r2, r1
 8021e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8021e34:	687b      	ldr	r3, [r7, #4]
 8021e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021e38:	f003 0310 	and.w	r3, r3, #16
 8021e3c:	2b00      	cmp	r3, #0
 8021e3e:	d00a      	beq.n	8021e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	681b      	ldr	r3, [r3, #0]
 8021e44:	689b      	ldr	r3, [r3, #8]
 8021e46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8021e4a:	687b      	ldr	r3, [r7, #4]
 8021e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8021e4e:	687b      	ldr	r3, [r7, #4]
 8021e50:	681b      	ldr	r3, [r3, #0]
 8021e52:	430a      	orrs	r2, r1
 8021e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021e5a:	f003 0320 	and.w	r3, r3, #32
 8021e5e:	2b00      	cmp	r3, #0
 8021e60:	d00a      	beq.n	8021e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8021e62:	687b      	ldr	r3, [r7, #4]
 8021e64:	681b      	ldr	r3, [r3, #0]
 8021e66:	689b      	ldr	r3, [r3, #8]
 8021e68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8021e6c:	687b      	ldr	r3, [r7, #4]
 8021e6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021e70:	687b      	ldr	r3, [r7, #4]
 8021e72:	681b      	ldr	r3, [r3, #0]
 8021e74:	430a      	orrs	r2, r1
 8021e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8021e78:	687b      	ldr	r3, [r7, #4]
 8021e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	d01a      	beq.n	8021eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8021e84:	687b      	ldr	r3, [r7, #4]
 8021e86:	681b      	ldr	r3, [r3, #0]
 8021e88:	685b      	ldr	r3, [r3, #4]
 8021e8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8021e8e:	687b      	ldr	r3, [r7, #4]
 8021e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	681b      	ldr	r3, [r3, #0]
 8021e96:	430a      	orrs	r2, r1
 8021e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021ea2:	d10a      	bne.n	8021eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8021ea4:	687b      	ldr	r3, [r7, #4]
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	685b      	ldr	r3, [r3, #4]
 8021eaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8021eae:	687b      	ldr	r3, [r7, #4]
 8021eb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8021eb2:	687b      	ldr	r3, [r7, #4]
 8021eb4:	681b      	ldr	r3, [r3, #0]
 8021eb6:	430a      	orrs	r2, r1
 8021eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8021eba:	687b      	ldr	r3, [r7, #4]
 8021ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d00a      	beq.n	8021edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8021ec6:	687b      	ldr	r3, [r7, #4]
 8021ec8:	681b      	ldr	r3, [r3, #0]
 8021eca:	685b      	ldr	r3, [r3, #4]
 8021ecc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8021ed0:	687b      	ldr	r3, [r7, #4]
 8021ed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8021ed4:	687b      	ldr	r3, [r7, #4]
 8021ed6:	681b      	ldr	r3, [r3, #0]
 8021ed8:	430a      	orrs	r2, r1
 8021eda:	605a      	str	r2, [r3, #4]
  }
}
 8021edc:	bf00      	nop
 8021ede:	370c      	adds	r7, #12
 8021ee0:	46bd      	mov	sp, r7
 8021ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ee6:	4770      	bx	lr

08021ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8021ee8:	b580      	push	{r7, lr}
 8021eea:	b098      	sub	sp, #96	@ 0x60
 8021eec:	af02      	add	r7, sp, #8
 8021eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	2200      	movs	r2, #0
 8021ef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8021ef8:	f7f8 fb94 	bl	801a624 <HAL_GetTick>
 8021efc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8021efe:	687b      	ldr	r3, [r7, #4]
 8021f00:	681b      	ldr	r3, [r3, #0]
 8021f02:	681b      	ldr	r3, [r3, #0]
 8021f04:	f003 0308 	and.w	r3, r3, #8
 8021f08:	2b08      	cmp	r3, #8
 8021f0a:	d12f      	bne.n	8021f6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021f0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8021f10:	9300      	str	r3, [sp, #0]
 8021f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021f14:	2200      	movs	r2, #0
 8021f16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8021f1a:	6878      	ldr	r0, [r7, #4]
 8021f1c:	f000 f88e 	bl	802203c <UART_WaitOnFlagUntilTimeout>
 8021f20:	4603      	mov	r3, r0
 8021f22:	2b00      	cmp	r3, #0
 8021f24:	d022      	beq.n	8021f6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	681b      	ldr	r3, [r3, #0]
 8021f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021f2e:	e853 3f00 	ldrex	r3, [r3]
 8021f32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8021f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8021f3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8021f3c:	687b      	ldr	r3, [r7, #4]
 8021f3e:	681b      	ldr	r3, [r3, #0]
 8021f40:	461a      	mov	r2, r3
 8021f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8021f46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021f48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8021f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8021f4c:	e841 2300 	strex	r3, r2, [r1]
 8021f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8021f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	d1e6      	bne.n	8021f26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8021f58:	687b      	ldr	r3, [r7, #4]
 8021f5a:	2220      	movs	r2, #32
 8021f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8021f60:	687b      	ldr	r3, [r7, #4]
 8021f62:	2200      	movs	r2, #0
 8021f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8021f68:	2303      	movs	r3, #3
 8021f6a:	e063      	b.n	8022034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8021f6c:	687b      	ldr	r3, [r7, #4]
 8021f6e:	681b      	ldr	r3, [r3, #0]
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	f003 0304 	and.w	r3, r3, #4
 8021f76:	2b04      	cmp	r3, #4
 8021f78:	d149      	bne.n	802200e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021f7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8021f7e:	9300      	str	r3, [sp, #0]
 8021f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021f82:	2200      	movs	r2, #0
 8021f84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8021f88:	6878      	ldr	r0, [r7, #4]
 8021f8a:	f000 f857 	bl	802203c <UART_WaitOnFlagUntilTimeout>
 8021f8e:	4603      	mov	r3, r0
 8021f90:	2b00      	cmp	r3, #0
 8021f92:	d03c      	beq.n	802200e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	681b      	ldr	r3, [r3, #0]
 8021f98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f9c:	e853 3f00 	ldrex	r3, [r3]
 8021fa0:	623b      	str	r3, [r7, #32]
   return(result);
 8021fa2:	6a3b      	ldr	r3, [r7, #32]
 8021fa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8021fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	681b      	ldr	r3, [r3, #0]
 8021fae:	461a      	mov	r2, r3
 8021fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021fb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8021fb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021fb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021fba:	e841 2300 	strex	r3, r2, [r1]
 8021fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8021fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	d1e6      	bne.n	8021f94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021fc6:	687b      	ldr	r3, [r7, #4]
 8021fc8:	681b      	ldr	r3, [r3, #0]
 8021fca:	3308      	adds	r3, #8
 8021fcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021fce:	693b      	ldr	r3, [r7, #16]
 8021fd0:	e853 3f00 	ldrex	r3, [r3]
 8021fd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8021fd6:	68fb      	ldr	r3, [r7, #12]
 8021fd8:	f023 0301 	bic.w	r3, r3, #1
 8021fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021fde:	687b      	ldr	r3, [r7, #4]
 8021fe0:	681b      	ldr	r3, [r3, #0]
 8021fe2:	3308      	adds	r3, #8
 8021fe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021fe6:	61fa      	str	r2, [r7, #28]
 8021fe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021fea:	69b9      	ldr	r1, [r7, #24]
 8021fec:	69fa      	ldr	r2, [r7, #28]
 8021fee:	e841 2300 	strex	r3, r2, [r1]
 8021ff2:	617b      	str	r3, [r7, #20]
   return(result);
 8021ff4:	697b      	ldr	r3, [r7, #20]
 8021ff6:	2b00      	cmp	r3, #0
 8021ff8:	d1e5      	bne.n	8021fc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	2220      	movs	r2, #32
 8021ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8022002:	687b      	ldr	r3, [r7, #4]
 8022004:	2200      	movs	r2, #0
 8022006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802200a:	2303      	movs	r3, #3
 802200c:	e012      	b.n	8022034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802200e:	687b      	ldr	r3, [r7, #4]
 8022010:	2220      	movs	r2, #32
 8022012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	2220      	movs	r2, #32
 802201a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802201e:	687b      	ldr	r3, [r7, #4]
 8022020:	2200      	movs	r2, #0
 8022022:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	2200      	movs	r2, #0
 8022028:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 802202a:	687b      	ldr	r3, [r7, #4]
 802202c:	2200      	movs	r2, #0
 802202e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022032:	2300      	movs	r3, #0
}
 8022034:	4618      	mov	r0, r3
 8022036:	3758      	adds	r7, #88	@ 0x58
 8022038:	46bd      	mov	sp, r7
 802203a:	bd80      	pop	{r7, pc}

0802203c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802203c:	b580      	push	{r7, lr}
 802203e:	b084      	sub	sp, #16
 8022040:	af00      	add	r7, sp, #0
 8022042:	60f8      	str	r0, [r7, #12]
 8022044:	60b9      	str	r1, [r7, #8]
 8022046:	603b      	str	r3, [r7, #0]
 8022048:	4613      	mov	r3, r2
 802204a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802204c:	e04f      	b.n	80220ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802204e:	69bb      	ldr	r3, [r7, #24]
 8022050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022054:	d04b      	beq.n	80220ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8022056:	f7f8 fae5 	bl	801a624 <HAL_GetTick>
 802205a:	4602      	mov	r2, r0
 802205c:	683b      	ldr	r3, [r7, #0]
 802205e:	1ad3      	subs	r3, r2, r3
 8022060:	69ba      	ldr	r2, [r7, #24]
 8022062:	429a      	cmp	r2, r3
 8022064:	d302      	bcc.n	802206c <UART_WaitOnFlagUntilTimeout+0x30>
 8022066:	69bb      	ldr	r3, [r7, #24]
 8022068:	2b00      	cmp	r3, #0
 802206a:	d101      	bne.n	8022070 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 802206c:	2303      	movs	r3, #3
 802206e:	e04e      	b.n	802210e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8022070:	68fb      	ldr	r3, [r7, #12]
 8022072:	681b      	ldr	r3, [r3, #0]
 8022074:	681b      	ldr	r3, [r3, #0]
 8022076:	f003 0304 	and.w	r3, r3, #4
 802207a:	2b00      	cmp	r3, #0
 802207c:	d037      	beq.n	80220ee <UART_WaitOnFlagUntilTimeout+0xb2>
 802207e:	68bb      	ldr	r3, [r7, #8]
 8022080:	2b80      	cmp	r3, #128	@ 0x80
 8022082:	d034      	beq.n	80220ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8022084:	68bb      	ldr	r3, [r7, #8]
 8022086:	2b40      	cmp	r3, #64	@ 0x40
 8022088:	d031      	beq.n	80220ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802208a:	68fb      	ldr	r3, [r7, #12]
 802208c:	681b      	ldr	r3, [r3, #0]
 802208e:	69db      	ldr	r3, [r3, #28]
 8022090:	f003 0308 	and.w	r3, r3, #8
 8022094:	2b08      	cmp	r3, #8
 8022096:	d110      	bne.n	80220ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8022098:	68fb      	ldr	r3, [r7, #12]
 802209a:	681b      	ldr	r3, [r3, #0]
 802209c:	2208      	movs	r2, #8
 802209e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80220a0:	68f8      	ldr	r0, [r7, #12]
 80220a2:	f000 f839 	bl	8022118 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80220a6:	68fb      	ldr	r3, [r7, #12]
 80220a8:	2208      	movs	r2, #8
 80220aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80220ae:	68fb      	ldr	r3, [r7, #12]
 80220b0:	2200      	movs	r2, #0
 80220b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80220b6:	2301      	movs	r3, #1
 80220b8:	e029      	b.n	802210e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80220ba:	68fb      	ldr	r3, [r7, #12]
 80220bc:	681b      	ldr	r3, [r3, #0]
 80220be:	69db      	ldr	r3, [r3, #28]
 80220c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80220c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80220c8:	d111      	bne.n	80220ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80220ca:	68fb      	ldr	r3, [r7, #12]
 80220cc:	681b      	ldr	r3, [r3, #0]
 80220ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80220d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80220d4:	68f8      	ldr	r0, [r7, #12]
 80220d6:	f000 f81f 	bl	8022118 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80220da:	68fb      	ldr	r3, [r7, #12]
 80220dc:	2220      	movs	r2, #32
 80220de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80220e2:	68fb      	ldr	r3, [r7, #12]
 80220e4:	2200      	movs	r2, #0
 80220e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80220ea:	2303      	movs	r3, #3
 80220ec:	e00f      	b.n	802210e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80220ee:	68fb      	ldr	r3, [r7, #12]
 80220f0:	681b      	ldr	r3, [r3, #0]
 80220f2:	69da      	ldr	r2, [r3, #28]
 80220f4:	68bb      	ldr	r3, [r7, #8]
 80220f6:	4013      	ands	r3, r2
 80220f8:	68ba      	ldr	r2, [r7, #8]
 80220fa:	429a      	cmp	r2, r3
 80220fc:	bf0c      	ite	eq
 80220fe:	2301      	moveq	r3, #1
 8022100:	2300      	movne	r3, #0
 8022102:	b2db      	uxtb	r3, r3
 8022104:	461a      	mov	r2, r3
 8022106:	79fb      	ldrb	r3, [r7, #7]
 8022108:	429a      	cmp	r2, r3
 802210a:	d0a0      	beq.n	802204e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802210c:	2300      	movs	r3, #0
}
 802210e:	4618      	mov	r0, r3
 8022110:	3710      	adds	r7, #16
 8022112:	46bd      	mov	sp, r7
 8022114:	bd80      	pop	{r7, pc}
	...

08022118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8022118:	b480      	push	{r7}
 802211a:	b095      	sub	sp, #84	@ 0x54
 802211c:	af00      	add	r7, sp, #0
 802211e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8022120:	687b      	ldr	r3, [r7, #4]
 8022122:	681b      	ldr	r3, [r3, #0]
 8022124:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022128:	e853 3f00 	ldrex	r3, [r3]
 802212c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802212e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022130:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8022134:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	681b      	ldr	r3, [r3, #0]
 802213a:	461a      	mov	r2, r3
 802213c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802213e:	643b      	str	r3, [r7, #64]	@ 0x40
 8022140:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022142:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022144:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8022146:	e841 2300 	strex	r3, r2, [r1]
 802214a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802214c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802214e:	2b00      	cmp	r3, #0
 8022150:	d1e6      	bne.n	8022120 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	681b      	ldr	r3, [r3, #0]
 8022156:	3308      	adds	r3, #8
 8022158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802215a:	6a3b      	ldr	r3, [r7, #32]
 802215c:	e853 3f00 	ldrex	r3, [r3]
 8022160:	61fb      	str	r3, [r7, #28]
   return(result);
 8022162:	69fa      	ldr	r2, [r7, #28]
 8022164:	4b1e      	ldr	r3, [pc, #120]	@ (80221e0 <UART_EndRxTransfer+0xc8>)
 8022166:	4013      	ands	r3, r2
 8022168:	64bb      	str	r3, [r7, #72]	@ 0x48
 802216a:	687b      	ldr	r3, [r7, #4]
 802216c:	681b      	ldr	r3, [r3, #0]
 802216e:	3308      	adds	r3, #8
 8022170:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8022174:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802217a:	e841 2300 	strex	r3, r2, [r1]
 802217e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8022180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022182:	2b00      	cmp	r3, #0
 8022184:	d1e5      	bne.n	8022152 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022186:	687b      	ldr	r3, [r7, #4]
 8022188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802218a:	2b01      	cmp	r3, #1
 802218c:	d118      	bne.n	80221c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	681b      	ldr	r3, [r3, #0]
 8022192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022194:	68fb      	ldr	r3, [r7, #12]
 8022196:	e853 3f00 	ldrex	r3, [r3]
 802219a:	60bb      	str	r3, [r7, #8]
   return(result);
 802219c:	68bb      	ldr	r3, [r7, #8]
 802219e:	f023 0310 	bic.w	r3, r3, #16
 80221a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	681b      	ldr	r3, [r3, #0]
 80221a8:	461a      	mov	r2, r3
 80221aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80221ac:	61bb      	str	r3, [r7, #24]
 80221ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80221b0:	6979      	ldr	r1, [r7, #20]
 80221b2:	69ba      	ldr	r2, [r7, #24]
 80221b4:	e841 2300 	strex	r3, r2, [r1]
 80221b8:	613b      	str	r3, [r7, #16]
   return(result);
 80221ba:	693b      	ldr	r3, [r7, #16]
 80221bc:	2b00      	cmp	r3, #0
 80221be:	d1e6      	bne.n	802218e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80221c0:	687b      	ldr	r3, [r7, #4]
 80221c2:	2220      	movs	r2, #32
 80221c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80221c8:	687b      	ldr	r3, [r7, #4]
 80221ca:	2200      	movs	r2, #0
 80221cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80221ce:	687b      	ldr	r3, [r7, #4]
 80221d0:	2200      	movs	r2, #0
 80221d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80221d4:	bf00      	nop
 80221d6:	3754      	adds	r7, #84	@ 0x54
 80221d8:	46bd      	mov	sp, r7
 80221da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221de:	4770      	bx	lr
 80221e0:	effffffe 	.word	0xeffffffe

080221e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80221e4:	b480      	push	{r7}
 80221e6:	b085      	sub	sp, #20
 80221e8:	af00      	add	r7, sp, #0
 80221ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80221f2:	2b01      	cmp	r3, #1
 80221f4:	d101      	bne.n	80221fa <HAL_UARTEx_DisableFifoMode+0x16>
 80221f6:	2302      	movs	r3, #2
 80221f8:	e027      	b.n	802224a <HAL_UARTEx_DisableFifoMode+0x66>
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	2201      	movs	r2, #1
 80221fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022202:	687b      	ldr	r3, [r7, #4]
 8022204:	2224      	movs	r2, #36	@ 0x24
 8022206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802220a:	687b      	ldr	r3, [r7, #4]
 802220c:	681b      	ldr	r3, [r3, #0]
 802220e:	681b      	ldr	r3, [r3, #0]
 8022210:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022212:	687b      	ldr	r3, [r7, #4]
 8022214:	681b      	ldr	r3, [r3, #0]
 8022216:	681a      	ldr	r2, [r3, #0]
 8022218:	687b      	ldr	r3, [r7, #4]
 802221a:	681b      	ldr	r3, [r3, #0]
 802221c:	f022 0201 	bic.w	r2, r2, #1
 8022220:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8022222:	68fb      	ldr	r3, [r7, #12]
 8022224:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8022228:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802222a:	687b      	ldr	r3, [r7, #4]
 802222c:	2200      	movs	r2, #0
 802222e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022230:	687b      	ldr	r3, [r7, #4]
 8022232:	681b      	ldr	r3, [r3, #0]
 8022234:	68fa      	ldr	r2, [r7, #12]
 8022236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	2220      	movs	r2, #32
 802223c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022240:	687b      	ldr	r3, [r7, #4]
 8022242:	2200      	movs	r2, #0
 8022244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022248:	2300      	movs	r3, #0
}
 802224a:	4618      	mov	r0, r3
 802224c:	3714      	adds	r7, #20
 802224e:	46bd      	mov	sp, r7
 8022250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022254:	4770      	bx	lr

08022256 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8022256:	b580      	push	{r7, lr}
 8022258:	b084      	sub	sp, #16
 802225a:	af00      	add	r7, sp, #0
 802225c:	6078      	str	r0, [r7, #4]
 802225e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022260:	687b      	ldr	r3, [r7, #4]
 8022262:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8022266:	2b01      	cmp	r3, #1
 8022268:	d101      	bne.n	802226e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802226a:	2302      	movs	r3, #2
 802226c:	e02d      	b.n	80222ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	2201      	movs	r2, #1
 8022272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022276:	687b      	ldr	r3, [r7, #4]
 8022278:	2224      	movs	r2, #36	@ 0x24
 802227a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802227e:	687b      	ldr	r3, [r7, #4]
 8022280:	681b      	ldr	r3, [r3, #0]
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022286:	687b      	ldr	r3, [r7, #4]
 8022288:	681b      	ldr	r3, [r3, #0]
 802228a:	681a      	ldr	r2, [r3, #0]
 802228c:	687b      	ldr	r3, [r7, #4]
 802228e:	681b      	ldr	r3, [r3, #0]
 8022290:	f022 0201 	bic.w	r2, r2, #1
 8022294:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	689b      	ldr	r3, [r3, #8]
 802229c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	681b      	ldr	r3, [r3, #0]
 80222a4:	683a      	ldr	r2, [r7, #0]
 80222a6:	430a      	orrs	r2, r1
 80222a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80222aa:	6878      	ldr	r0, [r7, #4]
 80222ac:	f000 f850 	bl	8022350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80222b0:	687b      	ldr	r3, [r7, #4]
 80222b2:	681b      	ldr	r3, [r3, #0]
 80222b4:	68fa      	ldr	r2, [r7, #12]
 80222b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	2220      	movs	r2, #32
 80222bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80222c0:	687b      	ldr	r3, [r7, #4]
 80222c2:	2200      	movs	r2, #0
 80222c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80222c8:	2300      	movs	r3, #0
}
 80222ca:	4618      	mov	r0, r3
 80222cc:	3710      	adds	r7, #16
 80222ce:	46bd      	mov	sp, r7
 80222d0:	bd80      	pop	{r7, pc}

080222d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80222d2:	b580      	push	{r7, lr}
 80222d4:	b084      	sub	sp, #16
 80222d6:	af00      	add	r7, sp, #0
 80222d8:	6078      	str	r0, [r7, #4]
 80222da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80222e2:	2b01      	cmp	r3, #1
 80222e4:	d101      	bne.n	80222ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80222e6:	2302      	movs	r3, #2
 80222e8:	e02d      	b.n	8022346 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80222ea:	687b      	ldr	r3, [r7, #4]
 80222ec:	2201      	movs	r2, #1
 80222ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	2224      	movs	r2, #36	@ 0x24
 80222f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80222fa:	687b      	ldr	r3, [r7, #4]
 80222fc:	681b      	ldr	r3, [r3, #0]
 80222fe:	681b      	ldr	r3, [r3, #0]
 8022300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022302:	687b      	ldr	r3, [r7, #4]
 8022304:	681b      	ldr	r3, [r3, #0]
 8022306:	681a      	ldr	r2, [r3, #0]
 8022308:	687b      	ldr	r3, [r7, #4]
 802230a:	681b      	ldr	r3, [r3, #0]
 802230c:	f022 0201 	bic.w	r2, r2, #1
 8022310:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	681b      	ldr	r3, [r3, #0]
 8022316:	689b      	ldr	r3, [r3, #8]
 8022318:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 802231c:	687b      	ldr	r3, [r7, #4]
 802231e:	681b      	ldr	r3, [r3, #0]
 8022320:	683a      	ldr	r2, [r7, #0]
 8022322:	430a      	orrs	r2, r1
 8022324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022326:	6878      	ldr	r0, [r7, #4]
 8022328:	f000 f812 	bl	8022350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802232c:	687b      	ldr	r3, [r7, #4]
 802232e:	681b      	ldr	r3, [r3, #0]
 8022330:	68fa      	ldr	r2, [r7, #12]
 8022332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022334:	687b      	ldr	r3, [r7, #4]
 8022336:	2220      	movs	r2, #32
 8022338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802233c:	687b      	ldr	r3, [r7, #4]
 802233e:	2200      	movs	r2, #0
 8022340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022344:	2300      	movs	r3, #0
}
 8022346:	4618      	mov	r0, r3
 8022348:	3710      	adds	r7, #16
 802234a:	46bd      	mov	sp, r7
 802234c:	bd80      	pop	{r7, pc}
	...

08022350 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8022350:	b480      	push	{r7}
 8022352:	b085      	sub	sp, #20
 8022354:	af00      	add	r7, sp, #0
 8022356:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802235c:	2b00      	cmp	r3, #0
 802235e:	d108      	bne.n	8022372 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8022360:	687b      	ldr	r3, [r7, #4]
 8022362:	2201      	movs	r2, #1
 8022364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8022368:	687b      	ldr	r3, [r7, #4]
 802236a:	2201      	movs	r2, #1
 802236c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8022370:	e031      	b.n	80223d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8022372:	2310      	movs	r3, #16
 8022374:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8022376:	2310      	movs	r3, #16
 8022378:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802237a:	687b      	ldr	r3, [r7, #4]
 802237c:	681b      	ldr	r3, [r3, #0]
 802237e:	689b      	ldr	r3, [r3, #8]
 8022380:	0e5b      	lsrs	r3, r3, #25
 8022382:	b2db      	uxtb	r3, r3
 8022384:	f003 0307 	and.w	r3, r3, #7
 8022388:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	681b      	ldr	r3, [r3, #0]
 802238e:	689b      	ldr	r3, [r3, #8]
 8022390:	0f5b      	lsrs	r3, r3, #29
 8022392:	b2db      	uxtb	r3, r3
 8022394:	f003 0307 	and.w	r3, r3, #7
 8022398:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802239a:	7bbb      	ldrb	r3, [r7, #14]
 802239c:	7b3a      	ldrb	r2, [r7, #12]
 802239e:	4911      	ldr	r1, [pc, #68]	@ (80223e4 <UARTEx_SetNbDataToProcess+0x94>)
 80223a0:	5c8a      	ldrb	r2, [r1, r2]
 80223a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80223a6:	7b3a      	ldrb	r2, [r7, #12]
 80223a8:	490f      	ldr	r1, [pc, #60]	@ (80223e8 <UARTEx_SetNbDataToProcess+0x98>)
 80223aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80223ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80223b0:	b29a      	uxth	r2, r3
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80223b8:	7bfb      	ldrb	r3, [r7, #15]
 80223ba:	7b7a      	ldrb	r2, [r7, #13]
 80223bc:	4909      	ldr	r1, [pc, #36]	@ (80223e4 <UARTEx_SetNbDataToProcess+0x94>)
 80223be:	5c8a      	ldrb	r2, [r1, r2]
 80223c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80223c4:	7b7a      	ldrb	r2, [r7, #13]
 80223c6:	4908      	ldr	r1, [pc, #32]	@ (80223e8 <UARTEx_SetNbDataToProcess+0x98>)
 80223c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80223ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80223ce:	b29a      	uxth	r2, r3
 80223d0:	687b      	ldr	r3, [r7, #4]
 80223d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80223d6:	bf00      	nop
 80223d8:	3714      	adds	r7, #20
 80223da:	46bd      	mov	sp, r7
 80223dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223e0:	4770      	bx	lr
 80223e2:	bf00      	nop
 80223e4:	08027e68 	.word	0x08027e68
 80223e8:	08027e70 	.word	0x08027e70

080223ec <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 80223ec:	b580      	push	{r7, lr}
 80223ee:	b082      	sub	sp, #8
 80223f0:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 80223f2:	4b15      	ldr	r3, [pc, #84]	@ (8022448 <prvInitialiseLogging+0x5c>)
 80223f4:	681b      	ldr	r3, [r3, #0]
 80223f6:	2b00      	cmp	r3, #0
 80223f8:	d120      	bne.n	802243c <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80223fa:	f7e3 f8c1 	bl	8005580 <xTaskGetSchedulerState>
 80223fe:	4603      	mov	r3, r0
 8022400:	2b02      	cmp	r3, #2
 8022402:	d11b      	bne.n	802243c <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8022404:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 8022408:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 802240a:	6878      	ldr	r0, [r7, #4]
 802240c:	f7e4 fa1a 	bl	8006844 <pvPortMalloc>
 8022410:	4603      	mov	r3, r0
 8022412:	4a0e      	ldr	r2, [pc, #56]	@ (802244c <prvInitialiseLogging+0x60>)
 8022414:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 8022416:	4b0d      	ldr	r3, [pc, #52]	@ (802244c <prvInitialiseLogging+0x60>)
 8022418:	681b      	ldr	r3, [r3, #0]
 802241a:	2b00      	cmp	r3, #0
 802241c:	d00e      	beq.n	802243c <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 802241e:	4b0b      	ldr	r3, [pc, #44]	@ (802244c <prvInitialiseLogging+0x60>)
 8022420:	681b      	ldr	r3, [r3, #0]
 8022422:	687a      	ldr	r2, [r7, #4]
 8022424:	2100      	movs	r1, #0
 8022426:	4618      	mov	r0, r3
 8022428:	f000 fc35 	bl	8022c96 <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 802242c:	4b07      	ldr	r3, [pc, #28]	@ (802244c <prvInitialiseLogging+0x60>)
 802242e:	681b      	ldr	r3, [r3, #0]
 8022430:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 8022434:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 8022436:	4b04      	ldr	r3, [pc, #16]	@ (8022448 <prvInitialiseLogging+0x5c>)
 8022438:	2201      	movs	r2, #1
 802243a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 802243c:	4b02      	ldr	r3, [pc, #8]	@ (8022448 <prvInitialiseLogging+0x5c>)
 802243e:	681b      	ldr	r3, [r3, #0]
}
 8022440:	4618      	mov	r0, r3
 8022442:	3708      	adds	r7, #8
 8022444:	46bd      	mov	sp, r7
 8022446:	bd80      	pop	{r7, pc}
 8022448:	20002668 	.word	0x20002668
 802244c:	20002658 	.word	0x20002658

08022450 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 8022450:	b580      	push	{r7, lr}
 8022452:	b086      	sub	sp, #24
 8022454:	af02      	add	r7, sp, #8
 8022456:	6078      	str	r0, [r7, #4]
 8022458:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 802245a:	2300      	movs	r3, #0
 802245c:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 802245e:	4b24      	ldr	r3, [pc, #144]	@ (80224f0 <prvGetMessageFromStreamBuffer+0xa0>)
 8022460:	681b      	ldr	r3, [r3, #0]
 8022462:	2b00      	cmp	r3, #0
 8022464:	d03f      	beq.n	80224e6 <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 8022466:	4b22      	ldr	r3, [pc, #136]	@ (80224f0 <prvGetMessageFromStreamBuffer+0xa0>)
 8022468:	681b      	ldr	r3, [r3, #0]
 802246a:	4618      	mov	r0, r3
 802246c:	f7ee fe19 	bl	80110a2 <uxStreamBufferGetSize>
 8022470:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 8022472:	68fb      	ldr	r3, [r7, #12]
 8022474:	2b04      	cmp	r3, #4
 8022476:	d936      	bls.n	80224e6 <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 8022478:	f7e2 fa64 	bl	8004944 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 802247c:	4b1c      	ldr	r3, [pc, #112]	@ (80224f0 <prvGetMessageFromStreamBuffer+0xa0>)
 802247e:	6818      	ldr	r0, [r3, #0]
 8022480:	f107 0208 	add.w	r2, r7, #8
 8022484:	2300      	movs	r3, #0
 8022486:	9300      	str	r3, [sp, #0]
 8022488:	2304      	movs	r3, #4
 802248a:	2100      	movs	r1, #0
 802248c:	f7ee ff27 	bl	80112de <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 8022490:	68bb      	ldr	r3, [r7, #8]
 8022492:	683a      	ldr	r2, [r7, #0]
 8022494:	429a      	cmp	r2, r3
 8022496:	d216      	bcs.n	80224c6 <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 8022498:	4b15      	ldr	r3, [pc, #84]	@ (80224f0 <prvGetMessageFromStreamBuffer+0xa0>)
 802249a:	6818      	ldr	r0, [r3, #0]
 802249c:	68bb      	ldr	r3, [r7, #8]
 802249e:	2200      	movs	r2, #0
 80224a0:	9200      	str	r2, [sp, #0]
 80224a2:	4a14      	ldr	r2, [pc, #80]	@ (80224f4 <prvGetMessageFromStreamBuffer+0xa4>)
 80224a4:	2100      	movs	r1, #0
 80224a6:	f7ee ff1a 	bl	80112de <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 80224aa:	683a      	ldr	r2, [r7, #0]
 80224ac:	4911      	ldr	r1, [pc, #68]	@ (80224f4 <prvGetMessageFromStreamBuffer+0xa4>)
 80224ae:	6878      	ldr	r0, [r7, #4]
 80224b0:	f000 fae4 	bl	8022a7c <memcpy>
					xMessageLength = xBufferLength;
 80224b4:	683b      	ldr	r3, [r7, #0]
 80224b6:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 80224b8:	683b      	ldr	r3, [r7, #0]
 80224ba:	3b01      	subs	r3, #1
 80224bc:	687a      	ldr	r2, [r7, #4]
 80224be:	4413      	add	r3, r2
 80224c0:	2200      	movs	r2, #0
 80224c2:	701a      	strb	r2, [r3, #0]
 80224c4:	e00d      	b.n	80224e2 <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 80224c6:	4b0a      	ldr	r3, [pc, #40]	@ (80224f0 <prvGetMessageFromStreamBuffer+0xa0>)
 80224c8:	6818      	ldr	r0, [r3, #0]
 80224ca:	68bb      	ldr	r3, [r7, #8]
 80224cc:	2200      	movs	r2, #0
 80224ce:	9200      	str	r2, [sp, #0]
 80224d0:	687a      	ldr	r2, [r7, #4]
 80224d2:	2100      	movs	r1, #0
 80224d4:	f7ee ff03 	bl	80112de <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 80224d8:	68bb      	ldr	r3, [r7, #8]
 80224da:	687a      	ldr	r2, [r7, #4]
 80224dc:	4413      	add	r3, r2
 80224de:	2200      	movs	r2, #0
 80224e0:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 80224e2:	f7e2 fa3d 	bl	8004960 <xTaskResumeAll>
		}
	}

	return xMessageLength;
 80224e6:	68bb      	ldr	r3, [r7, #8]
}
 80224e8:	4618      	mov	r0, r3
 80224ea:	3710      	adds	r7, #16
 80224ec:	46bd      	mov	sp, r7
 80224ee:	bd80      	pop	{r7, pc}
 80224f0:	20002658 	.word	0x20002658
 80224f4:	20002590 	.word	0x20002590

080224f8 <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 80224f8:	b580      	push	{r7, lr}
 80224fa:	b08e      	sub	sp, #56	@ 0x38
 80224fc:	af04      	add	r7, sp, #16
 80224fe:	6078      	str	r0, [r7, #4]
 8022500:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 8022502:	4b49      	ldr	r3, [pc, #292]	@ (8022628 <prvBufferFormattedString+0x130>)
 8022504:	681b      	ldr	r3, [r3, #0]
 8022506:	2b00      	cmp	r3, #0
 8022508:	d104      	bne.n	8022514 <prvBufferFormattedString+0x1c>
 802250a:	f44f 7199 	mov.w	r1, #306	@ 0x132
 802250e:	4847      	ldr	r0, [pc, #284]	@ (802262c <prvBufferFormattedString+0x134>)
 8022510:	f7df fa34 	bl	800197c <vAssertCalled>

	vTaskSuspendAll();
 8022514:	f7e2 fa16 	bl	8004944 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 8022518:	f000 fa2a 	bl	8022970 <ullGetHighResolutionTime>
 802251c:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8022520:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022524:	4a42      	ldr	r2, [pc, #264]	@ (8022630 <prvBufferFormattedString+0x138>)
 8022526:	f04f 0300 	mov.w	r3, #0
 802252a:	f7dd ff41 	bl	80003b0 <__aeabi_uldivmod>
 802252e:	4602      	mov	r2, r0
 8022530:	460b      	mov	r3, r1
 8022532:	4613      	mov	r3, r2
 8022534:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 8022536:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802253a:	4a3d      	ldr	r2, [pc, #244]	@ (8022630 <prvBufferFormattedString+0x138>)
 802253c:	f04f 0300 	mov.w	r3, #0
 8022540:	f7dd ff36 	bl	80003b0 <__aeabi_uldivmod>
 8022544:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 8022548:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802254c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8022550:	f04f 0300 	mov.w	r3, #0
 8022554:	f7dd ff2c 	bl	80003b0 <__aeabi_uldivmod>
 8022558:	4602      	mov	r2, r0
 802255a:	460b      	mov	r3, r1
 802255c:	4613      	mov	r3, r2
 802255e:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 8022560:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022564:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8022568:	f04f 0300 	mov.w	r3, #0
 802256c:	f7dd ff20 	bl	80003b0 <__aeabi_uldivmod>
 8022570:	4613      	mov	r3, r2
 8022572:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 8022574:	2000      	movs	r0, #0
 8022576:	f7e2 fb07 	bl	8004b88 <pcTaskGetName>
 802257a:	4603      	mov	r3, r0
 802257c:	9302      	str	r3, [sp, #8]
 802257e:	697b      	ldr	r3, [r7, #20]
 8022580:	9301      	str	r3, [sp, #4]
 8022582:	69bb      	ldr	r3, [r7, #24]
 8022584:	9300      	str	r3, [sp, #0]
 8022586:	69fb      	ldr	r3, [r7, #28]
 8022588:	4a2a      	ldr	r2, [pc, #168]	@ (8022634 <prvBufferFormattedString+0x13c>)
 802258a:	21c8      	movs	r1, #200	@ 0xc8
 802258c:	482a      	ldr	r0, [pc, #168]	@ (8022638 <prvBufferFormattedString+0x140>)
 802258e:	f001 f885 	bl	802369c <snprintf>
 8022592:	4603      	mov	r3, r0
 8022594:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 8022596:	68fb      	ldr	r3, [r7, #12]
 8022598:	4a27      	ldr	r2, [pc, #156]	@ (8022638 <prvBufferFormattedString+0x140>)
 802259a:	1898      	adds	r0, r3, r2
 802259c:	68fb      	ldr	r3, [r7, #12]
 802259e:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80225a2:	683b      	ldr	r3, [r7, #0]
 80225a4:	687a      	ldr	r2, [r7, #4]
 80225a6:	f001 f85d 	bl	8023664 <vsnprintf>
 80225aa:	4603      	mov	r3, r0
 80225ac:	461a      	mov	r2, r3
 80225ae:	68fb      	ldr	r3, [r7, #12]
 80225b0:	4413      	add	r3, r2
 80225b2:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 80225b4:	4b1c      	ldr	r3, [pc, #112]	@ (8022628 <prvBufferFormattedString+0x130>)
 80225b6:	681b      	ldr	r3, [r3, #0]
 80225b8:	4618      	mov	r0, r3
 80225ba:	f7ee fd50 	bl	801105e <uxStreamBufferGetSpace>
 80225be:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 80225c0:	68fb      	ldr	r3, [r7, #12]
 80225c2:	3304      	adds	r3, #4
 80225c4:	693a      	ldr	r2, [r7, #16]
 80225c6:	429a      	cmp	r2, r3
 80225c8:	d90e      	bls.n	80225e8 <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 80225ca:	4b17      	ldr	r3, [pc, #92]	@ (8022628 <prvBufferFormattedString+0x130>)
 80225cc:	6818      	ldr	r0, [r3, #0]
 80225ce:	f107 020c 	add.w	r2, r7, #12
 80225d2:	2304      	movs	r3, #4
 80225d4:	2100      	movs	r1, #0
 80225d6:	f7ee fe02 	bl	80111de <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 80225da:	4b13      	ldr	r3, [pc, #76]	@ (8022628 <prvBufferFormattedString+0x130>)
 80225dc:	6818      	ldr	r0, [r3, #0]
 80225de:	68fb      	ldr	r3, [r7, #12]
 80225e0:	4a15      	ldr	r2, [pc, #84]	@ (8022638 <prvBufferFormattedString+0x140>)
 80225e2:	2100      	movs	r1, #0
 80225e4:	f7ee fdfb 	bl	80111de <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 80225e8:	f7e2 f9ba 	bl	8004960 <xTaskResumeAll>

	if( xLoggingTask == NULL )
 80225ec:	4b13      	ldr	r3, [pc, #76]	@ (802263c <prvBufferFormattedString+0x144>)
 80225ee:	681b      	ldr	r3, [r3, #0]
 80225f0:	2b00      	cmp	r3, #0
 80225f2:	d10a      	bne.n	802260a <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 80225f4:	68fb      	ldr	r3, [r7, #12]
 80225f6:	4619      	mov	r1, r3
 80225f8:	480f      	ldr	r0, [pc, #60]	@ (8022638 <prvBufferFormattedString+0x140>)
 80225fa:	f000 f85b 	bl	80226b4 <vUDPLoggingHook>
		uxSkipCount++;
 80225fe:	4b10      	ldr	r3, [pc, #64]	@ (8022640 <prvBufferFormattedString+0x148>)
 8022600:	681b      	ldr	r3, [r3, #0]
 8022602:	3301      	adds	r3, #1
 8022604:	4a0e      	ldr	r2, [pc, #56]	@ (8022640 <prvBufferFormattedString+0x148>)
 8022606:	6013      	str	r3, [r2, #0]
 8022608:	e008      	b.n	802261c <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 802260a:	4b0c      	ldr	r3, [pc, #48]	@ (802263c <prvBufferFormattedString+0x144>)
 802260c:	6818      	ldr	r0, [r3, #0]
 802260e:	2300      	movs	r3, #0
 8022610:	9300      	str	r3, [sp, #0]
 8022612:	2302      	movs	r3, #2
 8022614:	2200      	movs	r2, #0
 8022616:	2100      	movs	r1, #0
 8022618:	f7e3 faf8 	bl	8005c0c <xTaskGenericNotify>
	}

	return xLength;
 802261c:	68fb      	ldr	r3, [r7, #12]
}
 802261e:	4618      	mov	r0, r3
 8022620:	3728      	adds	r7, #40	@ 0x28
 8022622:	46bd      	mov	sp, r7
 8022624:	bd80      	pop	{r7, pc}
 8022626:	bf00      	nop
 8022628:	20002658 	.word	0x20002658
 802262c:	08027c50 	.word	0x08027c50
 8022630:	000f4240 	.word	0x000f4240
 8022634:	08027c78 	.word	0x08027c78
 8022638:	20002590 	.word	0x20002590
 802263c:	2000265c 	.word	0x2000265c
 8022640:	20002660 	.word	0x20002660

08022644 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 8022644:	b40f      	push	{r0, r1, r2, r3}
 8022646:	b580      	push	{r7, lr}
 8022648:	b082      	sub	sp, #8
 802264a:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 802264c:	f7ff fece 	bl	80223ec <prvInitialiseLogging>
 8022650:	4603      	mov	r3, r0
 8022652:	2b00      	cmp	r3, #0
 8022654:	d008      	beq.n	8022668 <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 8022656:	f107 0314 	add.w	r3, r7, #20
 802265a:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 802265c:	6839      	ldr	r1, [r7, #0]
 802265e:	6938      	ldr	r0, [r7, #16]
 8022660:	f7ff ff4a 	bl	80224f8 <prvBufferFormattedString>
 8022664:	6078      	str	r0, [r7, #4]
 8022666:	e001      	b.n	802266c <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 8022668:	2300      	movs	r3, #0
 802266a:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 802266c:	687b      	ldr	r3, [r7, #4]
}
 802266e:	4618      	mov	r0, r3
 8022670:	3708      	adds	r7, #8
 8022672:	46bd      	mov	sp, r7
 8022674:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022678:	b004      	add	sp, #16
 802267a:	4770      	bx	lr

0802267c <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 802267c:	b580      	push	{r7, lr}
 802267e:	b082      	sub	sp, #8
 8022680:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 8022682:	4b08      	ldr	r3, [pc, #32]	@ (80226a4 <vUDPLoggingTaskCreate+0x28>)
 8022684:	9301      	str	r3, [sp, #4]
 8022686:	2302      	movs	r3, #2
 8022688:	9300      	str	r3, [sp, #0]
 802268a:	2300      	movs	r3, #0
 802268c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022690:	4905      	ldr	r1, [pc, #20]	@ (80226a8 <vUDPLoggingTaskCreate+0x2c>)
 8022692:	4806      	ldr	r0, [pc, #24]	@ (80226ac <vUDPLoggingTaskCreate+0x30>)
 8022694:	f7e1 fec0 	bl	8004418 <xTaskCreate>
 8022698:	4603      	mov	r3, r0
 802269a:	4a05      	ldr	r2, [pc, #20]	@ (80226b0 <vUDPLoggingTaskCreate+0x34>)
 802269c:	6013      	str	r3, [r2, #0]
}
 802269e:	bf00      	nop
 80226a0:	46bd      	mov	sp, r7
 80226a2:	bd80      	pop	{r7, pc}
 80226a4:	2000265c 	.word	0x2000265c
 80226a8:	08027c90 	.word	0x08027c90
 80226ac:	080226cd 	.word	0x080226cd
 80226b0:	20002664 	.word	0x20002664

080226b4 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 80226b4:	b480      	push	{r7}
 80226b6:	b083      	sub	sp, #12
 80226b8:	af00      	add	r7, sp, #0
 80226ba:	6078      	str	r0, [r7, #4]
 80226bc:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 80226be:	bf00      	nop
 80226c0:	370c      	adds	r7, #12
 80226c2:	46bd      	mov	sp, r7
 80226c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226c8:	4770      	bx	lr
	...

080226cc <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 80226cc:	b580      	push	{r7, lr}
 80226ce:	b098      	sub	sp, #96	@ 0x60
 80226d0:	af02      	add	r7, sp, #8
 80226d2:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 80226d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80226d8:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80226da:	2000      	movs	r0, #0
 80226dc:	f7eb f974 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 80226e0:	6538      	str	r0, [r7, #80]	@ 0x50
 80226e2:	e01c      	b.n	802271e <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 80226e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80226e6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80226ea:	f003 0310 	and.w	r3, r3, #16
 80226ee:	b2db      	uxtb	r3, r3
 80226f0:	2b00      	cmp	r3, #0
 80226f2:	d00f      	beq.n	8022714 <prvLoggingTask+0x48>
 80226f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80226f6:	2b00      	cmp	r3, #0
 80226f8:	d009      	beq.n	802270e <prvLoggingTask+0x42>
 80226fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80226fc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8022700:	f003 0304 	and.w	r3, r3, #4
 8022704:	b2db      	uxtb	r3, r3
 8022706:	2b00      	cmp	r3, #0
 8022708:	d101      	bne.n	802270e <prvLoggingTask+0x42>
 802270a:	2301      	movs	r3, #1
 802270c:	e000      	b.n	8022710 <prvLoggingTask+0x44>
 802270e:	2300      	movs	r3, #0
 8022710:	2b00      	cmp	r3, #0
 8022712:	d108      	bne.n	8022726 <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8022714:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8022716:	2000      	movs	r0, #0
 8022718:	f7eb f978 	bl	800da0c <FreeRTOS_NextEndPoint>
 802271c:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 802271e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022720:	2b00      	cmp	r3, #0
 8022722:	d1df      	bne.n	80226e4 <prvLoggingTask+0x18>
 8022724:	e000      	b.n	8022728 <prvLoggingTask+0x5c>
				{
					break;
 8022726:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 8022728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802272a:	2b00      	cmp	r3, #0
 802272c:	d000      	beq.n	8022730 <prvLoggingTask+0x64>
			{
				break;
 802272e:	e004      	b.n	802273a <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8022730:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8022734:	f7e2 f84e 	bl	80047d4 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8022738:	e7cf      	b.n	80226da <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 802273a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 802273c:	f7e2 f84a 	bl	80047d4 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8022740:	2211      	movs	r2, #17
 8022742:	2102      	movs	r1, #2
 8022744:	2002      	movs	r0, #2
 8022746:	f7eb febb 	bl	800e4c0 <FreeRTOS_socket>
 802274a:	4603      	mov	r3, r0
 802274c:	4a4c      	ldr	r2, [pc, #304]	@ (8022880 <prvLoggingTask+0x1b4>)
 802274e:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 8022750:	4b4b      	ldr	r3, [pc, #300]	@ (8022880 <prvLoggingTask+0x1b4>)
 8022752:	681b      	ldr	r3, [r3, #0]
 8022754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022758:	d0ef      	beq.n	802273a <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 802275a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802275c:	2b00      	cmp	r3, #0
 802275e:	d104      	bne.n	802276a <prvLoggingTask+0x9e>
 8022760:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8022764:	4847      	ldr	r0, [pc, #284]	@ (8022884 <prvLoggingTask+0x1b8>)
 8022766:	f7df f909 	bl	800197c <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 802276a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802276c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8022770:	2b00      	cmp	r3, #0
 8022772:	d104      	bne.n	802277e <prvLoggingTask+0xb2>
 8022774:	f240 11df 	movw	r1, #479	@ 0x1df
 8022778:	4842      	ldr	r0, [pc, #264]	@ (8022884 <prvLoggingTask+0x1b8>)
 802277a:	f7df f8ff 	bl	800197c <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 802277e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022780:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8022784:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 8022786:	f246 2309 	movw	r3, #25097	@ 0x6209
 802278a:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 802278c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802278e:	681b      	ldr	r3, [r3, #0]
 8022790:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 8022792:	4b3b      	ldr	r3, [pc, #236]	@ (8022880 <prvLoggingTask+0x1b4>)
 8022794:	681b      	ldr	r3, [r3, #0]
 8022796:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 802279a:	2218      	movs	r2, #24
 802279c:	4618      	mov	r0, r3
 802279e:	f7ec f87f 	bl	800e8a0 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 80227a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80227a4:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 80227a6:	4b36      	ldr	r3, [pc, #216]	@ (8022880 <prvLoggingTask+0x1b4>)
 80227a8:	6818      	ldr	r0, [r3, #0]
 80227aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80227ae:	2204      	movs	r2, #4
 80227b0:	9200      	str	r2, [sp, #0]
 80227b2:	2201      	movs	r2, #1
 80227b4:	2100      	movs	r1, #0
 80227b6:	f7ec fe3d 	bl	800f434 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 80227ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80227bc:	2101      	movs	r1, #1
 80227be:	2000      	movs	r0, #0
 80227c0:	f7e3 f918 	bl	80059f4 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 80227c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80227c6:	691b      	ldr	r3, [r3, #16]
 80227c8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80227ca:	4798      	blx	r3
 80227cc:	4603      	mov	r3, r0
 80227ce:	2b00      	cmp	r3, #0
 80227d0:	d0f3      	beq.n	80227ba <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 80227d2:	2300      	movs	r3, #0
 80227d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80227d6:	e04c      	b.n	8022872 <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 80227d8:	21c8      	movs	r1, #200	@ 0xc8
 80227da:	482b      	ldr	r0, [pc, #172]	@ (8022888 <prvLoggingTask+0x1bc>)
 80227dc:	f7ff fe38 	bl	8022450 <prvGetMessageFromStreamBuffer>
 80227e0:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 80227e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80227e4:	2b00      	cmp	r3, #0
 80227e6:	d048      	beq.n	802287a <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80227e8:	2000      	movs	r0, #0
 80227ea:	f7eb f8ed 	bl	800d9c8 <FreeRTOS_FirstEndPoint>
 80227ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80227f0:	e02a      	b.n	8022848 <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 80227f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80227f4:	2b00      	cmp	r3, #0
 80227f6:	d022      	beq.n	802283e <prvLoggingTask+0x172>
 80227f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80227fa:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80227fe:	f003 0304 	and.w	r3, r3, #4
 8022802:	b2db      	uxtb	r3, r3
 8022804:	2b00      	cmp	r3, #0
 8022806:	d11a      	bne.n	802283e <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 8022808:	2318      	movs	r3, #24
 802280a:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 802280c:	2302      	movs	r3, #2
 802280e:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8022810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022812:	681a      	ldr	r2, [r3, #0]
 8022814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022816:	685b      	ldr	r3, [r3, #4]
 8022818:	43db      	mvns	r3, r3
 802281a:	4313      	orrs	r3, r2
 802281c:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 802281e:	f246 3309 	movw	r3, #25353	@ 0x6309
 8022822:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 8022824:	4b16      	ldr	r3, [pc, #88]	@ (8022880 <prvLoggingTask+0x1b4>)
 8022826:	6818      	ldr	r0, [r3, #0]
 8022828:	2318      	movs	r3, #24
 802282a:	9301      	str	r3, [sp, #4]
 802282c:	f107 030c 	add.w	r3, r7, #12
 8022830:	9300      	str	r3, [sp, #0]
 8022832:	2300      	movs	r3, #0
 8022834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8022836:	4914      	ldr	r1, [pc, #80]	@ (8022888 <prvLoggingTask+0x1bc>)
 8022838:	f7eb ffc2 	bl	800e7c0 <FreeRTOS_sendto>
							}
							break;
 802283c:	e007      	b.n	802284e <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 802283e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8022840:	2000      	movs	r0, #0
 8022842:	f7eb f8e3 	bl	800da0c <FreeRTOS_NextEndPoint>
 8022846:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 8022848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802284a:	2b00      	cmp	r3, #0
 802284c:	d1d1      	bne.n	80227f2 <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 802284e:	4b0f      	ldr	r3, [pc, #60]	@ (802288c <prvLoggingTask+0x1c0>)
 8022850:	681b      	ldr	r3, [r3, #0]
 8022852:	2b00      	cmp	r3, #0
 8022854:	d005      	beq.n	8022862 <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 8022856:	4b0d      	ldr	r3, [pc, #52]	@ (802288c <prvLoggingTask+0x1c0>)
 8022858:	681b      	ldr	r3, [r3, #0]
 802285a:	3b01      	subs	r3, #1
 802285c:	4a0b      	ldr	r2, [pc, #44]	@ (802288c <prvLoggingTask+0x1c0>)
 802285e:	6013      	str	r3, [r2, #0]
 8022860:	e004      	b.n	802286c <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 8022862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022864:	4619      	mov	r1, r3
 8022866:	4808      	ldr	r0, [pc, #32]	@ (8022888 <prvLoggingTask+0x1bc>)
 8022868:	f7ff ff24 	bl	80226b4 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 802286c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802286e:	3301      	adds	r3, #1
 8022870:	657b      	str	r3, [r7, #84]	@ 0x54
 8022872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022874:	2b13      	cmp	r3, #19
 8022876:	ddaf      	ble.n	80227d8 <prvLoggingTask+0x10c>
 8022878:	e79f      	b.n	80227ba <prvLoggingTask+0xee>
					break;
 802287a:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 802287c:	e79d      	b.n	80227ba <prvLoggingTask+0xee>
 802287e:	bf00      	nop
 8022880:	20000028 	.word	0x20000028
 8022884:	08027c50 	.word	0x08027c50
 8022888:	2000266c 	.word	0x2000266c
 802288c:	20002660 	.word	0x20002660

08022890 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 8022890:	b480      	push	{r7}
 8022892:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 8022894:	4b0c      	ldr	r3, [pc, #48]	@ (80228c8 <TIM2_IRQHandler+0x38>)
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	691b      	ldr	r3, [r3, #16]
 802289a:	4a0c      	ldr	r2, [pc, #48]	@ (80228cc <TIM2_IRQHandler+0x3c>)
 802289c:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 802289e:	4b0b      	ldr	r3, [pc, #44]	@ (80228cc <TIM2_IRQHandler+0x3c>)
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	f003 0301 	and.w	r3, r3, #1
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	d009      	beq.n	80228be <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 80228aa:	4b07      	ldr	r3, [pc, #28]	@ (80228c8 <TIM2_IRQHandler+0x38>)
 80228ac:	681b      	ldr	r3, [r3, #0]
 80228ae:	f06f 0201 	mvn.w	r2, #1
 80228b2:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 80228b4:	4b06      	ldr	r3, [pc, #24]	@ (80228d0 <TIM2_IRQHandler+0x40>)
 80228b6:	681b      	ldr	r3, [r3, #0]
 80228b8:	3301      	adds	r3, #1
 80228ba:	4a05      	ldr	r2, [pc, #20]	@ (80228d0 <TIM2_IRQHandler+0x40>)
 80228bc:	6013      	str	r3, [r2, #0]
	}
}
 80228be:	bf00      	nop
 80228c0:	46bd      	mov	sp, r7
 80228c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228c6:	4770      	bx	lr
 80228c8:	20000444 	.word	0x20000444
 80228cc:	20002738 	.word	0x20002738
 80228d0:	20002734 	.word	0x20002734

080228d4 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 80228d4:	b580      	push	{r7, lr}
 80228d6:	b082      	sub	sp, #8
 80228d8:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 80228da:	4b20      	ldr	r3, [pc, #128]	@ (802295c <vStartHighResolutionTimer+0x88>)
 80228dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80228e0:	4a1e      	ldr	r2, [pc, #120]	@ (802295c <vStartHighResolutionTimer+0x88>)
 80228e2:	f043 0301 	orr.w	r3, r3, #1
 80228e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80228ea:	4b1c      	ldr	r3, [pc, #112]	@ (802295c <vStartHighResolutionTimer+0x88>)
 80228ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80228f0:	f003 0301 	and.w	r3, r3, #1
 80228f4:	607b      	str	r3, [r7, #4]
 80228f6:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 80228f8:	4b19      	ldr	r3, [pc, #100]	@ (8022960 <vStartHighResolutionTimer+0x8c>)
 80228fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80228fe:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8022900:	23c8      	movs	r3, #200	@ 0xc8
 8022902:	3b01      	subs	r3, #1
 8022904:	4a16      	ldr	r2, [pc, #88]	@ (8022960 <vStartHighResolutionTimer+0x8c>)
 8022906:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 8022908:	4b15      	ldr	r3, [pc, #84]	@ (8022960 <vStartHighResolutionTimer+0x8c>)
 802290a:	2200      	movs	r2, #0
 802290c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 802290e:	4b15      	ldr	r3, [pc, #84]	@ (8022964 <vStartHighResolutionTimer+0x90>)
 8022910:	3b01      	subs	r3, #1
 8022912:	4a13      	ldr	r2, [pc, #76]	@ (8022960 <vStartHighResolutionTimer+0x8c>)
 8022914:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 8022916:	4b12      	ldr	r3, [pc, #72]	@ (8022960 <vStartHighResolutionTimer+0x8c>)
 8022918:	2200      	movs	r2, #0
 802291a:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 802291c:	4b10      	ldr	r3, [pc, #64]	@ (8022960 <vStartHighResolutionTimer+0x8c>)
 802291e:	2200      	movs	r2, #0
 8022920:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8022922:	4b0f      	ldr	r3, [pc, #60]	@ (8022960 <vStartHighResolutionTimer+0x8c>)
 8022924:	2201      	movs	r2, #1
 8022926:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8022928:	2200      	movs	r2, #0
 802292a:	2105      	movs	r1, #5
 802292c:	201c      	movs	r0, #28
 802292e:	f7f7 ffa4 	bl	801a87a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8022932:	201c      	movs	r0, #28
 8022934:	f7f7 ffbb 	bl	801a8ae <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8022938:	4809      	ldr	r0, [pc, #36]	@ (8022960 <vStartHighResolutionTimer+0x8c>)
 802293a:	f7fd fc96 	bl	802026a <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 802293e:	4808      	ldr	r0, [pc, #32]	@ (8022960 <vStartHighResolutionTimer+0x8c>)
 8022940:	f7fd fcea 	bl	8020318 <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 8022944:	4b06      	ldr	r3, [pc, #24]	@ (8022960 <vStartHighResolutionTimer+0x8c>)
 8022946:	681b      	ldr	r3, [r3, #0]
 8022948:	691b      	ldr	r3, [r3, #16]
 802294a:	4a07      	ldr	r2, [pc, #28]	@ (8022968 <vStartHighResolutionTimer+0x94>)
 802294c:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 802294e:	4b07      	ldr	r3, [pc, #28]	@ (802296c <vStartHighResolutionTimer+0x98>)
 8022950:	2200      	movs	r2, #0
 8022952:	601a      	str	r2, [r3, #0]
}
 8022954:	bf00      	nop
 8022956:	3708      	adds	r7, #8
 8022958:	46bd      	mov	sp, r7
 802295a:	bd80      	pop	{r7, pc}
 802295c:	58024400 	.word	0x58024400
 8022960:	20000444 	.word	0x20000444
 8022964:	00989680 	.word	0x00989680
 8022968:	20002738 	.word	0x20002738
 802296c:	20002734 	.word	0x20002734

08022970 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8022970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022974:	b08e      	sub	sp, #56	@ 0x38
 8022976:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 8022978:	493d      	ldr	r1, [pc, #244]	@ (8022a70 <ullGetHighResolutionTime+0x100>)
 802297a:	6809      	ldr	r1, [r1, #0]
 802297c:	2900      	cmp	r1, #0
 802297e:	d132      	bne.n	80229e6 <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8022980:	f7e2 f8f2 	bl	8004b68 <xTaskGetTickCount>
 8022984:	4603      	mov	r3, r0
 8022986:	2200      	movs	r2, #0
 8022988:	469a      	mov	sl, r3
 802298a:	4693      	mov	fp, r2
 802298c:	4652      	mov	r2, sl
 802298e:	465b      	mov	r3, fp
 8022990:	f04f 0000 	mov.w	r0, #0
 8022994:	f04f 0100 	mov.w	r1, #0
 8022998:	0159      	lsls	r1, r3, #5
 802299a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802299e:	0150      	lsls	r0, r2, #5
 80229a0:	4602      	mov	r2, r0
 80229a2:	460b      	mov	r3, r1
 80229a4:	ebb2 040a 	subs.w	r4, r2, sl
 80229a8:	eb63 050b 	sbc.w	r5, r3, fp
 80229ac:	f04f 0200 	mov.w	r2, #0
 80229b0:	f04f 0300 	mov.w	r3, #0
 80229b4:	00ab      	lsls	r3, r5, #2
 80229b6:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80229ba:	00a2      	lsls	r2, r4, #2
 80229bc:	4614      	mov	r4, r2
 80229be:	461d      	mov	r5, r3
 80229c0:	eb14 080a 	adds.w	r8, r4, sl
 80229c4:	eb45 090b 	adc.w	r9, r5, fp
 80229c8:	f04f 0200 	mov.w	r2, #0
 80229cc:	f04f 0300 	mov.w	r3, #0
 80229d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80229d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80229d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80229dc:	4690      	mov	r8, r2
 80229de:	4699      	mov	r9, r3
 80229e0:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 80229e4:	e03c      	b.n	8022a60 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 80229e6:	4922      	ldr	r1, [pc, #136]	@ (8022a70 <ullGetHighResolutionTime+0x100>)
 80229e8:	6809      	ldr	r1, [r1, #0]
 80229ea:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80229ec:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 80229ee:	4921      	ldr	r1, [pc, #132]	@ (8022a74 <ullGetHighResolutionTime+0x104>)
 80229f0:	6809      	ldr	r1, [r1, #0]
 80229f2:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 80229f4:	491e      	ldr	r1, [pc, #120]	@ (8022a70 <ullGetHighResolutionTime+0x100>)
 80229f6:	6809      	ldr	r1, [r1, #0]
 80229f8:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80229fa:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 80229fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80229fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8022a00:	4288      	cmp	r0, r1
 8022a02:	d200      	bcs.n	8022a06 <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8022a04:	e7ef      	b.n	80229e6 <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 8022a06:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 8022a08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022a0a:	2000      	movs	r0, #0
 8022a0c:	61b9      	str	r1, [r7, #24]
 8022a0e:	61f8      	str	r0, [r7, #28]
 8022a10:	4819      	ldr	r0, [pc, #100]	@ (8022a78 <ullGetHighResolutionTime+0x108>)
 8022a12:	2100      	movs	r1, #0
 8022a14:	6138      	str	r0, [r7, #16]
 8022a16:	6179      	str	r1, [r7, #20]
 8022a18:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8022a1c:	4649      	mov	r1, r9
 8022a1e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022a22:	4650      	mov	r0, sl
 8022a24:	fb00 f001 	mul.w	r0, r0, r1
 8022a28:	4659      	mov	r1, fp
 8022a2a:	4644      	mov	r4, r8
 8022a2c:	fb04 f101 	mul.w	r1, r4, r1
 8022a30:	4401      	add	r1, r0
 8022a32:	4640      	mov	r0, r8
 8022a34:	4654      	mov	r4, sl
 8022a36:	fba0 2304 	umull	r2, r3, r0, r4
 8022a3a:	4419      	add	r1, r3
 8022a3c:	460b      	mov	r3, r1
 8022a3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022a40:	2000      	movs	r0, #0
 8022a42:	60b9      	str	r1, [r7, #8]
 8022a44:	60f8      	str	r0, [r7, #12]
 8022a46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8022a4a:	4621      	mov	r1, r4
 8022a4c:	1851      	adds	r1, r2, r1
 8022a4e:	6039      	str	r1, [r7, #0]
 8022a50:	4629      	mov	r1, r5
 8022a52:	eb43 0101 	adc.w	r1, r3, r1
 8022a56:	6079      	str	r1, [r7, #4]
 8022a58:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022a5c:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8022a60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8022a64:	4610      	mov	r0, r2
 8022a66:	4619      	mov	r1, r3
 8022a68:	3738      	adds	r7, #56	@ 0x38
 8022a6a:	46bd      	mov	sp, r7
 8022a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022a70:	20000444 	.word	0x20000444
 8022a74:	20002734 	.word	0x20002734
 8022a78:	00989680 	.word	0x00989680

08022a7c <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8022a7c:	b480      	push	{r7}
 8022a7e:	b08d      	sub	sp, #52	@ 0x34
 8022a80:	af00      	add	r7, sp, #0
 8022a82:	60f8      	str	r0, [r7, #12]
 8022a84:	60b9      	str	r1, [r7, #8]
 8022a86:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8022a88:	68fb      	ldr	r3, [r7, #12]
 8022a8a:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8022a8c:	68bb      	ldr	r3, [r7, #8]
 8022a8e:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8022a90:	697a      	ldr	r2, [r7, #20]
 8022a92:	687b      	ldr	r3, [r7, #4]
 8022a94:	4413      	add	r3, r2
 8022a96:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 8022a98:	69ba      	ldr	r2, [r7, #24]
 8022a9a:	697b      	ldr	r3, [r7, #20]
 8022a9c:	4053      	eors	r3, r2
 8022a9e:	f003 0303 	and.w	r3, r3, #3
 8022aa2:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 8022aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022aa6:	f003 0301 	and.w	r3, r3, #1
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	f040 80a1 	bne.w	8022bf2 <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 8022ab0:	697b      	ldr	r3, [r7, #20]
 8022ab2:	f003 0301 	and.w	r3, r3, #1
 8022ab6:	2b00      	cmp	r3, #0
 8022ab8:	d00b      	beq.n	8022ad2 <memcpy+0x56>
 8022aba:	697a      	ldr	r2, [r7, #20]
 8022abc:	693b      	ldr	r3, [r7, #16]
 8022abe:	429a      	cmp	r2, r3
 8022ac0:	d207      	bcs.n	8022ad2 <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 8022ac2:	697a      	ldr	r2, [r7, #20]
 8022ac4:	1c53      	adds	r3, r2, #1
 8022ac6:	617b      	str	r3, [r7, #20]
 8022ac8:	69bb      	ldr	r3, [r7, #24]
 8022aca:	1c59      	adds	r1, r3, #1
 8022acc:	61b9      	str	r1, [r7, #24]
 8022ace:	7812      	ldrb	r2, [r2, #0]
 8022ad0:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 8022ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022ad4:	f003 0302 	and.w	r3, r3, #2
 8022ad8:	2b00      	cmp	r3, #0
 8022ada:	d01f      	beq.n	8022b1c <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8022adc:	693b      	ldr	r3, [r7, #16]
 8022ade:	f003 0301 	and.w	r3, r3, #1
 8022ae2:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8022ae4:	693b      	ldr	r3, [r7, #16]
 8022ae6:	f023 0301 	bic.w	r3, r3, #1
 8022aea:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022aec:	e00a      	b.n	8022b04 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022aee:	697a      	ldr	r2, [r7, #20]
 8022af0:	1c93      	adds	r3, r2, #2
 8022af2:	617b      	str	r3, [r7, #20]
 8022af4:	69bb      	ldr	r3, [r7, #24]
 8022af6:	1c99      	adds	r1, r3, #2
 8022af8:	61b9      	str	r1, [r7, #24]
 8022afa:	8812      	ldrh	r2, [r2, #0]
 8022afc:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	3b02      	subs	r3, #2
 8022b02:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022b04:	697a      	ldr	r2, [r7, #20]
 8022b06:	693b      	ldr	r3, [r7, #16]
 8022b08:	429a      	cmp	r2, r3
 8022b0a:	d202      	bcs.n	8022b12 <memcpy+0x96>
 8022b0c:	687b      	ldr	r3, [r7, #4]
 8022b0e:	2b00      	cmp	r3, #0
 8022b10:	d1ed      	bne.n	8022aee <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8022b12:	693a      	ldr	r2, [r7, #16]
 8022b14:	69fb      	ldr	r3, [r7, #28]
 8022b16:	4313      	orrs	r3, r2
 8022b18:	613b      	str	r3, [r7, #16]
 8022b1a:	e0ae      	b.n	8022c7a <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8022b1c:	697b      	ldr	r3, [r7, #20]
 8022b1e:	f003 0302 	and.w	r3, r3, #2
 8022b22:	2b00      	cmp	r3, #0
 8022b24:	d00c      	beq.n	8022b40 <memcpy+0xc4>
 8022b26:	697a      	ldr	r2, [r7, #20]
 8022b28:	693b      	ldr	r3, [r7, #16]
 8022b2a:	3b01      	subs	r3, #1
 8022b2c:	429a      	cmp	r2, r3
 8022b2e:	d207      	bcs.n	8022b40 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022b30:	697a      	ldr	r2, [r7, #20]
 8022b32:	1c93      	adds	r3, r2, #2
 8022b34:	617b      	str	r3, [r7, #20]
 8022b36:	69bb      	ldr	r3, [r7, #24]
 8022b38:	1c99      	adds	r1, r3, #2
 8022b3a:	61b9      	str	r1, [r7, #24]
 8022b3c:	8812      	ldrh	r2, [r2, #0]
 8022b3e:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 8022b40:	693b      	ldr	r3, [r7, #16]
 8022b42:	f003 0303 	and.w	r3, r3, #3
 8022b46:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 8022b48:	693b      	ldr	r3, [r7, #16]
 8022b4a:	f023 0303 	bic.w	r3, r3, #3
 8022b4e:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8022b50:	693a      	ldr	r2, [r7, #16]
 8022b52:	697b      	ldr	r3, [r7, #20]
 8022b54:	1ad3      	subs	r3, r2, r3
 8022b56:	109b      	asrs	r3, r3, #2
 8022b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022b5a:	e02f      	b.n	8022bbc <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8022b5c:	697a      	ldr	r2, [r7, #20]
 8022b5e:	69bb      	ldr	r3, [r7, #24]
 8022b60:	6812      	ldr	r2, [r2, #0]
 8022b62:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8022b64:	697a      	ldr	r2, [r7, #20]
 8022b66:	69bb      	ldr	r3, [r7, #24]
 8022b68:	3304      	adds	r3, #4
 8022b6a:	6852      	ldr	r2, [r2, #4]
 8022b6c:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8022b6e:	697a      	ldr	r2, [r7, #20]
 8022b70:	69bb      	ldr	r3, [r7, #24]
 8022b72:	3308      	adds	r3, #8
 8022b74:	6892      	ldr	r2, [r2, #8]
 8022b76:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 8022b78:	697a      	ldr	r2, [r7, #20]
 8022b7a:	69bb      	ldr	r3, [r7, #24]
 8022b7c:	330c      	adds	r3, #12
 8022b7e:	68d2      	ldr	r2, [r2, #12]
 8022b80:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8022b82:	697a      	ldr	r2, [r7, #20]
 8022b84:	69bb      	ldr	r3, [r7, #24]
 8022b86:	3310      	adds	r3, #16
 8022b88:	6912      	ldr	r2, [r2, #16]
 8022b8a:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8022b8c:	697a      	ldr	r2, [r7, #20]
 8022b8e:	69bb      	ldr	r3, [r7, #24]
 8022b90:	3314      	adds	r3, #20
 8022b92:	6952      	ldr	r2, [r2, #20]
 8022b94:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 8022b96:	697a      	ldr	r2, [r7, #20]
 8022b98:	69bb      	ldr	r3, [r7, #24]
 8022b9a:	3318      	adds	r3, #24
 8022b9c:	6992      	ldr	r2, [r2, #24]
 8022b9e:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8022ba0:	697a      	ldr	r2, [r7, #20]
 8022ba2:	69bb      	ldr	r3, [r7, #24]
 8022ba4:	331c      	adds	r3, #28
 8022ba6:	69d2      	ldr	r2, [r2, #28]
 8022ba8:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 8022baa:	69bb      	ldr	r3, [r7, #24]
 8022bac:	3320      	adds	r3, #32
 8022bae:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8022bb0:	697b      	ldr	r3, [r7, #20]
 8022bb2:	3320      	adds	r3, #32
 8022bb4:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 8022bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022bb8:	3b08      	subs	r3, #8
 8022bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022bbe:	2b08      	cmp	r3, #8
 8022bc0:	dccc      	bgt.n	8022b5c <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022bc2:	e00a      	b.n	8022bda <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8022bc4:	697a      	ldr	r2, [r7, #20]
 8022bc6:	1d13      	adds	r3, r2, #4
 8022bc8:	617b      	str	r3, [r7, #20]
 8022bca:	69bb      	ldr	r3, [r7, #24]
 8022bcc:	1d19      	adds	r1, r3, #4
 8022bce:	61b9      	str	r1, [r7, #24]
 8022bd0:	6812      	ldr	r2, [r2, #0]
 8022bd2:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8022bd4:	687b      	ldr	r3, [r7, #4]
 8022bd6:	3b04      	subs	r3, #4
 8022bd8:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022bda:	697a      	ldr	r2, [r7, #20]
 8022bdc:	693b      	ldr	r3, [r7, #16]
 8022bde:	429a      	cmp	r2, r3
 8022be0:	d202      	bcs.n	8022be8 <memcpy+0x16c>
 8022be2:	687b      	ldr	r3, [r7, #4]
 8022be4:	2b00      	cmp	r3, #0
 8022be6:	d1ed      	bne.n	8022bc4 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8022be8:	693a      	ldr	r2, [r7, #16]
 8022bea:	6a3b      	ldr	r3, [r7, #32]
 8022bec:	4313      	orrs	r3, r2
 8022bee:	613b      	str	r3, [r7, #16]
 8022bf0:	e043      	b.n	8022c7a <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 8022bf2:	693a      	ldr	r2, [r7, #16]
 8022bf4:	697b      	ldr	r3, [r7, #20]
 8022bf6:	1ad3      	subs	r3, r2, r3
 8022bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022bfa:	e02f      	b.n	8022c5c <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8022bfc:	697a      	ldr	r2, [r7, #20]
 8022bfe:	69bb      	ldr	r3, [r7, #24]
 8022c00:	7812      	ldrb	r2, [r2, #0]
 8022c02:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8022c04:	697a      	ldr	r2, [r7, #20]
 8022c06:	69bb      	ldr	r3, [r7, #24]
 8022c08:	3301      	adds	r3, #1
 8022c0a:	7852      	ldrb	r2, [r2, #1]
 8022c0c:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 8022c0e:	697a      	ldr	r2, [r7, #20]
 8022c10:	69bb      	ldr	r3, [r7, #24]
 8022c12:	3302      	adds	r3, #2
 8022c14:	7892      	ldrb	r2, [r2, #2]
 8022c16:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 8022c18:	697a      	ldr	r2, [r7, #20]
 8022c1a:	69bb      	ldr	r3, [r7, #24]
 8022c1c:	3303      	adds	r3, #3
 8022c1e:	78d2      	ldrb	r2, [r2, #3]
 8022c20:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 8022c22:	697a      	ldr	r2, [r7, #20]
 8022c24:	69bb      	ldr	r3, [r7, #24]
 8022c26:	3304      	adds	r3, #4
 8022c28:	7912      	ldrb	r2, [r2, #4]
 8022c2a:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8022c2c:	697a      	ldr	r2, [r7, #20]
 8022c2e:	69bb      	ldr	r3, [r7, #24]
 8022c30:	3305      	adds	r3, #5
 8022c32:	7952      	ldrb	r2, [r2, #5]
 8022c34:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 8022c36:	697a      	ldr	r2, [r7, #20]
 8022c38:	69bb      	ldr	r3, [r7, #24]
 8022c3a:	3306      	adds	r3, #6
 8022c3c:	7992      	ldrb	r2, [r2, #6]
 8022c3e:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 8022c40:	697a      	ldr	r2, [r7, #20]
 8022c42:	69bb      	ldr	r3, [r7, #24]
 8022c44:	3307      	adds	r3, #7
 8022c46:	79d2      	ldrb	r2, [r2, #7]
 8022c48:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 8022c4a:	69bb      	ldr	r3, [r7, #24]
 8022c4c:	3308      	adds	r3, #8
 8022c4e:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8022c50:	697b      	ldr	r3, [r7, #20]
 8022c52:	3308      	adds	r3, #8
 8022c54:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8022c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022c58:	3b08      	subs	r3, #8
 8022c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022c5e:	2b08      	cmp	r3, #8
 8022c60:	dccc      	bgt.n	8022bfc <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8022c62:	e00a      	b.n	8022c7a <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8022c64:	697a      	ldr	r2, [r7, #20]
 8022c66:	1c53      	adds	r3, r2, #1
 8022c68:	617b      	str	r3, [r7, #20]
 8022c6a:	69bb      	ldr	r3, [r7, #24]
 8022c6c:	1c59      	adds	r1, r3, #1
 8022c6e:	61b9      	str	r1, [r7, #24]
 8022c70:	7812      	ldrb	r2, [r2, #0]
 8022c72:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8022c74:	687b      	ldr	r3, [r7, #4]
 8022c76:	3b01      	subs	r3, #1
 8022c78:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8022c7a:	697a      	ldr	r2, [r7, #20]
 8022c7c:	693b      	ldr	r3, [r7, #16]
 8022c7e:	429a      	cmp	r2, r3
 8022c80:	d202      	bcs.n	8022c88 <memcpy+0x20c>
 8022c82:	687b      	ldr	r3, [r7, #4]
 8022c84:	2b00      	cmp	r3, #0
 8022c86:	d1ed      	bne.n	8022c64 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 8022c88:	68fb      	ldr	r3, [r7, #12]
}
 8022c8a:	4618      	mov	r0, r3
 8022c8c:	3734      	adds	r7, #52	@ 0x34
 8022c8e:	46bd      	mov	sp, r7
 8022c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c94:	4770      	bx	lr

08022c96 <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 8022c96:	b480      	push	{r7}
 8022c98:	b08b      	sub	sp, #44	@ 0x2c
 8022c9a:	af00      	add	r7, sp, #0
 8022c9c:	60f8      	str	r0, [r7, #12]
 8022c9e:	60b9      	str	r1, [r7, #8]
 8022ca0:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8022ca2:	68fb      	ldr	r3, [r7, #12]
 8022ca4:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 8022ca6:	697a      	ldr	r2, [r7, #20]
 8022ca8:	687b      	ldr	r3, [r7, #4]
 8022caa:	4413      	add	r3, r2
 8022cac:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8022cae:	687b      	ldr	r3, [r7, #4]
 8022cb0:	2b07      	cmp	r3, #7
 8022cb2:	d97b      	bls.n	8022dac <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8022cb4:	68bb      	ldr	r3, [r7, #8]
 8022cb6:	b2db      	uxtb	r3, r3
 8022cb8:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 8022cba:	69fb      	ldr	r3, [r7, #28]
 8022cbc:	021a      	lsls	r2, r3, #8
 8022cbe:	69fb      	ldr	r3, [r7, #28]
 8022cc0:	041b      	lsls	r3, r3, #16
 8022cc2:	431a      	orrs	r2, r3
 8022cc4:	69fb      	ldr	r3, [r7, #28]
 8022cc6:	061b      	lsls	r3, r3, #24
 8022cc8:	4313      	orrs	r3, r2
 8022cca:	69fa      	ldr	r2, [r7, #28]
 8022ccc:	4313      	orrs	r3, r2
 8022cce:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 8022cd0:	697b      	ldr	r3, [r7, #20]
 8022cd2:	f003 0303 	and.w	r3, r3, #3
 8022cd6:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 8022cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	d010      	beq.n	8022d00 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 8022cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022ce0:	f1c3 0304 	rsb	r3, r3, #4
 8022ce4:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 8022ce6:	e006      	b.n	8022cf6 <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 8022ce8:	697b      	ldr	r3, [r7, #20]
 8022cea:	68ba      	ldr	r2, [r7, #8]
 8022cec:	b2d2      	uxtb	r2, r2
 8022cee:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 8022cf0:	697b      	ldr	r3, [r7, #20]
 8022cf2:	3301      	adds	r3, #1
 8022cf4:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 8022cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022cf8:	1e5a      	subs	r2, r3, #1
 8022cfa:	627a      	str	r2, [r7, #36]	@ 0x24
 8022cfc:	2b00      	cmp	r3, #0
 8022cfe:	d1f3      	bne.n	8022ce8 <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 8022d00:	693b      	ldr	r3, [r7, #16]
 8022d02:	f003 0303 	and.w	r3, r3, #3
 8022d06:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 8022d08:	693b      	ldr	r3, [r7, #16]
 8022d0a:	f023 0303 	bic.w	r3, r3, #3
 8022d0e:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 8022d10:	693a      	ldr	r2, [r7, #16]
 8022d12:	697b      	ldr	r3, [r7, #20]
 8022d14:	1ad3      	subs	r3, r2, r3
 8022d16:	109b      	asrs	r3, r3, #2
 8022d18:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8022d1a:	e024      	b.n	8022d66 <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 8022d1c:	697b      	ldr	r3, [r7, #20]
 8022d1e:	69fa      	ldr	r2, [r7, #28]
 8022d20:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 8022d22:	697b      	ldr	r3, [r7, #20]
 8022d24:	3304      	adds	r3, #4
 8022d26:	69fa      	ldr	r2, [r7, #28]
 8022d28:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 8022d2a:	697b      	ldr	r3, [r7, #20]
 8022d2c:	3308      	adds	r3, #8
 8022d2e:	69fa      	ldr	r2, [r7, #28]
 8022d30:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 8022d32:	697b      	ldr	r3, [r7, #20]
 8022d34:	330c      	adds	r3, #12
 8022d36:	69fa      	ldr	r2, [r7, #28]
 8022d38:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 8022d3a:	697b      	ldr	r3, [r7, #20]
 8022d3c:	3310      	adds	r3, #16
 8022d3e:	69fa      	ldr	r2, [r7, #28]
 8022d40:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 8022d42:	697b      	ldr	r3, [r7, #20]
 8022d44:	3314      	adds	r3, #20
 8022d46:	69fa      	ldr	r2, [r7, #28]
 8022d48:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 8022d4a:	697b      	ldr	r3, [r7, #20]
 8022d4c:	3318      	adds	r3, #24
 8022d4e:	69fa      	ldr	r2, [r7, #28]
 8022d50:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 8022d52:	697b      	ldr	r3, [r7, #20]
 8022d54:	331c      	adds	r3, #28
 8022d56:	69fa      	ldr	r2, [r7, #28]
 8022d58:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 8022d5a:	697b      	ldr	r3, [r7, #20]
 8022d5c:	3320      	adds	r3, #32
 8022d5e:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8022d60:	6a3b      	ldr	r3, [r7, #32]
 8022d62:	3b08      	subs	r3, #8
 8022d64:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8022d66:	6a3b      	ldr	r3, [r7, #32]
 8022d68:	2b08      	cmp	r3, #8
 8022d6a:	dcd7      	bgt.n	8022d1c <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022d6c:	e008      	b.n	8022d80 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8022d6e:	697b      	ldr	r3, [r7, #20]
 8022d70:	69fa      	ldr	r2, [r7, #28]
 8022d72:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8022d74:	697b      	ldr	r3, [r7, #20]
 8022d76:	3304      	adds	r3, #4
 8022d78:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 8022d7a:	687b      	ldr	r3, [r7, #4]
 8022d7c:	3304      	adds	r3, #4
 8022d7e:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022d80:	697a      	ldr	r2, [r7, #20]
 8022d82:	693b      	ldr	r3, [r7, #16]
 8022d84:	429a      	cmp	r2, r3
 8022d86:	d202      	bcs.n	8022d8e <memset+0xf8>
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d1ef      	bne.n	8022d6e <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8022d8e:	693a      	ldr	r2, [r7, #16]
 8022d90:	69bb      	ldr	r3, [r7, #24]
 8022d92:	4313      	orrs	r3, r2
 8022d94:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022d96:	e009      	b.n	8022dac <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 8022d98:	697b      	ldr	r3, [r7, #20]
 8022d9a:	68ba      	ldr	r2, [r7, #8]
 8022d9c:	b2d2      	uxtb	r2, r2
 8022d9e:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 8022da0:	697b      	ldr	r3, [r7, #20]
 8022da2:	3301      	adds	r3, #1
 8022da4:	617b      	str	r3, [r7, #20]
			ulBytes++;
 8022da6:	687b      	ldr	r3, [r7, #4]
 8022da8:	3301      	adds	r3, #1
 8022daa:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022dac:	697a      	ldr	r2, [r7, #20]
 8022dae:	693b      	ldr	r3, [r7, #16]
 8022db0:	429a      	cmp	r2, r3
 8022db2:	d202      	bcs.n	8022dba <memset+0x124>
 8022db4:	687b      	ldr	r3, [r7, #4]
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	d1ee      	bne.n	8022d98 <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 8022dba:	68fb      	ldr	r3, [r7, #12]
}
 8022dbc:	4618      	mov	r0, r3
 8022dbe:	372c      	adds	r7, #44	@ 0x2c
 8022dc0:	46bd      	mov	sp, r7
 8022dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dc6:	4770      	bx	lr

08022dc8 <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 8022dc8:	b480      	push	{r7}
 8022dca:	b083      	sub	sp, #12
 8022dcc:	af00      	add	r7, sp, #0
 8022dce:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 8022dd0:	2303      	movs	r3, #3
}
 8022dd2:	4618      	mov	r0, r3
 8022dd4:	370c      	adds	r7, #12
 8022dd6:	46bd      	mov	sp, r7
 8022dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ddc:	4770      	bx	lr

08022dde <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 8022dde:	b480      	push	{r7}
 8022de0:	b083      	sub	sp, #12
 8022de2:	af00      	add	r7, sp, #0
 8022de4:	4603      	mov	r3, r0
 8022de6:	6039      	str	r1, [r7, #0]
 8022de8:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 8022dea:	bf00      	nop
 8022dec:	370c      	adds	r7, #12
 8022dee:	46bd      	mov	sp, r7
 8022df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022df4:	4770      	bx	lr

08022df6 <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 8022df6:	b580      	push	{r7, lr}
 8022df8:	b084      	sub	sp, #16
 8022dfa:	af00      	add	r7, sp, #0
 8022dfc:	60f8      	str	r0, [r7, #12]
 8022dfe:	60b9      	str	r1, [r7, #8]
 8022e00:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 8022e02:	68fb      	ldr	r3, [r7, #12]
 8022e04:	68ba      	ldr	r2, [r7, #8]
 8022e06:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 8022e08:	68fb      	ldr	r3, [r7, #12]
 8022e0a:	68ba      	ldr	r2, [r7, #8]
 8022e0c:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	1e5a      	subs	r2, r3, #1
 8022e12:	68fb      	ldr	r3, [r7, #12]
 8022e14:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 8022e16:	68fb      	ldr	r3, [r7, #12]
 8022e18:	2200      	movs	r2, #0
 8022e1a:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8022e1c:	68fb      	ldr	r3, [r7, #12]
 8022e1e:	3310      	adds	r3, #16
 8022e20:	2210      	movs	r2, #16
 8022e22:	2100      	movs	r1, #0
 8022e24:	4618      	mov	r0, r3
 8022e26:	f7ff ff36 	bl	8022c96 <memset>
}
 8022e2a:	bf00      	nop
 8022e2c:	3710      	adds	r7, #16
 8022e2e:	46bd      	mov	sp, r7
 8022e30:	bd80      	pop	{r7, pc}

08022e32 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8022e32:	b580      	push	{r7, lr}
 8022e34:	b082      	sub	sp, #8
 8022e36:	af00      	add	r7, sp, #0
 8022e38:	6078      	str	r0, [r7, #4]
 8022e3a:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	681b      	ldr	r3, [r3, #0]
 8022e40:	2b00      	cmp	r3, #0
 8022e42:	d10d      	bne.n	8022e60 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022e44:	683b      	ldr	r3, [r7, #0]
 8022e46:	b2db      	uxtb	r3, r3
 8022e48:	2214      	movs	r2, #20
 8022e4a:	4611      	mov	r1, r2
 8022e4c:	4618      	mov	r0, r3
 8022e4e:	f7ff ffc6 	bl	8022dde <vOutputChar>
		apStr->curLen++;
 8022e52:	687b      	ldr	r3, [r7, #4]
 8022e54:	68db      	ldr	r3, [r3, #12]
 8022e56:	1c5a      	adds	r2, r3, #1
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022e5c:	2301      	movs	r3, #1
 8022e5e:	e022      	b.n	8022ea6 <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	681a      	ldr	r2, [r3, #0]
 8022e64:	687b      	ldr	r3, [r7, #4]
 8022e66:	689b      	ldr	r3, [r3, #8]
 8022e68:	429a      	cmp	r2, r3
 8022e6a:	d20e      	bcs.n	8022e8a <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	681b      	ldr	r3, [r3, #0]
 8022e70:	1c59      	adds	r1, r3, #1
 8022e72:	687a      	ldr	r2, [r7, #4]
 8022e74:	6011      	str	r1, [r2, #0]
 8022e76:	683a      	ldr	r2, [r7, #0]
 8022e78:	b2d2      	uxtb	r2, r2
 8022e7a:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	68db      	ldr	r3, [r3, #12]
 8022e80:	1c5a      	adds	r2, r3, #1
 8022e82:	687b      	ldr	r3, [r7, #4]
 8022e84:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022e86:	2301      	movs	r3, #1
 8022e88:	e00d      	b.n	8022ea6 <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 8022e8a:	687b      	ldr	r3, [r7, #4]
 8022e8c:	681a      	ldr	r2, [r3, #0]
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	689b      	ldr	r3, [r3, #8]
 8022e92:	429a      	cmp	r2, r3
 8022e94:	d106      	bne.n	8022ea4 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 8022e96:	687b      	ldr	r3, [r7, #4]
 8022e98:	681b      	ldr	r3, [r3, #0]
 8022e9a:	1c59      	adds	r1, r3, #1
 8022e9c:	687a      	ldr	r2, [r7, #4]
 8022e9e:	6011      	str	r1, [r2, #0]
 8022ea0:	2200      	movs	r2, #0
 8022ea2:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8022ea4:	2300      	movs	r3, #0
}
 8022ea6:	4618      	mov	r0, r3
 8022ea8:	3708      	adds	r7, #8
 8022eaa:	46bd      	mov	sp, r7
 8022eac:	bd80      	pop	{r7, pc}

08022eae <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 8022eae:	b580      	push	{r7, lr}
 8022eb0:	b082      	sub	sp, #8
 8022eb2:	af00      	add	r7, sp, #0
 8022eb4:	6078      	str	r0, [r7, #4]
 8022eb6:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	681b      	ldr	r3, [r3, #0]
 8022ebc:	2b00      	cmp	r3, #0
 8022ebe:	d112      	bne.n	8022ee6 <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022ec0:	683b      	ldr	r3, [r7, #0]
 8022ec2:	b2db      	uxtb	r3, r3
 8022ec4:	2214      	movs	r2, #20
 8022ec6:	4611      	mov	r1, r2
 8022ec8:	4618      	mov	r0, r3
 8022eca:	f7ff ff88 	bl	8022dde <vOutputChar>
		if( c == 0 )
 8022ece:	683b      	ldr	r3, [r7, #0]
 8022ed0:	2b00      	cmp	r3, #0
 8022ed2:	d101      	bne.n	8022ed8 <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8022ed4:	2300      	movs	r3, #0
 8022ed6:	e02e      	b.n	8022f36 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8022ed8:	687b      	ldr	r3, [r7, #4]
 8022eda:	68db      	ldr	r3, [r3, #12]
 8022edc:	1c5a      	adds	r2, r3, #1
 8022ede:	687b      	ldr	r3, [r7, #4]
 8022ee0:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022ee2:	2301      	movs	r3, #1
 8022ee4:	e027      	b.n	8022f36 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 8022ee6:	687b      	ldr	r3, [r7, #4]
 8022ee8:	681a      	ldr	r2, [r3, #0]
 8022eea:	687b      	ldr	r3, [r7, #4]
 8022eec:	689b      	ldr	r3, [r3, #8]
 8022eee:	429a      	cmp	r2, r3
 8022ef0:	d213      	bcs.n	8022f1a <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 8022ef2:	687b      	ldr	r3, [r7, #4]
 8022ef4:	681b      	ldr	r3, [r3, #0]
 8022ef6:	1c59      	adds	r1, r3, #1
 8022ef8:	687a      	ldr	r2, [r7, #4]
 8022efa:	6011      	str	r1, [r2, #0]
 8022efc:	683a      	ldr	r2, [r7, #0]
 8022efe:	b2d2      	uxtb	r2, r2
 8022f00:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 8022f02:	683b      	ldr	r3, [r7, #0]
 8022f04:	2b00      	cmp	r3, #0
 8022f06:	d101      	bne.n	8022f0c <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 8022f08:	2300      	movs	r3, #0
 8022f0a:	e014      	b.n	8022f36 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8022f0c:	687b      	ldr	r3, [r7, #4]
 8022f0e:	68db      	ldr	r3, [r3, #12]
 8022f10:	1c5a      	adds	r2, r3, #1
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022f16:	2301      	movs	r3, #1
 8022f18:	e00d      	b.n	8022f36 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 8022f1a:	687b      	ldr	r3, [r7, #4]
 8022f1c:	681a      	ldr	r2, [r3, #0]
 8022f1e:	687b      	ldr	r3, [r7, #4]
 8022f20:	689b      	ldr	r3, [r3, #8]
 8022f22:	429a      	cmp	r2, r3
 8022f24:	d106      	bne.n	8022f34 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 8022f26:	687b      	ldr	r3, [r7, #4]
 8022f28:	681b      	ldr	r3, [r3, #0]
 8022f2a:	1c59      	adds	r1, r3, #1
 8022f2c:	687a      	ldr	r2, [r7, #4]
 8022f2e:	6011      	str	r1, [r2, #0]
 8022f30:	2200      	movs	r2, #0
 8022f32:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8022f34:	2300      	movs	r3, #0
}
 8022f36:	4618      	mov	r0, r3
 8022f38:	3708      	adds	r7, #8
 8022f3a:	46bd      	mov	sp, r7
 8022f3c:	bd80      	pop	{r7, pc}
	...

08022f40 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 8022f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022f42:	b085      	sub	sp, #20
 8022f44:	af00      	add	r7, sp, #0
 8022f46:	6078      	str	r0, [r7, #4]
 8022f48:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 8022f4a:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 8022f4c:	683b      	ldr	r3, [r7, #0]
 8022f4e:	4618      	mov	r0, r3
 8022f50:	f7ff ff3a 	bl	8022dc8 <xApplicationMemoryPermissions>
 8022f54:	4603      	mov	r3, r0
 8022f56:	2b00      	cmp	r3, #0
 8022f58:	d101      	bne.n	8022f5e <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 8022f5a:	4b4c      	ldr	r3, [pc, #304]	@ (802308c <prints+0x14c>)
 8022f5c:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 8022f5e:	687b      	ldr	r3, [r7, #4]
 8022f60:	695b      	ldr	r3, [r3, #20]
 8022f62:	2b00      	cmp	r3, #0
 8022f64:	dd1b      	ble.n	8022f9e <prints+0x5e>
	{
		register int count = 0;
 8022f66:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 8022f68:	683d      	ldr	r5, [r7, #0]
 8022f6a:	e001      	b.n	8022f70 <prints+0x30>
		{
			++count;
 8022f6c:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 8022f6e:	3501      	adds	r5, #1
 8022f70:	782b      	ldrb	r3, [r5, #0]
 8022f72:	2b00      	cmp	r3, #0
 8022f74:	d1fa      	bne.n	8022f6c <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 8022f76:	687b      	ldr	r3, [r7, #4]
 8022f78:	695b      	ldr	r3, [r3, #20]
 8022f7a:	429c      	cmp	r4, r3
 8022f7c:	db03      	blt.n	8022f86 <prints+0x46>
		{
			apBuf->flags.width = 0;
 8022f7e:	687b      	ldr	r3, [r7, #4]
 8022f80:	2200      	movs	r2, #0
 8022f82:	615a      	str	r2, [r3, #20]
 8022f84:	e004      	b.n	8022f90 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 8022f86:	687b      	ldr	r3, [r7, #4]
 8022f88:	695b      	ldr	r3, [r3, #20]
 8022f8a:	1b1a      	subs	r2, r3, r4
 8022f8c:	687b      	ldr	r3, [r7, #4]
 8022f8e:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8022f90:	687b      	ldr	r3, [r7, #4]
 8022f92:	7f1b      	ldrb	r3, [r3, #28]
 8022f94:	f003 0302 	and.w	r3, r3, #2
 8022f98:	2b00      	cmp	r3, #0
 8022f9a:	d000      	beq.n	8022f9e <prints+0x5e>
		{
			padchar = '0';
 8022f9c:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 8022f9e:	687b      	ldr	r3, [r7, #4]
 8022fa0:	7f1b      	ldrb	r3, [r3, #28]
 8022fa2:	f003 0301 	and.w	r3, r3, #1
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	d112      	bne.n	8022fd0 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022faa:	e00d      	b.n	8022fc8 <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8022fac:	4631      	mov	r1, r6
 8022fae:	6878      	ldr	r0, [r7, #4]
 8022fb0:	f7ff ff3f 	bl	8022e32 <strbuf_printchar>
 8022fb4:	4603      	mov	r3, r0
 8022fb6:	2b00      	cmp	r3, #0
 8022fb8:	d101      	bne.n	8022fbe <prints+0x7e>
			{
				return pdFALSE;
 8022fba:	2300      	movs	r3, #0
 8022fbc:	e062      	b.n	8023084 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022fbe:	687b      	ldr	r3, [r7, #4]
 8022fc0:	695b      	ldr	r3, [r3, #20]
 8022fc2:	1e5a      	subs	r2, r3, #1
 8022fc4:	687b      	ldr	r3, [r7, #4]
 8022fc6:	615a      	str	r2, [r3, #20]
 8022fc8:	687b      	ldr	r3, [r7, #4]
 8022fca:	695b      	ldr	r3, [r3, #20]
 8022fcc:	2b00      	cmp	r3, #0
 8022fce:	dced      	bgt.n	8022fac <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8022fd0:	687b      	ldr	r3, [r7, #4]
 8022fd2:	7f9b      	ldrb	r3, [r3, #30]
 8022fd4:	f003 0302 	and.w	r3, r3, #2
 8022fd8:	b2db      	uxtb	r3, r3
 8022fda:	2b00      	cmp	r3, #0
 8022fdc:	d036      	beq.n	802304c <prints+0x10c>
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	7f1b      	ldrb	r3, [r3, #28]
 8022fe2:	2b01      	cmp	r3, #1
 8022fe4:	d132      	bne.n	802304c <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 8022fe6:	6838      	ldr	r0, [r7, #0]
 8022fe8:	f7dd f984 	bl	80002f4 <strlen>
 8022fec:	4603      	mov	r3, r0
 8022fee:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8022ff0:	687b      	ldr	r3, [r7, #4]
 8022ff2:	699b      	ldr	r3, [r3, #24]
 8022ff4:	68ba      	ldr	r2, [r7, #8]
 8022ff6:	429a      	cmp	r2, r3
 8022ff8:	da28      	bge.n	802304c <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 8022ffa:	687b      	ldr	r3, [r7, #4]
 8022ffc:	699a      	ldr	r2, [r3, #24]
 8022ffe:	68bb      	ldr	r3, [r7, #8]
 8023000:	1ad3      	subs	r3, r2, r3
 8023002:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8023004:	e00b      	b.n	802301e <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 8023006:	2130      	movs	r1, #48	@ 0x30
 8023008:	6878      	ldr	r0, [r7, #4]
 802300a:	f7ff ff12 	bl	8022e32 <strbuf_printchar>
 802300e:	4603      	mov	r3, r0
 8023010:	2b00      	cmp	r3, #0
 8023012:	d101      	bne.n	8023018 <prints+0xd8>
				{
					return pdFALSE;
 8023014:	2300      	movs	r3, #0
 8023016:	e035      	b.n	8023084 <prints+0x144>
			for( ; i; i-- )
 8023018:	68fb      	ldr	r3, [r7, #12]
 802301a:	3b01      	subs	r3, #1
 802301c:	60fb      	str	r3, [r7, #12]
 802301e:	68fb      	ldr	r3, [r7, #12]
 8023020:	2b00      	cmp	r3, #0
 8023022:	d1f0      	bne.n	8023006 <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8023024:	e012      	b.n	802304c <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 8023026:	683b      	ldr	r3, [r7, #0]
 8023028:	781b      	ldrb	r3, [r3, #0]
 802302a:	4619      	mov	r1, r3
 802302c:	6878      	ldr	r0, [r7, #4]
 802302e:	f7ff ff00 	bl	8022e32 <strbuf_printchar>
 8023032:	4603      	mov	r3, r0
 8023034:	2b00      	cmp	r3, #0
 8023036:	d101      	bne.n	802303c <prints+0xfc>
		{
			return pdFALSE;
 8023038:	2300      	movs	r3, #0
 802303a:	e023      	b.n	8023084 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 802303c:	683b      	ldr	r3, [r7, #0]
 802303e:	3301      	adds	r3, #1
 8023040:	603b      	str	r3, [r7, #0]
 8023042:	687b      	ldr	r3, [r7, #4]
 8023044:	699b      	ldr	r3, [r3, #24]
 8023046:	1e5a      	subs	r2, r3, #1
 8023048:	687b      	ldr	r3, [r7, #4]
 802304a:	619a      	str	r2, [r3, #24]
 802304c:	687b      	ldr	r3, [r7, #4]
 802304e:	699b      	ldr	r3, [r3, #24]
 8023050:	2b00      	cmp	r3, #0
 8023052:	d012      	beq.n	802307a <prints+0x13a>
 8023054:	683b      	ldr	r3, [r7, #0]
 8023056:	781b      	ldrb	r3, [r3, #0]
 8023058:	2b00      	cmp	r3, #0
 802305a:	d1e4      	bne.n	8023026 <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 802305c:	e00d      	b.n	802307a <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 802305e:	4631      	mov	r1, r6
 8023060:	6878      	ldr	r0, [r7, #4]
 8023062:	f7ff fee6 	bl	8022e32 <strbuf_printchar>
 8023066:	4603      	mov	r3, r0
 8023068:	2b00      	cmp	r3, #0
 802306a:	d101      	bne.n	8023070 <prints+0x130>
		{
			return pdFALSE;
 802306c:	2300      	movs	r3, #0
 802306e:	e009      	b.n	8023084 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8023070:	687b      	ldr	r3, [r7, #4]
 8023072:	695b      	ldr	r3, [r3, #20]
 8023074:	1e5a      	subs	r2, r3, #1
 8023076:	687b      	ldr	r3, [r7, #4]
 8023078:	615a      	str	r2, [r3, #20]
 802307a:	687b      	ldr	r3, [r7, #4]
 802307c:	695b      	ldr	r3, [r3, #20]
 802307e:	2b00      	cmp	r3, #0
 8023080:	dced      	bgt.n	802305e <prints+0x11e>
		}
	}

	return pdTRUE;
 8023082:	2301      	movs	r3, #1
}
 8023084:	4618      	mov	r0, r3
 8023086:	3714      	adds	r7, #20
 8023088:	46bd      	mov	sp, r7
 802308a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802308c:	08027c98 	.word	0x08027c98

08023090 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8023090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023094:	b087      	sub	sp, #28
 8023096:	af00      	add	r7, sp, #0
 8023098:	6078      	str	r0, [r7, #4]
 802309a:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 802309c:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 80230a0:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 80230a2:	687b      	ldr	r3, [r7, #4]
 80230a4:	691b      	ldr	r3, [r3, #16]
 80230a6:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 80230a8:	687a      	ldr	r2, [r7, #4]
 80230aa:	7f93      	ldrb	r3, [r2, #30]
 80230ac:	f043 0302 	orr.w	r3, r3, #2
 80230b0:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 80230b2:	683b      	ldr	r3, [r7, #0]
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	d10b      	bne.n	80230d0 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 80230b8:	2330      	movs	r3, #48	@ 0x30
 80230ba:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 80230bc:	2300      	movs	r3, #0
 80230be:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 80230c0:	f107 030c 	add.w	r3, r7, #12
 80230c4:	4619      	mov	r1, r3
 80230c6:	6878      	ldr	r0, [r7, #4]
 80230c8:	f7ff ff3a 	bl	8022f40 <prints>
 80230cc:	4603      	mov	r3, r0
 80230ce:	e067      	b.n	80231a0 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 80230d0:	687b      	ldr	r3, [r7, #4]
 80230d2:	7f9b      	ldrb	r3, [r3, #30]
 80230d4:	f003 0301 	and.w	r3, r3, #1
 80230d8:	b2db      	uxtb	r3, r3
 80230da:	2b00      	cmp	r3, #0
 80230dc:	d009      	beq.n	80230f2 <printi+0x62>
 80230de:	2e0a      	cmp	r6, #10
 80230e0:	d107      	bne.n	80230f2 <printi+0x62>
 80230e2:	683b      	ldr	r3, [r7, #0]
 80230e4:	2b00      	cmp	r3, #0
 80230e6:	da04      	bge.n	80230f2 <printi+0x62>
	{
		neg = 1;
 80230e8:	f04f 0901 	mov.w	r9, #1
		u = -i;
 80230ec:	683b      	ldr	r3, [r7, #0]
 80230ee:	425b      	negs	r3, r3
 80230f0:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 80230f2:	f107 040c 	add.w	r4, r7, #12
 80230f6:	340b      	adds	r4, #11

	*s = '\0';
 80230f8:	2300      	movs	r3, #0
 80230fa:	7023      	strb	r3, [r4, #0]
	switch( base )
 80230fc:	2e10      	cmp	r6, #16
 80230fe:	d017      	beq.n	8023130 <printi+0xa0>
 8023100:	2e10      	cmp	r6, #16
 8023102:	d829      	bhi.n	8023158 <printi+0xc8>
 8023104:	2e08      	cmp	r6, #8
 8023106:	d024      	beq.n	8023152 <printi+0xc2>
 8023108:	2e0a      	cmp	r6, #10
 802310a:	d022      	beq.n	8023152 <printi+0xc2>
 802310c:	e024      	b.n	8023158 <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 802310e:	462b      	mov	r3, r5
 8023110:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 8023114:	f1b8 0f09 	cmp.w	r8, #9
 8023118:	dd03      	ble.n	8023122 <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 802311a:	687b      	ldr	r3, [r7, #4]
 802311c:	7f5b      	ldrb	r3, [r3, #29]
 802311e:	3b3a      	subs	r3, #58	@ 0x3a
 8023120:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 8023122:	fa5f f388 	uxtb.w	r3, r8
 8023126:	3c01      	subs	r4, #1
 8023128:	3330      	adds	r3, #48	@ 0x30
 802312a:	b2db      	uxtb	r3, r3
 802312c:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 802312e:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 8023130:	2d00      	cmp	r5, #0
 8023132:	d1ec      	bne.n	802310e <printi+0x7e>
		}
		break;
 8023134:	e010      	b.n	8023158 <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 8023136:	fbb5 f3f6 	udiv	r3, r5, r6
 802313a:	fb06 f303 	mul.w	r3, r6, r3
 802313e:	1aeb      	subs	r3, r5, r3
 8023140:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 8023142:	fa5f f388 	uxtb.w	r3, r8
 8023146:	3c01      	subs	r4, #1
 8023148:	3330      	adds	r3, #48	@ 0x30
 802314a:	b2db      	uxtb	r3, r3
 802314c:	7023      	strb	r3, [r4, #0]
			u /= base;
 802314e:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 8023152:	2d00      	cmp	r5, #0
 8023154:	d1ef      	bne.n	8023136 <printi+0xa6>
		}
		break;
 8023156:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 8023158:	f1b9 0f00 	cmp.w	r9, #0
 802315c:	d01b      	beq.n	8023196 <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	695b      	ldr	r3, [r3, #20]
 8023162:	2b00      	cmp	r3, #0
 8023164:	d014      	beq.n	8023190 <printi+0x100>
 8023166:	687b      	ldr	r3, [r7, #4]
 8023168:	7f1b      	ldrb	r3, [r3, #28]
 802316a:	f003 0302 	and.w	r3, r3, #2
 802316e:	2b00      	cmp	r3, #0
 8023170:	d00e      	beq.n	8023190 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 8023172:	212d      	movs	r1, #45	@ 0x2d
 8023174:	6878      	ldr	r0, [r7, #4]
 8023176:	f7ff fe5c 	bl	8022e32 <strbuf_printchar>
 802317a:	4603      	mov	r3, r0
 802317c:	2b00      	cmp	r3, #0
 802317e:	d101      	bne.n	8023184 <printi+0xf4>
			{
				return pdFALSE;
 8023180:	2300      	movs	r3, #0
 8023182:	e00d      	b.n	80231a0 <printi+0x110>
			}
			--apBuf->flags.width;
 8023184:	687b      	ldr	r3, [r7, #4]
 8023186:	695b      	ldr	r3, [r3, #20]
 8023188:	1e5a      	subs	r2, r3, #1
 802318a:	687b      	ldr	r3, [r7, #4]
 802318c:	615a      	str	r2, [r3, #20]
 802318e:	e002      	b.n	8023196 <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 8023190:	3c01      	subs	r4, #1
 8023192:	232d      	movs	r3, #45	@ 0x2d
 8023194:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 8023196:	4621      	mov	r1, r4
 8023198:	6878      	ldr	r0, [r7, #4]
 802319a:	f7ff fed1 	bl	8022f40 <prints>
 802319e:	4603      	mov	r3, r0
}
 80231a0:	4618      	mov	r0, r3
 80231a2:	371c      	adds	r7, #28
 80231a4:	46bd      	mov	sp, r7
 80231a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080231ac <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 80231ac:	b590      	push	{r4, r7, lr}
 80231ae:	b089      	sub	sp, #36	@ 0x24
 80231b0:	af02      	add	r7, sp, #8
 80231b2:	6078      	str	r0, [r7, #4]
 80231b4:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 80231b6:	683b      	ldr	r3, [r7, #0]
 80231b8:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 80231ba:	683b      	ldr	r3, [r7, #0]
 80231bc:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 80231be:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 80231c0:	683b      	ldr	r3, [r7, #0]
 80231c2:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 80231c4:	b2db      	uxtb	r3, r3
 80231c6:	683a      	ldr	r2, [r7, #0]
 80231c8:	b2d2      	uxtb	r2, r2
 80231ca:	f107 0008 	add.w	r0, r7, #8
 80231ce:	9201      	str	r2, [sp, #4]
 80231d0:	9300      	str	r3, [sp, #0]
 80231d2:	4623      	mov	r3, r4
 80231d4:	460a      	mov	r2, r1
 80231d6:	4909      	ldr	r1, [pc, #36]	@ (80231fc <printIp+0x50>)
 80231d8:	f000 fa81 	bl	80236de <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 80231dc:	687a      	ldr	r2, [r7, #4]
 80231de:	7f93      	ldrb	r3, [r2, #30]
 80231e0:	f043 0302 	orr.w	r3, r3, #2
 80231e4:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 80231e6:	f107 0308 	add.w	r3, r7, #8
 80231ea:	4619      	mov	r1, r3
 80231ec:	6878      	ldr	r0, [r7, #4]
 80231ee:	f7ff fea7 	bl	8022f40 <prints>

	return pdTRUE;
 80231f2:	2301      	movs	r3, #1
}
 80231f4:	4618      	mov	r0, r3
 80231f6:	371c      	adds	r7, #28
 80231f8:	46bd      	mov	sp, r7
 80231fa:	bd90      	pop	{r4, r7, pc}
 80231fc:	08027ca0 	.word	0x08027ca0

08023200 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 8023200:	b480      	push	{r7}
 8023202:	b083      	sub	sp, #12
 8023204:	af00      	add	r7, sp, #0
 8023206:	4603      	mov	r3, r0
 8023208:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 802320a:	4a0b      	ldr	r2, [pc, #44]	@ (8023238 <usNetToHost+0x38>)
 802320c:	4b0b      	ldr	r3, [pc, #44]	@ (802323c <usNetToHost+0x3c>)
 802320e:	429a      	cmp	r2, r3
 8023210:	d101      	bne.n	8023216 <usNetToHost+0x16>
	{
		return usValue;
 8023212:	88fb      	ldrh	r3, [r7, #6]
 8023214:	e009      	b.n	802322a <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 8023216:	88fb      	ldrh	r3, [r7, #6]
 8023218:	021b      	lsls	r3, r3, #8
 802321a:	b21a      	sxth	r2, r3
 802321c:	88fb      	ldrh	r3, [r7, #6]
 802321e:	0a1b      	lsrs	r3, r3, #8
 8023220:	b29b      	uxth	r3, r3
 8023222:	b21b      	sxth	r3, r3
 8023224:	4313      	orrs	r3, r2
 8023226:	b21b      	sxth	r3, r3
 8023228:	b29b      	uxth	r3, r3
	}
}
 802322a:	4618      	mov	r0, r3
 802322c:	370c      	adds	r7, #12
 802322e:	46bd      	mov	sp, r7
 8023230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023234:	4770      	bx	lr
 8023236:	bf00      	nop
 8023238:	03020100 	.word	0x03020100
 802323c:	00010203 	.word	0x00010203

08023240 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 8023240:	b580      	push	{r7, lr}
 8023242:	b088      	sub	sp, #32
 8023244:	af00      	add	r7, sp, #0
 8023246:	6078      	str	r0, [r7, #4]
 8023248:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 802324a:	f04f 33ff 	mov.w	r3, #4294967295
 802324e:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 8023250:	2300      	movs	r3, #0
 8023252:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 8023254:	2300      	movs	r3, #0
 8023256:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 8023258:	2300      	movs	r3, #0
 802325a:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 802325c:	2300      	movs	r3, #0
 802325e:	61fb      	str	r3, [r7, #28]
 8023260:	e026      	b.n	80232b0 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 8023262:	69fb      	ldr	r3, [r7, #28]
 8023264:	005b      	lsls	r3, r3, #1
 8023266:	683a      	ldr	r2, [r7, #0]
 8023268:	4413      	add	r3, r2
 802326a:	881b      	ldrh	r3, [r3, #0]
 802326c:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 802326e:	897b      	ldrh	r3, [r7, #10]
 8023270:	2b00      	cmp	r3, #0
 8023272:	d107      	bne.n	8023284 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 8023274:	68fb      	ldr	r3, [r7, #12]
 8023276:	2b00      	cmp	r3, #0
 8023278:	d101      	bne.n	802327e <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 802327a:	69fb      	ldr	r3, [r7, #28]
 802327c:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 802327e:	68fb      	ldr	r3, [r7, #12]
 8023280:	3301      	adds	r3, #1
 8023282:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 8023284:	897b      	ldrh	r3, [r7, #10]
 8023286:	2b00      	cmp	r3, #0
 8023288:	d102      	bne.n	8023290 <printIPv6+0x50>
 802328a:	69fb      	ldr	r3, [r7, #28]
 802328c:	2b07      	cmp	r3, #7
 802328e:	d10c      	bne.n	80232aa <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 8023290:	68fb      	ldr	r3, [r7, #12]
 8023292:	2b01      	cmp	r3, #1
 8023294:	dd07      	ble.n	80232a6 <printIPv6+0x66>
 8023296:	697a      	ldr	r2, [r7, #20]
 8023298:	68fb      	ldr	r3, [r7, #12]
 802329a:	429a      	cmp	r2, r3
 802329c:	da03      	bge.n	80232a6 <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 802329e:	68fb      	ldr	r3, [r7, #12]
 80232a0:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 80232a2:	693b      	ldr	r3, [r7, #16]
 80232a4:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 80232a6:	2300      	movs	r3, #0
 80232a8:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 80232aa:	69fb      	ldr	r3, [r7, #28]
 80232ac:	3301      	adds	r3, #1
 80232ae:	61fb      	str	r3, [r7, #28]
 80232b0:	69fb      	ldr	r3, [r7, #28]
 80232b2:	2b07      	cmp	r3, #7
 80232b4:	ddd5      	ble.n	8023262 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 80232b6:	687b      	ldr	r3, [r7, #4]
 80232b8:	2210      	movs	r2, #16
 80232ba:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 80232bc:	687b      	ldr	r3, [r7, #4]
 80232be:	2261      	movs	r2, #97	@ 0x61
 80232c0:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80232c2:	2300      	movs	r3, #0
 80232c4:	61fb      	str	r3, [r7, #28]
 80232c6:	e02b      	b.n	8023320 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 80232c8:	69fa      	ldr	r2, [r7, #28]
 80232ca:	69bb      	ldr	r3, [r7, #24]
 80232cc:	429a      	cmp	r2, r3
 80232ce:	d110      	bne.n	80232f2 <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 80232d0:	697b      	ldr	r3, [r7, #20]
 80232d2:	3b01      	subs	r3, #1
 80232d4:	69fa      	ldr	r2, [r7, #28]
 80232d6:	4413      	add	r3, r2
 80232d8:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 80232da:	213a      	movs	r1, #58	@ 0x3a
 80232dc:	6878      	ldr	r0, [r7, #4]
 80232de:	f7ff fda8 	bl	8022e32 <strbuf_printchar>
			if( iIndex == 7 )
 80232e2:	69fb      	ldr	r3, [r7, #28]
 80232e4:	2b07      	cmp	r3, #7
 80232e6:	d118      	bne.n	802331a <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 80232e8:	213a      	movs	r1, #58	@ 0x3a
 80232ea:	6878      	ldr	r0, [r7, #4]
 80232ec:	f7ff fda1 	bl	8022e32 <strbuf_printchar>
 80232f0:	e013      	b.n	802331a <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 80232f2:	69fb      	ldr	r3, [r7, #28]
 80232f4:	2b00      	cmp	r3, #0
 80232f6:	dd03      	ble.n	8023300 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 80232f8:	213a      	movs	r1, #58	@ 0x3a
 80232fa:	6878      	ldr	r0, [r7, #4]
 80232fc:	f7ff fd99 	bl	8022e32 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 8023300:	69fb      	ldr	r3, [r7, #28]
 8023302:	005b      	lsls	r3, r3, #1
 8023304:	683a      	ldr	r2, [r7, #0]
 8023306:	4413      	add	r3, r2
 8023308:	881b      	ldrh	r3, [r3, #0]
 802330a:	4618      	mov	r0, r3
 802330c:	f7ff ff78 	bl	8023200 <usNetToHost>
 8023310:	4603      	mov	r3, r0
 8023312:	4619      	mov	r1, r3
 8023314:	6878      	ldr	r0, [r7, #4]
 8023316:	f7ff febb 	bl	8023090 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802331a:	69fb      	ldr	r3, [r7, #28]
 802331c:	3301      	adds	r3, #1
 802331e:	61fb      	str	r3, [r7, #28]
 8023320:	69fb      	ldr	r3, [r7, #28]
 8023322:	2b07      	cmp	r3, #7
 8023324:	ddd0      	ble.n	80232c8 <printIPv6+0x88>
		}
	}

	return pdTRUE;
 8023326:	2301      	movs	r3, #1
}
 8023328:	4618      	mov	r0, r3
 802332a:	3720      	adds	r7, #32
 802332c:	46bd      	mov	sp, r7
 802332e:	bd80      	pop	{r7, pc}

08023330 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 8023330:	b590      	push	{r4, r7, lr}
 8023332:	b087      	sub	sp, #28
 8023334:	af00      	add	r7, sp, #0
 8023336:	60f8      	str	r0, [r7, #12]
 8023338:	60b9      	str	r1, [r7, #8]
 802333a:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 802333c:	68bb      	ldr	r3, [r7, #8]
 802333e:	1c5a      	adds	r2, r3, #1
 8023340:	60ba      	str	r2, [r7, #8]
 8023342:	781b      	ldrb	r3, [r3, #0]
 8023344:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 8023346:	697b      	ldr	r3, [r7, #20]
 8023348:	2b25      	cmp	r3, #37	@ 0x25
 802334a:	d00f      	beq.n	802336c <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 802334c:	6979      	ldr	r1, [r7, #20]
 802334e:	68f8      	ldr	r0, [r7, #12]
 8023350:	f7ff fdad 	bl	8022eae <strbuf_printchar_inline>
 8023354:	4603      	mov	r3, r0
 8023356:	2b00      	cmp	r3, #0
 8023358:	f000 817e 	beq.w	8023658 <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 802335c:	68bb      	ldr	r3, [r7, #8]
 802335e:	1c5a      	adds	r2, r3, #1
 8023360:	60ba      	str	r2, [r7, #8]
 8023362:	781b      	ldrb	r3, [r3, #0]
 8023364:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 8023366:	697b      	ldr	r3, [r7, #20]
 8023368:	2b25      	cmp	r3, #37	@ 0x25
 802336a:	d1ef      	bne.n	802334c <tiny_print+0x1c>
		}
		ch = *( format++ );
 802336c:	68bb      	ldr	r3, [r7, #8]
 802336e:	1c5a      	adds	r2, r3, #1
 8023370:	60ba      	str	r2, [r7, #8]
 8023372:	781b      	ldrb	r3, [r3, #0]
 8023374:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 8023376:	697b      	ldr	r3, [r7, #20]
 8023378:	2b00      	cmp	r3, #0
 802337a:	f000 8165 	beq.w	8023648 <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 802337e:	697b      	ldr	r3, [r7, #20]
 8023380:	2b25      	cmp	r3, #37	@ 0x25
 8023382:	d108      	bne.n	8023396 <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 8023384:	6979      	ldr	r1, [r7, #20]
 8023386:	68f8      	ldr	r0, [r7, #12]
 8023388:	f7ff fd53 	bl	8022e32 <strbuf_printchar>
 802338c:	4603      	mov	r3, r0
 802338e:	2b00      	cmp	r3, #0
 8023390:	f040 814e 	bne.w	8023630 <tiny_print+0x300>
			{
				return;
 8023394:	e161      	b.n	802365a <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 8023396:	68fb      	ldr	r3, [r7, #12]
 8023398:	3310      	adds	r3, #16
 802339a:	2210      	movs	r2, #16
 802339c:	2100      	movs	r1, #0
 802339e:	4618      	mov	r0, r3
 80233a0:	f7ff fc79 	bl	8022c96 <memset>

		if( ch == '-' )
 80233a4:	697b      	ldr	r3, [r7, #20]
 80233a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80233a8:	d114      	bne.n	80233d4 <tiny_print+0xa4>
		{
			ch = *( format++ );
 80233aa:	68bb      	ldr	r3, [r7, #8]
 80233ac:	1c5a      	adds	r2, r3, #1
 80233ae:	60ba      	str	r2, [r7, #8]
 80233b0:	781b      	ldrb	r3, [r3, #0]
 80233b2:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 80233b4:	68fb      	ldr	r3, [r7, #12]
 80233b6:	2201      	movs	r2, #1
 80233b8:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 80233ba:	e00b      	b.n	80233d4 <tiny_print+0xa4>
		{
			ch = *( format++ );
 80233bc:	68bb      	ldr	r3, [r7, #8]
 80233be:	1c5a      	adds	r2, r3, #1
 80233c0:	60ba      	str	r2, [r7, #8]
 80233c2:	781b      	ldrb	r3, [r3, #0]
 80233c4:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 80233c6:	68fb      	ldr	r3, [r7, #12]
 80233c8:	7f1b      	ldrb	r3, [r3, #28]
 80233ca:	f043 0302 	orr.w	r3, r3, #2
 80233ce:	b2da      	uxtb	r2, r3
 80233d0:	68fb      	ldr	r3, [r7, #12]
 80233d2:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 80233d4:	697b      	ldr	r3, [r7, #20]
 80233d6:	2b30      	cmp	r3, #48	@ 0x30
 80233d8:	d0f0      	beq.n	80233bc <tiny_print+0x8c>
		}
		if( ch == '*' )
 80233da:	697b      	ldr	r3, [r7, #20]
 80233dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80233de:	d120      	bne.n	8023422 <tiny_print+0xf2>
		{
			ch = *( format++ );
 80233e0:	68bb      	ldr	r3, [r7, #8]
 80233e2:	1c5a      	adds	r2, r3, #1
 80233e4:	60ba      	str	r2, [r7, #8]
 80233e6:	781b      	ldrb	r3, [r3, #0]
 80233e8:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 80233ea:	687b      	ldr	r3, [r7, #4]
 80233ec:	1d1a      	adds	r2, r3, #4
 80233ee:	607a      	str	r2, [r7, #4]
 80233f0:	681a      	ldr	r2, [r3, #0]
 80233f2:	68fb      	ldr	r3, [r7, #12]
 80233f4:	615a      	str	r2, [r3, #20]
 80233f6:	e01a      	b.n	802342e <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 80233f8:	68fb      	ldr	r3, [r7, #12]
 80233fa:	695a      	ldr	r2, [r3, #20]
 80233fc:	4613      	mov	r3, r2
 80233fe:	009b      	lsls	r3, r3, #2
 8023400:	4413      	add	r3, r2
 8023402:	005b      	lsls	r3, r3, #1
 8023404:	461a      	mov	r2, r3
 8023406:	68fb      	ldr	r3, [r7, #12]
 8023408:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 802340a:	68fb      	ldr	r3, [r7, #12]
 802340c:	695a      	ldr	r2, [r3, #20]
 802340e:	697b      	ldr	r3, [r7, #20]
 8023410:	3b30      	subs	r3, #48	@ 0x30
 8023412:	441a      	add	r2, r3
 8023414:	68fb      	ldr	r3, [r7, #12]
 8023416:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 8023418:	68bb      	ldr	r3, [r7, #8]
 802341a:	1c5a      	adds	r2, r3, #1
 802341c:	60ba      	str	r2, [r7, #8]
 802341e:	781b      	ldrb	r3, [r3, #0]
 8023420:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 8023422:	697b      	ldr	r3, [r7, #20]
 8023424:	2b2f      	cmp	r3, #47	@ 0x2f
 8023426:	dd02      	ble.n	802342e <tiny_print+0xfe>
 8023428:	697b      	ldr	r3, [r7, #20]
 802342a:	2b39      	cmp	r3, #57	@ 0x39
 802342c:	dde4      	ble.n	80233f8 <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 802342e:	697b      	ldr	r3, [r7, #20]
 8023430:	2b2e      	cmp	r3, #46	@ 0x2e
 8023432:	d12e      	bne.n	8023492 <tiny_print+0x162>
		{
			ch = *( format++ );
 8023434:	68bb      	ldr	r3, [r7, #8]
 8023436:	1c5a      	adds	r2, r3, #1
 8023438:	60ba      	str	r2, [r7, #8]
 802343a:	781b      	ldrb	r3, [r3, #0]
 802343c:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 802343e:	697b      	ldr	r3, [r7, #20]
 8023440:	2b2a      	cmp	r3, #42	@ 0x2a
 8023442:	d120      	bne.n	8023486 <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 8023444:	687b      	ldr	r3, [r7, #4]
 8023446:	1d1a      	adds	r2, r3, #4
 8023448:	607a      	str	r2, [r7, #4]
 802344a:	681a      	ldr	r2, [r3, #0]
 802344c:	68fb      	ldr	r3, [r7, #12]
 802344e:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 8023450:	68bb      	ldr	r3, [r7, #8]
 8023452:	1c5a      	adds	r2, r3, #1
 8023454:	60ba      	str	r2, [r7, #8]
 8023456:	781b      	ldrb	r3, [r3, #0]
 8023458:	617b      	str	r3, [r7, #20]
 802345a:	e01a      	b.n	8023492 <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 802345c:	68fb      	ldr	r3, [r7, #12]
 802345e:	699a      	ldr	r2, [r3, #24]
 8023460:	4613      	mov	r3, r2
 8023462:	009b      	lsls	r3, r3, #2
 8023464:	4413      	add	r3, r2
 8023466:	005b      	lsls	r3, r3, #1
 8023468:	461a      	mov	r2, r3
 802346a:	68fb      	ldr	r3, [r7, #12]
 802346c:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 802346e:	68fb      	ldr	r3, [r7, #12]
 8023470:	699a      	ldr	r2, [r3, #24]
 8023472:	697b      	ldr	r3, [r7, #20]
 8023474:	3b30      	subs	r3, #48	@ 0x30
 8023476:	441a      	add	r2, r3
 8023478:	68fb      	ldr	r3, [r7, #12]
 802347a:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 802347c:	68bb      	ldr	r3, [r7, #8]
 802347e:	1c5a      	adds	r2, r3, #1
 8023480:	60ba      	str	r2, [r7, #8]
 8023482:	781b      	ldrb	r3, [r3, #0]
 8023484:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 8023486:	697b      	ldr	r3, [r7, #20]
 8023488:	2b2f      	cmp	r3, #47	@ 0x2f
 802348a:	dd02      	ble.n	8023492 <tiny_print+0x162>
 802348c:	697b      	ldr	r3, [r7, #20]
 802348e:	2b39      	cmp	r3, #57	@ 0x39
 8023490:	dde4      	ble.n	802345c <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 8023492:	68fb      	ldr	r3, [r7, #12]
 8023494:	699b      	ldr	r3, [r3, #24]
 8023496:	2b00      	cmp	r3, #0
 8023498:	d104      	bne.n	80234a4 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 802349a:	68fb      	ldr	r3, [r7, #12]
 802349c:	699b      	ldr	r3, [r3, #24]
 802349e:	1e5a      	subs	r2, r3, #1
 80234a0:	68fb      	ldr	r3, [r7, #12]
 80234a2:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 80234a4:	697b      	ldr	r3, [r7, #20]
 80234a6:	2b70      	cmp	r3, #112	@ 0x70
 80234a8:	d118      	bne.n	80234dc <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 80234aa:	68bb      	ldr	r3, [r7, #8]
 80234ac:	781b      	ldrb	r3, [r3, #0]
 80234ae:	2b69      	cmp	r3, #105	@ 0x69
 80234b0:	d114      	bne.n	80234dc <tiny_print+0x1ac>
 80234b2:	68bb      	ldr	r3, [r7, #8]
 80234b4:	3301      	adds	r3, #1
 80234b6:	781b      	ldrb	r3, [r3, #0]
 80234b8:	2b70      	cmp	r3, #112	@ 0x70
 80234ba:	d10f      	bne.n	80234dc <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 80234bc:	68bb      	ldr	r3, [r7, #8]
 80234be:	3302      	adds	r3, #2
 80234c0:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 80234c2:	687b      	ldr	r3, [r7, #4]
 80234c4:	1d1a      	adds	r2, r3, #4
 80234c6:	607a      	str	r2, [r7, #4]
 80234c8:	681b      	ldr	r3, [r3, #0]
 80234ca:	4619      	mov	r1, r3
 80234cc:	68f8      	ldr	r0, [r7, #12]
 80234ce:	f7ff feb7 	bl	8023240 <printIPv6>
 80234d2:	4603      	mov	r3, r0
 80234d4:	2b00      	cmp	r3, #0
 80234d6:	f040 80ad 	bne.w	8023634 <tiny_print+0x304>
				{
					break;
 80234da:	e0b8      	b.n	802364e <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 80234dc:	697b      	ldr	r3, [r7, #20]
 80234de:	2b73      	cmp	r3, #115	@ 0x73
 80234e0:	d112      	bne.n	8023508 <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 80234e2:	687b      	ldr	r3, [r7, #4]
 80234e4:	1d1a      	adds	r2, r3, #4
 80234e6:	607a      	str	r2, [r7, #4]
 80234e8:	681b      	ldr	r3, [r3, #0]
 80234ea:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 80234ec:	2c00      	cmp	r4, #0
 80234ee:	d001      	beq.n	80234f4 <tiny_print+0x1c4>
 80234f0:	4623      	mov	r3, r4
 80234f2:	e000      	b.n	80234f6 <tiny_print+0x1c6>
 80234f4:	4b5a      	ldr	r3, [pc, #360]	@ (8023660 <tiny_print+0x330>)
 80234f6:	4619      	mov	r1, r3
 80234f8:	68f8      	ldr	r0, [r7, #12]
 80234fa:	f7ff fd21 	bl	8022f40 <prints>
 80234fe:	4603      	mov	r3, r0
 8023500:	2b00      	cmp	r3, #0
 8023502:	f040 8099 	bne.w	8023638 <tiny_print+0x308>
			{
				break;
 8023506:	e0a2      	b.n	802364e <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 8023508:	697b      	ldr	r3, [r7, #20]
 802350a:	2b63      	cmp	r3, #99	@ 0x63
 802350c:	d10f      	bne.n	802352e <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 802350e:	687b      	ldr	r3, [r7, #4]
 8023510:	1d1a      	adds	r2, r3, #4
 8023512:	607a      	str	r2, [r7, #4]
 8023514:	681b      	ldr	r3, [r3, #0]
 8023516:	b2db      	uxtb	r3, r3
 8023518:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 802351a:	7c3b      	ldrb	r3, [r7, #16]
 802351c:	4619      	mov	r1, r3
 802351e:	68f8      	ldr	r0, [r7, #12]
 8023520:	f7ff fc87 	bl	8022e32 <strbuf_printchar>
 8023524:	4603      	mov	r3, r0
 8023526:	2b00      	cmp	r3, #0
 8023528:	f040 8088 	bne.w	802363c <tiny_print+0x30c>
			{
				return;
 802352c:	e095      	b.n	802365a <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 802352e:	697b      	ldr	r3, [r7, #20]
 8023530:	2b6c      	cmp	r3, #108	@ 0x6c
 8023532:	d109      	bne.n	8023548 <tiny_print+0x218>
		{
			ch = *( format++ );
 8023534:	68bb      	ldr	r3, [r7, #8]
 8023536:	1c5a      	adds	r2, r3, #1
 8023538:	60ba      	str	r2, [r7, #8]
 802353a:	781b      	ldrb	r3, [r3, #0]
 802353c:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 802353e:	68fa      	ldr	r2, [r7, #12]
 8023540:	7f93      	ldrb	r3, [r2, #30]
 8023542:	f043 0304 	orr.w	r3, r3, #4
 8023546:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 8023548:	697b      	ldr	r3, [r7, #20]
 802354a:	2b4c      	cmp	r3, #76	@ 0x4c
 802354c:	d109      	bne.n	8023562 <tiny_print+0x232>
		{
			ch = *( format++ );
 802354e:	68bb      	ldr	r3, [r7, #8]
 8023550:	1c5a      	adds	r2, r3, #1
 8023552:	60ba      	str	r2, [r7, #8]
 8023554:	781b      	ldrb	r3, [r3, #0]
 8023556:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 8023558:	68fa      	ldr	r2, [r7, #12]
 802355a:	7f93      	ldrb	r3, [r2, #30]
 802355c:	f043 0308 	orr.w	r3, r3, #8
 8023560:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 8023562:	68fb      	ldr	r3, [r7, #12]
 8023564:	220a      	movs	r2, #10
 8023566:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 8023568:	68fb      	ldr	r3, [r7, #12]
 802356a:	2261      	movs	r2, #97	@ 0x61
 802356c:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 802356e:	697b      	ldr	r3, [r7, #20]
 8023570:	2b64      	cmp	r3, #100	@ 0x64
 8023572:	d002      	beq.n	802357a <tiny_print+0x24a>
 8023574:	697b      	ldr	r3, [r7, #20]
 8023576:	2b75      	cmp	r3, #117	@ 0x75
 8023578:	d116      	bne.n	80235a8 <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 802357a:	697b      	ldr	r3, [r7, #20]
 802357c:	2b64      	cmp	r3, #100	@ 0x64
 802357e:	bf0c      	ite	eq
 8023580:	2301      	moveq	r3, #1
 8023582:	2300      	movne	r3, #0
 8023584:	b2d9      	uxtb	r1, r3
 8023586:	68fa      	ldr	r2, [r7, #12]
 8023588:	7f93      	ldrb	r3, [r2, #30]
 802358a:	f361 0300 	bfi	r3, r1, #0, #1
 802358e:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8023590:	687b      	ldr	r3, [r7, #4]
 8023592:	1d1a      	adds	r2, r3, #4
 8023594:	607a      	str	r2, [r7, #4]
 8023596:	681b      	ldr	r3, [r3, #0]
 8023598:	4619      	mov	r1, r3
 802359a:	68f8      	ldr	r0, [r7, #12]
 802359c:	f7ff fd78 	bl	8023090 <printi>
 80235a0:	4603      	mov	r3, r0
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	d14c      	bne.n	8023640 <tiny_print+0x310>
			{
				break;
 80235a6:	e052      	b.n	802364e <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 80235a8:	68fb      	ldr	r3, [r7, #12]
 80235aa:	2210      	movs	r2, #16
 80235ac:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 80235ae:	697b      	ldr	r3, [r7, #20]
 80235b0:	2b78      	cmp	r3, #120	@ 0x78
 80235b2:	d117      	bne.n	80235e4 <tiny_print+0x2b4>
 80235b4:	68bb      	ldr	r3, [r7, #8]
 80235b6:	781b      	ldrb	r3, [r3, #0]
 80235b8:	2b69      	cmp	r3, #105	@ 0x69
 80235ba:	d113      	bne.n	80235e4 <tiny_print+0x2b4>
 80235bc:	68bb      	ldr	r3, [r7, #8]
 80235be:	3301      	adds	r3, #1
 80235c0:	781b      	ldrb	r3, [r3, #0]
 80235c2:	2b70      	cmp	r3, #112	@ 0x70
 80235c4:	d10e      	bne.n	80235e4 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 80235c6:	68bb      	ldr	r3, [r7, #8]
 80235c8:	3302      	adds	r3, #2
 80235ca:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 80235cc:	687b      	ldr	r3, [r7, #4]
 80235ce:	1d1a      	adds	r2, r3, #4
 80235d0:	607a      	str	r2, [r7, #4]
 80235d2:	681b      	ldr	r3, [r3, #0]
 80235d4:	4619      	mov	r1, r3
 80235d6:	68f8      	ldr	r0, [r7, #12]
 80235d8:	f7ff fde8 	bl	80231ac <printIp>
 80235dc:	4603      	mov	r3, r0
 80235de:	2b00      	cmp	r3, #0
 80235e0:	d130      	bne.n	8023644 <tiny_print+0x314>
			{
				break;
 80235e2:	e034      	b.n	802364e <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 80235e4:	697b      	ldr	r3, [r7, #20]
 80235e6:	2b78      	cmp	r3, #120	@ 0x78
 80235e8:	d009      	beq.n	80235fe <tiny_print+0x2ce>
 80235ea:	697b      	ldr	r3, [r7, #20]
 80235ec:	2b58      	cmp	r3, #88	@ 0x58
 80235ee:	d006      	beq.n	80235fe <tiny_print+0x2ce>
 80235f0:	697b      	ldr	r3, [r7, #20]
 80235f2:	2b70      	cmp	r3, #112	@ 0x70
 80235f4:	d003      	beq.n	80235fe <tiny_print+0x2ce>
 80235f6:	697b      	ldr	r3, [r7, #20]
 80235f8:	2b6f      	cmp	r3, #111	@ 0x6f
 80235fa:	f47f ae9f 	bne.w	802333c <tiny_print+0xc>
		{
			if( ch == 'X' )
 80235fe:	697b      	ldr	r3, [r7, #20]
 8023600:	2b58      	cmp	r3, #88	@ 0x58
 8023602:	d103      	bne.n	802360c <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8023604:	68fb      	ldr	r3, [r7, #12]
 8023606:	2241      	movs	r2, #65	@ 0x41
 8023608:	775a      	strb	r2, [r3, #29]
 802360a:	e005      	b.n	8023618 <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 802360c:	697b      	ldr	r3, [r7, #20]
 802360e:	2b6f      	cmp	r3, #111	@ 0x6f
 8023610:	d102      	bne.n	8023618 <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8023612:	68fb      	ldr	r3, [r7, #12]
 8023614:	2208      	movs	r2, #8
 8023616:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8023618:	687b      	ldr	r3, [r7, #4]
 802361a:	1d1a      	adds	r2, r3, #4
 802361c:	607a      	str	r2, [r7, #4]
 802361e:	681b      	ldr	r3, [r3, #0]
 8023620:	4619      	mov	r1, r3
 8023622:	68f8      	ldr	r0, [r7, #12]
 8023624:	f7ff fd34 	bl	8023090 <printi>
 8023628:	4603      	mov	r3, r0
 802362a:	2b00      	cmp	r3, #0
 802362c:	d00e      	beq.n	802364c <tiny_print+0x31c>
			{
				break;
			}
			continue;
 802362e:	e00a      	b.n	8023646 <tiny_print+0x316>
			continue;
 8023630:	bf00      	nop
 8023632:	e683      	b.n	802333c <tiny_print+0xc>
				continue;
 8023634:	bf00      	nop
 8023636:	e681      	b.n	802333c <tiny_print+0xc>
			continue;
 8023638:	bf00      	nop
 802363a:	e67f      	b.n	802333c <tiny_print+0xc>
			continue;
 802363c:	bf00      	nop
 802363e:	e67d      	b.n	802333c <tiny_print+0xc>
			continue;
 8023640:	bf00      	nop
 8023642:	e67b      	b.n	802333c <tiny_print+0xc>
			continue;
 8023644:	bf00      	nop
	{
 8023646:	e679      	b.n	802333c <tiny_print+0xc>
			break;
 8023648:	bf00      	nop
 802364a:	e000      	b.n	802364e <tiny_print+0x31e>
				break;
 802364c:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 802364e:	2100      	movs	r1, #0
 8023650:	68f8      	ldr	r0, [r7, #12]
 8023652:	f7ff fbee 	bl	8022e32 <strbuf_printchar>
 8023656:	e000      	b.n	802365a <tiny_print+0x32a>
					return;
 8023658:	bf00      	nop
}
 802365a:	371c      	adds	r7, #28
 802365c:	46bd      	mov	sp, r7
 802365e:	bd90      	pop	{r4, r7, pc}
 8023660:	08027cac 	.word	0x08027cac

08023664 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 8023664:	b580      	push	{r7, lr}
 8023666:	b08c      	sub	sp, #48	@ 0x30
 8023668:	af00      	add	r7, sp, #0
 802366a:	60f8      	str	r0, [r7, #12]
 802366c:	60b9      	str	r1, [r7, #8]
 802366e:	607a      	str	r2, [r7, #4]
 8023670:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8023672:	68fa      	ldr	r2, [r7, #12]
 8023674:	68bb      	ldr	r3, [r7, #8]
 8023676:	441a      	add	r2, r3
 8023678:	f107 0310 	add.w	r3, r7, #16
 802367c:	68f9      	ldr	r1, [r7, #12]
 802367e:	4618      	mov	r0, r3
 8023680:	f7ff fbb9 	bl	8022df6 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023684:	f107 0310 	add.w	r3, r7, #16
 8023688:	683a      	ldr	r2, [r7, #0]
 802368a:	6879      	ldr	r1, [r7, #4]
 802368c:	4618      	mov	r0, r3
 802368e:	f7ff fe4f 	bl	8023330 <tiny_print>

	return strBuf.curLen;
 8023692:	69fb      	ldr	r3, [r7, #28]
}
 8023694:	4618      	mov	r0, r3
 8023696:	3730      	adds	r7, #48	@ 0x30
 8023698:	46bd      	mov	sp, r7
 802369a:	bd80      	pop	{r7, pc}

0802369c <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 802369c:	b40c      	push	{r2, r3}
 802369e:	b580      	push	{r7, lr}
 80236a0:	b08c      	sub	sp, #48	@ 0x30
 80236a2:	af00      	add	r7, sp, #0
 80236a4:	6078      	str	r0, [r7, #4]
 80236a6:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 80236a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80236ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 80236ae:	687a      	ldr	r2, [r7, #4]
 80236b0:	683b      	ldr	r3, [r7, #0]
 80236b2:	441a      	add	r2, r3
 80236b4:	f107 030c 	add.w	r3, r7, #12
 80236b8:	6879      	ldr	r1, [r7, #4]
 80236ba:	4618      	mov	r0, r3
 80236bc:	f7ff fb9b 	bl	8022df6 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 80236c0:	f107 030c 	add.w	r3, r7, #12
 80236c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80236c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80236c8:	4618      	mov	r0, r3
 80236ca:	f7ff fe31 	bl	8023330 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 80236ce:	69bb      	ldr	r3, [r7, #24]
}
 80236d0:	4618      	mov	r0, r3
 80236d2:	3730      	adds	r7, #48	@ 0x30
 80236d4:	46bd      	mov	sp, r7
 80236d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80236da:	b002      	add	sp, #8
 80236dc:	4770      	bx	lr

080236de <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 80236de:	b40e      	push	{r1, r2, r3}
 80236e0:	b580      	push	{r7, lr}
 80236e2:	b08d      	sub	sp, #52	@ 0x34
 80236e4:	af00      	add	r7, sp, #0
 80236e6:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 80236e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80236ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 80236ee:	687b      	ldr	r3, [r7, #4]
 80236f0:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 80236f4:	f107 030c 	add.w	r3, r7, #12
 80236f8:	6879      	ldr	r1, [r7, #4]
 80236fa:	4618      	mov	r0, r3
 80236fc:	f7ff fb7b 	bl	8022df6 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023700:	f107 030c 	add.w	r3, r7, #12
 8023704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023706:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8023708:	4618      	mov	r0, r3
 802370a:	f7ff fe11 	bl	8023330 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 802370e:	69bb      	ldr	r3, [r7, #24]
}
 8023710:	4618      	mov	r0, r3
 8023712:	3734      	adds	r7, #52	@ 0x34
 8023714:	46bd      	mov	sp, r7
 8023716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802371a:	b003      	add	sp, #12
 802371c:	4770      	bx	lr
	...

08023720 <rand>:
 8023720:	4b16      	ldr	r3, [pc, #88]	@ (802377c <rand+0x5c>)
 8023722:	b510      	push	{r4, lr}
 8023724:	681c      	ldr	r4, [r3, #0]
 8023726:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8023728:	b9b3      	cbnz	r3, 8023758 <rand+0x38>
 802372a:	2018      	movs	r0, #24
 802372c:	f000 fa82 	bl	8023c34 <malloc>
 8023730:	4602      	mov	r2, r0
 8023732:	6320      	str	r0, [r4, #48]	@ 0x30
 8023734:	b920      	cbnz	r0, 8023740 <rand+0x20>
 8023736:	4b12      	ldr	r3, [pc, #72]	@ (8023780 <rand+0x60>)
 8023738:	4812      	ldr	r0, [pc, #72]	@ (8023784 <rand+0x64>)
 802373a:	2152      	movs	r1, #82	@ 0x52
 802373c:	f000 fa12 	bl	8023b64 <__assert_func>
 8023740:	4911      	ldr	r1, [pc, #68]	@ (8023788 <rand+0x68>)
 8023742:	4b12      	ldr	r3, [pc, #72]	@ (802378c <rand+0x6c>)
 8023744:	e9c0 1300 	strd	r1, r3, [r0]
 8023748:	4b11      	ldr	r3, [pc, #68]	@ (8023790 <rand+0x70>)
 802374a:	6083      	str	r3, [r0, #8]
 802374c:	230b      	movs	r3, #11
 802374e:	8183      	strh	r3, [r0, #12]
 8023750:	2100      	movs	r1, #0
 8023752:	2001      	movs	r0, #1
 8023754:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023758:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802375a:	480e      	ldr	r0, [pc, #56]	@ (8023794 <rand+0x74>)
 802375c:	690b      	ldr	r3, [r1, #16]
 802375e:	694c      	ldr	r4, [r1, #20]
 8023760:	4a0d      	ldr	r2, [pc, #52]	@ (8023798 <rand+0x78>)
 8023762:	4358      	muls	r0, r3
 8023764:	fb02 0004 	mla	r0, r2, r4, r0
 8023768:	fba3 3202 	umull	r3, r2, r3, r2
 802376c:	3301      	adds	r3, #1
 802376e:	eb40 0002 	adc.w	r0, r0, r2
 8023772:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8023776:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802377a:	bd10      	pop	{r4, pc}
 802377c:	20000038 	.word	0x20000038
 8023780:	08027e78 	.word	0x08027e78
 8023784:	08027e8f 	.word	0x08027e8f
 8023788:	abcd330e 	.word	0xabcd330e
 802378c:	e66d1234 	.word	0xe66d1234
 8023790:	0005deec 	.word	0x0005deec
 8023794:	5851f42d 	.word	0x5851f42d
 8023798:	4c957f2d 	.word	0x4c957f2d

0802379c <std>:
 802379c:	2300      	movs	r3, #0
 802379e:	b510      	push	{r4, lr}
 80237a0:	4604      	mov	r4, r0
 80237a2:	e9c0 3300 	strd	r3, r3, [r0]
 80237a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80237aa:	6083      	str	r3, [r0, #8]
 80237ac:	8181      	strh	r1, [r0, #12]
 80237ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80237b0:	81c2      	strh	r2, [r0, #14]
 80237b2:	6183      	str	r3, [r0, #24]
 80237b4:	4619      	mov	r1, r3
 80237b6:	2208      	movs	r2, #8
 80237b8:	305c      	adds	r0, #92	@ 0x5c
 80237ba:	f7ff fa6c 	bl	8022c96 <memset>
 80237be:	4b0d      	ldr	r3, [pc, #52]	@ (80237f4 <std+0x58>)
 80237c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80237c2:	4b0d      	ldr	r3, [pc, #52]	@ (80237f8 <std+0x5c>)
 80237c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80237c6:	4b0d      	ldr	r3, [pc, #52]	@ (80237fc <std+0x60>)
 80237c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80237ca:	4b0d      	ldr	r3, [pc, #52]	@ (8023800 <std+0x64>)
 80237cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80237ce:	4b0d      	ldr	r3, [pc, #52]	@ (8023804 <std+0x68>)
 80237d0:	6224      	str	r4, [r4, #32]
 80237d2:	429c      	cmp	r4, r3
 80237d4:	d006      	beq.n	80237e4 <std+0x48>
 80237d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80237da:	4294      	cmp	r4, r2
 80237dc:	d002      	beq.n	80237e4 <std+0x48>
 80237de:	33d0      	adds	r3, #208	@ 0xd0
 80237e0:	429c      	cmp	r4, r3
 80237e2:	d105      	bne.n	80237f0 <std+0x54>
 80237e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80237e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237ec:	f000 b9b6 	b.w	8023b5c <__retarget_lock_init_recursive>
 80237f0:	bd10      	pop	{r4, pc}
 80237f2:	bf00      	nop
 80237f4:	08023921 	.word	0x08023921
 80237f8:	08023943 	.word	0x08023943
 80237fc:	0802397b 	.word	0x0802397b
 8023800:	0802399f 	.word	0x0802399f
 8023804:	2000273c 	.word	0x2000273c

08023808 <stdio_exit_handler>:
 8023808:	4a02      	ldr	r2, [pc, #8]	@ (8023814 <stdio_exit_handler+0xc>)
 802380a:	4903      	ldr	r1, [pc, #12]	@ (8023818 <stdio_exit_handler+0x10>)
 802380c:	4803      	ldr	r0, [pc, #12]	@ (802381c <stdio_exit_handler+0x14>)
 802380e:	f000 b869 	b.w	80238e4 <_fwalk_sglue>
 8023812:	bf00      	nop
 8023814:	2000002c 	.word	0x2000002c
 8023818:	08023ea9 	.word	0x08023ea9
 802381c:	2000003c 	.word	0x2000003c

08023820 <cleanup_stdio>:
 8023820:	6841      	ldr	r1, [r0, #4]
 8023822:	4b0c      	ldr	r3, [pc, #48]	@ (8023854 <cleanup_stdio+0x34>)
 8023824:	4299      	cmp	r1, r3
 8023826:	b510      	push	{r4, lr}
 8023828:	4604      	mov	r4, r0
 802382a:	d001      	beq.n	8023830 <cleanup_stdio+0x10>
 802382c:	f000 fb3c 	bl	8023ea8 <_fflush_r>
 8023830:	68a1      	ldr	r1, [r4, #8]
 8023832:	4b09      	ldr	r3, [pc, #36]	@ (8023858 <cleanup_stdio+0x38>)
 8023834:	4299      	cmp	r1, r3
 8023836:	d002      	beq.n	802383e <cleanup_stdio+0x1e>
 8023838:	4620      	mov	r0, r4
 802383a:	f000 fb35 	bl	8023ea8 <_fflush_r>
 802383e:	68e1      	ldr	r1, [r4, #12]
 8023840:	4b06      	ldr	r3, [pc, #24]	@ (802385c <cleanup_stdio+0x3c>)
 8023842:	4299      	cmp	r1, r3
 8023844:	d004      	beq.n	8023850 <cleanup_stdio+0x30>
 8023846:	4620      	mov	r0, r4
 8023848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802384c:	f000 bb2c 	b.w	8023ea8 <_fflush_r>
 8023850:	bd10      	pop	{r4, pc}
 8023852:	bf00      	nop
 8023854:	2000273c 	.word	0x2000273c
 8023858:	200027a4 	.word	0x200027a4
 802385c:	2000280c 	.word	0x2000280c

08023860 <global_stdio_init.part.0>:
 8023860:	b510      	push	{r4, lr}
 8023862:	4b0b      	ldr	r3, [pc, #44]	@ (8023890 <global_stdio_init.part.0+0x30>)
 8023864:	4c0b      	ldr	r4, [pc, #44]	@ (8023894 <global_stdio_init.part.0+0x34>)
 8023866:	4a0c      	ldr	r2, [pc, #48]	@ (8023898 <global_stdio_init.part.0+0x38>)
 8023868:	601a      	str	r2, [r3, #0]
 802386a:	4620      	mov	r0, r4
 802386c:	2200      	movs	r2, #0
 802386e:	2104      	movs	r1, #4
 8023870:	f7ff ff94 	bl	802379c <std>
 8023874:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8023878:	2201      	movs	r2, #1
 802387a:	2109      	movs	r1, #9
 802387c:	f7ff ff8e 	bl	802379c <std>
 8023880:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023884:	2202      	movs	r2, #2
 8023886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802388a:	2112      	movs	r1, #18
 802388c:	f7ff bf86 	b.w	802379c <std>
 8023890:	20002874 	.word	0x20002874
 8023894:	2000273c 	.word	0x2000273c
 8023898:	08023809 	.word	0x08023809

0802389c <__sfp_lock_acquire>:
 802389c:	4801      	ldr	r0, [pc, #4]	@ (80238a4 <__sfp_lock_acquire+0x8>)
 802389e:	f000 b95e 	b.w	8023b5e <__retarget_lock_acquire_recursive>
 80238a2:	bf00      	nop
 80238a4:	2000287d 	.word	0x2000287d

080238a8 <__sfp_lock_release>:
 80238a8:	4801      	ldr	r0, [pc, #4]	@ (80238b0 <__sfp_lock_release+0x8>)
 80238aa:	f000 b959 	b.w	8023b60 <__retarget_lock_release_recursive>
 80238ae:	bf00      	nop
 80238b0:	2000287d 	.word	0x2000287d

080238b4 <__sinit>:
 80238b4:	b510      	push	{r4, lr}
 80238b6:	4604      	mov	r4, r0
 80238b8:	f7ff fff0 	bl	802389c <__sfp_lock_acquire>
 80238bc:	6a23      	ldr	r3, [r4, #32]
 80238be:	b11b      	cbz	r3, 80238c8 <__sinit+0x14>
 80238c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238c4:	f7ff bff0 	b.w	80238a8 <__sfp_lock_release>
 80238c8:	4b04      	ldr	r3, [pc, #16]	@ (80238dc <__sinit+0x28>)
 80238ca:	6223      	str	r3, [r4, #32]
 80238cc:	4b04      	ldr	r3, [pc, #16]	@ (80238e0 <__sinit+0x2c>)
 80238ce:	681b      	ldr	r3, [r3, #0]
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	d1f5      	bne.n	80238c0 <__sinit+0xc>
 80238d4:	f7ff ffc4 	bl	8023860 <global_stdio_init.part.0>
 80238d8:	e7f2      	b.n	80238c0 <__sinit+0xc>
 80238da:	bf00      	nop
 80238dc:	08023821 	.word	0x08023821
 80238e0:	20002874 	.word	0x20002874

080238e4 <_fwalk_sglue>:
 80238e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80238e8:	4607      	mov	r7, r0
 80238ea:	4688      	mov	r8, r1
 80238ec:	4614      	mov	r4, r2
 80238ee:	2600      	movs	r6, #0
 80238f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80238f4:	f1b9 0901 	subs.w	r9, r9, #1
 80238f8:	d505      	bpl.n	8023906 <_fwalk_sglue+0x22>
 80238fa:	6824      	ldr	r4, [r4, #0]
 80238fc:	2c00      	cmp	r4, #0
 80238fe:	d1f7      	bne.n	80238f0 <_fwalk_sglue+0xc>
 8023900:	4630      	mov	r0, r6
 8023902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023906:	89ab      	ldrh	r3, [r5, #12]
 8023908:	2b01      	cmp	r3, #1
 802390a:	d907      	bls.n	802391c <_fwalk_sglue+0x38>
 802390c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023910:	3301      	adds	r3, #1
 8023912:	d003      	beq.n	802391c <_fwalk_sglue+0x38>
 8023914:	4629      	mov	r1, r5
 8023916:	4638      	mov	r0, r7
 8023918:	47c0      	blx	r8
 802391a:	4306      	orrs	r6, r0
 802391c:	3568      	adds	r5, #104	@ 0x68
 802391e:	e7e9      	b.n	80238f4 <_fwalk_sglue+0x10>

08023920 <__sread>:
 8023920:	b510      	push	{r4, lr}
 8023922:	460c      	mov	r4, r1
 8023924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023928:	f000 f8ca 	bl	8023ac0 <_read_r>
 802392c:	2800      	cmp	r0, #0
 802392e:	bfab      	itete	ge
 8023930:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8023932:	89a3      	ldrhlt	r3, [r4, #12]
 8023934:	181b      	addge	r3, r3, r0
 8023936:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802393a:	bfac      	ite	ge
 802393c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802393e:	81a3      	strhlt	r3, [r4, #12]
 8023940:	bd10      	pop	{r4, pc}

08023942 <__swrite>:
 8023942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023946:	461f      	mov	r7, r3
 8023948:	898b      	ldrh	r3, [r1, #12]
 802394a:	05db      	lsls	r3, r3, #23
 802394c:	4605      	mov	r5, r0
 802394e:	460c      	mov	r4, r1
 8023950:	4616      	mov	r6, r2
 8023952:	d505      	bpl.n	8023960 <__swrite+0x1e>
 8023954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023958:	2302      	movs	r3, #2
 802395a:	2200      	movs	r2, #0
 802395c:	f000 f89e 	bl	8023a9c <_lseek_r>
 8023960:	89a3      	ldrh	r3, [r4, #12]
 8023962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023966:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802396a:	81a3      	strh	r3, [r4, #12]
 802396c:	4632      	mov	r2, r6
 802396e:	463b      	mov	r3, r7
 8023970:	4628      	mov	r0, r5
 8023972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023976:	f000 b8b5 	b.w	8023ae4 <_write_r>

0802397a <__sseek>:
 802397a:	b510      	push	{r4, lr}
 802397c:	460c      	mov	r4, r1
 802397e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023982:	f000 f88b 	bl	8023a9c <_lseek_r>
 8023986:	1c43      	adds	r3, r0, #1
 8023988:	89a3      	ldrh	r3, [r4, #12]
 802398a:	bf15      	itete	ne
 802398c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802398e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023992:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8023996:	81a3      	strheq	r3, [r4, #12]
 8023998:	bf18      	it	ne
 802399a:	81a3      	strhne	r3, [r4, #12]
 802399c:	bd10      	pop	{r4, pc}

0802399e <__sclose>:
 802399e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80239a2:	f000 b86b 	b.w	8023a7c <_close_r>

080239a6 <memcmp>:
 80239a6:	b510      	push	{r4, lr}
 80239a8:	3901      	subs	r1, #1
 80239aa:	4402      	add	r2, r0
 80239ac:	4290      	cmp	r0, r2
 80239ae:	d101      	bne.n	80239b4 <memcmp+0xe>
 80239b0:	2000      	movs	r0, #0
 80239b2:	e005      	b.n	80239c0 <memcmp+0x1a>
 80239b4:	7803      	ldrb	r3, [r0, #0]
 80239b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80239ba:	42a3      	cmp	r3, r4
 80239bc:	d001      	beq.n	80239c2 <memcmp+0x1c>
 80239be:	1b18      	subs	r0, r3, r4
 80239c0:	bd10      	pop	{r4, pc}
 80239c2:	3001      	adds	r0, #1
 80239c4:	e7f2      	b.n	80239ac <memcmp+0x6>

080239c6 <memmove>:
 80239c6:	4288      	cmp	r0, r1
 80239c8:	b510      	push	{r4, lr}
 80239ca:	eb01 0402 	add.w	r4, r1, r2
 80239ce:	d902      	bls.n	80239d6 <memmove+0x10>
 80239d0:	4284      	cmp	r4, r0
 80239d2:	4623      	mov	r3, r4
 80239d4:	d807      	bhi.n	80239e6 <memmove+0x20>
 80239d6:	1e43      	subs	r3, r0, #1
 80239d8:	42a1      	cmp	r1, r4
 80239da:	d008      	beq.n	80239ee <memmove+0x28>
 80239dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80239e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80239e4:	e7f8      	b.n	80239d8 <memmove+0x12>
 80239e6:	4402      	add	r2, r0
 80239e8:	4601      	mov	r1, r0
 80239ea:	428a      	cmp	r2, r1
 80239ec:	d100      	bne.n	80239f0 <memmove+0x2a>
 80239ee:	bd10      	pop	{r4, pc}
 80239f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80239f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80239f8:	e7f7      	b.n	80239ea <memmove+0x24>
	...

080239fc <strcasecmp>:
 80239fc:	b530      	push	{r4, r5, lr}
 80239fe:	4d0b      	ldr	r5, [pc, #44]	@ (8023a2c <strcasecmp+0x30>)
 8023a00:	4604      	mov	r4, r0
 8023a02:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023a06:	5cea      	ldrb	r2, [r5, r3]
 8023a08:	f002 0203 	and.w	r2, r2, #3
 8023a0c:	2a01      	cmp	r2, #1
 8023a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023a12:	5ca8      	ldrb	r0, [r5, r2]
 8023a14:	f000 0003 	and.w	r0, r0, #3
 8023a18:	bf08      	it	eq
 8023a1a:	3320      	addeq	r3, #32
 8023a1c:	2801      	cmp	r0, #1
 8023a1e:	bf08      	it	eq
 8023a20:	3220      	addeq	r2, #32
 8023a22:	1a98      	subs	r0, r3, r2
 8023a24:	d101      	bne.n	8023a2a <strcasecmp+0x2e>
 8023a26:	2a00      	cmp	r2, #0
 8023a28:	d1eb      	bne.n	8023a02 <strcasecmp+0x6>
 8023a2a:	bd30      	pop	{r4, r5, pc}
 8023a2c:	08027f24 	.word	0x08027f24

08023a30 <strncmp>:
 8023a30:	b510      	push	{r4, lr}
 8023a32:	b16a      	cbz	r2, 8023a50 <strncmp+0x20>
 8023a34:	3901      	subs	r1, #1
 8023a36:	1884      	adds	r4, r0, r2
 8023a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023a3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023a40:	429a      	cmp	r2, r3
 8023a42:	d103      	bne.n	8023a4c <strncmp+0x1c>
 8023a44:	42a0      	cmp	r0, r4
 8023a46:	d001      	beq.n	8023a4c <strncmp+0x1c>
 8023a48:	2a00      	cmp	r2, #0
 8023a4a:	d1f5      	bne.n	8023a38 <strncmp+0x8>
 8023a4c:	1ad0      	subs	r0, r2, r3
 8023a4e:	bd10      	pop	{r4, pc}
 8023a50:	4610      	mov	r0, r2
 8023a52:	e7fc      	b.n	8023a4e <strncmp+0x1e>

08023a54 <strncpy>:
 8023a54:	b510      	push	{r4, lr}
 8023a56:	3901      	subs	r1, #1
 8023a58:	4603      	mov	r3, r0
 8023a5a:	b132      	cbz	r2, 8023a6a <strncpy+0x16>
 8023a5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023a60:	f803 4b01 	strb.w	r4, [r3], #1
 8023a64:	3a01      	subs	r2, #1
 8023a66:	2c00      	cmp	r4, #0
 8023a68:	d1f7      	bne.n	8023a5a <strncpy+0x6>
 8023a6a:	441a      	add	r2, r3
 8023a6c:	2100      	movs	r1, #0
 8023a6e:	4293      	cmp	r3, r2
 8023a70:	d100      	bne.n	8023a74 <strncpy+0x20>
 8023a72:	bd10      	pop	{r4, pc}
 8023a74:	f803 1b01 	strb.w	r1, [r3], #1
 8023a78:	e7f9      	b.n	8023a6e <strncpy+0x1a>
	...

08023a7c <_close_r>:
 8023a7c:	b538      	push	{r3, r4, r5, lr}
 8023a7e:	4d06      	ldr	r5, [pc, #24]	@ (8023a98 <_close_r+0x1c>)
 8023a80:	2300      	movs	r3, #0
 8023a82:	4604      	mov	r4, r0
 8023a84:	4608      	mov	r0, r1
 8023a86:	602b      	str	r3, [r5, #0]
 8023a88:	f7df faea 	bl	8003060 <_close>
 8023a8c:	1c43      	adds	r3, r0, #1
 8023a8e:	d102      	bne.n	8023a96 <_close_r+0x1a>
 8023a90:	682b      	ldr	r3, [r5, #0]
 8023a92:	b103      	cbz	r3, 8023a96 <_close_r+0x1a>
 8023a94:	6023      	str	r3, [r4, #0]
 8023a96:	bd38      	pop	{r3, r4, r5, pc}
 8023a98:	20002878 	.word	0x20002878

08023a9c <_lseek_r>:
 8023a9c:	b538      	push	{r3, r4, r5, lr}
 8023a9e:	4d07      	ldr	r5, [pc, #28]	@ (8023abc <_lseek_r+0x20>)
 8023aa0:	4604      	mov	r4, r0
 8023aa2:	4608      	mov	r0, r1
 8023aa4:	4611      	mov	r1, r2
 8023aa6:	2200      	movs	r2, #0
 8023aa8:	602a      	str	r2, [r5, #0]
 8023aaa:	461a      	mov	r2, r3
 8023aac:	f7df faff 	bl	80030ae <_lseek>
 8023ab0:	1c43      	adds	r3, r0, #1
 8023ab2:	d102      	bne.n	8023aba <_lseek_r+0x1e>
 8023ab4:	682b      	ldr	r3, [r5, #0]
 8023ab6:	b103      	cbz	r3, 8023aba <_lseek_r+0x1e>
 8023ab8:	6023      	str	r3, [r4, #0]
 8023aba:	bd38      	pop	{r3, r4, r5, pc}
 8023abc:	20002878 	.word	0x20002878

08023ac0 <_read_r>:
 8023ac0:	b538      	push	{r3, r4, r5, lr}
 8023ac2:	4d07      	ldr	r5, [pc, #28]	@ (8023ae0 <_read_r+0x20>)
 8023ac4:	4604      	mov	r4, r0
 8023ac6:	4608      	mov	r0, r1
 8023ac8:	4611      	mov	r1, r2
 8023aca:	2200      	movs	r2, #0
 8023acc:	602a      	str	r2, [r5, #0]
 8023ace:	461a      	mov	r2, r3
 8023ad0:	f7df fa8d 	bl	8002fee <_read>
 8023ad4:	1c43      	adds	r3, r0, #1
 8023ad6:	d102      	bne.n	8023ade <_read_r+0x1e>
 8023ad8:	682b      	ldr	r3, [r5, #0]
 8023ada:	b103      	cbz	r3, 8023ade <_read_r+0x1e>
 8023adc:	6023      	str	r3, [r4, #0]
 8023ade:	bd38      	pop	{r3, r4, r5, pc}
 8023ae0:	20002878 	.word	0x20002878

08023ae4 <_write_r>:
 8023ae4:	b538      	push	{r3, r4, r5, lr}
 8023ae6:	4d07      	ldr	r5, [pc, #28]	@ (8023b04 <_write_r+0x20>)
 8023ae8:	4604      	mov	r4, r0
 8023aea:	4608      	mov	r0, r1
 8023aec:	4611      	mov	r1, r2
 8023aee:	2200      	movs	r2, #0
 8023af0:	602a      	str	r2, [r5, #0]
 8023af2:	461a      	mov	r2, r3
 8023af4:	f7df fa98 	bl	8003028 <_write>
 8023af8:	1c43      	adds	r3, r0, #1
 8023afa:	d102      	bne.n	8023b02 <_write_r+0x1e>
 8023afc:	682b      	ldr	r3, [r5, #0]
 8023afe:	b103      	cbz	r3, 8023b02 <_write_r+0x1e>
 8023b00:	6023      	str	r3, [r4, #0]
 8023b02:	bd38      	pop	{r3, r4, r5, pc}
 8023b04:	20002878 	.word	0x20002878

08023b08 <__errno>:
 8023b08:	4b01      	ldr	r3, [pc, #4]	@ (8023b10 <__errno+0x8>)
 8023b0a:	6818      	ldr	r0, [r3, #0]
 8023b0c:	4770      	bx	lr
 8023b0e:	bf00      	nop
 8023b10:	20000038 	.word	0x20000038

08023b14 <__libc_init_array>:
 8023b14:	b570      	push	{r4, r5, r6, lr}
 8023b16:	4d0d      	ldr	r5, [pc, #52]	@ (8023b4c <__libc_init_array+0x38>)
 8023b18:	4c0d      	ldr	r4, [pc, #52]	@ (8023b50 <__libc_init_array+0x3c>)
 8023b1a:	1b64      	subs	r4, r4, r5
 8023b1c:	10a4      	asrs	r4, r4, #2
 8023b1e:	2600      	movs	r6, #0
 8023b20:	42a6      	cmp	r6, r4
 8023b22:	d109      	bne.n	8023b38 <__libc_init_array+0x24>
 8023b24:	4d0b      	ldr	r5, [pc, #44]	@ (8023b54 <__libc_init_array+0x40>)
 8023b26:	4c0c      	ldr	r4, [pc, #48]	@ (8023b58 <__libc_init_array+0x44>)
 8023b28:	f000 fe3a 	bl	80247a0 <_init>
 8023b2c:	1b64      	subs	r4, r4, r5
 8023b2e:	10a4      	asrs	r4, r4, #2
 8023b30:	2600      	movs	r6, #0
 8023b32:	42a6      	cmp	r6, r4
 8023b34:	d105      	bne.n	8023b42 <__libc_init_array+0x2e>
 8023b36:	bd70      	pop	{r4, r5, r6, pc}
 8023b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8023b3c:	4798      	blx	r3
 8023b3e:	3601      	adds	r6, #1
 8023b40:	e7ee      	b.n	8023b20 <__libc_init_array+0xc>
 8023b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8023b46:	4798      	blx	r3
 8023b48:	3601      	adds	r6, #1
 8023b4a:	e7f2      	b.n	8023b32 <__libc_init_array+0x1e>
 8023b4c:	08028060 	.word	0x08028060
 8023b50:	08028060 	.word	0x08028060
 8023b54:	08028060 	.word	0x08028060
 8023b58:	08028064 	.word	0x08028064

08023b5c <__retarget_lock_init_recursive>:
 8023b5c:	4770      	bx	lr

08023b5e <__retarget_lock_acquire_recursive>:
 8023b5e:	4770      	bx	lr

08023b60 <__retarget_lock_release_recursive>:
 8023b60:	4770      	bx	lr
	...

08023b64 <__assert_func>:
 8023b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023b66:	4614      	mov	r4, r2
 8023b68:	461a      	mov	r2, r3
 8023b6a:	4b09      	ldr	r3, [pc, #36]	@ (8023b90 <__assert_func+0x2c>)
 8023b6c:	681b      	ldr	r3, [r3, #0]
 8023b6e:	4605      	mov	r5, r0
 8023b70:	68d8      	ldr	r0, [r3, #12]
 8023b72:	b954      	cbnz	r4, 8023b8a <__assert_func+0x26>
 8023b74:	4b07      	ldr	r3, [pc, #28]	@ (8023b94 <__assert_func+0x30>)
 8023b76:	461c      	mov	r4, r3
 8023b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023b7c:	9100      	str	r1, [sp, #0]
 8023b7e:	462b      	mov	r3, r5
 8023b80:	4905      	ldr	r1, [pc, #20]	@ (8023b98 <__assert_func+0x34>)
 8023b82:	f000 f9b9 	bl	8023ef8 <fiprintf>
 8023b86:	f000 f9d9 	bl	8023f3c <abort>
 8023b8a:	4b04      	ldr	r3, [pc, #16]	@ (8023b9c <__assert_func+0x38>)
 8023b8c:	e7f4      	b.n	8023b78 <__assert_func+0x14>
 8023b8e:	bf00      	nop
 8023b90:	20000038 	.word	0x20000038
 8023b94:	08027f22 	.word	0x08027f22
 8023b98:	08027ef4 	.word	0x08027ef4
 8023b9c:	08027ee7 	.word	0x08027ee7

08023ba0 <_free_r>:
 8023ba0:	b538      	push	{r3, r4, r5, lr}
 8023ba2:	4605      	mov	r5, r0
 8023ba4:	2900      	cmp	r1, #0
 8023ba6:	d041      	beq.n	8023c2c <_free_r+0x8c>
 8023ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023bac:	1f0c      	subs	r4, r1, #4
 8023bae:	2b00      	cmp	r3, #0
 8023bb0:	bfb8      	it	lt
 8023bb2:	18e4      	addlt	r4, r4, r3
 8023bb4:	f000 f8e8 	bl	8023d88 <__malloc_lock>
 8023bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8023c30 <_free_r+0x90>)
 8023bba:	6813      	ldr	r3, [r2, #0]
 8023bbc:	b933      	cbnz	r3, 8023bcc <_free_r+0x2c>
 8023bbe:	6063      	str	r3, [r4, #4]
 8023bc0:	6014      	str	r4, [r2, #0]
 8023bc2:	4628      	mov	r0, r5
 8023bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023bc8:	f000 b8e4 	b.w	8023d94 <__malloc_unlock>
 8023bcc:	42a3      	cmp	r3, r4
 8023bce:	d908      	bls.n	8023be2 <_free_r+0x42>
 8023bd0:	6820      	ldr	r0, [r4, #0]
 8023bd2:	1821      	adds	r1, r4, r0
 8023bd4:	428b      	cmp	r3, r1
 8023bd6:	bf01      	itttt	eq
 8023bd8:	6819      	ldreq	r1, [r3, #0]
 8023bda:	685b      	ldreq	r3, [r3, #4]
 8023bdc:	1809      	addeq	r1, r1, r0
 8023bde:	6021      	streq	r1, [r4, #0]
 8023be0:	e7ed      	b.n	8023bbe <_free_r+0x1e>
 8023be2:	461a      	mov	r2, r3
 8023be4:	685b      	ldr	r3, [r3, #4]
 8023be6:	b10b      	cbz	r3, 8023bec <_free_r+0x4c>
 8023be8:	42a3      	cmp	r3, r4
 8023bea:	d9fa      	bls.n	8023be2 <_free_r+0x42>
 8023bec:	6811      	ldr	r1, [r2, #0]
 8023bee:	1850      	adds	r0, r2, r1
 8023bf0:	42a0      	cmp	r0, r4
 8023bf2:	d10b      	bne.n	8023c0c <_free_r+0x6c>
 8023bf4:	6820      	ldr	r0, [r4, #0]
 8023bf6:	4401      	add	r1, r0
 8023bf8:	1850      	adds	r0, r2, r1
 8023bfa:	4283      	cmp	r3, r0
 8023bfc:	6011      	str	r1, [r2, #0]
 8023bfe:	d1e0      	bne.n	8023bc2 <_free_r+0x22>
 8023c00:	6818      	ldr	r0, [r3, #0]
 8023c02:	685b      	ldr	r3, [r3, #4]
 8023c04:	6053      	str	r3, [r2, #4]
 8023c06:	4408      	add	r0, r1
 8023c08:	6010      	str	r0, [r2, #0]
 8023c0a:	e7da      	b.n	8023bc2 <_free_r+0x22>
 8023c0c:	d902      	bls.n	8023c14 <_free_r+0x74>
 8023c0e:	230c      	movs	r3, #12
 8023c10:	602b      	str	r3, [r5, #0]
 8023c12:	e7d6      	b.n	8023bc2 <_free_r+0x22>
 8023c14:	6820      	ldr	r0, [r4, #0]
 8023c16:	1821      	adds	r1, r4, r0
 8023c18:	428b      	cmp	r3, r1
 8023c1a:	bf04      	itt	eq
 8023c1c:	6819      	ldreq	r1, [r3, #0]
 8023c1e:	685b      	ldreq	r3, [r3, #4]
 8023c20:	6063      	str	r3, [r4, #4]
 8023c22:	bf04      	itt	eq
 8023c24:	1809      	addeq	r1, r1, r0
 8023c26:	6021      	streq	r1, [r4, #0]
 8023c28:	6054      	str	r4, [r2, #4]
 8023c2a:	e7ca      	b.n	8023bc2 <_free_r+0x22>
 8023c2c:	bd38      	pop	{r3, r4, r5, pc}
 8023c2e:	bf00      	nop
 8023c30:	20002884 	.word	0x20002884

08023c34 <malloc>:
 8023c34:	4b02      	ldr	r3, [pc, #8]	@ (8023c40 <malloc+0xc>)
 8023c36:	4601      	mov	r1, r0
 8023c38:	6818      	ldr	r0, [r3, #0]
 8023c3a:	f000 b825 	b.w	8023c88 <_malloc_r>
 8023c3e:	bf00      	nop
 8023c40:	20000038 	.word	0x20000038

08023c44 <sbrk_aligned>:
 8023c44:	b570      	push	{r4, r5, r6, lr}
 8023c46:	4e0f      	ldr	r6, [pc, #60]	@ (8023c84 <sbrk_aligned+0x40>)
 8023c48:	460c      	mov	r4, r1
 8023c4a:	6831      	ldr	r1, [r6, #0]
 8023c4c:	4605      	mov	r5, r0
 8023c4e:	b911      	cbnz	r1, 8023c56 <sbrk_aligned+0x12>
 8023c50:	f000 f964 	bl	8023f1c <_sbrk_r>
 8023c54:	6030      	str	r0, [r6, #0]
 8023c56:	4621      	mov	r1, r4
 8023c58:	4628      	mov	r0, r5
 8023c5a:	f000 f95f 	bl	8023f1c <_sbrk_r>
 8023c5e:	1c43      	adds	r3, r0, #1
 8023c60:	d103      	bne.n	8023c6a <sbrk_aligned+0x26>
 8023c62:	f04f 34ff 	mov.w	r4, #4294967295
 8023c66:	4620      	mov	r0, r4
 8023c68:	bd70      	pop	{r4, r5, r6, pc}
 8023c6a:	1cc4      	adds	r4, r0, #3
 8023c6c:	f024 0403 	bic.w	r4, r4, #3
 8023c70:	42a0      	cmp	r0, r4
 8023c72:	d0f8      	beq.n	8023c66 <sbrk_aligned+0x22>
 8023c74:	1a21      	subs	r1, r4, r0
 8023c76:	4628      	mov	r0, r5
 8023c78:	f000 f950 	bl	8023f1c <_sbrk_r>
 8023c7c:	3001      	adds	r0, #1
 8023c7e:	d1f2      	bne.n	8023c66 <sbrk_aligned+0x22>
 8023c80:	e7ef      	b.n	8023c62 <sbrk_aligned+0x1e>
 8023c82:	bf00      	nop
 8023c84:	20002880 	.word	0x20002880

08023c88 <_malloc_r>:
 8023c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023c8c:	1ccd      	adds	r5, r1, #3
 8023c8e:	f025 0503 	bic.w	r5, r5, #3
 8023c92:	3508      	adds	r5, #8
 8023c94:	2d0c      	cmp	r5, #12
 8023c96:	bf38      	it	cc
 8023c98:	250c      	movcc	r5, #12
 8023c9a:	2d00      	cmp	r5, #0
 8023c9c:	4606      	mov	r6, r0
 8023c9e:	db01      	blt.n	8023ca4 <_malloc_r+0x1c>
 8023ca0:	42a9      	cmp	r1, r5
 8023ca2:	d904      	bls.n	8023cae <_malloc_r+0x26>
 8023ca4:	230c      	movs	r3, #12
 8023ca6:	6033      	str	r3, [r6, #0]
 8023ca8:	2000      	movs	r0, #0
 8023caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023d84 <_malloc_r+0xfc>
 8023cb2:	f000 f869 	bl	8023d88 <__malloc_lock>
 8023cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8023cba:	461c      	mov	r4, r3
 8023cbc:	bb44      	cbnz	r4, 8023d10 <_malloc_r+0x88>
 8023cbe:	4629      	mov	r1, r5
 8023cc0:	4630      	mov	r0, r6
 8023cc2:	f7ff ffbf 	bl	8023c44 <sbrk_aligned>
 8023cc6:	1c43      	adds	r3, r0, #1
 8023cc8:	4604      	mov	r4, r0
 8023cca:	d158      	bne.n	8023d7e <_malloc_r+0xf6>
 8023ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8023cd0:	4627      	mov	r7, r4
 8023cd2:	2f00      	cmp	r7, #0
 8023cd4:	d143      	bne.n	8023d5e <_malloc_r+0xd6>
 8023cd6:	2c00      	cmp	r4, #0
 8023cd8:	d04b      	beq.n	8023d72 <_malloc_r+0xea>
 8023cda:	6823      	ldr	r3, [r4, #0]
 8023cdc:	4639      	mov	r1, r7
 8023cde:	4630      	mov	r0, r6
 8023ce0:	eb04 0903 	add.w	r9, r4, r3
 8023ce4:	f000 f91a 	bl	8023f1c <_sbrk_r>
 8023ce8:	4581      	cmp	r9, r0
 8023cea:	d142      	bne.n	8023d72 <_malloc_r+0xea>
 8023cec:	6821      	ldr	r1, [r4, #0]
 8023cee:	1a6d      	subs	r5, r5, r1
 8023cf0:	4629      	mov	r1, r5
 8023cf2:	4630      	mov	r0, r6
 8023cf4:	f7ff ffa6 	bl	8023c44 <sbrk_aligned>
 8023cf8:	3001      	adds	r0, #1
 8023cfa:	d03a      	beq.n	8023d72 <_malloc_r+0xea>
 8023cfc:	6823      	ldr	r3, [r4, #0]
 8023cfe:	442b      	add	r3, r5
 8023d00:	6023      	str	r3, [r4, #0]
 8023d02:	f8d8 3000 	ldr.w	r3, [r8]
 8023d06:	685a      	ldr	r2, [r3, #4]
 8023d08:	bb62      	cbnz	r2, 8023d64 <_malloc_r+0xdc>
 8023d0a:	f8c8 7000 	str.w	r7, [r8]
 8023d0e:	e00f      	b.n	8023d30 <_malloc_r+0xa8>
 8023d10:	6822      	ldr	r2, [r4, #0]
 8023d12:	1b52      	subs	r2, r2, r5
 8023d14:	d420      	bmi.n	8023d58 <_malloc_r+0xd0>
 8023d16:	2a0b      	cmp	r2, #11
 8023d18:	d917      	bls.n	8023d4a <_malloc_r+0xc2>
 8023d1a:	1961      	adds	r1, r4, r5
 8023d1c:	42a3      	cmp	r3, r4
 8023d1e:	6025      	str	r5, [r4, #0]
 8023d20:	bf18      	it	ne
 8023d22:	6059      	strne	r1, [r3, #4]
 8023d24:	6863      	ldr	r3, [r4, #4]
 8023d26:	bf08      	it	eq
 8023d28:	f8c8 1000 	streq.w	r1, [r8]
 8023d2c:	5162      	str	r2, [r4, r5]
 8023d2e:	604b      	str	r3, [r1, #4]
 8023d30:	4630      	mov	r0, r6
 8023d32:	f000 f82f 	bl	8023d94 <__malloc_unlock>
 8023d36:	f104 000b 	add.w	r0, r4, #11
 8023d3a:	1d23      	adds	r3, r4, #4
 8023d3c:	f020 0007 	bic.w	r0, r0, #7
 8023d40:	1ac2      	subs	r2, r0, r3
 8023d42:	bf1c      	itt	ne
 8023d44:	1a1b      	subne	r3, r3, r0
 8023d46:	50a3      	strne	r3, [r4, r2]
 8023d48:	e7af      	b.n	8023caa <_malloc_r+0x22>
 8023d4a:	6862      	ldr	r2, [r4, #4]
 8023d4c:	42a3      	cmp	r3, r4
 8023d4e:	bf0c      	ite	eq
 8023d50:	f8c8 2000 	streq.w	r2, [r8]
 8023d54:	605a      	strne	r2, [r3, #4]
 8023d56:	e7eb      	b.n	8023d30 <_malloc_r+0xa8>
 8023d58:	4623      	mov	r3, r4
 8023d5a:	6864      	ldr	r4, [r4, #4]
 8023d5c:	e7ae      	b.n	8023cbc <_malloc_r+0x34>
 8023d5e:	463c      	mov	r4, r7
 8023d60:	687f      	ldr	r7, [r7, #4]
 8023d62:	e7b6      	b.n	8023cd2 <_malloc_r+0x4a>
 8023d64:	461a      	mov	r2, r3
 8023d66:	685b      	ldr	r3, [r3, #4]
 8023d68:	42a3      	cmp	r3, r4
 8023d6a:	d1fb      	bne.n	8023d64 <_malloc_r+0xdc>
 8023d6c:	2300      	movs	r3, #0
 8023d6e:	6053      	str	r3, [r2, #4]
 8023d70:	e7de      	b.n	8023d30 <_malloc_r+0xa8>
 8023d72:	230c      	movs	r3, #12
 8023d74:	6033      	str	r3, [r6, #0]
 8023d76:	4630      	mov	r0, r6
 8023d78:	f000 f80c 	bl	8023d94 <__malloc_unlock>
 8023d7c:	e794      	b.n	8023ca8 <_malloc_r+0x20>
 8023d7e:	6005      	str	r5, [r0, #0]
 8023d80:	e7d6      	b.n	8023d30 <_malloc_r+0xa8>
 8023d82:	bf00      	nop
 8023d84:	20002884 	.word	0x20002884

08023d88 <__malloc_lock>:
 8023d88:	4801      	ldr	r0, [pc, #4]	@ (8023d90 <__malloc_lock+0x8>)
 8023d8a:	f7ff bee8 	b.w	8023b5e <__retarget_lock_acquire_recursive>
 8023d8e:	bf00      	nop
 8023d90:	2000287c 	.word	0x2000287c

08023d94 <__malloc_unlock>:
 8023d94:	4801      	ldr	r0, [pc, #4]	@ (8023d9c <__malloc_unlock+0x8>)
 8023d96:	f7ff bee3 	b.w	8023b60 <__retarget_lock_release_recursive>
 8023d9a:	bf00      	nop
 8023d9c:	2000287c 	.word	0x2000287c

08023da0 <__sflush_r>:
 8023da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023da8:	0716      	lsls	r6, r2, #28
 8023daa:	4605      	mov	r5, r0
 8023dac:	460c      	mov	r4, r1
 8023dae:	d454      	bmi.n	8023e5a <__sflush_r+0xba>
 8023db0:	684b      	ldr	r3, [r1, #4]
 8023db2:	2b00      	cmp	r3, #0
 8023db4:	dc02      	bgt.n	8023dbc <__sflush_r+0x1c>
 8023db6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023db8:	2b00      	cmp	r3, #0
 8023dba:	dd48      	ble.n	8023e4e <__sflush_r+0xae>
 8023dbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023dbe:	2e00      	cmp	r6, #0
 8023dc0:	d045      	beq.n	8023e4e <__sflush_r+0xae>
 8023dc2:	2300      	movs	r3, #0
 8023dc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023dc8:	682f      	ldr	r7, [r5, #0]
 8023dca:	6a21      	ldr	r1, [r4, #32]
 8023dcc:	602b      	str	r3, [r5, #0]
 8023dce:	d030      	beq.n	8023e32 <__sflush_r+0x92>
 8023dd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023dd2:	89a3      	ldrh	r3, [r4, #12]
 8023dd4:	0759      	lsls	r1, r3, #29
 8023dd6:	d505      	bpl.n	8023de4 <__sflush_r+0x44>
 8023dd8:	6863      	ldr	r3, [r4, #4]
 8023dda:	1ad2      	subs	r2, r2, r3
 8023ddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023dde:	b10b      	cbz	r3, 8023de4 <__sflush_r+0x44>
 8023de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023de2:	1ad2      	subs	r2, r2, r3
 8023de4:	2300      	movs	r3, #0
 8023de6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023de8:	6a21      	ldr	r1, [r4, #32]
 8023dea:	4628      	mov	r0, r5
 8023dec:	47b0      	blx	r6
 8023dee:	1c43      	adds	r3, r0, #1
 8023df0:	89a3      	ldrh	r3, [r4, #12]
 8023df2:	d106      	bne.n	8023e02 <__sflush_r+0x62>
 8023df4:	6829      	ldr	r1, [r5, #0]
 8023df6:	291d      	cmp	r1, #29
 8023df8:	d82b      	bhi.n	8023e52 <__sflush_r+0xb2>
 8023dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8023ea4 <__sflush_r+0x104>)
 8023dfc:	410a      	asrs	r2, r1
 8023dfe:	07d6      	lsls	r6, r2, #31
 8023e00:	d427      	bmi.n	8023e52 <__sflush_r+0xb2>
 8023e02:	2200      	movs	r2, #0
 8023e04:	6062      	str	r2, [r4, #4]
 8023e06:	04d9      	lsls	r1, r3, #19
 8023e08:	6922      	ldr	r2, [r4, #16]
 8023e0a:	6022      	str	r2, [r4, #0]
 8023e0c:	d504      	bpl.n	8023e18 <__sflush_r+0x78>
 8023e0e:	1c42      	adds	r2, r0, #1
 8023e10:	d101      	bne.n	8023e16 <__sflush_r+0x76>
 8023e12:	682b      	ldr	r3, [r5, #0]
 8023e14:	b903      	cbnz	r3, 8023e18 <__sflush_r+0x78>
 8023e16:	6560      	str	r0, [r4, #84]	@ 0x54
 8023e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023e1a:	602f      	str	r7, [r5, #0]
 8023e1c:	b1b9      	cbz	r1, 8023e4e <__sflush_r+0xae>
 8023e1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023e22:	4299      	cmp	r1, r3
 8023e24:	d002      	beq.n	8023e2c <__sflush_r+0x8c>
 8023e26:	4628      	mov	r0, r5
 8023e28:	f7ff feba 	bl	8023ba0 <_free_r>
 8023e2c:	2300      	movs	r3, #0
 8023e2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8023e30:	e00d      	b.n	8023e4e <__sflush_r+0xae>
 8023e32:	2301      	movs	r3, #1
 8023e34:	4628      	mov	r0, r5
 8023e36:	47b0      	blx	r6
 8023e38:	4602      	mov	r2, r0
 8023e3a:	1c50      	adds	r0, r2, #1
 8023e3c:	d1c9      	bne.n	8023dd2 <__sflush_r+0x32>
 8023e3e:	682b      	ldr	r3, [r5, #0]
 8023e40:	2b00      	cmp	r3, #0
 8023e42:	d0c6      	beq.n	8023dd2 <__sflush_r+0x32>
 8023e44:	2b1d      	cmp	r3, #29
 8023e46:	d001      	beq.n	8023e4c <__sflush_r+0xac>
 8023e48:	2b16      	cmp	r3, #22
 8023e4a:	d11e      	bne.n	8023e8a <__sflush_r+0xea>
 8023e4c:	602f      	str	r7, [r5, #0]
 8023e4e:	2000      	movs	r0, #0
 8023e50:	e022      	b.n	8023e98 <__sflush_r+0xf8>
 8023e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023e56:	b21b      	sxth	r3, r3
 8023e58:	e01b      	b.n	8023e92 <__sflush_r+0xf2>
 8023e5a:	690f      	ldr	r7, [r1, #16]
 8023e5c:	2f00      	cmp	r7, #0
 8023e5e:	d0f6      	beq.n	8023e4e <__sflush_r+0xae>
 8023e60:	0793      	lsls	r3, r2, #30
 8023e62:	680e      	ldr	r6, [r1, #0]
 8023e64:	bf08      	it	eq
 8023e66:	694b      	ldreq	r3, [r1, #20]
 8023e68:	600f      	str	r7, [r1, #0]
 8023e6a:	bf18      	it	ne
 8023e6c:	2300      	movne	r3, #0
 8023e6e:	eba6 0807 	sub.w	r8, r6, r7
 8023e72:	608b      	str	r3, [r1, #8]
 8023e74:	f1b8 0f00 	cmp.w	r8, #0
 8023e78:	dde9      	ble.n	8023e4e <__sflush_r+0xae>
 8023e7a:	6a21      	ldr	r1, [r4, #32]
 8023e7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8023e7e:	4643      	mov	r3, r8
 8023e80:	463a      	mov	r2, r7
 8023e82:	4628      	mov	r0, r5
 8023e84:	47b0      	blx	r6
 8023e86:	2800      	cmp	r0, #0
 8023e88:	dc08      	bgt.n	8023e9c <__sflush_r+0xfc>
 8023e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023e92:	81a3      	strh	r3, [r4, #12]
 8023e94:	f04f 30ff 	mov.w	r0, #4294967295
 8023e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e9c:	4407      	add	r7, r0
 8023e9e:	eba8 0800 	sub.w	r8, r8, r0
 8023ea2:	e7e7      	b.n	8023e74 <__sflush_r+0xd4>
 8023ea4:	dfbffffe 	.word	0xdfbffffe

08023ea8 <_fflush_r>:
 8023ea8:	b538      	push	{r3, r4, r5, lr}
 8023eaa:	690b      	ldr	r3, [r1, #16]
 8023eac:	4605      	mov	r5, r0
 8023eae:	460c      	mov	r4, r1
 8023eb0:	b913      	cbnz	r3, 8023eb8 <_fflush_r+0x10>
 8023eb2:	2500      	movs	r5, #0
 8023eb4:	4628      	mov	r0, r5
 8023eb6:	bd38      	pop	{r3, r4, r5, pc}
 8023eb8:	b118      	cbz	r0, 8023ec2 <_fflush_r+0x1a>
 8023eba:	6a03      	ldr	r3, [r0, #32]
 8023ebc:	b90b      	cbnz	r3, 8023ec2 <_fflush_r+0x1a>
 8023ebe:	f7ff fcf9 	bl	80238b4 <__sinit>
 8023ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023ec6:	2b00      	cmp	r3, #0
 8023ec8:	d0f3      	beq.n	8023eb2 <_fflush_r+0xa>
 8023eca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8023ecc:	07d0      	lsls	r0, r2, #31
 8023ece:	d404      	bmi.n	8023eda <_fflush_r+0x32>
 8023ed0:	0599      	lsls	r1, r3, #22
 8023ed2:	d402      	bmi.n	8023eda <_fflush_r+0x32>
 8023ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023ed6:	f7ff fe42 	bl	8023b5e <__retarget_lock_acquire_recursive>
 8023eda:	4628      	mov	r0, r5
 8023edc:	4621      	mov	r1, r4
 8023ede:	f7ff ff5f 	bl	8023da0 <__sflush_r>
 8023ee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023ee4:	07da      	lsls	r2, r3, #31
 8023ee6:	4605      	mov	r5, r0
 8023ee8:	d4e4      	bmi.n	8023eb4 <_fflush_r+0xc>
 8023eea:	89a3      	ldrh	r3, [r4, #12]
 8023eec:	059b      	lsls	r3, r3, #22
 8023eee:	d4e1      	bmi.n	8023eb4 <_fflush_r+0xc>
 8023ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023ef2:	f7ff fe35 	bl	8023b60 <__retarget_lock_release_recursive>
 8023ef6:	e7dd      	b.n	8023eb4 <_fflush_r+0xc>

08023ef8 <fiprintf>:
 8023ef8:	b40e      	push	{r1, r2, r3}
 8023efa:	b503      	push	{r0, r1, lr}
 8023efc:	4601      	mov	r1, r0
 8023efe:	ab03      	add	r3, sp, #12
 8023f00:	4805      	ldr	r0, [pc, #20]	@ (8023f18 <fiprintf+0x20>)
 8023f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8023f06:	6800      	ldr	r0, [r0, #0]
 8023f08:	9301      	str	r3, [sp, #4]
 8023f0a:	f000 f847 	bl	8023f9c <_vfiprintf_r>
 8023f0e:	b002      	add	sp, #8
 8023f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8023f14:	b003      	add	sp, #12
 8023f16:	4770      	bx	lr
 8023f18:	20000038 	.word	0x20000038

08023f1c <_sbrk_r>:
 8023f1c:	b538      	push	{r3, r4, r5, lr}
 8023f1e:	4d06      	ldr	r5, [pc, #24]	@ (8023f38 <_sbrk_r+0x1c>)
 8023f20:	2300      	movs	r3, #0
 8023f22:	4604      	mov	r4, r0
 8023f24:	4608      	mov	r0, r1
 8023f26:	602b      	str	r3, [r5, #0]
 8023f28:	f7df f8ce 	bl	80030c8 <_sbrk>
 8023f2c:	1c43      	adds	r3, r0, #1
 8023f2e:	d102      	bne.n	8023f36 <_sbrk_r+0x1a>
 8023f30:	682b      	ldr	r3, [r5, #0]
 8023f32:	b103      	cbz	r3, 8023f36 <_sbrk_r+0x1a>
 8023f34:	6023      	str	r3, [r4, #0]
 8023f36:	bd38      	pop	{r3, r4, r5, pc}
 8023f38:	20002878 	.word	0x20002878

08023f3c <abort>:
 8023f3c:	b508      	push	{r3, lr}
 8023f3e:	2006      	movs	r0, #6
 8023f40:	f000 fb8e 	bl	8024660 <raise>
 8023f44:	2001      	movs	r0, #1
 8023f46:	f7df f847 	bl	8002fd8 <_exit>

08023f4a <__sfputc_r>:
 8023f4a:	6893      	ldr	r3, [r2, #8]
 8023f4c:	3b01      	subs	r3, #1
 8023f4e:	2b00      	cmp	r3, #0
 8023f50:	b410      	push	{r4}
 8023f52:	6093      	str	r3, [r2, #8]
 8023f54:	da08      	bge.n	8023f68 <__sfputc_r+0x1e>
 8023f56:	6994      	ldr	r4, [r2, #24]
 8023f58:	42a3      	cmp	r3, r4
 8023f5a:	db01      	blt.n	8023f60 <__sfputc_r+0x16>
 8023f5c:	290a      	cmp	r1, #10
 8023f5e:	d103      	bne.n	8023f68 <__sfputc_r+0x1e>
 8023f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023f64:	f000 bac0 	b.w	80244e8 <__swbuf_r>
 8023f68:	6813      	ldr	r3, [r2, #0]
 8023f6a:	1c58      	adds	r0, r3, #1
 8023f6c:	6010      	str	r0, [r2, #0]
 8023f6e:	7019      	strb	r1, [r3, #0]
 8023f70:	4608      	mov	r0, r1
 8023f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023f76:	4770      	bx	lr

08023f78 <__sfputs_r>:
 8023f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f7a:	4606      	mov	r6, r0
 8023f7c:	460f      	mov	r7, r1
 8023f7e:	4614      	mov	r4, r2
 8023f80:	18d5      	adds	r5, r2, r3
 8023f82:	42ac      	cmp	r4, r5
 8023f84:	d101      	bne.n	8023f8a <__sfputs_r+0x12>
 8023f86:	2000      	movs	r0, #0
 8023f88:	e007      	b.n	8023f9a <__sfputs_r+0x22>
 8023f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f8e:	463a      	mov	r2, r7
 8023f90:	4630      	mov	r0, r6
 8023f92:	f7ff ffda 	bl	8023f4a <__sfputc_r>
 8023f96:	1c43      	adds	r3, r0, #1
 8023f98:	d1f3      	bne.n	8023f82 <__sfputs_r+0xa>
 8023f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023f9c <_vfiprintf_r>:
 8023f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fa0:	460d      	mov	r5, r1
 8023fa2:	b09d      	sub	sp, #116	@ 0x74
 8023fa4:	4614      	mov	r4, r2
 8023fa6:	4698      	mov	r8, r3
 8023fa8:	4606      	mov	r6, r0
 8023faa:	b118      	cbz	r0, 8023fb4 <_vfiprintf_r+0x18>
 8023fac:	6a03      	ldr	r3, [r0, #32]
 8023fae:	b90b      	cbnz	r3, 8023fb4 <_vfiprintf_r+0x18>
 8023fb0:	f7ff fc80 	bl	80238b4 <__sinit>
 8023fb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023fb6:	07d9      	lsls	r1, r3, #31
 8023fb8:	d405      	bmi.n	8023fc6 <_vfiprintf_r+0x2a>
 8023fba:	89ab      	ldrh	r3, [r5, #12]
 8023fbc:	059a      	lsls	r2, r3, #22
 8023fbe:	d402      	bmi.n	8023fc6 <_vfiprintf_r+0x2a>
 8023fc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023fc2:	f7ff fdcc 	bl	8023b5e <__retarget_lock_acquire_recursive>
 8023fc6:	89ab      	ldrh	r3, [r5, #12]
 8023fc8:	071b      	lsls	r3, r3, #28
 8023fca:	d501      	bpl.n	8023fd0 <_vfiprintf_r+0x34>
 8023fcc:	692b      	ldr	r3, [r5, #16]
 8023fce:	b99b      	cbnz	r3, 8023ff8 <_vfiprintf_r+0x5c>
 8023fd0:	4629      	mov	r1, r5
 8023fd2:	4630      	mov	r0, r6
 8023fd4:	f000 fac6 	bl	8024564 <__swsetup_r>
 8023fd8:	b170      	cbz	r0, 8023ff8 <_vfiprintf_r+0x5c>
 8023fda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023fdc:	07dc      	lsls	r4, r3, #31
 8023fde:	d504      	bpl.n	8023fea <_vfiprintf_r+0x4e>
 8023fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8023fe4:	b01d      	add	sp, #116	@ 0x74
 8023fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fea:	89ab      	ldrh	r3, [r5, #12]
 8023fec:	0598      	lsls	r0, r3, #22
 8023fee:	d4f7      	bmi.n	8023fe0 <_vfiprintf_r+0x44>
 8023ff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023ff2:	f7ff fdb5 	bl	8023b60 <__retarget_lock_release_recursive>
 8023ff6:	e7f3      	b.n	8023fe0 <_vfiprintf_r+0x44>
 8023ff8:	2300      	movs	r3, #0
 8023ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8023ffc:	2320      	movs	r3, #32
 8023ffe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024002:	f8cd 800c 	str.w	r8, [sp, #12]
 8024006:	2330      	movs	r3, #48	@ 0x30
 8024008:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80241b8 <_vfiprintf_r+0x21c>
 802400c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8024010:	f04f 0901 	mov.w	r9, #1
 8024014:	4623      	mov	r3, r4
 8024016:	469a      	mov	sl, r3
 8024018:	f813 2b01 	ldrb.w	r2, [r3], #1
 802401c:	b10a      	cbz	r2, 8024022 <_vfiprintf_r+0x86>
 802401e:	2a25      	cmp	r2, #37	@ 0x25
 8024020:	d1f9      	bne.n	8024016 <_vfiprintf_r+0x7a>
 8024022:	ebba 0b04 	subs.w	fp, sl, r4
 8024026:	d00b      	beq.n	8024040 <_vfiprintf_r+0xa4>
 8024028:	465b      	mov	r3, fp
 802402a:	4622      	mov	r2, r4
 802402c:	4629      	mov	r1, r5
 802402e:	4630      	mov	r0, r6
 8024030:	f7ff ffa2 	bl	8023f78 <__sfputs_r>
 8024034:	3001      	adds	r0, #1
 8024036:	f000 80a7 	beq.w	8024188 <_vfiprintf_r+0x1ec>
 802403a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802403c:	445a      	add	r2, fp
 802403e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024040:	f89a 3000 	ldrb.w	r3, [sl]
 8024044:	2b00      	cmp	r3, #0
 8024046:	f000 809f 	beq.w	8024188 <_vfiprintf_r+0x1ec>
 802404a:	2300      	movs	r3, #0
 802404c:	f04f 32ff 	mov.w	r2, #4294967295
 8024050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024054:	f10a 0a01 	add.w	sl, sl, #1
 8024058:	9304      	str	r3, [sp, #16]
 802405a:	9307      	str	r3, [sp, #28]
 802405c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8024060:	931a      	str	r3, [sp, #104]	@ 0x68
 8024062:	4654      	mov	r4, sl
 8024064:	2205      	movs	r2, #5
 8024066:	f814 1b01 	ldrb.w	r1, [r4], #1
 802406a:	4853      	ldr	r0, [pc, #332]	@ (80241b8 <_vfiprintf_r+0x21c>)
 802406c:	f7dc f950 	bl	8000310 <memchr>
 8024070:	9a04      	ldr	r2, [sp, #16]
 8024072:	b9d8      	cbnz	r0, 80240ac <_vfiprintf_r+0x110>
 8024074:	06d1      	lsls	r1, r2, #27
 8024076:	bf44      	itt	mi
 8024078:	2320      	movmi	r3, #32
 802407a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802407e:	0713      	lsls	r3, r2, #28
 8024080:	bf44      	itt	mi
 8024082:	232b      	movmi	r3, #43	@ 0x2b
 8024084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024088:	f89a 3000 	ldrb.w	r3, [sl]
 802408c:	2b2a      	cmp	r3, #42	@ 0x2a
 802408e:	d015      	beq.n	80240bc <_vfiprintf_r+0x120>
 8024090:	9a07      	ldr	r2, [sp, #28]
 8024092:	4654      	mov	r4, sl
 8024094:	2000      	movs	r0, #0
 8024096:	f04f 0c0a 	mov.w	ip, #10
 802409a:	4621      	mov	r1, r4
 802409c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80240a0:	3b30      	subs	r3, #48	@ 0x30
 80240a2:	2b09      	cmp	r3, #9
 80240a4:	d94b      	bls.n	802413e <_vfiprintf_r+0x1a2>
 80240a6:	b1b0      	cbz	r0, 80240d6 <_vfiprintf_r+0x13a>
 80240a8:	9207      	str	r2, [sp, #28]
 80240aa:	e014      	b.n	80240d6 <_vfiprintf_r+0x13a>
 80240ac:	eba0 0308 	sub.w	r3, r0, r8
 80240b0:	fa09 f303 	lsl.w	r3, r9, r3
 80240b4:	4313      	orrs	r3, r2
 80240b6:	9304      	str	r3, [sp, #16]
 80240b8:	46a2      	mov	sl, r4
 80240ba:	e7d2      	b.n	8024062 <_vfiprintf_r+0xc6>
 80240bc:	9b03      	ldr	r3, [sp, #12]
 80240be:	1d19      	adds	r1, r3, #4
 80240c0:	681b      	ldr	r3, [r3, #0]
 80240c2:	9103      	str	r1, [sp, #12]
 80240c4:	2b00      	cmp	r3, #0
 80240c6:	bfbb      	ittet	lt
 80240c8:	425b      	neglt	r3, r3
 80240ca:	f042 0202 	orrlt.w	r2, r2, #2
 80240ce:	9307      	strge	r3, [sp, #28]
 80240d0:	9307      	strlt	r3, [sp, #28]
 80240d2:	bfb8      	it	lt
 80240d4:	9204      	strlt	r2, [sp, #16]
 80240d6:	7823      	ldrb	r3, [r4, #0]
 80240d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80240da:	d10a      	bne.n	80240f2 <_vfiprintf_r+0x156>
 80240dc:	7863      	ldrb	r3, [r4, #1]
 80240de:	2b2a      	cmp	r3, #42	@ 0x2a
 80240e0:	d132      	bne.n	8024148 <_vfiprintf_r+0x1ac>
 80240e2:	9b03      	ldr	r3, [sp, #12]
 80240e4:	1d1a      	adds	r2, r3, #4
 80240e6:	681b      	ldr	r3, [r3, #0]
 80240e8:	9203      	str	r2, [sp, #12]
 80240ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80240ee:	3402      	adds	r4, #2
 80240f0:	9305      	str	r3, [sp, #20]
 80240f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80241c8 <_vfiprintf_r+0x22c>
 80240f6:	7821      	ldrb	r1, [r4, #0]
 80240f8:	2203      	movs	r2, #3
 80240fa:	4650      	mov	r0, sl
 80240fc:	f7dc f908 	bl	8000310 <memchr>
 8024100:	b138      	cbz	r0, 8024112 <_vfiprintf_r+0x176>
 8024102:	9b04      	ldr	r3, [sp, #16]
 8024104:	eba0 000a 	sub.w	r0, r0, sl
 8024108:	2240      	movs	r2, #64	@ 0x40
 802410a:	4082      	lsls	r2, r0
 802410c:	4313      	orrs	r3, r2
 802410e:	3401      	adds	r4, #1
 8024110:	9304      	str	r3, [sp, #16]
 8024112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024116:	4829      	ldr	r0, [pc, #164]	@ (80241bc <_vfiprintf_r+0x220>)
 8024118:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802411c:	2206      	movs	r2, #6
 802411e:	f7dc f8f7 	bl	8000310 <memchr>
 8024122:	2800      	cmp	r0, #0
 8024124:	d03f      	beq.n	80241a6 <_vfiprintf_r+0x20a>
 8024126:	4b26      	ldr	r3, [pc, #152]	@ (80241c0 <_vfiprintf_r+0x224>)
 8024128:	bb1b      	cbnz	r3, 8024172 <_vfiprintf_r+0x1d6>
 802412a:	9b03      	ldr	r3, [sp, #12]
 802412c:	3307      	adds	r3, #7
 802412e:	f023 0307 	bic.w	r3, r3, #7
 8024132:	3308      	adds	r3, #8
 8024134:	9303      	str	r3, [sp, #12]
 8024136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024138:	443b      	add	r3, r7
 802413a:	9309      	str	r3, [sp, #36]	@ 0x24
 802413c:	e76a      	b.n	8024014 <_vfiprintf_r+0x78>
 802413e:	fb0c 3202 	mla	r2, ip, r2, r3
 8024142:	460c      	mov	r4, r1
 8024144:	2001      	movs	r0, #1
 8024146:	e7a8      	b.n	802409a <_vfiprintf_r+0xfe>
 8024148:	2300      	movs	r3, #0
 802414a:	3401      	adds	r4, #1
 802414c:	9305      	str	r3, [sp, #20]
 802414e:	4619      	mov	r1, r3
 8024150:	f04f 0c0a 	mov.w	ip, #10
 8024154:	4620      	mov	r0, r4
 8024156:	f810 2b01 	ldrb.w	r2, [r0], #1
 802415a:	3a30      	subs	r2, #48	@ 0x30
 802415c:	2a09      	cmp	r2, #9
 802415e:	d903      	bls.n	8024168 <_vfiprintf_r+0x1cc>
 8024160:	2b00      	cmp	r3, #0
 8024162:	d0c6      	beq.n	80240f2 <_vfiprintf_r+0x156>
 8024164:	9105      	str	r1, [sp, #20]
 8024166:	e7c4      	b.n	80240f2 <_vfiprintf_r+0x156>
 8024168:	fb0c 2101 	mla	r1, ip, r1, r2
 802416c:	4604      	mov	r4, r0
 802416e:	2301      	movs	r3, #1
 8024170:	e7f0      	b.n	8024154 <_vfiprintf_r+0x1b8>
 8024172:	ab03      	add	r3, sp, #12
 8024174:	9300      	str	r3, [sp, #0]
 8024176:	462a      	mov	r2, r5
 8024178:	4b12      	ldr	r3, [pc, #72]	@ (80241c4 <_vfiprintf_r+0x228>)
 802417a:	a904      	add	r1, sp, #16
 802417c:	4630      	mov	r0, r6
 802417e:	f3af 8000 	nop.w
 8024182:	4607      	mov	r7, r0
 8024184:	1c78      	adds	r0, r7, #1
 8024186:	d1d6      	bne.n	8024136 <_vfiprintf_r+0x19a>
 8024188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802418a:	07d9      	lsls	r1, r3, #31
 802418c:	d405      	bmi.n	802419a <_vfiprintf_r+0x1fe>
 802418e:	89ab      	ldrh	r3, [r5, #12]
 8024190:	059a      	lsls	r2, r3, #22
 8024192:	d402      	bmi.n	802419a <_vfiprintf_r+0x1fe>
 8024194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024196:	f7ff fce3 	bl	8023b60 <__retarget_lock_release_recursive>
 802419a:	89ab      	ldrh	r3, [r5, #12]
 802419c:	065b      	lsls	r3, r3, #25
 802419e:	f53f af1f 	bmi.w	8023fe0 <_vfiprintf_r+0x44>
 80241a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80241a4:	e71e      	b.n	8023fe4 <_vfiprintf_r+0x48>
 80241a6:	ab03      	add	r3, sp, #12
 80241a8:	9300      	str	r3, [sp, #0]
 80241aa:	462a      	mov	r2, r5
 80241ac:	4b05      	ldr	r3, [pc, #20]	@ (80241c4 <_vfiprintf_r+0x228>)
 80241ae:	a904      	add	r1, sp, #16
 80241b0:	4630      	mov	r0, r6
 80241b2:	f000 f879 	bl	80242a8 <_printf_i>
 80241b6:	e7e4      	b.n	8024182 <_vfiprintf_r+0x1e6>
 80241b8:	08028024 	.word	0x08028024
 80241bc:	0802802e 	.word	0x0802802e
 80241c0:	00000000 	.word	0x00000000
 80241c4:	08023f79 	.word	0x08023f79
 80241c8:	0802802a 	.word	0x0802802a

080241cc <_printf_common>:
 80241cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80241d0:	4616      	mov	r6, r2
 80241d2:	4698      	mov	r8, r3
 80241d4:	688a      	ldr	r2, [r1, #8]
 80241d6:	690b      	ldr	r3, [r1, #16]
 80241d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80241dc:	4293      	cmp	r3, r2
 80241de:	bfb8      	it	lt
 80241e0:	4613      	movlt	r3, r2
 80241e2:	6033      	str	r3, [r6, #0]
 80241e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80241e8:	4607      	mov	r7, r0
 80241ea:	460c      	mov	r4, r1
 80241ec:	b10a      	cbz	r2, 80241f2 <_printf_common+0x26>
 80241ee:	3301      	adds	r3, #1
 80241f0:	6033      	str	r3, [r6, #0]
 80241f2:	6823      	ldr	r3, [r4, #0]
 80241f4:	0699      	lsls	r1, r3, #26
 80241f6:	bf42      	ittt	mi
 80241f8:	6833      	ldrmi	r3, [r6, #0]
 80241fa:	3302      	addmi	r3, #2
 80241fc:	6033      	strmi	r3, [r6, #0]
 80241fe:	6825      	ldr	r5, [r4, #0]
 8024200:	f015 0506 	ands.w	r5, r5, #6
 8024204:	d106      	bne.n	8024214 <_printf_common+0x48>
 8024206:	f104 0a19 	add.w	sl, r4, #25
 802420a:	68e3      	ldr	r3, [r4, #12]
 802420c:	6832      	ldr	r2, [r6, #0]
 802420e:	1a9b      	subs	r3, r3, r2
 8024210:	42ab      	cmp	r3, r5
 8024212:	dc26      	bgt.n	8024262 <_printf_common+0x96>
 8024214:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024218:	6822      	ldr	r2, [r4, #0]
 802421a:	3b00      	subs	r3, #0
 802421c:	bf18      	it	ne
 802421e:	2301      	movne	r3, #1
 8024220:	0692      	lsls	r2, r2, #26
 8024222:	d42b      	bmi.n	802427c <_printf_common+0xb0>
 8024224:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024228:	4641      	mov	r1, r8
 802422a:	4638      	mov	r0, r7
 802422c:	47c8      	blx	r9
 802422e:	3001      	adds	r0, #1
 8024230:	d01e      	beq.n	8024270 <_printf_common+0xa4>
 8024232:	6823      	ldr	r3, [r4, #0]
 8024234:	6922      	ldr	r2, [r4, #16]
 8024236:	f003 0306 	and.w	r3, r3, #6
 802423a:	2b04      	cmp	r3, #4
 802423c:	bf02      	ittt	eq
 802423e:	68e5      	ldreq	r5, [r4, #12]
 8024240:	6833      	ldreq	r3, [r6, #0]
 8024242:	1aed      	subeq	r5, r5, r3
 8024244:	68a3      	ldr	r3, [r4, #8]
 8024246:	bf0c      	ite	eq
 8024248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802424c:	2500      	movne	r5, #0
 802424e:	4293      	cmp	r3, r2
 8024250:	bfc4      	itt	gt
 8024252:	1a9b      	subgt	r3, r3, r2
 8024254:	18ed      	addgt	r5, r5, r3
 8024256:	2600      	movs	r6, #0
 8024258:	341a      	adds	r4, #26
 802425a:	42b5      	cmp	r5, r6
 802425c:	d11a      	bne.n	8024294 <_printf_common+0xc8>
 802425e:	2000      	movs	r0, #0
 8024260:	e008      	b.n	8024274 <_printf_common+0xa8>
 8024262:	2301      	movs	r3, #1
 8024264:	4652      	mov	r2, sl
 8024266:	4641      	mov	r1, r8
 8024268:	4638      	mov	r0, r7
 802426a:	47c8      	blx	r9
 802426c:	3001      	adds	r0, #1
 802426e:	d103      	bne.n	8024278 <_printf_common+0xac>
 8024270:	f04f 30ff 	mov.w	r0, #4294967295
 8024274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024278:	3501      	adds	r5, #1
 802427a:	e7c6      	b.n	802420a <_printf_common+0x3e>
 802427c:	18e1      	adds	r1, r4, r3
 802427e:	1c5a      	adds	r2, r3, #1
 8024280:	2030      	movs	r0, #48	@ 0x30
 8024282:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024286:	4422      	add	r2, r4
 8024288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802428c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8024290:	3302      	adds	r3, #2
 8024292:	e7c7      	b.n	8024224 <_printf_common+0x58>
 8024294:	2301      	movs	r3, #1
 8024296:	4622      	mov	r2, r4
 8024298:	4641      	mov	r1, r8
 802429a:	4638      	mov	r0, r7
 802429c:	47c8      	blx	r9
 802429e:	3001      	adds	r0, #1
 80242a0:	d0e6      	beq.n	8024270 <_printf_common+0xa4>
 80242a2:	3601      	adds	r6, #1
 80242a4:	e7d9      	b.n	802425a <_printf_common+0x8e>
	...

080242a8 <_printf_i>:
 80242a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80242ac:	7e0f      	ldrb	r7, [r1, #24]
 80242ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80242b0:	2f78      	cmp	r7, #120	@ 0x78
 80242b2:	4691      	mov	r9, r2
 80242b4:	4680      	mov	r8, r0
 80242b6:	460c      	mov	r4, r1
 80242b8:	469a      	mov	sl, r3
 80242ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80242be:	d807      	bhi.n	80242d0 <_printf_i+0x28>
 80242c0:	2f62      	cmp	r7, #98	@ 0x62
 80242c2:	d80a      	bhi.n	80242da <_printf_i+0x32>
 80242c4:	2f00      	cmp	r7, #0
 80242c6:	f000 80d2 	beq.w	802446e <_printf_i+0x1c6>
 80242ca:	2f58      	cmp	r7, #88	@ 0x58
 80242cc:	f000 80b9 	beq.w	8024442 <_printf_i+0x19a>
 80242d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80242d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80242d8:	e03a      	b.n	8024350 <_printf_i+0xa8>
 80242da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80242de:	2b15      	cmp	r3, #21
 80242e0:	d8f6      	bhi.n	80242d0 <_printf_i+0x28>
 80242e2:	a101      	add	r1, pc, #4	@ (adr r1, 80242e8 <_printf_i+0x40>)
 80242e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80242e8:	08024341 	.word	0x08024341
 80242ec:	08024355 	.word	0x08024355
 80242f0:	080242d1 	.word	0x080242d1
 80242f4:	080242d1 	.word	0x080242d1
 80242f8:	080242d1 	.word	0x080242d1
 80242fc:	080242d1 	.word	0x080242d1
 8024300:	08024355 	.word	0x08024355
 8024304:	080242d1 	.word	0x080242d1
 8024308:	080242d1 	.word	0x080242d1
 802430c:	080242d1 	.word	0x080242d1
 8024310:	080242d1 	.word	0x080242d1
 8024314:	08024455 	.word	0x08024455
 8024318:	0802437f 	.word	0x0802437f
 802431c:	0802440f 	.word	0x0802440f
 8024320:	080242d1 	.word	0x080242d1
 8024324:	080242d1 	.word	0x080242d1
 8024328:	08024477 	.word	0x08024477
 802432c:	080242d1 	.word	0x080242d1
 8024330:	0802437f 	.word	0x0802437f
 8024334:	080242d1 	.word	0x080242d1
 8024338:	080242d1 	.word	0x080242d1
 802433c:	08024417 	.word	0x08024417
 8024340:	6833      	ldr	r3, [r6, #0]
 8024342:	1d1a      	adds	r2, r3, #4
 8024344:	681b      	ldr	r3, [r3, #0]
 8024346:	6032      	str	r2, [r6, #0]
 8024348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802434c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8024350:	2301      	movs	r3, #1
 8024352:	e09d      	b.n	8024490 <_printf_i+0x1e8>
 8024354:	6833      	ldr	r3, [r6, #0]
 8024356:	6820      	ldr	r0, [r4, #0]
 8024358:	1d19      	adds	r1, r3, #4
 802435a:	6031      	str	r1, [r6, #0]
 802435c:	0606      	lsls	r6, r0, #24
 802435e:	d501      	bpl.n	8024364 <_printf_i+0xbc>
 8024360:	681d      	ldr	r5, [r3, #0]
 8024362:	e003      	b.n	802436c <_printf_i+0xc4>
 8024364:	0645      	lsls	r5, r0, #25
 8024366:	d5fb      	bpl.n	8024360 <_printf_i+0xb8>
 8024368:	f9b3 5000 	ldrsh.w	r5, [r3]
 802436c:	2d00      	cmp	r5, #0
 802436e:	da03      	bge.n	8024378 <_printf_i+0xd0>
 8024370:	232d      	movs	r3, #45	@ 0x2d
 8024372:	426d      	negs	r5, r5
 8024374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024378:	4859      	ldr	r0, [pc, #356]	@ (80244e0 <_printf_i+0x238>)
 802437a:	230a      	movs	r3, #10
 802437c:	e011      	b.n	80243a2 <_printf_i+0xfa>
 802437e:	6821      	ldr	r1, [r4, #0]
 8024380:	6833      	ldr	r3, [r6, #0]
 8024382:	0608      	lsls	r0, r1, #24
 8024384:	f853 5b04 	ldr.w	r5, [r3], #4
 8024388:	d402      	bmi.n	8024390 <_printf_i+0xe8>
 802438a:	0649      	lsls	r1, r1, #25
 802438c:	bf48      	it	mi
 802438e:	b2ad      	uxthmi	r5, r5
 8024390:	2f6f      	cmp	r7, #111	@ 0x6f
 8024392:	4853      	ldr	r0, [pc, #332]	@ (80244e0 <_printf_i+0x238>)
 8024394:	6033      	str	r3, [r6, #0]
 8024396:	bf14      	ite	ne
 8024398:	230a      	movne	r3, #10
 802439a:	2308      	moveq	r3, #8
 802439c:	2100      	movs	r1, #0
 802439e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80243a2:	6866      	ldr	r6, [r4, #4]
 80243a4:	60a6      	str	r6, [r4, #8]
 80243a6:	2e00      	cmp	r6, #0
 80243a8:	bfa2      	ittt	ge
 80243aa:	6821      	ldrge	r1, [r4, #0]
 80243ac:	f021 0104 	bicge.w	r1, r1, #4
 80243b0:	6021      	strge	r1, [r4, #0]
 80243b2:	b90d      	cbnz	r5, 80243b8 <_printf_i+0x110>
 80243b4:	2e00      	cmp	r6, #0
 80243b6:	d04b      	beq.n	8024450 <_printf_i+0x1a8>
 80243b8:	4616      	mov	r6, r2
 80243ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80243be:	fb03 5711 	mls	r7, r3, r1, r5
 80243c2:	5dc7      	ldrb	r7, [r0, r7]
 80243c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80243c8:	462f      	mov	r7, r5
 80243ca:	42bb      	cmp	r3, r7
 80243cc:	460d      	mov	r5, r1
 80243ce:	d9f4      	bls.n	80243ba <_printf_i+0x112>
 80243d0:	2b08      	cmp	r3, #8
 80243d2:	d10b      	bne.n	80243ec <_printf_i+0x144>
 80243d4:	6823      	ldr	r3, [r4, #0]
 80243d6:	07df      	lsls	r7, r3, #31
 80243d8:	d508      	bpl.n	80243ec <_printf_i+0x144>
 80243da:	6923      	ldr	r3, [r4, #16]
 80243dc:	6861      	ldr	r1, [r4, #4]
 80243de:	4299      	cmp	r1, r3
 80243e0:	bfde      	ittt	le
 80243e2:	2330      	movle	r3, #48	@ 0x30
 80243e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80243e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80243ec:	1b92      	subs	r2, r2, r6
 80243ee:	6122      	str	r2, [r4, #16]
 80243f0:	f8cd a000 	str.w	sl, [sp]
 80243f4:	464b      	mov	r3, r9
 80243f6:	aa03      	add	r2, sp, #12
 80243f8:	4621      	mov	r1, r4
 80243fa:	4640      	mov	r0, r8
 80243fc:	f7ff fee6 	bl	80241cc <_printf_common>
 8024400:	3001      	adds	r0, #1
 8024402:	d14a      	bne.n	802449a <_printf_i+0x1f2>
 8024404:	f04f 30ff 	mov.w	r0, #4294967295
 8024408:	b004      	add	sp, #16
 802440a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802440e:	6823      	ldr	r3, [r4, #0]
 8024410:	f043 0320 	orr.w	r3, r3, #32
 8024414:	6023      	str	r3, [r4, #0]
 8024416:	4833      	ldr	r0, [pc, #204]	@ (80244e4 <_printf_i+0x23c>)
 8024418:	2778      	movs	r7, #120	@ 0x78
 802441a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802441e:	6823      	ldr	r3, [r4, #0]
 8024420:	6831      	ldr	r1, [r6, #0]
 8024422:	061f      	lsls	r7, r3, #24
 8024424:	f851 5b04 	ldr.w	r5, [r1], #4
 8024428:	d402      	bmi.n	8024430 <_printf_i+0x188>
 802442a:	065f      	lsls	r7, r3, #25
 802442c:	bf48      	it	mi
 802442e:	b2ad      	uxthmi	r5, r5
 8024430:	6031      	str	r1, [r6, #0]
 8024432:	07d9      	lsls	r1, r3, #31
 8024434:	bf44      	itt	mi
 8024436:	f043 0320 	orrmi.w	r3, r3, #32
 802443a:	6023      	strmi	r3, [r4, #0]
 802443c:	b11d      	cbz	r5, 8024446 <_printf_i+0x19e>
 802443e:	2310      	movs	r3, #16
 8024440:	e7ac      	b.n	802439c <_printf_i+0xf4>
 8024442:	4827      	ldr	r0, [pc, #156]	@ (80244e0 <_printf_i+0x238>)
 8024444:	e7e9      	b.n	802441a <_printf_i+0x172>
 8024446:	6823      	ldr	r3, [r4, #0]
 8024448:	f023 0320 	bic.w	r3, r3, #32
 802444c:	6023      	str	r3, [r4, #0]
 802444e:	e7f6      	b.n	802443e <_printf_i+0x196>
 8024450:	4616      	mov	r6, r2
 8024452:	e7bd      	b.n	80243d0 <_printf_i+0x128>
 8024454:	6833      	ldr	r3, [r6, #0]
 8024456:	6825      	ldr	r5, [r4, #0]
 8024458:	6961      	ldr	r1, [r4, #20]
 802445a:	1d18      	adds	r0, r3, #4
 802445c:	6030      	str	r0, [r6, #0]
 802445e:	062e      	lsls	r6, r5, #24
 8024460:	681b      	ldr	r3, [r3, #0]
 8024462:	d501      	bpl.n	8024468 <_printf_i+0x1c0>
 8024464:	6019      	str	r1, [r3, #0]
 8024466:	e002      	b.n	802446e <_printf_i+0x1c6>
 8024468:	0668      	lsls	r0, r5, #25
 802446a:	d5fb      	bpl.n	8024464 <_printf_i+0x1bc>
 802446c:	8019      	strh	r1, [r3, #0]
 802446e:	2300      	movs	r3, #0
 8024470:	6123      	str	r3, [r4, #16]
 8024472:	4616      	mov	r6, r2
 8024474:	e7bc      	b.n	80243f0 <_printf_i+0x148>
 8024476:	6833      	ldr	r3, [r6, #0]
 8024478:	1d1a      	adds	r2, r3, #4
 802447a:	6032      	str	r2, [r6, #0]
 802447c:	681e      	ldr	r6, [r3, #0]
 802447e:	6862      	ldr	r2, [r4, #4]
 8024480:	2100      	movs	r1, #0
 8024482:	4630      	mov	r0, r6
 8024484:	f7db ff44 	bl	8000310 <memchr>
 8024488:	b108      	cbz	r0, 802448e <_printf_i+0x1e6>
 802448a:	1b80      	subs	r0, r0, r6
 802448c:	6060      	str	r0, [r4, #4]
 802448e:	6863      	ldr	r3, [r4, #4]
 8024490:	6123      	str	r3, [r4, #16]
 8024492:	2300      	movs	r3, #0
 8024494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024498:	e7aa      	b.n	80243f0 <_printf_i+0x148>
 802449a:	6923      	ldr	r3, [r4, #16]
 802449c:	4632      	mov	r2, r6
 802449e:	4649      	mov	r1, r9
 80244a0:	4640      	mov	r0, r8
 80244a2:	47d0      	blx	sl
 80244a4:	3001      	adds	r0, #1
 80244a6:	d0ad      	beq.n	8024404 <_printf_i+0x15c>
 80244a8:	6823      	ldr	r3, [r4, #0]
 80244aa:	079b      	lsls	r3, r3, #30
 80244ac:	d413      	bmi.n	80244d6 <_printf_i+0x22e>
 80244ae:	68e0      	ldr	r0, [r4, #12]
 80244b0:	9b03      	ldr	r3, [sp, #12]
 80244b2:	4298      	cmp	r0, r3
 80244b4:	bfb8      	it	lt
 80244b6:	4618      	movlt	r0, r3
 80244b8:	e7a6      	b.n	8024408 <_printf_i+0x160>
 80244ba:	2301      	movs	r3, #1
 80244bc:	4632      	mov	r2, r6
 80244be:	4649      	mov	r1, r9
 80244c0:	4640      	mov	r0, r8
 80244c2:	47d0      	blx	sl
 80244c4:	3001      	adds	r0, #1
 80244c6:	d09d      	beq.n	8024404 <_printf_i+0x15c>
 80244c8:	3501      	adds	r5, #1
 80244ca:	68e3      	ldr	r3, [r4, #12]
 80244cc:	9903      	ldr	r1, [sp, #12]
 80244ce:	1a5b      	subs	r3, r3, r1
 80244d0:	42ab      	cmp	r3, r5
 80244d2:	dcf2      	bgt.n	80244ba <_printf_i+0x212>
 80244d4:	e7eb      	b.n	80244ae <_printf_i+0x206>
 80244d6:	2500      	movs	r5, #0
 80244d8:	f104 0619 	add.w	r6, r4, #25
 80244dc:	e7f5      	b.n	80244ca <_printf_i+0x222>
 80244de:	bf00      	nop
 80244e0:	08028035 	.word	0x08028035
 80244e4:	08028046 	.word	0x08028046

080244e8 <__swbuf_r>:
 80244e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244ea:	460e      	mov	r6, r1
 80244ec:	4614      	mov	r4, r2
 80244ee:	4605      	mov	r5, r0
 80244f0:	b118      	cbz	r0, 80244fa <__swbuf_r+0x12>
 80244f2:	6a03      	ldr	r3, [r0, #32]
 80244f4:	b90b      	cbnz	r3, 80244fa <__swbuf_r+0x12>
 80244f6:	f7ff f9dd 	bl	80238b4 <__sinit>
 80244fa:	69a3      	ldr	r3, [r4, #24]
 80244fc:	60a3      	str	r3, [r4, #8]
 80244fe:	89a3      	ldrh	r3, [r4, #12]
 8024500:	071a      	lsls	r2, r3, #28
 8024502:	d501      	bpl.n	8024508 <__swbuf_r+0x20>
 8024504:	6923      	ldr	r3, [r4, #16]
 8024506:	b943      	cbnz	r3, 802451a <__swbuf_r+0x32>
 8024508:	4621      	mov	r1, r4
 802450a:	4628      	mov	r0, r5
 802450c:	f000 f82a 	bl	8024564 <__swsetup_r>
 8024510:	b118      	cbz	r0, 802451a <__swbuf_r+0x32>
 8024512:	f04f 37ff 	mov.w	r7, #4294967295
 8024516:	4638      	mov	r0, r7
 8024518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802451a:	6823      	ldr	r3, [r4, #0]
 802451c:	6922      	ldr	r2, [r4, #16]
 802451e:	1a98      	subs	r0, r3, r2
 8024520:	6963      	ldr	r3, [r4, #20]
 8024522:	b2f6      	uxtb	r6, r6
 8024524:	4283      	cmp	r3, r0
 8024526:	4637      	mov	r7, r6
 8024528:	dc05      	bgt.n	8024536 <__swbuf_r+0x4e>
 802452a:	4621      	mov	r1, r4
 802452c:	4628      	mov	r0, r5
 802452e:	f7ff fcbb 	bl	8023ea8 <_fflush_r>
 8024532:	2800      	cmp	r0, #0
 8024534:	d1ed      	bne.n	8024512 <__swbuf_r+0x2a>
 8024536:	68a3      	ldr	r3, [r4, #8]
 8024538:	3b01      	subs	r3, #1
 802453a:	60a3      	str	r3, [r4, #8]
 802453c:	6823      	ldr	r3, [r4, #0]
 802453e:	1c5a      	adds	r2, r3, #1
 8024540:	6022      	str	r2, [r4, #0]
 8024542:	701e      	strb	r6, [r3, #0]
 8024544:	6962      	ldr	r2, [r4, #20]
 8024546:	1c43      	adds	r3, r0, #1
 8024548:	429a      	cmp	r2, r3
 802454a:	d004      	beq.n	8024556 <__swbuf_r+0x6e>
 802454c:	89a3      	ldrh	r3, [r4, #12]
 802454e:	07db      	lsls	r3, r3, #31
 8024550:	d5e1      	bpl.n	8024516 <__swbuf_r+0x2e>
 8024552:	2e0a      	cmp	r6, #10
 8024554:	d1df      	bne.n	8024516 <__swbuf_r+0x2e>
 8024556:	4621      	mov	r1, r4
 8024558:	4628      	mov	r0, r5
 802455a:	f7ff fca5 	bl	8023ea8 <_fflush_r>
 802455e:	2800      	cmp	r0, #0
 8024560:	d0d9      	beq.n	8024516 <__swbuf_r+0x2e>
 8024562:	e7d6      	b.n	8024512 <__swbuf_r+0x2a>

08024564 <__swsetup_r>:
 8024564:	b538      	push	{r3, r4, r5, lr}
 8024566:	4b29      	ldr	r3, [pc, #164]	@ (802460c <__swsetup_r+0xa8>)
 8024568:	4605      	mov	r5, r0
 802456a:	6818      	ldr	r0, [r3, #0]
 802456c:	460c      	mov	r4, r1
 802456e:	b118      	cbz	r0, 8024578 <__swsetup_r+0x14>
 8024570:	6a03      	ldr	r3, [r0, #32]
 8024572:	b90b      	cbnz	r3, 8024578 <__swsetup_r+0x14>
 8024574:	f7ff f99e 	bl	80238b4 <__sinit>
 8024578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802457c:	0719      	lsls	r1, r3, #28
 802457e:	d422      	bmi.n	80245c6 <__swsetup_r+0x62>
 8024580:	06da      	lsls	r2, r3, #27
 8024582:	d407      	bmi.n	8024594 <__swsetup_r+0x30>
 8024584:	2209      	movs	r2, #9
 8024586:	602a      	str	r2, [r5, #0]
 8024588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802458c:	81a3      	strh	r3, [r4, #12]
 802458e:	f04f 30ff 	mov.w	r0, #4294967295
 8024592:	e033      	b.n	80245fc <__swsetup_r+0x98>
 8024594:	0758      	lsls	r0, r3, #29
 8024596:	d512      	bpl.n	80245be <__swsetup_r+0x5a>
 8024598:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802459a:	b141      	cbz	r1, 80245ae <__swsetup_r+0x4a>
 802459c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80245a0:	4299      	cmp	r1, r3
 80245a2:	d002      	beq.n	80245aa <__swsetup_r+0x46>
 80245a4:	4628      	mov	r0, r5
 80245a6:	f7ff fafb 	bl	8023ba0 <_free_r>
 80245aa:	2300      	movs	r3, #0
 80245ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80245ae:	89a3      	ldrh	r3, [r4, #12]
 80245b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80245b4:	81a3      	strh	r3, [r4, #12]
 80245b6:	2300      	movs	r3, #0
 80245b8:	6063      	str	r3, [r4, #4]
 80245ba:	6923      	ldr	r3, [r4, #16]
 80245bc:	6023      	str	r3, [r4, #0]
 80245be:	89a3      	ldrh	r3, [r4, #12]
 80245c0:	f043 0308 	orr.w	r3, r3, #8
 80245c4:	81a3      	strh	r3, [r4, #12]
 80245c6:	6923      	ldr	r3, [r4, #16]
 80245c8:	b94b      	cbnz	r3, 80245de <__swsetup_r+0x7a>
 80245ca:	89a3      	ldrh	r3, [r4, #12]
 80245cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80245d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80245d4:	d003      	beq.n	80245de <__swsetup_r+0x7a>
 80245d6:	4621      	mov	r1, r4
 80245d8:	4628      	mov	r0, r5
 80245da:	f000 f883 	bl	80246e4 <__smakebuf_r>
 80245de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80245e2:	f013 0201 	ands.w	r2, r3, #1
 80245e6:	d00a      	beq.n	80245fe <__swsetup_r+0x9a>
 80245e8:	2200      	movs	r2, #0
 80245ea:	60a2      	str	r2, [r4, #8]
 80245ec:	6962      	ldr	r2, [r4, #20]
 80245ee:	4252      	negs	r2, r2
 80245f0:	61a2      	str	r2, [r4, #24]
 80245f2:	6922      	ldr	r2, [r4, #16]
 80245f4:	b942      	cbnz	r2, 8024608 <__swsetup_r+0xa4>
 80245f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80245fa:	d1c5      	bne.n	8024588 <__swsetup_r+0x24>
 80245fc:	bd38      	pop	{r3, r4, r5, pc}
 80245fe:	0799      	lsls	r1, r3, #30
 8024600:	bf58      	it	pl
 8024602:	6962      	ldrpl	r2, [r4, #20]
 8024604:	60a2      	str	r2, [r4, #8]
 8024606:	e7f4      	b.n	80245f2 <__swsetup_r+0x8e>
 8024608:	2000      	movs	r0, #0
 802460a:	e7f7      	b.n	80245fc <__swsetup_r+0x98>
 802460c:	20000038 	.word	0x20000038

08024610 <_raise_r>:
 8024610:	291f      	cmp	r1, #31
 8024612:	b538      	push	{r3, r4, r5, lr}
 8024614:	4605      	mov	r5, r0
 8024616:	460c      	mov	r4, r1
 8024618:	d904      	bls.n	8024624 <_raise_r+0x14>
 802461a:	2316      	movs	r3, #22
 802461c:	6003      	str	r3, [r0, #0]
 802461e:	f04f 30ff 	mov.w	r0, #4294967295
 8024622:	bd38      	pop	{r3, r4, r5, pc}
 8024624:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024626:	b112      	cbz	r2, 802462e <_raise_r+0x1e>
 8024628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802462c:	b94b      	cbnz	r3, 8024642 <_raise_r+0x32>
 802462e:	4628      	mov	r0, r5
 8024630:	f000 f830 	bl	8024694 <_getpid_r>
 8024634:	4622      	mov	r2, r4
 8024636:	4601      	mov	r1, r0
 8024638:	4628      	mov	r0, r5
 802463a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802463e:	f000 b817 	b.w	8024670 <_kill_r>
 8024642:	2b01      	cmp	r3, #1
 8024644:	d00a      	beq.n	802465c <_raise_r+0x4c>
 8024646:	1c59      	adds	r1, r3, #1
 8024648:	d103      	bne.n	8024652 <_raise_r+0x42>
 802464a:	2316      	movs	r3, #22
 802464c:	6003      	str	r3, [r0, #0]
 802464e:	2001      	movs	r0, #1
 8024650:	e7e7      	b.n	8024622 <_raise_r+0x12>
 8024652:	2100      	movs	r1, #0
 8024654:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024658:	4620      	mov	r0, r4
 802465a:	4798      	blx	r3
 802465c:	2000      	movs	r0, #0
 802465e:	e7e0      	b.n	8024622 <_raise_r+0x12>

08024660 <raise>:
 8024660:	4b02      	ldr	r3, [pc, #8]	@ (802466c <raise+0xc>)
 8024662:	4601      	mov	r1, r0
 8024664:	6818      	ldr	r0, [r3, #0]
 8024666:	f7ff bfd3 	b.w	8024610 <_raise_r>
 802466a:	bf00      	nop
 802466c:	20000038 	.word	0x20000038

08024670 <_kill_r>:
 8024670:	b538      	push	{r3, r4, r5, lr}
 8024672:	4d07      	ldr	r5, [pc, #28]	@ (8024690 <_kill_r+0x20>)
 8024674:	2300      	movs	r3, #0
 8024676:	4604      	mov	r4, r0
 8024678:	4608      	mov	r0, r1
 802467a:	4611      	mov	r1, r2
 802467c:	602b      	str	r3, [r5, #0]
 802467e:	f7de fc9b 	bl	8002fb8 <_kill>
 8024682:	1c43      	adds	r3, r0, #1
 8024684:	d102      	bne.n	802468c <_kill_r+0x1c>
 8024686:	682b      	ldr	r3, [r5, #0]
 8024688:	b103      	cbz	r3, 802468c <_kill_r+0x1c>
 802468a:	6023      	str	r3, [r4, #0]
 802468c:	bd38      	pop	{r3, r4, r5, pc}
 802468e:	bf00      	nop
 8024690:	20002878 	.word	0x20002878

08024694 <_getpid_r>:
 8024694:	f7de bc88 	b.w	8002fa8 <_getpid>

08024698 <__swhatbuf_r>:
 8024698:	b570      	push	{r4, r5, r6, lr}
 802469a:	460c      	mov	r4, r1
 802469c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80246a0:	2900      	cmp	r1, #0
 80246a2:	b096      	sub	sp, #88	@ 0x58
 80246a4:	4615      	mov	r5, r2
 80246a6:	461e      	mov	r6, r3
 80246a8:	da0d      	bge.n	80246c6 <__swhatbuf_r+0x2e>
 80246aa:	89a3      	ldrh	r3, [r4, #12]
 80246ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80246b0:	f04f 0100 	mov.w	r1, #0
 80246b4:	bf14      	ite	ne
 80246b6:	2340      	movne	r3, #64	@ 0x40
 80246b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80246bc:	2000      	movs	r0, #0
 80246be:	6031      	str	r1, [r6, #0]
 80246c0:	602b      	str	r3, [r5, #0]
 80246c2:	b016      	add	sp, #88	@ 0x58
 80246c4:	bd70      	pop	{r4, r5, r6, pc}
 80246c6:	466a      	mov	r2, sp
 80246c8:	f000 f848 	bl	802475c <_fstat_r>
 80246cc:	2800      	cmp	r0, #0
 80246ce:	dbec      	blt.n	80246aa <__swhatbuf_r+0x12>
 80246d0:	9901      	ldr	r1, [sp, #4]
 80246d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80246d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80246da:	4259      	negs	r1, r3
 80246dc:	4159      	adcs	r1, r3
 80246de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80246e2:	e7eb      	b.n	80246bc <__swhatbuf_r+0x24>

080246e4 <__smakebuf_r>:
 80246e4:	898b      	ldrh	r3, [r1, #12]
 80246e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80246e8:	079d      	lsls	r5, r3, #30
 80246ea:	4606      	mov	r6, r0
 80246ec:	460c      	mov	r4, r1
 80246ee:	d507      	bpl.n	8024700 <__smakebuf_r+0x1c>
 80246f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80246f4:	6023      	str	r3, [r4, #0]
 80246f6:	6123      	str	r3, [r4, #16]
 80246f8:	2301      	movs	r3, #1
 80246fa:	6163      	str	r3, [r4, #20]
 80246fc:	b003      	add	sp, #12
 80246fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024700:	ab01      	add	r3, sp, #4
 8024702:	466a      	mov	r2, sp
 8024704:	f7ff ffc8 	bl	8024698 <__swhatbuf_r>
 8024708:	9f00      	ldr	r7, [sp, #0]
 802470a:	4605      	mov	r5, r0
 802470c:	4639      	mov	r1, r7
 802470e:	4630      	mov	r0, r6
 8024710:	f7ff faba 	bl	8023c88 <_malloc_r>
 8024714:	b948      	cbnz	r0, 802472a <__smakebuf_r+0x46>
 8024716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802471a:	059a      	lsls	r2, r3, #22
 802471c:	d4ee      	bmi.n	80246fc <__smakebuf_r+0x18>
 802471e:	f023 0303 	bic.w	r3, r3, #3
 8024722:	f043 0302 	orr.w	r3, r3, #2
 8024726:	81a3      	strh	r3, [r4, #12]
 8024728:	e7e2      	b.n	80246f0 <__smakebuf_r+0xc>
 802472a:	89a3      	ldrh	r3, [r4, #12]
 802472c:	6020      	str	r0, [r4, #0]
 802472e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024732:	81a3      	strh	r3, [r4, #12]
 8024734:	9b01      	ldr	r3, [sp, #4]
 8024736:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802473a:	b15b      	cbz	r3, 8024754 <__smakebuf_r+0x70>
 802473c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024740:	4630      	mov	r0, r6
 8024742:	f000 f81d 	bl	8024780 <_isatty_r>
 8024746:	b128      	cbz	r0, 8024754 <__smakebuf_r+0x70>
 8024748:	89a3      	ldrh	r3, [r4, #12]
 802474a:	f023 0303 	bic.w	r3, r3, #3
 802474e:	f043 0301 	orr.w	r3, r3, #1
 8024752:	81a3      	strh	r3, [r4, #12]
 8024754:	89a3      	ldrh	r3, [r4, #12]
 8024756:	431d      	orrs	r5, r3
 8024758:	81a5      	strh	r5, [r4, #12]
 802475a:	e7cf      	b.n	80246fc <__smakebuf_r+0x18>

0802475c <_fstat_r>:
 802475c:	b538      	push	{r3, r4, r5, lr}
 802475e:	4d07      	ldr	r5, [pc, #28]	@ (802477c <_fstat_r+0x20>)
 8024760:	2300      	movs	r3, #0
 8024762:	4604      	mov	r4, r0
 8024764:	4608      	mov	r0, r1
 8024766:	4611      	mov	r1, r2
 8024768:	602b      	str	r3, [r5, #0]
 802476a:	f7de fc85 	bl	8003078 <_fstat>
 802476e:	1c43      	adds	r3, r0, #1
 8024770:	d102      	bne.n	8024778 <_fstat_r+0x1c>
 8024772:	682b      	ldr	r3, [r5, #0]
 8024774:	b103      	cbz	r3, 8024778 <_fstat_r+0x1c>
 8024776:	6023      	str	r3, [r4, #0]
 8024778:	bd38      	pop	{r3, r4, r5, pc}
 802477a:	bf00      	nop
 802477c:	20002878 	.word	0x20002878

08024780 <_isatty_r>:
 8024780:	b538      	push	{r3, r4, r5, lr}
 8024782:	4d06      	ldr	r5, [pc, #24]	@ (802479c <_isatty_r+0x1c>)
 8024784:	2300      	movs	r3, #0
 8024786:	4604      	mov	r4, r0
 8024788:	4608      	mov	r0, r1
 802478a:	602b      	str	r3, [r5, #0]
 802478c:	f7de fc84 	bl	8003098 <_isatty>
 8024790:	1c43      	adds	r3, r0, #1
 8024792:	d102      	bne.n	802479a <_isatty_r+0x1a>
 8024794:	682b      	ldr	r3, [r5, #0]
 8024796:	b103      	cbz	r3, 802479a <_isatty_r+0x1a>
 8024798:	6023      	str	r3, [r4, #0]
 802479a:	bd38      	pop	{r3, r4, r5, pc}
 802479c:	20002878 	.word	0x20002878

080247a0 <_init>:
 80247a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247a2:	bf00      	nop
 80247a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80247a6:	bc08      	pop	{r3}
 80247a8:	469e      	mov	lr, r3
 80247aa:	4770      	bx	lr

080247ac <_fini>:
 80247ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247ae:	bf00      	nop
 80247b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80247b2:	bc08      	pop	{r3}
 80247b4:	469e      	mov	lr, r3
 80247b6:	4770      	bx	lr
