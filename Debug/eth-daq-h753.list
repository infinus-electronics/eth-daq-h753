
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024698  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003918  08024938  08024938  00025938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08028250  08028250  00029250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08028258  08028258  00029258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802825c  0802825c  0002925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  08028260  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002800  20000088  080282e8  0002a088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002888  080282e8  0002a888  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002e88  080282e8  0002ae88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00043000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    00030110  30000000  30000000  0009c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  000cd000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000d5000  2**0
                  CONTENTS, READONLY
 14 .debug_info   000635f6  00000000  00000000  000d502e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c046  00000000  00000000  00138624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000031b0  00000000  00000000  00144670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000027df  00000000  00000000  00147820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004f658  00000000  00000000  00149fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005cc3a  00000000  00000000  00199657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191fe8  00000000  00000000  001f6291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00388279  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d850  00000000  00000000  003882bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00395b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08024920 	.word	0x08024920

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	08024920 	.word	0x08024920

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 fe79 	bl	800239c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	613a      	str	r2, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f019 ff8f 	bl	801a698 <HAL_Init>

  /* USER CODE BEGIN Init */
  usZero = 0;
 800077a:	4ba8      	ldr	r3, [pc, #672]	@ (8000a1c <main+0x37c>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]

  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 8000780:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000784:	2141      	movs	r1, #65	@ 0x41
 8000786:	48a6      	ldr	r0, [pc, #664]	@ (8000a20 <main+0x380>)
 8000788:	f022 fb45 	bl	8022e16 <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 800078c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000790:	2142      	movs	r1, #66	@ 0x42
 8000792:	48a4      	ldr	r0, [pc, #656]	@ (8000a24 <main+0x384>)
 8000794:	f022 fb3f 	bl	8022e16 <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000798:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800079c:	2143      	movs	r1, #67	@ 0x43
 800079e:	48a2      	ldr	r0, [pc, #648]	@ (8000a28 <main+0x388>)
 80007a0:	f022 fb39 	bl	8022e16 <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 80007a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007a8:	2144      	movs	r1, #68	@ 0x44
 80007aa:	48a0      	ldr	r0, [pc, #640]	@ (8000a2c <main+0x38c>)
 80007ac:	f022 fb33 	bl	8022e16 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
}
 80007b4:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 fbf3 	bl	8000fa0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ba:	f000 fc9f 	bl	80010fc <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007be:	f001 f905 	bl	80019cc <vHeapInit>
  vStartHighResolutionTimer();
 80007c2:	f022 f947 	bl	8022a54 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f001 f829 	bl	800181c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f000 ffcf 	bl	800176c <MX_DMA_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007ce:	f000 ff81 	bl	80016d4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007d2:	f000 fd03 	bl	80011dc <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d6:	f000 fd59 	bl	800128c <MX_SPI2_Init>
  MX_SPI3_Init();
 80007da:	f000 fdad 	bl	8001338 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007de:	f000 fe03 	bl	80013e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007e2:	f000 fe53 	bl	800148c <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007e6:	f000 fcb9 	bl	800115c <MX_I2C4_Init>
  MX_TIM4_Init();
 80007ea:	f000 fe9d 	bl	8001528 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007ee:	f000 ff21 	bl	8001634 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //7 Segment Setup
  //TIM4 CH1
  DMA1_Stream4->M0AR = &ulSevenSegD1;
 80007f2:	4b8f      	ldr	r3, [pc, #572]	@ (8000a30 <main+0x390>)
 80007f4:	4a8f      	ldr	r2, [pc, #572]	@ (8000a34 <main+0x394>)
 80007f6:	60da      	str	r2, [r3, #12]
  DMA1_Stream4->PAR = &(GPIOD->BSRR); //top 16 bits are reset, bottom 16 bits are set, set has priority if both bits set
 80007f8:	4b8d      	ldr	r3, [pc, #564]	@ (8000a30 <main+0x390>)
 80007fa:	4a8f      	ldr	r2, [pc, #572]	@ (8000a38 <main+0x398>)
 80007fc:	609a      	str	r2, [r3, #8]
  DMA1_Stream4->NDTR = 1;
 80007fe:	4b8c      	ldr	r3, [pc, #560]	@ (8000a30 <main+0x390>)
 8000800:	2201      	movs	r2, #1
 8000802:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000804:	f3bf 8f4f 	dsb	sy
}
 8000808:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream4->CR |= DMA_SxCR_EN;
 800080a:	4b89      	ldr	r3, [pc, #548]	@ (8000a30 <main+0x390>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a88      	ldr	r2, [pc, #544]	@ (8000a30 <main+0x390>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6013      	str	r3, [r2, #0]
  //TIM4 UP
  DMA1_Stream5->M0AR = &ulSevenSegD2;
 8000816:	4b89      	ldr	r3, [pc, #548]	@ (8000a3c <main+0x39c>)
 8000818:	4a89      	ldr	r2, [pc, #548]	@ (8000a40 <main+0x3a0>)
 800081a:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(GPIOD->BSRR);
 800081c:	4b87      	ldr	r3, [pc, #540]	@ (8000a3c <main+0x39c>)
 800081e:	4a86      	ldr	r2, [pc, #536]	@ (8000a38 <main+0x398>)
 8000820:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = 1;
 8000822:	4b86      	ldr	r3, [pc, #536]	@ (8000a3c <main+0x39c>)
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000828:	f3bf 8f4f 	dsb	sy
}
 800082c:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream5->CR |= DMA_SxCR_EN;
 800082e:	4b83      	ldr	r3, [pc, #524]	@ (8000a3c <main+0x39c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a82      	ldr	r2, [pc, #520]	@ (8000a3c <main+0x39c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6013      	str	r3, [r2, #0]
  //??? initializing the vars in the top just doesn't work???
  ulSevenSegD2 = 0x00FF0000;
 800083a:	4b81      	ldr	r3, [pc, #516]	@ (8000a40 <main+0x3a0>)
 800083c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000840:	601a      	str	r2, [r3, #0]
  ulSevenSegD1 = 0x00FF0000;
 8000842:	4b7c      	ldr	r3, [pc, #496]	@ (8000a34 <main+0x394>)
 8000844:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000848:	601a      	str	r2, [r3, #0]
  //TIM4 drives multiplexing
  TIM4->CR1 |= TIM_CR1_URS;
 800084a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a44 <main+0x3a4>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a44 <main+0x3a4>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~TIM_CR1_UDIS;
 8000856:	4b7b      	ldr	r3, [pc, #492]	@ (8000a44 <main+0x3a4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a7a      	ldr	r2, [pc, #488]	@ (8000a44 <main+0x3a4>)
 800085c:	f023 0302 	bic.w	r3, r3, #2
 8000860:	6013      	str	r3, [r2, #0]
  TIM4->CR2 &= ~TIM_CR2_CCDS;
 8000862:	4b78      	ldr	r3, [pc, #480]	@ (8000a44 <main+0x3a4>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	4a77      	ldr	r2, [pc, #476]	@ (8000a44 <main+0x3a4>)
 8000868:	f023 0308 	bic.w	r3, r3, #8
 800086c:	6053      	str	r3, [r2, #4]
  TIM4->DIER |= TIM_DIER_UDE | TIM_DIER_CC1DE;
 800086e:	4b75      	ldr	r3, [pc, #468]	@ (8000a44 <main+0x3a4>)
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	4a74      	ldr	r2, [pc, #464]	@ (8000a44 <main+0x3a4>)
 8000874:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000878:	60d3      	str	r3, [r2, #12]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 800087a:	4b72      	ldr	r3, [pc, #456]	@ (8000a44 <main+0x3a4>)
 800087c:	6a1b      	ldr	r3, [r3, #32]
 800087e:	4a71      	ldr	r2, [pc, #452]	@ (8000a44 <main+0x3a4>)
 8000880:	f043 0311 	orr.w	r3, r3, #17
 8000884:	6213      	str	r3, [r2, #32]
  TIM4->EGR |= TIM_EGR_UG | TIM_EGR_CC1G;
 8000886:	4b6f      	ldr	r3, [pc, #444]	@ (8000a44 <main+0x3a4>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a6e      	ldr	r2, [pc, #440]	@ (8000a44 <main+0x3a4>)
 800088c:	f043 0303 	orr.w	r3, r3, #3
 8000890:	6153      	str	r3, [r2, #20]
  TIM4->CR1 |= TIM_CR1_CEN;
 8000892:	4b6c      	ldr	r3, [pc, #432]	@ (8000a44 <main+0x3a4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a6b      	ldr	r2, [pc, #428]	@ (8000a44 <main+0x3a4>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6013      	str	r3, [r2, #0]

  //DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008a4:	4868      	ldr	r0, [pc, #416]	@ (8000a48 <main+0x3a8>)
 80008a6:	f01c fa0d 	bl	801ccc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b0:	4865      	ldr	r0, [pc, #404]	@ (8000a48 <main+0x3a8>)
 80008b2:	f01c fa07 	bl	801ccc4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008b6:	2032      	movs	r0, #50	@ 0x32
 80008b8:	f019 ff80 	bl	801a7bc <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c2:	4861      	ldr	r0, [pc, #388]	@ (8000a48 <main+0x3a8>)
 80008c4:	f01c f9fe 	bl	801ccc4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008c8:	2032      	movs	r0, #50	@ 0x32
 80008ca:	f019 ff77 	bl	801a7bc <HAL_Delay>

  I2C4->CR2 = ( (0b0001100 << 1) & 0xFFFE )  // 7-bit address
 80008ce:	4b5f      	ldr	r3, [pc, #380]	@ (8000a4c <main+0x3ac>)
 80008d0:	4a5f      	ldr	r2, [pc, #380]	@ (8000a50 <main+0x3b0>)
 80008d2:	605a      	str	r2, [r3, #4]
                 | (3 << 16)                   // NBYTES = 2
                 | (0 << 10)                   // Write direction (0 = write)
                 | I2C_CR2_AUTOEND             // Auto generate STOP
                 | I2C_CR2_START;              // Generate START
  while( (I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0 );
 80008d4:	bf00      	nop
 80008d6:	4b5d      	ldr	r3, [pc, #372]	@ (8000a4c <main+0x3ac>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0312 	and.w	r3, r3, #18
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f9      	beq.n	80008d6 <main+0x236>
//      if (I2C4->ISR & I2C_ISR_NACKF) {
//          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
//          return;  // Abort on failure
//      }
  I2C4->TXDR = 0b00110001; //write 1V = 1638 to DAC A, left justified 12 bit to 16 bit
 80008e2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <main+0x3ac>)
 80008e4:	2231      	movs	r2, #49	@ 0x31
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008e8:	bf00      	nop
 80008ea:	4b58      	ldr	r3, [pc, #352]	@ (8000a4c <main+0x3ac>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f9      	beq.n	80008ea <main+0x24a>
  I2C4->TXDR = 0x66; //MSB
 80008f6:	4b55      	ldr	r3, [pc, #340]	@ (8000a4c <main+0x3ac>)
 80008f8:	2266      	movs	r2, #102	@ 0x66
 80008fa:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008fc:	bf00      	nop
 80008fe:	4b53      	ldr	r3, [pc, #332]	@ (8000a4c <main+0x3ac>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f9      	beq.n	80008fe <main+0x25e>
  I2C4->TXDR = 0x60; //LSB
 800090a:	4b50      	ldr	r3, [pc, #320]	@ (8000a4c <main+0x3ac>)
 800090c:	2260      	movs	r2, #96	@ 0x60
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXE)) == 0 );
 8000910:	bf00      	nop
 8000912:	4b4e      	ldr	r3, [pc, #312]	@ (8000a4c <main+0x3ac>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f9      	beq.n	8000912 <main+0x272>
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF) {
 800091e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <main+0x3ac>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	2b00      	cmp	r3, #0
 8000928:	d005      	beq.n	8000936 <main+0x296>
      // Handle error (e.g., reset I2C)
      I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
 800092a:	4b48      	ldr	r3, [pc, #288]	@ (8000a4c <main+0x3ac>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a47      	ldr	r2, [pc, #284]	@ (8000a4c <main+0x3ac>)
 8000930:	f043 0310 	orr.w	r3, r3, #16
 8000934:	61d3      	str	r3, [r2, #28]
  }

  I2C4->CR2 = ( (0b0001100 << 1) & 0xFFFE )  // 7-bit address
 8000936:	4b45      	ldr	r3, [pc, #276]	@ (8000a4c <main+0x3ac>)
 8000938:	4a45      	ldr	r2, [pc, #276]	@ (8000a50 <main+0x3b0>)
 800093a:	605a      	str	r2, [r3, #4]
                 | (3 << 16)                   // NBYTES = 2
                 | (0 << 10)                   // Write direction (0 = write)
                 | I2C_CR2_AUTOEND             // Auto generate STOP
                 | I2C_CR2_START;              // Generate START
  while( (I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0 );
 800093c:	bf00      	nop
 800093e:	4b43      	ldr	r3, [pc, #268]	@ (8000a4c <main+0x3ac>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f003 0312 	and.w	r3, r3, #18
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0f9      	beq.n	800093e <main+0x29e>
//      if (I2C4->ISR & I2C_ISR_NACKF) {
//          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
//          return;  // Abort on failure
//      }
  I2C4->TXDR = 0b00111000; //write 0.4V = 656 to DAC B, left justified 12 bit to 16 bit
 800094a:	4b40      	ldr	r3, [pc, #256]	@ (8000a4c <main+0x3ac>)
 800094c:	2238      	movs	r2, #56	@ 0x38
 800094e:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 8000950:	bf00      	nop
 8000952:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <main+0x3ac>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0f9      	beq.n	8000952 <main+0x2b2>
  I2C4->TXDR = 0x29; //MSB
 800095e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a4c <main+0x3ac>)
 8000960:	2229      	movs	r2, #41	@ 0x29
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 8000964:	bf00      	nop
 8000966:	4b39      	ldr	r3, [pc, #228]	@ (8000a4c <main+0x3ac>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0f9      	beq.n	8000966 <main+0x2c6>
  I2C4->TXDR = 0x00; //LSB
 8000972:	4b36      	ldr	r3, [pc, #216]	@ (8000a4c <main+0x3ac>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXE)) == 0 );
 8000978:	bf00      	nop
 800097a:	4b34      	ldr	r3, [pc, #208]	@ (8000a4c <main+0x3ac>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f9      	beq.n	800097a <main+0x2da>
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF) {
 8000986:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <main+0x3ac>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	2b00      	cmp	r3, #0
 8000990:	d005      	beq.n	800099e <main+0x2fe>
      // Handle error (e.g., reset I2C)
      I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
 8000992:	4b2e      	ldr	r3, [pc, #184]	@ (8000a4c <main+0x3ac>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a2d      	ldr	r2, [pc, #180]	@ (8000a4c <main+0x3ac>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	61d3      	str	r3, [r2, #28]
  }

  //SPI1 RX Stream
   DMA1_Stream0->M0AR = usADCDataMock0;
 800099e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a54 <main+0x3b4>)
 80009a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a20 <main+0x380>)
 80009a2:	60da      	str	r2, [r3, #12]
   DMA1_Stream0->M1AR = usADCDataMock1;
 80009a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a54 <main+0x3b4>)
 80009a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a24 <main+0x384>)
 80009a8:	611a      	str	r2, [r3, #16]
   DMA1_Stream0->PAR = &(SPI1->RXDR);
 80009aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000a54 <main+0x3b4>)
 80009ac:	4a2a      	ldr	r2, [pc, #168]	@ (8000a58 <main+0x3b8>)
 80009ae:	609a      	str	r2, [r3, #8]
   DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 80009b0:	4b28      	ldr	r3, [pc, #160]	@ (8000a54 <main+0x3b4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a27      	ldr	r2, [pc, #156]	@ (8000a54 <main+0x3b4>)
 80009b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009ba:	6013      	str	r3, [r2, #0]
   DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 80009bc:	4b25      	ldr	r3, [pc, #148]	@ (8000a54 <main+0x3b4>)
 80009be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009c2:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
   DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <main+0x3b4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a22      	ldr	r2, [pc, #136]	@ (8000a54 <main+0x3b4>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80009d0:	f3bf 8f4f 	dsb	sy
}
 80009d4:	bf00      	nop
   __DSB(); //required?
   DMA1_Stream0->CR |= DMA_SxCR_EN;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <main+0x3b4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a1e      	ldr	r2, [pc, #120]	@ (8000a54 <main+0x3b4>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <main+0x3bc>)
 80009e4:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <main+0x388>)
 80009e6:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <main+0x3bc>)
 80009ea:	4a10      	ldr	r2, [pc, #64]	@ (8000a2c <main+0x38c>)
 80009ec:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 80009ee:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <main+0x3bc>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <main+0x3c0>)
 80009f2:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 80009f4:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <main+0x3bc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a18      	ldr	r2, [pc, #96]	@ (8000a5c <main+0x3bc>)
 80009fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009fe:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <main+0x3bc>)
 8000a02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a06:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <main+0x3bc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <main+0x3bc>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a14:	f3bf 8f4f 	dsb	sy
 8000a18:	e024      	b.n	8000a64 <main+0x3c4>
 8000a1a:	bf00      	nop
 8000a1c:	30000000 	.word	0x30000000
 8000a20:	30000004 	.word	0x30000004
 8000a24:	30010004 	.word	0x30010004
 8000a28:	30020004 	.word	0x30020004
 8000a2c:	30028004 	.word	0x30028004
 8000a30:	40020070 	.word	0x40020070
 8000a34:	30030108 	.word	0x30030108
 8000a38:	58020c18 	.word	0x58020c18
 8000a3c:	40020088 	.word	0x40020088
 8000a40:	3003010c 	.word	0x3003010c
 8000a44:	40000800 	.word	0x40000800
 8000a48:	58020c00 	.word	0x58020c00
 8000a4c:	58001c00 	.word	0x58001c00
 8000a50:	02032018 	.word	0x02032018
 8000a54:	40020010 	.word	0x40020010
 8000a58:	40013030 	.word	0x40013030
 8000a5c:	40020028 	.word	0x40020028
 8000a60:	40003830 	.word	0x40003830
}
 8000a64:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000a66:	4ba2      	ldr	r3, [pc, #648]	@ (8000cf0 <main+0x650>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4aa1      	ldr	r2, [pc, #644]	@ (8000cf0 <main+0x650>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 8000a72:	4ba0      	ldr	r3, [pc, #640]	@ (8000cf4 <main+0x654>)
 8000a74:	4aa0      	ldr	r2, [pc, #640]	@ (8000cf8 <main+0x658>)
 8000a76:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 8000a78:	4b9e      	ldr	r3, [pc, #632]	@ (8000cf4 <main+0x654>)
 8000a7a:	4aa0      	ldr	r2, [pc, #640]	@ (8000cfc <main+0x65c>)
 8000a7c:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 8000a7e:	4b9d      	ldr	r3, [pc, #628]	@ (8000cf4 <main+0x654>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 8000a8a:	4b9a      	ldr	r3, [pc, #616]	@ (8000cf4 <main+0x654>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a99      	ldr	r2, [pc, #612]	@ (8000cf4 <main+0x654>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 8000a96:	4b9a      	ldr	r3, [pc, #616]	@ (8000d00 <main+0x660>)
 8000a98:	4a97      	ldr	r2, [pc, #604]	@ (8000cf8 <main+0x658>)
 8000a9a:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 8000a9c:	4b98      	ldr	r3, [pc, #608]	@ (8000d00 <main+0x660>)
 8000a9e:	4a99      	ldr	r2, [pc, #612]	@ (8000d04 <main+0x664>)
 8000aa0:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 8000aa2:	4b97      	ldr	r3, [pc, #604]	@ (8000d00 <main+0x660>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa8:	f3bf 8f4f 	dsb	sy
}
 8000aac:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 8000aae:	4b94      	ldr	r3, [pc, #592]	@ (8000d00 <main+0x660>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a93      	ldr	r2, [pc, #588]	@ (8000d00 <main+0x660>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6013      	str	r3, [r2, #0]

  //initialize high speed ADC here
  SPI1->CR2 = 0; //reinitialize tsize
 8000aba:	4b93      	ldr	r3, [pc, #588]	@ (8000d08 <main+0x668>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000ac0:	4b91      	ldr	r3, [pc, #580]	@ (8000d08 <main+0x668>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a90      	ldr	r2, [pc, #576]	@ (8000d08 <main+0x668>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000acc:	4b8e      	ldr	r3, [pc, #568]	@ (8000d08 <main+0x668>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a8d      	ldr	r2, [pc, #564]	@ (8000d08 <main+0x668>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ade:	488b      	ldr	r0, [pc, #556]	@ (8000d0c <main+0x66c>)
 8000ae0:	f01c f8f0 	bl	801ccc4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ae4:	2064      	movs	r0, #100	@ 0x64
 8000ae6:	f019 fe69 	bl	801a7bc <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af0:	4886      	ldr	r0, [pc, #536]	@ (8000d0c <main+0x66c>)
 8000af2:	f01c f8e7 	bl	801ccc4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000af6:	2064      	movs	r0, #100	@ 0x64
 8000af8:	f019 fe60 	bl	801a7bc <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80+0x05}; //low reference, low input, vcm on, refpbuf on, input buf on
 8000afc:	f248 531b 	movw	r3, #34075	@ 0x851b
 8000b00:	813b      	strh	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b02:	7a7b      	ldrb	r3, [r7, #9]
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	7a3a      	ldrb	r2, [r7, #8]
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d08 <main+0x668>)
 8000b0c:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b0e:	bf00      	nop
 8000b10:	4b7d      	ldr	r3, [pc, #500]	@ (8000d08 <main+0x668>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0f9      	beq.n	8000b10 <main+0x470>
  spi_data[1]++;
 8000b1c:	7a7b      	ldrb	r3, [r7, #9]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00010000; //sync control mode
 8000b24:	2310      	movs	r3, #16
 8000b26:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b28:	7a7b      	ldrb	r3, [r7, #9]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	7a3a      	ldrb	r2, [r7, #8]
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	4b75      	ldr	r3, [pc, #468]	@ (8000d08 <main+0x668>)
 8000b32:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b34:	bf00      	nop
 8000b36:	4b74      	ldr	r3, [pc, #464]	@ (8000d08 <main+0x668>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f9      	beq.n	8000b36 <main+0x496>
  spi_data[1]++;
 8000b42:	7a7b      	ldrb	r3, [r7, #9]
 8000b44:	3301      	adds	r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00001001; //sinc4 osr16
 8000b4a:	2309      	movs	r3, #9
 8000b4c:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b4e:	7a7b      	ldrb	r3, [r7, #9]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	7a3a      	ldrb	r2, [r7, #8]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	4b6c      	ldr	r3, [pc, #432]	@ (8000d08 <main+0x668>)
 8000b58:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b5a:	bf00      	nop
 8000b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8000d08 <main+0x668>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0f9      	beq.n	8000b5c <main+0x4bc>
  spi_data[1]++;
 8000b68:	7a7b      	ldrb	r3, [r7, #9]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b10000000; //external clock
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b74:	7a7b      	ldrb	r3, [r7, #9]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	7a3a      	ldrb	r2, [r7, #8]
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	4b62      	ldr	r3, [pc, #392]	@ (8000d08 <main+0x668>)
 8000b7e:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b80:	bf00      	nop
 8000b82:	4b61      	ldr	r3, [pc, #388]	@ (8000d08 <main+0x668>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f9      	beq.n	8000b82 <main+0x4e2>
  spi_data[1]=0x80+0x03; //start conversion
 8000b8e:	2383      	movs	r3, #131	@ 0x83
 8000b90:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b00000010;
 8000b92:	2302      	movs	r3, #2
 8000b94:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b96:	7a7b      	ldrb	r3, [r7, #9]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	7a3a      	ldrb	r2, [r7, #8]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8000d08 <main+0x668>)
 8000ba0:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000ba2:	bf00      	nop
 8000ba4:	4b58      	ldr	r3, [pc, #352]	@ (8000d08 <main+0x668>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f9      	beq.n	8000ba4 <main+0x504>
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000bb0:	4b55      	ldr	r3, [pc, #340]	@ (8000d08 <main+0x668>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a54      	ldr	r2, [pc, #336]	@ (8000d08 <main+0x668>)
 8000bb6:	f023 0301 	bic.w	r3, r3, #1
 8000bba:	6013      	str	r3, [r2, #0]

  //GADC Setup
  SPI2->CR2 = 0; //reinitialize tsize
 8000bbc:	4b54      	ldr	r3, [pc, #336]	@ (8000d10 <main+0x670>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= 0b11111; //use 32 bit mode for config
 8000bc2:	4b53      	ldr	r3, [pc, #332]	@ (8000d10 <main+0x670>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	4a52      	ldr	r2, [pc, #328]	@ (8000d10 <main+0x670>)
 8000bc8:	f043 031f 	orr.w	r3, r3, #31
 8000bcc:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000bce:	4b50      	ldr	r3, [pc, #320]	@ (8000d10 <main+0x670>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a4f      	ldr	r2, [pc, #316]	@ (8000d10 <main+0x670>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000bda:	4b4d      	ldr	r3, [pc, #308]	@ (8000d10 <main+0x670>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a4c      	ldr	r2, [pc, #304]	@ (8000d10 <main+0x670>)
 8000be0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000be4:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bec:	4849      	ldr	r0, [pc, #292]	@ (8000d14 <main+0x674>)
 8000bee:	f01c f869 	bl	801ccc4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000bf2:	2064      	movs	r0, #100	@ 0x64
 8000bf4:	f019 fde2 	bl	801a7bc <HAL_Delay>
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bfe:	4845      	ldr	r0, [pc, #276]	@ (8000d14 <main+0x674>)
 8000c00:	f01c f860 	bl	801ccc4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000c04:	2064      	movs	r0, #100	@ 0x64
 8000c06:	f019 fdd9 	bl	801a7bc <HAL_Delay>
  uint16_t ucGADCSPIData[2] = {0b1101000000000100, (1<<5) | (1<<4)}; //disable alarms
 8000c0a:	4b43      	ldr	r3, [pc, #268]	@ (8000d18 <main+0x678>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	607b      	str	r3, [r7, #4]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000c10:	88bb      	ldrh	r3, [r7, #4]
 8000c12:	041b      	lsls	r3, r3, #16
 8000c14:	88fa      	ldrh	r2, [r7, #6]
 8000c16:	431a      	orrs	r2, r3
 8000c18:	4b3d      	ldr	r3, [pc, #244]	@ (8000d10 <main+0x670>)
 8000c1a:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000c1c:	bf00      	nop
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d10 <main+0x670>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f9      	beq.n	8000c1e <main+0x57e>
  ucGADCSPIData[0] = 0b1101000000010100; //14h
 8000c2a:	f24d 0314 	movw	r3, #53268	@ 0xd014
 8000c2e:	80bb      	strh	r3, [r7, #4]
  ucGADCSPIData[1] = 0b10; //range select +-1.5x VREF
 8000c30:	2302      	movs	r3, #2
 8000c32:	80fb      	strh	r3, [r7, #6]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	88fa      	ldrh	r2, [r7, #6]
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	4b34      	ldr	r3, [pc, #208]	@ (8000d10 <main+0x670>)
 8000c3e:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){};
 8000c40:	bf00      	nop
 8000c42:	4b33      	ldr	r3, [pc, #204]	@ (8000d10 <main+0x670>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0f9      	beq.n	8000c42 <main+0x5a2>
  SPI2->CR1 &= ~SPI_CR1_SPE;
 8000c4e:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <main+0x670>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a2f      	ldr	r2, [pc, #188]	@ (8000d10 <main+0x670>)
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	6013      	str	r3, [r2, #0]
  SPI2->CFG1 &= ~0b11111;
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d10 <main+0x670>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8000d10 <main+0x670>)
 8000c60:	f023 031f 	bic.w	r3, r3, #31
 8000c64:	6093      	str	r3, [r2, #8]
  SPI2->CFG1 |= 0b1111; //switch back to 16 bit transfers
 8000c66:	4b2a      	ldr	r3, [pc, #168]	@ (8000d10 <main+0x670>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	4a29      	ldr	r2, [pc, #164]	@ (8000d10 <main+0x670>)
 8000c6c:	f043 030f 	orr.w	r3, r3, #15
 8000c70:	6093      	str	r3, [r2, #8]

  //TC ADC SETUP
  //interleave temp sensor and internal ADC
  usTCADCConfig[0] = 0b1000101110001010; //FSR 0.256mV, 128SPS, Single Conversion, Start Conversion, Default Inputs
 8000c72:	4b2a      	ldr	r3, [pc, #168]	@ (8000d1c <main+0x67c>)
 8000c74:	f648 328a 	movw	r2, #35722	@ 0x8b8a
 8000c78:	801a      	strh	r2, [r3, #0]
  usTCADCConfig[1] = 0b1000101110011010; //same as above, use internal temp sensor
 8000c7a:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <main+0x67c>)
 8000c7c:	f648 329a 	movw	r2, #35738	@ 0x8b9a
 8000c80:	805a      	strh	r2, [r3, #2]
  //TIM5 UP
  DMA1_Stream6->M0AR = usTCADCConfig;
 8000c82:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <main+0x680>)
 8000c84:	4a25      	ldr	r2, [pc, #148]	@ (8000d1c <main+0x67c>)
 8000c86:	60da      	str	r2, [r3, #12]
  DMA1_Stream6->PAR = &(SPI3->TXDR);
 8000c88:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <main+0x680>)
 8000c8a:	4a26      	ldr	r2, [pc, #152]	@ (8000d24 <main+0x684>)
 8000c8c:	609a      	str	r2, [r3, #8]
  DMA1_Stream6->NDTR = 2;
 8000c8e:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <main+0x680>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c94:	f3bf 8f4f 	dsb	sy
}
 8000c98:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream6->CR |= DMA_SxCR_EN;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <main+0x680>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a20      	ldr	r2, [pc, #128]	@ (8000d20 <main+0x680>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6013      	str	r3, [r2, #0]
  //SPI3 RX Stream
  DMA1_Stream7->M0AR = usTCADCData0;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <main+0x688>)
 8000ca8:	4a20      	ldr	r2, [pc, #128]	@ (8000d2c <main+0x68c>)
 8000caa:	60da      	str	r2, [r3, #12]
  DMA1_Stream7->M1AR = usTCADCData1;
 8000cac:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <main+0x688>)
 8000cae:	4a20      	ldr	r2, [pc, #128]	@ (8000d30 <main+0x690>)
 8000cb0:	611a      	str	r2, [r3, #16]
  DMA1_Stream7->PAR = &(SPI3->RXDR);
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <main+0x688>)
 8000cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d34 <main+0x694>)
 8000cb6:	609a      	str	r2, [r3, #8]
  DMA1_Stream7->CR |= DMA_DOUBLE_BUFFER_M0;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <main+0x688>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d28 <main+0x688>)
 8000cbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cc2:	6013      	str	r3, [r2, #0]
  DMA1_Stream7->NDTR = TC_ADC_BUFFER_HALF_SIZE;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <main+0x688>)
 8000cc6:	2240      	movs	r2, #64	@ 0x40
 8000cc8:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream7->CR |= DMA_SxCR_TCIE;
 8000cca:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <main+0x688>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a16      	ldr	r2, [pc, #88]	@ (8000d28 <main+0x688>)
 8000cd0:	f043 0310 	orr.w	r3, r3, #16
 8000cd4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd6:	f3bf 8f4f 	dsb	sy
}
 8000cda:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream7->CR |= DMA_SxCR_EN;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <main+0x688>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a11      	ldr	r2, [pc, #68]	@ (8000d28 <main+0x688>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6013      	str	r3, [r2, #0]
  //SPI3 Config
  SPI3->CR2 = 0; //reinitialize tsize
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <main+0x698>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	e025      	b.n	8000d3c <main+0x69c>
 8000cf0:	40020028 	.word	0x40020028
 8000cf4:	40020040 	.word	0x40020040
 8000cf8:	30000000 	.word	0x30000000
 8000cfc:	40013020 	.word	0x40013020
 8000d00:	40020058 	.word	0x40020058
 8000d04:	40003820 	.word	0x40003820
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	58020000 	.word	0x58020000
 8000d10:	40003800 	.word	0x40003800
 8000d14:	58020c00 	.word	0x58020c00
 8000d18:	08024974 	.word	0x08024974
 8000d1c:	30030004 	.word	0x30030004
 8000d20:	400200a0 	.word	0x400200a0
 8000d24:	40003c20 	.word	0x40003c20
 8000d28:	400200b8 	.word	0x400200b8
 8000d2c:	30030008 	.word	0x30030008
 8000d30:	30030088 	.word	0x30030088
 8000d34:	40003c30 	.word	0x40003c30
 8000d38:	40003c00 	.word	0x40003c00
  SPI3->CFG1 |= SPI_CFG1_RXDMAEN;
 8000d3c:	4b7b      	ldr	r3, [pc, #492]	@ (8000f2c <main+0x88c>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	4a7a      	ldr	r2, [pc, #488]	@ (8000f2c <main+0x88c>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d46:	6093      	str	r3, [r2, #8]
  SPI3->CR1 |= SPI_CR1_SPE;
 8000d48:	4b78      	ldr	r3, [pc, #480]	@ (8000f2c <main+0x88c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a77      	ldr	r2, [pc, #476]	@ (8000f2c <main+0x88c>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6013      	str	r3, [r2, #0]
  SPI3->CR1 |= SPI_CR1_CSTART;
 8000d54:	4b75      	ldr	r3, [pc, #468]	@ (8000f2c <main+0x88c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a74      	ldr	r2, [pc, #464]	@ (8000f2c <main+0x88c>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
  //enable TIM5 (SPI3 TX)
  TIM5->CR1 |= TIM_CR1_URS;
 8000d60:	4b73      	ldr	r3, [pc, #460]	@ (8000f30 <main+0x890>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a72      	ldr	r2, [pc, #456]	@ (8000f30 <main+0x890>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6013      	str	r3, [r2, #0]
  TIM5->CR1 &= ~TIM_CR1_UDIS;
 8000d6c:	4b70      	ldr	r3, [pc, #448]	@ (8000f30 <main+0x890>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a6f      	ldr	r2, [pc, #444]	@ (8000f30 <main+0x890>)
 8000d72:	f023 0302 	bic.w	r3, r3, #2
 8000d76:	6013      	str	r3, [r2, #0]
  TIM5->DIER |= TIM_DMA_UPDATE;
 8000d78:	4b6d      	ldr	r3, [pc, #436]	@ (8000f30 <main+0x890>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	4a6c      	ldr	r2, [pc, #432]	@ (8000f30 <main+0x890>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d82:	60d3      	str	r3, [r2, #12]
  TIM5->EGR |= TIM_EGR_UG;
 8000d84:	4b6a      	ldr	r3, [pc, #424]	@ (8000f30 <main+0x890>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	4a69      	ldr	r2, [pc, #420]	@ (8000f30 <main+0x890>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6153      	str	r3, [r2, #20]
  TIM5->CR1 |= TIM_CR1_CEN;
 8000d90:	4b67      	ldr	r3, [pc, #412]	@ (8000f30 <main+0x890>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a66      	ldr	r2, [pc, #408]	@ (8000f30 <main+0x890>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2120      	movs	r1, #32
 8000da0:	4864      	ldr	r0, [pc, #400]	@ (8000f34 <main+0x894>)
 8000da2:	f01b ff8f 	bl	801ccc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2104      	movs	r1, #4
 8000daa:	4862      	ldr	r0, [pc, #392]	@ (8000f34 <main+0x894>)
 8000dac:	f01b ff8a 	bl	801ccc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2110      	movs	r1, #16
 8000db4:	485f      	ldr	r0, [pc, #380]	@ (8000f34 <main+0x894>)
 8000db6:	f01b ff85 	bl	801ccc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	485d      	ldr	r0, [pc, #372]	@ (8000f34 <main+0x894>)
 8000dc0:	f01b ff80 	bl	801ccc4 <HAL_GPIO_WritePin>

  //Enable SPI1
//  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; //reinitialize tsize
 8000dc4:	4b5c      	ldr	r3, [pc, #368]	@ (8000f38 <main+0x898>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000dca:	4b5b      	ldr	r3, [pc, #364]	@ (8000f38 <main+0x898>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	4a5a      	ldr	r2, [pc, #360]	@ (8000f38 <main+0x898>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd4:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000dd6:	4b58      	ldr	r3, [pc, #352]	@ (8000f38 <main+0x898>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a57      	ldr	r2, [pc, #348]	@ (8000f38 <main+0x898>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000de2:	4b55      	ldr	r3, [pc, #340]	@ (8000f38 <main+0x898>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a54      	ldr	r2, [pc, #336]	@ (8000f38 <main+0x898>)
 8000de8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dec:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CR2 = 0; //reinitialize tsize
 8000dee:	4b53      	ldr	r3, [pc, #332]	@ (8000f3c <main+0x89c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000df4:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <main+0x89c>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	4a50      	ldr	r2, [pc, #320]	@ (8000f3c <main+0x89c>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfe:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000e00:	4b4e      	ldr	r3, [pc, #312]	@ (8000f3c <main+0x89c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a4d      	ldr	r2, [pc, #308]	@ (8000f3c <main+0x89c>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f3c <main+0x89c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a4a      	ldr	r2, [pc, #296]	@ (8000f3c <main+0x89c>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e16:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000e18:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <main+0x8a0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a48      	ldr	r2, [pc, #288]	@ (8000f40 <main+0x8a0>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000e24:	4b46      	ldr	r3, [pc, #280]	@ (8000f40 <main+0x8a0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a45      	ldr	r2, [pc, #276]	@ (8000f40 <main+0x8a0>)
 8000e2a:	f023 0302 	bic.w	r3, r3, #2
 8000e2e:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000e30:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <main+0x8a0>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	4a42      	ldr	r2, [pc, #264]	@ (8000f40 <main+0x8a0>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e3a:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000e3c:	4b40      	ldr	r3, [pc, #256]	@ (8000f40 <main+0x8a0>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	4a3f      	ldr	r2, [pc, #252]	@ (8000f40 <main+0x8a0>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000e48:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <main+0x8a0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f40 <main+0x8a0>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000e54:	4b3b      	ldr	r3, [pc, #236]	@ (8000f44 <main+0x8a4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a3a      	ldr	r2, [pc, #232]	@ (8000f44 <main+0x8a4>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000e60:	4b38      	ldr	r3, [pc, #224]	@ (8000f44 <main+0x8a4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a37      	ldr	r2, [pc, #220]	@ (8000f44 <main+0x8a4>)
 8000e66:	f023 0302 	bic.w	r3, r3, #2
 8000e6a:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000e6c:	4b35      	ldr	r3, [pc, #212]	@ (8000f44 <main+0x8a4>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	4a34      	ldr	r2, [pc, #208]	@ (8000f44 <main+0x8a4>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e76:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000e78:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <main+0x8a4>)
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	4a31      	ldr	r2, [pc, #196]	@ (8000f44 <main+0x8a4>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <main+0x8a4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a2e      	ldr	r2, [pc, #184]	@ (8000f44 <main+0x8a4>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6013      	str	r3, [r2, #0]


  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000e90:	492d      	ldr	r1, [pc, #180]	@ (8000f48 <main+0x8a8>)
 8000e92:	2000      	movs	r0, #0
 8000e94:	f017 fd34 	bl	8018900 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000e98:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <main+0x8ac>)
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f50 <main+0x8b0>)
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <main+0x8b4>)
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <main+0x8b8>)
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f5c <main+0x8bc>)
 8000ea8:	492d      	ldr	r1, [pc, #180]	@ (8000f60 <main+0x8c0>)
 8000eaa:	4827      	ldr	r0, [pc, #156]	@ (8000f48 <main+0x8a8>)
 8000eac:	f00c fce8 	bl	800d880 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000eb0:	f008 fe36 	bl	8009b20 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <main+0x8c4>)
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000ec2:	4929      	ldr	r1, [pc, #164]	@ (8000f68 <main+0x8c8>)
 8000ec4:	4829      	ldr	r0, [pc, #164]	@ (8000f6c <main+0x8cc>)
 8000ec6:	f003 fb65 	bl	8004594 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "HSADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000eca:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <main+0x8d0>)
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000ed8:	4926      	ldr	r1, [pc, #152]	@ (8000f74 <main+0x8d4>)
 8000eda:	4827      	ldr	r0, [pc, #156]	@ (8000f78 <main+0x8d8>)
 8000edc:	f003 fb5a 	bl	8004594 <xTaskCreate>
      xTaskCreate ( vAuxADCTCPTask, "GADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
 8000ee0:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <main+0x8dc>)
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000eee:	4924      	ldr	r1, [pc, #144]	@ (8000f80 <main+0x8e0>)
 8000ef0:	4824      	ldr	r0, [pc, #144]	@ (8000f84 <main+0x8e4>)
 8000ef2:	f003 fb4f 	bl	8004594 <xTaskCreate>
      xTaskCreate ( vTCADCTCPTask, "TCADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vTCADCTCPTaskHandle);
 8000ef6:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <main+0x8e8>)
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	2301      	movs	r3, #1
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2300      	movs	r3, #0
 8000f00:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f04:	4921      	ldr	r1, [pc, #132]	@ (8000f8c <main+0x8ec>)
 8000f06:	4822      	ldr	r0, [pc, #136]	@ (8000f90 <main+0x8f0>)
 8000f08:	f003 fb44 	bl	8004594 <xTaskCreate>
      xTaskCreate ( vCommandServerTask, "CommandServer", mainTCP_SERVER_STACK_SIZE, NULL, tskIDLE_PRIORITY, &vCommandServerTaskHandle);
 8000f0c:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <main+0x8f4>)
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	2300      	movs	r3, #0
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2300      	movs	r3, #0
 8000f16:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f1a:	491f      	ldr	r1, [pc, #124]	@ (8000f98 <main+0x8f8>)
 8000f1c:	481f      	ldr	r0, [pc, #124]	@ (8000f9c <main+0x8fc>)
 8000f1e:	f003 fb39 	bl	8004594 <xTaskCreate>
      vTaskStartScheduler();
 8000f22:	f003 fd91 	bl	8004a48 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f26:	bf00      	nop
 8000f28:	e7fd      	b.n	8000f26 <main+0x886>
 8000f2a:	bf00      	nop
 8000f2c:	40003c00 	.word	0x40003c00
 8000f30:	40000c00 	.word	0x40000c00
 8000f34:	58021000 	.word	0x58021000
 8000f38:	40013000 	.word	0x40013000
 8000f3c:	40003800 	.word	0x40003800
 8000f40:	40010000 	.word	0x40010000
 8000f44:	40000400 	.word	0x40000400
 8000f48:	20000860 	.word	0x20000860
 8000f4c:	08027eec 	.word	0x08027eec
 8000f50:	08027ee8 	.word	0x08027ee8
 8000f54:	08027ee4 	.word	0x08027ee4
 8000f58:	08027ee0 	.word	0x08027ee0
 8000f5c:	08027edc 	.word	0x08027edc
 8000f60:	20000888 	.word	0x20000888
 8000f64:	20000d30 	.word	0x20000d30
 8000f68:	08024938 	.word	0x08024938
 8000f6c:	08001bf9 	.word	0x08001bf9
 8000f70:	20000d34 	.word	0x20000d34
 8000f74:	08024940 	.word	0x08024940
 8000f78:	08001c21 	.word	0x08001c21
 8000f7c:	20000d38 	.word	0x20000d38
 8000f80:	0802494c 	.word	0x0802494c
 8000f84:	08001dd9 	.word	0x08001dd9
 8000f88:	20000d3c 	.word	0x20000d3c
 8000f8c:	08024958 	.word	0x08024958
 8000f90:	08001f91 	.word	0x08001f91
 8000f94:	20000d40 	.word	0x20000d40
 8000f98:	08024964 	.word	0x08024964
 8000f9c:	08002149 	.word	0x08002149

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09e      	sub	sp, #120	@ 0x78
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000faa:	224c      	movs	r2, #76	@ 0x4c
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f021 ff31 	bl	8022e16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2220      	movs	r2, #32
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f021 ff2a 	bl	8022e16 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f01b ffcc 	bl	801cf60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b48      	ldr	r3, [pc, #288]	@ (80010f0 <SystemClock_Config+0x150>)
 8000fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd0:	4a47      	ldr	r2, [pc, #284]	@ (80010f0 <SystemClock_Config+0x150>)
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fd8:	4b45      	ldr	r3, [pc, #276]	@ (80010f0 <SystemClock_Config+0x150>)
 8000fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b44      	ldr	r3, [pc, #272]	@ (80010f4 <SystemClock_Config+0x154>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	4a43      	ldr	r2, [pc, #268]	@ (80010f4 <SystemClock_Config+0x154>)
 8000fe8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fec:	6193      	str	r3, [r2, #24]
 8000fee:	4b41      	ldr	r3, [pc, #260]	@ (80010f4 <SystemClock_Config+0x154>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ffa:	bf00      	nop
 8000ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80010f4 <SystemClock_Config+0x154>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001008:	d1f8      	bne.n	8000ffc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <SystemClock_Config+0x158>)
 800100c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001010:	4a39      	ldr	r2, [pc, #228]	@ (80010f8 <SystemClock_Config+0x158>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800101a:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <SystemClock_Config+0x158>)
 800101c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	4b31      	ldr	r3, [pc, #196]	@ (80010f4 <SystemClock_Config+0x154>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a30      	ldr	r2, [pc, #192]	@ (80010f4 <SystemClock_Config+0x154>)
 8001032:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b2e      	ldr	r3, [pc, #184]	@ (80010f4 <SystemClock_Config+0x154>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4b2b      	ldr	r3, [pc, #172]	@ (80010f0 <SystemClock_Config+0x150>)
 8001044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001046:	4a2a      	ldr	r2, [pc, #168]	@ (80010f0 <SystemClock_Config+0x150>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800104e:	4b28      	ldr	r3, [pc, #160]	@ (80010f0 <SystemClock_Config+0x150>)
 8001050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800105a:	bf00      	nop
 800105c:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <SystemClock_Config+0x154>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001068:	d1f8      	bne.n	800105c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800106a:	2301      	movs	r3, #1
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800106e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001072:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001078:	2302      	movs	r3, #2
 800107a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001080:	2340      	movs	r3, #64	@ 0x40
 8001082:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108c:	2302      	movs	r3, #2
 800108e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001090:	230c      	movs	r3, #12
 8001092:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001094:	2300      	movs	r3, #0
 8001096:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a0:	4618      	mov	r0, r3
 80010a2:	f01b ff97 	bl	801cfd4 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80010ac:	f001 f9ac 	bl	8002408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b0:	233f      	movs	r3, #63	@ 0x3f
 80010b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2303      	movs	r3, #3
 80010b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010bc:	2308      	movs	r3, #8
 80010be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010c0:	2340      	movs	r3, #64	@ 0x40
 80010c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010c4:	2340      	movs	r3, #64	@ 0x40
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010ce:	2340      	movs	r3, #64	@ 0x40
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2102      	movs	r1, #2
 80010d8:	4618      	mov	r0, r3
 80010da:	f01c fbd5 	bl	801d888 <HAL_RCC_ClockConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80010e4:	f001 f990 	bl	8002408 <Error_Handler>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3778      	adds	r7, #120	@ 0x78
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	58000400 	.word	0x58000400
 80010f4:	58024800 	.word	0x58024800
 80010f8:	58024400 	.word	0x58024400

080010fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0b0      	sub	sp, #192	@ 0xc0
 8001100:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	22c0      	movs	r2, #192	@ 0xc0
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f021 fe84 	bl	8022e16 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 800110e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 800111a:	2308      	movs	r3, #8
 800111c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 800111e:	2340      	movs	r3, #64	@ 0x40
 8001120:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001126:	2302      	movs	r3, #2
 8001128:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800112e:	2340      	movs	r3, #64	@ 0x40
 8001130:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800113a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4618      	mov	r0, r3
 8001144:	f01c ff2c 	bl	801dfa0 <HAL_RCCEx_PeriphCLKConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800114e:	f001 f95b 	bl	8002408 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	37c0      	adds	r7, #192	@ 0xc0
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001160:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001162:	4a1c      	ldr	r2, [pc, #112]	@ (80011d4 <MX_I2C4_Init+0x78>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8001166:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001168:	4a1b      	ldr	r2, [pc, #108]	@ (80011d8 <MX_I2C4_Init+0x7c>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <MX_I2C4_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001174:	2201      	movs	r2, #1
 8001176:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <MX_I2C4_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800117e:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_I2C4_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001196:	480e      	ldr	r0, [pc, #56]	@ (80011d0 <MX_I2C4_Init+0x74>)
 8001198:	f01b fdae 	bl	801ccf8 <HAL_I2C_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80011a2:	f001 f931 	bl	8002408 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011a6:	2100      	movs	r1, #0
 80011a8:	4809      	ldr	r0, [pc, #36]	@ (80011d0 <MX_I2C4_Init+0x74>)
 80011aa:	f01b fe41 	bl	801ce30 <HAL_I2CEx_ConfigAnalogFilter>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80011b4:	f001 f928 	bl	8002408 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80011b8:	2100      	movs	r1, #0
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_I2C4_Init+0x74>)
 80011bc:	f01b fe83 	bl	801cec6 <HAL_I2CEx_ConfigDigitalFilter>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80011c6:	f001 f91f 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200000a4 	.word	0x200000a4
 80011d4:	58001c00 	.word	0x58001c00
 80011d8:	10c0ecff 	.word	0x10c0ecff

080011dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011e0:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011e2:	4a29      	ldr	r2, [pc, #164]	@ (8001288 <MX_SPI1_Init+0xac>)
 80011e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b27      	ldr	r3, [pc, #156]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80011f4:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011f6:	220f      	movs	r2, #15
 80011f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001200:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001202:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001206:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001208:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800120a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800120e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001210:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001216:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001226:	2200      	movs	r2, #0
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800122c:	2200      	movs	r2, #0
 800122e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001230:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001232:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001236:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800123a:	2200      	movs	r2, #0
 800123c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001240:	2200      	movs	r2, #0
 8001242:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001246:	2200      	movs	r2, #0
 8001248:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800124c:	2200      	movs	r2, #0
 800124e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001252:	2203      	movs	r2, #3
 8001254:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001258:	2230      	movs	r2, #48	@ 0x30
 800125a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800125e:	2200      	movs	r2, #0
 8001260:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001264:	2200      	movs	r2, #0
 8001266:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_SPI1_Init+0xa8>)
 800126a:	2200      	movs	r2, #0
 800126c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_SPI1_Init+0xa8>)
 8001270:	f01e fcc2 	bl	801fbf8 <HAL_SPI_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800127a:	f001 f8c5 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000f8 	.word	0x200000f8
 8001288:	40013000 	.word	0x40013000

0800128c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001292:	4a28      	ldr	r2, [pc, #160]	@ (8001334 <MX_SPI2_Init+0xa8>)
 8001294:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001298:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800129c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800129e:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80012a4:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012a6:	220f      	movs	r2, #15
 80012a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012aa:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012b8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012be:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012c0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80012c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d2:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012de:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <MX_SPI2_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001300:	2203      	movs	r2, #3
 8001302:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001306:	2230      	movs	r2, #48	@ 0x30
 8001308:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <MX_SPI2_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001312:	2200      	movs	r2, #0
 8001314:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <MX_SPI2_Init+0xa4>)
 8001318:	2200      	movs	r2, #0
 800131a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	@ (8001330 <MX_SPI2_Init+0xa4>)
 800131e:	f01e fc6b 	bl	801fbf8 <HAL_SPI_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001328:	f001 f86e 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000180 	.word	0x20000180
 8001334:	40003800 	.word	0x40003800

08001338 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800133e:	4a29      	ldr	r2, [pc, #164]	@ (80013e4 <MX_SPI3_Init+0xac>)
 8001340:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001342:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001344:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001348:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800134a:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001352:	220f      	movs	r2, #15
 8001354:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800135c:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800135e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001362:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001364:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001366:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800136a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800136e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001372:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001388:	2200      	movs	r2, #0
 800138a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800138e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001392:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 8001396:	2200      	movs	r2, #0
 8001398:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 800139c:	2200      	movs	r2, #0
 800139e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_02CYCLE;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013b4:	2220      	movs	r2, #32
 80013b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_SPI3_Init+0xa8>)
 80013cc:	f01e fc14 	bl	801fbf8 <HAL_SPI_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80013d6:	f001 f817 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000208 	.word	0x20000208
 80013e4:	40003c00 	.word	0x40003c00

080013e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001406:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_TIM1_Init+0x9c>)
 8001408:	4a1f      	ldr	r2, [pc, #124]	@ (8001488 <MX_TIM1_Init+0xa0>)
 800140a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <MX_TIM1_Init+0x9c>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_TIM1_Init+0x9c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_TIM1_Init+0x9c>)
 800141a:	22ff      	movs	r2, #255	@ 0xff
 800141c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_TIM1_Init+0x9c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <MX_TIM1_Init+0x9c>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <MX_TIM1_Init+0x9c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001430:	4814      	ldr	r0, [pc, #80]	@ (8001484 <MX_TIM1_Init+0x9c>)
 8001432:	f01e ffda 	bl	80203ea <HAL_TIM_Base_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800143c:	f000 ffe4 	bl	8002408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001444:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4619      	mov	r1, r3
 800144c:	480d      	ldr	r0, [pc, #52]	@ (8001484 <MX_TIM1_Init+0x9c>)
 800144e:	f01f fa11 	bl	8020874 <HAL_TIM_ConfigClockSource>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001458:	f000 ffd6 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800145c:	2320      	movs	r3, #32
 800145e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_TIM1_Init+0x9c>)
 800146e:	f01f ff13 	bl	8021298 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001478:	f000 ffc6 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200003f8 	.word	0x200003f8
 8001488:	40010000 	.word	0x40010000

0800148c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <MX_TIM3_Init+0x98>)
 80014ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014b2:	22c7      	movs	r2, #199	@ 0xc7
 80014b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014be:	2209      	movs	r2, #9
 80014c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ce:	4814      	ldr	r0, [pc, #80]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014d0:	f01e ff8b 	bl	80203ea <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 ff95 	bl	8002408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	480d      	ldr	r0, [pc, #52]	@ (8001520 <MX_TIM3_Init+0x94>)
 80014ec:	f01f f9c2 	bl	8020874 <HAL_TIM_ConfigClockSource>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014f6:	f000 ff87 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	@ (8001520 <MX_TIM3_Init+0x94>)
 8001508:	f01f fec6 	bl	8021298 <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001512:	f000 ff79 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000490 	.word	0x20000490
 8001524:	40000400 	.word	0x40000400

08001528 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08e      	sub	sp, #56	@ 0x38
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]
 8001556:	615a      	str	r2, [r3, #20]
 8001558:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800155a:	4b34      	ldr	r3, [pc, #208]	@ (800162c <MX_TIM4_Init+0x104>)
 800155c:	4a34      	ldr	r2, [pc, #208]	@ (8001630 <MX_TIM4_Init+0x108>)
 800155e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8001560:	4b32      	ldr	r3, [pc, #200]	@ (800162c <MX_TIM4_Init+0x104>)
 8001562:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001566:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b30      	ldr	r3, [pc, #192]	@ (800162c <MX_TIM4_Init+0x104>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 800156e:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <MX_TIM4_Init+0x104>)
 8001570:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001574:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <MX_TIM4_Init+0x104>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <MX_TIM4_Init+0x104>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001582:	482a      	ldr	r0, [pc, #168]	@ (800162c <MX_TIM4_Init+0x104>)
 8001584:	f01e ff31 	bl	80203ea <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800158e:	f000 ff3b 	bl	8002408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001592:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001598:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800159c:	4619      	mov	r1, r3
 800159e:	4823      	ldr	r0, [pc, #140]	@ (800162c <MX_TIM4_Init+0x104>)
 80015a0:	f01f f968 	bl	8020874 <HAL_TIM_ConfigClockSource>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80015aa:	f000 ff2d 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015ae:	481f      	ldr	r0, [pc, #124]	@ (800162c <MX_TIM4_Init+0x104>)
 80015b0:	f01e ffea 	bl	8020588 <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80015ba:	f000 ff25 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4817      	ldr	r0, [pc, #92]	@ (800162c <MX_TIM4_Init+0x104>)
 80015ce:	f01f fe63 	bl	8021298 <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80015d8:	f000 ff16 	bl	8002408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015dc:	2360      	movs	r3, #96	@ 0x60
 80015de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 80015e0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	480d      	ldr	r0, [pc, #52]	@ (800162c <MX_TIM4_Init+0x104>)
 80015f6:	f01f f829 	bl	802064c <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001600:	f000 ff02 	bl	8002408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001604:	2370      	movs	r3, #112	@ 0x70
 8001606:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001608:	463b      	mov	r3, r7
 800160a:	2204      	movs	r2, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	@ (800162c <MX_TIM4_Init+0x104>)
 8001610:	f01f f81c 	bl	802064c <HAL_TIM_PWM_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800161a:	f000 fef5 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800161e:	4803      	ldr	r0, [pc, #12]	@ (800162c <MX_TIM4_Init+0x104>)
 8001620:	f001 fba2 	bl	8002d68 <HAL_TIM_MspPostInit>

}
 8001624:	bf00      	nop
 8001626:	3738      	adds	r7, #56	@ 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200004dc 	.word	0x200004dc
 8001630:	40000800 	.word	0x40000800

08001634 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001654:	4a1e      	ldr	r2, [pc, #120]	@ (80016d0 <MX_TIM5_Init+0x9c>)
 8001656:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 8001658:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <MX_TIM5_Init+0x98>)
 800165a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800165e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3124;
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001668:	f640 4234 	movw	r2, #3124	@ 0xc34
 800166c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166e:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800167a:	4814      	ldr	r0, [pc, #80]	@ (80016cc <MX_TIM5_Init+0x98>)
 800167c:	f01e feb5 	bl	80203ea <HAL_TIM_Base_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001686:	f000 febf 	bl	8002408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	480d      	ldr	r0, [pc, #52]	@ (80016cc <MX_TIM5_Init+0x98>)
 8001698:	f01f f8ec 	bl	8020874 <HAL_TIM_ConfigClockSource>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80016a2:	f000 feb1 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	@ (80016cc <MX_TIM5_Init+0x98>)
 80016b4:	f01f fdf0 	bl	8021298 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80016be:	f000 fea3 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000528 	.word	0x20000528
 80016d0:	40000c00 	.word	0x40000c00

080016d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016da:	4a23      	ldr	r2, [pc, #140]	@ (8001768 <MX_USART3_UART_Init+0x94>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800171c:	4811      	ldr	r0, [pc, #68]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 800171e:	f01f fe49 	bl	80213b4 <HAL_UART_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001728:	f000 fe6e 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800172c:	2100      	movs	r1, #0
 800172e:	480d      	ldr	r0, [pc, #52]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001730:	f020 fe51 	bl	80223d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800173a:	f000 fe65 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173e:	2100      	movs	r1, #0
 8001740:	4808      	ldr	r0, [pc, #32]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001742:	f020 fe86 	bl	8022452 <HAL_UARTEx_SetRxFifoThreshold>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800174c:	f000 fe5c 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001752:	f020 fe07 	bl	8022364 <HAL_UARTEx_DisableFifoMode>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800175c:	f000 fe54 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200007cc 	.word	0x200007cc
 8001768:	40004800 	.word	0x40004800

0800176c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001772:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <MX_DMA_Init+0xac>)
 8001774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001778:	4a27      	ldr	r2, [pc, #156]	@ (8001818 <MX_DMA_Init+0xac>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001782:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <MX_DMA_Init+0xac>)
 8001784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2106      	movs	r1, #6
 8001794:	200b      	movs	r0, #11
 8001796:	f019 f930 	bl	801a9fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800179a:	200b      	movs	r0, #11
 800179c:	f019 f947 	bl	801aa2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2106      	movs	r1, #6
 80017a4:	200c      	movs	r0, #12
 80017a6:	f019 f928 	bl	801a9fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017aa:	200c      	movs	r0, #12
 80017ac:	f019 f93f 	bl	801aa2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2107      	movs	r1, #7
 80017b4:	200d      	movs	r0, #13
 80017b6:	f019 f920 	bl	801a9fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80017ba:	200d      	movs	r0, #13
 80017bc:	f019 f937 	bl	801aa2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2107      	movs	r1, #7
 80017c4:	200e      	movs	r0, #14
 80017c6:	f019 f918 	bl	801a9fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80017ca:	200e      	movs	r0, #14
 80017cc:	f019 f92f 	bl	801aa2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2107      	movs	r1, #7
 80017d4:	200f      	movs	r0, #15
 80017d6:	f019 f910 	bl	801a9fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80017da:	200f      	movs	r0, #15
 80017dc:	f019 f927 	bl	801aa2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2107      	movs	r1, #7
 80017e4:	2010      	movs	r0, #16
 80017e6:	f019 f908 	bl	801a9fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017ea:	2010      	movs	r0, #16
 80017ec:	f019 f91f 	bl	801aa2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 7, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2107      	movs	r1, #7
 80017f4:	2011      	movs	r0, #17
 80017f6:	f019 f900 	bl	801a9fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017fa:	2011      	movs	r0, #17
 80017fc:	f019 f917 	bl	801aa2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 7, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2107      	movs	r1, #7
 8001804:	202f      	movs	r0, #47	@ 0x2f
 8001806:	f019 f8f8 	bl	801a9fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800180a:	202f      	movs	r0, #47	@ 0x2f
 800180c:	f019 f90f 	bl	801aa2e <HAL_NVIC_EnableIRQ>

}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	58024400 	.word	0x58024400

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	@ 0x30
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001832:	4b61      	ldr	r3, [pc, #388]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001838:	4a5f      	ldr	r2, [pc, #380]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001842:	4b5d      	ldr	r3, [pc, #372]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001850:	4b59      	ldr	r3, [pc, #356]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001856:	4a58      	ldr	r2, [pc, #352]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800185c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001860:	4b55      	ldr	r3, [pc, #340]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	4b52      	ldr	r3, [pc, #328]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001874:	4a50      	ldr	r2, [pc, #320]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800187e:	4b4e      	ldr	r3, [pc, #312]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b4a      	ldr	r3, [pc, #296]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001892:	4a49      	ldr	r2, [pc, #292]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800189c:	4b46      	ldr	r3, [pc, #280]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b0:	4a41      	ldr	r2, [pc, #260]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ba:	4b3f      	ldr	r3, [pc, #252]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c8:	4b3b      	ldr	r3, [pc, #236]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ce:	4a3a      	ldr	r2, [pc, #232]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d8:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <MX_GPIO_Init+0x19c>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ENABLE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	213c      	movs	r1, #60	@ 0x3c
 80018ea:	4834      	ldr	r0, [pc, #208]	@ (80019bc <MX_GPIO_Init+0x1a0>)
 80018ec:	f01b f9ea 	bl	801ccc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 80018f0:	2200      	movs	r2, #0
 80018f2:	f24c 41ff 	movw	r1, #50431	@ 0xc4ff
 80018f6:	4832      	ldr	r0, [pc, #200]	@ (80019c0 <MX_GPIO_Init+0x1a4>)
 80018f8:	f01b f9e4 	bl	801ccc4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin|HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001902:	4830      	ldr	r0, [pc, #192]	@ (80019c4 <MX_GPIO_Init+0x1a8>)
 8001904:	f01b f9de 	bl	801ccc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ISOLATE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ENABLE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin;
 8001908:	233c      	movs	r3, #60	@ 0x3c
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4827      	ldr	r0, [pc, #156]	@ (80019bc <MX_GPIO_Init+0x1a0>)
 8001920:	f01b f820 	bl	801c964 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001924:	f24c 43ff 	movw	r3, #50431	@ 0xc4ff
 8001928:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	4820      	ldr	r0, [pc, #128]	@ (80019c0 <MX_GPIO_Init+0x1a4>)
 800193e:	f01b f811 	bl	801c964 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 8001942:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	481a      	ldr	r0, [pc, #104]	@ (80019c0 <MX_GPIO_Init+0x1a4>)
 8001958:	f01b f804 	bl	801c964 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin|HS_ADC_RESET_Pin;
 800195c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4619      	mov	r1, r3
 8001974:	4813      	ldr	r0, [pc, #76]	@ (80019c4 <MX_GPIO_Init+0x1a8>)
 8001976:	f01a fff5 	bl	801c964 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 800197a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800197e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	480d      	ldr	r0, [pc, #52]	@ (80019c4 <MX_GPIO_Init+0x1a8>)
 8001990:	f01a ffe8 	bl	801c964 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin|EFUSE_PGOOD_Pin;
 8001994:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	4807      	ldr	r0, [pc, #28]	@ (80019c8 <MX_GPIO_Init+0x1ac>)
 80019aa:	f01a ffdb 	bl	801c964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ae:	bf00      	nop
 80019b0:	3730      	adds	r7, #48	@ 0x30
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	58024400 	.word	0x58024400
 80019bc:	58021000 	.word	0x58021000
 80019c0:	58020c00 	.word	0x58020c00
 80019c4:	58020000 	.word	0x58020000
 80019c8:	58020400 	.word	0x58020400

080019cc <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 80019cc:	b5b0      	push	{r4, r5, r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <vHeapInit+0x28>)
 80019d4:	463c      	mov	r4, r7
 80019d6:	461d      	mov	r5, r3
 80019d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 80019e4:	463b      	mov	r3, r7
 80019e6:	4618      	mov	r0, r3
 80019e8:	f005 f984 	bl	8006cf4 <vPortDefineHeapRegions>
}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}
 80019f4:	08024978 	.word	0x08024978

080019f8 <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
	return 0U;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 8001a16:	f004 fed3 	bl	80067c0 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 8001a1a:	e000      	b.n	8001a1e <vAssertCalled+0x16>
		{
			__NOP();
 8001a1c:	bf00      	nop
		while( ul == 0 )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0fb      	beq.n	8001a1c <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8001a24:	f004 fef8 	bl	8006818 <vPortExitCritical>
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 8001a34:	f240 5133 	movw	r1, #1331	@ 0x533
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <vApplicationMallocFailedHook+0x14>)
 8001a3a:	f7ff ffe5 	bl	8001a08 <vAssertCalled>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	08024998 	.word	0x08024998

08001a48 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	461a      	mov	r2, r3
 8001a54:	460b      	mov	r3, r1
 8001a56:	817b      	strh	r3, [r7, #10]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f89b 	bl	8001b9c <xApplicationGetRandomNumber>

	return ulReturn;
 8001a66:	697b      	ldr	r3, [r7, #20]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d147      	bne.n	8001b10 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <vApplicationIPNetworkEventHook+0xa8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 8001a88:	4b23      	ldr	r3, [pc, #140]	@ (8001b18 <vApplicationIPNetworkEventHook+0xa8>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 8001a8e:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <vApplicationIPNetworkEventHook+0xac>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	f107 021c 	add.w	r2, r7, #28
 8001a9c:	f107 0120 	add.w	r1, r7, #32
 8001aa0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001aa4:	f008 f8d4 	bl	8009c50 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	f107 0208 	add.w	r2, r7, #8
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00d fed1 	bl	800f858 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4619      	mov	r1, r3
 8001abc:	4818      	ldr	r0, [pc, #96]	@ (8001b20 <vApplicationIPNetworkEventHook+0xb0>)
 8001abe:	f020 fe81 	bl	80227c4 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	f107 0208 	add.w	r2, r7, #8
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f00d fec4 	bl	800f858 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8001ad0:	f107 0308 	add.w	r3, r7, #8
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4813      	ldr	r0, [pc, #76]	@ (8001b24 <vApplicationIPNetworkEventHook+0xb4>)
 8001ad8:	f020 fe74 	bl	80227c4 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f107 0208 	add.w	r2, r7, #8
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f00d feb7 	bl	800f858 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	4619      	mov	r1, r3
 8001af0:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <vApplicationIPNetworkEventHook+0xb8>)
 8001af2:	f020 fe67 	bl	80227c4 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f107 0208 	add.w	r2, r7, #8
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00d feaa 	bl	800f858 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4808      	ldr	r0, [pc, #32]	@ (8001b2c <vApplicationIPNetworkEventHook+0xbc>)
 8001b0c:	f020 fe5a 	bl	80227c4 <lUDPLoggingPrintf>
	}
}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	@ 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000d28 	.word	0x20000d28
 8001b1c:	20000d2c 	.word	0x20000d2c
 8001b20:	080249ac 	.word	0x080249ac
 8001b24:	080249bc 	.word	0x080249bc
 8001b28:	080249d0 	.word	0x080249d0
 8001b2c:	080249e8 	.word	0x080249e8

08001b30 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8001b3c:	f000 f810 	bl	8001b60 <pcApplicationHostnameHook>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4619      	mov	r1, r3
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f022 f819 	bl	8023b7c <strcasecmp>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 8001b50:	2301      	movs	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 8001b54:	68fb      	ldr	r3, [r7, #12]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 8001b64:	4b02      	ldr	r3, [pc, #8]	@ (8001b70 <pcApplicationHostnameHook+0x10>)
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	08024a00 	.word	0x08024a00

08001b74 <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	71fb      	strb	r3, [r7, #7]
 8001b80:	4613      	mov	r3, r2
 8001b82:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 8001b84:	88bb      	ldrh	r3, [r7, #4]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <vApplicationPingReplyHook+0x24>)
 8001b8a:	f020 fe1b 	bl	80227c4 <lUDPLoggingPrintf>
	}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	08024a08 	.word	0x08024a08

08001b9c <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 8001ba4:	f021 fe7c 	bl	80238a0 <rand>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8001bc8:	4a01      	ldr	r2, [pc, #4]	@ (8001bd0 <prvGetRegistersFromStack+0x14>)
 8001bca:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <prvGetRegistersFromStack+0x10>
 8001bd0:	20000d44 	.word	0x20000d44

08001bd4 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
	__asm volatile
 8001bd8:	f01e 0f04 	tst.w	lr, #4
 8001bdc:	bf0c      	ite	eq
 8001bde:	f3ef 8008 	mrseq	r0, MSP
 8001be2:	f3ef 8009 	mrsne	r0, PSP
 8001be6:	6981      	ldr	r1, [r0, #24]
 8001be8:	f7ff ffe8 	bl	8001bbc <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001c00:	200a      	movs	r0, #10
 8001c02:	f002 fea5 	bl	8004950 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <prvServerWorkTask+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f8      	beq.n	8001c00 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 8001c0e:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <prvServerWorkTask+0x24>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 8001c14:	f020 fdf2 	bl	80227fc <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 8001c18:	e7f2      	b.n	8001c00 <prvServerWorkTask+0x8>
 8001c1a:	bf00      	nop
 8001c1c:	20000d2c 	.word	0x20000d2c

08001c20 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b098      	sub	sp, #96	@ 0x60
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 8001c28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c32:	2218      	movs	r2, #24
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f021 f8ed 	bl	8022e16 <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 8001c3c:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001c56:	2303      	movs	r3, #3
 8001c58:	061a      	lsls	r2, r3, #24
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	041b      	lsls	r3, r3, #16
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	23a8      	movs	r3, #168	@ 0xa8
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	4313      	orrs	r3, r2
 8001c66:	22c0      	movs	r2, #192	@ 0xc0
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001c72:	2206      	movs	r2, #6
 8001c74:	2101      	movs	r1, #1
 8001c76:	2002      	movs	r0, #2
 8001c78:	f00c fce2 	bl	800e640 <FreeRTOS_socket>
 8001c7c:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	2210      	movs	r2, #16
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f021 f8c5 	bl	8022e16 <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001c8c:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001c90:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001c92:	230c      	movs	r3, #12
 8001c94:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001c96:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001c9a:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4b48      	ldr	r3, [pc, #288]	@ (8001dc8 <vADCTCPTask+0x1a8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cac:	f00d fc82 	bl	800f5b4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	4b44      	ldr	r3, [pc, #272]	@ (8001dc8 <vADCTCPTask+0x1a8>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2100      	movs	r1, #0
 8001cba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cbc:	f00d fc7a 	bl	800f5b4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	9200      	str	r2, [sp, #0]
 8001cc8:	220d      	movs	r2, #13
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cce:	f00d fc71 	bl	800f5b4 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d104      	bne.n	8001ce4 <vADCTCPTask+0xc4>
 8001cda:	f240 615b 	movw	r1, #1627	@ 0x65b
 8001cde:	483b      	ldr	r0, [pc, #236]	@ (8001dcc <vADCTCPTask+0x1ac>)
 8001ce0:	f7ff fe92 	bl	8001a08 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cec:	9200      	str	r2, [sp, #0]
 8001cee:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f003 ffb5 	bl	8005c64 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 8001d04:	4b32      	ldr	r3, [pc, #200]	@ (8001dd0 <vADCTCPTask+0x1b0>)
 8001d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d08:	e001      	b.n	8001d0e <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 8001d0a:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <vADCTCPTask+0x1b4>)
 8001d0c:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1a:	2218      	movs	r2, #24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d20:	f00d ffe6 	bl	800fcf0 <FreeRTOS_connect>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d139      	bne.n	8001d9e <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001d2a:	e030      	b.n	8001d8e <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d3c:	f00e fadf 	bl	80102fe <FreeRTOS_get_tx_head>
 8001d40:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d027      	beq.n	8001d98 <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d902      	bls.n	8001d5a <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d58:	e003      	b.n	8001d62 <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001d66:	4413      	add	r3, r2
 8001d68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001d6e:	f020 ff45 	bl	8022bfc <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001d72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d74:	2300      	movs	r3, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d7a:	f00e fbcb 	bl	8010514 <FreeRTOS_send>
 8001d7e:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0a      	blt.n	8001d9c <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001d86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d8a:	4413      	add	r3, r2
 8001d8c:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d8ca      	bhi.n	8001d2c <vADCTCPTask+0x10c>
 8001d96:	e002      	b.n	8001d9e <vADCTCPTask+0x17e>
                        break;
 8001d98:	bf00      	nop
 8001d9a:	e000      	b.n	8001d9e <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001d9c:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001d9e:	2102      	movs	r1, #2
 8001da0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001da2:	f00e fc66 	bl	8010672 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001da6:	e002      	b.n	8001dae <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001da8:	2001      	movs	r0, #1
 8001daa:	f002 fdd1 	bl	8004950 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001dae:	2300      	movs	r3, #0
 8001db0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001db2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001db4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001db6:	f00e fa0d 	bl	80101d4 <FreeRTOS_recv>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	daf3      	bge.n	8001da8 <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001dc0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001dc2:	f00d f801 	bl	800edc8 <FreeRTOS_closesocket>
    for(;;) {
 8001dc6:	e754      	b.n	8001c72 <vADCTCPTask+0x52>
 8001dc8:	08027ef4 	.word	0x08027ef4
 8001dcc:	08024998 	.word	0x08024998
 8001dd0:	30010004 	.word	0x30010004
 8001dd4:	30000004 	.word	0x30000004

08001dd8 <vAuxADCTCPTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

static void vAuxADCTCPTask(void *pvParameters) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b098      	sub	sp, #96	@ 0x60
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usAuxADCDataMock0);
 8001de0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001de4:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dea:	2218      	movs	r2, #24
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f021 f811 	bl	8022e16 <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usAuxADCPort);
 8001df4:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001e0e:	2303      	movs	r3, #3
 8001e10:	061a      	lsls	r2, r3, #24
 8001e12:	2301      	movs	r3, #1
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	23a8      	movs	r3, #168	@ 0xa8
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	22c0      	movs	r2, #192	@ 0xc0
 8001e20:	4313      	orrs	r3, r2
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001e24:	2302      	movs	r3, #2
 8001e26:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f00c fc06 	bl	800e640 <FreeRTOS_socket>
 8001e34:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	2210      	movs	r2, #16
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f020 ffe9 	bl	8022e16 <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001e44:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001e48:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001e4e:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001e52:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001e54:	230c      	movs	r3, #12
 8001e56:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001e58:	2304      	movs	r3, #4
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	4b48      	ldr	r3, [pc, #288]	@ (8001f80 <vAuxADCTCPTask+0x1a8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e64:	f00d fba6 	bl	800f5b4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001e68:	2304      	movs	r3, #4
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4b44      	ldr	r3, [pc, #272]	@ (8001f80 <vAuxADCTCPTask+0x1a8>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2100      	movs	r1, #0
 8001e72:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e74:	f00d fb9e 	bl	800f5b4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	9200      	str	r2, [sp, #0]
 8001e80:	220d      	movs	r2, #13
 8001e82:	2100      	movs	r1, #0
 8001e84:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e86:	f00d fb95 	bl	800f5b4 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d104      	bne.n	8001e9c <vAuxADCTCPTask+0xc4>
 8001e92:	f240 61e5 	movw	r1, #1765	@ 0x6e5
 8001e96:	483b      	ldr	r0, [pc, #236]	@ (8001f84 <vAuxADCTCPTask+0x1ac>)
 8001e98:	f7ff fdb6 	bl	8001a08 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001e9c:	f107 0320 	add.w	r3, r7, #32
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	9200      	str	r2, [sp, #0]
 8001ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2000      	movs	r0, #0
 8001eae:	f003 fed9 	bl	8005c64 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <vAuxADCTCPTask+0xea>
	    pcBufferToTransmit = usAuxADCDataMock1;
 8001ebc:	4b32      	ldr	r3, [pc, #200]	@ (8001f88 <vAuxADCTCPTask+0x1b0>)
 8001ebe:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ec0:	e001      	b.n	8001ec6 <vAuxADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usAuxADCDataMock0;
 8001ec2:	4b32      	ldr	r3, [pc, #200]	@ (8001f8c <vAuxADCTCPTask+0x1b4>)
 8001ec4:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
        xAlreadyTransmitted = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed2:	2218      	movs	r2, #24
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ed8:	f00d ff0a 	bl	800fcf0 <FreeRTOS_connect>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d139      	bne.n	8001f56 <vAuxADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001ee2:	e030      	b.n	8001f46 <vAuxADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ef4:	f00e fa03 	bl	80102fe <FreeRTOS_get_tx_head>
 8001ef8:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d027      	beq.n	8001f50 <vAuxADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d902      	bls.n	8001f12 <vAuxADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f10:	e003      	b.n	8001f1a <vAuxADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001f1e:	4413      	add	r3, r2
 8001f20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f22:	4619      	mov	r1, r3
 8001f24:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f26:	f020 fe69 	bl	8022bfc <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001f2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f32:	f00e faef 	bl	8010514 <FreeRTOS_send>
 8001f36:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0a      	blt.n	8001f54 <vAuxADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001f3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f42:	4413      	add	r3, r2
 8001f44:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d8ca      	bhi.n	8001ee4 <vAuxADCTCPTask+0x10c>
 8001f4e:	e002      	b.n	8001f56 <vAuxADCTCPTask+0x17e>
                        break;
 8001f50:	bf00      	nop
 8001f52:	e000      	b.n	8001f56 <vAuxADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001f54:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001f56:	2102      	movs	r1, #2
 8001f58:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f5a:	f00e fb8a 	bl	8010672 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001f5e:	e002      	b.n	8001f66 <vAuxADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001f60:	2001      	movs	r0, #1
 8001f62:	f002 fcf5 	bl	8004950 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001f66:	2300      	movs	r3, #0
 8001f68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001f6c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f6e:	f00e f931 	bl	80101d4 <FreeRTOS_recv>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	daf3      	bge.n	8001f60 <vAuxADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001f78:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f7a:	f00c ff25 	bl	800edc8 <FreeRTOS_closesocket>
    for(;;) {
 8001f7e:	e754      	b.n	8001e2a <vAuxADCTCPTask+0x52>
 8001f80:	08027ef8 	.word	0x08027ef8
 8001f84:	08024998 	.word	0x08024998
 8001f88:	30028004 	.word	0x30028004
 8001f8c:	30020004 	.word	0x30020004

08001f90 <vTCADCTCPTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

static void vTCADCTCPTask(void *pvParameters) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b098      	sub	sp, #96	@ 0x60
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usTCADCData0);
 8001f98:	2380      	movs	r3, #128	@ 0x80
 8001f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa0:	2218      	movs	r2, #24
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f020 ff36 	bl	8022e16 <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usTCADCPort);
 8001faa:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	b21a      	sxth	r2, r3
 8001fb2:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	061a      	lsls	r2, r3, #24
 8001fc8:	2301      	movs	r3, #1
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	23a8      	movs	r3, #168	@ 0xa8
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	22c0      	movs	r2, #192	@ 0xc0
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001fe0:	2206      	movs	r2, #6
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f00c fb2b 	bl	800e640 <FreeRTOS_socket>
 8001fea:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001fec:	f107 0310 	add.w	r3, r7, #16
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f020 ff0e 	bl	8022e16 <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001ffa:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001ffe:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8002000:	230c      	movs	r3, #12
 8002002:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8002004:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8002008:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 800200a:	230c      	movs	r3, #12
 800200c:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 800200e:	2304      	movs	r3, #4
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	4b49      	ldr	r3, [pc, #292]	@ (8002138 <vTCADCTCPTask+0x1a8>)
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800201a:	f00d facb 	bl	800f5b4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 800201e:	2304      	movs	r3, #4
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	4b45      	ldr	r3, [pc, #276]	@ (8002138 <vTCADCTCPTask+0x1a8>)
 8002024:	2201      	movs	r2, #1
 8002026:	2100      	movs	r1, #0
 8002028:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800202a:	f00d fac3 	bl	800f5b4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	2210      	movs	r2, #16
 8002034:	9200      	str	r2, [sp, #0]
 8002036:	220d      	movs	r2, #13
 8002038:	2100      	movs	r1, #0
 800203a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800203c:	f00d faba 	bl	800f5b4 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8002040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d104      	bne.n	8002052 <vTCADCTCPTask+0xc2>
 8002048:	f240 716f 	movw	r1, #1903	@ 0x76f
 800204c:	483b      	ldr	r0, [pc, #236]	@ (800213c <vTCADCTCPTask+0x1ac>)
 800204e:	f7ff fcdb 	bl	8001a08 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8002052:	f107 0320 	add.w	r3, r7, #32
 8002056:	f04f 32ff 	mov.w	r2, #4294967295
 800205a:	9200      	str	r2, [sp, #0]
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	2100      	movs	r1, #0
 8002062:	2000      	movs	r0, #0
 8002064:	f003 fdfe 	bl	8005c64 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <vTCADCTCPTask+0xe8>
	    pcBufferToTransmit = usTCADCData1;
 8002072:	4b33      	ldr	r3, [pc, #204]	@ (8002140 <vTCADCTCPTask+0x1b0>)
 8002074:	653b      	str	r3, [r7, #80]	@ 0x50
 8002076:	e001      	b.n	800207c <vTCADCTCPTask+0xec>
	} else {
	    pcBufferToTransmit = usTCADCData0;
 8002078:	4b32      	ldr	r3, [pc, #200]	@ (8002144 <vTCADCTCPTask+0x1b4>)
 800207a:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
        xAlreadyTransmitted = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8002084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002088:	2218      	movs	r2, #24
 800208a:	4619      	mov	r1, r3
 800208c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800208e:	f00d fe2f 	bl	800fcf0 <FreeRTOS_connect>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d139      	bne.n	800210c <vTCADCTCPTask+0x17c>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8002098:	e030      	b.n	80020fc <vTCADCTCPTask+0x16c>
                {
                    BaseType_t xAvlSpace = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	4619      	mov	r1, r3
 80020a8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80020aa:	f00e f928 	bl	80102fe <FreeRTOS_get_tx_head>
 80020ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 80020b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d027      	beq.n	8002106 <vTCADCTCPTask+0x176>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 80020b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4293      	cmp	r3, r2
 80020c0:	d902      	bls.n	80020c8 <vTCADCTCPTask+0x138>
                        {
                            xBytesToSend = xAvlSpace;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020c6:	e003      	b.n	80020d0 <vTCADCTCPTask+0x140>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 80020c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 80020d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80020d4:	4413      	add	r3, r2
 80020d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020d8:	4619      	mov	r1, r3
 80020da:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80020dc:	f020 fd8e 	bl	8022bfc <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 80020e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020e2:	2300      	movs	r3, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80020e8:	f00e fa14 	bl	8010514 <FreeRTOS_send>
 80020ec:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 80020ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <vTCADCTCPTask+0x17a>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 80020f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f8:	4413      	add	r3, r2
 80020fa:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 80020fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002100:	429a      	cmp	r2, r3
 8002102:	d8ca      	bhi.n	800209a <vTCADCTCPTask+0x10a>
 8002104:	e002      	b.n	800210c <vTCADCTCPTask+0x17c>
                        break;
 8002106:	bf00      	nop
 8002108:	e000      	b.n	800210c <vTCADCTCPTask+0x17c>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 800210a:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 800210c:	2102      	movs	r1, #2
 800210e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002110:	f00e faaf 	bl	8010672 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8002114:	e002      	b.n	800211c <vTCADCTCPTask+0x18c>
            vTaskDelay(pdMS_TO_TICKS(1));
 8002116:	2001      	movs	r0, #1
 8002118:	f002 fc1a 	bl	8004950 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 800211c:	2300      	movs	r3, #0
 800211e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002120:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002122:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002124:	f00e f856 	bl	80101d4 <FreeRTOS_recv>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	daf3      	bge.n	8002116 <vTCADCTCPTask+0x186>
        }
        FreeRTOS_closesocket(xSocket);
 800212e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002130:	f00c fe4a 	bl	800edc8 <FreeRTOS_closesocket>
    for(;;) {
 8002134:	e754      	b.n	8001fe0 <vTCADCTCPTask+0x50>
 8002136:	bf00      	nop
 8002138:	08027efc 	.word	0x08027efc
 800213c:	08024998 	.word	0x08024998
 8002140:	30030088 	.word	0x30030088
 8002144:	30030008 	.word	0x30030008

08002148 <vCommandServerTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

void vCommandServerTask( void *pvParameters )
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b094      	sub	sp, #80	@ 0x50
 800214c:	af02      	add	r7, sp, #8
 800214e:	6078      	str	r0, [r7, #4]
  struct freertos_sockaddr xClient, xBindAddress;
  Socket_t xListeningSocket, xConnectedSocket;
  socklen_t xSize = sizeof( xClient );
 8002150:	2318      	movs	r3, #24
 8002152:	60bb      	str	r3, [r7, #8]
  static const TickType_t xReceiveTimeOut = pdMS_TO_TICKS( 500 );
  const BaseType_t xBacklog = 20;
 8002154:	2314      	movs	r3, #20
 8002156:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Attempt to open the socket. */
      xListeningSocket = FreeRTOS_socket( FREERTOS_AF_INET4, /* Or FREERTOS_AF_INET6 for IPv6. */
 8002158:	2206      	movs	r2, #6
 800215a:	2101      	movs	r1, #1
 800215c:	2002      	movs	r0, #2
 800215e:	f00c fa6f 	bl	800e640 <FreeRTOS_socket>
 8002162:	6438      	str	r0, [r7, #64]	@ 0x40
					  FREERTOS_SOCK_STREAM,  /* SOCK_STREAM for TCP. */
					  FREERTOS_IPPROTO_TCP );

      /* Check the socket was created. */
      configASSERT( xListeningSocket != FREERTOS_INVALID_SOCKET );
 8002164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d104      	bne.n	8002176 <vCommandServerTask+0x2e>
 800216c:	f240 71dc 	movw	r1, #2012	@ 0x7dc
 8002170:	4825      	ldr	r0, [pc, #148]	@ (8002208 <vCommandServerTask+0xc0>)
 8002172:	f7ff fc49 	bl	8001a08 <vAssertCalled>
	 be used with FreeRTOS_setsockopt() to change the sliding window size from
	 its default then do it here! (see the FreeRTOS_setsockopt()
	 documentation. */

      /* Set a time out so accept() will just wait for a connection. */
      FreeRTOS_setsockopt( xListeningSocket,
 8002176:	2304      	movs	r3, #4
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	4b24      	ldr	r3, [pc, #144]	@ (800220c <vCommandServerTask+0xc4>)
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002182:	f00d fa17 	bl	800f5b4 <FreeRTOS_setsockopt>
			   FREERTOS_SO_RCVTIMEO,
			   &xReceiveTimeOut,
			   sizeof( xReceiveTimeOut ) );

      /* Set the listening port to 10000. */
      memset( &xBindAddress, 0, sizeof(xBindAddress) );
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	2218      	movs	r2, #24
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f020 fe41 	bl	8022e16 <memset>
      xBindAddress.sin_port = usCommandPort;
 8002194:	f241 3389 	movw	r3, #5001	@ 0x1389
 8002198:	81fb      	strh	r3, [r7, #14]
      xBindAddress.sin_port = FreeRTOS_htons( xBindAddress.sin_port );
 800219a:	89fb      	ldrh	r3, [r7, #14]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	81fb      	strh	r3, [r7, #14]
      xBindAddress.sin_family = FREERTOS_AF_INET4; /* FREERTOS_AF_INET6 to be used for IPv6 */
 80021b0:	2302      	movs	r3, #2
 80021b2:	737b      	strb	r3, [r7, #13]

      /* Bind the socket to the port that the client RTOS task will send to. */
      FreeRTOS_bind( xListeningSocket, &xBindAddress, sizeof( xBindAddress ) );
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	2218      	movs	r2, #24
 80021ba:	4619      	mov	r1, r3
 80021bc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80021be:	f00c fc2f 	bl	800ea20 <FreeRTOS_bind>

      /* Set the socket into a listening state so it can accept connections.
	 The maximum number of simultaneous connections is limited to 20. */
      FreeRTOS_listen( xListeningSocket, xBacklog );
 80021c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80021c4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80021c6:	f00e f9e3 	bl	8010590 <FreeRTOS_listen>

      for( ;; )
      {
	  /* Wait for incoming connections. */
	  xConnectedSocket = FreeRTOS_accept( xListeningSocket, &xClient, &xSize );
 80021ca:	f107 0208 	add.w	r2, r7, #8
 80021ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d2:	4619      	mov	r1, r3
 80021d4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80021d6:	f00d fead 	bl	800ff34 <FreeRTOS_accept>
 80021da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  configASSERT( xConnectedSocket != FREERTOS_INVALID_SOCKET );
 80021dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d104      	bne.n	80021ee <vCommandServerTask+0xa6>
 80021e4:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80021e8:	4807      	ldr	r0, [pc, #28]	@ (8002208 <vCommandServerTask+0xc0>)
 80021ea:	f7ff fc0d 	bl	8001a08 <vAssertCalled>

	  /* Spawn a RTOS task to handle the connection. */
	  xTaskCreate( prvCommandHandlerTask,
 80021ee:	2300      	movs	r3, #0
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021f8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80021fc:	4904      	ldr	r1, [pc, #16]	@ (8002210 <vCommandServerTask+0xc8>)
 80021fe:	4805      	ldr	r0, [pc, #20]	@ (8002214 <vCommandServerTask+0xcc>)
 8002200:	f002 f9c8 	bl	8004594 <xTaskCreate>
	  xConnectedSocket = FreeRTOS_accept( xListeningSocket, &xClient, &xSize );
 8002204:	e7e1      	b.n	80021ca <vCommandServerTask+0x82>
 8002206:	bf00      	nop
 8002208:	08024998 	.word	0x08024998
 800220c:	08027f00 	.word	0x08027f00
 8002210:	08024a20 	.word	0x08024a20
 8002214:	08002219 	.word	0x08002219

08002218 <prvCommandHandlerTask>:
      }
}


static void prvCommandHandlerTask( void *pvParameters )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  static char cRxedData[ CMD_BUFFER_SIZE ];
  BaseType_t lBytesReceived;

      /* It is assumed the socket has already been created and connected before
   being passed into this RTOS task using the RTOS task's parameter. */
      xSocket = ( Socket_t ) pvParameters;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	60fb      	str	r3, [r7, #12]

      for( ;; )
      {
	  /* Receive another block of data into the cRxedData buffer. */
	  lBytesReceived = FreeRTOS_recv( xSocket, &cRxedData, CMD_BUFFER_SIZE, 0 );
 8002224:	2300      	movs	r3, #0
 8002226:	2280      	movs	r2, #128	@ 0x80
 8002228:	4950      	ldr	r1, [pc, #320]	@ (800236c <prvCommandHandlerTask+0x154>)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f00d ffd2 	bl	80101d4 <FreeRTOS_recv>
 8002230:	60b8      	str	r0, [r7, #8]

	  if( lBytesReceived > 0 )
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	dd79      	ble.n	800232c <prvCommandHandlerTask+0x114>
	  {
	      /* Data was received, process it here. */
	      //prvProcessData( cRxedData, lBytesReceived );
	      cRxedData[lBytesReceived] = 0; //ensure null terminated string
 8002238:	4a4c      	ldr	r2, [pc, #304]	@ (800236c <prvCommandHandlerTask+0x154>)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4413      	add	r3, r2
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
	      if (strncmp(cRxedData, "INIT", 4) == 0){
 8002242:	2204      	movs	r2, #4
 8002244:	494a      	ldr	r1, [pc, #296]	@ (8002370 <prvCommandHandlerTask+0x158>)
 8002246:	4849      	ldr	r0, [pc, #292]	@ (800236c <prvCommandHandlerTask+0x154>)
 8002248:	f021 fcb2 	bl	8023bb0 <strncmp>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <prvCommandHandlerTask+0x68>
		  FreeRTOS_printf(("Received Init Command\n"));
 8002252:	4848      	ldr	r0, [pc, #288]	@ (8002374 <prvCommandHandlerTask+0x15c>)
 8002254:	f020 fab6 	bl	80227c4 <lUDPLoggingPrintf>
		  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	2120      	movs	r1, #32
 800225c:	4846      	ldr	r0, [pc, #280]	@ (8002378 <prvCommandHandlerTask+0x160>)
 800225e:	f01a fd31 	bl	801ccc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	2104      	movs	r1, #4
 8002266:	4844      	ldr	r0, [pc, #272]	@ (8002378 <prvCommandHandlerTask+0x160>)
 8002268:	f01a fd2c 	bl	801ccc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_RESET);
 800226c:	2200      	movs	r2, #0
 800226e:	2110      	movs	r1, #16
 8002270:	4841      	ldr	r0, [pc, #260]	@ (8002378 <prvCommandHandlerTask+0x160>)
 8002272:	f01a fd27 	bl	801ccc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 8002276:	2200      	movs	r2, #0
 8002278:	2108      	movs	r1, #8
 800227a:	483f      	ldr	r0, [pc, #252]	@ (8002378 <prvCommandHandlerTask+0x160>)
 800227c:	f01a fd22 	bl	801ccc4 <HAL_GPIO_WritePin>

	      }
	      if (strncmp(cRxedData, "STOP", 4) == 0){
 8002280:	2204      	movs	r2, #4
 8002282:	493e      	ldr	r1, [pc, #248]	@ (800237c <prvCommandHandlerTask+0x164>)
 8002284:	4839      	ldr	r0, [pc, #228]	@ (800236c <prvCommandHandlerTask+0x154>)
 8002286:	f021 fc93 	bl	8023bb0 <strncmp>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d116      	bne.n	80022be <prvCommandHandlerTask+0xa6>
		  FreeRTOS_printf(("Received Stop Command\n"));
 8002290:	483b      	ldr	r0, [pc, #236]	@ (8002380 <prvCommandHandlerTask+0x168>)
 8002292:	f020 fa97 	bl	80227c4 <lUDPLoggingPrintf>
		  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8002296:	2201      	movs	r2, #1
 8002298:	2120      	movs	r1, #32
 800229a:	4837      	ldr	r0, [pc, #220]	@ (8002378 <prvCommandHandlerTask+0x160>)
 800229c:	f01a fd12 	bl	801ccc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2104      	movs	r1, #4
 80022a4:	4834      	ldr	r0, [pc, #208]	@ (8002378 <prvCommandHandlerTask+0x160>)
 80022a6:	f01a fd0d 	bl	801ccc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2110      	movs	r1, #16
 80022ae:	4832      	ldr	r0, [pc, #200]	@ (8002378 <prvCommandHandlerTask+0x160>)
 80022b0:	f01a fd08 	bl	801ccc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2108      	movs	r1, #8
 80022b8:	482f      	ldr	r0, [pc, #188]	@ (8002378 <prvCommandHandlerTask+0x160>)
 80022ba:	f01a fd03 	bl	801ccc4 <HAL_GPIO_WritePin>

	      }
	      if (strncmp(cRxedData, "HEAT", 4) == 0){
 80022be:	2204      	movs	r2, #4
 80022c0:	4930      	ldr	r1, [pc, #192]	@ (8002384 <prvCommandHandlerTask+0x16c>)
 80022c2:	482a      	ldr	r0, [pc, #168]	@ (800236c <prvCommandHandlerTask+0x154>)
 80022c4:	f021 fc74 	bl	8023bb0 <strncmp>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d112      	bne.n	80022f4 <prvCommandHandlerTask+0xdc>
		  FreeRTOS_printf(("Received Heat Command\n"));
 80022ce:	482e      	ldr	r0, [pc, #184]	@ (8002388 <prvCommandHandlerTask+0x170>)
 80022d0:	f020 fa78 	bl	80227c4 <lUDPLoggingPrintf>
		  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2120      	movs	r1, #32
 80022d8:	4827      	ldr	r0, [pc, #156]	@ (8002378 <prvCommandHandlerTask+0x160>)
 80022da:	f01a fcf3 	bl	801ccc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_SET);
 80022de:	2201      	movs	r2, #1
 80022e0:	2104      	movs	r1, #4
 80022e2:	4825      	ldr	r0, [pc, #148]	@ (8002378 <prvCommandHandlerTask+0x160>)
 80022e4:	f01a fcee 	bl	801ccc4 <HAL_GPIO_WritePin>
		  ulSevenSegD1 |= 1<<5; //turn first digit DP on
 80022e8:	4b28      	ldr	r3, [pc, #160]	@ (800238c <prvCommandHandlerTask+0x174>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f043 0320 	orr.w	r3, r3, #32
 80022f0:	4a26      	ldr	r2, [pc, #152]	@ (800238c <prvCommandHandlerTask+0x174>)
 80022f2:	6013      	str	r3, [r2, #0]
	      }
	      if (strncmp(cRxedData, "COOL", 4) == 0){
 80022f4:	2204      	movs	r2, #4
 80022f6:	4926      	ldr	r1, [pc, #152]	@ (8002390 <prvCommandHandlerTask+0x178>)
 80022f8:	481c      	ldr	r0, [pc, #112]	@ (800236c <prvCommandHandlerTask+0x154>)
 80022fa:	f021 fc59 	bl	8023bb0 <strncmp>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d18f      	bne.n	8002224 <prvCommandHandlerTask+0xc>
		  FreeRTOS_printf(("Received Cool Command\n"));
 8002304:	4823      	ldr	r0, [pc, #140]	@ (8002394 <prvCommandHandlerTask+0x17c>)
 8002306:	f020 fa5d 	bl	80227c4 <lUDPLoggingPrintf>
		  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	2120      	movs	r1, #32
 800230e:	481a      	ldr	r0, [pc, #104]	@ (8002378 <prvCommandHandlerTask+0x160>)
 8002310:	f01a fcd8 	bl	801ccc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	2104      	movs	r1, #4
 8002318:	4817      	ldr	r0, [pc, #92]	@ (8002378 <prvCommandHandlerTask+0x160>)
 800231a:	f01a fcd3 	bl	801ccc4 <HAL_GPIO_WritePin>
		  ulSevenSegD1 &= ~(1<<5); //turn first digit DP off
 800231e:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <prvCommandHandlerTask+0x174>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0320 	bic.w	r3, r3, #32
 8002326:	4a19      	ldr	r2, [pc, #100]	@ (800238c <prvCommandHandlerTask+0x174>)
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e77b      	b.n	8002224 <prvCommandHandlerTask+0xc>
	      }
	  }
	  else if( lBytesReceived == 0 )
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f43f af78 	beq.w	8002224 <prvCommandHandlerTask+0xc>
	  }
	  else
	  {
	      /* Error (maybe the connected socket already shut down the socket?).
		 Attempt graceful shutdown. */
	      FreeRTOS_shutdown( xSocket, FREERTOS_SHUT_RDWR );
 8002334:	2102      	movs	r1, #2
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f00e f99b 	bl	8010672 <FreeRTOS_shutdown>
	      break;
 800233c:	bf00      	nop

      /* The RTOS task will get here if an error is received on a read. Ensure the
   socket has shut down (indicated by FreeRTOS\_recv() returning a -pdFREERTOS\_ERRNO\_EINVAL
   error before closing the socket). */

      while( FreeRTOS_recv( xSocket, &usZero, 1, 0 ) >= 0 )
 800233e:	e002      	b.n	8002346 <prvCommandHandlerTask+0x12e>
      {
	  /* Wait for shutdown to complete. If a receive block time is used then
	     this delay will not be necessary as FreeRTOS\_recv() will place the RTOS task
	     into the Blocked state anyway. */
	  vTaskDelay( pdTICKS_TO_MS( 1 ) );
 8002340:	2001      	movs	r0, #1
 8002342:	f002 fb05 	bl	8004950 <vTaskDelay>
      while( FreeRTOS_recv( xSocket, &usZero, 1, 0 ) >= 0 )
 8002346:	2300      	movs	r3, #0
 8002348:	2201      	movs	r2, #1
 800234a:	4913      	ldr	r1, [pc, #76]	@ (8002398 <prvCommandHandlerTask+0x180>)
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f00d ff41 	bl	80101d4 <FreeRTOS_recv>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	daf3      	bge.n	8002340 <prvCommandHandlerTask+0x128>
	  /* Note - real applications should implement a timeout here, not just
	     loop forever. */
      }

      /* Shutdown is complete and the socket can be safely closed. */
      FreeRTOS_closesocket( xSocket );
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f00c fd35 	bl	800edc8 <FreeRTOS_closesocket>

      /* Must not drop off the end of the RTOS task - delete the RTOS task. */
      vTaskDelete(NULL);
 800235e:	2000      	movs	r0, #0
 8002360:	f002 fa58 	bl	8004814 <vTaskDelete>
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000d48 	.word	0x20000d48
 8002370:	08024a30 	.word	0x08024a30
 8002374:	08024a38 	.word	0x08024a38
 8002378:	58021000 	.word	0x58021000
 800237c:	08024a50 	.word	0x08024a50
 8002380:	08024a58 	.word	0x08024a58
 8002384:	08024a70 	.word	0x08024a70
 8002388:	08024a78 	.word	0x08024a78
 800238c:	30030108 	.word	0x30030108
 8002390:	08024a90 	.word	0x08024a90
 8002394:	08024a98 	.word	0x08024a98
 8002398:	30000000 	.word	0x30000000

0800239c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80023a2:	463b      	mov	r3, r7
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80023ae:	f018 fb59 	bl	801aa64 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80023b2:	2301      	movs	r3, #1
 80023b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80023ba:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 80023be:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80023c0:	2312      	movs	r3, #18
 80023c2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80023cc:	2303      	movs	r3, #3
 80023ce:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80023d4:	2301      	movs	r3, #1
 80023d6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80023e0:	463b      	mov	r3, r7
 80023e2:	4618      	mov	r0, r3
 80023e4:	f018 fb76 	bl	801aad4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80023ec:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80023f0:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80023f2:	463b      	mov	r3, r7
 80023f4:	4618      	mov	r0, r3
 80023f6:	f018 fb6d 	bl	801aad4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80023fa:	2004      	movs	r0, #4
 80023fc:	f018 fb4a 	bl	801aa94 <HAL_MPU_Enable>

}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800240c:	b672      	cpsid	i
}
 800240e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <Error_Handler+0x8>

08002414 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <HAL_MspInit+0x30>)
 800241c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002420:	4a08      	ldr	r2, [pc, #32]	@ (8002444 <HAL_MspInit+0x30>)
 8002422:	f043 0302 	orr.w	r3, r3, #2
 8002426:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_MspInit+0x30>)
 800242c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	58024400 	.word	0x58024400

08002448 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08e      	sub	sp, #56	@ 0x38
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a61      	ldr	r2, [pc, #388]	@ (80025ec <HAL_ETH_MspInit+0x1a4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	f040 80bb 	bne.w	80025e2 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800246c:	4b60      	ldr	r3, [pc, #384]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 800246e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002472:	4a5f      	ldr	r2, [pc, #380]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 8002474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002478:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800247c:	4b5c      	ldr	r3, [pc, #368]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 800247e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800248a:	4b59      	ldr	r3, [pc, #356]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 800248c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002490:	4a57      	ldr	r2, [pc, #348]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 8002492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002496:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800249a:	4b55      	ldr	r3, [pc, #340]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 800249c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80024a8:	4b51      	ldr	r3, [pc, #324]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 80024aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024ae:	4a50      	ldr	r2, [pc, #320]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80024b8:	4b4d      	ldr	r3, [pc, #308]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 80024ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	4b4a      	ldr	r3, [pc, #296]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024cc:	4a48      	ldr	r2, [pc, #288]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 80024ce:	f043 0304 	orr.w	r3, r3, #4
 80024d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d6:	4b46      	ldr	r3, [pc, #280]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 80024d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	4b42      	ldr	r3, [pc, #264]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ea:	4a41      	ldr	r2, [pc, #260]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f4:	4b3e      	ldr	r3, [pc, #248]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 80024f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	4b3b      	ldr	r3, [pc, #236]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002508:	4a39      	ldr	r2, [pc, #228]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002512:	4b37      	ldr	r3, [pc, #220]	@ (80025f0 <HAL_ETH_MspInit+0x1a8>)
 8002514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002520:	2302      	movs	r3, #2
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002530:	230b      	movs	r3, #11
 8002532:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002538:	4619      	mov	r1, r3
 800253a:	482e      	ldr	r0, [pc, #184]	@ (80025f4 <HAL_ETH_MspInit+0x1ac>)
 800253c:	f01a fa12 	bl	801c964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002540:	2306      	movs	r3, #6
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002550:	230b      	movs	r3, #11
 8002552:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002558:	4619      	mov	r1, r3
 800255a:	4827      	ldr	r0, [pc, #156]	@ (80025f8 <HAL_ETH_MspInit+0x1b0>)
 800255c:	f01a fa02 	bl	801c964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002560:	2380      	movs	r3, #128	@ 0x80
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002570:	230b      	movs	r3, #11
 8002572:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002578:	4619      	mov	r1, r3
 800257a:	481f      	ldr	r0, [pc, #124]	@ (80025f8 <HAL_ETH_MspInit+0x1b0>)
 800257c:	f01a f9f2 	bl	801c964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002580:	2330      	movs	r3, #48	@ 0x30
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002590:	230b      	movs	r3, #11
 8002592:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002598:	4619      	mov	r1, r3
 800259a:	4816      	ldr	r0, [pc, #88]	@ (80025f4 <HAL_ETH_MspInit+0x1ac>)
 800259c:	f01a f9e2 	bl	801c964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80025a0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025b2:	230b      	movs	r3, #11
 80025b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ba:	4619      	mov	r1, r3
 80025bc:	480f      	ldr	r0, [pc, #60]	@ (80025fc <HAL_ETH_MspInit+0x1b4>)
 80025be:	f01a f9d1 	bl	801c964 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2105      	movs	r1, #5
 80025c6:	203d      	movs	r0, #61	@ 0x3d
 80025c8:	f018 fa17 	bl	801a9fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80025cc:	203d      	movs	r0, #61	@ 0x3d
 80025ce:	f018 fa2e 	bl	801aa2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2105      	movs	r1, #5
 80025d6:	203e      	movs	r0, #62	@ 0x3e
 80025d8:	f018 fa0f 	bl	801a9fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80025dc:	203e      	movs	r0, #62	@ 0x3e
 80025de:	f018 fa26 	bl	801aa2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80025e2:	bf00      	nop
 80025e4:	3738      	adds	r7, #56	@ 0x38
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40028000 	.word	0x40028000
 80025f0:	58024400 	.word	0x58024400
 80025f4:	58020800 	.word	0x58020800
 80025f8:	58020000 	.word	0x58020000
 80025fc:	58020400 	.word	0x58020400

08002600 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b0ba      	sub	sp, #232	@ 0xe8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	22c0      	movs	r2, #192	@ 0xc0
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f020 fbf8 	bl	8022e16 <memset>
  if(hi2c->Instance==I2C4)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a27      	ldr	r2, [pc, #156]	@ (80026c8 <HAL_I2C_MspInit+0xc8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d146      	bne.n	80026be <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002630:	f04f 0210 	mov.w	r2, #16
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002642:	f107 0310 	add.w	r3, r7, #16
 8002646:	4618      	mov	r0, r3
 8002648:	f01b fcaa 	bl	801dfa0 <HAL_RCCEx_PeriphCLKConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002652:	f7ff fed9 	bl	8002408 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002656:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_I2C_MspInit+0xcc>)
 8002658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800265c:	4a1b      	ldr	r2, [pc, #108]	@ (80026cc <HAL_I2C_MspInit+0xcc>)
 800265e:	f043 0308 	orr.w	r3, r3, #8
 8002662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002666:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <HAL_I2C_MspInit+0xcc>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002674:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002678:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800267c:	2312      	movs	r3, #18
 800267e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800268e:	2304      	movs	r3, #4
 8002690:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002694:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002698:	4619      	mov	r1, r3
 800269a:	480d      	ldr	r0, [pc, #52]	@ (80026d0 <HAL_I2C_MspInit+0xd0>)
 800269c:	f01a f962 	bl	801c964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80026a0:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <HAL_I2C_MspInit+0xcc>)
 80026a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026a6:	4a09      	ldr	r2, [pc, #36]	@ (80026cc <HAL_I2C_MspInit+0xcc>)
 80026a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_I2C_MspInit+0xcc>)
 80026b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80026be:	bf00      	nop
 80026c0:	37e8      	adds	r7, #232	@ 0xe8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	58001c00 	.word	0x58001c00
 80026cc:	58024400 	.word	0x58024400
 80026d0:	58020c00 	.word	0x58020c00

080026d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b090      	sub	sp, #64	@ 0x40
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a88      	ldr	r2, [pc, #544]	@ (8002914 <HAL_SPI_MspInit+0x240>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	f040 8083 	bne.w	80027fe <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026f8:	4b87      	ldr	r3, [pc, #540]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 80026fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026fe:	4a86      	ldr	r2, [pc, #536]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 8002700:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002704:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002708:	4b83      	ldr	r3, [pc, #524]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 800270a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800270e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002712:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002714:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	4b80      	ldr	r3, [pc, #512]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 8002718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800271c:	4a7e      	ldr	r2, [pc, #504]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002726:	4b7c      	ldr	r3, [pc, #496]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 8002728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002734:	4b78      	ldr	r3, [pc, #480]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 8002736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800273a:	4a77      	ldr	r2, [pc, #476]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002744:	4b74      	ldr	r3, [pc, #464]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 8002746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	623b      	str	r3, [r7, #32]
 8002750:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002752:	2370      	movs	r3, #112	@ 0x70
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	2300      	movs	r3, #0
 8002760:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002762:	2305      	movs	r3, #5
 8002764:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800276a:	4619      	mov	r1, r3
 800276c:	486b      	ldr	r0, [pc, #428]	@ (800291c <HAL_SPI_MspInit+0x248>)
 800276e:	f01a f8f9 	bl	801c964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002772:	2320      	movs	r3, #32
 8002774:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002782:	2305      	movs	r3, #5
 8002784:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002786:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800278a:	4619      	mov	r1, r3
 800278c:	4864      	ldr	r0, [pc, #400]	@ (8002920 <HAL_SPI_MspInit+0x24c>)
 800278e:	f01a f8e9 	bl	801c964 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002792:	4b64      	ldr	r3, [pc, #400]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 8002794:	4a64      	ldr	r2, [pc, #400]	@ (8002928 <HAL_SPI_MspInit+0x254>)
 8002796:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002798:	4b62      	ldr	r3, [pc, #392]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 800279a:	2225      	movs	r2, #37	@ 0x25
 800279c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800279e:	4b61      	ldr	r3, [pc, #388]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027aa:	4b5e      	ldr	r3, [pc, #376]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 80027ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 80027b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027b8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 80027bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80027c2:	4b58      	ldr	r3, [pc, #352]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 80027c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027c8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027ca:	4b56      	ldr	r3, [pc, #344]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d0:	4b54      	ldr	r3, [pc, #336]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80027d6:	4853      	ldr	r0, [pc, #332]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 80027d8:	f018 f9bc 	bl	801ab54 <HAL_DMA_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80027e2:	f7ff fe11 	bl	8002408 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 80027ea:	67da      	str	r2, [r3, #124]	@ 0x7c
 80027ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002924 <HAL_SPI_MspInit+0x250>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	2023      	movs	r0, #35	@ 0x23
 80027f8:	f018 f8ff 	bl	801a9fa <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80027fc:	e126      	b.n	8002a4c <HAL_SPI_MspInit+0x378>
  else if(hspi->Instance==SPI2)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4a      	ldr	r2, [pc, #296]	@ (800292c <HAL_SPI_MspInit+0x258>)
 8002804:	4293      	cmp	r3, r2
 8002806:	f040 8097 	bne.w	8002938 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800280a:	4b43      	ldr	r3, [pc, #268]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 800280c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002810:	4a41      	ldr	r2, [pc, #260]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 8002812:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002816:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800281a:	4b3f      	ldr	r3, [pc, #252]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 800281c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002828:	4b3b      	ldr	r3, [pc, #236]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 800282a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800282e:	4a3a      	ldr	r2, [pc, #232]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002838:	4b37      	ldr	r3, [pc, #220]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 800283a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	4b34      	ldr	r3, [pc, #208]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 8002848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800284c:	4a32      	ldr	r2, [pc, #200]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002856:	4b30      	ldr	r3, [pc, #192]	@ (8002918 <HAL_SPI_MspInit+0x244>)
 8002858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002864:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8002868:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002876:	2305      	movs	r3, #5
 8002878:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800287e:	4619      	mov	r1, r3
 8002880:	4827      	ldr	r0, [pc, #156]	@ (8002920 <HAL_SPI_MspInit+0x24c>)
 8002882:	f01a f86f 	bl	801c964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002886:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800288a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002898:	2305      	movs	r3, #5
 800289a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028a0:	4619      	mov	r1, r3
 80028a2:	481e      	ldr	r0, [pc, #120]	@ (800291c <HAL_SPI_MspInit+0x248>)
 80028a4:	f01a f85e 	bl	801c964 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 80028a8:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 80028aa:	4a22      	ldr	r2, [pc, #136]	@ (8002934 <HAL_SPI_MspInit+0x260>)
 80028ac:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80028ae:	4b20      	ldr	r3, [pc, #128]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 80028b0:	2227      	movs	r2, #39	@ 0x27
 80028b2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 80028c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028c6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028c8:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 80028ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028ce:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028d0:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 80028d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028d6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80028d8:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 80028da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028de:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028e0:	4b13      	ldr	r3, [pc, #76]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e6:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80028ec:	4810      	ldr	r0, [pc, #64]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 80028ee:	f018 f931 	bl	801ab54 <HAL_DMA_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_SPI_MspInit+0x228>
      Error_Handler();
 80028f8:	f7ff fd86 	bl	8002408 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 8002900:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002902:	4a0b      	ldr	r2, [pc, #44]	@ (8002930 <HAL_SPI_MspInit+0x25c>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	2024      	movs	r0, #36	@ 0x24
 800290e:	f018 f874 	bl	801a9fa <HAL_NVIC_SetPriority>
}
 8002912:	e09b      	b.n	8002a4c <HAL_SPI_MspInit+0x378>
 8002914:	40013000 	.word	0x40013000
 8002918:	58024400 	.word	0x58024400
 800291c:	58020000 	.word	0x58020000
 8002920:	58020400 	.word	0x58020400
 8002924:	20000290 	.word	0x20000290
 8002928:	40020010 	.word	0x40020010
 800292c:	40003800 	.word	0x40003800
 8002930:	20000308 	.word	0x20000308
 8002934:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a45      	ldr	r2, [pc, #276]	@ (8002a54 <HAL_SPI_MspInit+0x380>)
 800293e:	4293      	cmp	r3, r2
 8002940:	f040 8084 	bne.w	8002a4c <HAL_SPI_MspInit+0x378>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002944:	4b44      	ldr	r3, [pc, #272]	@ (8002a58 <HAL_SPI_MspInit+0x384>)
 8002946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800294a:	4a43      	ldr	r2, [pc, #268]	@ (8002a58 <HAL_SPI_MspInit+0x384>)
 800294c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002950:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002954:	4b40      	ldr	r3, [pc, #256]	@ (8002a58 <HAL_SPI_MspInit+0x384>)
 8002956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800295a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002962:	4b3d      	ldr	r3, [pc, #244]	@ (8002a58 <HAL_SPI_MspInit+0x384>)
 8002964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002968:	4a3b      	ldr	r2, [pc, #236]	@ (8002a58 <HAL_SPI_MspInit+0x384>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002972:	4b39      	ldr	r3, [pc, #228]	@ (8002a58 <HAL_SPI_MspInit+0x384>)
 8002974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002980:	4b35      	ldr	r3, [pc, #212]	@ (8002a58 <HAL_SPI_MspInit+0x384>)
 8002982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002986:	4a34      	ldr	r2, [pc, #208]	@ (8002a58 <HAL_SPI_MspInit+0x384>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002990:	4b31      	ldr	r3, [pc, #196]	@ (8002a58 <HAL_SPI_MspInit+0x384>)
 8002992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800299e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029b0:	2306      	movs	r3, #6
 80029b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029b8:	4619      	mov	r1, r3
 80029ba:	4828      	ldr	r0, [pc, #160]	@ (8002a5c <HAL_SPI_MspInit+0x388>)
 80029bc:	f019 ffd2 	bl	801c964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80029c0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029d2:	2306      	movs	r3, #6
 80029d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029da:	4619      	mov	r1, r3
 80029dc:	4820      	ldr	r0, [pc, #128]	@ (8002a60 <HAL_SPI_MspInit+0x38c>)
 80029de:	f019 ffc1 	bl	801c964 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream7;
 80029e2:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 80029e4:	4a20      	ldr	r2, [pc, #128]	@ (8002a68 <HAL_SPI_MspInit+0x394>)
 80029e6:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80029e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 80029ea:	223d      	movs	r2, #61	@ 0x3d
 80029ec:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 80029fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a00:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a02:	4b18      	ldr	r3, [pc, #96]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 8002a04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a08:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 8002a0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a10:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8002a12:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 8002a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a18:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a1a:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a20:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002a26:	480f      	ldr	r0, [pc, #60]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 8002a28:	f018 f894 	bl	801ab54 <HAL_DMA_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_SPI_MspInit+0x362>
      Error_Handler();
 8002a32:	f7ff fce9 	bl	8002408 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a0a      	ldr	r2, [pc, #40]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 8002a3a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a3c:	4a09      	ldr	r2, [pc, #36]	@ (8002a64 <HAL_SPI_MspInit+0x390>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	2033      	movs	r0, #51	@ 0x33
 8002a48:	f017 ffd7 	bl	801a9fa <HAL_NVIC_SetPriority>
}
 8002a4c:	bf00      	nop
 8002a4e:	3740      	adds	r7, #64	@ 0x40
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40003c00 	.word	0x40003c00
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	58020000 	.word	0x58020000
 8002a60:	58020800 	.word	0x58020800
 8002a64:	20000380 	.word	0x20000380
 8002a68:	400200b8 	.word	0x400200b8

08002a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a87      	ldr	r2, [pc, #540]	@ (8002c98 <HAL_TIM_Base_MspInit+0x22c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d13e      	bne.n	8002afc <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a7e:	4b87      	ldr	r3, [pc, #540]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a84:	4a85      	ldr	r2, [pc, #532]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a8e:	4b83      	ldr	r3, [pc, #524]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 8002a9c:	4b80      	ldr	r3, [pc, #512]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002a9e:	4a81      	ldr	r2, [pc, #516]	@ (8002ca4 <HAL_TIM_Base_MspInit+0x238>)
 8002aa0:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 8002aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aa8:	4b7d      	ldr	r3, [pc, #500]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002aaa:	2240      	movs	r2, #64	@ 0x40
 8002aac:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aae:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8002ab4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002aba:	4b79      	ldr	r3, [pc, #484]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002abc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ac0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ac2:	4b77      	ldr	r3, [pc, #476]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac8:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8002aca:	4b75      	ldr	r3, [pc, #468]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002acc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ad0:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8002ad2:	4b73      	ldr	r3, [pc, #460]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad8:	4b71      	ldr	r3, [pc, #452]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002ade:	4870      	ldr	r0, [pc, #448]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002ae0:	f018 f838 	bl	801ab54 <HAL_DMA_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002aea:	f7ff fc8d 	bl	8002408 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a6b      	ldr	r2, [pc, #428]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002af2:	621a      	str	r2, [r3, #32]
 8002af4:	4a6a      	ldr	r2, [pc, #424]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x234>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002afa:	e129      	b.n	8002d50 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b04:	d10f      	bne.n	8002b26 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b06:	4b65      	ldr	r3, [pc, #404]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b0c:	4a63      	ldr	r2, [pc, #396]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b16:	4b61      	ldr	r3, [pc, #388]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	69bb      	ldr	r3, [r7, #24]
}
 8002b24:	e114      	b.n	8002d50 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM3)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca8 <HAL_TIM_Base_MspInit+0x23c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d13e      	bne.n	8002bae <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b30:	4b5a      	ldr	r3, [pc, #360]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002b32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b36:	4a59      	ldr	r2, [pc, #356]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b40:	4b56      	ldr	r3, [pc, #344]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_up.Instance = DMA1_Stream3;
 8002b4e:	4b57      	ldr	r3, [pc, #348]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002b50:	4a57      	ldr	r2, [pc, #348]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x244>)
 8002b52:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 8002b54:	4b55      	ldr	r3, [pc, #340]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002b56:	221b      	movs	r2, #27
 8002b58:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b5a:	4b54      	ldr	r3, [pc, #336]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002b5c:	2240      	movs	r2, #64	@ 0x40
 8002b5e:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b60:	4b52      	ldr	r3, [pc, #328]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 8002b66:	4b51      	ldr	r3, [pc, #324]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002b6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b72:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b74:	4b4d      	ldr	r3, [pc, #308]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002b76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b7a:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8002b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002b7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b82:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 8002b84:	4b49      	ldr	r3, [pc, #292]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b8a:	4b48      	ldr	r3, [pc, #288]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8002b90:	4846      	ldr	r0, [pc, #280]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002b92:	f017 ffdf 	bl	801ab54 <HAL_DMA_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8002b9c:	f7ff fc34 	bl	8002408 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a42      	ldr	r2, [pc, #264]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002ba4:	621a      	str	r2, [r3, #32]
 8002ba6:	4a41      	ldr	r2, [pc, #260]	@ (8002cac <HAL_TIM_Base_MspInit+0x240>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002bac:	e0d0      	b.n	8002d50 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM4)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a40      	ldr	r2, [pc, #256]	@ (8002cb4 <HAL_TIM_Base_MspInit+0x248>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	f040 8087 	bne.w	8002cc8 <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bba:	4b38      	ldr	r3, [pc, #224]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bc0:	4a36      	ldr	r2, [pc, #216]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002bca:	4b34      	ldr	r3, [pc, #208]	@ (8002c9c <HAL_TIM_Base_MspInit+0x230>)
 8002bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Stream4;
 8002bd8:	4b37      	ldr	r3, [pc, #220]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002bda:	4a38      	ldr	r2, [pc, #224]	@ (8002cbc <HAL_TIM_Base_MspInit+0x250>)
 8002bdc:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8002bde:	4b36      	ldr	r3, [pc, #216]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002be0:	221d      	movs	r2, #29
 8002be2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002be4:	4b34      	ldr	r3, [pc, #208]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002be6:	2240      	movs	r2, #64	@ 0x40
 8002be8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bea:	4b33      	ldr	r3, [pc, #204]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002bf0:	4b31      	ldr	r3, [pc, #196]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bf6:	4b30      	ldr	r3, [pc, #192]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002bf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bfc:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002c00:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c04:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002c06:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002c08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c0c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002c10:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c14:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c16:	4b28      	ldr	r3, [pc, #160]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002c1c:	4826      	ldr	r0, [pc, #152]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002c1e:	f017 ff99 	bl	801ab54 <HAL_DMA_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_TIM_Base_MspInit+0x1c0>
      Error_Handler();
 8002c28:	f7ff fbee 	bl	8002408 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a22      	ldr	r2, [pc, #136]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c32:	4a21      	ldr	r2, [pc, #132]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x24c>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_up.Instance = DMA1_Stream5;
 8002c38:	4b21      	ldr	r3, [pc, #132]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c3a:	4a22      	ldr	r2, [pc, #136]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x258>)
 8002c3c:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8002c3e:	4b20      	ldr	r3, [pc, #128]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c40:	2220      	movs	r2, #32
 8002c42:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c44:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c5c:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c5e:	4b18      	ldr	r3, [pc, #96]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c64:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8002c66:	4b16      	ldr	r3, [pc, #88]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c6c:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002c6e:	4b14      	ldr	r3, [pc, #80]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c74:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002c7a:	4811      	ldr	r0, [pc, #68]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c7c:	f017 ff6a 	bl	801ab54 <HAL_DMA_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_TIM_Base_MspInit+0x21e>
      Error_Handler();
 8002c86:	f7ff fbbf 	bl	8002408 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c8e:	621a      	str	r2, [r3, #32]
 8002c90:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x254>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002c96:	e05b      	b.n	8002d50 <HAL_TIM_Base_MspInit+0x2e4>
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	20000574 	.word	0x20000574
 8002ca4:	40020040 	.word	0x40020040
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	200005ec 	.word	0x200005ec
 8002cb0:	40020058 	.word	0x40020058
 8002cb4:	40000800 	.word	0x40000800
 8002cb8:	20000664 	.word	0x20000664
 8002cbc:	40020070 	.word	0x40020070
 8002cc0:	200006dc 	.word	0x200006dc
 8002cc4:	40020088 	.word	0x40020088
  else if(htim_base->Instance==TIM5)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a22      	ldr	r2, [pc, #136]	@ (8002d58 <HAL_TIM_Base_MspInit+0x2ec>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d13e      	bne.n	8002d50 <HAL_TIM_Base_MspInit+0x2e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cd2:	4b22      	ldr	r3, [pc, #136]	@ (8002d5c <HAL_TIM_Base_MspInit+0x2f0>)
 8002cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cd8:	4a20      	ldr	r2, [pc, #128]	@ (8002d5c <HAL_TIM_Base_MspInit+0x2f0>)
 8002cda:	f043 0308 	orr.w	r3, r3, #8
 8002cde:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d5c <HAL_TIM_Base_MspInit+0x2f0>)
 8002ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_up.Instance = DMA1_Stream6;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d64 <HAL_TIM_Base_MspInit+0x2f8>)
 8002cf4:	601a      	str	r2, [r3, #0]
    hdma_tim5_up.Init.Request = DMA_REQUEST_TIM5_UP;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002cf8:	223b      	movs	r2, #59	@ 0x3b
 8002cfa:	605a      	str	r2, [r3, #4]
    hdma_tim5_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002cfe:	2240      	movs	r2, #64	@ 0x40
 8002d00:	609a      	str	r2, [r3, #8]
    hdma_tim5_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d02:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	60da      	str	r2, [r3, #12]
    hdma_tim5_up.Init.MemInc = DMA_MINC_ENABLE;
 8002d08:	4b15      	ldr	r3, [pc, #84]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0e:	611a      	str	r2, [r3, #16]
    hdma_tim5_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d10:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002d12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d16:	615a      	str	r2, [r3, #20]
    hdma_tim5_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002d1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d1e:	619a      	str	r2, [r3, #24]
    hdma_tim5_up.Init.Mode = DMA_CIRCULAR;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002d22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d26:	61da      	str	r2, [r3, #28]
    hdma_tim5_up.Init.Priority = DMA_PRIORITY_LOW;
 8002d28:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	621a      	str	r2, [r3, #32]
    hdma_tim5_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_up) != HAL_OK)
 8002d34:	480a      	ldr	r0, [pc, #40]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002d36:	f017 ff0d 	bl	801ab54 <HAL_DMA_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_TIM_Base_MspInit+0x2d8>
      Error_Handler();
 8002d40:	f7ff fb62 	bl	8002408 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_up);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a06      	ldr	r2, [pc, #24]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002d48:	621a      	str	r2, [r3, #32]
 8002d4a:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <HAL_TIM_Base_MspInit+0x2f4>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002d50:	bf00      	nop
 8002d52:	3720      	adds	r7, #32
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40000c00 	.word	0x40000c00
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	20000754 	.word	0x20000754
 8002d64:	400200a0 	.word	0x400200a0

08002d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a12      	ldr	r2, [pc, #72]	@ (8002dd0 <HAL_TIM_MspPostInit+0x68>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d11e      	bne.n	8002dc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8a:	4b12      	ldr	r3, [pc, #72]	@ (8002dd4 <HAL_TIM_MspPostInit+0x6c>)
 8002d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d90:	4a10      	ldr	r2, [pc, #64]	@ (8002dd4 <HAL_TIM_MspPostInit+0x6c>)
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd4 <HAL_TIM_MspPostInit+0x6c>)
 8002d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002da8:	23c0      	movs	r3, #192	@ 0xc0
 8002daa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002db8:	2302      	movs	r3, #2
 8002dba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbc:	f107 030c 	add.w	r3, r7, #12
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4805      	ldr	r0, [pc, #20]	@ (8002dd8 <HAL_TIM_MspPostInit+0x70>)
 8002dc4:	f019 fdce 	bl	801c964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002dc8:	bf00      	nop
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40000800 	.word	0x40000800
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	58020400 	.word	0x58020400

08002ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b0ba      	sub	sp, #232	@ 0xe8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002df4:	f107 0310 	add.w	r3, r7, #16
 8002df8:	22c0      	movs	r2, #192	@ 0xc0
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f020 f80a 	bl	8022e16 <memset>
  if(huart->Instance==USART3)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a27      	ldr	r2, [pc, #156]	@ (8002ea4 <HAL_UART_MspInit+0xc8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d146      	bne.n	8002e9a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e0c:	f04f 0202 	mov.w	r2, #2
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	4618      	mov	r0, r3
 8002e24:	f01b f8bc 	bl	801dfa0 <HAL_RCCEx_PeriphCLKConfig>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002e2e:	f7ff faeb 	bl	8002408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <HAL_UART_MspInit+0xcc>)
 8002e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e38:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea8 <HAL_UART_MspInit+0xcc>)
 8002e3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e42:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <HAL_UART_MspInit+0xcc>)
 8002e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e50:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <HAL_UART_MspInit+0xcc>)
 8002e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e56:	4a14      	ldr	r2, [pc, #80]	@ (8002ea8 <HAL_UART_MspInit+0xcc>)
 8002e58:	f043 0308 	orr.w	r3, r3, #8
 8002e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_UART_MspInit+0xcc>)
 8002e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e88:	2307      	movs	r3, #7
 8002e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4805      	ldr	r0, [pc, #20]	@ (8002eac <HAL_UART_MspInit+0xd0>)
 8002e96:	f019 fd65 	bl	801c964 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002e9a:	bf00      	nop
 8002e9c:	37e8      	adds	r7, #232	@ 0xe8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40004800 	.word	0x40004800
 8002ea8:	58024400 	.word	0x58024400
 8002eac:	58020c00 	.word	0x58020c00

08002eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <NMI_Handler+0x4>

08002eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <MemManage_Handler+0x4>

08002ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <BusFault_Handler+0x4>

08002ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <UsageFault_Handler+0x4>

08002ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee2:	f017 fc4b 	bl	801a77c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002ee6:	f002 fc09 	bl	80056fc <xTaskGetSchedulerState>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d101      	bne.n	8002ef4 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8002ef0:	f003 fcea 	bl	80068c8 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef4:	bf00      	nop
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 8002f02:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <DMA1_Stream0_IRQHandler+0x70>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00c      	beq.n	8002f28 <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 8002f0e:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <DMA1_Stream0_IRQHandler+0x74>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e001      	b.n	8002f28 <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 8002f24:	2301      	movs	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002f28:	4811      	ldr	r0, [pc, #68]	@ (8002f70 <DMA1_Stream0_IRQHandler+0x78>)
 8002f2a:	f018 fbb5 	bl	801b698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 8002f32:	4b10      	ldr	r3, [pc, #64]	@ (8002f74 <DMA1_Stream0_IRQHandler+0x7c>)
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	1d3b      	adds	r3, r7, #4
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	2100      	movs	r1, #0
 8002f44:	f003 f832 	bl	8005fac <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <DMA1_Stream0_IRQHandler+0x66>
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <DMA1_Stream0_IRQHandler+0x80>)
 8002f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020010 	.word	0x40020010
 8002f70:	20000290 	.word	0x20000290
 8002f74:	20000d34 	.word	0x20000d34
 8002f78:	e000ed04 	.word	0xe000ed04

08002f7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF1_5){
 8002f86:	4b19      	ldr	r3, [pc, #100]	@ (8002fec <DMA1_Stream1_IRQHandler+0x70>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <DMA1_Stream1_IRQHandler+0x30>
      uint32_t status = DMA1_Stream1->CR;
 8002f92:	4b17      	ldr	r3, [pc, #92]	@ (8002ff0 <DMA1_Stream1_IRQHandler+0x74>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60bb      	str	r3, [r7, #8]
	if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <DMA1_Stream1_IRQHandler+0x2c>
	ulCurrBuf = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e001      	b.n	8002fac <DMA1_Stream1_IRQHandler+0x30>
	} else {
	ulCurrBuf = 1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
	}

    }
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002fac:	4811      	ldr	r0, [pc, #68]	@ (8002ff4 <DMA1_Stream1_IRQHandler+0x78>)
 8002fae:	f018 fb73 	bl	801b698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
       xTaskNotifyFromISR() unblocks the handling task, and the priority of
       the handling task is higher than the priority of the currently running task,
       then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
    xHigherPriorityTaskWoken = pdFALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
    /* Unblock the handling task so the task can perform any processing necessitated
       by the interrupt. xHandlingTask is the task's handle, which was obtained
       when the task was created. The handling task's 0th notification value
       is bitwise ORed with the interrupt status - ensuring bits that are already
       set are not overwritten. */
    xTaskNotifyFromISR( vAuxADCTCPTaskHandle,
 8002fb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ff8 <DMA1_Stream1_IRQHandler+0x7c>)
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	1d3b      	adds	r3, r7, #4
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	f002 fff0 	bl	8005fac <xTaskGenericNotifyFromISR>
  			     &xHigherPriorityTaskWoken );

    /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
       The macro used to do this is dependent on the port and may be called
       portEND_SWITCHING_ISR. */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <DMA1_Stream1_IRQHandler+0x66>
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <DMA1_Stream1_IRQHandler+0x80>)
 8002fd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40020000 	.word	0x40020000
 8002ff0:	40020028 	.word	0x40020028
 8002ff4:	20000308 	.word	0x20000308
 8002ff8:	20000d38 	.word	0x20000d38
 8002ffc:	e000ed04 	.word	0xe000ed04

08003000 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003004:	4802      	ldr	r0, [pc, #8]	@ (8003010 <DMA1_Stream2_IRQHandler+0x10>)
 8003006:	f018 fb47 	bl	801b698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000574 	.word	0x20000574

08003014 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8003018:	4802      	ldr	r0, [pc, #8]	@ (8003024 <DMA1_Stream3_IRQHandler+0x10>)
 800301a:	f018 fb3d 	bl	801b698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200005ec 	.word	0x200005ec

08003028 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 800302c:	4802      	ldr	r0, [pc, #8]	@ (8003038 <DMA1_Stream4_IRQHandler+0x10>)
 800302e:	f018 fb33 	bl	801b698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000664 	.word	0x20000664

0800303c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8003040:	4802      	ldr	r0, [pc, #8]	@ (800304c <DMA1_Stream5_IRQHandler+0x10>)
 8003042:	f018 fb29 	bl	801b698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200006dc 	.word	0x200006dc

08003050 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_up);
 8003054:	4802      	ldr	r0, [pc, #8]	@ (8003060 <DMA1_Stream6_IRQHandler+0x10>)
 8003056:	f018 fb1f 	bl	801b698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000754 	.word	0x20000754

08003064 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003068:	4802      	ldr	r0, [pc, #8]	@ (8003074 <SPI1_IRQHandler+0x10>)
 800306a:	f01c fee9 	bl	801fe40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200000f8 	.word	0x200000f8

08003078 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800307c:	4802      	ldr	r0, [pc, #8]	@ (8003088 <SPI2_IRQHandler+0x10>)
 800307e:	f01c fedf 	bl	801fe40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000180 	.word	0x20000180

0800308c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->HISR & DMA_FLAG_TCIF3_7){
 8003096:	4b19      	ldr	r3, [pc, #100]	@ (80030fc <DMA1_Stream7_IRQHandler+0x70>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <DMA1_Stream7_IRQHandler+0x30>
      uint32_t status = DMA1_Stream7->CR;
 80030a2:	4b17      	ldr	r3, [pc, #92]	@ (8003100 <DMA1_Stream7_IRQHandler+0x74>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60bb      	str	r3, [r7, #8]
      if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <DMA1_Stream7_IRQHandler+0x2c>
      ulCurrBuf = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e001      	b.n	80030bc <DMA1_Stream7_IRQHandler+0x30>
      } else {
      ulCurrBuf = 1;
 80030b8:	2301      	movs	r3, #1
 80030ba:	60fb      	str	r3, [r7, #12]
      }

    }
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80030bc:	4811      	ldr	r0, [pc, #68]	@ (8003104 <DMA1_Stream7_IRQHandler+0x78>)
 80030be:	f018 faeb 	bl	801b698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vTCADCTCPTaskHandle,
 80030c6:	4b10      	ldr	r3, [pc, #64]	@ (8003108 <DMA1_Stream7_IRQHandler+0x7c>)
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	2300      	movs	r3, #0
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2301      	movs	r3, #1
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	2100      	movs	r1, #0
 80030d8:	f002 ff68 	bl	8005fac <xTaskGenericNotifyFromISR>
			 &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <DMA1_Stream7_IRQHandler+0x66>
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <DMA1_Stream7_IRQHandler+0x80>)
 80030e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40020000 	.word	0x40020000
 8003100:	400200b8 	.word	0x400200b8
 8003104:	20000380 	.word	0x20000380
 8003108:	20000d3c 	.word	0x20000d3c
 800310c:	e000ed04 	.word	0xe000ed04

08003110 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003114:	4802      	ldr	r0, [pc, #8]	@ (8003120 <SPI3_IRQHandler+0x10>)
 8003116:	f01c fe93 	bl	801fe40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000208 	.word	0x20000208

08003124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return 1;
 8003128:	2301      	movs	r3, #1
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <_kill>:

int _kill(int pid, int sig)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800313e:	f020 fda3 	bl	8023c88 <__errno>
 8003142:	4603      	mov	r3, r0
 8003144:	2216      	movs	r2, #22
 8003146:	601a      	str	r2, [r3, #0]
  return -1;
 8003148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <_exit>:

void _exit (int status)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800315c:	f04f 31ff 	mov.w	r1, #4294967295
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ffe7 	bl	8003134 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003166:	bf00      	nop
 8003168:	e7fd      	b.n	8003166 <_exit+0x12>

0800316a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e00a      	b.n	8003192 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800317c:	f3af 8000 	nop.w
 8003180:	4601      	mov	r1, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	60ba      	str	r2, [r7, #8]
 8003188:	b2ca      	uxtb	r2, r1
 800318a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	3301      	adds	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	429a      	cmp	r2, r3
 8003198:	dbf0      	blt.n	800317c <_read+0x12>
  }

  return len;
 800319a:	687b      	ldr	r3, [r7, #4]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	e009      	b.n	80031ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	60ba      	str	r2, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3301      	adds	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	dbf1      	blt.n	80031b6 <_write+0x12>
  }
  return len;
 80031d2:	687b      	ldr	r3, [r7, #4]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <_close>:

int _close(int file)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003204:	605a      	str	r2, [r3, #4]
  return 0;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <_isatty>:

int _isatty(int file)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800321c:	2301      	movs	r3, #1
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <_sbrk+0x5c>)
 800324e:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <_sbrk+0x60>)
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003258:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <_sbrk+0x64>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003260:	4b11      	ldr	r3, [pc, #68]	@ (80032a8 <_sbrk+0x64>)
 8003262:	4a12      	ldr	r2, [pc, #72]	@ (80032ac <_sbrk+0x68>)
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003266:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <_sbrk+0x64>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	d207      	bcs.n	8003284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003274:	f020 fd08 	bl	8023c88 <__errno>
 8003278:	4603      	mov	r3, r0
 800327a:	220c      	movs	r2, #12
 800327c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800327e:	f04f 33ff 	mov.w	r3, #4294967295
 8003282:	e009      	b.n	8003298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003284:	4b08      	ldr	r3, [pc, #32]	@ (80032a8 <_sbrk+0x64>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800328a:	4b07      	ldr	r3, [pc, #28]	@ (80032a8 <_sbrk+0x64>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	4a05      	ldr	r2, [pc, #20]	@ (80032a8 <_sbrk+0x64>)
 8003294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003296:	68fb      	ldr	r3, [r7, #12]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	24080000 	.word	0x24080000
 80032a4:	00000400 	.word	0x00000400
 80032a8:	20000dc8 	.word	0x20000dc8
 80032ac:	20002888 	.word	0x20002888

080032b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032b6:	4b3f      	ldr	r3, [pc, #252]	@ (80033b4 <SystemInit+0x104>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032bc:	4a3d      	ldr	r2, [pc, #244]	@ (80033b4 <SystemInit+0x104>)
 80032be:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032c2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032c6:	4b3c      	ldr	r3, [pc, #240]	@ (80033b8 <SystemInit+0x108>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	2b06      	cmp	r3, #6
 80032d0:	d807      	bhi.n	80032e2 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032d2:	4b39      	ldr	r3, [pc, #228]	@ (80033b8 <SystemInit+0x108>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 030f 	bic.w	r3, r3, #15
 80032da:	4a37      	ldr	r2, [pc, #220]	@ (80033b8 <SystemInit+0x108>)
 80032dc:	f043 0307 	orr.w	r3, r3, #7
 80032e0:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80032e2:	4b36      	ldr	r3, [pc, #216]	@ (80033bc <SystemInit+0x10c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a35      	ldr	r2, [pc, #212]	@ (80033bc <SystemInit+0x10c>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80032ee:	4b33      	ldr	r3, [pc, #204]	@ (80033bc <SystemInit+0x10c>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80032f4:	4b31      	ldr	r3, [pc, #196]	@ (80033bc <SystemInit+0x10c>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4930      	ldr	r1, [pc, #192]	@ (80033bc <SystemInit+0x10c>)
 80032fa:	4b31      	ldr	r3, [pc, #196]	@ (80033c0 <SystemInit+0x110>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003300:	4b2d      	ldr	r3, [pc, #180]	@ (80033b8 <SystemInit+0x108>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800330c:	4b2a      	ldr	r3, [pc, #168]	@ (80033b8 <SystemInit+0x108>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 030f 	bic.w	r3, r3, #15
 8003314:	4a28      	ldr	r2, [pc, #160]	@ (80033b8 <SystemInit+0x108>)
 8003316:	f043 0307 	orr.w	r3, r3, #7
 800331a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800331c:	4b27      	ldr	r3, [pc, #156]	@ (80033bc <SystemInit+0x10c>)
 800331e:	2200      	movs	r2, #0
 8003320:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003322:	4b26      	ldr	r3, [pc, #152]	@ (80033bc <SystemInit+0x10c>)
 8003324:	2200      	movs	r2, #0
 8003326:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003328:	4b24      	ldr	r3, [pc, #144]	@ (80033bc <SystemInit+0x10c>)
 800332a:	2200      	movs	r2, #0
 800332c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800332e:	4b23      	ldr	r3, [pc, #140]	@ (80033bc <SystemInit+0x10c>)
 8003330:	4a24      	ldr	r2, [pc, #144]	@ (80033c4 <SystemInit+0x114>)
 8003332:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003334:	4b21      	ldr	r3, [pc, #132]	@ (80033bc <SystemInit+0x10c>)
 8003336:	4a24      	ldr	r2, [pc, #144]	@ (80033c8 <SystemInit+0x118>)
 8003338:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800333a:	4b20      	ldr	r3, [pc, #128]	@ (80033bc <SystemInit+0x10c>)
 800333c:	4a23      	ldr	r2, [pc, #140]	@ (80033cc <SystemInit+0x11c>)
 800333e:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003340:	4b1e      	ldr	r3, [pc, #120]	@ (80033bc <SystemInit+0x10c>)
 8003342:	2200      	movs	r2, #0
 8003344:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003346:	4b1d      	ldr	r3, [pc, #116]	@ (80033bc <SystemInit+0x10c>)
 8003348:	4a20      	ldr	r2, [pc, #128]	@ (80033cc <SystemInit+0x11c>)
 800334a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800334c:	4b1b      	ldr	r3, [pc, #108]	@ (80033bc <SystemInit+0x10c>)
 800334e:	2200      	movs	r2, #0
 8003350:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003352:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <SystemInit+0x10c>)
 8003354:	4a1d      	ldr	r2, [pc, #116]	@ (80033cc <SystemInit+0x11c>)
 8003356:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003358:	4b18      	ldr	r3, [pc, #96]	@ (80033bc <SystemInit+0x10c>)
 800335a:	2200      	movs	r2, #0
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800335e:	4b17      	ldr	r3, [pc, #92]	@ (80033bc <SystemInit+0x10c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a16      	ldr	r2, [pc, #88]	@ (80033bc <SystemInit+0x10c>)
 8003364:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003368:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800336a:	4b14      	ldr	r3, [pc, #80]	@ (80033bc <SystemInit+0x10c>)
 800336c:	2200      	movs	r2, #0
 800336e:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003370:	4b17      	ldr	r3, [pc, #92]	@ (80033d0 <SystemInit+0x120>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b17      	ldr	r3, [pc, #92]	@ (80033d4 <SystemInit+0x124>)
 8003376:	4013      	ands	r3, r2
 8003378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800337c:	d202      	bcs.n	8003384 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800337e:	4b16      	ldr	r3, [pc, #88]	@ (80033d8 <SystemInit+0x128>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003384:	4b0d      	ldr	r3, [pc, #52]	@ (80033bc <SystemInit+0x10c>)
 8003386:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800338a:	4a0c      	ldr	r2, [pc, #48]	@ (80033bc <SystemInit+0x10c>)
 800338c:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 8003390:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <SystemInit+0x10c>)
 8003396:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800339a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 800339c:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800339e:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <SystemInit+0x12c>)
 80033a0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80033a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	e000ed00 	.word	0xe000ed00
 80033b8:	52002000 	.word	0x52002000
 80033bc:	58024400 	.word	0x58024400
 80033c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80033c4:	02020200 	.word	0x02020200
 80033c8:	01ff0000 	.word	0x01ff0000
 80033cc:	01010280 	.word	0x01010280
 80033d0:	5c001000 	.word	0x5c001000
 80033d4:	ffff0000 	.word	0xffff0000
 80033d8:	51008108 	.word	0x51008108
 80033dc:	52004000 	.word	0x52004000

080033e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80033e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003418 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033e4:	f7ff ff64 	bl	80032b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033e8:	480c      	ldr	r0, [pc, #48]	@ (800341c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033ea:	490d      	ldr	r1, [pc, #52]	@ (8003420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033f0:	e002      	b.n	80033f8 <LoopCopyDataInit>

080033f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033f6:	3304      	adds	r3, #4

080033f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033fc:	d3f9      	bcc.n	80033f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003400:	4c0a      	ldr	r4, [pc, #40]	@ (800342c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003404:	e001      	b.n	800340a <LoopFillZerobss>

08003406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003408:	3204      	adds	r2, #4

0800340a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800340a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800340c:	d3fb      	bcc.n	8003406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800340e:	f020 fc41 	bl	8023c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003412:	f7fd f945 	bl	80006a0 <main>
  bx  lr
 8003416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003418:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800341c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003420:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003424:	08028260 	.word	0x08028260
  ldr r2, =_sbss
 8003428:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800342c:	20002888 	.word	0x20002888

08003430 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003430:	e7fe      	b.n	8003430 <ADC3_IRQHandler>

08003432 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8003438:	201c      	movs	r0, #28
 800343a:	f003 fac3 	bl	80069c4 <pvPortMalloc>
 800343e:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f9c3 	bl	80037dc <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 8003456:	687b      	ldr	r3, [r7, #4]
        }
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 8003460:	b580      	push	{r7, lr}
 8003462:	b08c      	sub	sp, #48	@ 0x30
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d104      	bne.n	800348a <xEventGroupWaitBits+0x2a>
 8003480:	f240 1147 	movw	r1, #327	@ 0x147
 8003484:	4850      	ldr	r0, [pc, #320]	@ (80035c8 <xEventGroupWaitBits+0x168>)
 8003486:	f7fe fabf 	bl	8001a08 <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003490:	d304      	bcc.n	800349c <xEventGroupWaitBits+0x3c>
 8003492:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8003496:	484c      	ldr	r0, [pc, #304]	@ (80035c8 <xEventGroupWaitBits+0x168>)
 8003498:	f7fe fab6 	bl	8001a08 <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <xEventGroupWaitBits+0x4c>
 80034a2:	f240 1149 	movw	r1, #329	@ 0x149
 80034a6:	4848      	ldr	r0, [pc, #288]	@ (80035c8 <xEventGroupWaitBits+0x168>)
 80034a8:	f7fe faae 	bl	8001a08 <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ac:	f002 f926 	bl	80056fc <xTaskGetSchedulerState>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <xEventGroupWaitBits+0x5c>
 80034b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <xEventGroupWaitBits+0x60>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <xEventGroupWaitBits+0x62>
 80034c0:	2300      	movs	r3, #0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <xEventGroupWaitBits+0x70>
 80034c6:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80034ca:	483f      	ldr	r0, [pc, #252]	@ (80035c8 <xEventGroupWaitBits+0x168>)
 80034cc:	f7fe fa9c 	bl	8001a08 <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 80034d0:	f001 faf6 	bl	8004ac0 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	69f8      	ldr	r0, [r7, #28]
 80034e0:	f000 f95a 	bl	8003798 <prvTestWaitCondition>
 80034e4:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00e      	beq.n	800350a <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d028      	beq.n	800354c <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	43db      	mvns	r3, r3
 8003502:	401a      	ands	r2, r3
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e020      	b.n	800354c <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 800350a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 8003514:	2301      	movs	r3, #1
 8003516:	623b      	str	r3, [r7, #32]
 8003518:	e018      	b.n	800354c <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800352e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003530:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	1d18      	adds	r0, r3, #4
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353e:	4313      	orrs	r3, r2
 8003540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003542:	4619      	mov	r1, r3
 8003544:	f001 fda4 	bl	8005090 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800354c:	f001 fac6 	bl	8004adc <xTaskResumeAll>
 8003550:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 8003552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003554:	2b00      	cmp	r3, #0
 8003556:	d031      	beq.n	80035bc <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d107      	bne.n	800356e <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 800355e:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <xEventGroupWaitBits+0x16c>)
 8003560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 800356e:	f002 facf 	bl	8005b10 <uxTaskResetEventItemValue>
 8003572:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d11a      	bne.n	80035b4 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 800357e:	f003 f91f 	bl	80067c0 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800358e:	f000 f903 	bl	8003798 <prvTestWaitCondition>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800359e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	401a      	ands	r2, r3
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 80035b0:	f003 f932 	bl	8006818 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80035b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 80035bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80035be:	4618      	mov	r0, r3
 80035c0:	3730      	adds	r7, #48	@ 0x30
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	08024ab0 	.word	0x08024ab0
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d104      	bne.n	80035ee <xEventGroupClearBits+0x1e>
 80035e4:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 80035e8:	480f      	ldr	r0, [pc, #60]	@ (8003628 <xEventGroupClearBits+0x58>)
 80035ea:	f7fe fa0d 	bl	8001a08 <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f4:	d304      	bcc.n	8003600 <xEventGroupClearBits+0x30>
 80035f6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80035fa:	480b      	ldr	r0, [pc, #44]	@ (8003628 <xEventGroupClearBits+0x58>)
 80035fc:	f7fe fa04 	bl	8001a08 <vAssertCalled>

        taskENTER_CRITICAL();
 8003600:	f003 f8de 	bl	80067c0 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	43db      	mvns	r3, r3
 8003612:	401a      	ands	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003618:	f003 f8fe 	bl	8006818 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 800361c:	68bb      	ldr	r3, [r7, #8]
    }
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	08024ab0 	.word	0x08024ab0

0800362c <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 800362c:	b580      	push	{r7, lr}
 800362e:	b08c      	sub	sp, #48	@ 0x30
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003636:	2300      	movs	r3, #0
 8003638:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 800363e:	2300      	movs	r3, #0
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d104      	bne.n	8003652 <xEventGroupSetBits+0x26>
 8003648:	f240 2132 	movw	r1, #562	@ 0x232
 800364c:	4836      	ldr	r0, [pc, #216]	@ (8003728 <xEventGroupSetBits+0xfc>)
 800364e:	f7fe f9db 	bl	8001a08 <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003658:	d304      	bcc.n	8003664 <xEventGroupSetBits+0x38>
 800365a:	f240 2133 	movw	r1, #563	@ 0x233
 800365e:	4832      	ldr	r0, [pc, #200]	@ (8003728 <xEventGroupSetBits+0xfc>)
 8003660:	f7fe f9d2 	bl	8001a08 <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	3304      	adds	r3, #4
 8003668:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3308      	adds	r3, #8
 800366e:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 8003670:	f001 fa26 	bl	8004ac0 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	431a      	orrs	r2, r3
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8003686:	e03c      	b.n	8003702 <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 8003688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800369e:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036a6:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d108      	bne.n	80036c4 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 80036be:	2301      	movs	r3, #1
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c2:	e008      	b.n	80036d6 <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d101      	bne.n	80036d6 <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 80036d2:	2301      	movs	r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 80036e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036f6:	4619      	mov	r1, r3
 80036f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036fa:	f001 fde7 	bl	80052cc <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 8003702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	429a      	cmp	r2, r3
 8003708:	d1be      	bne.n	8003688 <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003710:	43db      	mvns	r3, r3
 8003712:	401a      	ands	r2, r3
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 8003718:	f001 f9e0 	bl	8004adc <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	681b      	ldr	r3, [r3, #0]
    }
 8003720:	4618      	mov	r0, r3
 8003722:	3730      	adds	r7, #48	@ 0x30
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	08024ab0 	.word	0x08024ab0

0800372c <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <vEventGroupDelete+0x1c>
 800373e:	f240 218e 	movw	r1, #654	@ 0x28e
 8003742:	4814      	ldr	r0, [pc, #80]	@ (8003794 <vEventGroupDelete+0x68>)
 8003744:	f7fe f960 	bl	8001a08 <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3304      	adds	r3, #4
 800374c:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 800374e:	f001 f9b7 	bl	8004ac0 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8003752:	e011      	b.n	8003778 <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	3308      	adds	r3, #8
 800375c:	429a      	cmp	r2, r3
 800375e:	d104      	bne.n	800376a <vEventGroupDelete+0x3e>
 8003760:	f240 219a 	movw	r1, #666	@ 0x29a
 8003764:	480b      	ldr	r0, [pc, #44]	@ (8003794 <vEventGroupDelete+0x68>)
 8003766:	f7fe f94f 	bl	8001a08 <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003772:	4618      	mov	r0, r3
 8003774:	f001 fdaa 	bl	80052cc <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e9      	bne.n	8003754 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 8003780:	f001 f9ac 	bl	8004adc <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f003 f9f1 	bl	8006b6c <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	08024ab0 	.word	0x08024ab0

08003798 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 80037b8:	2301      	movs	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e007      	b.n	80037ce <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4013      	ands	r3, r2
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d101      	bne.n	80037ce <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 80037ce:	697b      	ldr	r3, [r7, #20]
    }
 80037d0:	4618      	mov	r0, r3
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f103 0208 	add.w	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f04f 32ff 	mov.w	r2, #4294967295
 80037f4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f103 0208 	add.w	r2, r3, #8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f103 0208 	add.w	r2, r3, #8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800387e:	b480      	push	{r7}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d103      	bne.n	800389e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e00c      	b.n	80038b8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3308      	adds	r3, #8
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e002      	b.n	80038ac <vListInsert+0x2e>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d2f6      	bcs.n	80038a6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6852      	ldr	r2, [r2, #4]
 8003910:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	d103      	bne.n	8003924 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1e5a      	subs	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800394e:	2301      	movs	r3, #1
 8003950:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <xQueueGenericReset+0x22>
 800395c:	f240 1137 	movw	r1, #311	@ 0x137
 8003960:	4839      	ldr	r0, [pc, #228]	@ (8003a48 <xQueueGenericReset+0x104>)
 8003962:	f7fe f851 	bl	8001a08 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d05d      	beq.n	8003a28 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003970:	2b00      	cmp	r3, #0
 8003972:	d059      	beq.n	8003a28 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397c:	2100      	movs	r1, #0
 800397e:	fba3 2302 	umull	r2, r3, r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d000      	beq.n	8003988 <xQueueGenericReset+0x44>
 8003986:	2101      	movs	r1, #1
 8003988:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800398a:	2b00      	cmp	r3, #0
 800398c:	d14c      	bne.n	8003a28 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 800398e:	f002 ff17 	bl	80067c0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800399e:	fb01 f303 	mul.w	r3, r1, r3
 80039a2:	441a      	add	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2200      	movs	r2, #0
 80039ac:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039be:	3b01      	subs	r3, #1
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	441a      	add	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	22ff      	movs	r2, #255	@ 0xff
 80039d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	22ff      	movs	r2, #255	@ 0xff
 80039da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d114      	bne.n	8003a0e <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01a      	beq.n	8003a22 <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	3310      	adds	r3, #16
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fb99 	bl	8005128 <xTaskRemoveFromEventList>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d012      	beq.n	8003a22 <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80039fc:	4b13      	ldr	r3, [pc, #76]	@ (8003a4c <xQueueGenericReset+0x108>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	e009      	b.n	8003a22 <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	3310      	adds	r3, #16
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fee2 	bl	80037dc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	3324      	adds	r3, #36	@ 0x24
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fedd 	bl	80037dc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003a22:	f002 fef9 	bl	8006818 <vPortExitCritical>
 8003a26:	e001      	b.n	8003a2c <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <xQueueGenericReset+0xf8>
 8003a32:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8003a36:	4804      	ldr	r0, [pc, #16]	@ (8003a48 <xQueueGenericReset+0x104>)
 8003a38:	f7fd ffe6 	bl	8001a08 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	08024adc 	.word	0x08024adc
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	@ 0x28
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02e      	beq.n	8003ac6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003a68:	2100      	movs	r1, #0
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d000      	beq.n	8003a78 <xQueueGenericCreate+0x28>
 8003a76:	2101      	movs	r1, #1
 8003a78:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d123      	bne.n	8003ac6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003a86:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003a8a:	d81c      	bhi.n	8003ac6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	fb02 f303 	mul.w	r3, r2, r3
 8003a94:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3350      	adds	r3, #80	@ 0x50
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f002 ff92 	bl	80069c4 <pvPortMalloc>
 8003aa0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d016      	beq.n	8003ad6 <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	3350      	adds	r3, #80	@ 0x50
 8003ab0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ab2:	79fa      	ldrb	r2, [r7, #7]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f810 	bl	8003ae4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003ac4:	e007      	b.n	8003ad6 <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <xQueueGenericCreate+0x86>
 8003acc:	f240 212a 	movw	r1, #554	@ 0x22a
 8003ad0:	4803      	ldr	r0, [pc, #12]	@ (8003ae0 <xQueueGenericCreate+0x90>)
 8003ad2:	f7fd ff99 	bl	8001a08 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
    }
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	08024adc 	.word	0x08024adc

08003ae4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d103      	bne.n	8003b00 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e002      	b.n	8003b06 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b12:	2101      	movs	r1, #1
 8003b14:	69b8      	ldr	r0, [r7, #24]
 8003b16:	f7ff ff15 	bl	8003944 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00e      	beq.n	8003b56 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2100      	movs	r1, #0
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f847 	bl	8003be4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	461a      	mov	r2, r3
 8003b74:	6939      	ldr	r1, [r7, #16]
 8003b76:	6978      	ldr	r0, [r7, #20]
 8003b78:	f7ff ff6a 	bl	8003a50 <xQueueGenericCreate>
 8003b7c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7ff ffd3 	bl	8003b2a <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8003b84:	68fb      	ldr	r3, [r7, #12]
    }
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d010      	beq.n	8003bc6 <xQueueCreateCountingSemaphore+0x36>
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d80c      	bhi.n	8003bc6 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003bac:	2202      	movs	r2, #2
 8003bae:	2100      	movs	r1, #0
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ff4d 	bl	8003a50 <xQueueGenericCreate>
 8003bb6:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8003bc4:	e007      	b.n	8003bd6 <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <xQueueCreateCountingSemaphore+0x46>
 8003bcc:	f240 319f 	movw	r1, #927	@ 0x39f
 8003bd0:	4803      	ldr	r0, [pc, #12]	@ (8003be0 <xQueueCreateCountingSemaphore+0x50>)
 8003bd2:	f7fd ff19 	bl	8001a08 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
    }
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	08024adc 	.word	0x08024adc

08003be4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	@ 0x28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <xQueueGenericSend+0x26>
 8003c00:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8003c04:	4869      	ldr	r0, [pc, #420]	@ (8003dac <xQueueGenericSend+0x1c8>)
 8003c06:	f7fd feff 	bl	8001a08 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d103      	bne.n	8003c18 <xQueueGenericSend+0x34>
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <xQueueGenericSend+0x38>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <xQueueGenericSend+0x3a>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d104      	bne.n	8003c2c <xQueueGenericSend+0x48>
 8003c22:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8003c26:	4861      	ldr	r0, [pc, #388]	@ (8003dac <xQueueGenericSend+0x1c8>)
 8003c28:	f7fd feee 	bl	8001a08 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d103      	bne.n	8003c3a <xQueueGenericSend+0x56>
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <xQueueGenericSend+0x5a>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <xQueueGenericSend+0x5c>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <xQueueGenericSend+0x6a>
 8003c44:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8003c48:	4858      	ldr	r0, [pc, #352]	@ (8003dac <xQueueGenericSend+0x1c8>)
 8003c4a:	f7fd fedd 	bl	8001a08 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c4e:	f001 fd55 	bl	80056fc <xTaskGetSchedulerState>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <xQueueGenericSend+0x7a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <xQueueGenericSend+0x7e>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <xQueueGenericSend+0x80>
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <xQueueGenericSend+0x8e>
 8003c68:	f240 31bb 	movw	r1, #955	@ 0x3bb
 8003c6c:	484f      	ldr	r0, [pc, #316]	@ (8003dac <xQueueGenericSend+0x1c8>)
 8003c6e:	f7fd fecb 	bl	8001a08 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c72:	f002 fda5 	bl	80067c0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <xQueueGenericSend+0xa4>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d129      	bne.n	8003cdc <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	6a38      	ldr	r0, [r7, #32]
 8003c8e:	f000 fabb 	bl	8004208 <prvCopyDataToQueue>
 8003c92:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d010      	beq.n	8003cbe <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	3324      	adds	r3, #36	@ 0x24
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 fa41 	bl	8005128 <xTaskRemoveFromEventList>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003cac:	4b40      	ldr	r3, [pc, #256]	@ (8003db0 <xQueueGenericSend+0x1cc>)
 8003cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	e00a      	b.n	8003cd4 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d007      	beq.n	8003cd4 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003cc4:	4b3a      	ldr	r3, [pc, #232]	@ (8003db0 <xQueueGenericSend+0x1cc>)
 8003cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003cd4:	f002 fda0 	bl	8006818 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e063      	b.n	8003da4 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003ce2:	f002 fd99 	bl	8006818 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e05c      	b.n	8003da4 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f001 fbc1 	bl	800547c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003cfe:	f002 fd8b 	bl	8006818 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d02:	f000 fedd 	bl	8004ac0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d06:	f002 fd5b 	bl	80067c0 <vPortEnterCritical>
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d10:	b25b      	sxtb	r3, r3
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d103      	bne.n	8003d20 <xQueueGenericSend+0x13c>
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d26:	b25b      	sxtb	r3, r3
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d103      	bne.n	8003d36 <xQueueGenericSend+0x152>
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d36:	f002 fd6f 	bl	8006818 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d3a:	1d3a      	adds	r2, r7, #4
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 fbb0 	bl	80054a8 <xTaskCheckForTimeOut>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d124      	bne.n	8003d98 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d4e:	6a38      	ldr	r0, [r7, #32]
 8003d50:	f000 fb52 	bl	80043f8 <prvIsQueueFull>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d018      	beq.n	8003d8c <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	3310      	adds	r3, #16
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 f974 	bl	8005050 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003d68:	6a38      	ldr	r0, [r7, #32]
 8003d6a:	f000 fadd 	bl	8004328 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003d6e:	f000 feb5 	bl	8004adc <xTaskResumeAll>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f47f af7c 	bne.w	8003c72 <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <xQueueGenericSend+0x1cc>)
 8003d7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	e772      	b.n	8003c72 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003d8c:	6a38      	ldr	r0, [r7, #32]
 8003d8e:	f000 facb 	bl	8004328 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d92:	f000 fea3 	bl	8004adc <xTaskResumeAll>
 8003d96:	e76c      	b.n	8003c72 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003d98:	6a38      	ldr	r0, [r7, #32]
 8003d9a:	f000 fac5 	bl	8004328 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d9e:	f000 fe9d 	bl	8004adc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8003da2:	2300      	movs	r3, #0
        }
    }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3728      	adds	r7, #40	@ 0x28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	08024adc 	.word	0x08024adc
 8003db0:	e000ed04 	.word	0xe000ed04

08003db4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08a      	sub	sp, #40	@ 0x28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <xQueueReceive+0x24>
 8003dce:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8003dd2:	485e      	ldr	r0, [pc, #376]	@ (8003f4c <xQueueReceive+0x198>)
 8003dd4:	f7fd fe18 	bl	8001a08 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <xQueueReceive+0x32>
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <xQueueReceive+0x36>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <xQueueReceive+0x38>
 8003dea:	2300      	movs	r3, #0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d104      	bne.n	8003dfa <xQueueReceive+0x46>
 8003df0:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8003df4:	4855      	ldr	r0, [pc, #340]	@ (8003f4c <xQueueReceive+0x198>)
 8003df6:	f7fd fe07 	bl	8001a08 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dfa:	f001 fc7f 	bl	80056fc <xTaskGetSchedulerState>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <xQueueReceive+0x56>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <xQueueReceive+0x5a>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <xQueueReceive+0x5c>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <xQueueReceive+0x6a>
 8003e14:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8003e18:	484c      	ldr	r0, [pc, #304]	@ (8003f4c <xQueueReceive+0x198>)
 8003e1a:	f7fd fdf5 	bl	8001a08 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003e1e:	f002 fccf 	bl	80067c0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01f      	beq.n	8003e6e <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	6a38      	ldr	r0, [r7, #32]
 8003e32:	f000 fa53 	bl	80042dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	1e5a      	subs	r2, r3, #1
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00f      	beq.n	8003e66 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	3310      	adds	r3, #16
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 f96c 	bl	8005128 <xTaskRemoveFromEventList>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e56:	4b3e      	ldr	r3, [pc, #248]	@ (8003f50 <xQueueReceive+0x19c>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003e66:	f002 fcd7 	bl	8006818 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e069      	b.n	8003f42 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003e74:	f002 fcd0 	bl	8006818 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e062      	b.n	8003f42 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 faf8 	bl	800547c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003e90:	f002 fcc2 	bl	8006818 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e94:	f000 fe14 	bl	8004ac0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e98:	f002 fc92 	bl	80067c0 <vPortEnterCritical>
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ea2:	b25b      	sxtb	r3, r3
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d103      	bne.n	8003eb2 <xQueueReceive+0xfe>
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003eb8:	b25b      	sxtb	r3, r3
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d103      	bne.n	8003ec8 <xQueueReceive+0x114>
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ec8:	f002 fca6 	bl	8006818 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ecc:	1d3a      	adds	r2, r7, #4
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 fae7 	bl	80054a8 <xTaskCheckForTimeOut>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d123      	bne.n	8003f28 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ee0:	6a38      	ldr	r0, [r7, #32]
 8003ee2:	f000 fa73 	bl	80043cc <prvIsQueueEmpty>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d017      	beq.n	8003f1c <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	3324      	adds	r3, #36	@ 0x24
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 f8ab 	bl	8005050 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003efa:	6a38      	ldr	r0, [r7, #32]
 8003efc:	f000 fa14 	bl	8004328 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003f00:	f000 fdec 	bl	8004adc <xTaskResumeAll>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d189      	bne.n	8003e1e <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 8003f0a:	4b11      	ldr	r3, [pc, #68]	@ (8003f50 <xQueueReceive+0x19c>)
 8003f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	e780      	b.n	8003e1e <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003f1c:	6a38      	ldr	r0, [r7, #32]
 8003f1e:	f000 fa03 	bl	8004328 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003f22:	f000 fddb 	bl	8004adc <xTaskResumeAll>
 8003f26:	e77a      	b.n	8003e1e <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003f28:	6a38      	ldr	r0, [r7, #32]
 8003f2a:	f000 f9fd 	bl	8004328 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003f2e:	f000 fdd5 	bl	8004adc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f32:	6a38      	ldr	r0, [r7, #32]
 8003f34:	f000 fa4a 	bl	80043cc <prvIsQueueEmpty>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f43f af6f 	beq.w	8003e1e <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003f40:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3728      	adds	r7, #40	@ 0x28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	08024adc 	.word	0x08024adc
 8003f50:	e000ed04 	.word	0xe000ed04

08003f54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08a      	sub	sp, #40	@ 0x28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d104      	bne.n	8003f7a <xQueueSemaphoreTake+0x26>
 8003f70:	f240 6182 	movw	r1, #1666	@ 0x682
 8003f74:	486c      	ldr	r0, [pc, #432]	@ (8004128 <xQueueSemaphoreTake+0x1d4>)
 8003f76:	f7fd fd47 	bl	8001a08 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <xQueueSemaphoreTake+0x38>
 8003f82:	f240 6186 	movw	r1, #1670	@ 0x686
 8003f86:	4868      	ldr	r0, [pc, #416]	@ (8004128 <xQueueSemaphoreTake+0x1d4>)
 8003f88:	f7fd fd3e 	bl	8001a08 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f8c:	f001 fbb6 	bl	80056fc <xTaskGetSchedulerState>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <xQueueSemaphoreTake+0x48>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <xQueueSemaphoreTake+0x4c>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <xQueueSemaphoreTake+0x4e>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <xQueueSemaphoreTake+0x5c>
 8003fa6:	f240 618b 	movw	r1, #1675	@ 0x68b
 8003faa:	485f      	ldr	r0, [pc, #380]	@ (8004128 <xQueueSemaphoreTake+0x1d4>)
 8003fac:	f7fd fd2c 	bl	8001a08 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003fb0:	f002 fc06 	bl	80067c0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb8:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d024      	beq.n	800400a <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d104      	bne.n	8003fda <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003fd0:	f001 fdb6 	bl	8005b40 <pvTaskIncrementMutexHeldCount>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00f      	beq.n	8004002 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3310      	adds	r3, #16
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 f89e 	bl	8005128 <xTaskRemoveFromEventList>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003ff2:	4b4e      	ldr	r3, [pc, #312]	@ (800412c <xQueueSemaphoreTake+0x1d8>)
 8003ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004002:	f002 fc09 	bl	8006818 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8004006:	2301      	movs	r3, #1
 8004008:	e089      	b.n	800411e <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8004010:	f002 fc02 	bl	8006818 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8004014:	2300      	movs	r3, #0
 8004016:	e082      	b.n	800411e <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800401e:	f107 030c 	add.w	r3, r7, #12
 8004022:	4618      	mov	r0, r3
 8004024:	f001 fa2a 	bl	800547c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004028:	2301      	movs	r3, #1
 800402a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800402c:	f002 fbf4 	bl	8006818 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004030:	f000 fd46 	bl	8004ac0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004034:	f002 fbc4 	bl	80067c0 <vPortEnterCritical>
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800403e:	b25b      	sxtb	r3, r3
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d103      	bne.n	800404e <xQueueSemaphoreTake+0xfa>
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004054:	b25b      	sxtb	r3, r3
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d103      	bne.n	8004064 <xQueueSemaphoreTake+0x110>
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004064:	f002 fbd8 	bl	8006818 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004068:	463a      	mov	r2, r7
 800406a:	f107 030c 	add.w	r3, r7, #12
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f001 fa19 	bl	80054a8 <xTaskCheckForTimeOut>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d132      	bne.n	80040e2 <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800407c:	69f8      	ldr	r0, [r7, #28]
 800407e:	f000 f9a5 	bl	80043cc <prvIsQueueEmpty>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d026      	beq.n	80040d6 <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 8004090:	f002 fb96 	bl	80067c0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4618      	mov	r0, r3
 800409a:	f001 fb4d 	bl	8005738 <xTaskPriorityInherit>
 800409e:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 80040a0:	f002 fbba 	bl	8006818 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3324      	adds	r3, #36	@ 0x24
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 ffcf 	bl	8005050 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80040b2:	69f8      	ldr	r0, [r7, #28]
 80040b4:	f000 f938 	bl	8004328 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80040b8:	f000 fd10 	bl	8004adc <xTaskResumeAll>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f47f af76 	bne.w	8003fb0 <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 80040c4:	4b19      	ldr	r3, [pc, #100]	@ (800412c <xQueueSemaphoreTake+0x1d8>)
 80040c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	e76c      	b.n	8003fb0 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80040d6:	69f8      	ldr	r0, [r7, #28]
 80040d8:	f000 f926 	bl	8004328 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80040dc:	f000 fcfe 	bl	8004adc <xTaskResumeAll>
 80040e0:	e766      	b.n	8003fb0 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80040e2:	69f8      	ldr	r0, [r7, #28]
 80040e4:	f000 f920 	bl	8004328 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80040e8:	f000 fcf8 	bl	8004adc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040ec:	69f8      	ldr	r0, [r7, #28]
 80040ee:	f000 f96d 	bl	80043cc <prvIsQueueEmpty>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f43f af5b 	beq.w	8003fb0 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 8004100:	f002 fb5e 	bl	80067c0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004104:	69f8      	ldr	r0, [r7, #28]
 8004106:	f000 f867 	bl	80041d8 <prvGetDisinheritPriorityAfterTimeout>
 800410a:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	6979      	ldr	r1, [r7, #20]
 8004112:	4618      	mov	r0, r3
 8004114:	f001 fc4c 	bl	80059b0 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8004118:	f002 fb7e 	bl	8006818 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800411c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3728      	adds	r7, #40	@ 0x28
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	08024adc 	.word	0x08024adc
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <uxQueueMessagesWaiting+0x18>
 800413e:	f640 019b 	movw	r1, #2203	@ 0x89b
 8004142:	4807      	ldr	r0, [pc, #28]	@ (8004160 <uxQueueMessagesWaiting+0x30>)
 8004144:	f7fd fc60 	bl	8001a08 <vAssertCalled>

    taskENTER_CRITICAL();
 8004148:	f002 fb3a 	bl	80067c0 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004150:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004152:	f002 fb61 	bl	8006818 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8004156:	68fb      	ldr	r3, [r7, #12]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	08024adc 	.word	0x08024adc

08004164 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <uxQueueSpacesAvailable+0x1c>
 8004176:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 800417a:	4809      	ldr	r0, [pc, #36]	@ (80041a0 <uxQueueSpacesAvailable+0x3c>)
 800417c:	f7fd fc44 	bl	8001a08 <vAssertCalled>

    taskENTER_CRITICAL();
 8004180:	f002 fb1e 	bl	80067c0 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 8004190:	f002 fb42 	bl	8006818 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8004194:	68bb      	ldr	r3, [r7, #8]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	08024adc 	.word	0x08024adc

080041a4 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <vQueueDelete+0x1c>
 80041b6:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 80041ba:	4806      	ldr	r0, [pc, #24]	@ (80041d4 <vQueueDelete+0x30>)
 80041bc:	f7fd fc24 	bl	8001a08 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f979 	bl	80044b8 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f002 fcd0 	bl	8006b6c <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	08024adc 	.word	0x08024adc

080041d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d006      	beq.n	80041f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f1c3 0307 	rsb	r3, r3, #7
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e001      	b.n	80041fa <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80041fa:	68fb      	ldr	r3, [r7, #12]
    }
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d14d      	bne.n	80042ca <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	4618      	mov	r0, r3
 8004234:	f001 fb20 	bl	8005878 <xTaskPriorityDisinherit>
 8004238:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	e043      	b.n	80042ca <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d119      	bne.n	800427c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6858      	ldr	r0, [r3, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	461a      	mov	r2, r3
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	f01e fcd2 	bl	8022bfc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	441a      	add	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	d32b      	bcc.n	80042ca <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	e026      	b.n	80042ca <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68d8      	ldr	r0, [r3, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	461a      	mov	r2, r3
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	f01e fcb8 	bl	8022bfc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	425b      	negs	r3, r3
 8004296:	441a      	add	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d207      	bcs.n	80042b8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	425b      	negs	r3, r3
 80042b2:	441a      	add	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d105      	bne.n	80042ca <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80042d2:	697b      	ldr	r3, [r7, #20]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	441a      	add	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	d303      	bcc.n	8004310 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68d9      	ldr	r1, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	461a      	mov	r2, r3
 800431a:	6838      	ldr	r0, [r7, #0]
 800431c:	f01e fc6e 	bl	8022bfc <memcpy>
    }
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004330:	f002 fa46 	bl	80067c0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800433a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800433c:	e011      	b.n	8004362 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	d012      	beq.n	800436c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3324      	adds	r3, #36	@ 0x24
 800434a:	4618      	mov	r0, r3
 800434c:	f000 feec 	bl	8005128 <xTaskRemoveFromEventList>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004356:	f001 f903 	bl	8005560 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	3b01      	subs	r3, #1
 800435e:	b2db      	uxtb	r3, r3
 8004360:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004366:	2b00      	cmp	r3, #0
 8004368:	dce9      	bgt.n	800433e <prvUnlockQueue+0x16>
 800436a:	e000      	b.n	800436e <prvUnlockQueue+0x46>
                    break;
 800436c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	22ff      	movs	r2, #255	@ 0xff
 8004372:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004376:	f002 fa4f 	bl	8006818 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800437a:	f002 fa21 	bl	80067c0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004384:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004386:	e011      	b.n	80043ac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d012      	beq.n	80043b6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3310      	adds	r3, #16
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fec7 	bl	8005128 <xTaskRemoveFromEventList>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80043a0:	f001 f8de 	bl	8005560 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80043a4:	7bbb      	ldrb	r3, [r7, #14]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80043ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	dce9      	bgt.n	8004388 <prvUnlockQueue+0x60>
 80043b4:	e000      	b.n	80043b8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80043b6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	22ff      	movs	r2, #255	@ 0xff
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80043c0:	f002 fa2a 	bl	8006818 <vPortExitCritical>
}
 80043c4:	bf00      	nop
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80043d4:	f002 f9f4 	bl	80067c0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e001      	b.n	80043ea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043ea:	f002 fa15 	bl	8006818 <vPortExitCritical>

    return xReturn;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004400:	f002 f9de 	bl	80067c0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440c:	429a      	cmp	r2, r3
 800440e:	d102      	bne.n	8004416 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004410:	2301      	movs	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e001      	b.n	800441a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800441a:	f002 f9fd 	bl	8006818 <vPortExitCritical>

    return xReturn;
 800441e:	68fb      	ldr	r3, [r7, #12]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <vQueueAddToRegistry+0x1e>
 800443c:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 8004440:	481b      	ldr	r0, [pc, #108]	@ (80044b0 <vQueueAddToRegistry+0x88>)
 8004442:	f7fd fae1 	bl	8001a08 <vAssertCalled>

        if( pcQueueName != NULL )
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d024      	beq.n	8004496 <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e01e      	b.n	8004490 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004452:	4a18      	ldr	r2, [pc, #96]	@ (80044b4 <vQueueAddToRegistry+0x8c>)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	429a      	cmp	r2, r3
 8004460:	d105      	bne.n	800446e <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4a13      	ldr	r2, [pc, #76]	@ (80044b4 <vQueueAddToRegistry+0x8c>)
 8004468:	4413      	add	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
                    break;
 800446c:	e013      	b.n	8004496 <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <vQueueAddToRegistry+0x62>
 8004474:	4a0f      	ldr	r2, [pc, #60]	@ (80044b4 <vQueueAddToRegistry+0x8c>)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4a0b      	ldr	r2, [pc, #44]	@ (80044b4 <vQueueAddToRegistry+0x8c>)
 8004486:	4413      	add	r3, r2
 8004488:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b07      	cmp	r3, #7
 8004494:	d9dd      	bls.n	8004452 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	08024adc 	.word	0x08024adc
 80044b4:	20000dcc 	.word	0x20000dcc

080044b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d104      	bne.n	80044d0 <vQueueUnregisterQueue+0x18>
 80044c6:	f640 411d 	movw	r1, #3101	@ 0xc1d
 80044ca:	4812      	ldr	r0, [pc, #72]	@ (8004514 <vQueueUnregisterQueue+0x5c>)
 80044cc:	f7fd fa9c 	bl	8001a08 <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	e016      	b.n	8004504 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80044d6:	4a10      	ldr	r2, [pc, #64]	@ (8004518 <vQueueUnregisterQueue+0x60>)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d10b      	bne.n	80044fe <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 80044e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004518 <vQueueUnregisterQueue+0x60>)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2100      	movs	r1, #0
 80044ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80044f0:	4a09      	ldr	r2, [pc, #36]	@ (8004518 <vQueueUnregisterQueue+0x60>)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4413      	add	r3, r2
 80044f8:	2200      	movs	r2, #0
 80044fa:	605a      	str	r2, [r3, #4]
                break;
 80044fc:	e006      	b.n	800450c <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3301      	adds	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b07      	cmp	r3, #7
 8004508:	d9e5      	bls.n	80044d6 <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	08024adc 	.word	0x08024adc
 8004518:	20000dcc 	.word	0x20000dcc

0800451c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	@ 0x28
 8004520:	af04      	add	r7, sp, #16
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4618      	mov	r0, r3
 8004530:	f002 fa48 	bl	80069c4 <pvPortMalloc>
 8004534:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d013      	beq.n	8004564 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800453c:	206c      	movs	r0, #108	@ 0x6c
 800453e:	f002 fa41 	bl	80069c4 <pvPortMalloc>
 8004542:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800454a:	226c      	movs	r2, #108	@ 0x6c
 800454c:	2100      	movs	r1, #0
 800454e:	6978      	ldr	r0, [r7, #20]
 8004550:	f01e fc61 	bl	8022e16 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
 800455a:	e005      	b.n	8004568 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800455c:	6938      	ldr	r0, [r7, #16]
 800455e:	f002 fb05 	bl	8006b6c <vPortFree>
 8004562:	e001      	b.n	8004568 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800456e:	2300      	movs	r3, #0
 8004570:	9303      	str	r3, [sp, #12]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	9302      	str	r3, [sp, #8]
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f829 	bl	80045dc <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800458a:	697b      	ldr	r3, [r7, #20]
    }
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7ff ffb3 	bl	800451c <prvCreateTask>
 80045b6:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80045be:	6938      	ldr	r0, [r7, #16]
 80045c0:	f000 f890 	bl	80046e4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80045c4:	2301      	movs	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e002      	b.n	80045d0 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045ca:	f04f 33ff 	mov.w	r3, #4294967295
 80045ce:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80045d0:	697b      	ldr	r3, [r7, #20]
    }
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80045ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	461a      	mov	r2, r3
 80045f4:	21a5      	movs	r1, #165	@ 0xa5
 80045f6:	f01e fc0e 	bl	8022e16 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80045fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004604:	440b      	add	r3, r1
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f023 0307 	bic.w	r3, r3, #7
 8004612:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <prvInitialiseNewTask+0x4c>
 800461e:	f240 712e 	movw	r1, #1838	@ 0x72e
 8004622:	482f      	ldr	r0, [pc, #188]	@ (80046e0 <prvInitialiseNewTask+0x104>)
 8004624:	f7fd f9f0 	bl	8001a08 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01e      	beq.n	800466c <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e012      	b.n	800465a <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	4413      	add	r3, r2
 800463a:	7819      	ldrb	r1, [r3, #0]
 800463c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	4413      	add	r3, r2
 8004642:	3334      	adds	r3, #52	@ 0x34
 8004644:	460a      	mov	r2, r1
 8004646:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	4413      	add	r3, r2
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d006      	beq.n	8004662 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	3301      	adds	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b0f      	cmp	r3, #15
 800465e:	d9e9      	bls.n	8004634 <prvInitialiseNewTask+0x58>
 8004660:	e000      	b.n	8004664 <prvInitialiseNewTask+0x88>
            {
                break;
 8004662:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	2b06      	cmp	r3, #6
 8004670:	d904      	bls.n	800467c <prvInitialiseNewTask+0xa0>
 8004672:	f240 7164 	movw	r1, #1892	@ 0x764
 8004676:	481a      	ldr	r0, [pc, #104]	@ (80046e0 <prvInitialiseNewTask+0x104>)
 8004678:	f7fd f9c6 	bl	8001a08 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b06      	cmp	r3, #6
 8004680:	d901      	bls.n	8004686 <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004682:	2306      	movs	r3, #6
 8004684:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004688:	6a3a      	ldr	r2, [r7, #32]
 800468a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800468c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468e:	6a3a      	ldr	r2, [r7, #32]
 8004690:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	3304      	adds	r3, #4
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff f8c0 	bl	800381c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469e:	3318      	adds	r3, #24
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff f8bb 	bl	800381c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046aa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	f1c3 0207 	rsb	r2, r3, #7
 80046b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046ba:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	68f9      	ldr	r1, [r7, #12]
 80046c0:	6938      	ldr	r0, [r7, #16]
 80046c2:	f001 ff43 	bl	800654c <pxPortInitialiseStack>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ca:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046d6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046d8:	bf00      	nop
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	08024b00 	.word	0x08024b00

080046e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80046ec:	f002 f868 	bl	80067c0 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80046f0:	4b41      	ldr	r3, [pc, #260]	@ (80047f8 <prvAddNewTaskToReadyList+0x114>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	4a40      	ldr	r2, [pc, #256]	@ (80047f8 <prvAddNewTaskToReadyList+0x114>)
 80046f8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80046fa:	4b40      	ldr	r3, [pc, #256]	@ (80047fc <prvAddNewTaskToReadyList+0x118>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8004702:	4a3e      	ldr	r2, [pc, #248]	@ (80047fc <prvAddNewTaskToReadyList+0x118>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004708:	4b3b      	ldr	r3, [pc, #236]	@ (80047f8 <prvAddNewTaskToReadyList+0x114>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d110      	bne.n	8004732 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8004710:	f000 ff4a 	bl	80055a8 <prvInitialiseTaskLists>
 8004714:	e00d      	b.n	8004732 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8004716:	4b3a      	ldr	r3, [pc, #232]	@ (8004800 <prvAddNewTaskToReadyList+0x11c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800471e:	4b37      	ldr	r3, [pc, #220]	@ (80047fc <prvAddNewTaskToReadyList+0x118>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	429a      	cmp	r2, r3
 800472a:	d802      	bhi.n	8004732 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800472c:	4a33      	ldr	r2, [pc, #204]	@ (80047fc <prvAddNewTaskToReadyList+0x118>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8004732:	4b34      	ldr	r3, [pc, #208]	@ (8004804 <prvAddNewTaskToReadyList+0x120>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3301      	adds	r3, #1
 8004738:	4a32      	ldr	r2, [pc, #200]	@ (8004804 <prvAddNewTaskToReadyList+0x120>)
 800473a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800473c:	4b31      	ldr	r3, [pc, #196]	@ (8004804 <prvAddNewTaskToReadyList+0x120>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004748:	2201      	movs	r2, #1
 800474a:	409a      	lsls	r2, r3
 800474c:	4b2e      	ldr	r3, [pc, #184]	@ (8004808 <prvAddNewTaskToReadyList+0x124>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4313      	orrs	r3, r2
 8004752:	4a2d      	ldr	r2, [pc, #180]	@ (8004808 <prvAddNewTaskToReadyList+0x124>)
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475a:	492c      	ldr	r1, [pc, #176]	@ (800480c <prvAddNewTaskToReadyList+0x128>)
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	3304      	adds	r3, #4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	609a      	str	r2, [r3, #8]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	3204      	adds	r2, #4
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	1d1a      	adds	r2, r3, #4
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4a1c      	ldr	r2, [pc, #112]	@ (800480c <prvAddNewTaskToReadyList+0x128>)
 800479a:	441a      	add	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	615a      	str	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a4:	4919      	ldr	r1, [pc, #100]	@ (800480c <prvAddNewTaskToReadyList+0x128>)
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80047b6:	1c59      	adds	r1, r3, #1
 80047b8:	4814      	ldr	r0, [pc, #80]	@ (800480c <prvAddNewTaskToReadyList+0x128>)
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4403      	add	r3, r0
 80047c4:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80047c6:	f002 f827 	bl	8006818 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80047ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004800 <prvAddNewTaskToReadyList+0x11c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80047d2:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <prvAddNewTaskToReadyList+0x118>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	429a      	cmp	r2, r3
 80047de:	d207      	bcs.n	80047f0 <prvAddNewTaskToReadyList+0x10c>
 80047e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <prvAddNewTaskToReadyList+0x12c>)
 80047e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000f0c 	.word	0x20000f0c
 80047fc:	20000e0c 	.word	0x20000e0c
 8004800:	20000f18 	.word	0x20000f18
 8004804:	20000f28 	.word	0x20000f28
 8004808:	20000f14 	.word	0x20000f14
 800480c:	20000e10 	.word	0x20000e10
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8004820:	f001 ffce 	bl	80067c0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <vTaskDelete+0x1c>
 800482a:	4b3e      	ldr	r3, [pc, #248]	@ (8004924 <vTaskDelete+0x110>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	e000      	b.n	8004832 <vTaskDelete+0x1e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	3304      	adds	r3, #4
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff f859 	bl	80038f0 <uxListRemove>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d115      	bne.n	8004870 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004848:	4937      	ldr	r1, [pc, #220]	@ (8004928 <vTaskDelete+0x114>)
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <vTaskDelete+0x5c>
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	2201      	movs	r2, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	43da      	mvns	r2, r3
 8004866:	4b31      	ldr	r3, [pc, #196]	@ (800492c <vTaskDelete+0x118>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4013      	ands	r3, r2
 800486c:	4a2f      	ldr	r2, [pc, #188]	@ (800492c <vTaskDelete+0x118>)
 800486e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	3318      	adds	r3, #24
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff f837 	bl	80038f0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8004882:	4b2b      	ldr	r3, [pc, #172]	@ (8004930 <vTaskDelete+0x11c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3301      	adds	r3, #1
 8004888:	4a29      	ldr	r2, [pc, #164]	@ (8004930 <vTaskDelete+0x11c>)
 800488a:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 800488c:	4b25      	ldr	r3, [pc, #148]	@ (8004924 <vTaskDelete+0x110>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	d101      	bne.n	800489a <vTaskDelete+0x86>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <vTaskDelete+0x88>
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 800489e:	4b25      	ldr	r3, [pc, #148]	@ (8004934 <vTaskDelete+0x120>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d010      	beq.n	80048c8 <vTaskDelete+0xb4>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00d      	beq.n	80048c8 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4821      	ldr	r0, [pc, #132]	@ (8004938 <vTaskDelete+0x124>)
 80048b4:	f7fe ffbf 	bl	8003836 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80048b8:	4b20      	ldr	r3, [pc, #128]	@ (800493c <vTaskDelete+0x128>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a1f      	ldr	r2, [pc, #124]	@ (800493c <vTaskDelete+0x128>)
 80048c0:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	e006      	b.n	80048d6 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80048c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004940 <vTaskDelete+0x12c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004940 <vTaskDelete+0x12c>)
 80048d0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80048d2:	f000 fee7 	bl	80056a4 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80048d6:	f001 ff9f 	bl	8006818 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d002      	beq.n	80048e6 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 80048e0:	6938      	ldr	r0, [r7, #16]
 80048e2:	f000 fecf 	bl	8005684 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 80048e6:	4b13      	ldr	r3, [pc, #76]	@ (8004934 <vTaskDelete+0x120>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d015      	beq.n	800491a <vTaskDelete+0x106>
            {
                if( pxTCB == pxCurrentTCB )
 80048ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <vTaskDelete+0x110>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d110      	bne.n	800491a <vTaskDelete+0x106>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 80048f8:	4b12      	ldr	r3, [pc, #72]	@ (8004944 <vTaskDelete+0x130>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <vTaskDelete+0xf6>
 8004900:	f640 1114 	movw	r1, #2324	@ 0x914
 8004904:	4810      	ldr	r0, [pc, #64]	@ (8004948 <vTaskDelete+0x134>)
 8004906:	f7fd f87f 	bl	8001a08 <vAssertCalled>
                    taskYIELD_WITHIN_API();
 800490a:	4b10      	ldr	r3, [pc, #64]	@ (800494c <vTaskDelete+0x138>)
 800490c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 800491a:	bf00      	nop
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000e0c 	.word	0x20000e0c
 8004928:	20000e10 	.word	0x20000e10
 800492c:	20000f14 	.word	0x20000f14
 8004930:	20000f28 	.word	0x20000f28
 8004934:	20000f18 	.word	0x20000f18
 8004938:	20000ee0 	.word	0x20000ee0
 800493c:	20000ef4 	.word	0x20000ef4
 8004940:	20000f0c 	.word	0x20000f0c
 8004944:	20000f34 	.word	0x20000f34
 8004948:	08024b00 	.word	0x08024b00
 800494c:	e000ed04 	.word	0xe000ed04

08004950 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d011      	beq.n	8004986 <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 8004962:	f000 f8ad 	bl	8004ac0 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8004966:	4b0f      	ldr	r3, [pc, #60]	@ (80049a4 <vTaskDelay+0x54>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d004      	beq.n	8004978 <vTaskDelay+0x28>
 800496e:	f640 118e 	movw	r1, #2446	@ 0x98e
 8004972:	480d      	ldr	r0, [pc, #52]	@ (80049a8 <vTaskDelay+0x58>)
 8004974:	f7fd f848 	bl	8001a08 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004978:	2100      	movs	r1, #0
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f001 fd64 	bl	8006448 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004980:	f000 f8ac 	bl	8004adc <xTaskResumeAll>
 8004984:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d107      	bne.n	800499c <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 800498c:	4b07      	ldr	r3, [pc, #28]	@ (80049ac <vTaskDelay+0x5c>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000f34 	.word	0x20000f34
 80049a8:	08024b00 	.word	0x08024b00
 80049ac:	e000ed04 	.word	0xe000ed04

080049b0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	@ 0x28
 80049b4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e011      	b.n	80049e8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80049c4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a3c <prvCreateIdleTasks+0x8c>)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	4413      	add	r3, r2
 80049ca:	7819      	ldrb	r1, [r3, #0]
 80049cc:	463a      	mov	r2, r7
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	4413      	add	r3, r2
 80049d2:	460a      	mov	r2, r1
 80049d4:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80049d6:	463a      	mov	r2, r7
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	4413      	add	r3, r2
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d006      	beq.n	80049f0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	3301      	adds	r3, #1
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	ddea      	ble.n	80049c4 <prvCreateIdleTasks+0x14>
 80049ee:	e000      	b.n	80049f2 <prvCreateIdleTasks+0x42>
        {
            break;
 80049f0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	e016      	b.n	8004a26 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80049f8:	4b11      	ldr	r3, [pc, #68]	@ (8004a40 <prvCreateIdleTasks+0x90>)
 80049fa:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4a10      	ldr	r2, [pc, #64]	@ (8004a44 <prvCreateIdleTasks+0x94>)
 8004a02:	4413      	add	r3, r2
 8004a04:	4639      	mov	r1, r7
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a12:	6938      	ldr	r0, [r7, #16]
 8004a14:	f7ff fdbe 	bl	8004594 <xTaskCreate>
 8004a18:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d006      	beq.n	8004a2e <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	dde5      	ble.n	80049f8 <prvCreateIdleTasks+0x48>
 8004a2c:	e000      	b.n	8004a30 <prvCreateIdleTasks+0x80>
        {
            break;
 8004a2e:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8004a30:	69fb      	ldr	r3, [r7, #28]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	08024b24 	.word	0x08024b24
 8004a40:	08005579 	.word	0x08005579
 8004a44:	20000f30 	.word	0x20000f30

08004a48 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8004a4e:	f7ff ffaf 	bl	80049b0 <prvCreateIdleTasks>
 8004a52:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d118      	bne.n	8004a8c <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8004a5a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004a5e:	b672      	cpsid	i
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	b662      	cpsie	i
 8004a6e:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8004a70:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004a72:	4b0e      	ldr	r3, [pc, #56]	@ (8004aac <vTaskStartScheduler+0x64>)
 8004a74:	f04f 32ff 	mov.w	r2, #4294967295
 8004a78:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab0 <vTaskStartScheduler+0x68>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a80:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab4 <vTaskStartScheduler+0x6c>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8004a86:	f001 fded 	bl	8006664 <xPortStartScheduler>
 8004a8a:	e008      	b.n	8004a9e <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d104      	bne.n	8004a9e <vTaskStartScheduler+0x56>
 8004a94:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8004a98:	4807      	ldr	r0, [pc, #28]	@ (8004ab8 <vTaskStartScheduler+0x70>)
 8004a9a:	f7fc ffb5 	bl	8001a08 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004a9e:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <vTaskStartScheduler+0x74>)
 8004aa0:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000f2c 	.word	0x20000f2c
 8004ab0:	20000f18 	.word	0x20000f18
 8004ab4:	20000f10 	.word	0x20000f10
 8004ab8:	08024b00 	.word	0x08024b00
 8004abc:	20000008 	.word	0x20000008

08004ac0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004ac4:	4b04      	ldr	r3, [pc, #16]	@ (8004ad8 <vTaskSuspendAll+0x18>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	4a03      	ldr	r2, [pc, #12]	@ (8004ad8 <vTaskSuspendAll+0x18>)
 8004acc:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8004ace:	bf00      	nop
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	20000f34 	.word	0x20000f34

08004adc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8004aea:	f001 fe69 	bl	80067c0 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8004aee:	2300      	movs	r3, #0
 8004af0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8004af2:	4b72      	ldr	r3, [pc, #456]	@ (8004cbc <xTaskResumeAll+0x1e0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <xTaskResumeAll+0x28>
 8004afa:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8004afe:	4870      	ldr	r0, [pc, #448]	@ (8004cc0 <xTaskResumeAll+0x1e4>)
 8004b00:	f7fc ff82 	bl	8001a08 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8004b04:	4b6d      	ldr	r3, [pc, #436]	@ (8004cbc <xTaskResumeAll+0x1e0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	4a6c      	ldr	r2, [pc, #432]	@ (8004cbc <xTaskResumeAll+0x1e0>)
 8004b0c:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004b0e:	4b6b      	ldr	r3, [pc, #428]	@ (8004cbc <xTaskResumeAll+0x1e0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f040 80ca 	bne.w	8004cac <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b18:	4b6a      	ldr	r3, [pc, #424]	@ (8004cc4 <xTaskResumeAll+0x1e8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80c5 	beq.w	8004cac <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b22:	e08e      	b.n	8004c42 <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004b24:	4b68      	ldr	r3, [pc, #416]	@ (8004cc8 <xTaskResumeAll+0x1ec>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	6a12      	ldr	r2, [r2, #32]
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	69d2      	ldr	r2, [r2, #28]
 8004b44:	605a      	str	r2, [r3, #4]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3318      	adds	r3, #24
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d103      	bne.n	8004b5a <xTaskResumeAll+0x7e>
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	6a1a      	ldr	r2, [r3, #32]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	605a      	str	r2, [r3, #4]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	1e5a      	subs	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	68d2      	ldr	r2, [r2, #12]
 8004b78:	609a      	str	r2, [r3, #8]
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	6892      	ldr	r2, [r2, #8]
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d103      	bne.n	8004b98 <xTaskResumeAll+0xbc>
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	605a      	str	r2, [r3, #4]
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	615a      	str	r2, [r3, #20]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	1e5a      	subs	r2, r3, #1
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	2201      	movs	r2, #1
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	4b46      	ldr	r3, [pc, #280]	@ (8004ccc <xTaskResumeAll+0x1f0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	4a45      	ldr	r2, [pc, #276]	@ (8004ccc <xTaskResumeAll+0x1f0>)
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bbe:	4944      	ldr	r1, [pc, #272]	@ (8004cd0 <xTaskResumeAll+0x1f4>)
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	3304      	adds	r3, #4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	607b      	str	r3, [r7, #4]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	609a      	str	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	3204      	adds	r2, #4
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	1d1a      	adds	r2, r3, #4
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4a34      	ldr	r2, [pc, #208]	@ (8004cd0 <xTaskResumeAll+0x1f4>)
 8004bfe:	441a      	add	r2, r3
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	615a      	str	r2, [r3, #20]
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c08:	4931      	ldr	r1, [pc, #196]	@ (8004cd0 <xTaskResumeAll+0x1f4>)
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c1a:	1c59      	adds	r1, r3, #1
 8004c1c:	482c      	ldr	r0, [pc, #176]	@ (8004cd0 <xTaskResumeAll+0x1f4>)
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4403      	add	r3, r0
 8004c28:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2e:	4b29      	ldr	r3, [pc, #164]	@ (8004cd4 <xTaskResumeAll+0x1f8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d904      	bls.n	8004c42 <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8004c38:	4a27      	ldr	r2, [pc, #156]	@ (8004cd8 <xTaskResumeAll+0x1fc>)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c42:	4b21      	ldr	r3, [pc, #132]	@ (8004cc8 <xTaskResumeAll+0x1ec>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f47f af6c 	bne.w	8004b24 <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004c52:	f000 fd27 	bl	80056a4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c56:	4b21      	ldr	r3, [pc, #132]	@ (8004cdc <xTaskResumeAll+0x200>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d012      	beq.n	8004c88 <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004c62:	f000 f86d 	bl	8004d40 <xTaskIncrementTick>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004cd8 <xTaskResumeAll+0x1fc>)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2101      	movs	r1, #1
 8004c72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1ef      	bne.n	8004c62 <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 8004c82:	4b16      	ldr	r3, [pc, #88]	@ (8004cdc <xTaskResumeAll+0x200>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004c88:	4a13      	ldr	r2, [pc, #76]	@ (8004cd8 <xTaskResumeAll+0x1fc>)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00b      	beq.n	8004cac <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004c94:	2301      	movs	r3, #1
 8004c96:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8004c98:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd4 <xTaskResumeAll+0x1f8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ce0 <xTaskResumeAll+0x204>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004cac:	f001 fdb4 	bl	8006818 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000f34 	.word	0x20000f34
 8004cc0:	08024b00 	.word	0x08024b00
 8004cc4:	20000f0c 	.word	0x20000f0c
 8004cc8:	20000ecc 	.word	0x20000ecc
 8004ccc:	20000f14 	.word	0x20000f14
 8004cd0:	20000e10 	.word	0x20000e10
 8004cd4:	20000e0c 	.word	0x20000e0c
 8004cd8:	20000f20 	.word	0x20000f20
 8004cdc:	20000f1c 	.word	0x20000f1c
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004cea:	4b05      	ldr	r3, [pc, #20]	@ (8004d00 <xTaskGetTickCount+0x1c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004cf0:	687b      	ldr	r3, [r7, #4]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000f10 	.word	0x20000f10

08004d04 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <pcTaskGetName+0x14>
 8004d12:	4b09      	ldr	r3, [pc, #36]	@ (8004d38 <pcTaskGetName+0x34>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	e000      	b.n	8004d1a <pcTaskGetName+0x16>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d104      	bne.n	8004d2c <pcTaskGetName+0x28>
 8004d22:	f241 0155 	movw	r1, #4181	@ 0x1055
 8004d26:	4805      	ldr	r0, [pc, #20]	@ (8004d3c <pcTaskGetName+0x38>)
 8004d28:	f7fc fe6e 	bl	8001a08 <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3334      	adds	r3, #52	@ 0x34
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20000e0c 	.word	0x20000e0c
 8004d3c:	08024b00 	.word	0x08024b00

08004d40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f38 <xTaskIncrementTick+0x1f8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f040 80e8 	bne.w	8004f24 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d54:	4b79      	ldr	r3, [pc, #484]	@ (8004f3c <xTaskIncrementTick+0x1fc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004d5c:	4a77      	ldr	r2, [pc, #476]	@ (8004f3c <xTaskIncrementTick+0x1fc>)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d11a      	bne.n	8004d9e <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8004d68:	4b75      	ldr	r3, [pc, #468]	@ (8004f40 <xTaskIncrementTick+0x200>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d004      	beq.n	8004d7c <xTaskIncrementTick+0x3c>
 8004d72:	f241 215f 	movw	r1, #4703	@ 0x125f
 8004d76:	4873      	ldr	r0, [pc, #460]	@ (8004f44 <xTaskIncrementTick+0x204>)
 8004d78:	f7fc fe46 	bl	8001a08 <vAssertCalled>
 8004d7c:	4b70      	ldr	r3, [pc, #448]	@ (8004f40 <xTaskIncrementTick+0x200>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	4b71      	ldr	r3, [pc, #452]	@ (8004f48 <xTaskIncrementTick+0x208>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a6e      	ldr	r2, [pc, #440]	@ (8004f40 <xTaskIncrementTick+0x200>)
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8004f48 <xTaskIncrementTick+0x208>)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	4b6e      	ldr	r3, [pc, #440]	@ (8004f4c <xTaskIncrementTick+0x20c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3301      	adds	r3, #1
 8004d96:	4a6d      	ldr	r2, [pc, #436]	@ (8004f4c <xTaskIncrementTick+0x20c>)
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	f000 fc83 	bl	80056a4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004d9e:	4b6c      	ldr	r3, [pc, #432]	@ (8004f50 <xTaskIncrementTick+0x210>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	f0c0 80a8 	bcc.w	8004efa <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004daa:	4b65      	ldr	r3, [pc, #404]	@ (8004f40 <xTaskIncrementTick+0x200>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004db4:	4b66      	ldr	r3, [pc, #408]	@ (8004f50 <xTaskIncrementTick+0x210>)
 8004db6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dba:	601a      	str	r2, [r3, #0]
                    break;
 8004dbc:	e09d      	b.n	8004efa <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004dbe:	4b60      	ldr	r3, [pc, #384]	@ (8004f40 <xTaskIncrementTick+0x200>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d203      	bcs.n	8004dde <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004dd6:	4a5e      	ldr	r2, [pc, #376]	@ (8004f50 <xTaskIncrementTick+0x210>)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6013      	str	r3, [r2, #0]
                        break;
 8004ddc:	e08d      	b.n	8004efa <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	60bb      	str	r3, [r7, #8]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	68d2      	ldr	r2, [r2, #12]
 8004dec:	609a      	str	r2, [r3, #8]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	6892      	ldr	r2, [r2, #8]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d103      	bne.n	8004e0c <xTaskIncrementTick+0xcc>
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	605a      	str	r2, [r3, #4]
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	615a      	str	r2, [r3, #20]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	1e5a      	subs	r2, r3, #1
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01e      	beq.n	8004e62 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	6a12      	ldr	r2, [r2, #32]
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	69d2      	ldr	r2, [r2, #28]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	3318      	adds	r3, #24
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d103      	bne.n	8004e52 <xTaskIncrementTick+0x112>
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	6a1a      	ldr	r2, [r3, #32]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2200      	movs	r2, #0
 8004e56:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	1e5a      	subs	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	2201      	movs	r2, #1
 8004e68:	409a      	lsls	r2, r3
 8004e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f54 <xTaskIncrementTick+0x214>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	4a38      	ldr	r2, [pc, #224]	@ (8004f54 <xTaskIncrementTick+0x214>)
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e78:	4937      	ldr	r1, [pc, #220]	@ (8004f58 <xTaskIncrementTick+0x218>)
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	3304      	adds	r3, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	3204      	adds	r2, #4
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1d1a      	adds	r2, r3, #4
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4a28      	ldr	r2, [pc, #160]	@ (8004f58 <xTaskIncrementTick+0x218>)
 8004eb8:	441a      	add	r2, r3
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	615a      	str	r2, [r3, #20]
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec2:	4925      	ldr	r1, [pc, #148]	@ (8004f58 <xTaskIncrementTick+0x218>)
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ed4:	1c59      	adds	r1, r3, #1
 8004ed6:	4820      	ldr	r0, [pc, #128]	@ (8004f58 <xTaskIncrementTick+0x218>)
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4403      	add	r3, r0
 8004ee2:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f5c <xTaskIncrementTick+0x21c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	f67f af5b 	bls.w	8004daa <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef8:	e757      	b.n	8004daa <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004efa:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <xTaskIncrementTick+0x21c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f00:	4915      	ldr	r1, [pc, #84]	@ (8004f58 <xTaskIncrementTick+0x218>)
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d901      	bls.n	8004f16 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8004f12:	2301      	movs	r3, #1
 8004f14:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004f16:	4b12      	ldr	r3, [pc, #72]	@ (8004f60 <xTaskIncrementTick+0x220>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	e004      	b.n	8004f2e <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004f24:	4b0f      	ldr	r3, [pc, #60]	@ (8004f64 <xTaskIncrementTick+0x224>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8004f64 <xTaskIncrementTick+0x224>)
 8004f2c:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000f34 	.word	0x20000f34
 8004f3c:	20000f10 	.word	0x20000f10
 8004f40:	20000ec4 	.word	0x20000ec4
 8004f44:	08024b00 	.word	0x08024b00
 8004f48:	20000ec8 	.word	0x20000ec8
 8004f4c:	20000f24 	.word	0x20000f24
 8004f50:	20000f2c 	.word	0x20000f2c
 8004f54:	20000f14 	.word	0x20000f14
 8004f58:	20000e10 	.word	0x20000e10
 8004f5c:	20000e0c 	.word	0x20000e0c
 8004f60:	20000f20 	.word	0x20000f20
 8004f64:	20000f1c 	.word	0x20000f1c

08004f68 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004f6e:	4b30      	ldr	r3, [pc, #192]	@ (8005030 <vTaskSwitchContext+0xc8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004f76:	4b2f      	ldr	r3, [pc, #188]	@ (8005034 <vTaskSwitchContext+0xcc>)
 8004f78:	2201      	movs	r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004f7c:	e053      	b.n	8005026 <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 8004f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8005034 <vTaskSwitchContext+0xcc>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8004f84:	f7fc fd38 	bl	80019f8 <ulGetRunTimeCounterValue>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005038 <vTaskSwitchContext+0xd0>)
 8004f8c:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8004f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8005038 <vTaskSwitchContext+0xd0>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b2a      	ldr	r3, [pc, #168]	@ (800503c <vTaskSwitchContext+0xd4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d909      	bls.n	8004fae <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 8004f9a:	4b27      	ldr	r3, [pc, #156]	@ (8005038 <vTaskSwitchContext+0xd0>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b27      	ldr	r3, [pc, #156]	@ (800503c <vTaskSwitchContext+0xd4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	1ad1      	subs	r1, r2, r3
 8004fa4:	4b26      	ldr	r3, [pc, #152]	@ (8005040 <vTaskSwitchContext+0xd8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004faa:	440a      	add	r2, r1
 8004fac:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8004fae:	4b22      	ldr	r3, [pc, #136]	@ (8005038 <vTaskSwitchContext+0xd0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a22      	ldr	r2, [pc, #136]	@ (800503c <vTaskSwitchContext+0xd4>)
 8004fb4:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004fb6:	4b23      	ldr	r3, [pc, #140]	@ (8005044 <vTaskSwitchContext+0xdc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	f1c3 031f 	rsb	r3, r3, #31
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	491e      	ldr	r1, [pc, #120]	@ (8005048 <vTaskSwitchContext+0xe0>)
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <vTaskSwitchContext+0x82>
 8004fe0:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8004fe4:	4819      	ldr	r0, [pc, #100]	@ (800504c <vTaskSwitchContext+0xe4>)
 8004fe6:	f7fc fd0f 	bl	8001a08 <vAssertCalled>
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4a14      	ldr	r2, [pc, #80]	@ (8005048 <vTaskSwitchContext+0xe0>)
 8004ff6:	4413      	add	r3, r2
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	3308      	adds	r3, #8
 800500c:	429a      	cmp	r2, r3
 800500e:	d103      	bne.n	8005018 <vTaskSwitchContext+0xb0>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	605a      	str	r2, [r3, #4]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4a08      	ldr	r2, [pc, #32]	@ (8005040 <vTaskSwitchContext+0xd8>)
 8005020:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8005022:	4b07      	ldr	r3, [pc, #28]	@ (8005040 <vTaskSwitchContext+0xd8>)
 8005024:	681b      	ldr	r3, [r3, #0]
    }
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000f34 	.word	0x20000f34
 8005034:	20000f20 	.word	0x20000f20
 8005038:	20000f3c 	.word	0x20000f3c
 800503c:	20000f38 	.word	0x20000f38
 8005040:	20000e0c 	.word	0x20000e0c
 8005044:	20000f14 	.word	0x20000f14
 8005048:	20000e10 	.word	0x20000e10
 800504c:	08024b00 	.word	0x08024b00

08005050 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d104      	bne.n	800506a <vTaskPlaceOnEventList+0x1a>
 8005060:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8005064:	4808      	ldr	r0, [pc, #32]	@ (8005088 <vTaskPlaceOnEventList+0x38>)
 8005066:	f7fc fccf 	bl	8001a08 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800506a:	4b08      	ldr	r3, [pc, #32]	@ (800508c <vTaskPlaceOnEventList+0x3c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3318      	adds	r3, #24
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fe fc03 	bl	800387e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005078:	2101      	movs	r1, #1
 800507a:	6838      	ldr	r0, [r7, #0]
 800507c:	f001 f9e4 	bl	8006448 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	08024b00 	.word	0x08024b00
 800508c:	20000e0c 	.word	0x20000e0c

08005090 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <vTaskPlaceOnUnorderedEventList+0x1c>
 80050a2:	f241 419e 	movw	r1, #5278	@ 0x149e
 80050a6:	481d      	ldr	r0, [pc, #116]	@ (800511c <vTaskPlaceOnUnorderedEventList+0x8c>)
 80050a8:	f7fc fcae 	bl	8001a08 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80050ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005120 <vTaskPlaceOnUnorderedEventList+0x90>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <vTaskPlaceOnUnorderedEventList+0x2e>
 80050b4:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 80050b8:	4818      	ldr	r0, [pc, #96]	@ (800511c <vTaskPlaceOnUnorderedEventList+0x8c>)
 80050ba:	f7fc fca5 	bl	8001a08 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80050be:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80050c8:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	4b14      	ldr	r3, [pc, #80]	@ (8005124 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	61da      	str	r2, [r3, #28]
 80050d8:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	6892      	ldr	r2, [r2, #8]
 80050e0:	621a      	str	r2, [r3, #32]
 80050e2:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	3218      	adds	r2, #24
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005124 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f103 0218 	add.w	r2, r3, #24
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	609a      	str	r2, [r3, #8]
 80050fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005124 <vTaskPlaceOnUnorderedEventList+0x94>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	629a      	str	r2, [r3, #40]	@ 0x28
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800510c:	2101      	movs	r1, #1
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f001 f99a 	bl	8006448 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8005114:	bf00      	nop
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	08024b00 	.word	0x08024b00
 8005120:	20000f34 	.word	0x20000f34
 8005124:	20000e0c 	.word	0x20000e0c

08005128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d104      	bne.n	8005148 <xTaskRemoveFromEventList+0x20>
 800513e:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 8005142:	485b      	ldr	r0, [pc, #364]	@ (80052b0 <xTaskRemoveFromEventList+0x188>)
 8005144:	f7fc fc60 	bl	8001a08 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	6a12      	ldr	r2, [r2, #32]
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	69d2      	ldr	r2, [r2, #28]
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	3318      	adds	r3, #24
 800516a:	429a      	cmp	r2, r3
 800516c:	d103      	bne.n	8005176 <xTaskRemoveFromEventList+0x4e>
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	6a1a      	ldr	r2, [r3, #32]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2200      	movs	r2, #0
 800517a:	629a      	str	r2, [r3, #40]	@ 0x28
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	1e5a      	subs	r2, r3, #1
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005186:	4b4b      	ldr	r3, [pc, #300]	@ (80052b4 <xTaskRemoveFromEventList+0x18c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d160      	bne.n	8005250 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	68d2      	ldr	r2, [r2, #12]
 800519c:	609a      	str	r2, [r3, #8]
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	6892      	ldr	r2, [r2, #8]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	3304      	adds	r3, #4
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d103      	bne.n	80051bc <xTaskRemoveFromEventList+0x94>
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	605a      	str	r2, [r3, #4]
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2200      	movs	r2, #0
 80051c0:	615a      	str	r2, [r3, #20]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	1e5a      	subs	r2, r3, #1
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	2201      	movs	r2, #1
 80051d2:	409a      	lsls	r2, r3
 80051d4:	4b38      	ldr	r3, [pc, #224]	@ (80052b8 <xTaskRemoveFromEventList+0x190>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4313      	orrs	r3, r2
 80051da:	4a37      	ldr	r2, [pc, #220]	@ (80052b8 <xTaskRemoveFromEventList+0x190>)
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e2:	4936      	ldr	r1, [pc, #216]	@ (80052bc <xTaskRemoveFromEventList+0x194>)
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	3304      	adds	r3, #4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	609a      	str	r2, [r3, #8]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	3204      	adds	r2, #4
 800520a:	605a      	str	r2, [r3, #4]
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	1d1a      	adds	r2, r3, #4
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	609a      	str	r2, [r3, #8]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4a26      	ldr	r2, [pc, #152]	@ (80052bc <xTaskRemoveFromEventList+0x194>)
 8005222:	441a      	add	r2, r3
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	615a      	str	r2, [r3, #20]
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800522c:	4923      	ldr	r1, [pc, #140]	@ (80052bc <xTaskRemoveFromEventList+0x194>)
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800523e:	1c59      	adds	r1, r3, #1
 8005240:	481e      	ldr	r0, [pc, #120]	@ (80052bc <xTaskRemoveFromEventList+0x194>)
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4403      	add	r3, r0
 800524c:	6019      	str	r1, [r3, #0]
 800524e:	e01b      	b.n	8005288 <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005250:	4b1b      	ldr	r3, [pc, #108]	@ (80052c0 <xTaskRemoveFromEventList+0x198>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	61da      	str	r2, [r3, #28]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	621a      	str	r2, [r3, #32]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	3218      	adds	r2, #24
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f103 0218 	add.w	r2, r3, #24
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	609a      	str	r2, [r3, #8]
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	4a11      	ldr	r2, [pc, #68]	@ (80052c0 <xTaskRemoveFromEventList+0x198>)
 800527c:	629a      	str	r2, [r3, #40]	@ 0x28
 800527e:	4b10      	ldr	r3, [pc, #64]	@ (80052c0 <xTaskRemoveFromEventList+0x198>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	4a0e      	ldr	r2, [pc, #56]	@ (80052c0 <xTaskRemoveFromEventList+0x198>)
 8005286:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528c:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <xTaskRemoveFromEventList+0x19c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	429a      	cmp	r2, r3
 8005294:	d905      	bls.n	80052a2 <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8005296:	2301      	movs	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800529a:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <xTaskRemoveFromEventList+0x1a0>)
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e001      	b.n	80052a6 <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 80052a6:	69fb      	ldr	r3, [r7, #28]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	08024b00 	.word	0x08024b00
 80052b4:	20000f34 	.word	0x20000f34
 80052b8:	20000f14 	.word	0x20000f14
 80052bc:	20000e10 	.word	0x20000e10
 80052c0:	20000ecc 	.word	0x20000ecc
 80052c4:	20000e0c 	.word	0x20000e0c
 80052c8:	20000f20 	.word	0x20000f20

080052cc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80052d6:	4b52      	ldr	r3, [pc, #328]	@ (8005420 <vTaskRemoveFromUnorderedEventList+0x154>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <vTaskRemoveFromUnorderedEventList+0x1c>
 80052de:	f241 5143 	movw	r1, #5443	@ 0x1543
 80052e2:	4850      	ldr	r0, [pc, #320]	@ (8005424 <vTaskRemoveFromUnorderedEventList+0x158>)
 80052e4:	f7fc fb90 	bl	8001a08 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d104      	bne.n	8005308 <vTaskRemoveFromUnorderedEventList+0x3c>
 80052fe:	f241 514e 	movw	r1, #5454	@ 0x154e
 8005302:	4848      	ldr	r0, [pc, #288]	@ (8005424 <vTaskRemoveFromUnorderedEventList+0x158>)
 8005304:	f7fc fb80 	bl	8001a08 <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6892      	ldr	r2, [r2, #8]
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6852      	ldr	r2, [r2, #4]
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	429a      	cmp	r2, r3
 800532a:	d103      	bne.n	8005334 <vTaskRemoveFromUnorderedEventList+0x68>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	605a      	str	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	611a      	str	r2, [r3, #16]
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	1e5a      	subs	r2, r3, #1
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	68d2      	ldr	r2, [r2, #12]
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	6892      	ldr	r2, [r2, #8]
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	3304      	adds	r3, #4
 8005366:	429a      	cmp	r2, r3
 8005368:	d103      	bne.n	8005372 <vTaskRemoveFromUnorderedEventList+0xa6>
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2200      	movs	r2, #0
 8005376:	615a      	str	r2, [r3, #20]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	1e5a      	subs	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	2201      	movs	r2, #1
 8005388:	409a      	lsls	r2, r3
 800538a:	4b27      	ldr	r3, [pc, #156]	@ (8005428 <vTaskRemoveFromUnorderedEventList+0x15c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4313      	orrs	r3, r2
 8005390:	4a25      	ldr	r2, [pc, #148]	@ (8005428 <vTaskRemoveFromUnorderedEventList+0x15c>)
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005398:	4924      	ldr	r1, [pc, #144]	@ (800542c <vTaskRemoveFromUnorderedEventList+0x160>)
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	3304      	adds	r3, #4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	60da      	str	r2, [r3, #12]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	3204      	adds	r2, #4
 80053c0:	605a      	str	r2, [r3, #4]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	1d1a      	adds	r2, r3, #4
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	609a      	str	r2, [r3, #8]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4a15      	ldr	r2, [pc, #84]	@ (800542c <vTaskRemoveFromUnorderedEventList+0x160>)
 80053d8:	441a      	add	r2, r3
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	615a      	str	r2, [r3, #20]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e2:	4912      	ldr	r1, [pc, #72]	@ (800542c <vTaskRemoveFromUnorderedEventList+0x160>)
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053f4:	1c59      	adds	r1, r3, #1
 80053f6:	480d      	ldr	r0, [pc, #52]	@ (800542c <vTaskRemoveFromUnorderedEventList+0x160>)
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4403      	add	r3, r0
 8005402:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005408:	4b09      	ldr	r3, [pc, #36]	@ (8005430 <vTaskRemoveFromUnorderedEventList+0x164>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	429a      	cmp	r2, r3
 8005410:	d902      	bls.n	8005418 <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8005412:	4b08      	ldr	r3, [pc, #32]	@ (8005434 <vTaskRemoveFromUnorderedEventList+0x168>)
 8005414:	2201      	movs	r2, #1
 8005416:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 8005418:	bf00      	nop
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	20000f34 	.word	0x20000f34
 8005424:	08024b00 	.word	0x08024b00
 8005428:	20000f14 	.word	0x20000f14
 800542c:	20000e10 	.word	0x20000e10
 8005430:	20000e0c 	.word	0x20000e0c
 8005434:	20000f20 	.word	0x20000f20

08005438 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d104      	bne.n	8005450 <vTaskSetTimeOutState+0x18>
 8005446:	f241 5186 	movw	r1, #5510	@ 0x1586
 800544a:	4809      	ldr	r0, [pc, #36]	@ (8005470 <vTaskSetTimeOutState+0x38>)
 800544c:	f7fc fadc 	bl	8001a08 <vAssertCalled>
    taskENTER_CRITICAL();
 8005450:	f001 f9b6 	bl	80067c0 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005454:	4b07      	ldr	r3, [pc, #28]	@ (8005474 <vTaskSetTimeOutState+0x3c>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 800545c:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <vTaskSetTimeOutState+0x40>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8005464:	f001 f9d8 	bl	8006818 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	08024b00 	.word	0x08024b00
 8005474:	20000f24 	.word	0x20000f24
 8005478:	20000f10 	.word	0x20000f10

0800547c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005484:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <vTaskInternalSetTimeOutState+0x24>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800548c:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <vTaskInternalSetTimeOutState+0x28>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	20000f24 	.word	0x20000f24
 80054a4:	20000f10 	.word	0x20000f10

080054a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <xTaskCheckForTimeOut+0x1a>
 80054b8:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 80054bc:	4825      	ldr	r0, [pc, #148]	@ (8005554 <xTaskCheckForTimeOut+0xac>)
 80054be:	f7fc faa3 	bl	8001a08 <vAssertCalled>
    configASSERT( pxTicksToWait );
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <xTaskCheckForTimeOut+0x2a>
 80054c8:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 80054cc:	4821      	ldr	r0, [pc, #132]	@ (8005554 <xTaskCheckForTimeOut+0xac>)
 80054ce:	f7fc fa9b 	bl	8001a08 <vAssertCalled>

    taskENTER_CRITICAL();
 80054d2:	f001 f975 	bl	80067c0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80054d6:	4b20      	ldr	r3, [pc, #128]	@ (8005558 <xTaskCheckForTimeOut+0xb0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ee:	d102      	bne.n	80054f6 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80054f0:	2300      	movs	r3, #0
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e026      	b.n	8005544 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b18      	ldr	r3, [pc, #96]	@ (800555c <xTaskCheckForTimeOut+0xb4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d00a      	beq.n	8005518 <xTaskCheckForTimeOut+0x70>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	429a      	cmp	r2, r3
 800550a:	d305      	bcc.n	8005518 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800550c:	2301      	movs	r3, #1
 800550e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e015      	b.n	8005544 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	429a      	cmp	r2, r3
 8005520:	d20b      	bcs.n	800553a <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad2      	subs	r2, r2, r3
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff ffa4 	bl	800547c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	e004      	b.n	8005544 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005540:	2301      	movs	r3, #1
 8005542:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8005544:	f001 f968 	bl	8006818 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8005548:	697b      	ldr	r3, [r7, #20]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	08024b00 	.word	0x08024b00
 8005558:	20000f10 	.word	0x20000f10
 800555c:	20000f24 	.word	0x20000f24

08005560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8005564:	4b03      	ldr	r3, [pc, #12]	@ (8005574 <vTaskMissedYield+0x14>)
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800556a:	bf00      	nop
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	20000f20 	.word	0x20000f20

08005578 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005580:	f000 f852 	bl	8005628 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005584:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <prvIdleTask+0x28>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d9f9      	bls.n	8005580 <prvIdleTask+0x8>
            {
                taskYIELD();
 800558c:	4b05      	ldr	r3, [pc, #20]	@ (80055a4 <prvIdleTask+0x2c>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800559c:	e7f0      	b.n	8005580 <prvIdleTask+0x8>
 800559e:	bf00      	nop
 80055a0:	20000e10 	.word	0x20000e10
 80055a4:	e000ed04 	.word	0xe000ed04

080055a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ae:	2300      	movs	r3, #0
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	e00c      	b.n	80055ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4a12      	ldr	r2, [pc, #72]	@ (8005608 <prvInitialiseTaskLists+0x60>)
 80055c0:	4413      	add	r3, r2
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe f90a 	bl	80037dc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3301      	adds	r3, #1
 80055cc:	607b      	str	r3, [r7, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b06      	cmp	r3, #6
 80055d2:	d9ef      	bls.n	80055b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80055d4:	480d      	ldr	r0, [pc, #52]	@ (800560c <prvInitialiseTaskLists+0x64>)
 80055d6:	f7fe f901 	bl	80037dc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80055da:	480d      	ldr	r0, [pc, #52]	@ (8005610 <prvInitialiseTaskLists+0x68>)
 80055dc:	f7fe f8fe 	bl	80037dc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80055e0:	480c      	ldr	r0, [pc, #48]	@ (8005614 <prvInitialiseTaskLists+0x6c>)
 80055e2:	f7fe f8fb 	bl	80037dc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80055e6:	480c      	ldr	r0, [pc, #48]	@ (8005618 <prvInitialiseTaskLists+0x70>)
 80055e8:	f7fe f8f8 	bl	80037dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80055ec:	480b      	ldr	r0, [pc, #44]	@ (800561c <prvInitialiseTaskLists+0x74>)
 80055ee:	f7fe f8f5 	bl	80037dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80055f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005620 <prvInitialiseTaskLists+0x78>)
 80055f4:	4a05      	ldr	r2, [pc, #20]	@ (800560c <prvInitialiseTaskLists+0x64>)
 80055f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005624 <prvInitialiseTaskLists+0x7c>)
 80055fa:	4a05      	ldr	r2, [pc, #20]	@ (8005610 <prvInitialiseTaskLists+0x68>)
 80055fc:	601a      	str	r2, [r3, #0]
}
 80055fe:	bf00      	nop
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000e10 	.word	0x20000e10
 800560c:	20000e9c 	.word	0x20000e9c
 8005610:	20000eb0 	.word	0x20000eb0
 8005614:	20000ecc 	.word	0x20000ecc
 8005618:	20000ee0 	.word	0x20000ee0
 800561c:	20000ef8 	.word	0x20000ef8
 8005620:	20000ec4 	.word	0x20000ec4
 8005624:	20000ec8 	.word	0x20000ec8

08005628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800562e:	e019      	b.n	8005664 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8005630:	f001 f8c6 	bl	80067c0 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005634:	4b10      	ldr	r3, [pc, #64]	@ (8005678 <prvCheckTasksWaitingTermination+0x50>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3304      	adds	r3, #4
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe f955 	bl	80038f0 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <prvCheckTasksWaitingTermination+0x54>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3b01      	subs	r3, #1
 800564c:	4a0b      	ldr	r2, [pc, #44]	@ (800567c <prvCheckTasksWaitingTermination+0x54>)
 800564e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8005650:	4b0b      	ldr	r3, [pc, #44]	@ (8005680 <prvCheckTasksWaitingTermination+0x58>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3b01      	subs	r3, #1
 8005656:	4a0a      	ldr	r2, [pc, #40]	@ (8005680 <prvCheckTasksWaitingTermination+0x58>)
 8005658:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800565a:	f001 f8dd 	bl	8006818 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f810 	bl	8005684 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005664:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <prvCheckTasksWaitingTermination+0x58>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e1      	bne.n	8005630 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000ee0 	.word	0x20000ee0
 800567c:	20000f0c 	.word	0x20000f0c
 8005680:	20000ef4 	.word	0x20000ef4

08005684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005690:	4618      	mov	r0, r3
 8005692:	f001 fa6b 	bl	8006b6c <vPortFree>
            vPortFree( pxTCB );
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fa68 	bl	8006b6c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056a8:	4b0a      	ldr	r3, [pc, #40]	@ (80056d4 <prvResetNextTaskUnblockTime+0x30>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80056b2:	4b09      	ldr	r3, [pc, #36]	@ (80056d8 <prvResetNextTaskUnblockTime+0x34>)
 80056b4:	f04f 32ff 	mov.w	r2, #4294967295
 80056b8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80056ba:	e005      	b.n	80056c8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056bc:	4b05      	ldr	r3, [pc, #20]	@ (80056d4 <prvResetNextTaskUnblockTime+0x30>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a04      	ldr	r2, [pc, #16]	@ (80056d8 <prvResetNextTaskUnblockTime+0x34>)
 80056c6:	6013      	str	r3, [r2, #0]
}
 80056c8:	bf00      	nop
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000ec4 	.word	0x20000ec4
 80056d8:	20000f2c 	.word	0x20000f2c

080056dc <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 80056e2:	4b05      	ldr	r3, [pc, #20]	@ (80056f8 <xTaskGetCurrentTaskHandle+0x1c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 80056e8:	687b      	ldr	r3, [r7, #4]
        }
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20000e0c 	.word	0x20000e0c

080056fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8005702:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <xTaskGetSchedulerState+0x34>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d102      	bne.n	8005710 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800570a:	2301      	movs	r3, #1
 800570c:	607b      	str	r3, [r7, #4]
 800570e:	e008      	b.n	8005722 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005710:	4b08      	ldr	r3, [pc, #32]	@ (8005734 <xTaskGetSchedulerState+0x38>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8005718:	2302      	movs	r3, #2
 800571a:	607b      	str	r3, [r7, #4]
 800571c:	e001      	b.n	8005722 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800571e:	2300      	movs	r3, #0
 8005720:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8005722:	687b      	ldr	r3, [r7, #4]
    }
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	20000f18 	.word	0x20000f18
 8005734:	20000f34 	.word	0x20000f34

08005738 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8089 	beq.w	8005862 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005754:	4b45      	ldr	r3, [pc, #276]	@ (800586c <xTaskPriorityInherit+0x134>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575a:	429a      	cmp	r2, r3
 800575c:	d278      	bcs.n	8005850 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	db06      	blt.n	8005774 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8005766:	4b41      	ldr	r3, [pc, #260]	@ (800586c <xTaskPriorityInherit+0x134>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	f1c3 0207 	rsb	r2, r3, #7
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6959      	ldr	r1, [r3, #20]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4a3a      	ldr	r2, [pc, #232]	@ (8005870 <xTaskPriorityInherit+0x138>)
 8005786:	4413      	add	r3, r2
 8005788:	4299      	cmp	r1, r3
 800578a:	d159      	bne.n	8005840 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	3304      	adds	r3, #4
 8005790:	4618      	mov	r0, r3
 8005792:	f7fe f8ad 	bl	80038f0 <uxListRemove>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	2201      	movs	r2, #1
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	43da      	mvns	r2, r3
 80057a8:	4b32      	ldr	r3, [pc, #200]	@ (8005874 <xTaskPriorityInherit+0x13c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4013      	ands	r3, r2
 80057ae:	4a31      	ldr	r2, [pc, #196]	@ (8005874 <xTaskPriorityInherit+0x13c>)
 80057b0:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057b2:	4b2e      	ldr	r3, [pc, #184]	@ (800586c <xTaskPriorityInherit+0x134>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	2201      	movs	r2, #1
 80057c2:	409a      	lsls	r2, r3
 80057c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005874 <xTaskPriorityInherit+0x13c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005874 <xTaskPriorityInherit+0x13c>)
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d2:	4927      	ldr	r1, [pc, #156]	@ (8005870 <xTaskPriorityInherit+0x138>)
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	3304      	adds	r3, #4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	609a      	str	r2, [r3, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	60da      	str	r2, [r3, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	3204      	adds	r2, #4
 80057fa:	605a      	str	r2, [r3, #4]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1d1a      	adds	r2, r3, #4
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4a17      	ldr	r2, [pc, #92]	@ (8005870 <xTaskPriorityInherit+0x138>)
 8005812:	441a      	add	r2, r3
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	615a      	str	r2, [r3, #20]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800581c:	4914      	ldr	r1, [pc, #80]	@ (8005870 <xTaskPriorityInherit+0x138>)
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800582e:	1c59      	adds	r1, r3, #1
 8005830:	480f      	ldr	r0, [pc, #60]	@ (8005870 <xTaskPriorityInherit+0x138>)
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4403      	add	r3, r0
 800583c:	6019      	str	r1, [r3, #0]
 800583e:	e004      	b.n	800584a <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005840:	4b0a      	ldr	r3, [pc, #40]	@ (800586c <xTaskPriorityInherit+0x134>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800584a:	2301      	movs	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	e008      	b.n	8005862 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005854:	4b05      	ldr	r3, [pc, #20]	@ (800586c <xTaskPriorityInherit+0x134>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585a:	429a      	cmp	r2, r3
 800585c:	d201      	bcs.n	8005862 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800585e:	2301      	movs	r3, #1
 8005860:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8005862:	697b      	ldr	r3, [r7, #20]
    }
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000e0c 	.word	0x20000e0c
 8005870:	20000e10 	.word	0x20000e10
 8005874:	20000f14 	.word	0x20000f14

08005878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8082 	beq.w	8005994 <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005890:	4b43      	ldr	r3, [pc, #268]	@ (80059a0 <xTaskPriorityDisinherit+0x128>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	429a      	cmp	r2, r3
 8005898:	d004      	beq.n	80058a4 <xTaskPriorityDisinherit+0x2c>
 800589a:	f641 2128 	movw	r1, #6696	@ 0x1a28
 800589e:	4841      	ldr	r0, [pc, #260]	@ (80059a4 <xTaskPriorityDisinherit+0x12c>)
 80058a0:	f7fc f8b2 	bl	8001a08 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <xTaskPriorityDisinherit+0x3e>
 80058ac:	f641 2129 	movw	r1, #6697	@ 0x1a29
 80058b0:	483c      	ldr	r0, [pc, #240]	@ (80059a4 <xTaskPriorityDisinherit+0x12c>)
 80058b2:	f7fc f8a9 	bl	8001a08 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ba:	1e5a      	subs	r2, r3, #1
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d063      	beq.n	8005994 <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d15f      	bne.n	8005994 <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe f809 	bl	80038f0 <uxListRemove>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10a      	bne.n	80058fa <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e8:	2201      	movs	r2, #1
 80058ea:	fa02 f303 	lsl.w	r3, r2, r3
 80058ee:	43da      	mvns	r2, r3
 80058f0:	4b2d      	ldr	r3, [pc, #180]	@ (80059a8 <xTaskPriorityDisinherit+0x130>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4013      	ands	r3, r2
 80058f6:	4a2c      	ldr	r2, [pc, #176]	@ (80059a8 <xTaskPriorityDisinherit+0x130>)
 80058f8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	f1c3 0207 	rsb	r2, r3, #7
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005912:	2201      	movs	r2, #1
 8005914:	409a      	lsls	r2, r3
 8005916:	4b24      	ldr	r3, [pc, #144]	@ (80059a8 <xTaskPriorityDisinherit+0x130>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4313      	orrs	r3, r2
 800591c:	4a22      	ldr	r2, [pc, #136]	@ (80059a8 <xTaskPriorityDisinherit+0x130>)
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005924:	4921      	ldr	r1, [pc, #132]	@ (80059ac <xTaskPriorityDisinherit+0x134>)
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	440b      	add	r3, r1
 8005930:	3304      	adds	r3, #4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	60da      	str	r2, [r3, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	3204      	adds	r2, #4
 800594c:	605a      	str	r2, [r3, #4]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1d1a      	adds	r2, r3, #4
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	609a      	str	r2, [r3, #8]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4a12      	ldr	r2, [pc, #72]	@ (80059ac <xTaskPriorityDisinherit+0x134>)
 8005964:	441a      	add	r2, r3
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	615a      	str	r2, [r3, #20]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596e:	490f      	ldr	r1, [pc, #60]	@ (80059ac <xTaskPriorityDisinherit+0x134>)
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005980:	1c59      	adds	r1, r3, #1
 8005982:	480a      	ldr	r0, [pc, #40]	@ (80059ac <xTaskPriorityDisinherit+0x134>)
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4403      	add	r3, r0
 800598e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005990:	2301      	movs	r3, #1
 8005992:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8005994:	697b      	ldr	r3, [r7, #20]
    }
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000e0c 	.word	0x20000e0c
 80059a4:	08024b00 	.word	0x08024b00
 80059a8:	20000f14 	.word	0x20000f14
 80059ac:	20000e10 	.word	0x20000e10

080059b0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80059be:	2301      	movs	r3, #1
 80059c0:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8096 	beq.w	8005af6 <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <vTaskPriorityDisinheritAfterTimeout+0x2c>
 80059d2:	f641 2186 	movw	r1, #6790	@ 0x1a86
 80059d6:	484a      	ldr	r0, [pc, #296]	@ (8005b00 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 80059d8:	f7fc f816 	bl	8001a08 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d902      	bls.n	80059ec <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	e002      	b.n	80059f2 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f0:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d07c      	beq.n	8005af6 <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d177      	bne.n	8005af6 <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005a06:	4b3f      	ldr	r3, [pc, #252]	@ (8005b04 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d104      	bne.n	8005a1a <vTaskPriorityDisinheritAfterTimeout+0x6a>
 8005a10:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 8005a14:	483a      	ldr	r0, [pc, #232]	@ (8005b00 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8005a16:	f7fb fff7 	bl	8001a08 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1e:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	db04      	blt.n	8005a38 <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f1c3 0207 	rsb	r2, r3, #7
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	6959      	ldr	r1, [r3, #20]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4a30      	ldr	r2, [pc, #192]	@ (8005b08 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005a48:	4413      	add	r3, r2
 8005a4a:	4299      	cmp	r1, r3
 8005a4c:	d153      	bne.n	8005af6 <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fd ff4c 	bl	80038f0 <uxListRemove>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a62:	2201      	movs	r2, #1
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	43da      	mvns	r2, r3
 8005a6a:	4b28      	ldr	r3, [pc, #160]	@ (8005b0c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	4a26      	ldr	r2, [pc, #152]	@ (8005b0c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005a72:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a78:	2201      	movs	r2, #1
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	4b23      	ldr	r3, [pc, #140]	@ (8005b0c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	4a22      	ldr	r2, [pc, #136]	@ (8005b0c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a8a:	491f      	ldr	r1, [pc, #124]	@ (8005b08 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	3304      	adds	r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	609a      	str	r2, [r3, #8]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	60da      	str	r2, [r3, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	3204      	adds	r2, #4
 8005ab2:	605a      	str	r2, [r3, #4]
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	1d1a      	adds	r2, r3, #4
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8005b08 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005aca:	441a      	add	r2, r3
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	615a      	str	r2, [r3, #20]
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad4:	490c      	ldr	r1, [pc, #48]	@ (8005b08 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	4807      	ldr	r0, [pc, #28]	@ (8005b08 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4403      	add	r3, r0
 8005af4:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8005af6:	bf00      	nop
 8005af8:	3720      	adds	r7, #32
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	08024b00 	.word	0x08024b00
 8005b04:	20000e0c 	.word	0x20000e0c
 8005b08:	20000e10 	.word	0x20000e10
 8005b0c:	20000f14 	.word	0x20000f14

08005b10 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005b16:	4b09      	ldr	r3, [pc, #36]	@ (8005b3c <uxTaskResetEventItemValue+0x2c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8005b1e:	4b07      	ldr	r3, [pc, #28]	@ (8005b3c <uxTaskResetEventItemValue+0x2c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b24:	4b05      	ldr	r3, [pc, #20]	@ (8005b3c <uxTaskResetEventItemValue+0x2c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f1c2 0207 	rsb	r2, r2, #7
 8005b2c:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 8005b2e:	687b      	ldr	r3, [r7, #4]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20000e0c 	.word	0x20000e0c

08005b40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8005b46:	4b09      	ldr	r3, [pc, #36]	@ (8005b6c <pvTaskIncrementMutexHeldCount+0x2c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d004      	beq.n	8005b5c <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8005b5c:	687b      	ldr	r3, [r7, #4]
    }
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000e0c 	.word	0x20000e0c

08005b70 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <ulTaskGenericNotifyTake+0x20>
 8005b86:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 8005b8a:	4833      	ldr	r0, [pc, #204]	@ (8005c58 <ulTaskGenericNotifyTake+0xe8>)
 8005b8c:	f7fb ff3c 	bl	8001a08 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005b90:	f7fe ff96 	bl	8004ac0 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8005b94:	f000 fe14 	bl	80067c0 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8005b98:	4b30      	ldr	r3, [pc, #192]	@ (8005c5c <ulTaskGenericNotifyTake+0xec>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3318      	adds	r3, #24
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005baa:	4b2c      	ldr	r3, [pc, #176]	@ (8005c5c <ulTaskGenericNotifyTake+0xec>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3368      	adds	r3, #104	@ 0x68
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005bc2:	f000 fe29 	bl	8006818 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d103      	bne.n	8005bd4 <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bcc:	2101      	movs	r1, #1
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fc3a 	bl	8006448 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005bd4:	f7fe ff82 	bl	8004adc <xTaskResumeAll>
 8005bd8:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d10a      	bne.n	8005bf6 <ulTaskGenericNotifyTake+0x86>
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d107      	bne.n	8005bf6 <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 8005be6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c60 <ulTaskGenericNotifyTake+0xf0>)
 8005be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005bf6:	f000 fde3 	bl	80067c0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005bfa:	4b18      	ldr	r3, [pc, #96]	@ (8005c5c <ulTaskGenericNotifyTake+0xec>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3318      	adds	r3, #24
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d014      	beq.n	8005c3a <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d008      	beq.n	8005c28 <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8005c16:	4b11      	ldr	r3, [pc, #68]	@ (8005c5c <ulTaskGenericNotifyTake+0xec>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3318      	adds	r3, #24
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	2200      	movs	r2, #0
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	e008      	b.n	8005c3a <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8005c28:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <ulTaskGenericNotifyTake+0xec>)
 8005c2a:	6819      	ldr	r1, [r3, #0]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	1e5a      	subs	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3318      	adds	r3, #24
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005c3a:	4b08      	ldr	r3, [pc, #32]	@ (8005c5c <ulTaskGenericNotifyTake+0xec>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4413      	add	r3, r2
 8005c42:	3368      	adds	r3, #104	@ 0x68
 8005c44:	2200      	movs	r2, #0
 8005c46:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005c48:	f000 fde6 	bl	8006818 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8005c4c:	697b      	ldr	r3, [r7, #20]
    }
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3720      	adds	r7, #32
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	08024b00 	.word	0x08024b00
 8005c5c:	20000e0c 	.word	0x20000e0c
 8005c60:	e000ed04 	.word	0xe000ed04

08005c64 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <xTaskGenericNotifyWait+0x22>
 8005c7c:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 8005c80:	483e      	ldr	r0, [pc, #248]	@ (8005d7c <xTaskGenericNotifyWait+0x118>)
 8005c82:	f7fb fec1 	bl	8001a08 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005c86:	f7fe ff1b 	bl	8004ac0 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8005c8a:	f000 fd99 	bl	80067c0 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8005d80 <xTaskGenericNotifyWait+0x11c>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	3368      	adds	r3, #104	@ 0x68
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d01a      	beq.n	8005cd6 <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8005ca0:	4b37      	ldr	r3, [pc, #220]	@ (8005d80 <xTaskGenericNotifyWait+0x11c>)
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3318      	adds	r3, #24
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	6859      	ldr	r1, [r3, #4]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	4019      	ands	r1, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3318      	adds	r3, #24
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005cbe:	4b30      	ldr	r3, [pc, #192]	@ (8005d80 <xTaskGenericNotifyWait+0x11c>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3368      	adds	r3, #104	@ 0x68
 8005cc8:	2201      	movs	r2, #1
 8005cca:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005cd6:	f000 fd9f 	bl	8006818 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d103      	bne.n	8005ce8 <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ce4:	f000 fbb0 	bl	8006448 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005ce8:	f7fe fef8 	bl	8004adc <xTaskResumeAll>
 8005cec:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d10a      	bne.n	8005d0a <xTaskGenericNotifyWait+0xa6>
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d107      	bne.n	8005d0a <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 8005cfa:	4b22      	ldr	r3, [pc, #136]	@ (8005d84 <xTaskGenericNotifyWait+0x120>)
 8005cfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005d0a:	f000 fd59 	bl	80067c0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005d14:	4b1a      	ldr	r3, [pc, #104]	@ (8005d80 <xTaskGenericNotifyWait+0x11c>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3318      	adds	r3, #24
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005d26:	4b16      	ldr	r3, [pc, #88]	@ (8005d80 <xTaskGenericNotifyWait+0x11c>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3368      	adds	r3, #104	@ 0x68
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d002      	beq.n	8005d3e <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	e010      	b.n	8005d60 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8005d3e:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <xTaskGenericNotifyWait+0x11c>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3318      	adds	r3, #24
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	6859      	ldr	r1, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	43db      	mvns	r3, r3
 8005d50:	4019      	ands	r1, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3318      	adds	r3, #24
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005d60:	4b07      	ldr	r3, [pc, #28]	@ (8005d80 <xTaskGenericNotifyWait+0x11c>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	3368      	adds	r3, #104	@ 0x68
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005d6e:	f000 fd53 	bl	8006818 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8005d72:	69fb      	ldr	r3, [r7, #28]
    }
 8005d74:	4618      	mov	r0, r3
 8005d76:	3720      	adds	r7, #32
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	08024b00 	.word	0x08024b00
 8005d80:	20000e0c 	.word	0x20000e0c
 8005d84:	e000ed04 	.word	0xe000ed04

08005d88 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	@ 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005d96:	2301      	movs	r3, #1
 8005d98:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d004      	beq.n	8005daa <xTaskGenericNotify+0x22>
 8005da0:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 8005da4:	487b      	ldr	r0, [pc, #492]	@ (8005f94 <xTaskGenericNotify+0x20c>)
 8005da6:	f7fb fe2f 	bl	8001a08 <vAssertCalled>
        configASSERT( xTaskToNotify );
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <xTaskGenericNotify+0x32>
 8005db0:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 8005db4:	4877      	ldr	r0, [pc, #476]	@ (8005f94 <xTaskGenericNotify+0x20c>)
 8005db6:	f7fb fe27 	bl	8001a08 <vAssertCalled>
        pxTCB = xTaskToNotify;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 8005dbe:	f000 fcff 	bl	80067c0 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d007      	beq.n	8005dd8 <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005dc8:	6a3a      	ldr	r2, [r7, #32]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	3318      	adds	r3, #24
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd6:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005dd8:	6a3a      	ldr	r2, [r7, #32]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	4413      	add	r3, r2
 8005dde:	3368      	adds	r3, #104	@ 0x68
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4413      	add	r3, r2
 8005dea:	3368      	adds	r3, #104	@ 0x68
 8005dec:	2202      	movs	r2, #2
 8005dee:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d83f      	bhi.n	8005e76 <xTaskGenericNotify+0xee>
 8005df6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dfc <xTaskGenericNotify+0x74>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e8b 	.word	0x08005e8b
 8005e00:	08005e11 	.word	0x08005e11
 8005e04:	08005e2f 	.word	0x08005e2f
 8005e08:	08005e4b 	.word	0x08005e4b
 8005e0c:	08005e5b 	.word	0x08005e5b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	3318      	adds	r3, #24
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	6a39      	ldr	r1, [r7, #32]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	3318      	adds	r3, #24
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	440b      	add	r3, r1
 8005e2a:	605a      	str	r2, [r3, #4]
                    break;
 8005e2c:	e030      	b.n	8005e90 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005e2e:	6a3a      	ldr	r2, [r7, #32]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	3318      	adds	r3, #24
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	6a39      	ldr	r1, [r7, #32]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	3318      	adds	r3, #24
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	605a      	str	r2, [r3, #4]
                    break;
 8005e48:	e022      	b.n	8005e90 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005e4a:	6a3a      	ldr	r2, [r7, #32]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	3318      	adds	r3, #24
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	605a      	str	r2, [r3, #4]
                    break;
 8005e58:	e01a      	b.n	8005e90 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005e5a:	7ffb      	ldrb	r3, [r7, #31]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d007      	beq.n	8005e70 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005e60:	6a3a      	ldr	r2, [r7, #32]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	3318      	adds	r3, #24
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005e6e:	e00f      	b.n	8005e90 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8005e74:	e00c      	b.n	8005e90 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005e76:	4b48      	ldr	r3, [pc, #288]	@ (8005f98 <xTaskGenericNotify+0x210>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <xTaskGenericNotify+0x106>
 8005e7e:	f641 61da 	movw	r1, #7898	@ 0x1eda
 8005e82:	4844      	ldr	r0, [pc, #272]	@ (8005f94 <xTaskGenericNotify+0x20c>)
 8005e84:	f7fb fdc0 	bl	8001a08 <vAssertCalled>

                    break;
 8005e88:	e001      	b.n	8005e8e <xTaskGenericNotify+0x106>
                    break;
 8005e8a:	bf00      	nop
 8005e8c:	e000      	b.n	8005e90 <xTaskGenericNotify+0x108>
                    break;
 8005e8e:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005e90:	7ffb      	ldrb	r3, [r7, #31]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d177      	bne.n	8005f86 <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	6a3a      	ldr	r2, [r7, #32]
 8005ea2:	68d2      	ldr	r2, [r2, #12]
 8005ea4:	609a      	str	r2, [r3, #8]
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	6a3a      	ldr	r2, [r7, #32]
 8005eac:	6892      	ldr	r2, [r2, #8]
 8005eae:	605a      	str	r2, [r3, #4]
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d103      	bne.n	8005ec4 <xTaskGenericNotify+0x13c>
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	605a      	str	r2, [r3, #4]
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	615a      	str	r2, [r3, #20]
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	1e5a      	subs	r2, r3, #1
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed8:	2201      	movs	r2, #1
 8005eda:	409a      	lsls	r2, r3
 8005edc:	4b2f      	ldr	r3, [pc, #188]	@ (8005f9c <xTaskGenericNotify+0x214>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8005f9c <xTaskGenericNotify+0x214>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eea:	492d      	ldr	r1, [pc, #180]	@ (8005fa0 <xTaskGenericNotify+0x218>)
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	609a      	str	r2, [r3, #8]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	60da      	str	r2, [r3, #12]
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	6a3a      	ldr	r2, [r7, #32]
 8005f10:	3204      	adds	r2, #4
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	1d1a      	adds	r2, r3, #4
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa0 <xTaskGenericNotify+0x218>)
 8005f2a:	441a      	add	r2, r3
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	615a      	str	r2, [r3, #20]
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f34:	491a      	ldr	r1, [pc, #104]	@ (8005fa0 <xTaskGenericNotify+0x218>)
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a3a      	ldr	r2, [r7, #32]
 8005f44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	4815      	ldr	r0, [pc, #84]	@ (8005fa0 <xTaskGenericNotify+0x218>)
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4403      	add	r3, r0
 8005f54:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d004      	beq.n	8005f68 <xTaskGenericNotify+0x1e0>
 8005f5e:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 8005f62:	480c      	ldr	r0, [pc, #48]	@ (8005f94 <xTaskGenericNotify+0x20c>)
 8005f64:	f7fb fd50 	bl	8001a08 <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8005f68:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa4 <xTaskGenericNotify+0x21c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d207      	bcs.n	8005f86 <xTaskGenericNotify+0x1fe>
 8005f76:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <xTaskGenericNotify+0x220>)
 8005f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005f86:	f000 fc47 	bl	8006818 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3728      	adds	r7, #40	@ 0x28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	08024b00 	.word	0x08024b00
 8005f98:	20000f10 	.word	0x20000f10
 8005f9c:	20000f14 	.word	0x20000f14
 8005fa0:	20000e10 	.word	0x20000e10
 8005fa4:	20000e0c 	.word	0x20000e0c
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08e      	sub	sp, #56	@ 0x38
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <xTaskGenericNotifyFromISR+0x22>
 8005fc4:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 8005fc8:	4899      	ldr	r0, [pc, #612]	@ (8006230 <xTaskGenericNotifyFromISR+0x284>)
 8005fca:	f7fb fd1d 	bl	8001a08 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d004      	beq.n	8005fde <xTaskGenericNotifyFromISR+0x32>
 8005fd4:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8005fd8:	4895      	ldr	r0, [pc, #596]	@ (8006230 <xTaskGenericNotifyFromISR+0x284>)
 8005fda:	f7fb fd15 	bl	8001a08 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fde:	f000 fcbd 	bl	800695c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8005fe6:	f3ef 8211 	mrs	r2, BASEPRI
 8005fea:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005fee:	b672      	cpsid	i
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	b662      	cpsie	i
 8005ffe:	61ba      	str	r2, [r7, #24]
 8006000:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8006002:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8006004:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 8006006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800600c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	3318      	adds	r3, #24
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800601a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800601c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4413      	add	r3, r2
 8006022:	3368      	adds	r3, #104	@ 0x68
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800602a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4413      	add	r3, r2
 8006030:	3368      	adds	r3, #104	@ 0x68
 8006032:	2202      	movs	r2, #2
 8006034:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	2b04      	cmp	r3, #4
 800603a:	d841      	bhi.n	80060c0 <xTaskGenericNotifyFromISR+0x114>
 800603c:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <xTaskGenericNotifyFromISR+0x98>)
 800603e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006042:	bf00      	nop
 8006044:	080060d5 	.word	0x080060d5
 8006048:	08006059 	.word	0x08006059
 800604c:	08006077 	.word	0x08006077
 8006050:	08006093 	.word	0x08006093
 8006054:	080060a3 	.word	0x080060a3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	3318      	adds	r3, #24
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	431a      	orrs	r2, r3
 8006068:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	3318      	adds	r3, #24
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	605a      	str	r2, [r3, #4]
                    break;
 8006074:	e031      	b.n	80060da <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	3318      	adds	r3, #24
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	3318      	adds	r3, #24
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	605a      	str	r2, [r3, #4]
                    break;
 8006090:	e023      	b.n	80060da <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	3318      	adds	r3, #24
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	605a      	str	r2, [r3, #4]
                    break;
 80060a0:	e01b      	b.n	80060da <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80060a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d007      	beq.n	80060ba <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80060aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	3318      	adds	r3, #24
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80060b8:	e00f      	b.n	80060da <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80060be:	e00c      	b.n	80060da <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80060c0:	4b5c      	ldr	r3, [pc, #368]	@ (8006234 <xTaskGenericNotifyFromISR+0x288>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <xTaskGenericNotifyFromISR+0x12c>
 80060c8:	f641 7169 	movw	r1, #8041	@ 0x1f69
 80060cc:	4858      	ldr	r0, [pc, #352]	@ (8006230 <xTaskGenericNotifyFromISR+0x284>)
 80060ce:	f7fb fc9b 	bl	8001a08 <vAssertCalled>
                    break;
 80060d2:	e001      	b.n	80060d8 <xTaskGenericNotifyFromISR+0x12c>
                    break;
 80060d4:	bf00      	nop
 80060d6:	e000      	b.n	80060da <xTaskGenericNotifyFromISR+0x12e>
                    break;
 80060d8:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80060da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060de:	2b01      	cmp	r3, #1
 80060e0:	f040 809a 	bne.w	8006218 <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80060e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <xTaskGenericNotifyFromISR+0x14a>
 80060ec:	f641 7174 	movw	r1, #8052	@ 0x1f74
 80060f0:	484f      	ldr	r0, [pc, #316]	@ (8006230 <xTaskGenericNotifyFromISR+0x284>)
 80060f2:	f7fb fc89 	bl	8001a08 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80060f6:	4b50      	ldr	r3, [pc, #320]	@ (8006238 <xTaskGenericNotifyFromISR+0x28c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d160      	bne.n	80061c0 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	623b      	str	r3, [r7, #32]
 8006104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800610a:	68d2      	ldr	r2, [r2, #12]
 800610c:	609a      	str	r2, [r3, #8]
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006114:	6892      	ldr	r2, [r2, #8]
 8006116:	605a      	str	r2, [r3, #4]
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	3304      	adds	r3, #4
 8006120:	429a      	cmp	r2, r3
 8006122:	d103      	bne.n	800612c <xTaskGenericNotifyFromISR+0x180>
 8006124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	605a      	str	r2, [r3, #4]
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	2200      	movs	r2, #0
 8006130:	615a      	str	r2, [r3, #20]
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	1e5a      	subs	r2, r3, #1
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006140:	2201      	movs	r2, #1
 8006142:	409a      	lsls	r2, r3
 8006144:	4b3d      	ldr	r3, [pc, #244]	@ (800623c <xTaskGenericNotifyFromISR+0x290>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4313      	orrs	r3, r2
 800614a:	4a3c      	ldr	r2, [pc, #240]	@ (800623c <xTaskGenericNotifyFromISR+0x290>)
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006152:	493b      	ldr	r1, [pc, #236]	@ (8006240 <xTaskGenericNotifyFromISR+0x294>)
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	3304      	adds	r3, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	61fb      	str	r3, [r7, #28]
 8006164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	609a      	str	r2, [r3, #8]
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	60da      	str	r2, [r3, #12]
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006178:	3204      	adds	r2, #4
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	1d1a      	adds	r2, r3, #4
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4a2b      	ldr	r2, [pc, #172]	@ (8006240 <xTaskGenericNotifyFromISR+0x294>)
 8006192:	441a      	add	r2, r3
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	615a      	str	r2, [r3, #20]
 8006198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800619c:	4928      	ldr	r1, [pc, #160]	@ (8006240 <xTaskGenericNotifyFromISR+0x294>)
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061ae:	1c59      	adds	r1, r3, #1
 80061b0:	4823      	ldr	r0, [pc, #140]	@ (8006240 <xTaskGenericNotifyFromISR+0x294>)
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4403      	add	r3, r0
 80061bc:	6019      	str	r1, [r3, #0]
 80061be:	e01b      	b.n	80061f8 <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80061c0:	4b20      	ldr	r3, [pc, #128]	@ (8006244 <xTaskGenericNotifyFromISR+0x298>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ca:	61da      	str	r2, [r3, #28]
 80061cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	621a      	str	r2, [r3, #32]
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061da:	3218      	adds	r2, #24
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e0:	f103 0218 	add.w	r2, r3, #24
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	609a      	str	r2, [r3, #8]
 80061e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ea:	4a16      	ldr	r2, [pc, #88]	@ (8006244 <xTaskGenericNotifyFromISR+0x298>)
 80061ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80061ee:	4b15      	ldr	r3, [pc, #84]	@ (8006244 <xTaskGenericNotifyFromISR+0x298>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	4a13      	ldr	r2, [pc, #76]	@ (8006244 <xTaskGenericNotifyFromISR+0x298>)
 80061f6:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061fc:	4b12      	ldr	r3, [pc, #72]	@ (8006248 <xTaskGenericNotifyFromISR+0x29c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006202:	429a      	cmp	r2, r3
 8006204:	d908      	bls.n	8006218 <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800620c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800620e:	2201      	movs	r2, #1
 8006210:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8006212:	4b0e      	ldr	r3, [pc, #56]	@ (800624c <xTaskGenericNotifyFromISR+0x2a0>)
 8006214:	2201      	movs	r2, #1
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8006222:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8006224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8006226:	4618      	mov	r0, r3
 8006228:	3738      	adds	r7, #56	@ 0x38
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	08024b00 	.word	0x08024b00
 8006234:	20000f10 	.word	0x20000f10
 8006238:	20000f34 	.word	0x20000f34
 800623c:	20000f14 	.word	0x20000f14
 8006240:	20000e10 	.word	0x20000e10
 8006244:	20000ecc 	.word	0x20000ecc
 8006248:	20000e0c 	.word	0x20000e0c
 800624c:	20000f20 	.word	0x20000f20

08006250 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006250:	b580      	push	{r7, lr}
 8006252:	b08e      	sub	sp, #56	@ 0x38
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <vTaskGenericNotifyGiveFromISR+0x1c>
 8006262:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 8006266:	4871      	ldr	r0, [pc, #452]	@ (800642c <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8006268:	f7fb fbce 	bl	8001a08 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <vTaskGenericNotifyGiveFromISR+0x2c>
 8006272:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 8006276:	486d      	ldr	r0, [pc, #436]	@ (800642c <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8006278:	f7fb fbc6 	bl	8001a08 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800627c:	f000 fb6e 	bl	800695c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8006284:	f3ef 8211 	mrs	r2, BASEPRI
 8006288:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800628c:	b672      	cpsid	i
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	b662      	cpsie	i
 800629c:	61fa      	str	r2, [r7, #28]
 800629e:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 80062a0:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80062a2:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80062a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4413      	add	r3, r2
 80062aa:	3368      	adds	r3, #104	@ 0x68
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80062b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4413      	add	r3, r2
 80062b8:	3368      	adds	r3, #104	@ 0x68
 80062ba:	2202      	movs	r2, #2
 80062bc:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80062be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	3318      	adds	r3, #24
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	3318      	adds	r3, #24
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80062d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062dc:	2b01      	cmp	r3, #1
 80062de:	f040 809a 	bne.w	8006416 <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80062e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <vTaskGenericNotifyGiveFromISR+0xa4>
 80062ea:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 80062ee:	484f      	ldr	r0, [pc, #316]	@ (800642c <vTaskGenericNotifyGiveFromISR+0x1dc>)
 80062f0:	f7fb fb8a 	bl	8001a08 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80062f4:	4b4e      	ldr	r3, [pc, #312]	@ (8006430 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d160      	bne.n	80063be <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80062fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	627b      	str	r3, [r7, #36]	@ 0x24
 8006302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006308:	68d2      	ldr	r2, [r2, #12]
 800630a:	609a      	str	r2, [r3, #8]
 800630c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006312:	6892      	ldr	r2, [r2, #8]
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631c:	3304      	adds	r3, #4
 800631e:	429a      	cmp	r2, r3
 8006320:	d103      	bne.n	800632a <vTaskGenericNotifyGiveFromISR+0xda>
 8006322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632c:	2200      	movs	r2, #0
 800632e:	615a      	str	r2, [r3, #20]
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	1e5a      	subs	r2, r3, #1
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800633a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	2201      	movs	r2, #1
 8006340:	409a      	lsls	r2, r3
 8006342:	4b3c      	ldr	r3, [pc, #240]	@ (8006434 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4313      	orrs	r3, r2
 8006348:	4a3a      	ldr	r2, [pc, #232]	@ (8006434 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800634e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006350:	4939      	ldr	r1, [pc, #228]	@ (8006438 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	440b      	add	r3, r1
 800635c:	3304      	adds	r3, #4
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	623b      	str	r3, [r7, #32]
 8006362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006364:	6a3a      	ldr	r2, [r7, #32]
 8006366:	609a      	str	r2, [r3, #8]
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636e:	60da      	str	r2, [r3, #12]
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006376:	3204      	adds	r2, #4
 8006378:	605a      	str	r2, [r3, #4]
 800637a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637c:	1d1a      	adds	r2, r3, #4
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	609a      	str	r2, [r3, #8]
 8006382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4a2a      	ldr	r2, [pc, #168]	@ (8006438 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8006390:	441a      	add	r2, r3
 8006392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006394:	615a      	str	r2, [r3, #20]
 8006396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639a:	4927      	ldr	r1, [pc, #156]	@ (8006438 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063ac:	1c59      	adds	r1, r3, #1
 80063ae:	4822      	ldr	r0, [pc, #136]	@ (8006438 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4403      	add	r3, r0
 80063ba:	6019      	str	r1, [r3, #0]
 80063bc:	e01b      	b.n	80063f6 <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80063be:	4b1f      	ldr	r3, [pc, #124]	@ (800643c <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063c8:	61da      	str	r2, [r3, #28]
 80063ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d0:	621a      	str	r2, [r3, #32]
 80063d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063d8:	3218      	adds	r2, #24
 80063da:	605a      	str	r2, [r3, #4]
 80063dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063de:	f103 0218 	add.w	r2, r3, #24
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	609a      	str	r2, [r3, #8]
 80063e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e8:	4a14      	ldr	r2, [pc, #80]	@ (800643c <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80063ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80063ec:	4b13      	ldr	r3, [pc, #76]	@ (800643c <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	4a12      	ldr	r2, [pc, #72]	@ (800643c <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80063f4:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fa:	4b11      	ldr	r3, [pc, #68]	@ (8006440 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006400:	429a      	cmp	r2, r3
 8006402:	d908      	bls.n	8006416 <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8006410:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 8006412:	2201      	movs	r2, #1
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	617b      	str	r3, [r7, #20]
    __asm volatile
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f383 8811 	msr	BASEPRI, r3
}
 8006420:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 8006422:	bf00      	nop
 8006424:	3738      	adds	r7, #56	@ 0x38
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	08024b00 	.word	0x08024b00
 8006430:	20000f34 	.word	0x20000f34
 8006434:	20000f14 	.word	0x20000f14
 8006438:	20000e10 	.word	0x20000e10
 800643c:	20000ecc 	.word	0x20000ecc
 8006440:	20000e0c 	.word	0x20000e0c
 8006444:	20000f20 	.word	0x20000f20

08006448 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006452:	4b37      	ldr	r3, [pc, #220]	@ (8006530 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8006458:	4b36      	ldr	r3, [pc, #216]	@ (8006534 <prvAddCurrentTaskToDelayedList+0xec>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800645e:	4b36      	ldr	r3, [pc, #216]	@ (8006538 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006464:	4b35      	ldr	r3, [pc, #212]	@ (800653c <prvAddCurrentTaskToDelayedList+0xf4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3304      	adds	r3, #4
 800646a:	4618      	mov	r0, r3
 800646c:	f7fd fa40 	bl	80038f0 <uxListRemove>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10b      	bne.n	800648e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006476:	4b31      	ldr	r3, [pc, #196]	@ (800653c <prvAddCurrentTaskToDelayedList+0xf4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647c:	2201      	movs	r2, #1
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43da      	mvns	r2, r3
 8006484:	4b2e      	ldr	r3, [pc, #184]	@ (8006540 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4013      	ands	r3, r2
 800648a:	4a2d      	ldr	r2, [pc, #180]	@ (8006540 <prvAddCurrentTaskToDelayedList+0xf8>)
 800648c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d124      	bne.n	80064e0 <prvAddCurrentTaskToDelayedList+0x98>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d021      	beq.n	80064e0 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800649c:	4b29      	ldr	r3, [pc, #164]	@ (8006544 <prvAddCurrentTaskToDelayedList+0xfc>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	4b26      	ldr	r3, [pc, #152]	@ (800653c <prvAddCurrentTaskToDelayedList+0xf4>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	609a      	str	r2, [r3, #8]
 80064aa:	4b24      	ldr	r3, [pc, #144]	@ (800653c <prvAddCurrentTaskToDelayedList+0xf4>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	6892      	ldr	r2, [r2, #8]
 80064b2:	60da      	str	r2, [r3, #12]
 80064b4:	4b21      	ldr	r3, [pc, #132]	@ (800653c <prvAddCurrentTaskToDelayedList+0xf4>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	3204      	adds	r2, #4
 80064be:	605a      	str	r2, [r3, #4]
 80064c0:	4b1e      	ldr	r3, [pc, #120]	@ (800653c <prvAddCurrentTaskToDelayedList+0xf4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	1d1a      	adds	r2, r3, #4
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	609a      	str	r2, [r3, #8]
 80064ca:	4b1c      	ldr	r3, [pc, #112]	@ (800653c <prvAddCurrentTaskToDelayedList+0xf4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006544 <prvAddCurrentTaskToDelayedList+0xfc>)
 80064d0:	615a      	str	r2, [r3, #20]
 80064d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006544 <prvAddCurrentTaskToDelayedList+0xfc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3301      	adds	r3, #1
 80064d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006544 <prvAddCurrentTaskToDelayedList+0xfc>)
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80064de:	e022      	b.n	8006526 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4413      	add	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064e8:	4b14      	ldr	r3, [pc, #80]	@ (800653c <prvAddCurrentTaskToDelayedList+0xf4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d207      	bcs.n	8006508 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80064f8:	4b10      	ldr	r3, [pc, #64]	@ (800653c <prvAddCurrentTaskToDelayedList+0xf4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3304      	adds	r3, #4
 80064fe:	4619      	mov	r1, r3
 8006500:	6978      	ldr	r0, [r7, #20]
 8006502:	f7fd f9bc 	bl	800387e <vListInsert>
}
 8006506:	e00e      	b.n	8006526 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006508:	4b0c      	ldr	r3, [pc, #48]	@ (800653c <prvAddCurrentTaskToDelayedList+0xf4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	69b8      	ldr	r0, [r7, #24]
 8006512:	f7fd f9b4 	bl	800387e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006516:	4b0c      	ldr	r3, [pc, #48]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x100>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	429a      	cmp	r2, r3
 800651e:	d202      	bcs.n	8006526 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8006520:	4a09      	ldr	r2, [pc, #36]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x100>)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6013      	str	r3, [r2, #0]
}
 8006526:	bf00      	nop
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000f10 	.word	0x20000f10
 8006534:	20000ec4 	.word	0x20000ec4
 8006538:	20000ec8 	.word	0x20000ec8
 800653c:	20000e0c 	.word	0x20000e0c
 8006540:	20000f14 	.word	0x20000f14
 8006544:	20000ef8 	.word	0x20000ef8
 8006548:	20000f2c 	.word	0x20000f2c

0800654c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3b04      	subs	r3, #4
 800655c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006564:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3b04      	subs	r3, #4
 800656a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f023 0201 	bic.w	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3b04      	subs	r3, #4
 800657a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800657c:	4a0c      	ldr	r2, [pc, #48]	@ (80065b0 <pxPortInitialiseStack+0x64>)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3b14      	subs	r3, #20
 8006586:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3b04      	subs	r3, #4
 8006592:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f06f 0202 	mvn.w	r2, #2
 800659a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3b20      	subs	r3, #32
 80065a0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80065a2:	68fb      	ldr	r3, [r7, #12]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	080065b5 	.word	0x080065b5

080065b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80065be:	4b0f      	ldr	r3, [pc, #60]	@ (80065fc <prvTaskExitError+0x48>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c6:	d003      	beq.n	80065d0 <prvTaskExitError+0x1c>
 80065c8:	21ee      	movs	r1, #238	@ 0xee
 80065ca:	480d      	ldr	r0, [pc, #52]	@ (8006600 <prvTaskExitError+0x4c>)
 80065cc:	f7fb fa1c 	bl	8001a08 <vAssertCalled>
    __asm volatile
 80065d0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80065d4:	b672      	cpsid	i
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	b662      	cpsie	i
 80065e4:	607b      	str	r3, [r7, #4]
}
 80065e6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80065e8:	bf00      	nop
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0fc      	beq.n	80065ea <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	2000000c 	.word	0x2000000c
 8006600:	08024b2c 	.word	0x08024b2c
	...

08006610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006610:	4b07      	ldr	r3, [pc, #28]	@ (8006630 <pxCurrentTCBConst2>)
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	6808      	ldr	r0, [r1, #0]
 8006616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661a:	f380 8809 	msr	PSP, r0
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f380 8811 	msr	BASEPRI, r0
 800662a:	4770      	bx	lr
 800662c:	f3af 8000 	nop.w

08006630 <pxCurrentTCBConst2>:
 8006630:	20000e0c 	.word	0x20000e0c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop

08006638 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006638:	4808      	ldr	r0, [pc, #32]	@ (800665c <prvPortStartFirstTask+0x24>)
 800663a:	6800      	ldr	r0, [r0, #0]
 800663c:	6800      	ldr	r0, [r0, #0]
 800663e:	f380 8808 	msr	MSP, r0
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f380 8814 	msr	CONTROL, r0
 800664a:	b662      	cpsie	i
 800664c:	b661      	cpsie	f
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	df00      	svc	0
 8006658:	bf00      	nop
 800665a:	0000      	.short	0x0000
 800665c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8006660:	bf00      	nop
 8006662:	bf00      	nop

08006664 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800666a:	4b4a      	ldr	r3, [pc, #296]	@ (8006794 <xPortStartScheduler+0x130>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	332c      	adds	r3, #44	@ 0x2c
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a48      	ldr	r2, [pc, #288]	@ (8006798 <xPortStartScheduler+0x134>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <xPortStartScheduler+0x22>
 800667c:	f240 114b 	movw	r1, #331	@ 0x14b
 8006680:	4846      	ldr	r0, [pc, #280]	@ (800679c <xPortStartScheduler+0x138>)
 8006682:	f7fb f9c1 	bl	8001a08 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	3338      	adds	r3, #56	@ 0x38
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a44      	ldr	r2, [pc, #272]	@ (80067a0 <xPortStartScheduler+0x13c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d004      	beq.n	800669c <xPortStartScheduler+0x38>
 8006692:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8006696:	4841      	ldr	r0, [pc, #260]	@ (800679c <xPortStartScheduler+0x138>)
 8006698:	f7fb f9b6 	bl	8001a08 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066a0:	4b40      	ldr	r3, [pc, #256]	@ (80067a4 <xPortStartScheduler+0x140>)
 80066a2:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	22ff      	movs	r2, #255	@ 0xff
 80066b0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	4b38      	ldr	r3, [pc, #224]	@ (80067a8 <xPortStartScheduler+0x144>)
 80066c6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80066c8:	4b37      	ldr	r3, [pc, #220]	@ (80067a8 <xPortStartScheduler+0x144>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <xPortStartScheduler+0x76>
 80066d0:	f240 116f 	movw	r1, #367	@ 0x16f
 80066d4:	4831      	ldr	r0, [pc, #196]	@ (800679c <xPortStartScheduler+0x138>)
 80066d6:	f7fb f997 	bl	8001a08 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	43db      	mvns	r3, r3
 80066e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00d      	beq.n	8006704 <xPortStartScheduler+0xa0>
 80066e8:	f240 1173 	movw	r1, #371	@ 0x173
 80066ec:	482b      	ldr	r0, [pc, #172]	@ (800679c <xPortStartScheduler+0x138>)
 80066ee:	f7fb f98b 	bl	8001a08 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066f2:	e007      	b.n	8006704 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	3301      	adds	r3, #1
 80066f8:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066fa:	79fb      	ldrb	r3, [r7, #7]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	b2db      	uxtb	r3, r3
 8006702:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800670c:	2b80      	cmp	r3, #128	@ 0x80
 800670e:	d0f1      	beq.n	80066f4 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b08      	cmp	r3, #8
 8006714:	d103      	bne.n	800671e <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8006716:	4b25      	ldr	r3, [pc, #148]	@ (80067ac <xPortStartScheduler+0x148>)
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e004      	b.n	8006728 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f1c3 0307 	rsb	r3, r3, #7
 8006724:	4a21      	ldr	r2, [pc, #132]	@ (80067ac <xPortStartScheduler+0x148>)
 8006726:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006728:	4b20      	ldr	r3, [pc, #128]	@ (80067ac <xPortStartScheduler+0x148>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	4a1f      	ldr	r2, [pc, #124]	@ (80067ac <xPortStartScheduler+0x148>)
 8006730:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006732:	4b1e      	ldr	r3, [pc, #120]	@ (80067ac <xPortStartScheduler+0x148>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800673a:	4a1c      	ldr	r2, [pc, #112]	@ (80067ac <xPortStartScheduler+0x148>)
 800673c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	b2da      	uxtb	r2, r3
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006746:	4b1a      	ldr	r3, [pc, #104]	@ (80067b0 <xPortStartScheduler+0x14c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a19      	ldr	r2, [pc, #100]	@ (80067b0 <xPortStartScheduler+0x14c>)
 800674c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006750:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006752:	4b17      	ldr	r3, [pc, #92]	@ (80067b0 <xPortStartScheduler+0x14c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a16      	ldr	r2, [pc, #88]	@ (80067b0 <xPortStartScheduler+0x14c>)
 8006758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800675c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800675e:	4b15      	ldr	r3, [pc, #84]	@ (80067b4 <xPortStartScheduler+0x150>)
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006764:	f000 f8d4 	bl	8006910 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006768:	4b13      	ldr	r3, [pc, #76]	@ (80067b8 <xPortStartScheduler+0x154>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800676e:	f000 f8e9 	bl	8006944 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006772:	4b12      	ldr	r3, [pc, #72]	@ (80067bc <xPortStartScheduler+0x158>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a11      	ldr	r2, [pc, #68]	@ (80067bc <xPortStartScheduler+0x158>)
 8006778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800677c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800677e:	f7ff ff5b 	bl	8006638 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006782:	f7fe fbf1 	bl	8004f68 <vTaskSwitchContext>
    prvTaskExitError();
 8006786:	f7ff ff15 	bl	80065b4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	e000ed08 	.word	0xe000ed08
 8006798:	08006611 	.word	0x08006611
 800679c:	08024b2c 	.word	0x08024b2c
 80067a0:	08006861 	.word	0x08006861
 80067a4:	e000e400 	.word	0xe000e400
 80067a8:	20000f40 	.word	0x20000f40
 80067ac:	20000f44 	.word	0x20000f44
 80067b0:	e000ed20 	.word	0xe000ed20
 80067b4:	e000ed1c 	.word	0xe000ed1c
 80067b8:	2000000c 	.word	0x2000000c
 80067bc:	e000ef34 	.word	0xe000ef34

080067c0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
    __asm volatile
 80067c6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80067ca:	b672      	cpsid	i
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	b662      	cpsie	i
 80067da:	607b      	str	r3, [r7, #4]
}
 80067dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80067de:	4b0b      	ldr	r3, [pc, #44]	@ (800680c <vPortEnterCritical+0x4c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3301      	adds	r3, #1
 80067e4:	4a09      	ldr	r2, [pc, #36]	@ (800680c <vPortEnterCritical+0x4c>)
 80067e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80067e8:	4b08      	ldr	r3, [pc, #32]	@ (800680c <vPortEnterCritical+0x4c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d109      	bne.n	8006804 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067f0:	4b07      	ldr	r3, [pc, #28]	@ (8006810 <vPortEnterCritical+0x50>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <vPortEnterCritical+0x44>
 80067fa:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 80067fe:	4805      	ldr	r0, [pc, #20]	@ (8006814 <vPortEnterCritical+0x54>)
 8006800:	f7fb f902 	bl	8001a08 <vAssertCalled>
    }
}
 8006804:	bf00      	nop
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	2000000c 	.word	0x2000000c
 8006810:	e000ed04 	.word	0xe000ed04
 8006814:	08024b2c 	.word	0x08024b2c

08006818 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800681e:	4b0e      	ldr	r3, [pc, #56]	@ (8006858 <vPortExitCritical+0x40>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <vPortExitCritical+0x18>
 8006826:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800682a:	480c      	ldr	r0, [pc, #48]	@ (800685c <vPortExitCritical+0x44>)
 800682c:	f7fb f8ec 	bl	8001a08 <vAssertCalled>
    uxCriticalNesting--;
 8006830:	4b09      	ldr	r3, [pc, #36]	@ (8006858 <vPortExitCritical+0x40>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3b01      	subs	r3, #1
 8006836:	4a08      	ldr	r2, [pc, #32]	@ (8006858 <vPortExitCritical+0x40>)
 8006838:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800683a:	4b07      	ldr	r3, [pc, #28]	@ (8006858 <vPortExitCritical+0x40>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d105      	bne.n	800684e <vPortExitCritical+0x36>
 8006842:	2300      	movs	r3, #0
 8006844:	607b      	str	r3, [r7, #4]
    __asm volatile
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f383 8811 	msr	BASEPRI, r3
}
 800684c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	2000000c 	.word	0x2000000c
 800685c:	08024b2c 	.word	0x08024b2c

08006860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006860:	f3ef 8009 	mrs	r0, PSP
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	4b15      	ldr	r3, [pc, #84]	@ (80068c0 <pxCurrentTCBConst>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	f01e 0f10 	tst.w	lr, #16
 8006870:	bf08      	it	eq
 8006872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687a:	6010      	str	r0, [r2, #0]
 800687c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006880:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8006884:	b672      	cpsid	i
 8006886:	f380 8811 	msr	BASEPRI, r0
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	b662      	cpsie	i
 8006894:	f7fe fb68 	bl	8004f68 <vTaskSwitchContext>
 8006898:	f04f 0000 	mov.w	r0, #0
 800689c:	f380 8811 	msr	BASEPRI, r0
 80068a0:	bc09      	pop	{r0, r3}
 80068a2:	6819      	ldr	r1, [r3, #0]
 80068a4:	6808      	ldr	r0, [r1, #0]
 80068a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068aa:	f01e 0f10 	tst.w	lr, #16
 80068ae:	bf08      	it	eq
 80068b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068b4:	f380 8809 	msr	PSP, r0
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop

080068c0 <pxCurrentTCBConst>:
 80068c0:	20000e0c 	.word	0x20000e0c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop

080068c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
    __asm volatile
 80068ce:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80068d2:	b672      	cpsid	i
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	b662      	cpsie	i
 80068e2:	607b      	str	r3, [r7, #4]
}
 80068e4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80068e6:	f7fe fa2b 	bl	8004d40 <xTaskIncrementTick>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068f0:	4b06      	ldr	r3, [pc, #24]	@ (800690c <xPortSysTickHandler+0x44>)
 80068f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	2300      	movs	r3, #0
 80068fa:	603b      	str	r3, [r7, #0]
    __asm volatile
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	f383 8811 	msr	BASEPRI, r3
}
 8006902:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	e000ed04 	.word	0xe000ed04

08006910 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006914:	4b08      	ldr	r3, [pc, #32]	@ (8006938 <vPortSetupTimerInterrupt+0x28>)
 8006916:	2200      	movs	r2, #0
 8006918:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800691a:	4b08      	ldr	r3, [pc, #32]	@ (800693c <vPortSetupTimerInterrupt+0x2c>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006920:	4b07      	ldr	r3, [pc, #28]	@ (8006940 <vPortSetupTimerInterrupt+0x30>)
 8006922:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8006926:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006928:	4b03      	ldr	r3, [pc, #12]	@ (8006938 <vPortSetupTimerInterrupt+0x28>)
 800692a:	2203      	movs	r2, #3
 800692c:	601a      	str	r2, [r3, #0]
}
 800692e:	bf00      	nop
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	e000e010 	.word	0xe000e010
 800693c:	e000e018 	.word	0xe000e018
 8006940:	e000e014 	.word	0xe000e014

08006944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006954 <vPortEnableVFP+0x10>
 8006948:	6801      	ldr	r1, [r0, #0]
 800694a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800694e:	6001      	str	r1, [r0, #0]
 8006950:	4770      	bx	lr
 8006952:	0000      	.short	0x0000
 8006954:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop

0800695c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006962:	f3ef 8305 	mrs	r3, IPSR
 8006966:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b0f      	cmp	r3, #15
 800696c:	d90e      	bls.n	800698c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800696e:	4a10      	ldr	r2, [pc, #64]	@ (80069b0 <vPortValidateInterruptPriority+0x54>)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4413      	add	r3, r2
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006978:	4b0e      	ldr	r3, [pc, #56]	@ (80069b4 <vPortValidateInterruptPriority+0x58>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	78fa      	ldrb	r2, [r7, #3]
 800697e:	429a      	cmp	r2, r3
 8006980:	d204      	bcs.n	800698c <vPortValidateInterruptPriority+0x30>
 8006982:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8006986:	480c      	ldr	r0, [pc, #48]	@ (80069b8 <vPortValidateInterruptPriority+0x5c>)
 8006988:	f7fb f83e 	bl	8001a08 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800698c:	4b0b      	ldr	r3, [pc, #44]	@ (80069bc <vPortValidateInterruptPriority+0x60>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006994:	4b0a      	ldr	r3, [pc, #40]	@ (80069c0 <vPortValidateInterruptPriority+0x64>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d904      	bls.n	80069a6 <vPortValidateInterruptPriority+0x4a>
 800699c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80069a0:	4805      	ldr	r0, [pc, #20]	@ (80069b8 <vPortValidateInterruptPriority+0x5c>)
 80069a2:	f7fb f831 	bl	8001a08 <vAssertCalled>
    }
 80069a6:	bf00      	nop
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	e000e3f0 	.word	0xe000e3f0
 80069b4:	20000f40 	.word	0x20000f40
 80069b8:	08024b2c 	.word	0x08024b2c
 80069bc:	e000ed0c 	.word	0xe000ed0c
 80069c0:	20000f44 	.word	0x20000f44

080069c4 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 80069d0:	4b60      	ldr	r3, [pc, #384]	@ (8006b54 <pvPortMalloc+0x190>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d103      	bne.n	80069e0 <pvPortMalloc+0x1c>
 80069d8:	21da      	movs	r1, #218	@ 0xda
 80069da:	485f      	ldr	r0, [pc, #380]	@ (8006b58 <pvPortMalloc+0x194>)
 80069dc:	f7fb f814 	bl	8001a08 <vAssertCalled>

    if( xWantedSize > 0 )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d022      	beq.n	8006a2c <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80069e6:	2308      	movs	r3, #8
 80069e8:	43db      	mvns	r3, r3
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d81b      	bhi.n	8006a28 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 80069f0:	2208      	movs	r2, #8
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4413      	add	r3, r2
 80069f6:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d014      	beq.n	8006a2c <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	f1c3 0308 	rsb	r3, r3, #8
 8006a0c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d804      	bhi.n	8006a22 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	607b      	str	r3, [r7, #4]
 8006a20:	e004      	b.n	8006a2c <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]
 8006a26:	e001      	b.n	8006a2c <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8006a2c:	f7fe f848 	bl	8004ac0 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	db78      	blt.n	8006b28 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d075      	beq.n	8006b28 <pvPortMalloc+0x164>
 8006a3c:	4b47      	ldr	r3, [pc, #284]	@ (8006b5c <pvPortMalloc+0x198>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d870      	bhi.n	8006b28 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006a46:	4b46      	ldr	r3, [pc, #280]	@ (8006b60 <pvPortMalloc+0x19c>)
 8006a48:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8006a4a:	4b45      	ldr	r3, [pc, #276]	@ (8006b60 <pvPortMalloc+0x19c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8006a50:	e004      	b.n	8006a5c <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d903      	bls.n	8006a6e <pvPortMalloc+0xaa>
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f1      	bne.n	8006a52 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006a6e:	4b39      	ldr	r3, [pc, #228]	@ (8006b54 <pvPortMalloc+0x190>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d057      	beq.n	8006b28 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	4413      	add	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d904      	bls.n	8006a9e <pvPortMalloc+0xda>
 8006a94:	f240 1129 	movw	r1, #297	@ 0x129
 8006a98:	482f      	ldr	r0, [pc, #188]	@ (8006b58 <pvPortMalloc+0x194>)
 8006a9a:	f7fa ffb5 	bl	8001a08 <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	1ad2      	subs	r2, r2, r3
 8006aa6:	2308      	movs	r3, #8
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d91d      	bls.n	8006aea <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <pvPortMalloc+0x106>
 8006ac0:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8006ac4:	4824      	ldr	r0, [pc, #144]	@ (8006b58 <pvPortMalloc+0x194>)
 8006ac6:	f7fa ff9f 	bl	8001a08 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	1ad2      	subs	r2, r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006aea:	4b1c      	ldr	r3, [pc, #112]	@ (8006b5c <pvPortMalloc+0x198>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	4a19      	ldr	r2, [pc, #100]	@ (8006b5c <pvPortMalloc+0x198>)
 8006af6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006af8:	4b18      	ldr	r3, [pc, #96]	@ (8006b5c <pvPortMalloc+0x198>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <pvPortMalloc+0x1a0>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d203      	bcs.n	8006b0c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b04:	4b15      	ldr	r3, [pc, #84]	@ (8006b5c <pvPortMalloc+0x198>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a16      	ldr	r2, [pc, #88]	@ (8006b64 <pvPortMalloc+0x1a0>)
 8006b0a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006b1e:	4b12      	ldr	r3, [pc, #72]	@ (8006b68 <pvPortMalloc+0x1a4>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3301      	adds	r3, #1
 8006b24:	4a10      	ldr	r2, [pc, #64]	@ (8006b68 <pvPortMalloc+0x1a4>)
 8006b26:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006b28:	f7fd ffd8 	bl	8004adc <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 8006b32:	f7fa ff7d 	bl	8001a30 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d004      	beq.n	8006b4a <pvPortMalloc+0x186>
 8006b40:	f240 1173 	movw	r1, #371	@ 0x173
 8006b44:	4804      	ldr	r0, [pc, #16]	@ (8006b58 <pvPortMalloc+0x194>)
 8006b46:	f7fa ff5f 	bl	8001a08 <vAssertCalled>
    return pvReturn;
 8006b4a:	697b      	ldr	r3, [r7, #20]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20000f50 	.word	0x20000f50
 8006b58:	08024b68 	.word	0x08024b68
 8006b5c:	20000f54 	.word	0x20000f54
 8006b60:	20000f48 	.word	0x20000f48
 8006b64:	20000f58 	.word	0x20000f58
 8006b68:	20000f5c 	.word	0x20000f5c

08006b6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d03d      	beq.n	8006bfa <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006b7e:	2308      	movs	r3, #8
 8006b80:	425b      	negs	r3, r3
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	db04      	blt.n	8006b9e <vPortFree+0x32>
 8006b94:	f240 1187 	movw	r1, #391	@ 0x187
 8006b98:	481a      	ldr	r0, [pc, #104]	@ (8006c04 <vPortFree+0x98>)
 8006b9a:	f7fa ff35 	bl	8001a08 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d004      	beq.n	8006bb0 <vPortFree+0x44>
 8006ba6:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8006baa:	4816      	ldr	r0, [pc, #88]	@ (8006c04 <vPortFree+0x98>)
 8006bac:	f7fa ff2c 	bl	8001a08 <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	0fdb      	lsrs	r3, r3, #31
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01c      	beq.n	8006bfa <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d118      	bne.n	8006bfa <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8006bd4:	f7fd ff74 	bl	8004ac0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8006c08 <vPortFree+0x9c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4413      	add	r3, r2
 8006be2:	4a09      	ldr	r2, [pc, #36]	@ (8006c08 <vPortFree+0x9c>)
 8006be4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006be6:	68b8      	ldr	r0, [r7, #8]
 8006be8:	f000 f82a 	bl	8006c40 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006bec:	4b07      	ldr	r3, [pc, #28]	@ (8006c0c <vPortFree+0xa0>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	4a06      	ldr	r2, [pc, #24]	@ (8006c0c <vPortFree+0xa0>)
 8006bf4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006bf6:	f7fd ff71 	bl	8004adc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	08024b68 	.word	0x08024b68
 8006c08:	20000f54 	.word	0x20000f54
 8006c0c:	20000f60 	.word	0x20000f60

08006c10 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8006c14:	4b03      	ldr	r3, [pc, #12]	@ (8006c24 <xPortGetFreeHeapSize+0x14>)
 8006c16:	681b      	ldr	r3, [r3, #0]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	20000f54 	.word	0x20000f54

08006c28 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8006c28:	b480      	push	{r7}
 8006c2a:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8006c2c:	4b03      	ldr	r3, [pc, #12]	@ (8006c3c <xPortGetMinimumEverFreeHeapSize+0x14>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	20000f58 	.word	0x20000f58

08006c40 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006c48:	4b28      	ldr	r3, [pc, #160]	@ (8006cec <prvInsertBlockIntoFreeList+0xac>)
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	e002      	b.n	8006c54 <prvInsertBlockIntoFreeList+0x14>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d8f7      	bhi.n	8006c4e <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	4413      	add	r3, r2
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d108      	bne.n	8006c82 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	441a      	add	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	441a      	add	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d118      	bne.n	8006cc8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4b15      	ldr	r3, [pc, #84]	@ (8006cf0 <prvInsertBlockIntoFreeList+0xb0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d00d      	beq.n	8006cbe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	441a      	add	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	e008      	b.n	8006cd0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf0 <prvInsertBlockIntoFreeList+0xb0>)
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	e003      	b.n	8006cd0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d002      	beq.n	8006cde <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006cde:	bf00      	nop
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	20000f48 	.word	0x20000f48
 8006cf0:	20000f50 	.word	0x20000f50

08006cf4 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	@ 0x28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8006d08:	4b4b      	ldr	r3, [pc, #300]	@ (8006e38 <vPortDefineHeapRegions+0x144>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d004      	beq.n	8006d1a <vPortDefineHeapRegions+0x26>
 8006d10:	f240 2121 	movw	r1, #545	@ 0x221
 8006d14:	4849      	ldr	r0, [pc, #292]	@ (8006e3c <vPortDefineHeapRegions+0x148>)
 8006d16:	f7fa fe77 	bl	8001a08 <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	4413      	add	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8006d24:	e071      	b.n	8006e0a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00e      	beq.n	8006d5a <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	3307      	adds	r3, #7
 8006d40:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f023 0307 	bic.w	r3, r3, #7
 8006d48:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d56:	4413      	add	r3, r2
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d106      	bne.n	8006d72 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4a36      	ldr	r2, [pc, #216]	@ (8006e40 <vPortDefineHeapRegions+0x14c>)
 8006d68:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 8006d6a:	4b35      	ldr	r3, [pc, #212]	@ (8006e40 <vPortDefineHeapRegions+0x14c>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	605a      	str	r2, [r3, #4]
 8006d70:	e013      	b.n	8006d9a <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 8006d72:	4b31      	ldr	r3, [pc, #196]	@ (8006e38 <vPortDefineHeapRegions+0x144>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d104      	bne.n	8006d84 <vPortDefineHeapRegions+0x90>
 8006d7a:	f240 2149 	movw	r1, #585	@ 0x249
 8006d7e:	482f      	ldr	r0, [pc, #188]	@ (8006e3c <vPortDefineHeapRegions+0x148>)
 8006d80:	f7fa fe42 	bl	8001a08 <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8006d84:	4b2c      	ldr	r3, [pc, #176]	@ (8006e38 <vPortDefineHeapRegions+0x144>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d804      	bhi.n	8006d9a <vPortDefineHeapRegions+0xa6>
 8006d90:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8006d94:	4829      	ldr	r0, [pc, #164]	@ (8006e3c <vPortDefineHeapRegions+0x148>)
 8006d96:	f7fa fe37 	bl	8001a08 <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 8006d9a:	4b27      	ldr	r3, [pc, #156]	@ (8006e38 <vPortDefineHeapRegions+0x144>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	4413      	add	r3, r2
 8006da6:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006da8:	2208      	movs	r2, #8
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	1a9b      	subs	r3, r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	f023 0307 	bic.w	r3, r3, #7
 8006db6:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	4a1f      	ldr	r2, [pc, #124]	@ (8006e38 <vPortDefineHeapRegions+0x144>)
 8006dbc:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 8006dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8006e38 <vPortDefineHeapRegions+0x144>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e38 <vPortDefineHeapRegions+0x144>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006ddc:	4b16      	ldr	r3, [pc, #88]	@ (8006e38 <vPortDefineHeapRegions+0x144>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	6a3a      	ldr	r2, [r7, #32]
 8006df6:	4413      	add	r3, r2
 8006df8:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	4413      	add	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d189      	bne.n	8006d26 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8006e12:	4a0c      	ldr	r2, [pc, #48]	@ (8006e44 <vPortDefineHeapRegions+0x150>)
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8006e18:	4a0b      	ldr	r2, [pc, #44]	@ (8006e48 <vPortDefineHeapRegions+0x154>)
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d104      	bne.n	8006e2e <vPortDefineHeapRegions+0x13a>
 8006e24:	f240 2189 	movw	r1, #649	@ 0x289
 8006e28:	4804      	ldr	r0, [pc, #16]	@ (8006e3c <vPortDefineHeapRegions+0x148>)
 8006e2a:	f7fa fded 	bl	8001a08 <vAssertCalled>
}
 8006e2e:	bf00      	nop
 8006e30:	3728      	adds	r7, #40	@ 0x28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000f50 	.word	0x20000f50
 8006e3c:	08024b68 	.word	0x08024b68
 8006e40:	20000f48 	.word	0x20000f48
 8006e44:	20000f58 	.word	0x20000f58
 8006e48:	20000f54 	.word	0x20000f54

08006e4c <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b090      	sub	sp, #64	@ 0x40
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e58:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e64:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	330e      	adds	r3, #14
 8006e6a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e76:	f040 81bb 	bne.w	80071f0 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7c:	885b      	ldrh	r3, [r3, #2]
 8006e7e:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	f040 81b5 	bne.w	80071f0 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e88:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8006e8a:	2b06      	cmp	r3, #6
 8006e8c:	f040 81b0 	bne.w	80071f0 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 8006e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e92:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	f040 81ab 	bne.w	80071f0 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	330e      	adds	r3, #14
 8006e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8006ea0:	f107 0320 	add.w	r3, r7, #32
 8006ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8006ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eae:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 8006eb6:	4b9c      	ldr	r3, [pc, #624]	@ (8007128 <eARPProcessPacket+0x2dc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 8006ebe:	499b      	ldr	r1, [pc, #620]	@ (800712c <eARPProcessPacket+0x2e0>)
 8006ec0:	489b      	ldr	r0, [pc, #620]	@ (8007130 <eARPProcessPacket+0x2e4>)
 8006ec2:	f7fe faf1 	bl	80054a8 <xTaskCheckForTimeOut>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d102      	bne.n	8006ed2 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 8006ecc:	4b96      	ldr	r3, [pc, #600]	@ (8007128 <eARPProcessPacket+0x2dc>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	7a1b      	ldrb	r3, [r3, #8]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f040 8188 	bne.w	80071f0 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	061a      	lsls	r2, r3, #24
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006eec:	431a      	orrs	r2, r3
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	0a1b      	lsrs	r3, r3, #8
 8006ef2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	0e1b      	lsrs	r3, r3, #24
 8006efc:	4313      	orrs	r3, r2
 8006efe:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006f02:	d311      	bcc.n	8006f28 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	061a      	lsls	r2, r3, #24
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f10:	431a      	orrs	r2, r3
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	0a1b      	lsrs	r3, r3, #8
 8006f16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	0e1b      	lsrs	r3, r3, #24
 8006f20:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f280 8164 	bge.w	80071f0 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8006f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d021      	beq.n	8006f72 <eARPProcessPacket+0x126>
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d11c      	bne.n	8006f72 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006f38:	4b7b      	ldr	r3, [pc, #492]	@ (8007128 <eARPProcessPacket+0x2dc>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f040 8157 	bne.w	80071f0 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 8006f42:	4b79      	ldr	r3, [pc, #484]	@ (8007128 <eARPProcessPacket+0x2dc>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	4a77      	ldr	r2, [pc, #476]	@ (8007128 <eARPProcessPacket+0x2dc>)
 8006f4a:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006f54:	f000 fe32 	bl	8007bbc <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8006f58:	f7fd fec4 	bl	8004ce4 <xTaskGetTickCount>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	4a75      	ldr	r2, [pc, #468]	@ (8007134 <eARPProcessPacket+0x2e8>)
 8006f60:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 8006f62:	4873      	ldr	r0, [pc, #460]	@ (8007130 <eARPProcessPacket+0x2e4>)
 8006f64:	f7fe fa68 	bl	8005438 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8006f68:	4b70      	ldr	r3, [pc, #448]	@ (800712c <eARPProcessPacket+0x2e0>)
 8006f6a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006f6e:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006f70:	e13e      	b.n	80071f0 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	88db      	ldrh	r3, [r3, #6]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f7c:	d14a      	bne.n	8007014 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	061a      	lsls	r2, r3, #24
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f94:	431a      	orrs	r2, r3
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	0e1b      	lsrs	r3, r3, #24
 8006f9a:	ea42 0103 	orr.w	r1, r2, r3
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	061a      	lsls	r2, r3, #24
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	021b      	lsls	r3, r3, #8
 8006fa6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006faa:	431a      	orrs	r2, r3
 8006fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	0e1b      	lsrs	r3, r3, #24
 8006fba:	ea42 0003 	orr.w	r0, r2, r3
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <eARPProcessPacket+0x180>
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	061a      	lsls	r2, r3, #24
 8006fca:	e000      	b.n	8006fce <eARPProcessPacket+0x182>
 8006fcc:	2200      	movs	r2, #0
 8006fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <eARPProcessPacket+0x194>
 8006fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006fde:	e000      	b.n	8006fe2 <eARPProcessPacket+0x196>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <eARPProcessPacket+0x1aa>
 8006fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ff4:	e000      	b.n	8006ff8 <eARPProcessPacket+0x1ac>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <eARPProcessPacket+0x1bc>
 8007000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	0e1b      	lsrs	r3, r3, #24
 8007006:	e000      	b.n	800700a <eARPProcessPacket+0x1be>
 8007008:	2300      	movs	r3, #0
 800700a:	4313      	orrs	r3, r2
 800700c:	4602      	mov	r2, r0
 800700e:	484a      	ldr	r0, [pc, #296]	@ (8007138 <eARPProcessPacket+0x2ec>)
 8007010:	f01b fbd8 	bl	80227c4 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8007014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007016:	88db      	ldrh	r3, [r3, #6]
 8007018:	b29b      	uxth	r3, r3
 800701a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800701e:	d151      	bne.n	80070c4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8007020:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8007022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007024:	429a      	cmp	r2, r3
 8007026:	d04d      	beq.n	80070c4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8007028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702a:	2b00      	cmp	r3, #0
 800702c:	d04a      	beq.n	80070c4 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	061a      	lsls	r2, r3, #24
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800703a:	431a      	orrs	r2, r3
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	0a1b      	lsrs	r3, r3, #8
 8007040:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007044:	431a      	orrs	r2, r3
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	0e1b      	lsrs	r3, r3, #24
 800704a:	ea42 0103 	orr.w	r1, r2, r3
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	061a      	lsls	r2, r3, #24
 8007052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007054:	021b      	lsls	r3, r3, #8
 8007056:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800705a:	431a      	orrs	r2, r3
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	0a1b      	lsrs	r3, r3, #8
 8007060:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007064:	431a      	orrs	r2, r3
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	0e1b      	lsrs	r3, r3, #24
 800706a:	ea42 0003 	orr.w	r0, r2, r3
 800706e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <eARPProcessPacket+0x230>
 8007074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	061a      	lsls	r2, r3, #24
 800707a:	e000      	b.n	800707e <eARPProcessPacket+0x232>
 800707c:	2200      	movs	r2, #0
 800707e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <eARPProcessPacket+0x244>
 8007084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800708e:	e000      	b.n	8007092 <eARPProcessPacket+0x246>
 8007090:	2300      	movs	r3, #0
 8007092:	431a      	orrs	r2, r3
 8007094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007096:	2b00      	cmp	r3, #0
 8007098:	d005      	beq.n	80070a6 <eARPProcessPacket+0x25a>
 800709a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	0a1b      	lsrs	r3, r3, #8
 80070a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80070a4:	e000      	b.n	80070a8 <eARPProcessPacket+0x25c>
 80070a6:	2300      	movs	r3, #0
 80070a8:	431a      	orrs	r2, r3
 80070aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <eARPProcessPacket+0x26c>
 80070b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	0e1b      	lsrs	r3, r3, #24
 80070b6:	e000      	b.n	80070ba <eARPProcessPacket+0x26e>
 80070b8:	2300      	movs	r3, #0
 80070ba:	4313      	orrs	r3, r2
 80070bc:	4602      	mov	r2, r0
 80070be:	481f      	ldr	r0, [pc, #124]	@ (800713c <eARPProcessPacket+0x2f0>)
 80070c0:	f01b fb80 	bl	80227c4 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 80070c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 8092 	beq.w	80071f0 <eARPProcessPacket+0x3a4>
 80070cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ce:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80070d2:	f003 0310 	and.w	r3, r3, #16
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8089 	beq.w	80071f0 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 80070de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e8:	d003      	beq.n	80070f2 <eARPProcessPacket+0x2a6>
 80070ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ee:	d077      	beq.n	80071e0 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 80070f0:	e07e      	b.n	80071f0 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 80070f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d121      	bne.n	8007140 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 80070fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070fe:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8007106:	2206      	movs	r2, #6
 8007108:	4619      	mov	r1, r3
 800710a:	f01c fd0c 	bl	8023b26 <memcmp>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d06c      	beq.n	80071ee <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	461a      	mov	r2, r3
 8007118:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800711a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800711c:	f000 f872 	bl	8007204 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8007120:	2302      	movs	r3, #2
 8007122:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8007126:	e062      	b.n	80071ee <eARPProcessPacket+0x3a2>
 8007128:	20000fc8 	.word	0x20000fc8
 800712c:	20000010 	.word	0x20000010
 8007130:	20000fcc 	.word	0x20000fcc
 8007134:	20000fc4 	.word	0x20000fc4
 8007138:	08024ba0 	.word	0x08024ba0
 800713c:	08024bd0 	.word	0x08024bd0
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007144:	429a      	cmp	r2, r3
 8007146:	d152      	bne.n	80071ee <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 8007148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	405a      	eors	r2, r3
 8007150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8007156:	2b00      	cmp	r3, #0
 8007158:	d149      	bne.n	80071ee <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 800715a:	4a28      	ldr	r2, [pc, #160]	@ (80071fc <eARPProcessPacket+0x3b0>)
 800715c:	f107 0318 	add.w	r3, r7, #24
 8007160:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007164:	6018      	str	r0, [r3, #0]
 8007166:	3304      	adds	r3, #4
 8007168:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 800716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716c:	3312      	adds	r3, #18
 800716e:	2206      	movs	r2, #6
 8007170:	4923      	ldr	r1, [pc, #140]	@ (8007200 <eARPProcessPacket+0x3b4>)
 8007172:	4618      	mov	r0, r3
 8007174:	f01c fcd7 	bl	8023b26 <memcmp>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 800717e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007180:	3312      	adds	r3, #18
 8007182:	f107 0118 	add.w	r1, r7, #24
 8007186:	2206      	movs	r2, #6
 8007188:	4618      	mov	r0, r3
 800718a:	f01c fccc 	bl	8023b26 <memcmp>
 800718e:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8007190:	2b00      	cmp	r3, #0
 8007192:	d12c      	bne.n	80071ee <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 8007194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007196:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	3308      	adds	r3, #8
 800719e:	2206      	movs	r2, #6
 80071a0:	4619      	mov	r1, r3
 80071a2:	f01c fcc0 	bl	8023b26 <memcmp>
 80071a6:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d020      	beq.n	80071ee <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 80071b0:	f107 020c 	add.w	r2, r7, #12
 80071b4:	f107 0110 	add.w	r1, r7, #16
 80071b8:	f107 0320 	add.w	r3, r7, #32
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fb11 	bl	80077e4 <eARPGetCacheEntry>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d112      	bne.n	80071ee <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d10e      	bne.n	80071ee <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	3308      	adds	r3, #8
 80071d4:	6a39      	ldr	r1, [r7, #32]
 80071d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 f9ef 	bl	80075bc <vARPRefreshCacheEntry>
                            break;
 80071de:	e006      	b.n	80071ee <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	461a      	mov	r2, r3
 80071e4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80071e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80071e8:	f000 f84a 	bl	8007280 <vARPProcessPacketReply>
                            break;
 80071ec:	e000      	b.n	80071f0 <eARPProcessPacket+0x3a4>
                            break;
 80071ee:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 80071f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 80071f4:	4618      	mov	r0, r3
 80071f6:	3740      	adds	r7, #64	@ 0x40
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	08024c00 	.word	0x08024c00
 8007200:	08027f4c 	.word	0x08027f4c

08007204 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	330e      	adds	r3, #14
 8007214:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	3308      	adds	r3, #8
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f9cc 	bl	80075bc <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	2200      	movs	r2, #0
 8007228:	719a      	strb	r2, [r3, #6]
 800722a:	2200      	movs	r2, #0
 800722c:	f042 0202 	orr.w	r2, r2, #2
 8007230:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	3308      	adds	r3, #8
 8007236:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	3312      	adds	r3, #18
 800723c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800723e:	2206      	movs	r2, #6
 8007240:	69b9      	ldr	r1, [r7, #24]
 8007242:	6978      	ldr	r0, [r7, #20]
 8007244:	f01b fcda 	bl	8022bfc <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	33e8      	adds	r3, #232	@ 0xe8
 8007252:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	3308      	adds	r3, #8
 8007258:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800725a:	2206      	movs	r2, #6
 800725c:	69b9      	ldr	r1, [r7, #24]
 800725e:	6978      	ldr	r0, [r7, #20]
 8007260:	f01b fccc 	bl	8022bfc <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	330e      	adds	r3, #14
 800726c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	601a      	str	r2, [r3, #0]
    }
 8007278:	bf00      	nop
 800727a:	3720      	adds	r7, #32
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8007280:	b580      	push	{r7, lr}
 8007282:	b08c      	sub	sp, #48	@ 0x30
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	330e      	adds	r3, #14
 8007290:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800729e:	429a      	cmp	r2, r3
 80072a0:	d005      	beq.n	80072ae <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f844 	bl	8007330 <xIsIPInARPCache>
 80072a8:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d106      	bne.n	80072bc <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80072ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b0:	3308      	adds	r3, #8
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f980 	bl	80075bc <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 80072bc:	4b1b      	ldr	r3, [pc, #108]	@ (800732c <vARPProcessPacketReply+0xac>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d02e      	beq.n	8007322 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 80072c4:	4b19      	ldr	r3, [pc, #100]	@ (800732c <vARPProcessPacketReply+0xac>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f003 f8a5 	bl	800a418 <uxIPHeaderSizePacket>
 80072ce:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 80072d0:	2b14      	cmp	r3, #20
 80072d2:	d126      	bne.n	8007322 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 80072d4:	4b15      	ldr	r3, [pc, #84]	@ (800732c <vARPProcessPacketReply+0xac>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	330e      	adds	r3, #14
 80072e0:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d11a      	bne.n	8007322 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 80072f0:	2301      	movs	r3, #1
 80072f2:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 80072f4:	4b0d      	ldr	r3, [pc, #52]	@ (800732c <vARPProcessPacketReply+0xac>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 80072fa:	f107 0314 	add.w	r3, r7, #20
 80072fe:	69f9      	ldr	r1, [r7, #28]
 8007300:	4618      	mov	r0, r3
 8007302:	f002 fcd5 	bl	8009cb0 <xSendEventStructToIPTask>
 8007306:	4603      	mov	r3, r0
 8007308:	2b01      	cmp	r3, #1
 800730a:	d004      	beq.n	8007316 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800730c:	4b07      	ldr	r3, [pc, #28]	@ (800732c <vARPProcessPacketReply+0xac>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f010 fbaf 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8007316:	4b05      	ldr	r3, [pc, #20]	@ (800732c <vARPProcessPacketReply+0xac>)
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 800731c:	2000      	movs	r0, #0
 800731e:	f003 fabd 	bl	800a89c <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8007322:	bf00      	nop
 8007324:	3730      	adds	r7, #48	@ 0x30
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	2000119c 	.word	0x2000119c

08007330 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 8007338:	2300      	movs	r3, #0
 800733a:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e017      	b.n	8007372 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8007342:	4a12      	ldr	r2, [pc, #72]	@ (800738c <xIsIPInARPCache+0x5c>)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	4413      	add	r3, r2
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	429a      	cmp	r2, r3
 8007350:	d10c      	bne.n	800736c <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 8007352:	2301      	movs	r3, #1
 8007354:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007356:	4a0d      	ldr	r2, [pc, #52]	@ (800738c <xIsIPInARPCache+0x5c>)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	4413      	add	r3, r2
 800735e:	330b      	adds	r3, #11
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 8007366:	2300      	movs	r3, #0
 8007368:	60bb      	str	r3, [r7, #8]
            }

            break;
 800736a:	e006      	b.n	800737a <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3301      	adds	r3, #1
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b05      	cmp	r3, #5
 8007376:	dde4      	ble.n	8007342 <xIsIPInARPCache+0x12>
 8007378:	e000      	b.n	800737c <xIsIPInARPCache+0x4c>
            break;
 800737a:	bf00      	nop
        }
    }

    return xReturn;
 800737c:	68bb      	ldr	r3, [r7, #8]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20000f64 	.word	0x20000f64

08007390 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8007390:	b590      	push	{r4, r7, lr}
 8007392:	b0a5      	sub	sp, #148	@ 0x94
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 8007398:	2300      	movs	r3, #0
 800739a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f003 f83a 	bl	800a418 <uxIPHeaderSizePacket>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b14      	cmp	r3, #20
 80073a8:	d002      	beq.n	80073b0 <xCheckRequiresARPResolution+0x20>
 80073aa:	2b28      	cmp	r3, #40	@ 0x28
 80073ac:	d029      	beq.n	8007402 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 80073ae:	e0b6      	b.n	800751e <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b4:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80073b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073b8:	330e      	adds	r3, #14
 80073ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c0:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 80073c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	405a      	eors	r2, r3
 80073cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	4013      	ands	r3, r2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f040 80a0 	bne.w	8007518 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 80073d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff ffa7 	bl	8007330 <xIsIPInARPCache>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f040 8097 	bne.w	8007518 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	4619      	mov	r1, r3
 80073f4:	4610      	mov	r0, r2
 80073f6:	f000 fbe1 	bl	8007bbc <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8007400:	e08a      	b.n	8007518 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007406:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800740a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800740e:	330e      	adds	r3, #14
 8007410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 8007414:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007418:	3308      	adds	r3, #8
 800741a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 800741e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007422:	799b      	ldrb	r3, [r3, #6]
 8007424:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 8007428:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800742c:	2b06      	cmp	r3, #6
 800742e:	d003      	beq.n	8007438 <xCheckRequiresARPResolution+0xa8>
 8007430:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007434:	2b11      	cmp	r3, #17
 8007436:	d171      	bne.n	800751c <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 8007438:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800743c:	f006 ff68 	bl	800e310 <xIPv6_GetIPType>
 8007440:	4603      	mov	r3, r0
 8007442:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 8007446:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800744a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00d      	beq.n	800746e <xCheckRequiresARPResolution+0xde>
 8007452:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8007456:	2b01      	cmp	r3, #1
 8007458:	d007      	beq.n	800746a <xCheckRequiresARPResolution+0xda>
 800745a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800745e:	2b04      	cmp	r3, #4
 8007460:	d101      	bne.n	8007466 <xCheckRequiresARPResolution+0xd6>
 8007462:	4b32      	ldr	r3, [pc, #200]	@ (800752c <xCheckRequiresARPResolution+0x19c>)
 8007464:	e004      	b.n	8007470 <xCheckRequiresARPResolution+0xe0>
 8007466:	4b32      	ldr	r3, [pc, #200]	@ (8007530 <xCheckRequiresARPResolution+0x1a0>)
 8007468:	e002      	b.n	8007470 <xCheckRequiresARPResolution+0xe0>
 800746a:	4b32      	ldr	r3, [pc, #200]	@ (8007534 <xCheckRequiresARPResolution+0x1a4>)
 800746c:	e000      	b.n	8007470 <xCheckRequiresARPResolution+0xe0>
 800746e:	4b32      	ldr	r3, [pc, #200]	@ (8007538 <xCheckRequiresARPResolution+0x1a8>)
 8007470:	461a      	mov	r2, r3
 8007472:	4832      	ldr	r0, [pc, #200]	@ (800753c <xCheckRequiresARPResolution+0x1ac>)
 8007474:	f01b f9a6 	bl	80227c4 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8007478:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800747c:	2b01      	cmp	r3, #1
 800747e:	d14d      	bne.n	800751c <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8007480:	f107 030c 	add.w	r3, r7, #12
 8007484:	2250      	movs	r2, #80	@ 0x50
 8007486:	2100      	movs	r1, #0
 8007488:	4618      	mov	r0, r3
 800748a:	f01b fcc4 	bl	8022e16 <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 800748e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8007492:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007496:	4619      	mov	r1, r3
 8007498:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800749c:	f004 fe0e 	bl	800c0bc <eNDGetCacheEntry>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 80074a6:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <xCheckRequiresARPResolution+0x12e>
 80074ae:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d101      	bne.n	80074ba <xCheckRequiresARPResolution+0x12a>
 80074b6:	4c22      	ldr	r4, [pc, #136]	@ (8007540 <xCheckRequiresARPResolution+0x1b0>)
 80074b8:	e002      	b.n	80074c0 <xCheckRequiresARPResolution+0x130>
 80074ba:	4c22      	ldr	r4, [pc, #136]	@ (8007544 <xCheckRequiresARPResolution+0x1b4>)
 80074bc:	e000      	b.n	80074c0 <xCheckRequiresARPResolution+0x130>
 80074be:	4c22      	ldr	r4, [pc, #136]	@ (8007548 <xCheckRequiresARPResolution+0x1b8>)
 80074c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074c2:	f107 010c 	add.w	r1, r7, #12
 80074c6:	2250      	movs	r2, #80	@ 0x50
 80074c8:	4618      	mov	r0, r3
 80074ca:	f006 ff79 	bl	800e3c0 <pcEndpointName>
 80074ce:	4603      	mov	r3, r0
 80074d0:	461a      	mov	r2, r3
 80074d2:	4621      	mov	r1, r4
 80074d4:	481d      	ldr	r0, [pc, #116]	@ (800754c <xCheckRequiresARPResolution+0x1bc>)
 80074d6:	f01b f975 	bl	80227c4 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 80074da:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d11c      	bne.n	800751c <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 80074e2:	2356      	movs	r3, #86	@ 0x56
 80074e4:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 80074e6:	2100      	movs	r1, #0
 80074e8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80074ea:	f010 fa5b 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 80074ee:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 80074f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00c      	beq.n	8007510 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074fc:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007504:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8007506:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800750a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800750c:	f005 f842 	bl	800c594 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 8007510:	2301      	movs	r3, #1
 8007512:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8007516:	e001      	b.n	800751c <xCheckRequiresARPResolution+0x18c>
                   break;
 8007518:	bf00      	nop
 800751a:	e000      	b.n	800751e <xCheckRequiresARPResolution+0x18e>
                   break;
 800751c:	bf00      	nop
    }

    return xNeedsARPResolution;
 800751e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 8007522:	4618      	mov	r0, r3
 8007524:	3794      	adds	r7, #148	@ 0x94
 8007526:	46bd      	mov	sp, r7
 8007528:	bd90      	pop	{r4, r7, pc}
 800752a:	bf00      	nop
 800752c:	08024c08 	.word	0x08024c08
 8007530:	08024c14 	.word	0x08024c14
 8007534:	08024c1c 	.word	0x08024c1c
 8007538:	08024c28 	.word	0x08024c28
 800753c:	08024c30 	.word	0x08024c30
 8007540:	08024c5c 	.word	0x08024c5c
 8007544:	08024c60 	.word	0x08024c60
 8007548:	08024c68 	.word	0x08024c68
 800754c:	08024c70 	.word	0x08024c70

08007550 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d026      	beq.n	80075ae <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007560:	2300      	movs	r3, #0
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	e020      	b.n	80075a8 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007566:	4a14      	ldr	r2, [pc, #80]	@ (80075b8 <vARPRefreshCacheEntryAge+0x68>)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	011b      	lsls	r3, r3, #4
 800756c:	4413      	add	r3, r2
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d115      	bne.n	80075a2 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	4a0f      	ldr	r2, [pc, #60]	@ (80075b8 <vARPRefreshCacheEntryAge+0x68>)
 800757c:	4413      	add	r3, r2
 800757e:	3304      	adds	r3, #4
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	2206      	movs	r2, #6
 8007584:	4618      	mov	r0, r3
 8007586:	f01c face 	bl	8023b26 <memcmp>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d108      	bne.n	80075a2 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007590:	4a09      	ldr	r2, [pc, #36]	@ (80075b8 <vARPRefreshCacheEntryAge+0x68>)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	4413      	add	r3, r2
 8007598:	330a      	adds	r3, #10
 800759a:	2296      	movs	r2, #150	@ 0x96
 800759c:	701a      	strb	r2, [r3, #0]
                    break;
 800759e:	bf00      	nop
                }
            }
        }
    }
}
 80075a0:	e005      	b.n	80075ae <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3301      	adds	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b05      	cmp	r3, #5
 80075ac:	dddb      	ble.n	8007566 <vARPRefreshCacheEntryAge+0x16>
}
 80075ae:	bf00      	nop
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000f64 	.word	0x20000f64

080075bc <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 80075c8:	f107 0310 	add.w	r3, r7, #16
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	68b9      	ldr	r1, [r7, #8]
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f85b 	bl	800768c <prvFindCacheEntry>
 80075d6:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d150      	bne.n	8007680 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	db0e      	blt.n	8007602 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	db0e      	blt.n	800760c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	4a25      	ldr	r2, [pc, #148]	@ (8007688 <vARPRefreshCacheEntry+0xcc>)
 80075f4:	4413      	add	r3, r2
 80075f6:	2210      	movs	r2, #16
 80075f8:	2100      	movs	r1, #0
 80075fa:	4618      	mov	r0, r3
 80075fc:	f01b fc0b 	bl	8022e16 <memset>
 8007600:	e004      	b.n	800760c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	db01      	blt.n	800760c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	4a1e      	ldr	r2, [pc, #120]	@ (8007688 <vARPRefreshCacheEntry+0xcc>)
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	4413      	add	r3, r2
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d01f      	beq.n	800765e <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	4a19      	ldr	r2, [pc, #100]	@ (8007688 <vARPRefreshCacheEntry+0xcc>)
 8007624:	4413      	add	r3, r2
 8007626:	3304      	adds	r3, #4
 8007628:	68f9      	ldr	r1, [r7, #12]
 800762a:	2206      	movs	r2, #6
 800762c:	4618      	mov	r0, r3
 800762e:	f01b fae5 	bl	8022bfc <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	4a14      	ldr	r2, [pc, #80]	@ (8007688 <vARPRefreshCacheEntry+0xcc>)
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	4413      	add	r3, r2
 800763a:	330a      	adds	r3, #10
 800763c:	2296      	movs	r2, #150	@ 0x96
 800763e:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	4a11      	ldr	r2, [pc, #68]	@ (8007688 <vARPRefreshCacheEntry+0xcc>)
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	4413      	add	r3, r2
 8007648:	330b      	adds	r3, #11
 800764a:	2201      	movs	r2, #1
 800764c:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	4a0d      	ldr	r2, [pc, #52]	@ (8007688 <vARPRefreshCacheEntry+0xcc>)
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	4413      	add	r3, r2
 8007656:	330c      	adds	r3, #12
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 800765c:	e010      	b.n	8007680 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	da0d      	bge.n	8007680 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	4a08      	ldr	r2, [pc, #32]	@ (8007688 <vARPRefreshCacheEntry+0xcc>)
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	4413      	add	r3, r2
 800766c:	330a      	adds	r3, #10
 800766e:	2205      	movs	r2, #5
 8007670:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	4a04      	ldr	r2, [pc, #16]	@ (8007688 <vARPRefreshCacheEntry+0xcc>)
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	4413      	add	r3, r2
 800767a:	330b      	adds	r3, #11
 800767c:	2200      	movs	r2, #0
 800767e:	701a      	strb	r2, [r3, #0]
}
 8007680:	bf00      	nop
 8007682:	3720      	adds	r7, #32
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	20000f64 	.word	0x20000f64

0800768c <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	@ 0x28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 80076a8:	2102      	movs	r1, #2
 80076aa:	68b8      	ldr	r0, [r7, #8]
 80076ac:	f006 fb24 	bl	800dcf8 <FreeRTOS_FindEndPointOnNetMask>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	bf14      	ite	ne
 80076b6:	2301      	movne	r3, #1
 80076b8:	2300      	moveq	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 80076be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80076c2:	3b01      	subs	r3, #1
 80076c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f04f 32ff 	mov.w	r2, #4294967295
 80076ce:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	f04f 32ff 	mov.w	r2, #4294967295
 80076d6:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2200      	movs	r2, #0
 80076dc:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80076de:	2300      	movs	r3, #0
 80076e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076e2:	e074      	b.n	80077ce <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 80076e4:	2300      	movs	r3, #0
 80076e6:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00e      	beq.n	800770c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	4a3b      	ldr	r2, [pc, #236]	@ (80077e0 <prvFindCacheEntry+0x154>)
 80076f4:	4413      	add	r3, r2
 80076f6:	3304      	adds	r3, #4
 80076f8:	68f9      	ldr	r1, [r7, #12]
 80076fa:	2206      	movs	r2, #6
 80076fc:	4618      	mov	r0, r3
 80076fe:	f01c fa12 	bl	8023b26 <memcmp>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800770c:	4a34      	ldr	r2, [pc, #208]	@ (80077e0 <prvFindCacheEntry+0x154>)
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	4413      	add	r3, r2
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	429a      	cmp	r2, r3
 800771a:	d125      	bne.n	8007768 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d103      	bne.n	800772a <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007726:	601a      	str	r2, [r3, #0]
                break;
 8007728:	e054      	b.n	80077d4 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d017      	beq.n	8007760 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007730:	4a2b      	ldr	r2, [pc, #172]	@ (80077e0 <prvFindCacheEntry+0x154>)
 8007732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007734:	011b      	lsls	r3, r3, #4
 8007736:	4413      	add	r3, r2
 8007738:	330a      	adds	r3, #10
 800773a:	2296      	movs	r2, #150	@ 0x96
 800773c:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 800773e:	4a28      	ldr	r2, [pc, #160]	@ (80077e0 <prvFindCacheEntry+0x154>)
 8007740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	4413      	add	r3, r2
 8007746:	330b      	adds	r3, #11
 8007748:	2201      	movs	r2, #1
 800774a:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 800774c:	4a24      	ldr	r2, [pc, #144]	@ (80077e0 <prvFindCacheEntry+0x154>)
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	011b      	lsls	r3, r3, #4
 8007752:	4413      	add	r3, r2
 8007754:	330c      	adds	r3, #12
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 800775a:	2301      	movs	r3, #1
 800775c:	61fb      	str	r3, [r7, #28]
                break;
 800775e:	e039      	b.n	80077d4 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	e02f      	b.n	80077c8 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d017      	beq.n	800779e <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 800776e:	4a1c      	ldr	r2, [pc, #112]	@ (80077e0 <prvFindCacheEntry+0x154>)
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	4413      	add	r3, r2
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2103      	movs	r1, #3
 800777a:	4618      	mov	r0, r3
 800777c:	f006 fabc 	bl	800dcf8 <FreeRTOS_FindEndPointOnNetMask>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	bf14      	ite	ne
 8007786:	2301      	movne	r3, #1
 8007788:	2300      	moveq	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	429a      	cmp	r2, r3
 8007794:	d118      	bne.n	80077c8 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800779a:	605a      	str	r2, [r3, #4]
 800779c:	e014      	b.n	80077c8 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800779e:	4a10      	ldr	r2, [pc, #64]	@ (80077e0 <prvFindCacheEntry+0x154>)
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	4413      	add	r3, r2
 80077a6:	330a      	adds	r3, #10
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d90a      	bls.n	80077c8 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 80077b2:	4a0b      	ldr	r2, [pc, #44]	@ (80077e0 <prvFindCacheEntry+0x154>)
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	4413      	add	r3, r2
 80077ba:	330a      	adds	r3, #10
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c6:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	3301      	adds	r3, #1
 80077cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d0:	2b05      	cmp	r3, #5
 80077d2:	dd87      	ble.n	80076e4 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 80077d4:	69fb      	ldr	r3, [r7, #28]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3728      	adds	r7, #40	@ 0x28
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000f64 	.word	0x20000f64

080077e4 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d104      	bne.n	8007804 <eARPGetCacheEntry+0x20>
 80077fa:	f240 31c9 	movw	r1, #969	@ 0x3c9
 80077fe:	483c      	ldr	r0, [pc, #240]	@ (80078f0 <eARPGetCacheEntry+0x10c>)
 8007800:	f7fa f902 	bl	8001a08 <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <eARPGetCacheEntry+0x30>
 800780a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 800780e:	4838      	ldr	r0, [pc, #224]	@ (80078f0 <eARPGetCacheEntry+0x10c>)
 8007810:	f7fa f8fa 	bl	8001a08 <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d104      	bne.n	8007824 <eARPGetCacheEntry+0x40>
 800781a:	f240 31cb 	movw	r1, #971	@ 0x3cb
 800781e:	4834      	ldr	r0, [pc, #208]	@ (80078f0 <eARPGetCacheEntry+0x10c>)
 8007820:	f7fa f8f2 	bl	8001a08 <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 8007830:	2100      	movs	r1, #0
 8007832:	6978      	ldr	r0, [r7, #20]
 8007834:	f006 f9d4 	bl	800dbe0 <FreeRTOS_FindEndPointOnIP_IPv4>
 8007838:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 800783a:	6978      	ldr	r0, [r7, #20]
 800783c:	f003 fc3c 	bl	800b0b8 <xIsIPv4Multicast>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d021      	beq.n	800788a <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8007846:	68b9      	ldr	r1, [r7, #8]
 8007848:	6978      	ldr	r0, [r7, #20]
 800784a:	f003 fd63 	bl	800b314 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 800784e:	2302      	movs	r3, #2
 8007850:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8007852:	2000      	movs	r0, #0
 8007854:	f006 f978 	bl	800db48 <FreeRTOS_FirstEndPoint>
 8007858:	61b8      	str	r0, [r7, #24]

            for( ;
 800785a:	e012      	b.n	8007882 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007862:	f003 0304 	and.w	r3, r3, #4
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d105      	bne.n	8007878 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8007872:	2301      	movs	r3, #1
 8007874:	77fb      	strb	r3, [r7, #31]
                    break;
 8007876:	e035      	b.n	80078e4 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8007878:	69b9      	ldr	r1, [r7, #24]
 800787a:	2000      	movs	r0, #0
 800787c:	f006 f986 	bl	800db8c <FreeRTOS_NextEndPoint>
 8007880:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e9      	bne.n	800785c <eARPGetCacheEntry+0x78>
 8007888:	e02c      	b.n	80078e4 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	061a      	lsls	r2, r3, #24
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007896:	431a      	orrs	r2, r3
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	0a1b      	lsrs	r3, r3, #8
 800789c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80078a0:	431a      	orrs	r2, r3
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	0e1b      	lsrs	r3, r3, #24
 80078a6:	4313      	orrs	r3, r2
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2bff      	cmp	r3, #255	@ 0xff
 80078ac:	d113      	bne.n	80078d6 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4a10      	ldr	r2, [pc, #64]	@ (80078f4 <eARPGetCacheEntry+0x110>)
 80078b2:	6811      	ldr	r1, [r2, #0]
 80078b4:	6019      	str	r1, [r3, #0]
 80078b6:	8892      	ldrh	r2, [r2, #4]
 80078b8:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 80078ba:	2104      	movs	r1, #4
 80078bc:	6978      	ldr	r0, [r7, #20]
 80078be:	f006 fa1b 	bl	800dcf8 <FreeRTOS_FindEndPointOnNetMask>
 80078c2:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 80078d0:	2301      	movs	r3, #1
 80078d2:	77fb      	strb	r3, [r7, #31]
 80078d4:	e006      	b.n	80078e4 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	68b9      	ldr	r1, [r7, #8]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 f80c 	bl	80078f8 <eARPGetCacheEntryGateWay>
 80078e0:	4603      	mov	r3, r0
 80078e2:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 80078e4:	7ffb      	ldrb	r3, [r7, #31]
    }
 80078e6:	4618      	mov	r0, r3
 80078e8:	3720      	adds	r7, #32
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	08024ca4 	.word	0x08024ca4
 80078f4:	08027f4c 	.word	0x08027f4c

080078f8 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8007904:	2300      	movs	r3, #0
 8007906:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8007914:	2104      	movs	r1, #4
 8007916:	69b8      	ldr	r0, [r7, #24]
 8007918:	f006 f9ee 	bl	800dcf8 <FreeRTOS_FindEndPointOnNetMask>
 800791c:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d11b      	bne.n	800795c <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	68b9      	ldr	r1, [r7, #8]
 8007928:	69b8      	ldr	r0, [r7, #24]
 800792a:	f000 f86b 	bl	8007a04 <prvCacheLookup>
 800792e:	4603      	mov	r3, r0
 8007930:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 8007932:	7ffb      	ldrb	r3, [r7, #31]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d017      	beq.n	8007968 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 8007938:	2040      	movs	r0, #64	@ 0x40
 800793a:	f006 fca9 	bl	800e290 <FreeRTOS_FindGateWay>
 800793e:	4602      	mov	r2, r0
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	61bb      	str	r3, [r7, #24]
 8007954:	e008      	b.n	8007968 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	e005      	b.n	8007968 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 8007968:	7ffb      	ldrb	r3, [r7, #31]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d13f      	bne.n	80079ee <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8007974:	2302      	movs	r3, #2
 8007976:	77fb      	strb	r3, [r7, #31]
 8007978:	e039      	b.n	80079ee <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	69b8      	ldr	r0, [r7, #24]
 8007980:	f000 f840 	bl	8007a04 <prvCacheLookup>
 8007984:	4603      	mov	r3, r0
 8007986:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8007988:	7ffb      	ldrb	r3, [r7, #31]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d103      	bne.n	8007996 <eARPGetCacheEntryGateWay+0x9e>
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	429a      	cmp	r2, r3
 8007994:	d028      	beq.n	80079e8 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	061a      	lsls	r2, r3, #24
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079a2:	431a      	orrs	r2, r3
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80079ac:	431a      	orrs	r2, r3
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	0e1b      	lsrs	r3, r3, #24
 80079b2:	ea42 0103 	orr.w	r1, r2, r3
 80079b6:	7ffb      	ldrb	r3, [r7, #31]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <eARPGetCacheEntryGateWay+0xc8>
 80079bc:	480e      	ldr	r0, [pc, #56]	@ (80079f8 <eARPGetCacheEntryGateWay+0x100>)
 80079be:	e000      	b.n	80079c2 <eARPGetCacheEntryGateWay+0xca>
 80079c0:	480e      	ldr	r0, [pc, #56]	@ (80079fc <eARPGetCacheEntryGateWay+0x104>)
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	061a      	lsls	r2, r3, #24
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079ce:	431a      	orrs	r2, r3
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	0a1b      	lsrs	r3, r3, #8
 80079d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80079d8:	431a      	orrs	r2, r3
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	0e1b      	lsrs	r3, r3, #24
 80079de:	4313      	orrs	r3, r2
 80079e0:	4602      	mov	r2, r0
 80079e2:	4807      	ldr	r0, [pc, #28]	@ (8007a00 <eARPGetCacheEntryGateWay+0x108>)
 80079e4:	f01a feee 	bl	80227c4 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 80079ee:	7ffb      	ldrb	r3, [r7, #31]
    }
 80079f0:	4618      	mov	r0, r3
 80079f2:	3720      	adds	r7, #32
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	08024cd0 	.word	0x08024cd0
 80079fc:	08024cd4 	.word	0x08024cd4
 8007a00:	08024cdc 	.word	0x08024cdc

08007a04 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8007a10:	2300      	movs	r3, #0
 8007a12:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e02a      	b.n	8007a70 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8007a1a:	4a19      	ldr	r2, [pc, #100]	@ (8007a80 <prvCacheLookup+0x7c>)
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	4413      	add	r3, r2
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d11f      	bne.n	8007a6a <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007a2a:	4a15      	ldr	r2, [pc, #84]	@ (8007a80 <prvCacheLookup+0x7c>)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	4413      	add	r3, r2
 8007a32:	330b      	adds	r3, #11
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d102      	bne.n	8007a40 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 8007a3e:	e01a      	b.n	8007a76 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007a40:	68b8      	ldr	r0, [r7, #8]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	011b      	lsls	r3, r3, #4
 8007a46:	4a0e      	ldr	r2, [pc, #56]	@ (8007a80 <prvCacheLookup+0x7c>)
 8007a48:	4413      	add	r3, r2
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	2206      	movs	r2, #6
 8007a4e:	4619      	mov	r1, r3
 8007a50:	f01b f8d4 	bl	8022bfc <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 8007a54:	4a0a      	ldr	r2, [pc, #40]	@ (8007a80 <prvCacheLookup+0x7c>)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	4413      	add	r3, r2
 8007a5c:	330c      	adds	r3, #12
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8007a64:	2301      	movs	r3, #1
 8007a66:	74fb      	strb	r3, [r7, #19]
                break;
 8007a68:	e005      	b.n	8007a76 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	2b05      	cmp	r3, #5
 8007a74:	ddd1      	ble.n	8007a1a <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8007a76:	7cfb      	ldrb	r3, [r7, #19]
    }
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	20000f64 	.word	0x20000f64

08007a84 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	e048      	b.n	8007b22 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8007a90:	4a47      	ldr	r2, [pc, #284]	@ (8007bb0 <vARPAgeCache+0x12c>)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	4413      	add	r3, r2
 8007a98:	330a      	adds	r3, #10
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d03d      	beq.n	8007b1c <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8007aa0:	4a43      	ldr	r2, [pc, #268]	@ (8007bb0 <vARPAgeCache+0x12c>)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	4413      	add	r3, r2
 8007aa8:	330a      	adds	r3, #10
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b2d9      	uxtb	r1, r3
 8007ab0:	4a3f      	ldr	r2, [pc, #252]	@ (8007bb0 <vARPAgeCache+0x12c>)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	4413      	add	r3, r2
 8007ab8:	330a      	adds	r3, #10
 8007aba:	460a      	mov	r2, r1
 8007abc:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007abe:	4a3c      	ldr	r2, [pc, #240]	@ (8007bb0 <vARPAgeCache+0x12c>)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	4413      	add	r3, r2
 8007ac6:	330b      	adds	r3, #11
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d108      	bne.n	8007ae0 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007ace:	4a38      	ldr	r2, [pc, #224]	@ (8007bb0 <vARPAgeCache+0x12c>)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	4413      	add	r3, r2
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f8d7 	bl	8007c8c <FreeRTOS_OutputARPRequest>
 8007ade:	e00f      	b.n	8007b00 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007ae0:	4a33      	ldr	r2, [pc, #204]	@ (8007bb0 <vARPAgeCache+0x12c>)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	4413      	add	r3, r2
 8007ae8:	330a      	adds	r3, #10
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d807      	bhi.n	8007b00 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007af0:	4a2f      	ldr	r2, [pc, #188]	@ (8007bb0 <vARPAgeCache+0x12c>)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	4413      	add	r3, r2
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f8c6 	bl	8007c8c <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8007b00:	4a2b      	ldr	r2, [pc, #172]	@ (8007bb0 <vARPAgeCache+0x12c>)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	4413      	add	r3, r2
 8007b08:	330a      	adds	r3, #10
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d105      	bne.n	8007b1c <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8007b10:	4a27      	ldr	r2, [pc, #156]	@ (8007bb0 <vARPAgeCache+0x12c>)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	4413      	add	r3, r2
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b05      	cmp	r3, #5
 8007b26:	ddb3      	ble.n	8007a90 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8007b28:	f7fd f8dc 	bl	8004ce4 <xTaskGetTickCount>
 8007b2c:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8007b2e:	4b21      	ldr	r3, [pc, #132]	@ (8007bb4 <vARPAgeCache+0x130>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <vARPAgeCache+0xc2>
 8007b36:	4b1f      	ldr	r3, [pc, #124]	@ (8007bb4 <vARPAgeCache+0x130>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d92f      	bls.n	8007ba6 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8007b46:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb8 <vARPAgeCache+0x134>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 8007b4c:	e025      	b.n	8007b9a <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d019      	beq.n	8007b92 <vARPAgeCache+0x10e>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d015      	beq.n	8007b92 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007b6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <vARPAgeCache+0xf8>
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d007      	beq.n	8007b8a <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8007b7a:	e00a      	b.n	8007b92 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4619      	mov	r1, r3
 8007b82:	68b8      	ldr	r0, [r7, #8]
 8007b84:	f000 f81a 	bl	8007bbc <FreeRTOS_OutputARPRequest_Multi>
                                break;
 8007b88:	e003      	b.n	8007b92 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 8007b8a:	68b8      	ldr	r0, [r7, #8]
 8007b8c:	f005 f822 	bl	800cbd4 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8007b90:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007b98:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1d6      	bne.n	8007b4e <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8007ba0:	4a04      	ldr	r2, [pc, #16]	@ (8007bb4 <vARPAgeCache+0x130>)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6013      	str	r3, [r2, #0]
        }
    }
 8007ba6:	bf00      	nop
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000f64 	.word	0x20000f64
 8007bb4:	20000fc4 	.word	0x20000fc4
 8007bb8:	20001528 	.word	0x20001528

08007bbc <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d156      	bne.n	8007c84 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d052      	beq.n	8007c84 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8007bde:	2100      	movs	r1, #0
 8007be0:	202a      	movs	r0, #42	@ 0x2a
 8007be2:	f00f fedf 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 8007be6:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d04a      	beq.n	8007c84 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8007c04:	6938      	ldr	r0, [r7, #16]
 8007c06:	f000 f855 	bl	8007cb4 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0e:	2b3b      	cmp	r3, #59	@ 0x3b
 8007c10:	d812      	bhi.n	8007c38 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	e008      	b.n	8007c2c <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	4413      	add	r3, r2
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b3b      	cmp	r3, #59	@ 0x3b
 8007c30:	ddf3      	ble.n	8007c1a <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	223c      	movs	r2, #60	@ 0x3c
 8007c36:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8007c38:	f002 ff7c 	bl	800ab34 <xIsCallingFromIPTask>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00f      	beq.n	8007c62 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01b      	beq.n	8007c84 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	6939      	ldr	r1, [r7, #16]
 8007c5e:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8007c60:	e010      	b.n	8007c84 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8007c62:	2302      	movs	r3, #2
 8007c64:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8007c6a:	f107 0308 	add.w	r3, r7, #8
 8007c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8007c72:	4618      	mov	r0, r3
 8007c74:	f002 f81c 	bl	8009cb0 <xSendEventStructToIPTask>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d102      	bne.n	8007c84 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007c7e:	6938      	ldr	r0, [r7, #16]
 8007c80:	f00f fef8 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
    }
 8007c84:	bf00      	nop
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 8007c94:	210c      	movs	r1, #12
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f006 f82e 	bl	800dcf8 <FreeRTOS_FindEndPointOnNetMask>
 8007c9c:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f7ff ff88 	bl	8007bbc <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d104      	bne.n	8007ccc <vARPGenerateRequestPacket+0x18>
 8007cc2:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8007cc6:	4828      	ldr	r0, [pc, #160]	@ (8007d68 <vARPGenerateRequestPacket+0xb4>)
 8007cc8:	f7f9 fe9e 	bl	8001a08 <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd0:	2b29      	cmp	r3, #41	@ 0x29
 8007cd2:	d804      	bhi.n	8007cde <vARPGenerateRequestPacket+0x2a>
 8007cd4:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8007cd8:	4823      	ldr	r0, [pc, #140]	@ (8007d68 <vARPGenerateRequestPacket+0xb4>)
 8007cda:	f7f9 fe95 	bl	8001a08 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d104      	bne.n	8007cf0 <vARPGenerateRequestPacket+0x3c>
 8007ce6:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8007cea:	481f      	ldr	r0, [pc, #124]	@ (8007d68 <vARPGenerateRequestPacket+0xb4>)
 8007cec:	f7f9 fe8c 	bl	8001a08 <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf4:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8007cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d6c <vARPGenerateRequestPacket+0xb8>)
 8007cf8:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8007cfe:	2226      	movs	r2, #38	@ 0x26
 8007d00:	6939      	ldr	r1, [r7, #16]
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f01a ff7a 	bl	8022bfc <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0c:	33e8      	adds	r3, #232	@ 0xe8
 8007d0e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	3306      	adds	r3, #6
 8007d14:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007d16:	2206      	movs	r2, #6
 8007d18:	6939      	ldr	r1, [r7, #16]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f01a ff6e 	bl	8022bfc <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d24:	33e8      	adds	r3, #232	@ 0xe8
 8007d26:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	3316      	adds	r3, #22
 8007d2c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007d2e:	2206      	movs	r2, #6
 8007d30:	6939      	ldr	r1, [r7, #16]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f01a ff62 	bl	8022bfc <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3c:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	331c      	adds	r3, #28
 8007d42:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	695a      	ldr	r2, [r3, #20]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	222a      	movs	r2, #42	@ 0x2a
 8007d5c:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 8007d5e:	bf00      	nop
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	08024ca4 	.word	0x08024ca4
 8007d6c:	08027f14 	.word	0x08027f14

08007d70 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01b      	beq.n	8007db6 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	e014      	b.n	8007dae <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 8007d84:	4a10      	ldr	r2, [pc, #64]	@ (8007dc8 <FreeRTOS_ClearARP+0x58>)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	4413      	add	r3, r2
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d108      	bne.n	8007da8 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8007dc8 <FreeRTOS_ClearARP+0x58>)
 8007d9c:	4413      	add	r3, r2
 8007d9e:	2210      	movs	r2, #16
 8007da0:	2100      	movs	r1, #0
 8007da2:	4618      	mov	r0, r3
 8007da4:	f01b f837 	bl	8022e16 <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b05      	cmp	r3, #5
 8007db2:	dde7      	ble.n	8007d84 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 8007db4:	e004      	b.n	8007dc0 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8007db6:	2260      	movs	r2, #96	@ 0x60
 8007db8:	2100      	movs	r1, #0
 8007dba:	4803      	ldr	r0, [pc, #12]	@ (8007dc8 <FreeRTOS_ClearARP+0x58>)
 8007dbc:	f01b f82b 	bl	8022e16 <memset>
}
 8007dc0:	bf00      	nop
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	20000f64 	.word	0x20000f64

08007dcc <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8007dd0:	f000 fc8a 	bl	80086e8 <vDNSCallbackInitialise>
        }
 8007dd4:	bf00      	nop
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8007de8:	2048      	movs	r0, #72	@ 0x48
 8007dea:	f7fe fdeb 	bl	80069c4 <pvPortMalloc>
 8007dee:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d057      	beq.n	8007ea6 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 8007dfa:	2248      	movs	r2, #72	@ 0x48
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	69f8      	ldr	r0, [r7, #28]
 8007e00:	f01b f809 	bl	8022e16 <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	3338      	adds	r3, #56	@ 0x38
 8007e12:	220f      	movs	r2, #15
 8007e14:	68f9      	ldr	r1, [r7, #12]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f01b fedc 	bl	8023bd4 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f103 0220 	add.w	r2, r3, #32
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d003      	beq.n	8007e3c <pxNew_AddrInfo+0x64>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b0a      	cmp	r3, #10
 8007e38:	d01e      	beq.n	8007e78 <pxNew_AddrInfo+0xa0>
 8007e3a:	e02b      	b.n	8007e94 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f003 f87d 	bl	800af3c <ulChar2u32>
 8007e42:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	061a      	lsls	r2, r3, #24
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e50:	431a      	orrs	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	0a1b      	lsrs	r3, r3, #8
 8007e56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007e5a:	ea42 0103 	orr.w	r1, r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	0e1a      	lsrs	r2, r3, #24
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	2204      	movs	r2, #4
 8007e74:	611a      	str	r2, [r3, #16]
                       }
                       break;
 8007e76:	e016      	b.n	8007ea6 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	220a      	movs	r2, #10
 8007e7c:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	2210      	movs	r2, #16
 8007e82:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	3328      	adds	r3, #40	@ 0x28
 8007e88:	2210      	movs	r2, #16
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f01a feb5 	bl	8022bfc <memcpy>
                        break;
 8007e92:	e008      	b.n	8007ea6 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 8007e94:	4806      	ldr	r0, [pc, #24]	@ (8007eb0 <pxNew_AddrInfo+0xd8>)
 8007e96:	f01a fc95 	bl	80227c4 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 8007e9a:	69b8      	ldr	r0, [r7, #24]
 8007e9c:	f7fe fe66 	bl	8006b6c <vPortFree>
                    pxAddrInfo = NULL;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	61fb      	str	r3, [r7, #28]

                    break;
 8007ea4:	bf00      	nop
            }
        }

        return pxAddrInfo;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
    }
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3720      	adds	r7, #32
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	08024d48 	.word	0x08024d48

08007eb4 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00b      	beq.n	8007ede <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 8007ec6:	e007      	b.n	8007ed8 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f7fe fe4c 	bl	8006b6c <vPortFree>
                pxIterator = pxNext;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1f4      	bne.n	8007ec8 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 8007ede:	bf00      	nop
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b088      	sub	sp, #32
 8007eea:	af02      	add	r7, sp, #8
 8007eec:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f002 fa92 	bl	800a418 <uxIPHeaderSizePacket>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	3316      	adds	r3, #22
 8007ef8:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d829      	bhi.n	8007f58 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b0b      	cmp	r3, #11
 8007f12:	d921      	bls.n	8007f58 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	4413      	add	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	b21a      	sxth	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007f2e:	0a1b      	lsrs	r3, r3, #8
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	b21b      	sxth	r3, r3
 8007f34:	4313      	orrs	r3, r2
 8007f36:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f107 0208 	add.w	r2, r7, #8
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	2300      	movs	r3, #0
 8007f42:	6939      	ldr	r1, [r7, #16]
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fcb5 	bl	80088b4 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff ffae 	bl	8007eb4 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8007f58:	2300      	movs	r3, #0
    }
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b086      	sub	sp, #24
 8007f66:	af02      	add	r7, sp, #8
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	607a      	str	r2, [r7, #4]
 8007f6e:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	2300      	movs	r3, #0
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	68b9      	ldr	r1, [r7, #8]
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 f818 	bl	8007fb0 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8007f80:	2301      	movs	r3, #1
    }
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 8007f90:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8007f94:	2100      	movs	r1, #0
 8007f96:	4804      	ldr	r0, [pc, #16]	@ (8007fa8 <FreeRTOS_dnsclear+0x1c>)
 8007f98:	f01a ff3d 	bl	8022e16 <memset>
        uxFreeEntry = 0U;
 8007f9c:	4b03      	ldr	r3, [pc, #12]	@ (8007fac <FreeRTOS_dnsclear+0x20>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]
    }
 8007fa2:	bf00      	nop
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000fd4 	.word	0x20000fd4
 8007fac:	20001184 	.word	0x20001184

08007fb0 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007fb0:	b590      	push	{r4, r7, lr}
 8007fb2:	b09b      	sub	sp, #108	@ 0x6c
 8007fb4:	af02      	add	r7, sp, #8
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 8007fbe:	f7fc fe91 	bl	8004ce4 <xTaskGetTickCount>
 8007fc2:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d103      	bne.n	8007fd2 <FreeRTOS_ProcessDNSCache+0x22>
 8007fca:	21d8      	movs	r1, #216	@ 0xd8
 8007fcc:	4841      	ldr	r0, [pc, #260]	@ (80080d4 <FreeRTOS_ProcessDNSCache+0x124>)
 8007fce:	f7f9 fd1b 	bl	8001a08 <vAssertCalled>

        if( xLookUp != pdFALSE )
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 8007fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007fe0:	4a3d      	ldr	r2, [pc, #244]	@ (80080d8 <FreeRTOS_ProcessDNSCache+0x128>)
 8007fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe6:	099b      	lsrs	r3, r3, #6
 8007fe8:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 8007fea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007fee:	461a      	mov	r2, r3
 8007ff0:	68b9      	ldr	r1, [r7, #8]
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 f87a 	bl	80080ec <prvFindEntryIndex>
 8007ff8:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 8007ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d110      	bne.n	8008022 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d106      	bne.n	8008014 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8008006:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008008:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800800a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	f000 f8b1 	bl	8008174 <prvGetCacheIPEntry>
 8008012:	e013      	b.n	800803c <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8008014:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	f000 f94a 	bl	80082b4 <prvUpdateCacheEntry>
 8008020:	e00c      	b.n	800803c <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d103      	bne.n	8008030 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	e005      	b.n	800803c <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8008030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	6879      	ldr	r1, [r7, #4]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f994 	bl	8008364 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <FreeRTOS_ProcessDNSCache+0x9a>
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d03f      	beq.n	80080ca <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 800804a:	2302      	movs	r3, #2
 800804c:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00c      	beq.n	8008070 <FreeRTOS_ProcessDNSCache+0xc0>
 8008056:	2b01      	cmp	r3, #1
 8008058:	d10e      	bne.n	8008078 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	6859      	ldr	r1, [r3, #4]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 800806a:	230a      	movs	r3, #10
 800806c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 800806e:	e007      	b.n	8008080 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8008076:	e003      	b.n	8008080 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 8008078:	4818      	ldr	r0, [pc, #96]	@ (80080dc <FreeRTOS_ProcessDNSCache+0x12c>)
 800807a:	f01a fba3 	bl	80227c4 <lUDPLoggingPrintf>
                        break;
 800807e:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8008080:	f107 0214 	add.w	r2, r7, #20
 8008084:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8008088:	2328      	movs	r3, #40	@ 0x28
 800808a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800808c:	f007 fc62 	bl	800f954 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <FreeRTOS_ProcessDNSCache+0xea>
 8008096:	4912      	ldr	r1, [pc, #72]	@ (80080e0 <FreeRTOS_ProcessDNSCache+0x130>)
 8008098:	e000      	b.n	800809c <FreeRTOS_ProcessDNSCache+0xec>
 800809a:	4912      	ldr	r1, [pc, #72]	@ (80080e4 <FreeRTOS_ProcessDNSCache+0x134>)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	061a      	lsls	r2, r3, #24
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	0a1b      	lsrs	r3, r3, #8
 80080ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	0e1b      	lsrs	r3, r3, #24
 80080b8:	4313      	orrs	r3, r2
 80080ba:	f107 0214 	add.w	r2, r7, #20
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	4613      	mov	r3, r2
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	4808      	ldr	r0, [pc, #32]	@ (80080e8 <FreeRTOS_ProcessDNSCache+0x138>)
 80080c6:	f01a fb7d 	bl	80227c4 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 80080ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 80080cc:	4618      	mov	r0, r3
 80080ce:	3764      	adds	r7, #100	@ 0x64
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd90      	pop	{r4, r7, pc}
 80080d4:	08024fc4 	.word	0x08024fc4
 80080d8:	10624dd3 	.word	0x10624dd3
 80080dc:	08024ff8 	.word	0x08024ff8
 80080e0:	08025028 	.word	0x08025028
 80080e4:	08025030 	.word	0x08025030
 80080e8:	08025034 	.word	0x08025034

080080ec <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 80080fc:	2300      	movs	r3, #0
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	e02d      	b.n	800815e <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8008102:	4a1b      	ldr	r2, [pc, #108]	@ (8008170 <prvFindEntryIndex+0x84>)
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	216c      	movs	r1, #108	@ 0x6c
 8008108:	fb01 f303 	mul.w	r3, r1, r3
 800810c:	4413      	add	r3, r2
 800810e:	3350      	adds	r3, #80	@ 0x50
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d01f      	beq.n	8008156 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	226c      	movs	r2, #108	@ 0x6c
 800811a:	fb02 f303 	mul.w	r3, r2, r3
 800811e:	3350      	adds	r3, #80	@ 0x50
 8008120:	4a13      	ldr	r2, [pc, #76]	@ (8008170 <prvFindEntryIndex+0x84>)
 8008122:	4413      	add	r3, r2
 8008124:	68f9      	ldr	r1, [r7, #12]
 8008126:	4618      	mov	r0, r3
 8008128:	f7f8 f8da 	bl	80002e0 <strcmp>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d112      	bne.n	8008158 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	691a      	ldr	r2, [r3, #16]
 8008136:	490e      	ldr	r1, [pc, #56]	@ (8008170 <prvFindEntryIndex+0x84>)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	206c      	movs	r0, #108	@ 0x6c
 800813c:	fb00 f303 	mul.w	r3, r0, r3
 8008140:	440b      	add	r3, r1
 8008142:	3310      	adds	r3, #16
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d106      	bne.n	8008158 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 800814a:	2301      	movs	r3, #1
 800814c:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	601a      	str	r2, [r3, #0]
                    break;
 8008154:	e006      	b.n	8008164 <prvFindEntryIndex+0x78>
                continue;
 8008156:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	3301      	adds	r3, #1
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2b03      	cmp	r3, #3
 8008162:	d9ce      	bls.n	8008102 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8008164:	697b      	ldr	r3, [r7, #20]
    }
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000fd4 	.word	0x20000fd4

08008174 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008174:	b580      	push	{r7, lr}
 8008176:	b088      	sub	sp, #32
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8008186:	4a4a      	ldr	r2, [pc, #296]	@ (80082b0 <prvGetCacheIPEntry+0x13c>)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	216c      	movs	r1, #108	@ 0x6c
 800818c:	fb01 f303 	mul.w	r3, r1, r3
 8008190:	4413      	add	r3, r2
 8008192:	3364      	adds	r3, #100	@ 0x64
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 800819c:	4a44      	ldr	r2, [pc, #272]	@ (80082b0 <prvGetCacheIPEntry+0x13c>)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	216c      	movs	r1, #108	@ 0x6c
 80081a2:	fb01 f303 	mul.w	r3, r1, r3
 80081a6:	4413      	add	r3, r2
 80081a8:	3360      	adds	r3, #96	@ 0x60
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	061a      	lsls	r2, r3, #24
 80081ae:	4940      	ldr	r1, [pc, #256]	@ (80082b0 <prvGetCacheIPEntry+0x13c>)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	206c      	movs	r0, #108	@ 0x6c
 80081b4:	fb00 f303 	mul.w	r3, r0, r3
 80081b8:	440b      	add	r3, r1
 80081ba:	3360      	adds	r3, #96	@ 0x60
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80081c4:	431a      	orrs	r2, r3
 80081c6:	493a      	ldr	r1, [pc, #232]	@ (80082b0 <prvGetCacheIPEntry+0x13c>)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	206c      	movs	r0, #108	@ 0x6c
 80081cc:	fb00 f303 	mul.w	r3, r0, r3
 80081d0:	440b      	add	r3, r1
 80081d2:	3360      	adds	r3, #96	@ 0x60
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80081dc:	431a      	orrs	r2, r3
 80081de:	4934      	ldr	r1, [pc, #208]	@ (80082b0 <prvGetCacheIPEntry+0x13c>)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	206c      	movs	r0, #108	@ 0x6c
 80081e4:	fb00 f303 	mul.w	r3, r0, r3
 80081e8:	440b      	add	r3, r1
 80081ea:	3360      	adds	r3, #96	@ 0x60
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	0e1b      	lsrs	r3, r3, #24
 80081f0:	4313      	orrs	r3, r2
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d24a      	bcs.n	800828e <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 80081f8:	4a2d      	ldr	r2, [pc, #180]	@ (80082b0 <prvGetCacheIPEntry+0x13c>)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	216c      	movs	r1, #108	@ 0x6c
 80081fe:	fb01 f303 	mul.w	r3, r1, r3
 8008202:	4413      	add	r3, r2
 8008204:	3369      	adds	r3, #105	@ 0x69
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	4929      	ldr	r1, [pc, #164]	@ (80082b0 <prvGetCacheIPEntry+0x13c>)
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	206c      	movs	r0, #108	@ 0x6c
 800820e:	fb00 f202 	mul.w	r2, r0, r2
 8008212:	440a      	add	r2, r1
 8008214:	3268      	adds	r2, #104	@ 0x68
 8008216:	7812      	ldrb	r2, [r2, #0]
 8008218:	fbb3 f1f2 	udiv	r1, r3, r2
 800821c:	fb01 f202 	mul.w	r2, r1, r2
 8008220:	1a9b      	subs	r3, r3, r2
 8008222:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008224:	7cfb      	ldrb	r3, [r7, #19]
 8008226:	f003 0303 	and.w	r3, r3, #3
 800822a:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 800822c:	7cfb      	ldrb	r3, [r7, #19]
 800822e:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 8008230:	4a1f      	ldr	r2, [pc, #124]	@ (80082b0 <prvGetCacheIPEntry+0x13c>)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	216c      	movs	r1, #108	@ 0x6c
 8008236:	fb01 f303 	mul.w	r3, r1, r3
 800823a:	4413      	add	r3, r2
 800823c:	3369      	adds	r3, #105	@ 0x69
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	b2d8      	uxtb	r0, r3
 8008244:	4a1a      	ldr	r2, [pc, #104]	@ (80082b0 <prvGetCacheIPEntry+0x13c>)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	216c      	movs	r1, #108	@ 0x6c
 800824a:	fb01 f303 	mul.w	r3, r1, r3
 800824e:	4413      	add	r3, r2
 8008250:	3369      	adds	r3, #105	@ 0x69
 8008252:	4602      	mov	r2, r0
 8008254:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	4613      	mov	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	216c      	movs	r1, #108	@ 0x6c
 8008264:	fb01 f202 	mul.w	r2, r1, r2
 8008268:	4413      	add	r3, r2
 800826a:	4a11      	ldr	r2, [pc, #68]	@ (80082b0 <prvGetCacheIPEntry+0x13c>)
 800826c:	4413      	add	r3, r2
 800826e:	2214      	movs	r2, #20
 8008270:	4619      	mov	r1, r3
 8008272:	68b8      	ldr	r0, [r7, #8]
 8008274:	f01a fcc2 	bl	8022bfc <memcpy>
            isRead = pdTRUE;
 8008278:	2301      	movs	r3, #1
 800827a:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d010      	beq.n	80082a4 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f8dc 	bl	8008444 <prvReadDNSCache>
 800828c:	e00a      	b.n	80082a4 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 800828e:	4a08      	ldr	r2, [pc, #32]	@ (80082b0 <prvGetCacheIPEntry+0x13c>)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	216c      	movs	r1, #108	@ 0x6c
 8008294:	fb01 f303 	mul.w	r3, r1, r3
 8008298:	4413      	add	r3, r2
 800829a:	3350      	adds	r3, #80	@ 0x50
 800829c:	2200      	movs	r2, #0
 800829e:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 80082a4:	69fb      	ldr	r3, [r7, #28]
    }
 80082a6:	4618      	mov	r0, r3
 80082a8:	3720      	adds	r7, #32
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20000fd4 	.word	0x20000fd4

080082b4 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 80082c6:	4a26      	ldr	r2, [pc, #152]	@ (8008360 <prvUpdateCacheEntry+0xac>)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	216c      	movs	r1, #108	@ 0x6c
 80082cc:	fb01 f303 	mul.w	r3, r1, r3
 80082d0:	4413      	add	r3, r2
 80082d2:	3368      	adds	r3, #104	@ 0x68
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d81b      	bhi.n	8008312 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 80082da:	4a21      	ldr	r2, [pc, #132]	@ (8008360 <prvUpdateCacheEntry+0xac>)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	216c      	movs	r1, #108	@ 0x6c
 80082e0:	fb01 f303 	mul.w	r3, r1, r3
 80082e4:	4413      	add	r3, r2
 80082e6:	3368      	adds	r3, #104	@ 0x68
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 80082ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008360 <prvUpdateCacheEntry+0xac>)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	216c      	movs	r1, #108	@ 0x6c
 80082f2:	fb01 f303 	mul.w	r3, r1, r3
 80082f6:	4413      	add	r3, r2
 80082f8:	3368      	adds	r3, #104	@ 0x68
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	b2d8      	uxtb	r0, r3
 8008300:	4a17      	ldr	r2, [pc, #92]	@ (8008360 <prvUpdateCacheEntry+0xac>)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	216c      	movs	r1, #108	@ 0x6c
 8008306:	fb01 f303 	mul.w	r3, r1, r3
 800830a:	4413      	add	r3, r2
 800830c:	3368      	adds	r3, #104	@ 0x68
 800830e:	4602      	mov	r2, r0
 8008310:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	216c      	movs	r1, #108	@ 0x6c
 8008320:	fb01 f202 	mul.w	r2, r1, r2
 8008324:	4413      	add	r3, r2
 8008326:	4a0e      	ldr	r2, [pc, #56]	@ (8008360 <prvUpdateCacheEntry+0xac>)
 8008328:	4413      	add	r3, r2
 800832a:	2214      	movs	r2, #20
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	4618      	mov	r0, r3
 8008330:	f01a fc64 	bl	8022bfc <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8008334:	4a0a      	ldr	r2, [pc, #40]	@ (8008360 <prvUpdateCacheEntry+0xac>)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	216c      	movs	r1, #108	@ 0x6c
 800833a:	fb01 f303 	mul.w	r3, r1, r3
 800833e:	4413      	add	r3, r2
 8008340:	3360      	adds	r3, #96	@ 0x60
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008346:	4a06      	ldr	r2, [pc, #24]	@ (8008360 <prvUpdateCacheEntry+0xac>)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	216c      	movs	r1, #108	@ 0x6c
 800834c:	fb01 f303 	mul.w	r3, r1, r3
 8008350:	4413      	add	r3, r2
 8008352:	3364      	adds	r3, #100	@ 0x64
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	601a      	str	r2, [r3, #0]
    }
 8008358:	bf00      	nop
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20000fd4 	.word	0x20000fd4

08008364 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f7f7 ffbe 	bl	80002f4 <strlen>
 8008378:	4603      	mov	r3, r0
 800837a:	2b0f      	cmp	r3, #15
 800837c:	d859      	bhi.n	8008432 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 800837e:	4b2f      	ldr	r3, [pc, #188]	@ (800843c <prvInsertCacheEntry+0xd8>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	226c      	movs	r2, #108	@ 0x6c
 8008384:	fb02 f303 	mul.w	r3, r2, r3
 8008388:	3350      	adds	r3, #80	@ 0x50
 800838a:	4a2d      	ldr	r2, [pc, #180]	@ (8008440 <prvInsertCacheEntry+0xdc>)
 800838c:	4413      	add	r3, r2
 800838e:	2210      	movs	r2, #16
 8008390:	68f9      	ldr	r1, [r7, #12]
 8008392:	4618      	mov	r0, r3
 8008394:	f01b fc1e 	bl	8023bd4 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8008398:	4b28      	ldr	r3, [pc, #160]	@ (800843c <prvInsertCacheEntry+0xd8>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	226c      	movs	r2, #108	@ 0x6c
 800839e:	fb02 f303 	mul.w	r3, r2, r3
 80083a2:	4a27      	ldr	r2, [pc, #156]	@ (8008440 <prvInsertCacheEntry+0xdc>)
 80083a4:	4413      	add	r3, r2
 80083a6:	2214      	movs	r2, #20
 80083a8:	6879      	ldr	r1, [r7, #4]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f01a fc26 	bl	8022bfc <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 80083b0:	4b22      	ldr	r3, [pc, #136]	@ (800843c <prvInsertCacheEntry+0xd8>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a22      	ldr	r2, [pc, #136]	@ (8008440 <prvInsertCacheEntry+0xdc>)
 80083b6:	216c      	movs	r1, #108	@ 0x6c
 80083b8:	fb01 f303 	mul.w	r3, r1, r3
 80083bc:	4413      	add	r3, r2
 80083be:	3360      	adds	r3, #96	@ 0x60
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80083c4:	4b1d      	ldr	r3, [pc, #116]	@ (800843c <prvInsertCacheEntry+0xd8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008440 <prvInsertCacheEntry+0xdc>)
 80083ca:	216c      	movs	r1, #108	@ 0x6c
 80083cc:	fb01 f303 	mul.w	r3, r1, r3
 80083d0:	4413      	add	r3, r2
 80083d2:	3364      	adds	r3, #100	@ 0x64
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 80083d8:	4b18      	ldr	r3, [pc, #96]	@ (800843c <prvInsertCacheEntry+0xd8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a18      	ldr	r2, [pc, #96]	@ (8008440 <prvInsertCacheEntry+0xdc>)
 80083de:	216c      	movs	r1, #108	@ 0x6c
 80083e0:	fb01 f303 	mul.w	r3, r1, r3
 80083e4:	4413      	add	r3, r2
 80083e6:	3368      	adds	r3, #104	@ 0x68
 80083e8:	2201      	movs	r2, #1
 80083ea:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 80083ec:	4b13      	ldr	r3, [pc, #76]	@ (800843c <prvInsertCacheEntry+0xd8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a13      	ldr	r2, [pc, #76]	@ (8008440 <prvInsertCacheEntry+0xdc>)
 80083f2:	216c      	movs	r1, #108	@ 0x6c
 80083f4:	fb01 f303 	mul.w	r3, r1, r3
 80083f8:	4413      	add	r3, r2
 80083fa:	3369      	adds	r3, #105	@ 0x69
 80083fc:	2200      	movs	r2, #0
 80083fe:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8008400:	4b0e      	ldr	r3, [pc, #56]	@ (800843c <prvInsertCacheEntry+0xd8>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	226c      	movs	r2, #108	@ 0x6c
 8008406:	fb02 f303 	mul.w	r3, r2, r3
 800840a:	3314      	adds	r3, #20
 800840c:	4a0c      	ldr	r2, [pc, #48]	@ (8008440 <prvInsertCacheEntry+0xdc>)
 800840e:	4413      	add	r3, r2
 8008410:	223c      	movs	r2, #60	@ 0x3c
 8008412:	2100      	movs	r1, #0
 8008414:	4618      	mov	r0, r3
 8008416:	f01a fcfe 	bl	8022e16 <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 800841a:	4b08      	ldr	r3, [pc, #32]	@ (800843c <prvInsertCacheEntry+0xd8>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3301      	adds	r3, #1
 8008420:	4a06      	ldr	r2, [pc, #24]	@ (800843c <prvInsertCacheEntry+0xd8>)
 8008422:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8008424:	4b05      	ldr	r3, [pc, #20]	@ (800843c <prvInsertCacheEntry+0xd8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b04      	cmp	r3, #4
 800842a:	d102      	bne.n	8008432 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 800842c:	4b03      	ldr	r3, [pc, #12]	@ (800843c <prvInsertCacheEntry+0xd8>)
 800842e:	2200      	movs	r2, #0
 8008430:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20001184 	.word	0x20001184
 8008440:	20000fd4 	.word	0x20000fd4

08008444 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 800844e:	2301      	movs	r3, #1
 8008450:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 800845a:	4a2e      	ldr	r2, [pc, #184]	@ (8008514 <prvReadDNSCache+0xd0>)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	216c      	movs	r1, #108	@ 0x6c
 8008460:	fb01 f303 	mul.w	r3, r1, r3
 8008464:	4413      	add	r3, r2
 8008466:	3368      	adds	r3, #104	@ 0x68
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	2b04      	cmp	r3, #4
 8008470:	d901      	bls.n	8008476 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008472:	2304      	movs	r3, #4
 8008474:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8008476:	2300      	movs	r3, #0
 8008478:	61fb      	str	r3, [r7, #28]
 800847a:	e041      	b.n	8008500 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 800847c:	69fa      	ldr	r2, [r7, #28]
 800847e:	4613      	mov	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	216c      	movs	r1, #108	@ 0x6c
 800848a:	fb01 f202 	mul.w	r2, r1, r2
 800848e:	4413      	add	r3, r2
 8008490:	4a20      	ldr	r2, [pc, #128]	@ (8008514 <prvReadDNSCache+0xd0>)
 8008492:	4413      	add	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <prvReadDNSCache+0x60>
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d010      	beq.n	80084c4 <prvReadDNSCache+0x80>
 80084a2:	e01d      	b.n	80084e0 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	226c      	movs	r2, #108	@ 0x6c
 80084ac:	fb02 f303 	mul.w	r3, r2, r3
 80084b0:	3350      	adds	r3, #80	@ 0x50
 80084b2:	4a18      	ldr	r2, [pc, #96]	@ (8008514 <prvReadDNSCache+0xd0>)
 80084b4:	4413      	add	r3, r2
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	2102      	movs	r1, #2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff fc8c 	bl	8007dd8 <pxNew_AddrInfo>
 80084c0:	6178      	str	r0, [r7, #20]
                       }
                       break;
 80084c2:	e011      	b.n	80084e8 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	226c      	movs	r2, #108	@ 0x6c
 80084c8:	fb02 f303 	mul.w	r3, r2, r3
 80084cc:	3350      	adds	r3, #80	@ 0x50
 80084ce:	4a11      	ldr	r2, [pc, #68]	@ (8008514 <prvReadDNSCache+0xd0>)
 80084d0:	4413      	add	r3, r2
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	210a      	movs	r1, #10
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7ff fc7e 	bl	8007dd8 <pxNew_AddrInfo>
 80084dc:	6178      	str	r0, [r7, #20]
                        break;
 80084de:	e003      	b.n	80084e8 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 80084e0:	480d      	ldr	r0, [pc, #52]	@ (8008518 <prvReadDNSCache+0xd4>)
 80084e2:	f01a f96f 	bl	80227c4 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 80084e6:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00d      	beq.n	800850a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	331c      	adds	r3, #28
 80084f8:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	3301      	adds	r3, #1
 80084fe:	61fb      	str	r3, [r7, #28]
 8008500:	69fa      	ldr	r2, [r7, #28]
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	429a      	cmp	r2, r3
 8008506:	d3b9      	bcc.n	800847c <prvReadDNSCache+0x38>
        }
    }
 8008508:	e000      	b.n	800850c <prvReadDNSCache+0xc8>
                break;
 800850a:	bf00      	nop
    }
 800850c:	bf00      	nop
 800850e:	3720      	adds	r7, #32
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	20000fd4 	.word	0x20000fd4
 8008518:	08025068 	.word	0x08025068

0800851c <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 800851c:	b580      	push	{r7, lr}
 800851e:	b08a      	sub	sp, #40	@ 0x28
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8008526:	2300      	movs	r3, #0
 8008528:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800852a:	4b28      	ldr	r3, [pc, #160]	@ (80085cc <xDNSDoCallback+0xb0>)
 800852c:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 8008538:	2300      	movs	r3, #0
 800853a:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 800853c:	2300      	movs	r3, #0
 800853e:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 8008540:	f7fc fabe 	bl	8004ac0 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	623b      	str	r3, [r7, #32]
 800854a:	e029      	b.n	80085a0 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	429a      	cmp	r2, r3
 800855a:	d101      	bne.n	8008560 <xDNSDoCallback+0x44>
 800855c:	2301      	movs	r3, #1
 800855e:	e000      	b.n	8008562 <xDNSDoCallback+0x46>
 8008560:	2300      	movs	r3, #0
 8008562:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d117      	bne.n	800859a <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3314      	adds	r3, #20
 800857a:	4618      	mov	r0, r3
 800857c:	f7fb f9b8 	bl	80038f0 <uxListRemove>
                    vPortFree( pxCallback );
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f7fe faf3 	bl	8006b6c <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008586:	4b12      	ldr	r3, [pc, #72]	@ (80085d0 <xDNSDoCallback+0xb4>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d102      	bne.n	8008594 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 800858e:	2000      	movs	r0, #0
 8008590:	f002 f9ca 	bl	800a928 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8008594:	2301      	movs	r3, #1
 8008596:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8008598:	e006      	b.n	80085a8 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 80085a0:	6a3a      	ldr	r2, [r7, #32]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d1d1      	bne.n	800854c <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 80085a8:	f7fc fa98 	bl	8004adc <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d006      	beq.n	80085c0 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	69b9      	ldr	r1, [r7, #24]
 80085be:	4798      	blx	r3
        }

        return xResult;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80085c2:	4618      	mov	r0, r3
 80085c4:	3728      	adds	r7, #40	@ 0x28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20001190 	.word	0x20001190
 80085d0:	20001188 	.word	0x20001188

080085d4 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08c      	sub	sp, #48	@ 0x30
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 80085dc:	4b40      	ldr	r3, [pc, #256]	@ (80086e0 <vDNSCheckCallBack+0x10c>)
 80085de:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 80085e0:	f107 030c 	add.w	r3, r7, #12
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fb f8f9 	bl	80037dc <vListInitialise>

        vTaskSuspendAll();
 80085ea:	f7fc fa69 	bl	8004ac0 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80085ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085f4:	e02e      	b.n	8008654 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80085f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80085fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00d      	beq.n	8008624 <vDNSCheckCallBack+0x50>
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	429a      	cmp	r2, r3
 8008610:	d108      	bne.n	8008624 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	3314      	adds	r3, #20
 8008616:	4618      	mov	r0, r3
 8008618:	f7fb f96a 	bl	80038f0 <uxListRemove>
                    vPortFree( pxCallback );
 800861c:	6a38      	ldr	r0, [r7, #32]
 800861e:	f7fe faa5 	bl	8006b6c <vPortFree>
 8008622:	e017      	b.n	8008654 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	3308      	adds	r3, #8
 8008628:	6a3a      	ldr	r2, [r7, #32]
 800862a:	4611      	mov	r1, r2
 800862c:	4618      	mov	r0, r3
 800862e:	f7fc ff3b 	bl	80054a8 <xTaskCheckForTimeOut>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00d      	beq.n	8008654 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	3314      	adds	r3, #20
 800863c:	4618      	mov	r0, r3
 800863e:	f7fb f957 	bl	80038f0 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	f103 0214 	add.w	r2, r3, #20
 8008648:	f107 030c 	add.w	r3, r7, #12
 800864c:	4611      	mov	r1, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f7fb f8f1 	bl	8003836 <vListInsertEnd>
                 pxIterator != xEnd; )
 8008654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008658:	429a      	cmp	r2, r3
 800865a:	d1cc      	bne.n	80085f6 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 800865c:	f7fc fa3e 	bl	8004adc <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d030      	beq.n	80086c8 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 8008666:	f107 030c 	add.w	r3, r7, #12
 800866a:	3308      	adds	r3, #8
 800866c:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800866e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008674:	e024      	b.n	80086c0 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800867c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8008682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 800868a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008690:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008696:	6911      	ldr	r1, [r2, #16]
 8008698:	2200      	movs	r2, #0
 800869a:	4798      	blx	r3
 800869c:	e008      	b.n	80086b0 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 800869e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a4:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 80086a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086aa:	6911      	ldr	r1, [r2, #16]
 80086ac:	2200      	movs	r2, #0
 80086ae:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	3314      	adds	r3, #20
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fb f91b 	bl	80038f0 <uxListRemove>
                vPortFree( pxCallback );
 80086ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086bc:	f7fe fa56 	bl	8006b6c <vPortFree>
                 pxIterator != xEnd;
 80086c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d1d6      	bne.n	8008676 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 80086c8:	4b06      	ldr	r3, [pc, #24]	@ (80086e4 <vDNSCheckCallBack+0x110>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 80086d0:	2000      	movs	r0, #0
 80086d2:	f002 f929 	bl	800a928 <vIPSetDNSTimerEnableState>
        }
    }
 80086d6:	bf00      	nop
 80086d8:	3730      	adds	r7, #48	@ 0x30
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20001190 	.word	0x20001190
 80086e4:	20001188 	.word	0x20001188

080086e8 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 80086ec:	4802      	ldr	r0, [pc, #8]	@ (80086f8 <vDNSCallbackInitialise+0x10>)
 80086ee:	f7fb f875 	bl	80037dc <vListInitialise>
    }
 80086f2:	bf00      	nop
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20001188 	.word	0x20001188

080086fc <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 80086fc:	b480      	push	{r7}
 80086fe:	b089      	sub	sp, #36	@ 0x24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	61bb      	str	r3, [r7, #24]
 8008724:	e069      	b.n	80087fa <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	4413      	add	r3, r2
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008732:	2bc0      	cmp	r3, #192	@ 0xc0
 8008734:	d144      	bne.n	80087c0 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	2b02      	cmp	r3, #2
 800873a:	d903      	bls.n	8008744 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	3302      	adds	r3, #2
 8008740:	61bb      	str	r3, [r7, #24]
 8008742:	e05a      	b.n	80087fa <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	61bb      	str	r3, [r7, #24]
 8008748:	e057      	b.n	80087fa <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d008      	beq.n	8008762 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	4413      	add	r3, r2
 8008756:	3334      	adds	r3, #52	@ 0x34
 8008758:	222e      	movs	r2, #46	@ 0x2e
 800875a:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	3301      	adds	r3, #1
 8008760:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	4413      	add	r3, r2
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	3301      	adds	r3, #1
 8008770:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	4413      	add	r3, r2
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	429a      	cmp	r2, r3
 800877c:	d202      	bcs.n	8008784 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	61bb      	str	r3, [r7, #24]
                    break;
 8008782:	e027      	b.n	80087d4 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	4413      	add	r3, r2
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d812      	bhi.n	80087b6 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	61bb      	str	r3, [r7, #24]
                    break;
 8008794:	e01e      	b.n	80087d4 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	4413      	add	r3, r2
 800879c:	7819      	ldrb	r1, [r3, #0]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	4413      	add	r3, r2
 80087a4:	3334      	adds	r3, #52	@ 0x34
 80087a6:	460a      	mov	r2, r1
 80087a8:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	3301      	adds	r3, #1
 80087ae:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	3301      	adds	r3, #1
 80087b4:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	1e5a      	subs	r2, r3, #1
 80087ba:	617a      	str	r2, [r7, #20]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1ea      	bne.n	8008796 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d205      	bcs.n	80087d4 <DNS_ReadNameField+0xd8>
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	4413      	add	r3, r2
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1ba      	bne.n	800874a <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00f      	beq.n	80087fa <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d209      	bcs.n	80087f6 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	3334      	adds	r3, #52	@ 0x34
 80087ea:	2200      	movs	r2, #0
 80087ec:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	3301      	adds	r3, #1
 80087f2:	61bb      	str	r3, [r7, #24]
 80087f4:	e001      	b.n	80087fa <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 80087fa:	69bb      	ldr	r3, [r7, #24]
    }
 80087fc:	4618      	mov	r0, r3
 80087fe:	3724      	adds	r7, #36	@ 0x24
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	e03f      	b.n	80088a6 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	4413      	add	r3, r2
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008832:	2bc0      	cmp	r3, #192	@ 0xc0
 8008834:	d11f      	bne.n	8008876 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d903      	bls.n	8008844 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	3302      	adds	r3, #2
 8008840:	613b      	str	r3, [r7, #16]
 8008842:	e030      	b.n	80088a6 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	613b      	str	r3, [r7, #16]
 8008848:	e02d      	b.n	80088a6 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	4413      	add	r3, r2
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	429a      	cmp	r2, r3
 800885c:	d908      	bls.n	8008870 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	613b      	str	r3, [r7, #16]
 800886e:	e002      	b.n	8008876 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8008870:	2300      	movs	r3, #0
 8008872:	613b      	str	r3, [r7, #16]
                    break;
 8008874:	e008      	b.n	8008888 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	4413      	add	r3, r2
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d002      	beq.n	8008888 <DNS_SkipNameField+0x80>
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d8e0      	bhi.n	800884a <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00b      	beq.n	80088a6 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	4413      	add	r3, r2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d103      	bne.n	80088a2 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	3301      	adds	r3, #1
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	e001      	b.n	80088a6 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 80088a6:	693b      	ldr	r3, [r7, #16]
    }
 80088a8:	4618      	mov	r0, r3
 80088aa:	371c      	adds	r7, #28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 80088b4:	b5b0      	push	{r4, r5, r7, lr}
 80088b6:	b0f6      	sub	sp, #472	@ 0x1d8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 80088be:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 80088c2:	6020      	str	r0, [r4, #0]
 80088c4:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 80088c8:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 80088cc:	6001      	str	r1, [r0, #0]
 80088ce:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 80088d2:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 80088d6:	600a      	str	r2, [r1, #0]
 80088d8:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80088dc:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 80088e0:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 80088e2:	2301      	movs	r3, #1
 80088e4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 80088ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80088f2:	224c      	movs	r2, #76	@ 0x4c
 80088f4:	2100      	movs	r1, #0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f01a fa8d 	bl	8022e16 <memset>
        xSet.usPortNumber = usPort;
 80088fc:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8008900:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8008904:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008908:	3344      	adds	r3, #68	@ 0x44
 800890a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 800890e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008912:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 800891c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008920:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b0b      	cmp	r3, #11
 8008928:	d803      	bhi.n	8008932 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 800892a:	2300      	movs	r3, #0
 800892c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8008930:	e35a      	b.n	8008fe8 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 8008932:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008936:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8008940:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008944:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 800894e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008952:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8008962:	2300      	movs	r3, #0
 8008964:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8008968:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800896c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8008976:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800897a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	330c      	adds	r3, #12
 8008982:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8008986:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800898a:	3b0c      	subs	r3, #12
 800898c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8008990:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008994:	889b      	ldrh	r3, [r3, #4]
 8008996:	b29b      	uxth	r3, r3
 8008998:	021b      	lsls	r3, r3, #8
 800899a:	b21a      	sxth	r2, r3
 800899c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80089a0:	889b      	ldrh	r3, [r3, #4]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	0a1b      	lsrs	r3, r3, #8
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	b21b      	sxth	r3, r3
 80089aa:	4313      	orrs	r3, r2
 80089ac:	b21b      	sxth	r3, r3
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 80089b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80089b8:	88db      	ldrh	r3, [r3, #6]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	021b      	lsls	r3, r3, #8
 80089be:	b21a      	sxth	r2, r3
 80089c0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80089c4:	88db      	ldrh	r3, [r3, #6]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	0a1b      	lsrs	r3, r3, #8
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	b21b      	sxth	r3, r3
 80089ce:	4313      	orrs	r3, r2
 80089d0:	b21b      	sxth	r3, r3
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 80089d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80089dc:	885b      	ldrh	r3, [r3, #2]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 80089e4:	2b80      	cmp	r3, #128	@ 0x80
 80089e6:	d11b      	bne.n	8008a20 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 80089e8:	2301      	movs	r3, #1
 80089ea:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 80089ee:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d103      	bne.n	80089fe <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 80089f6:	2300      	movs	r3, #0
 80089f8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80089fc:	e2f4      	b.n	8008fe8 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 80089fe:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d114      	bne.n	8008a30 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8008a06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a0a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 8008a0e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008a12:	2110      	movs	r1, #16
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff fe71 	bl	80086fc <DNS_ReadNameField>
 8008a1a:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8008a1e:	e007      	b.n	8008a30 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8008a20:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d103      	bne.n	8008a30 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008a2e:	e2db      	b.n	8008fe8 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 8008a30:	2300      	movs	r3, #0
 8008a32:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8008a36:	e064      	b.n	8008b02 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 8008a38:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d103      	bne.n	8008a48 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8008a40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a44:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 8008a48:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d108      	bne.n	8008a62 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 8008a50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008a54:	2110      	movs	r1, #16
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff fe50 	bl	80086fc <DNS_ReadNameField>
 8008a5c:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8008a60:	e009      	b.n	8008a76 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 8008a62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a66:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff fecb 	bl	8008808 <DNS_SkipNameField>
 8008a72:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8008a76:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d103      	bne.n	8008a86 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008a84:	e043      	b.n	8008b0e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 8008a86:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8008a8a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a8e:	4413      	add	r3, r2
 8008a90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8008a94:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008a98:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8008aa2:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8008aa6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008ab0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d91b      	bls.n	8008af0 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8008ab8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008abc:	4618      	mov	r0, r3
 8008abe:	f002 fa58 	bl	800af72 <usChar2u16>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8008ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008acc:	3302      	adds	r3, #2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f002 fa4f 	bl	800af72 <usChar2u16>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 8008ada:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ade:	3304      	adds	r3, #4
 8008ae0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8008ae4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008ae8:	3b04      	subs	r3, #4
 8008aea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8008aee:	e003      	b.n	8008af8 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008af6:	e00a      	b.n	8008b0e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8008af8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8008afc:	3301      	adds	r3, #1
 8008afe:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8008b02:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008b06:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d394      	bcc.n	8008a38 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 8008b0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 8265 	beq.w	8008fe2 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8008b18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d10d      	bne.n	8008b3c <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8008b20:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8008b24:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b28:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008b2c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8008b30:	6819      	ldr	r1, [r3, #0]
 8008b32:	f000 fa73 	bl	800901c <parseDNSAnswer>
 8008b36:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 8008b3a:	e255      	b.n	8008fe8 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8008b3c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d004      	beq.n	8008b4e <DNS_ParseDNSReply+0x29a>
 8008b44:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008b48:	2b1c      	cmp	r3, #28
 8008b4a:	f040 824d 	bne.w	8008fe8 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 8008b4e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	f040 8248 	bne.w	8008fe8 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8008b58:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b5c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	f001 ff9f 	bl	800aaa4 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8008b66:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 8008b6a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d103      	bne.n	8008b7a <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 8008b72:	48c4      	ldr	r0, [pc, #784]	@ (8008e84 <DNS_ParseDNSReply+0x5d0>)
 8008b74:	f019 fe26 	bl	80227c4 <lUDPLoggingPrintf>
                            break;
 8008b78:	e236      	b.n	8008fe8 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 8008b7a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b80:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008b84:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8008b88:	6812      	ldr	r2, [r2, #0]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8008b90:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008b94:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b96:	d003      	beq.n	8008ba0 <DNS_ParseDNSReply+0x2ec>
 8008b98:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008b9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b9e:	d101      	bne.n	8008ba4 <DNS_ParseDNSReply+0x2f0>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <DNS_ParseDNSReply+0x2f2>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <DNS_ParseDNSReply+0x300>
 8008baa:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8008bae:	48b6      	ldr	r0, [pc, #728]	@ (8008e88 <DNS_ParseDNSReply+0x5d4>)
 8008bb0:	f7f8 ff2a 	bl	8001a08 <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8008bb4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 8213 	beq.w	8008fe6 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008bc0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 8008bca:	f107 0314 	add.w	r3, r7, #20
 8008bce:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008bd2:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f01a f810 	bl	8022bfc <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 8008bdc:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008be0:	461a      	mov	r2, r3
 8008be2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008be6:	3334      	adds	r3, #52	@ 0x34
 8008be8:	4619      	mov	r1, r3
 8008bea:	48a8      	ldr	r0, [pc, #672]	@ (8008e8c <DNS_ParseDNSReply+0x5d8>)
 8008bec:	f019 fdea 	bl	80227c4 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8008bf0:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008bfa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008bfe:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8008c02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008c06:	3334      	adds	r3, #52	@ 0x34
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7f8 ff91 	bl	8001b30 <xApplicationDNSQueryHook>
 8008c0e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8008c12:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d014      	beq.n	8008c44 <DNS_ParseDNSReply+0x390>
 8008c1a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008c1e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008c22:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008c26:	f003 0304 	and.w	r3, r3, #4
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d109      	bne.n	8008c44 <DNS_ParseDNSReply+0x390>
 8008c30:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008c34:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d102      	bne.n	8008c44 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 8008c44:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 81cd 	beq.w	8008fe8 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 8008c5a:	4b8d      	ldr	r3, [pc, #564]	@ (8008e90 <DNS_ParseDNSReply+0x5dc>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d164      	bne.n	8008d2c <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 8008c62:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008c66:	f001 fbd7 	bl	800a418 <uxIPHeaderSizePacket>
 8008c6a:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 8008c6c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008c70:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 8008c78:	3316      	adds	r3, #22
 8008c7a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008c7e:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008c82:	2b1c      	cmp	r3, #28
 8008c84:	d103      	bne.n	8008c8e <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 8008c86:	231c      	movs	r3, #28
 8008c88:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8008c8c:	e002      	b.n	8008c94 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 8008c8e:	2310      	movs	r3, #16
 8008c90:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8008c94:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008c98:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008c9c:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 8008c9e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008ca2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8008ca6:	4413      	add	r3, r2
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008cae:	f001 fe65 	bl	800a97c <pxDuplicateNetworkBufferWithDescriptor>
 8008cb2:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8008cb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d032      	beq.n	8008d24 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 8008cbe:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008cc2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008cc6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8008cd2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008cd6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008cda:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8008ce6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008cea:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8008cee:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008cf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cf4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 8008cfe:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008d02:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008d06:	4413      	add	r3, r2
 8008d08:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 8008d0c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008d10:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008d14:	4413      	add	r3, r2
 8008d16:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 8008d1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008d1e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008d22:	e00b      	b.n	8008d3c <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008d24:	2300      	movs	r3, #0
 8008d26:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8008d2a:	e007      	b.n	8008d3c <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8008d2c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008d30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d32:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008d36:	4413      	add	r3, r2
 8008d38:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 8008d3c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 8151 	beq.w	8008fe8 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 8008d46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d4a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 8008d4e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d52:	3302      	adds	r3, #2
 8008d54:	2280      	movs	r2, #128	@ 0x80
 8008d56:	701a      	strb	r2, [r3, #0]
 8008d58:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d5c:	3303      	adds	r3, #3
 8008d5e:	2200      	movs	r2, #0
 8008d60:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 8008d62:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d66:	3306      	adds	r3, #6
 8008d68:	2200      	movs	r2, #0
 8008d6a:	701a      	strb	r2, [r3, #0]
 8008d6c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d70:	3307      	adds	r3, #7
 8008d72:	2201      	movs	r2, #1
 8008d74:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 8008d76:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	701a      	strb	r2, [r3, #0]
 8008d80:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d84:	3309      	adds	r3, #9
 8008d86:	2200      	movs	r2, #0
 8008d88:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 8008d8a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d8e:	330a      	adds	r3, #10
 8008d90:	2200      	movs	r2, #0
 8008d92:	701a      	strb	r2, [r3, #0]
 8008d94:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d98:	330b      	adds	r3, #11
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8008d9e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008da2:	22c0      	movs	r2, #192	@ 0xc0
 8008da4:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 8008da6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008daa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008db6:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 8008db8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008dbc:	0a1b      	lsrs	r3, r3, #8
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dc4:	3302      	adds	r3, #2
 8008dc6:	b2d2      	uxtb	r2, r2
 8008dc8:	701a      	strb	r2, [r3, #0]
 8008dca:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 8008dce:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dd2:	3303      	adds	r3, #3
 8008dd4:	b2d2      	uxtb	r2, r2
 8008dd6:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 8008dd8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008ddc:	3304      	adds	r3, #4
 8008dde:	2200      	movs	r2, #0
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008de6:	3305      	adds	r3, #5
 8008de8:	2201      	movs	r2, #1
 8008dea:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8008dec:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008df0:	3306      	adds	r3, #6
 8008df2:	2200      	movs	r2, #0
 8008df4:	701a      	strb	r2, [r3, #0]
 8008df6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dfa:	3307      	adds	r3, #7
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	701a      	strb	r2, [r3, #0]
 8008e00:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e04:	3308      	adds	r3, #8
 8008e06:	2201      	movs	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e0e:	3309      	adds	r3, #9
 8008e10:	222c      	movs	r2, #44	@ 0x2c
 8008e12:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8008e14:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008e18:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	3310      	adds	r3, #16
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008e28:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008e2c:	2b1c      	cmp	r3, #28
 8008e2e:	d131      	bne.n	8008e94 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 8008e30:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e34:	330a      	adds	r3, #10
 8008e36:	2200      	movs	r2, #0
 8008e38:	701a      	strb	r2, [r3, #0]
 8008e3a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e3e:	330b      	adds	r3, #11
 8008e40:	2210      	movs	r2, #16
 8008e42:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008e44:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e48:	f103 020c 	add.w	r2, r3, #12
 8008e4c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e50:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008e54:	4615      	mov	r5, r2
 8008e56:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8008e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e5c:	6028      	str	r0, [r5, #0]
 8008e5e:	6069      	str	r1, [r5, #4]
 8008e60:	60aa      	str	r2, [r5, #8]
 8008e62:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008e64:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008e68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 8008e72:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	331c      	adds	r3, #28
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 8008e80:	e09a      	b.n	8008fb8 <DNS_ParseDNSReply+0x704>
 8008e82:	bf00      	nop
 8008e84:	08025110 	.word	0x08025110
 8008e88:	08025144 	.word	0x08025144
 8008e8c:	08025178 	.word	0x08025178
 8008e90:	08028038 	.word	0x08028038
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 8008e94:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e98:	330a      	adds	r3, #10
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	701a      	strb	r2, [r3, #0]
 8008e9e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008ea2:	330b      	adds	r3, #11
 8008ea4:	2204      	movs	r2, #4
 8008ea6:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 8008ea8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008eac:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	061a      	lsls	r2, r3, #24
 8008eb4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008eb8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	021b      	lsls	r3, r3, #8
 8008ec0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008eca:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	0a1b      	lsrs	r3, r3, #8
 8008ed2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008edc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	0e1b      	lsrs	r3, r3, #24
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	0e1a      	lsrs	r2, r3, #24
 8008ee8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008eec:	330c      	adds	r3, #12
 8008eee:	b2d2      	uxtb	r2, r2
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ef6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	061a      	lsls	r2, r3, #24
 8008efe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f02:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	021b      	lsls	r3, r3, #8
 8008f0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f14:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	0a1b      	lsrs	r3, r3, #8
 8008f1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008f20:	431a      	orrs	r2, r3
 8008f22:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f26:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	0e1b      	lsrs	r3, r3, #24
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	0c1a      	lsrs	r2, r3, #16
 8008f32:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f36:	330d      	adds	r3, #13
 8008f38:	b2d2      	uxtb	r2, r2
 8008f3a:	701a      	strb	r2, [r3, #0]
 8008f3c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f40:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	061a      	lsls	r2, r3, #24
 8008f48:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f4c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	021b      	lsls	r3, r3, #8
 8008f54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f5e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	0a1b      	lsrs	r3, r3, #8
 8008f66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f70:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	0e1b      	lsrs	r3, r3, #24
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	0a1a      	lsrs	r2, r3, #8
 8008f7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f80:	330e      	adds	r3, #14
 8008f82:	b2d2      	uxtb	r2, r2
 8008f84:	701a      	strb	r2, [r3, #0]
 8008f86:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f8a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	0e1a      	lsrs	r2, r3, #24
 8008f92:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f96:	330f      	adds	r3, #15
 8008f98:	b2d2      	uxtb	r2, r2
 8008f9a:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008f9c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008fa0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 8008faa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	3310      	adds	r3, #16
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 8008fb8:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008fc2:	f000 fa21 	bl	8009408 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008fcc:	f001 f924 	bl	800a218 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8008fd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d007      	beq.n	8008fe8 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8008fd8:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8008fdc:	f00e fd4a 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
 8008fe0:	e002      	b.n	8008fe8 <DNS_ParseDNSReply+0x734>
                    break;
 8008fe2:	bf00      	nop
 8008fe4:	e000      	b.n	8008fe8 <DNS_ParseDNSReply+0x734>
                            break;
 8008fe6:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8008fe8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d103      	bne.n	8008ff8 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008ff6:	e009      	b.n	800900c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8008ff8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ffc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 800900c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8009010:	4618      	mov	r0, r3
 8009012:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8009016:	46bd      	mov	sp, r7
 8009018:	bdb0      	pop	{r4, r5, r7, pc}
 800901a:	bf00      	nop

0800901c <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 800901c:	b590      	push	{r4, r7, lr}
 800901e:	b0a7      	sub	sp, #156	@ 0x9c
 8009020:	af02      	add	r7, sp, #8
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 800902e:	2304      	movs	r3, #4
 8009030:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8009034:	2301      	movs	r3, #1
 8009036:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8009040:	2300      	movs	r3, #0
 8009042:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009046:	e1c1      	b.n	80093cc <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 8009048:	2300      	movs	r3, #0
 800904a:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009050:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009054:	429a      	cmp	r2, r3
 8009056:	f240 81c1 	bls.w	80093dc <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	4619      	mov	r1, r3
 8009064:	4610      	mov	r0, r2
 8009066:	f7ff fbcf 	bl	8008808 <DNS_SkipNameField>
 800906a:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 800906c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800906e:	2b00      	cmp	r3, #0
 8009070:	d103      	bne.n	800907a <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8009072:	2300      	movs	r3, #0
 8009074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8009078:	e1b1      	b.n	80093de <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009086:	441a      	add	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009092:	441a      	add	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	695a      	ldr	r2, [r3, #20]
 800909c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d803      	bhi.n	80090b4 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 80090ac:	2300      	movs	r3, #0
 80090ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 80090b2:	e194      	b.n	80093de <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 ff5a 	bl	800af72 <usChar2u16>
 80090be:	4603      	mov	r3, r0
 80090c0:	461a      	mov	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8b1b      	ldrh	r3, [r3, #24]
 80090ca:	2b1c      	cmp	r3, #28
 80090cc:	d10c      	bne.n	80090e8 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2210      	movs	r2, #16
 80090d2:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	695a      	ldr	r2, [r3, #20]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	330a      	adds	r3, #10
 80090de:	429a      	cmp	r2, r3
 80090e0:	d323      	bcc.n	800912a <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 80090e2:	2301      	movs	r3, #1
 80090e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090e6:	e020      	b.n	800912a <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	8b1b      	ldrh	r3, [r3, #24]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d11c      	bne.n	800912a <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2204      	movs	r2, #4
 80090f4:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	695a      	ldr	r2, [r3, #20]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	330a      	adds	r3, #10
 8009100:	429a      	cmp	r2, r3
 8009102:	d312      	bcc.n	800912a <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	330a      	adds	r3, #10
 800910a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 800910c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009110:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	461a      	mov	r2, r3
 8009118:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800911a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800911c:	f019 fd6e 	bl	8022bfc <memcpy>

                    if( ulTestAddress != 0U )
 8009120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8009126:	2301      	movs	r3, #1
 8009128:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 800912a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 810d 	beq.w	800934c <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8009138:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800913a:	891b      	ldrh	r3, [r3, #8]
 800913c:	b29b      	uxth	r3, r3
 800913e:	021b      	lsls	r3, r3, #8
 8009140:	b21a      	sxth	r2, r3
 8009142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009144:	891b      	ldrh	r3, [r3, #8]
 8009146:	b29b      	uxth	r3, r3
 8009148:	0a1b      	lsrs	r3, r3, #8
 800914a:	b29b      	uxth	r3, r3
 800914c:	b21b      	sxth	r3, r3
 800914e:	4313      	orrs	r3, r2
 8009150:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8009156:	b21b      	sxth	r3, r3
 8009158:	429a      	cmp	r2, r3
 800915a:	f040 80d0 	bne.w	80092fe <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	2b10      	cmp	r3, #16
 8009164:	d11c      	bne.n	80091a0 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 800916c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	6859      	ldr	r1, [r3, #4]
 8009174:	689a      	ldr	r2, [r3, #8]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d009      	beq.n	8009194 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3334      	adds	r3, #52	@ 0x34
 8009184:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009188:	210a      	movs	r1, #10
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fe24 	bl	8007dd8 <pxNew_AddrInfo>
 8009190:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8009194:	2301      	movs	r3, #1
 8009196:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2201      	movs	r2, #1
 800919c:	61da      	str	r2, [r3, #28]
 800919e:	e021      	b.n	80091e4 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	330a      	adds	r3, #10
 80091a6:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	331c      	adds	r3, #28
 80091ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	461a      	mov	r2, r3
 80091b4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80091b6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80091b8:	f019 fd20 	bl	8022bfc <memcpy>

                        if( ppxAddressInfo != NULL )
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00b      	beq.n	80091da <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	331c      	adds	r3, #28
 80091c6:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3334      	adds	r3, #52	@ 0x34
 80091cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091ce:	2102      	movs	r1, #2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fe fe01 	bl	8007dd8 <pxNew_AddrInfo>
 80091d6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 80091e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d013      	beq.n	8009214 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d104      	bne.n	80091fe <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	e004      	b.n	8009208 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009202:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009206:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8009208:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800920c:	f103 021c 	add.w	r2, r3, #28
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <parseDNSAnswer+0x204>
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	e000      	b.n	8009222 <parseDNSAnswer+0x206>
 8009220:	2300      	movs	r3, #0
 8009222:	4619      	mov	r1, r3
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f7ff f979 	bl	800851c <xDNSDoCallback>
 800922a:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 800922c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800923c:	2b00      	cmp	r3, #0
 800923e:	d011      	beq.n	8009264 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 8009246:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009248:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 800924a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800924e:	2300      	movs	r3, #0
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	2300      	movs	r3, #0
 8009254:	f7fe fe85 	bl	8007f62 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800925c:	3301      	adds	r3, #1
 800925e:	b29a      	uxth	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8b1b      	ldrh	r3, [r3, #24]
 8009268:	2b1c      	cmp	r3, #28
 800926a:	d11f      	bne.n	80092ac <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 800926c:	f107 0214 	add.w	r2, r7, #20
 8009270:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8009274:	2328      	movs	r3, #40	@ 0x28
 8009276:	200a      	movs	r0, #10
 8009278:	f006 fb6c 	bl	800f954 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	b29b      	uxth	r3, r3
 8009284:	4618      	mov	r0, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <parseDNSAnswer+0x27c>
 8009294:	4b58      	ldr	r3, [pc, #352]	@ (80093f8 <parseDNSAnswer+0x3dc>)
 8009296:	e000      	b.n	800929a <parseDNSAnswer+0x27e>
 8009298:	4b58      	ldr	r3, [pc, #352]	@ (80093fc <parseDNSAnswer+0x3e0>)
 800929a:	f107 0114 	add.w	r1, r7, #20
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	460b      	mov	r3, r1
 80092a2:	4601      	mov	r1, r0
 80092a4:	4856      	ldr	r0, [pc, #344]	@ (8009400 <parseDNSAnswer+0x3e4>)
 80092a6:	f019 fa8d 	bl	80227c4 <lUDPLoggingPrintf>
 80092aa:	e01f      	b.n	80092ec <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 80092b2:	f107 0214 	add.w	r2, r7, #20
 80092b6:	2328      	movs	r3, #40	@ 0x28
 80092b8:	2002      	movs	r0, #2
 80092ba:	f006 fb4b 	bl	800f954 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	4618      	mov	r0, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <parseDNSAnswer+0x2be>
 80092d6:	4b48      	ldr	r3, [pc, #288]	@ (80093f8 <parseDNSAnswer+0x3dc>)
 80092d8:	e000      	b.n	80092dc <parseDNSAnswer+0x2c0>
 80092da:	4b48      	ldr	r3, [pc, #288]	@ (80093fc <parseDNSAnswer+0x3e0>)
 80092dc:	f107 0114 	add.w	r1, r7, #20
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	460b      	mov	r3, r1
 80092e4:	4601      	mov	r1, r0
 80092e6:	4846      	ldr	r0, [pc, #280]	@ (8009400 <parseDNSAnswer+0x3e4>)
 80092e8:	f019 fa6c 	bl	80227c4 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 80092ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d119      	bne.n	8009328 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80092fc:	e014      	b.n	8009328 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 80092fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009300:	891b      	ldrh	r3, [r3, #8]
 8009302:	b29b      	uxth	r3, r3
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	b21a      	sxth	r2, r3
 8009308:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800930a:	891b      	ldrh	r3, [r3, #8]
 800930c:	b29b      	uxth	r3, r3
 800930e:	0a1b      	lsrs	r3, r3, #8
 8009310:	b29b      	uxth	r3, r3
 8009312:	b21b      	sxth	r3, r3
 8009314:	4313      	orrs	r3, r2
 8009316:	b21b      	sxth	r3, r3
 8009318:	b29b      	uxth	r3, r3
 800931a:	4619      	mov	r1, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	461a      	mov	r2, r3
 8009322:	4838      	ldr	r0, [pc, #224]	@ (8009404 <parseDNSAnswer+0x3e8>)
 8009324:	f019 fa4e 	bl	80227c4 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68da      	ldr	r2, [r3, #12]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	330a      	adds	r3, #10
 8009332:	441a      	add	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	695a      	ldr	r2, [r3, #20]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	f1a3 020a 	sub.w	r2, r3, #10
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	615a      	str	r2, [r3, #20]
 800934a:	e03a      	b.n	80093c2 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	2b09      	cmp	r3, #9
 8009352:	d936      	bls.n	80093c2 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f103 020a 	add.w	r2, r3, #10
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	f1a3 020a 	sub.w	r2, r3, #10
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8009372:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009374:	891b      	ldrh	r3, [r3, #8]
 8009376:	b29b      	uxth	r3, r3
 8009378:	021b      	lsls	r3, r3, #8
 800937a:	b21a      	sxth	r2, r3
 800937c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800937e:	891b      	ldrh	r3, [r3, #8]
 8009380:	b29b      	uxth	r3, r3
 8009382:	0a1b      	lsrs	r3, r3, #8
 8009384:	b29b      	uxth	r3, r3
 8009386:	b21b      	sxth	r3, r3
 8009388:	4313      	orrs	r3, r2
 800938a:	b21b      	sxth	r3, r3
 800938c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	695a      	ldr	r2, [r3, #20]
 8009394:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009398:	429a      	cmp	r2, r3
 800939a:	d30e      	bcc.n	80093ba <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80093a4:	441a      	add	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	695a      	ldr	r2, [r3, #20]
 80093ae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80093b2:	1ad2      	subs	r2, r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	615a      	str	r2, [r3, #20]
 80093b8:	e003      	b.n	80093c2 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 80093ba:	2300      	movs	r3, #0
 80093bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 80093c0:	e00d      	b.n	80093de <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 80093c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80093c6:	3301      	adds	r3, #1
 80093c8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	88db      	ldrh	r3, [r3, #6]
 80093d0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80093d4:	429a      	cmp	r2, r3
 80093d6:	f4ff ae37 	bcc.w	8009048 <parseDNSAnswer+0x2c>
 80093da:	e000      	b.n	80093de <parseDNSAnswer+0x3c2>
                break;
 80093dc:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 80093de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d002      	beq.n	80093ec <parseDNSAnswer+0x3d0>
 80093e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093ea:	e000      	b.n	80093ee <parseDNSAnswer+0x3d2>
 80093ec:	2300      	movs	r3, #0
    }
 80093ee:	4618      	mov	r0, r3
 80093f0:	3794      	adds	r7, #148	@ 0x94
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd90      	pop	{r4, r7, pc}
 80093f6:	bf00      	nop
 80093f8:	080251a8 	.word	0x080251a8
 80093fc:	080251ac 	.word	0x080251ac
 8009400:	080251b4 	.word	0x080251b4
 8009404:	080251ec 	.word	0x080251ec

08009408 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8009408:	b580      	push	{r7, lr}
 800940a:	b08c      	sub	sp, #48	@ 0x30
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009416:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fffd 	bl	800a418 <uxIPHeaderSizePacket>
 800941e:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	2b00      	cmp	r3, #0
 8009424:	d104      	bne.n	8009430 <prepareReplyDNSMessage+0x28>
 8009426:	f240 319f 	movw	r1, #927	@ 0x39f
 800942a:	4865      	ldr	r0, [pc, #404]	@ (80095c0 <prepareReplyDNSMessage+0x1b8>)
 800942c:	f7f8 faec 	bl	8001a08 <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009434:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	330e      	adds	r3, #14
 800943a:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 800943c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943e:	2b28      	cmp	r3, #40	@ 0x28
 8009440:	d150      	bne.n	80094e4 <prepareReplyDNSMessage+0xdc>
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800944a:	2b60      	cmp	r3, #96	@ 0x60
 800944c:	d14a      	bne.n	80094e4 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009452:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	330e      	adds	r3, #14
 8009458:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	3336      	adds	r3, #54	@ 0x36
 800945e:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	b29b      	uxth	r3, r3
 8009464:	3308      	adds	r3, #8
 8009466:	b29b      	uxth	r3, r3
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	b29a      	uxth	r2, r3
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	b29b      	uxth	r3, r3
 8009470:	3308      	adds	r3, #8
 8009472:	0a1b      	lsrs	r3, r3, #8
 8009474:	b29b      	uxth	r3, r3
 8009476:	4313      	orrs	r3, r2
 8009478:	b29a      	uxth	r2, r3
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f103 0018 	add.w	r0, r3, #24
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	3308      	adds	r3, #8
 8009488:	2210      	movs	r2, #16
 800948a:	4619      	mov	r1, r3
 800948c:	f019 fbb6 	bl	8022bfc <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f103 0008 	add.w	r0, r3, #8
 8009496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009498:	3338      	adds	r3, #56	@ 0x38
 800949a:	2210      	movs	r2, #16
 800949c:	4619      	mov	r1, r3
 800949e:	f019 fbad 	bl	8022bfc <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	3308      	adds	r3, #8
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	021b      	lsls	r3, r3, #8
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	3308      	adds	r3, #8
 80094b4:	0a1b      	lsrs	r3, r3, #8
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	4313      	orrs	r3, r2
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	781a      	ldrb	r2, [r3, #0]
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	021b      	lsls	r3, r3, #8
 80094c8:	4313      	orrs	r3, r2
 80094ca:	81fb      	strh	r3, [r7, #14]
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	885b      	ldrh	r3, [r3, #2]
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	801a      	strh	r2, [r3, #0]
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	89fa      	ldrh	r2, [r7, #14]
 80094da:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	333e      	adds	r3, #62	@ 0x3e
 80094e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 80094e2:	e066      	b.n	80095b2 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	3322      	adds	r3, #34	@ 0x22
 80094e8:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	4413      	add	r3, r2
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	3308      	adds	r3, #8
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	021b      	lsls	r3, r3, #8
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	b29b      	uxth	r3, r3
 8009502:	4619      	mov	r1, r3
 8009504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009506:	440b      	add	r3, r1
 8009508:	3308      	adds	r3, #8
 800950a:	0a1b      	lsrs	r3, r3, #8
 800950c:	b29b      	uxth	r3, r3
 800950e:	4313      	orrs	r3, r2
 8009510:	b29a      	uxth	r2, r3
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	4a2a      	ldr	r2, [pc, #168]	@ (80095c4 <prepareReplyDNSMessage+0x1bc>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d103      	bne.n	8009528 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	22ff      	movs	r2, #255	@ 0xff
 8009524:	721a      	strb	r2, [r3, #8]
 8009526:	e006      	b.n	8009536 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	2280      	movs	r2, #128	@ 0x80
 8009534:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8009536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800953e:	4b22      	ldr	r3, [pc, #136]	@ (80095c8 <prepareReplyDNSMessage+0x1c0>)
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	b21a      	sxth	r2, r3
 8009546:	4b20      	ldr	r3, [pc, #128]	@ (80095c8 <prepareReplyDNSMessage+0x1c0>)
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	0a1b      	lsrs	r3, r3, #8
 800954c:	b29b      	uxth	r3, r3
 800954e:	b21b      	sxth	r3, r3
 8009550:	4313      	orrs	r3, r2
 8009552:	b21b      	sxth	r3, r3
 8009554:	b29a      	uxth	r2, r3
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	2200      	movs	r2, #0
 800955e:	719a      	strb	r2, [r3, #6]
 8009560:	2200      	movs	r2, #0
 8009562:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 8009564:	4b18      	ldr	r3, [pc, #96]	@ (80095c8 <prepareReplyDNSMessage+0x1c0>)
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	3301      	adds	r3, #1
 800956a:	b29a      	uxth	r2, r3
 800956c:	4b16      	ldr	r3, [pc, #88]	@ (80095c8 <prepareReplyDNSMessage+0x1c0>)
 800956e:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	b29b      	uxth	r3, r3
 8009574:	3308      	adds	r3, #8
 8009576:	b29b      	uxth	r3, r3
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	b29a      	uxth	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	3308      	adds	r3, #8
 8009580:	0a1b      	lsrs	r3, r3, #8
 8009582:	b29b      	uxth	r3, r3
 8009584:	4313      	orrs	r3, r2
 8009586:	b29a      	uxth	r2, r3
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	781a      	ldrb	r2, [r3, #0]
 8009590:	785b      	ldrb	r3, [r3, #1]
 8009592:	021b      	lsls	r3, r3, #8
 8009594:	4313      	orrs	r3, r2
 8009596:	81bb      	strh	r3, [r7, #12]
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	885b      	ldrh	r3, [r3, #2]
 800959c:	b29a      	uxth	r2, r3
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	801a      	strh	r2, [r3, #0]
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	89ba      	ldrh	r2, [r7, #12]
 80095a6:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ac:	4413      	add	r3, r2
 80095ae:	3316      	adds	r3, #22
 80095b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095b6:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 80095b8:	bf00      	nop
 80095ba:	3730      	adds	r7, #48	@ 0x30
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	08025144 	.word	0x08025144
 80095c4:	fb0000e0 	.word	0xfb0000e0
 80095c8:	200011a4 	.word	0x200011a4

080095cc <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80095d4:	2300      	movs	r3, #0
 80095d6:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095dc:	2b29      	cmp	r3, #41	@ 0x29
 80095de:	d803      	bhi.n	80095e8 <ProcessICMPPacket+0x1c>
 80095e0:	2159      	movs	r1, #89	@ 0x59
 80095e2:	4811      	ldr	r0, [pc, #68]	@ (8009628 <ProcessICMPPacket+0x5c>)
 80095e4:	f7f8 fa10 	bl	8001a08 <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ec:	2b29      	cmp	r3, #41	@ 0x29
 80095ee:	d915      	bls.n	800961c <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f4:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d008      	beq.n	8009612 <ProcessICMPPacket+0x46>
 8009600:	2b08      	cmp	r3, #8
 8009602:	d10a      	bne.n	800961a <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	68b8      	ldr	r0, [r7, #8]
 8009608:	f000 f810 	bl	800962c <prvProcessICMPEchoRequest>
 800960c:	4603      	mov	r3, r0
 800960e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 8009610:	e004      	b.n	800961c <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 8009612:	68b8      	ldr	r0, [r7, #8]
 8009614:	f000 f836 	bl	8009684 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 8009618:	e000      	b.n	800961c <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 800961a:	bf00      	nop
            }
        }

        return eReturn;
 800961c:	7bfb      	ldrb	r3, [r7, #15]
    }
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	08025210 	.word	0x08025210

0800962c <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	3322      	adds	r3, #34	@ 0x22
 800963a:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	330e      	adds	r3, #14
 8009640:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2200      	movs	r2, #0
 8009646:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	68da      	ldr	r2, [r3, #12]
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	2240      	movs	r2, #64	@ 0x40
 8009660:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2200      	movs	r2, #0
 8009666:	719a      	strb	r2, [r3, #6]
 8009668:	2200      	movs	r2, #0
 800966a:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2200      	movs	r2, #0
 8009670:	709a      	strb	r2, [r3, #2]
 8009672:	2200      	movs	r2, #0
 8009674:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8009676:	2302      	movs	r3, #2
    }
 8009678:	4618      	mov	r0, r3
 800967a:	371c      	adds	r7, #28
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 800968c:	2300      	movs	r3, #0
 800968e:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	7c1a      	ldrb	r2, [r3, #16]
 8009694:	7c5b      	ldrb	r3, [r3, #17]
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	4313      	orrs	r3, r2
 800969a:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 800969c:	89fb      	ldrh	r3, [r7, #14]
 800969e:	021b      	lsls	r3, r3, #8
 80096a0:	b21a      	sxth	r2, r3
 80096a2:	89fb      	ldrh	r3, [r7, #14]
 80096a4:	0a1b      	lsrs	r3, r3, #8
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	b21b      	sxth	r3, r3
 80096aa:	4313      	orrs	r3, r2
 80096ac:	b21b      	sxth	r3, r3
 80096ae:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 80096b0:	89fb      	ldrh	r3, [r7, #14]
 80096b2:	3b14      	subs	r3, #20
 80096b4:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 80096b6:	89fb      	ldrh	r3, [r7, #14]
 80096b8:	3b08      	subs	r3, #8
 80096ba:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	332a      	adds	r3, #42	@ 0x2a
 80096c4:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 80096c6:	2300      	movs	r3, #0
 80096c8:	82bb      	strh	r3, [r7, #20]
 80096ca:	e00c      	b.n	80096e6 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	2b78      	cmp	r3, #120	@ 0x78
 80096d2:	d002      	beq.n	80096da <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 80096d4:	2302      	movs	r3, #2
 80096d6:	75fb      	strb	r3, [r7, #23]
                break;
 80096d8:	e009      	b.n	80096ee <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	3301      	adds	r3, #1
 80096de:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 80096e0:	8abb      	ldrh	r3, [r7, #20]
 80096e2:	3301      	adds	r3, #1
 80096e4:	82bb      	strh	r3, [r7, #20]
 80096e6:	8aba      	ldrh	r2, [r7, #20]
 80096e8:	89fb      	ldrh	r3, [r7, #14]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d3ee      	bcc.n	80096cc <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	4611      	mov	r1, r2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7f8 fa3b 	bl	8001b74 <vApplicationPingReplyHook>
    }
 80096fe:	bf00      	nop
 8009700:	3718      	adds	r7, #24
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
	...

08009708 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 8009710:	f000 f90e 	bl	8009930 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8009714:	4802      	ldr	r0, [pc, #8]	@ (8009720 <prvIPTask+0x18>)
 8009716:	f019 f855 	bl	80227c4 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 800971a:	f000 f803 	bl	8009724 <prvProcessIPEventsAndTimers>
 800971e:	e7fc      	b.n	800971a <prvIPTask+0x12>
 8009720:	08025240 	.word	0x08025240

08009724 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 8009724:	b590      	push	{r4, r7, lr}
 8009726:	b08d      	sub	sp, #52	@ 0x34
 8009728:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 800972a:	f000 ff09 	bl	800a540 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 800972e:	f000 fea7 	bl	800a480 <xCalculateSleepTime>
 8009732:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8009734:	4b7c      	ldr	r3, [pc, #496]	@ (8009928 <prvProcessIPEventsAndTimers+0x204>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f107 0118 	add.w	r1, r7, #24
 800973c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800973e:	4618      	mov	r0, r3
 8009740:	f7fa fb38 	bl	8003db4 <xQueueReceive>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 800974a:	23ff      	movs	r3, #255	@ 0xff
 800974c:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 800974e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8009752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009756:	d00d      	beq.n	8009774 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 8009758:	4b73      	ldr	r3, [pc, #460]	@ (8009928 <prvProcessIPEventsAndTimers+0x204>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4618      	mov	r0, r3
 800975e:	f7fa fd01 	bl	8004164 <uxQueueSpacesAvailable>
 8009762:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 8009764:	4b71      	ldr	r3, [pc, #452]	@ (800992c <prvProcessIPEventsAndTimers+0x208>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800976a:	429a      	cmp	r2, r3
 800976c:	d202      	bcs.n	8009774 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 800976e:	4a6f      	ldr	r2, [pc, #444]	@ (800992c <prvProcessIPEventsAndTimers+0x208>)
 8009770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009772:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8009774:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8009778:	3301      	adds	r3, #1
 800977a:	2b0e      	cmp	r3, #14
 800977c:	f200 80ca 	bhi.w	8009914 <prvProcessIPEventsAndTimers+0x1f0>
 8009780:	a201      	add	r2, pc, #4	@ (adr r2, 8009788 <prvProcessIPEventsAndTimers+0x64>)
 8009782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009786:	bf00      	nop
 8009788:	08009915 	.word	0x08009915
 800978c:	080097c5 	.word	0x080097c5
 8009790:	080097cf 	.word	0x080097cf
 8009794:	080097d9 	.word	0x080097d9
 8009798:	080097e5 	.word	0x080097e5
 800979c:	080098af 	.word	0x080098af
 80097a0:	080098b9 	.word	0x080098b9
 80097a4:	080098cd 	.word	0x080098cd
 80097a8:	080098d5 	.word	0x080098d5
 80097ac:	080098f9 	.word	0x080098f9
 80097b0:	080097ef 	.word	0x080097ef
 80097b4:	080098a5 	.word	0x080098a5
 80097b8:	080098c3 	.word	0x080098c3
 80097bc:	08009915 	.word	0x08009915
 80097c0:	080098ff 	.word	0x080098ff
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 f9cc 	bl	800ab64 <prvProcessNetworkDownEvent>
            break;
 80097cc:	e0a5      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 f955 	bl	8009a80 <prvHandleEthernetPacket>
            break;
 80097d6:	e0a0      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	2101      	movs	r1, #1
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 f95d 	bl	8009a9c <prvForwardTxPacket>
            break;
 80097e2:	e09a      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 80097e4:	f7fe f94e 	bl	8007a84 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 80097e8:	f002 fdb6 	bl	800c358 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 80097ec:	e095      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 80097f2:	2318      	movs	r3, #24
 80097f4:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	7a1b      	ldrb	r3, [r3, #8]
 80097fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <prvProcessIPEventsAndTimers+0xe6>
 8009804:	2b01      	cmp	r3, #1
 8009806:	d01a      	beq.n	800983e <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8009808:	e02c      	b.n	8009864 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 800980a:	2302      	movs	r3, #2
 800980c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009812:	061a      	lsls	r2, r3, #24
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009818:	021b      	lsls	r3, r3, #8
 800981a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800981e:	431a      	orrs	r2, r3
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009824:	0a1b      	lsrs	r3, r3, #8
 8009826:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800982a:	431a      	orrs	r2, r3
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009830:	0e1b      	lsrs	r3, r3, #24
 8009832:	4313      	orrs	r3, r2
 8009834:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	2200      	movs	r2, #0
 800983a:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 800983c:	e012      	b.n	8009864 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 800983e:	230a      	movs	r3, #10
 8009840:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	3328      	adds	r3, #40	@ 0x28
 8009846:	f107 0408 	add.w	r4, r7, #8
 800984a:	6818      	ldr	r0, [r3, #0]
 800984c:	6859      	ldr	r1, [r3, #4]
 800984e:	689a      	ldr	r2, [r3, #8]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	3328      	adds	r3, #40	@ 0x28
 8009858:	2210      	movs	r2, #16
 800985a:	2100      	movs	r1, #0
 800985c:	4618      	mov	r0, r3
 800985e:	f019 fada 	bl	8022e16 <memset>
                        break;
 8009862:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8009868:	021b      	lsls	r3, r3, #8
 800986a:	b21a      	sxth	r2, r3
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	b29b      	uxth	r3, r3
 8009874:	b21b      	sxth	r3, r3
 8009876:	4313      	orrs	r3, r2
 8009878:	b21b      	sxth	r3, r3
 800987a:	b29b      	uxth	r3, r3
 800987c:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 800987e:	6a3b      	ldr	r3, [r7, #32]
 8009880:	2200      	movs	r2, #0
 8009882:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009884:	4639      	mov	r1, r7
 8009886:	2300      	movs	r3, #0
 8009888:	2218      	movs	r2, #24
 800988a:	6a38      	ldr	r0, [r7, #32]
 800988c:	f005 fa32 	bl	800ecf4 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f043 0210 	orr.w	r2, r3, #16
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 800989c:	6a38      	ldr	r0, [r7, #32]
 800989e:	f006 f8d8 	bl	800fa52 <vSocketWakeUpUser>
            break;
 80098a2:	e03a      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f005 fad8 	bl	800ee5c <vSocketClose>
            break;
 80098ac:	e035      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f00d facf 	bl	8016e54 <vProcessGeneratedUDPPacket>
            break;
 80098b6:	e030      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 f88c 	bl	80099d8 <prvCallDHCP_RA_Handler>
            break;
 80098c0:	e02b      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f007 fbd1 	bl	801106c <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 80098ca:	e026      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 80098cc:	2001      	movs	r0, #1
 80098ce:	f000 ffab 	bl	800a828 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 80098d2:	e022      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 80098d8:	6a38      	ldr	r0, [r7, #32]
 80098da:	f008 fd0b 	bl	80122f4 <xTCPCheckNewClient>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d019      	beq.n	8009918 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f043 0204 	orr.w	r2, r3, #4
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 80098f0:	6a38      	ldr	r0, [r7, #32]
 80098f2:	f006 f8ae 	bl	800fa52 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 80098f6:	e00f      	b.n	8009918 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 80098f8:	f007 faa2 	bl	8010e40 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 80098fc:	e00d      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4618      	mov	r0, r3
 8009908:	f7f9 ff10 	bl	800372c <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 800990c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800990e:	f7fd f92d 	bl	8006b6c <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8009912:	e002      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 8009914:	bf00      	nop
 8009916:	e000      	b.n	800991a <prvProcessIPEventsAndTimers+0x1f6>
            break;
 8009918:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 800991a:	f000 f833 	bl	8009984 <prvIPTask_CheckPendingEvents>
}
 800991e:	bf00      	nop
 8009920:	3734      	adds	r7, #52	@ 0x34
 8009922:	46bd      	mov	sp, r7
 8009924:	bd90      	pop	{r4, r7, pc}
 8009926:	bf00      	nop
 8009928:	200011a0 	.word	0x200011a0
 800992c:	20000014 	.word	0x20000014

08009930 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 8009936:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800993a:	f000 ff2b 	bl	800a794 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800993e:	4b0f      	ldr	r3, [pc, #60]	@ (800997c <prvIPTask_Initialise+0x4c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	607b      	str	r3, [r7, #4]
 8009944:	e005      	b.n	8009952 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f8be 	bl	8009ac8 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009950:	607b      	str	r3, [r7, #4]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1f6      	bne.n	8009946 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8009958:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800995c:	f000 fee8 	bl	800a730 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 8009960:	2000      	movs	r0, #0
 8009962:	f000 ff9b 	bl	800a89c <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 8009966:	f7fe fa31 	bl	8007dcc <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 800996a:	f7fe fb0f 	bl	8007f8c <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 800996e:	4b04      	ldr	r3, [pc, #16]	@ (8009980 <prvIPTask_Initialise+0x50>)
 8009970:	2201      	movs	r2, #1
 8009972:	601a      	str	r2, [r3, #0]
}
 8009974:	bf00      	nop
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	2000152c 	.word	0x2000152c
 8009980:	200011b0 	.word	0x200011b0

08009984 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 800998a:	4b12      	ldr	r3, [pc, #72]	@ (80099d4 <prvIPTask_CheckPendingEvents+0x50>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d01c      	beq.n	80099cc <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8009992:	4b10      	ldr	r3, [pc, #64]	@ (80099d4 <prvIPTask_CheckPendingEvents+0x50>)
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8009998:	f004 f836 	bl	800da08 <FreeRTOS_FirstNetworkInterface>
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	e012      	b.n	80099c6 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	7f1b      	ldrb	r3, [r3, #28]
 80099a4:	f003 0302 	and.w	r3, r3, #2
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d007      	beq.n	80099be <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 f8d8 	bl	800ab64 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	7f13      	ldrb	r3, [r2, #28]
 80099b8:	f36f 0341 	bfc	r3, #1, #1
 80099bc:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f004 f82e 	bl	800da20 <FreeRTOS_NextNetworkInterface>
 80099c4:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1e9      	bne.n	80099a0 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	200011a8 	.word	0x200011a8

080099d8 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 80099e0:	2300      	movs	r3, #0
 80099e2:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80099ea:	f003 0304 	and.w	r3, r3, #4
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 80099f4:	2301      	movs	r3, #1
 80099f6:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d10b      	bne.n	8009a16 <prvCallDHCP_RA_Handler+0x3e>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009a04:	f003 0302 	and.w	r3, r3, #2
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	2000      	movs	r0, #0
 8009a12:	f003 fecd 	bl	800d7b0 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8009a16:	bf00      	nop
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 8009a20:	b480      	push	{r7}
 8009a22:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 8009a24:	4b03      	ldr	r3, [pc, #12]	@ (8009a34 <FreeRTOS_GetIPTaskHandle+0x14>)
 8009a26:	681b      	ldr	r3, [r3, #0]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	200011ac 	.word	0x200011ac

08009a38 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009a46:	f003 0304 	and.w	r3, r3, #4
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d003      	beq.n	8009a58 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 8009a50:	2101      	movs	r1, #1
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f002 fa7e 	bl	800bf54 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009a5e:	f043 0310 	orr.w	r3, r3, #16
 8009a62:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8009a66:	2000      	movs	r0, #0
 8009a68:	f7f8 f802 	bl	8001a70 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 8009a6c:	f7fe f9ae 	bl	8007dcc <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8009a70:	f242 7010 	movw	r0, #10000	@ 0x2710
 8009a74:	f000 fe6a 	bl	800a74c <vARPTimerReload>
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d002      	beq.n	8009a94 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f9c8 	bl	8009e24 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d007      	beq.n	8009abe <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	6879      	ldr	r1, [r7, #4]
 8009abc:	4798      	blx	r3
    }
}
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	7f13      	ldrb	r3, [r2, #28]
 8009ad8:	f36f 0300 	bfc	r3, #0, #1
 8009adc:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8009ae6:	f107 030c 	add.w	r3, r7, #12
 8009aea:	6979      	ldr	r1, [r7, #20]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 f8df 	bl	8009cb0 <xSendEventStructToIPTask>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d008      	beq.n	8009b0a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	7f13      	ldrb	r3, [r2, #28]
 8009afc:	f043 0302 	orr.w	r3, r3, #2
 8009b00:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8009b02:	4b06      	ldr	r3, [pc, #24]	@ (8009b1c <FreeRTOS_NetworkDown+0x54>)
 8009b04:	2201      	movs	r2, #1
 8009b06:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8009b08:	e004      	b.n	8009b14 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	7f13      	ldrb	r3, [r2, #28]
 8009b0e:	f36f 0341 	bfc	r3, #1, #1
 8009b12:	7713      	strb	r3, [r2, #28]
}
 8009b14:	bf00      	nop
 8009b16:	3718      	adds	r7, #24
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	200011a8 	.word	0x200011a8

08009b20 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 8009b2a:	f003 ff6d 	bl	800da08 <FreeRTOS_FirstNetworkInterface>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d104      	bne.n	8009b3e <FreeRTOS_IPInit_Multi+0x1e>
 8009b34:	f240 31b5 	movw	r1, #949	@ 0x3b5
 8009b38:	4823      	ldr	r0, [pc, #140]	@ (8009bc8 <FreeRTOS_IPInit_Multi+0xa8>)
 8009b3a:	f7f7 ff65 	bl	8001a08 <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 8009b3e:	f001 f8cb 	bl	800acd8 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8009b42:	2200      	movs	r2, #0
 8009b44:	2108      	movs	r1, #8
 8009b46:	2045      	movs	r0, #69	@ 0x45
 8009b48:	f7f9 ff82 	bl	8003a50 <xQueueGenericCreate>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bcc <FreeRTOS_IPInit_Multi+0xac>)
 8009b50:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 8009b52:	4b1e      	ldr	r3, [pc, #120]	@ (8009bcc <FreeRTOS_IPInit_Multi+0xac>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d104      	bne.n	8009b64 <FreeRTOS_IPInit_Multi+0x44>
 8009b5a:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 8009b5e:	481a      	ldr	r0, [pc, #104]	@ (8009bc8 <FreeRTOS_IPInit_Multi+0xa8>)
 8009b60:	f7f7 ff52 	bl	8001a08 <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8009b64:	4b19      	ldr	r3, [pc, #100]	@ (8009bcc <FreeRTOS_IPInit_Multi+0xac>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d025      	beq.n	8009bb8 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8009b6c:	4b17      	ldr	r3, [pc, #92]	@ (8009bcc <FreeRTOS_IPInit_Multi+0xac>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4917      	ldr	r1, [pc, #92]	@ (8009bd0 <FreeRTOS_IPInit_Multi+0xb0>)
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fa fc58 	bl	8004428 <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8009b78:	f00d feaa 	bl	80178d0 <xNetworkBuffersInitialise>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d10e      	bne.n	8009ba0 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8009b82:	f004 fc7f 	bl	800e484 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 8009b86:	4b13      	ldr	r3, [pc, #76]	@ (8009bd4 <FreeRTOS_IPInit_Multi+0xb4>)
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	2304      	movs	r3, #4
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8009b94:	4910      	ldr	r1, [pc, #64]	@ (8009bd8 <FreeRTOS_IPInit_Multi+0xb8>)
 8009b96:	4811      	ldr	r0, [pc, #68]	@ (8009bdc <FreeRTOS_IPInit_Multi+0xbc>)
 8009b98:	f7fa fcfc 	bl	8004594 <xTaskCreate>
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	e00e      	b.n	8009bbe <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8009ba0:	480f      	ldr	r0, [pc, #60]	@ (8009be0 <FreeRTOS_IPInit_Multi+0xc0>)
 8009ba2:	f018 fe0f 	bl	80227c4 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8009ba6:	4b09      	ldr	r3, [pc, #36]	@ (8009bcc <FreeRTOS_IPInit_Multi+0xac>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fa fafa 	bl	80041a4 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8009bb0:	4b06      	ldr	r3, [pc, #24]	@ (8009bcc <FreeRTOS_IPInit_Multi+0xac>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]
 8009bb6:	e002      	b.n	8009bbe <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8009bb8:	480a      	ldr	r0, [pc, #40]	@ (8009be4 <FreeRTOS_IPInit_Multi+0xc4>)
 8009bba:	f018 fe03 	bl	80227c4 <lUDPLoggingPrintf>
    }

    return xReturn;
 8009bbe:	687b      	ldr	r3, [r7, #4]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	08025254 	.word	0x08025254
 8009bcc:	200011a0 	.word	0x200011a0
 8009bd0:	08025280 	.word	0x08025280
 8009bd4:	200011ac 	.word	0x200011ac
 8009bd8:	08025288 	.word	0x08025288
 8009bdc:	08009709 	.word	0x08009709
 8009be0:	08025290 	.word	0x08025290
 8009be4:	080252cc 	.word	0x080252cc

08009be8 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d023      	beq.n	8009c44 <FreeRTOS_GetEndPointConfiguration+0x5c>
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009c02:	f003 0304 	and.w	r3, r3, #4
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d11b      	bne.n	8009c44 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	689a      	ldr	r2, [r3, #8]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	68da      	ldr	r2, [r3, #12]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8009c44:	bf00      	nop
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af02      	add	r7, sp, #8
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8009c5e:	2000      	movs	r0, #0
 8009c60:	f003 ff72 	bl	800db48 <FreeRTOS_FirstEndPoint>
 8009c64:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d007      	beq.n	8009c7c <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	68b9      	ldr	r1, [r7, #8]
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7ff ffb6 	bl	8009be8 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 8009c7c:	bf00      	nop
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8009c96:	2300      	movs	r3, #0
 8009c98:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8009c9a:	f107 030c 	add.w	r3, r7, #12
 8009c9e:	6979      	ldr	r1, [r7, #20]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 f805 	bl	8009cb0 <xSendEventStructToIPTask>
 8009ca6:	4603      	mov	r3, r0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3718      	adds	r7, #24
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8009cbe:	f000 fb93 	bl	800a3e8 <xIPIsNetworkTaskReady>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d107      	bne.n	8009cd8 <xSendEventStructToIPTask+0x28>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f993 3000 	ldrsb.w	r3, [r3]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	617b      	str	r3, [r7, #20]
 8009cd6:	e035      	b.n	8009d44 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f993 3000 	ldrsb.w	r3, [r3]
 8009ce2:	2b06      	cmp	r3, #6
 8009ce4:	d10c      	bne.n	8009d00 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	f000 fd9e 	bl	800a828 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8009cec:	4b18      	ldr	r3, [pc, #96]	@ (8009d50 <xSendEventStructToIPTask+0xa0>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fa fa1d 	bl	8004130 <uxQueueMessagesWaiting>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d01c      	beq.n	8009d40 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009d06:	f000 ff15 	bl	800ab34 <xIsCallingFromIPTask>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d104      	bne.n	8009d1a <xSendEventStructToIPTask+0x6a>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8009d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d50 <xSendEventStructToIPTask+0xa0>)
 8009d1c:	6818      	ldr	r0, [r3, #0]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	f7f9 ff5e 	bl	8003be4 <xQueueGenericSend>
 8009d28:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d109      	bne.n	8009d44 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f993 3000 	ldrsb.w	r3, [r3]
 8009d36:	4619      	mov	r1, r3
 8009d38:	4806      	ldr	r0, [pc, #24]	@ (8009d54 <xSendEventStructToIPTask+0xa4>)
 8009d3a:	f018 fd43 	bl	80227c4 <lUDPLoggingPrintf>
 8009d3e:	e001      	b.n	8009d44 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009d40:	2301      	movs	r3, #1
 8009d42:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009d44:	697b      	ldr	r3, [r7, #20]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	200011a0 	.word	0x200011a0
 8009d54:	08025310 	.word	0x08025310

08009d58 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009d60:	2301      	movs	r3, #1
 8009d62:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 8009d64:	2300      	movs	r3, #0
 8009d66:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d102      	bne.n	8009d78 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75fb      	strb	r3, [r7, #23]
 8009d76:	e032      	b.n	8009dde <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f003 ff81 	bl	800dc88 <FreeRTOS_FindEndPointOnMAC>
 8009d86:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d002      	beq.n	8009d94 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	75fb      	strb	r3, [r7, #23]
 8009d92:	e024      	b.n	8009dde <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	2206      	movs	r2, #6
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4820      	ldr	r0, [pc, #128]	@ (8009e1c <eConsiderFrameForProcessing+0xc4>)
 8009d9c:	f019 fec3 	bl	8023b26 <memcmp>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d102      	bne.n	8009dac <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 8009da6:	2301      	movs	r3, #1
 8009da8:	75fb      	strb	r3, [r7, #23]
 8009daa:	e018      	b.n	8009dde <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	2206      	movs	r2, #6
 8009db0:	4619      	mov	r1, r3
 8009db2:	481b      	ldr	r0, [pc, #108]	@ (8009e20 <eConsiderFrameForProcessing+0xc8>)
 8009db4:	f019 feb7 	bl	8023b26 <memcmp>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d102      	bne.n	8009dc4 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	75fb      	strb	r3, [r7, #23]
 8009dc2:	e00c      	b.n	8009dde <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b33      	cmp	r3, #51	@ 0x33
 8009dca:	d106      	bne.n	8009dda <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009dd0:	2b33      	cmp	r3, #51	@ 0x33
 8009dd2:	d102      	bne.n	8009dda <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	75fb      	strb	r3, [r7, #23]
 8009dd8:	e001      	b.n	8009dde <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d115      	bne.n	8009e10 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	7b1a      	ldrb	r2, [r3, #12]
 8009de8:	7b5b      	ldrb	r3, [r3, #13]
 8009dea:	021b      	lsls	r3, r3, #8
 8009dec:	4313      	orrs	r3, r2
 8009dee:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8009df0:	897b      	ldrh	r3, [r7, #10]
 8009df2:	021b      	lsls	r3, r3, #8
 8009df4:	b21a      	sxth	r2, r3
 8009df6:	897b      	ldrh	r3, [r7, #10]
 8009df8:	0a1b      	lsrs	r3, r3, #8
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	b21b      	sxth	r3, r3
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	b21b      	sxth	r3, r3
 8009e02:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8009e04:	897b      	ldrh	r3, [r7, #10]
 8009e06:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009e0a:	d801      	bhi.n	8009e10 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	08027f4c 	.word	0x08027f4c
 8009e20:	08027f3c 	.word	0x08027f3c

08009e24 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d03d      	beq.n	8009eb4 <prvProcessEthernetPacket+0x90>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d039      	beq.n	8009eb4 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e44:	2b0d      	cmp	r3, #13
 8009e46:	d934      	bls.n	8009eb2 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009e48:	2301      	movs	r3, #1
 8009e4a:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e50:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	899b      	ldrh	r3, [r3, #12]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d015      	beq.n	8009e8c <prvProcessEthernetPacket+0x68>
 8009e60:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009e64:	4293      	cmp	r3, r2
 8009e66:	dc21      	bgt.n	8009eac <prvProcessEthernetPacket+0x88>
 8009e68:	2b08      	cmp	r3, #8
 8009e6a:	d00f      	beq.n	8009e8c <prvProcessEthernetPacket+0x68>
 8009e6c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8009e70:	d11c      	bne.n	8009eac <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e76:	2b29      	cmp	r3, #41	@ 0x29
 8009e78:	d905      	bls.n	8009e86 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7fc ffe6 	bl	8006e4c <eARPProcessPacket>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 8009e84:	e016      	b.n	8009eb4 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]
                        break;
 8009e8a:	e013      	b.n	8009eb4 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e90:	2b21      	cmp	r3, #33	@ 0x21
 8009e92:	d908      	bls.n	8009ea6 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 f8c6 	bl	800a02c <prvProcessIPPacket>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8009ea4:	e006      	b.n	8009eb4 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]
                    break;
 8009eaa:	e003      	b.n	8009eb4 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 8009eac:	2300      	movs	r3, #0
 8009eae:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 8009eb0:	e000      	b.n	8009eb4 <prvProcessEthernetPacket+0x90>
            break;
 8009eb2:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8009eb4:	7bfb      	ldrb	r3, [r7, #15]
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d00b      	beq.n	8009ed2 <prvProcessEthernetPacket+0xae>
 8009eba:	2b04      	cmp	r3, #4
 8009ebc:	dc19      	bgt.n	8009ef2 <prvProcessEthernetPacket+0xce>
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d002      	beq.n	8009ec8 <prvProcessEthernetPacket+0xa4>
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d019      	beq.n	8009efa <prvProcessEthernetPacket+0xd6>
 8009ec6:	e014      	b.n	8009ef2 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8009ec8:	2101      	movs	r1, #1
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f9a4 	bl	800a218 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8009ed0:	e014      	b.n	8009efc <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 8009ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8009f04 <prvProcessEthernetPacket+0xe0>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d107      	bne.n	8009eea <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 8009eda:	4a0a      	ldr	r2, [pc, #40]	@ (8009f04 <prvProcessEthernetPacket+0xe0>)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8009ee0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009ee4:	f000 fc06 	bl	800a6f4 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 8009ee8:	e008      	b.n	8009efc <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f00d fdc2 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009ef0:	e004      	b.n	8009efc <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f00d fdbe 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009ef8:	e000      	b.n	8009efc <prvProcessEthernetPacket+0xd8>
            break;
 8009efa:	bf00      	nop
    }
}
 8009efc:	bf00      	nop
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	2000119c 	.word	0x2000119c

08009f08 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009f08:	b5b0      	push	{r4, r5, r7, lr}
 8009f0a:	b08c      	sub	sp, #48	@ 0x30
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009f10:	2300      	movs	r3, #0
 8009f12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8009f16:	2300      	movs	r3, #0
 8009f18:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f22:	3322      	adds	r3, #34	@ 0x22
 8009f24:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fa76 	bl	800a418 <uxIPHeaderSizePacket>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	3316      	adds	r3, #22
 8009f30:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8009f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f34:	899b      	ldrh	r3, [r3, #12]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d105      	bne.n	8009f4c <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f44:	3336      	adds	r3, #54	@ 0x36
 8009f46:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 8009f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4e:	889b      	ldrh	r3, [r3, #4]
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	021b      	lsls	r3, r3, #8
 8009f54:	b21a      	sxth	r2, r3
 8009f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f58:	889b      	ldrh	r3, [r3, #4]
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	0a1b      	lsrs	r3, r3, #8
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	b21b      	sxth	r3, r3
 8009f62:	4313      	orrs	r3, r2
 8009f64:	b21b      	sxth	r3, r3
 8009f66:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 8009f68:	8b7b      	ldrh	r3, [r7, #26]
 8009f6a:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6e:	899b      	ldrh	r3, [r3, #12]
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	2b08      	cmp	r3, #8
 8009f74:	d11a      	bne.n	8009fac <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8009f76:	8b7c      	ldrh	r4, [r7, #26]
 8009f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7a:	8a1b      	ldrh	r3, [r3, #16]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	021b      	lsls	r3, r3, #8
 8009f80:	b21a      	sxth	r2, r3
 8009f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f84:	8a1b      	ldrh	r3, [r3, #16]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	0a1b      	lsrs	r3, r3, #8
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	b21b      	sxth	r3, r3
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	b21b      	sxth	r3, r3
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	461d      	mov	r5, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fa3e 	bl	800a418 <uxIPHeaderSizePacket>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009fa0:	429c      	cmp	r4, r3
 8009fa2:	d903      	bls.n	8009fac <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009faa:	e038      	b.n	800a01e <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb0:	6a3a      	ldr	r2, [r7, #32]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d833      	bhi.n	800a01e <prvProcessUDPPacket+0x116>
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b07      	cmp	r3, #7
 8009fba:	d930      	bls.n	800a01e <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	3b08      	subs	r3, #8
 8009fca:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d904      	bls.n	8009fde <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	441a      	add	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 8009fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe0:	881b      	ldrh	r3, [r3, #0]
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fea:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	885b      	ldrh	r3, [r3, #2]
 8009ff6:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009ff8:	f107 0208 	add.w	r2, r7, #8
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f00c ff48 	bl	8016e94 <xProcessReceivedUDPPacket>
 800a004:	4603      	mov	r3, r0
 800a006:	2b01      	cmp	r3, #1
 800a008:	d103      	bne.n	800a012 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 800a00a:	2303      	movs	r3, #3
 800a00c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a010:	e005      	b.n	800a01e <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d102      	bne.n	800a01e <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 800a018:	2304      	movs	r3, #4
 800a01a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 800a01e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a022:	4618      	mov	r0, r3
 800a024:	3730      	adds	r7, #48	@ 0x30
 800a026:	46bd      	mov	sp, r7
 800a028:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a02c <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b088      	sub	sp, #32
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 800a036:	2314      	movs	r3, #20
 800a038:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 800a03e:	2300      	movs	r3, #0
 800a040:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	330e      	adds	r3, #14
 800a046:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	899b      	ldrh	r3, [r3, #12]
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	2b08      	cmp	r3, #8
 800a050:	d023      	beq.n	800a09a <prvProcessIPPacket+0x6e>
 800a052:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a056:	4293      	cmp	r3, r2
 800a058:	d144      	bne.n	800a0e4 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05e:	2b35      	cmp	r3, #53	@ 0x35
 800a060:	d802      	bhi.n	800a068 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 800a062:	2300      	movs	r3, #0
 800a064:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 800a066:	e043      	b.n	800a0f0 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06c:	330e      	adds	r3, #14
 800a06e:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 800a070:	2328      	movs	r3, #40	@ 0x28
 800a072:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	799b      	ldrb	r3, [r3, #6]
 800a078:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	330e      	adds	r3, #14
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	4618      	mov	r0, r3
 800a084:	f001 fb6c 	bl	800b760 <prvAllowIPPacketIPv6>
 800a088:	4603      	mov	r3, r0
 800a08a:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a090:	3b06      	subs	r3, #6
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	7812      	ldrb	r2, [r2, #0]
 800a096:	701a      	strb	r2, [r3, #0]
                break;
 800a098:	e02a      	b.n	800a0f0 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a0a8:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ae:	3b0e      	subs	r3, #14
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d802      	bhi.n	800a0bc <prvProcessIPPacket+0x90>
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2b13      	cmp	r3, #19
 800a0ba:	d802      	bhi.n	800a0c2 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 800a0c0:	e016      	b.n	800a0f0 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	7ddb      	ldrb	r3, [r3, #23]
 800a0c6:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800a0c8:	69ba      	ldr	r2, [r7, #24]
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 f81b 	bl	800b108 <prvAllowIPPacketIPv4>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0da:	3b06      	subs	r3, #6
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	7812      	ldrb	r2, [r2, #0]
 800a0e0:	701a      	strb	r2, [r3, #0]
                   break;
 800a0e2:	e005      	b.n	800a0f0 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 800a0e8:	484a      	ldr	r0, [pc, #296]	@ (800a214 <prvProcessIPPacket+0x1e8>)
 800a0ea:	f018 fb6b 	bl	80227c4 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 800a0ee:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 800a0f0:	7ffb      	ldrb	r3, [r7, #31]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	f040 8088 	bne.w	800a208 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	899b      	ldrh	r3, [r3, #12]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	2b08      	cmp	r3, #8
 800a100:	d004      	beq.n	800a10c <prvProcessIPPacket+0xe0>
 800a102:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a106:	4293      	cmp	r3, r2
 800a108:	d009      	beq.n	800a11e <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800a10a:	e020      	b.n	800a14e <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	2b14      	cmp	r3, #20
 800a110:	d91a      	bls.n	800a148 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 800a112:	6838      	ldr	r0, [r7, #0]
 800a114:	f001 f852 	bl	800b1bc <prvCheckIP4HeaderOptions>
 800a118:	4603      	mov	r3, r0
 800a11a:	77fb      	strb	r3, [r7, #31]
                    break;
 800a11c:	e014      	b.n	800a148 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 800a11e:	7dfb      	ldrb	r3, [r7, #23]
 800a120:	2100      	movs	r1, #0
 800a122:	4618      	mov	r0, r3
 800a124:	f001 fb3a 	bl	800b79c <xGetExtensionOrder>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	dd0e      	ble.n	800a14c <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 800a12e:	2101      	movs	r1, #1
 800a130:	6838      	ldr	r0, [r7, #0]
 800a132:	f001 fb99 	bl	800b868 <eHandleIPv6ExtensionHeaders>
 800a136:	4603      	mov	r3, r0
 800a138:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 800a13a:	7ffb      	ldrb	r3, [r7, #31]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d005      	beq.n	800a14c <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	799b      	ldrb	r3, [r3, #6]
 800a144:	75fb      	strb	r3, [r7, #23]
                    break;
 800a146:	e001      	b.n	800a14c <prvProcessIPPacket+0x120>
                    break;
 800a148:	bf00      	nop
 800a14a:	e000      	b.n	800a14e <prvProcessIPPacket+0x122>
                    break;
 800a14c:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 800a14e:	7ffb      	ldrb	r3, [r7, #31]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d059      	beq.n	800a208 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	2b11      	cmp	r3, #17
 800a158:	d026      	beq.n	800a1a8 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 800a15a:	6838      	ldr	r0, [r7, #0]
 800a15c:	f7fd f918 	bl	8007390 <xCheckRequiresARPResolution>
 800a160:	4603      	mov	r3, r0
 800a162:	2b01      	cmp	r3, #1
 800a164:	d102      	bne.n	800a16c <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 800a166:	2304      	movs	r3, #4
 800a168:	77fb      	strb	r3, [r7, #31]
 800a16a:	e01d      	b.n	800a1a8 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	899b      	ldrh	r3, [r3, #12]
 800a170:	b29b      	uxth	r3, r3
 800a172:	2b08      	cmp	r3, #8
 800a174:	d00e      	beq.n	800a194 <prvProcessIPPacket+0x168>
 800a176:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d113      	bne.n	800a1a6 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	1d98      	adds	r0, r3, #6
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f103 0108 	add.w	r1, r3, #8
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a18c:	461a      	mov	r2, r3
 800a18e:	f002 f843 	bl	800c218 <vNDRefreshCacheEntry>
                                break;
 800a192:	e009      	b.n	800a1a8 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	1d9a      	adds	r2, r3, #6
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	4619      	mov	r1, r3
 800a19e:	4610      	mov	r0, r2
 800a1a0:	f7fd f9d6 	bl	8007550 <vARPRefreshCacheEntryAge>
                                break;
 800a1a4:	e000      	b.n	800a1a8 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 800a1a6:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 800a1a8:	7ffb      	ldrb	r3, [r7, #31]
 800a1aa:	2b04      	cmp	r3, #4
 800a1ac:	d02c      	beq.n	800a208 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	2b3a      	cmp	r3, #58	@ 0x3a
 800a1b2:	d010      	beq.n	800a1d6 <prvProcessIPPacket+0x1aa>
 800a1b4:	2b3a      	cmp	r3, #58	@ 0x3a
 800a1b6:	dc23      	bgt.n	800a200 <prvProcessIPPacket+0x1d4>
 800a1b8:	2b11      	cmp	r3, #17
 800a1ba:	d012      	beq.n	800a1e2 <prvProcessIPPacket+0x1b6>
 800a1bc:	2b11      	cmp	r3, #17
 800a1be:	dc1f      	bgt.n	800a200 <prvProcessIPPacket+0x1d4>
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d002      	beq.n	800a1ca <prvProcessIPPacket+0x19e>
 800a1c4:	2b06      	cmp	r3, #6
 800a1c6:	d012      	beq.n	800a1ee <prvProcessIPPacket+0x1c2>
 800a1c8:	e01a      	b.n	800a200 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 800a1ca:	6838      	ldr	r0, [r7, #0]
 800a1cc:	f7ff f9fe 	bl	80095cc <ProcessICMPPacket>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 800a1d4:	e018      	b.n	800a208 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 800a1d6:	6838      	ldr	r0, [r7, #0]
 800a1d8:	f002 fb6e 	bl	800c8b8 <prvProcessICMPMessage_IPv6>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	77fb      	strb	r3, [r7, #31]
                            break;
 800a1e0:	e012      	b.n	800a208 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 800a1e2:	6838      	ldr	r0, [r7, #0]
 800a1e4:	f7ff fe90 	bl	8009f08 <prvProcessUDPPacket>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	77fb      	strb	r3, [r7, #31]
                        break;
 800a1ec:	e00c      	b.n	800a208 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800a1ee:	6838      	ldr	r0, [r7, #0]
 800a1f0:	f007 febe 	bl	8011f70 <xProcessReceivedTCPPacket>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d105      	bne.n	800a206 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 800a1fe:	e002      	b.n	800a206 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 800a200:	2300      	movs	r3, #0
 800a202:	77fb      	strb	r3, [r7, #31]
                        break;
 800a204:	e000      	b.n	800a208 <prvProcessIPPacket+0x1dc>
                                break;
 800a206:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 800a208:	7ffb      	ldrb	r3, [r7, #31]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3720      	adds	r7, #32
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	0802533c 	.word	0x0802533c

0800a218 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08e      	sub	sp, #56	@ 0x38
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a226:	2b3b      	cmp	r3, #59	@ 0x3b
 800a228:	d818      	bhi.n	800a25c <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22e:	4619      	mov	r1, r3
 800a230:	486a      	ldr	r0, [pc, #424]	@ (800a3dc <vReturnEthernetFrame+0x1c4>)
 800a232:	f018 fac7 	bl	80227c4 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a23a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a23c:	e008      	b.n	800a250 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a244:	4413      	add	r3, r2
 800a246:	2200      	movs	r2, #0
 800a248:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24c:	3301      	adds	r3, #1
 800a24e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a252:	2b3b      	cmp	r3, #59	@ 0x3b
 800a254:	ddf3      	ble.n	800a23e <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	223c      	movs	r2, #60	@ 0x3c
 800a25a:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d111      	bne.n	800a286 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fb87 	bl	800a97c <pxDuplicateNetworkBufferWithDescriptor>
 800a26e:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 800a270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a272:	2b00      	cmp	r3, #0
 800a274:	d005      	beq.n	800a282 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 800a276:	2301      	movs	r3, #1
 800a278:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a280:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 800a282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a284:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 80a3 	beq.w	800a3d4 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a292:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 800a294:	2300      	movs	r3, #0
 800a296:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d12f      	bne.n	800a304 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 800a2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a6:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a2aa:	061a      	lsls	r2, r3, #24
 800a2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ae:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a2b2:	021b      	lsls	r3, r3, #8
 800a2b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a2b8:	431a      	orrs	r2, r3
 800a2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2bc:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a2c0:	0a1b      	lsrs	r3, r3, #8
 800a2c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ca:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a2ce:	0e1b      	lsrs	r3, r3, #24
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4842      	ldr	r0, [pc, #264]	@ (800a3e0 <vReturnEthernetFrame+0x1c8>)
 800a2d6:	f018 fa75 	bl	80227c4 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2de:	899b      	ldrh	r3, [r3, #12]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	d003      	beq.n	800a2ee <vReturnEthernetFrame+0xd6>
 800a2e6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a2ea:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800a2ec:	e00a      	b.n	800a304 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 800a2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f0:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a2f4:	2107      	movs	r1, #7
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f003 fcfe 	bl	800dcf8 <FreeRTOS_FindEndPointOnNetMask>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 800a302:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d063      	beq.n	800a3d4 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a310:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800a314:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 800a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a318:	899b      	ldrh	r3, [r3, #12]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	2b08      	cmp	r3, #8
 800a31e:	d11c      	bne.n	800a35a <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 800a320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a322:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a326:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a32e:	f107 0114 	add.w	r1, r7, #20
 800a332:	f107 0310 	add.w	r3, r7, #16
 800a336:	4618      	mov	r0, r3
 800a338:	f7fd fa54 	bl	80077e4 <eARPGetCacheEntry>
 800a33c:	4603      	mov	r3, r0
 800a33e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 800a342:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a346:	2b01      	cmp	r3, #1
 800a348:	d103      	bne.n	800a352 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 800a34a:	f107 0314 	add.w	r3, r7, #20
 800a34e:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 800a350:	e007      	b.n	800a362 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a354:	3306      	adds	r3, #6
 800a356:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 800a358:	e003      	b.n	800a362 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35c:	3306      	adds	r3, #6
 800a35e:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 800a360:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 800a362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a364:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 800a366:	2206      	movs	r2, #6
 800a368:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a36a:	69f8      	ldr	r0, [r7, #28]
 800a36c:	f018 fc46 	bl	8022bfc <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a374:	33e8      	adds	r3, #232	@ 0xe8
 800a376:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37a:	3306      	adds	r3, #6
 800a37c:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a37e:	2206      	movs	r2, #6
 800a380:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a382:	69f8      	ldr	r0, [r7, #28]
 800a384:	f018 fc3a 	bl	8022bfc <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 800a388:	f000 fbd4 	bl	800ab34 <xIsCallingFromIPTask>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d106      	bne.n	800a3a0 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a39c:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 800a39e:	e019      	b.n	800a3d4 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d011      	beq.n	800a3ca <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800a3ae:	f107 0308 	add.w	r3, r7, #8
 800a3b2:	f04f 31ff 	mov.w	r1, #4294967295
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff fc7a 	bl	8009cb0 <xSendEventStructToIPTask>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d108      	bne.n	800a3d4 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f00d fb56 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
}
 800a3c8:	e004      	b.n	800a3d4 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 800a3ca:	f640 019f 	movw	r1, #2207	@ 0x89f
 800a3ce:	4805      	ldr	r0, [pc, #20]	@ (800a3e4 <vReturnEthernetFrame+0x1cc>)
 800a3d0:	f7f7 fb1a 	bl	8001a08 <vAssertCalled>
}
 800a3d4:	bf00      	nop
 800a3d6:	3738      	adds	r7, #56	@ 0x38
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	08025368 	.word	0x08025368
 800a3e0:	0802538c 	.word	0x0802538c
 800a3e4:	08025254 	.word	0x08025254

0800a3e8 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 800a3ec:	4b03      	ldr	r3, [pc, #12]	@ (800a3fc <xIPIsNetworkTaskReady+0x14>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	200011b0 	.word	0x200011b0

0800a400 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 800a400:	b480      	push	{r7}
 800a402:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 800a404:	4b03      	ldr	r3, [pc, #12]	@ (800a414 <uxGetMinimumIPQueueSpace+0x14>)
 800a406:	681b      	ldr	r3, [r3, #0]
    }
 800a408:	4618      	mov	r0, r3
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	20000014 	.word	0x20000014

0800a418 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a424:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	899b      	ldrh	r3, [r3, #12]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a430:	4293      	cmp	r3, r2
 800a432:	d102      	bne.n	800a43a <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800a434:	2328      	movs	r3, #40	@ 0x28
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	e001      	b.n	800a43e <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800a43a:	2314      	movs	r3, #20
 800a43c:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800a43e:	68fb      	ldr	r3, [r7, #12]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d009      	beq.n	800a46e <uxIPHeaderSizeSocket+0x22>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	7a1b      	ldrb	r3, [r3, #8]
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800a468:	2328      	movs	r3, #40	@ 0x28
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	e001      	b.n	800a472 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800a46e:	2314      	movs	r3, #20
 800a470:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800a472:	68fb      	ldr	r3, [r7, #12]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800a486:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a48a:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800a48c:	4b28      	ldr	r3, [pc, #160]	@ (800a530 <xCalculateSleepTime+0xb0>)
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	f003 0301 	and.w	r3, r3, #1
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d007      	beq.n	800a4aa <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a49a:	4b25      	ldr	r3, [pc, #148]	@ (800a530 <xCalculateSleepTime+0xb0>)
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d902      	bls.n	800a4aa <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 800a4a4:	4b22      	ldr	r3, [pc, #136]	@ (800a530 <xCalculateSleepTime+0xb0>)
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a4aa:	4b22      	ldr	r3, [pc, #136]	@ (800a534 <xCalculateSleepTime+0xb4>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 800a4b0:	e015      	b.n	800a4de <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 800a4b8:	f003 0301 	and.w	r3, r3, #1
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d009      	beq.n	800a4d6 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d903      	bls.n	800a4d6 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a4d4:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a4dc:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1e6      	bne.n	800a4b2 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 800a4e4:	4b14      	ldr	r3, [pc, #80]	@ (800a538 <xCalculateSleepTime+0xb8>)
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d007      	beq.n	800a502 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a4f2:	4b11      	ldr	r3, [pc, #68]	@ (800a538 <xCalculateSleepTime+0xb8>)
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d902      	bls.n	800a502 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800a4fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a538 <xCalculateSleepTime+0xb8>)
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 800a502:	4b0e      	ldr	r3, [pc, #56]	@ (800a53c <xCalculateSleepTime+0xbc>)
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d007      	beq.n	800a520 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 800a510:	4b0a      	ldr	r3, [pc, #40]	@ (800a53c <xCalculateSleepTime+0xbc>)
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	429a      	cmp	r2, r3
 800a518:	d902      	bls.n	800a520 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800a51a:	4b08      	ldr	r3, [pc, #32]	@ (800a53c <xCalculateSleepTime+0xbc>)
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 800a520:	687b      	ldr	r3, [r7, #4]
}
 800a522:	4618      	mov	r0, r3
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	200011cc 	.word	0x200011cc
 800a534:	20001528 	.word	0x20001528
 800a538:	200011e0 	.word	0x200011e0
 800a53c:	200011f4 	.word	0x200011f4

0800a540 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800a546:	484f      	ldr	r0, [pc, #316]	@ (800a684 <vCheckNetworkTimers+0x144>)
 800a548:	f000 f932 	bl	800a7b0 <prvIPTimerCheck>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d002      	beq.n	800a558 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 800a552:	2003      	movs	r0, #3
 800a554:	f7ff fb96 	bl	8009c84 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 800a558:	484b      	ldr	r0, [pc, #300]	@ (800a688 <vCheckNetworkTimers+0x148>)
 800a55a:	f000 f929 	bl	800a7b0 <prvIPTimerCheck>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00e      	beq.n	800a582 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 800a564:	4b49      	ldr	r3, [pc, #292]	@ (800a68c <vCheckNetworkTimers+0x14c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00a      	beq.n	800a582 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800a56c:	2000      	movs	r0, #0
 800a56e:	f000 f995 	bl	800a89c <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800a572:	4b46      	ldr	r3, [pc, #280]	@ (800a68c <vCheckNetworkTimers+0x14c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4618      	mov	r0, r3
 800a578:	f00d fa7c 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 800a57c:	4b43      	ldr	r3, [pc, #268]	@ (800a68c <vCheckNetworkTimers+0x14c>)
 800a57e:	2200      	movs	r2, #0
 800a580:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a582:	4b43      	ldr	r3, [pc, #268]	@ (800a690 <vCheckNetworkTimers+0x150>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 800a588:	e01f      	b.n	800a5ca <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	33f8      	adds	r3, #248	@ 0xf8
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 f90e 	bl	800a7b0 <prvIPTimerCheck>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d013      	beq.n	800a5c2 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00b      	beq.n	800a5c2 <vCheckNetworkTimers+0x82>
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a5b0:	f003 0302 	and.w	r3, r3, #2
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 800a5ba:	6939      	ldr	r1, [r7, #16]
 800a5bc:	2000      	movs	r0, #0
 800a5be:	f003 f8f7 	bl	800d7b0 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a5c8:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1dc      	bne.n	800a58a <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800a5d0:	4830      	ldr	r0, [pc, #192]	@ (800a694 <vCheckNetworkTimers+0x154>)
 800a5d2:	f000 f8ed 	bl	800a7b0 <prvIPTimerCheck>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 800a5dc:	2000      	movs	r0, #0
 800a5de:	f7fd fff9 	bl	80085d4 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800a5e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a698 <vCheckNetworkTimers+0x158>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7f9 fda2 	bl	8004130 <uxQueueMessagesWaiting>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d102      	bne.n	800a5f8 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	e001      	b.n	800a5fc <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800a5fc:	4827      	ldr	r0, [pc, #156]	@ (800a69c <vCheckNetworkTimers+0x15c>)
 800a5fe:	f000 f8d7 	bl	800a7b0 <prvIPTimerCheck>
 800a602:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 800a60a:	2301      	movs	r3, #1
 800a60c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d007      	beq.n	800a624 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f006 f85d 	bl	80106d4 <xTCPTimerCheck>
 800a61a:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	481f      	ldr	r0, [pc, #124]	@ (800a69c <vCheckNetworkTimers+0x15c>)
 800a620:	f000 f844 	bl	800a6ac <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 800a624:	2000      	movs	r0, #0
 800a626:	f006 ff8d 	bl	8011544 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800a62a:	2000      	movs	r0, #0
 800a62c:	f006 ffa6 	bl	801157c <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 800a630:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a0 <vCheckNetworkTimers+0x160>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d120      	bne.n	800a67a <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 800a638:	481a      	ldr	r0, [pc, #104]	@ (800a6a4 <vCheckNetworkTimers+0x164>)
 800a63a:	f000 f8b9 	bl	800a7b0 <prvIPTimerCheck>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d01a      	beq.n	800a67a <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 800a644:	2301      	movs	r3, #1
 800a646:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a648:	4b17      	ldr	r3, [pc, #92]	@ (800a6a8 <vCheckNetworkTimers+0x168>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	617b      	str	r3, [r7, #20]
 800a64e:	e00e      	b.n	800a66e <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	7f1b      	ldrb	r3, [r3, #28]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d104      	bne.n	800a668 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 800a65e:	2300      	movs	r3, #0
 800a660:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 800a662:	6978      	ldr	r0, [r7, #20]
 800a664:	f7ff fa30 	bl	8009ac8 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a66c:	617b      	str	r3, [r7, #20]
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1ed      	bne.n	800a650 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f971 	bl	800a95c <vSetAllNetworksUp>
        }
    }
}
 800a67a:	bf00      	nop
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200011cc 	.word	0x200011cc
 800a688:	200011b8 	.word	0x200011b8
 800a68c:	2000119c 	.word	0x2000119c
 800a690:	20001528 	.word	0x20001528
 800a694:	200011f4 	.word	0x200011f4
 800a698:	200011a0 	.word	0x200011a0
 800a69c:	200011e0 	.word	0x200011e0
 800a6a0:	200011b4 	.word	0x200011b4
 800a6a4:	20001208 	.word	0x20001208
 800a6a8:	2000152c 	.word	0x2000152c

0800a6ac <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fa febc 	bl	8005438 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d105      	bne.n	800a6d8 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	7813      	ldrb	r3, [r2, #0]
 800a6d0:	f043 0302 	orr.w	r3, r3, #2
 800a6d4:	7013      	strb	r3, [r2, #0]
 800a6d6:	e004      	b.n	800a6e2 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	7813      	ldrb	r3, [r2, #0]
 800a6dc:	f36f 0341 	bfc	r3, #1, #1
 800a6e0:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	7813      	ldrb	r3, [r2, #0]
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	7013      	strb	r3, [r2, #0]
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	4803      	ldr	r0, [pc, #12]	@ (800a70c <vIPTimerStartARPResolution+0x18>)
 800a700:	f7ff ffd4 	bl	800a6ac <prvIPTimerStart>
}
 800a704:	bf00      	nop
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	200011b8 	.word	0x200011b8

0800a710 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff ffc2 	bl	800a6ac <prvIPTimerStart>
}
 800a728:	bf00      	nop
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 800a738:	6879      	ldr	r1, [r7, #4]
 800a73a:	4803      	ldr	r0, [pc, #12]	@ (800a748 <vTCPTimerReload+0x18>)
 800a73c:	f7ff ffe8 	bl	800a710 <prvIPTimerReload>
    }
 800a740:	bf00      	nop
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	200011e0 	.word	0x200011e0

0800a74c <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	4803      	ldr	r0, [pc, #12]	@ (800a764 <vARPTimerReload+0x18>)
 800a758:	f7ff ffda 	bl	800a710 <prvIPTimerReload>
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	200011cc 	.word	0x200011cc

0800a768 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	4806      	ldr	r0, [pc, #24]	@ (800a790 <vDHCP_RATimerReload+0x28>)
 800a776:	f018 f825 	bl	80227c4 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	33f8      	adds	r3, #248	@ 0xf8
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	4618      	mov	r0, r3
 800a782:	f7ff ffc5 	bl	800a710 <prvIPTimerReload>
    }
 800a786:	bf00      	nop
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	080253c0 	.word	0x080253c0

0800a794 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800a79c:	6879      	ldr	r1, [r7, #4]
 800a79e:	4803      	ldr	r0, [pc, #12]	@ (800a7ac <vNetworkTimerReload+0x18>)
 800a7a0:	f7ff ffb6 	bl	800a710 <prvIPTimerReload>
}
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20001208 	.word	0x20001208

0800a7b0 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d102      	bne.n	800a7cc <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	60fb      	str	r3, [r7, #12]
 800a7ca:	e028      	b.n	800a81e <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10f      	bne.n	800a7fa <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	1d1a      	adds	r2, r3, #4
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	330c      	adds	r3, #12
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	f7fa fe5f 	bl	80054a8 <xTaskCheckForTimeOut>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d004      	beq.n	800a7fa <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	7813      	ldrb	r3, [r2, #0]
 800a7f4:	f043 0302 	orr.w	r3, r3, #2
 800a7f8:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	d008      	beq.n	800a81a <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7ff ff4c 	bl	800a6ac <prvIPTimerStart>
            xReturn = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	60fb      	str	r3, [r7, #12]
 800a818:	e001      	b.n	800a81e <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800a81a:	2300      	movs	r3, #0
 800a81c:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800a81e:	68fb      	ldr	r3, [r7, #12]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 800a830:	4a0c      	ldr	r2, [pc, #48]	@ (800a864 <vIPSetTCPTimerExpiredState+0x3c>)
 800a832:	7813      	ldrb	r3, [r2, #0]
 800a834:	f043 0301 	orr.w	r3, r3, #1
 800a838:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d005      	beq.n	800a84c <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a840:	4a08      	ldr	r2, [pc, #32]	@ (800a864 <vIPSetTCPTimerExpiredState+0x3c>)
 800a842:	7813      	ldrb	r3, [r2, #0]
 800a844:	f043 0302 	orr.w	r3, r3, #2
 800a848:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 800a84a:	e004      	b.n	800a856 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 800a84c:	4a05      	ldr	r2, [pc, #20]	@ (800a864 <vIPSetTCPTimerExpiredState+0x3c>)
 800a84e:	7813      	ldrb	r3, [r2, #0]
 800a850:	f36f 0341 	bfc	r3, #1, #1
 800a854:	7013      	strb	r3, [r2, #0]
    }
 800a856:	bf00      	nop
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	200011e0 	.word	0x200011e0

0800a868 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 800a876:	4a08      	ldr	r2, [pc, #32]	@ (800a898 <vIPSetARPTimerEnableState+0x30>)
 800a878:	7813      	ldrb	r3, [r2, #0]
 800a87a:	f043 0301 	orr.w	r3, r3, #1
 800a87e:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a880:	e004      	b.n	800a88c <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 800a882:	4a05      	ldr	r2, [pc, #20]	@ (800a898 <vIPSetARPTimerEnableState+0x30>)
 800a884:	7813      	ldrb	r3, [r2, #0]
 800a886:	f36f 0300 	bfc	r3, #0, #1
 800a88a:	7013      	strb	r3, [r2, #0]
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	200011cc 	.word	0x200011cc

0800a89c <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d005      	beq.n	800a8b6 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800a8aa:	4a08      	ldr	r2, [pc, #32]	@ (800a8cc <vIPSetARPResolutionTimerEnableState+0x30>)
 800a8ac:	7813      	ldrb	r3, [r2, #0]
 800a8ae:	f043 0301 	orr.w	r3, r3, #1
 800a8b2:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a8b4:	e004      	b.n	800a8c0 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 800a8b6:	4a05      	ldr	r2, [pc, #20]	@ (800a8cc <vIPSetARPResolutionTimerEnableState+0x30>)
 800a8b8:	7813      	ldrb	r3, [r2, #0]
 800a8ba:	f36f 0300 	bfc	r3, #0, #1
 800a8be:	7013      	strb	r3, [r2, #0]
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	200011b8 	.word	0x200011b8

0800a8d0 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <vIPSetDHCP_RATimerEnableState+0x14>
 800a8e0:	4b0e      	ldr	r3, [pc, #56]	@ (800a91c <vIPSetDHCP_RATimerEnableState+0x4c>)
 800a8e2:	e000      	b.n	800a8e6 <vIPSetDHCP_RATimerEnableState+0x16>
 800a8e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a920 <vIPSetDHCP_RATimerEnableState+0x50>)
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	480e      	ldr	r0, [pc, #56]	@ (800a924 <vIPSetDHCP_RATimerEnableState+0x54>)
 800a8ea:	f017 ff6b 	bl	80227c4 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d007      	beq.n	800a904 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a8fa:	f043 0301 	orr.w	r3, r3, #1
 800a8fe:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a902:	e006      	b.n	800a912 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a90a:	f36f 0300 	bfc	r3, #0, #1
 800a90e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 800a912:	bf00      	nop
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	080253dc 	.word	0x080253dc
 800a920:	080253e0 	.word	0x080253e0
 800a924:	080253e4 	.word	0x080253e4

0800a928 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d005      	beq.n	800a942 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 800a936:	4a08      	ldr	r2, [pc, #32]	@ (800a958 <vIPSetDNSTimerEnableState+0x30>)
 800a938:	7813      	ldrb	r3, [r2, #0]
 800a93a:	f043 0301 	orr.w	r3, r3, #1
 800a93e:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a940:	e004      	b.n	800a94c <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 800a942:	4a05      	ldr	r2, [pc, #20]	@ (800a958 <vIPSetDNSTimerEnableState+0x30>)
 800a944:	7813      	ldrb	r3, [r2, #0]
 800a946:	f36f 0300 	bfc	r3, #0, #1
 800a94a:	7013      	strb	r3, [r2, #0]
    }
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	200011f4 	.word	0x200011f4

0800a95c <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 800a964:	4a04      	ldr	r2, [pc, #16]	@ (800a978 <vSetAllNetworksUp+0x1c>)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6013      	str	r3, [r2, #0]
}
 800a96a:	bf00      	nop
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	200011b4 	.word	0x200011b4

0800a97c <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800a98a:	2100      	movs	r1, #0
 800a98c:	6838      	ldr	r0, [r7, #0]
 800a98e:	f00d f809 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 800a992:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d03e      	beq.n	800aa18 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d104      	bne.n	800a9ac <pxDuplicateNetworkBufferWithDescriptor+0x30>
 800a9a2:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800a9a6:	481f      	ldr	r0, [pc, #124]	@ (800aa24 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 800a9a8:	f7f7 f82e 	bl	8001a08 <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d902      	bls.n	800a9bc <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ba:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	695a      	ldr	r2, [r3, #20]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	f018 f901 	bl	8022bfc <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 800a9fa:	68b8      	ldr	r0, [r7, #8]
 800a9fc:	f7ff fd0c 	bl	800a418 <uxIPHeaderSizePacket>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b28      	cmp	r3, #40	@ 0x28
 800aa04:	d108      	bne.n	800aa18 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f103 0014 	add.w	r0, r3, #20
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3314      	adds	r3, #20
 800aa10:	2210      	movs	r2, #16
 800aa12:	4619      	mov	r1, r3
 800aa14:	f018 f8f2 	bl	8022bfc <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 800aa18:	68bb      	ldr	r3, [r7, #8]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	08025408 	.word	0x08025408

0800aa28 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d102      	bne.n	800aa3e <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	e013      	b.n	800aa66 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f816 	bl	800aa70 <void_ptr_to_uintptr>
 800aa44:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	3b0a      	subs	r3, #10
 800aa4e:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	f003 0303 	and.w	r3, r3, #3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d103      	bne.n	800aa62 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	e001      	b.n	800aa66 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800aa66:	68fb      	ldr	r3, [r7, #12]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3714      	adds	r7, #20
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 800aa92:	2100      	movs	r1, #0
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7ff ffc7 	bl	800aa28 <prvPacketBuffer_to_NetworkBuffer>
 800aa9a:	4603      	mov	r3, r0
    }
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d102      	bne.n	800aab8 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 800aab2:	2300      	movs	r3, #0
 800aab4:	61fb      	str	r3, [r7, #28]
 800aab6:	e033      	b.n	800ab20 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff ffd9 	bl	800aa70 <void_ptr_to_uintptr>
 800aabe:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	3b30      	subs	r3, #48	@ 0x30
 800aac4:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	f023 030f 	bic.w	r3, r3, #15
 800aad2:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	2b40      	cmp	r3, #64	@ 0x40
 800aad8:	d002      	beq.n	800aae0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 800aada:	7bfb      	ldrb	r3, [r7, #15]
 800aadc:	2b60      	cmp	r3, #96	@ 0x60
 800aade:	d101      	bne.n	800aae4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 800aae0:	2301      	movs	r3, #1
 800aae2:	e000      	b.n	800aae6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 800aae4:	2300      	movs	r3, #0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d104      	bne.n	800aaf4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 800aaea:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800aaee:	480f      	ldr	r0, [pc, #60]	@ (800ab2c <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 800aaf0:	f7f6 ff8a 	bl	8001a08 <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
 800aaf6:	2b40      	cmp	r3, #64	@ 0x40
 800aaf8:	d004      	beq.n	800ab04 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 800aafa:	2b60      	cmp	r3, #96	@ 0x60
 800aafc:	d105      	bne.n	800ab0a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 800aafe:	233e      	movs	r3, #62	@ 0x3e
 800ab00:	61bb      	str	r3, [r7, #24]
                    break;
 800ab02:	e008      	b.n	800ab16 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 800ab04:	232a      	movs	r3, #42	@ 0x2a
 800ab06:	61bb      	str	r3, [r7, #24]
                    break;
 800ab08:	e005      	b.n	800ab16 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 800ab0a:	4809      	ldr	r0, [pc, #36]	@ (800ab30 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 800ab0c:	f017 fe5a 	bl	80227c4 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 800ab10:	232a      	movs	r3, #42	@ 0x2a
 800ab12:	61bb      	str	r3, [r7, #24]
                break;
 800ab14:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 800ab16:	69b9      	ldr	r1, [r7, #24]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7ff ff85 	bl	800aa28 <prvPacketBuffer_to_NetworkBuffer>
 800ab1e:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 800ab20:	69fb      	ldr	r3, [r7, #28]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3720      	adds	r7, #32
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	08025408 	.word	0x08025408
 800ab30:	080254e0 	.word	0x080254e0

0800ab34 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800ab3a:	f7fa fdcf 	bl	80056dc <xTaskGetCurrentTaskHandle>
 800ab3e:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 800ab40:	f7fe ff6e 	bl	8009a20 <FreeRTOS_GetIPTaskHandle>
 800ab44:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d102      	bne.n	800ab54 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	60fb      	str	r3, [r7, #12]
 800ab52:	e001      	b.n	800ab58 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 800ab54:	2300      	movs	r3, #0
 800ab56:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800ab58:	68fb      	ldr	r3, [r7, #12]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d104      	bne.n	800ab7c <prvProcessNetworkDownEvent+0x18>
 800ab72:	f240 3137 	movw	r1, #823	@ 0x337
 800ab76:	4857      	ldr	r0, [pc, #348]	@ (800acd4 <prvProcessNetworkDownEvent+0x170>)
 800ab78:	f7f6 ff46 	bl	8001a08 <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d104      	bne.n	800ab8e <prvProcessNetworkDownEvent+0x2a>
 800ab84:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800ab88:	4852      	ldr	r0, [pc, #328]	@ (800acd4 <prvProcessNetworkDownEvent+0x170>)
 800ab8a:	f7f6 ff3d 	bl	8001a08 <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 800ab8e:	2000      	movs	r0, #0
 800ab90:	f7ff fe6a 	bl	800a868 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f002 ffd7 	bl	800db48 <FreeRTOS_FirstEndPoint>
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	e041      	b.n	800ac22 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800aba4:	f36f 1304 	bfc	r3, #4, #1
 800aba8:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 800abbc:	2100      	movs	r1, #0
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f001 f9c8 	bl	800bf54 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800abca:	f003 0308 	and.w	r3, r3, #8
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d003      	beq.n	800abdc <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 800abd4:	2001      	movs	r0, #1
 800abd6:	f7f6 ff4b 	bl	8001a70 <vApplicationIPNetworkEventHook>
 800abda:	e006      	b.n	800abea <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800abe2:	f043 0308 	orr.w	r3, r3, #8
 800abe6:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f7fd f8c0 	bl	8007d70 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800abf6:	f003 0304 	and.w	r3, r3, #4
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <prvProcessNetworkDownEvent+0xb4>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac06:	f003 0302 	and.w	r3, r3, #2
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800ac10:	2100      	movs	r1, #0
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f7ff fe5c 	bl	800a8d0 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800ac18:	68f9      	ldr	r1, [r7, #12]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f002 ffb6 	bl	800db8c <FreeRTOS_NextEndPoint>
 800ac20:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1ba      	bne.n	800ab9e <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	4798      	blx	r3
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d147      	bne.n	800acc6 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	7f13      	ldrb	r3, [r2, #28]
 800ac3a:	f043 0301 	orr.w	r3, r3, #1
 800ac3e:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f002 ff81 	bl	800db48 <FreeRTOS_FirstEndPoint>
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	e039      	b.n	800acbe <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac50:	f003 0304 	and.w	r3, r3, #4
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00c      	beq.n	800ac74 <prvProcessNetworkDownEvent+0x110>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac60:	f003 0302 	and.w	r3, r3, #2
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d004      	beq.n	800ac74 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 800ac6a:	68f9      	ldr	r1, [r7, #12]
 800ac6c:	2001      	movs	r0, #1
 800ac6e:	f002 fd9f 	bl	800d7b0 <vRAProcess>
 800ac72:	e01f      	b.n	800acb4 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac7a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <prvProcessNetworkDownEvent+0x126>
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d008      	beq.n	800ac9a <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800ac88:	e011      	b.n	800acae <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	331c      	adds	r3, #28
 800ac90:	221c      	movs	r2, #28
 800ac92:	4619      	mov	r1, r3
 800ac94:	f017 ffb2 	bl	8022bfc <memcpy>
                            break;
 800ac98:	e009      	b.n	800acae <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3390      	adds	r3, #144	@ 0x90
 800aca4:	2258      	movs	r2, #88	@ 0x58
 800aca6:	4619      	mov	r1, r3
 800aca8:	f017 ffa8 	bl	8022bfc <memcpy>
                            break;
 800acac:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f7fe fec2 	bl	8009a38 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800acb4:	68f9      	ldr	r1, [r7, #12]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f002 ff68 	bl	800db8c <FreeRTOS_NextEndPoint>
 800acbc:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1c2      	bne.n	800ac4a <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800acc4:	e002      	b.n	800accc <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 800acc6:	2000      	movs	r0, #0
 800acc8:	f7ff fe48 	bl	800a95c <vSetAllNetworksUp>
}
 800accc:	bf00      	nop
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	08025408 	.word	0x08025408

0800acd8 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800acde:	f7ff fb83 	bl	800a3e8 <xIPIsNetworkTaskReady>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d004      	beq.n	800acf2 <vPreCheckConfigs+0x1a>
 800ace8:	f240 31db 	movw	r1, #987	@ 0x3db
 800acec:	4831      	ldr	r0, [pc, #196]	@ (800adb4 <vPreCheckConfigs+0xdc>)
 800acee:	f7f6 fe8b 	bl	8001a08 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800acf2:	4b31      	ldr	r3, [pc, #196]	@ (800adb8 <vPreCheckConfigs+0xe0>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d004      	beq.n	800ad04 <vPreCheckConfigs+0x2c>
 800acfa:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800acfe:	482d      	ldr	r0, [pc, #180]	@ (800adb4 <vPreCheckConfigs+0xdc>)
 800ad00:	f7f6 fe82 	bl	8001a08 <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800ad04:	f7fe fe8c 	bl	8009a20 <FreeRTOS_GetIPTaskHandle>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d004      	beq.n	800ad18 <vPreCheckConfigs+0x40>
 800ad0e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800ad12:	4828      	ldr	r0, [pc, #160]	@ (800adb4 <vPreCheckConfigs+0xdc>)
 800ad14:	f7f6 fe78 	bl	8001a08 <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800ad18:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800ad1c:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f240 52db 	movw	r2, #1499	@ 0x5db
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d804      	bhi.n	800ad32 <vPreCheckConfigs+0x5a>
 800ad28:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800ad2c:	4821      	ldr	r0, [pc, #132]	@ (800adb4 <vPreCheckConfigs+0xdc>)
 800ad2e:	f7f6 fe6b 	bl	8001a08 <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 800ad32:	230e      	movs	r3, #14
 800ad34:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b0e      	cmp	r3, #14
 800ad3a:	d004      	beq.n	800ad46 <vPreCheckConfigs+0x6e>
 800ad3c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800ad40:	481c      	ldr	r0, [pc, #112]	@ (800adb4 <vPreCheckConfigs+0xdc>)
 800ad42:	f7f6 fe61 	bl	8001a08 <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 800ad46:	231c      	movs	r3, #28
 800ad48:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b1c      	cmp	r3, #28
 800ad4e:	d004      	beq.n	800ad5a <vPreCheckConfigs+0x82>
 800ad50:	f240 4102 	movw	r1, #1026	@ 0x402
 800ad54:	4817      	ldr	r0, [pc, #92]	@ (800adb4 <vPreCheckConfigs+0xdc>)
 800ad56:	f7f6 fe57 	bl	8001a08 <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800ad5a:	2314      	movs	r3, #20
 800ad5c:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b14      	cmp	r3, #20
 800ad62:	d004      	beq.n	800ad6e <vPreCheckConfigs+0x96>
 800ad64:	f240 4105 	movw	r1, #1029	@ 0x405
 800ad68:	4812      	ldr	r0, [pc, #72]	@ (800adb4 <vPreCheckConfigs+0xdc>)
 800ad6a:	f7f6 fe4d 	bl	8001a08 <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800ad6e:	2308      	movs	r3, #8
 800ad70:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b08      	cmp	r3, #8
 800ad76:	d004      	beq.n	800ad82 <vPreCheckConfigs+0xaa>
 800ad78:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800ad7c:	480d      	ldr	r0, [pc, #52]	@ (800adb4 <vPreCheckConfigs+0xdc>)
 800ad7e:	f7f6 fe43 	bl	8001a08 <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 800ad82:	2308      	movs	r3, #8
 800ad84:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	d004      	beq.n	800ad96 <vPreCheckConfigs+0xbe>
 800ad8c:	f240 410b 	movw	r1, #1035	@ 0x40b
 800ad90:	4808      	ldr	r0, [pc, #32]	@ (800adb4 <vPreCheckConfigs+0xdc>)
 800ad92:	f7f6 fe39 	bl	8001a08 <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800ad96:	2324      	movs	r3, #36	@ 0x24
 800ad98:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b24      	cmp	r3, #36	@ 0x24
 800ad9e:	d004      	beq.n	800adaa <vPreCheckConfigs+0xd2>
 800ada0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800ada4:	4803      	ldr	r0, [pc, #12]	@ (800adb4 <vPreCheckConfigs+0xdc>)
 800ada6:	f7f6 fe2f 	bl	8001a08 <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	08025408 	.word	0x08025408
 800adb8:	200011a0 	.word	0x200011a0

0800adbc <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800adc2:	f00c fe9d 	bl	8017b00 <uxGetMinimumFreeNetworkBuffers>
 800adc6:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800adc8:	4b24      	ldr	r3, [pc, #144]	@ (800ae5c <vPrintResourceStats+0xa0>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	429a      	cmp	r2, r3
 800add0:	d20a      	bcs.n	800ade8 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800add2:	4a22      	ldr	r2, [pc, #136]	@ (800ae5c <vPrintResourceStats+0xa0>)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800add8:	f00c fe9e 	bl	8017b18 <uxGetNumberOfFreeNetworkBuffers>
 800addc:	4603      	mov	r3, r0
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	4619      	mov	r1, r3
 800ade2:	481f      	ldr	r0, [pc, #124]	@ (800ae60 <vPrintResourceStats+0xa4>)
 800ade4:	f017 fcee 	bl	80227c4 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800ade8:	f7fb ff1e 	bl	8006c28 <xPortGetMinimumEverFreeHeapSize>
 800adec:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800adee:	4b1d      	ldr	r3, [pc, #116]	@ (800ae64 <vPrintResourceStats+0xa8>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d103      	bne.n	800adfe <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800adf6:	4a1b      	ldr	r2, [pc, #108]	@ (800ae64 <vPrintResourceStats+0xa8>)
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	e019      	b.n	800ae32 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae04:	d215      	bcs.n	800ae32 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800ae06:	4b17      	ldr	r3, [pc, #92]	@ (800ae64 <vPrintResourceStats+0xa8>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	225a      	movs	r2, #90	@ 0x5a
 800ae0c:	fb03 f202 	mul.w	r2, r3, r2
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2164      	movs	r1, #100	@ 0x64
 800ae14:	fb01 f303 	mul.w	r3, r1, r3
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d90a      	bls.n	800ae32 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800ae1c:	4a11      	ldr	r2, [pc, #68]	@ (800ae64 <vPrintResourceStats+0xa8>)
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 800ae22:	f7fb fef5 	bl	8006c10 <xPortGetFreeHeapSize>
 800ae26:	4603      	mov	r3, r0
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	480e      	ldr	r0, [pc, #56]	@ (800ae68 <vPrintResourceStats+0xac>)
 800ae2e:	f017 fcc9 	bl	80227c4 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 800ae32:	2300      	movs	r3, #0
 800ae34:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 800ae36:	f7ff fae3 	bl	800a400 <uxGetMinimumIPQueueSpace>
 800ae3a:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800ae3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ae6c <vPrintResourceStats+0xb0>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d006      	beq.n	800ae54 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 800ae46:	4a09      	ldr	r2, [pc, #36]	@ (800ae6c <vPrintResourceStats+0xb0>)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	4808      	ldr	r0, [pc, #32]	@ (800ae70 <vPrintResourceStats+0xb4>)
 800ae50:	f017 fcb8 	bl	80227c4 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800ae54:	bf00      	nop
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	20000018 	.word	0x20000018
 800ae60:	08025578 	.word	0x08025578
 800ae64:	2000121c 	.word	0x2000121c
 800ae68:	0802559c 	.word	0x0802559c
 800ae6c:	20001220 	.word	0x20001220
 800ae70:	080255b8 	.word	0x080255b8

0800ae74 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	4293      	cmp	r3, r2
 800ae84:	bf38      	it	cc
 800ae86:	4613      	movcc	r3, r2
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	4293      	cmp	r3, r2
 800aea4:	bfa8      	it	ge
 800aea6:	4613      	movge	r3, r2
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	4293      	cmp	r3, r2
 800aec4:	bf28      	it	cs
 800aec6:	4613      	movcs	r3, r2
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	4293      	cmp	r3, r2
 800aee4:	bf28      	it	cs
 800aee6:	4613      	movcs	r3, r2
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d104      	bne.n	800af12 <FreeRTOS_round_up+0x1e>
 800af08:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800af0c:	480a      	ldr	r0, [pc, #40]	@ (800af38 <FreeRTOS_round_up+0x44>)
 800af0e:	f7f6 fd7b 	bl	8001a08 <vAssertCalled>

    if( d != 0U )
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00a      	beq.n	800af2e <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	4413      	add	r3, r2
 800af1e:	1e5a      	subs	r2, r3, #1
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	fbb2 f2f3 	udiv	r2, r2, r3
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	fb02 f303 	mul.w	r3, r2, r3
 800af2c:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800af2e:	68fb      	ldr	r3, [r7, #12]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	08025408 	.word	0x08025408

0800af3c <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	3301      	adds	r3, #1
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800af52:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	3302      	adds	r3, #2
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800af5c:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	3203      	adds	r2, #3
 800af62:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800af64:	4313      	orrs	r3, r2
}
 800af66:	4618      	mov	r0, r3
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	021b      	lsls	r3, r3, #8
 800af80:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	3201      	adds	r2, #1
 800af86:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800af88:	4313      	orrs	r3, r2
 800af8a:	b29b      	uxth	r3, r3
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800af98:	b580      	push	{r7, lr}
 800af9a:	b08a      	sub	sp, #40	@ 0x28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800afaa:	2300      	movs	r3, #0
 800afac:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b21      	cmp	r3, #33	@ 0x21
 800afb2:	d802      	bhi.n	800afba <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800afb4:	2301      	movs	r3, #1
 800afb6:	61fb      	str	r3, [r7, #28]
                break;
 800afb8:	e06f      	b.n	800b09a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	7b9b      	ldrb	r3, [r3, #14]
 800afbe:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800afc0:	8afb      	ldrh	r3, [r7, #22]
 800afc2:	2b44      	cmp	r3, #68	@ 0x44
 800afc4:	d902      	bls.n	800afcc <xCheckIPv4SizeFields+0x34>
 800afc6:	8afb      	ldrh	r3, [r7, #22]
 800afc8:	2b4f      	cmp	r3, #79	@ 0x4f
 800afca:	d902      	bls.n	800afd2 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800afcc:	2302      	movs	r3, #2
 800afce:	61fb      	str	r3, [r7, #28]
                break;
 800afd0:	e063      	b.n	800b09a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800afd2:	8afb      	ldrh	r3, [r7, #22]
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800afdc:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800afde:	8afb      	ldrh	r3, [r7, #22]
 800afe0:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	330e      	adds	r3, #14
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d202      	bcs.n	800aff2 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800afec:	2303      	movs	r3, #3
 800afee:	61fb      	str	r3, [r7, #28]
                break;
 800aff0:	e053      	b.n	800b09a <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	7c1a      	ldrb	r2, [r3, #16]
 800aff6:	7c5b      	ldrb	r3, [r3, #17]
 800aff8:	021b      	lsls	r3, r3, #8
 800affa:	4313      	orrs	r3, r2
 800affc:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 800affe:	89fb      	ldrh	r3, [r7, #14]
 800b000:	021b      	lsls	r3, r3, #8
 800b002:	b21a      	sxth	r2, r3
 800b004:	89fb      	ldrh	r3, [r7, #14]
 800b006:	0a1b      	lsrs	r3, r3, #8
 800b008:	b29b      	uxth	r3, r3
 800b00a:	b21b      	sxth	r3, r3
 800b00c:	4313      	orrs	r3, r2
 800b00e:	b21b      	sxth	r3, r3
 800b010:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800b012:	89fb      	ldrh	r3, [r7, #14]
 800b014:	330e      	adds	r3, #14
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d202      	bcs.n	800b022 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800b01c:	2304      	movs	r3, #4
 800b01e:	61fb      	str	r3, [r7, #28]
                break;
 800b020:	e03b      	b.n	800b09a <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	7ddb      	ldrb	r3, [r3, #23]
 800b026:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800b028:	7b7b      	ldrb	r3, [r7, #13]
 800b02a:	2b11      	cmp	r3, #17
 800b02c:	d103      	bne.n	800b036 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	3316      	adds	r3, #22
 800b032:	627b      	str	r3, [r7, #36]	@ 0x24
 800b034:	e013      	b.n	800b05e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800b036:	7b7b      	ldrb	r3, [r7, #13]
 800b038:	2b06      	cmp	r3, #6
 800b03a:	d103      	bne.n	800b044 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	3322      	adds	r3, #34	@ 0x22
 800b040:	627b      	str	r3, [r7, #36]	@ 0x24
 800b042:	e00c      	b.n	800b05e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800b044:	7b7b      	ldrb	r3, [r7, #13]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d002      	beq.n	800b050 <xCheckIPv4SizeFields+0xb8>
 800b04a:	7b7b      	ldrb	r3, [r7, #13]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d103      	bne.n	800b058 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	3316      	adds	r3, #22
 800b054:	627b      	str	r3, [r7, #36]	@ 0x24
 800b056:	e002      	b.n	800b05e <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800b058:	2305      	movs	r3, #5
 800b05a:	61fb      	str	r3, [r7, #28]
                break;
 800b05c:	e01d      	b.n	800b09a <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b062:	429a      	cmp	r2, r3
 800b064:	d202      	bcs.n	800b06c <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800b066:	2306      	movs	r3, #6
 800b068:	61fb      	str	r3, [r7, #28]
                break;
 800b06a:	e016      	b.n	800b09a <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 800b06c:	89fb      	ldrh	r3, [r7, #14]
 800b06e:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	b29b      	uxth	r3, r3
 800b074:	461a      	mov	r2, r3
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	1a9b      	subs	r3, r3, r2
 800b07a:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2b07      	cmp	r3, #7
 800b080:	d906      	bls.n	800b090 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800b088:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d902      	bls.n	800b096 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800b090:	2307      	movs	r3, #7
 800b092:	61fb      	str	r3, [r7, #28]
                break;
 800b094:	e001      	b.n	800b09a <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800b096:	2301      	movs	r3, #1
 800b098:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800b09a:	6a3b      	ldr	r3, [r7, #32]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d003      	beq.n	800b0a8 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800b0a0:	69f9      	ldr	r1, [r7, #28]
 800b0a2:	4804      	ldr	r0, [pc, #16]	@ (800b0b4 <xCheckIPv4SizeFields+0x11c>)
 800b0a4:	f017 fb8e 	bl	80227c4 <lUDPLoggingPrintf>
        }

        return xResult;
 800b0a8:	6a3b      	ldr	r3, [r7, #32]
    }
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3728      	adds	r7, #40	@ 0x28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	08025684 	.word	0x08025684

0800b0b8 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	061a      	lsls	r2, r3, #24
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	021b      	lsls	r3, r3, #8
 800b0c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	0a1b      	lsrs	r3, r3, #8
 800b0d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	0e1b      	lsrs	r3, r3, #24
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800b0e6:	d306      	bcc.n	800b0f6 <xIsIPv4Multicast+0x3e>
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800b0ee:	d202      	bcs.n	800b0f6 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	e001      	b.n	800b0fa <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800b114:	2301      	movs	r3, #1
 800b116:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800b118:	7dfb      	ldrb	r3, [r7, #23]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d10c      	bne.n	800b138 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b126:	4619      	mov	r1, r3
 800b128:	4610      	mov	r0, r2
 800b12a:	f7ff ff35 	bl	800af98 <xCheckIPv4SizeFields>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b01      	cmp	r3, #1
 800b132:	d001      	beq.n	800b138 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800b134:	2300      	movs	r3, #0
 800b136:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800b138:	7dfb      	ldrb	r3, [r7, #23]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d134      	bne.n	800b1a8 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	7ddb      	ldrb	r3, [r3, #23]
 800b142:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b148:	3322      	adds	r3, #34	@ 0x22
 800b14a:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800b14c:	7dbb      	ldrb	r3, [r7, #22]
 800b14e:	2b11      	cmp	r3, #17
 800b150:	d12a      	bne.n	800b1a8 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	88db      	ldrh	r3, [r3, #6]
 800b156:	b29b      	uxth	r3, r3
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d125      	bne.n	800b1a8 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800b15c:	4b15      	ldr	r3, [pc, #84]	@ (800b1b4 <prvAllowIPPacketIPv4+0xac>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b04      	cmp	r3, #4
 800b162:	dc1f      	bgt.n	800b1a4 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b16a:	061a      	lsls	r2, r3, #24
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b172:	021b      	lsls	r3, r3, #8
 800b174:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b178:	431a      	orrs	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b180:	0a1b      	lsrs	r3, r3, #8
 800b182:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b186:	431a      	orrs	r2, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b18e:	0e1b      	lsrs	r3, r3, #24
 800b190:	4313      	orrs	r3, r2
 800b192:	4619      	mov	r1, r3
 800b194:	4808      	ldr	r0, [pc, #32]	@ (800b1b8 <prvAllowIPPacketIPv4+0xb0>)
 800b196:	f017 fb15 	bl	80227c4 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800b19a:	4b06      	ldr	r3, [pc, #24]	@ (800b1b4 <prvAllowIPPacketIPv4+0xac>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	4a04      	ldr	r2, [pc, #16]	@ (800b1b4 <prvAllowIPPacketIPv4+0xac>)
 800b1a2:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3718      	adds	r7, #24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20001224 	.word	0x20001224
 800b1b8:	080256a8 	.word	0x080256a8

0800b1bc <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b08a      	sub	sp, #40	@ 0x28
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ce:	330e      	adds	r3, #14
 800b1d0:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800b1e0:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	3b14      	subs	r3, #20
 800b1e6:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	330e      	adds	r3, #14
 800b1f0:	4413      	add	r3, r2
 800b1f2:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f8:	3322      	adds	r3, #34	@ 0x22
 800b1fa:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	3b22      	subs	r3, #34	@ 0x22
 800b206:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	6939      	ldr	r1, [r7, #16]
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f018 fc9a 	bl	8023b46 <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	1ad2      	subs	r2, r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800b21e:	6a3b      	ldr	r3, [r7, #32]
 800b220:	885b      	ldrh	r3, [r3, #2]
 800b222:	b29b      	uxth	r3, r3
 800b224:	021b      	lsls	r3, r3, #8
 800b226:	b21a      	sxth	r2, r3
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	885b      	ldrh	r3, [r3, #2]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	0a1b      	lsrs	r3, r3, #8
 800b230:	b29b      	uxth	r3, r3
 800b232:	b21b      	sxth	r3, r3
 800b234:	4313      	orrs	r3, r2
 800b236:	b21b      	sxth	r3, r3
 800b238:	b29a      	uxth	r2, r3
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	b29b      	uxth	r3, r3
 800b242:	021b      	lsls	r3, r3, #8
 800b244:	b29a      	uxth	r2, r3
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	885b      	ldrh	r3, [r3, #2]
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	021b      	lsls	r3, r3, #8
 800b24e:	b219      	sxth	r1, r3
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	885b      	ldrh	r3, [r3, #2]
 800b254:	b29b      	uxth	r3, r3
 800b256:	0a1b      	lsrs	r3, r3, #8
 800b258:	b29b      	uxth	r3, r3
 800b25a:	b21b      	sxth	r3, r3
 800b25c:	430b      	orrs	r3, r1
 800b25e:	b21b      	sxth	r3, r3
 800b260:	b29b      	uxth	r3, r3
 800b262:	4619      	mov	r1, r3
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	1acb      	subs	r3, r1, r3
 800b268:	0a1b      	lsrs	r3, r3, #8
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	4313      	orrs	r3, r2
 800b26e:	b29a      	uxth	r2, r3
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	f023 030f 	bic.w	r3, r3, #15
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	f043 0305 	orr.w	r3, r3, #5
 800b282:	b2da      	uxtb	r2, r3
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800b288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3728      	adds	r7, #40	@ 0x28
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b0f      	cmp	r3, #15
 800b2a4:	d802      	bhi.n	800b2ac <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	61fb      	str	r3, [r7, #28]
 800b2aa:	e00e      	b.n	800b2ca <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800b2ac:	f107 0314 	add.w	r3, r7, #20
 800b2b0:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f004 fac9 	bl	800f858 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800b2ca:	69fb      	ldr	r3, [r7, #28]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3720      	adds	r7, #32
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d010      	beq.n	800b306 <xSend_UDP_Update_IPv4+0x32>
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00d      	beq.n	800b306 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ee:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	689a      	ldr	r2, [r3, #8]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f042 0208 	orr.w	r2, r2, #8
 800b300:	731a      	strb	r2, [r3, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	061a      	lsls	r2, r3, #24
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	021b      	lsls	r3, r3, #8
 800b326:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b32a:	431a      	orrs	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	0a1b      	lsrs	r3, r3, #8
 800b330:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b334:	431a      	orrs	r2, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	0e1b      	lsrs	r3, r3, #24
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2201      	movs	r2, #1
 800b342:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	2200      	movs	r2, #0
 800b348:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	225e      	movs	r2, #94	@ 0x5e
 800b34e:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	0c1b      	lsrs	r3, r3, #16
 800b354:	b2db      	uxtb	r3, r3
 800b356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	0a1b      	lsrs	r3, r3, #8
 800b364:	b2da      	uxtb	r2, r3
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	715a      	strb	r2, [r3, #5]
}
 800b372:	bf00      	nop
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
	...

0800b380 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800b380:	b580      	push	{r7, lr}
 800b382:	b08c      	sub	sp, #48	@ 0x30
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800b38a:	2300      	movs	r3, #0
 800b38c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800b392:	2300      	movs	r3, #0
 800b394:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800b39e:	2300      	movs	r3, #0
 800b3a0:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2b27      	cmp	r3, #39	@ 0x27
 800b3a6:	d802      	bhi.n	800b3ae <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	61fb      	str	r3, [r7, #28]
                break;
 800b3ac:	e098      	b.n	800b4e0 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	7b9b      	ldrb	r3, [r3, #14]
 800b3b2:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800b3b4:	89fb      	ldrh	r3, [r7, #14]
 800b3b6:	111b      	asrs	r3, r3, #4
 800b3b8:	f003 030f 	and.w	r3, r3, #15
 800b3bc:	2b06      	cmp	r3, #6
 800b3be:	d002      	beq.n	800b3c6 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	61fb      	str	r3, [r7, #28]
                break;
 800b3c4:	e08c      	b.n	800b4e0 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b35      	cmp	r3, #53	@ 0x35
 800b3ca:	d802      	bhi.n	800b3d2 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	61fb      	str	r3, [r7, #28]
                break;
 800b3d0:	e086      	b.n	800b4e0 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	8a5b      	ldrh	r3, [r3, #18]
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	021b      	lsls	r3, r3, #8
 800b3da:	b21a      	sxth	r2, r3
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	8a5b      	ldrh	r3, [r3, #18]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	0a1b      	lsrs	r3, r3, #8
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	b21b      	sxth	r3, r3
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	b21b      	sxth	r3, r3
 800b3ec:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800b3ee:	89bb      	ldrh	r3, [r7, #12]
 800b3f0:	3336      	adds	r3, #54	@ 0x36
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d002      	beq.n	800b3fe <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800b3f8:	2304      	movs	r3, #4
 800b3fa:	61fb      	str	r3, [r7, #28]
                break;
 800b3fc:	e070      	b.n	800b4e0 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	7d1b      	ldrb	r3, [r3, #20]
 800b402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800b406:	e015      	b.n	800b434 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800b408:	6a3b      	ldr	r3, [r7, #32]
 800b40a:	3336      	adds	r3, #54	@ 0x36
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	4413      	add	r3, r2
 800b410:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	785b      	ldrb	r3, [r3, #1]
 800b416:	3301      	adds	r3, #1
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	461a      	mov	r2, r3
 800b41c:	6a3b      	ldr	r3, [r7, #32]
 800b41e:	4413      	add	r3, r2
 800b420:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	3336      	adds	r3, #54	@ 0x36
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	429a      	cmp	r2, r3
 800b432:	d908      	bls.n	800b446 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800b434:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 f85f 	bl	800b4fc <xIsExtHeader>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e1      	bne.n	800b408 <xCheckIPv6SizeFields+0x88>
 800b444:	e000      	b.n	800b448 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800b446:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800b448:	6a3b      	ldr	r3, [r7, #32]
 800b44a:	3336      	adds	r3, #54	@ 0x36
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d802      	bhi.n	800b458 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800b452:	2307      	movs	r3, #7
 800b454:	61fb      	str	r3, [r7, #28]
                break;
 800b456:	e043      	b.n	800b4e0 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800b458:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b45c:	2b11      	cmp	r3, #17
 800b45e:	d103      	bne.n	800b468 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	333e      	adds	r3, #62	@ 0x3e
 800b464:	627b      	str	r3, [r7, #36]	@ 0x24
 800b466:	e032      	b.n	800b4ce <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800b468:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b46c:	2b06      	cmp	r3, #6
 800b46e:	d103      	bne.n	800b478 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800b470:	6a3b      	ldr	r3, [r7, #32]
 800b472:	334a      	adds	r3, #74	@ 0x4a
 800b474:	627b      	str	r3, [r7, #36]	@ 0x24
 800b476:	e02a      	b.n	800b4ce <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800b478:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b47c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b47e:	d123      	bne.n	800b4c8 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	3336      	adds	r3, #54	@ 0x36
 800b484:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48a:	4413      	add	r3, r2
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	2b80      	cmp	r3, #128	@ 0x80
 800b494:	d002      	beq.n	800b49c <xCheckIPv6SizeFields+0x11c>
 800b496:	7afb      	ldrb	r3, [r7, #11]
 800b498:	2b81      	cmp	r3, #129	@ 0x81
 800b49a:	d103      	bne.n	800b4a4 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800b49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49e:	3308      	adds	r3, #8
 800b4a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4a2:	e014      	b.n	800b4ce <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800b4a4:	7afb      	ldrb	r3, [r7, #11]
 800b4a6:	2b85      	cmp	r3, #133	@ 0x85
 800b4a8:	d103      	bne.n	800b4b2 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ac:	3308      	adds	r3, #8
 800b4ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4b0:	e00d      	b.n	800b4ce <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800b4b2:	7afb      	ldrb	r3, [r7, #11]
 800b4b4:	2b86      	cmp	r3, #134	@ 0x86
 800b4b6:	d103      	bne.n	800b4c0 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ba:	3310      	adds	r3, #16
 800b4bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4be:	e006      	b.n	800b4ce <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c2:	3318      	adds	r3, #24
 800b4c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4c6:	e002      	b.n	800b4ce <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800b4c8:	2305      	movs	r3, #5
 800b4ca:	61fb      	str	r3, [r7, #28]
                break;
 800b4cc:	e008      	b.n	800b4e0 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d202      	bcs.n	800b4dc <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800b4d6:	2306      	movs	r3, #6
 800b4d8:	61fb      	str	r3, [r7, #28]
                break;
 800b4da:	e001      	b.n	800b4e0 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800b4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d003      	beq.n	800b4ee <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800b4e6:	69f9      	ldr	r1, [r7, #28]
 800b4e8:	4803      	ldr	r0, [pc, #12]	@ (800b4f8 <xCheckIPv6SizeFields+0x178>)
 800b4ea:	f017 f96b 	bl	80227c4 <lUDPLoggingPrintf>
        }

        return xResult;
 800b4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3730      	adds	r7, #48	@ 0x30
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	080256e4 	.word	0x080256e4

0800b4fc <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	4603      	mov	r3, r0
 800b504:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800b506:	2300      	movs	r3, #0
 800b508:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800b50a:	79fb      	ldrb	r3, [r7, #7]
 800b50c:	2b87      	cmp	r3, #135	@ 0x87
 800b50e:	d016      	beq.n	800b53e <xIsExtHeader+0x42>
 800b510:	2b87      	cmp	r3, #135	@ 0x87
 800b512:	dc16      	bgt.n	800b542 <xIsExtHeader+0x46>
 800b514:	2b00      	cmp	r3, #0
 800b516:	d012      	beq.n	800b53e <xIsExtHeader+0x42>
 800b518:	2b00      	cmp	r3, #0
 800b51a:	db12      	blt.n	800b542 <xIsExtHeader+0x46>
 800b51c:	2b3c      	cmp	r3, #60	@ 0x3c
 800b51e:	dc10      	bgt.n	800b542 <xIsExtHeader+0x46>
 800b520:	2b2b      	cmp	r3, #43	@ 0x2b
 800b522:	db0e      	blt.n	800b542 <xIsExtHeader+0x46>
 800b524:	3b2b      	subs	r3, #43	@ 0x2b
 800b526:	4a0a      	ldr	r2, [pc, #40]	@ (800b550 <xIsExtHeader+0x54>)
 800b528:	fa22 f303 	lsr.w	r3, r2, r3
 800b52c:	f003 0301 	and.w	r3, r3, #1
 800b530:	2b00      	cmp	r3, #0
 800b532:	bf14      	ite	ne
 800b534:	2301      	movne	r3, #1
 800b536:	2300      	moveq	r3, #0
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d001      	beq.n	800b542 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800b53e:	2301      	movs	r3, #1
 800b540:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800b542:	68fb      	ldr	r3, [r7, #12]
    }
 800b544:	4618      	mov	r0, r3
 800b546:	3714      	adds	r7, #20
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	00020183 	.word	0x00020183

0800b554 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d104      	bne.n	800b56e <xGetIPv6MulticastGroupID+0x1a>
 800b564:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800b568:	480e      	ldr	r0, [pc, #56]	@ (800b5a4 <xGetIPv6MulticastGroupID+0x50>)
 800b56a:	f7f6 fa4d 	bl	8001a08 <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d104      	bne.n	800b57e <xGetIPv6MulticastGroupID+0x2a>
 800b574:	f240 1113 	movw	r1, #275	@ 0x113
 800b578:	480a      	ldr	r0, [pc, #40]	@ (800b5a4 <xGetIPv6MulticastGroupID+0x50>)
 800b57a:	f7f6 fa45 	bl	8001a08 <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2200      	movs	r2, #0
 800b582:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2200      	movs	r2, #0
 800b588:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	1c98      	adds	r0, r3, #2
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	3302      	adds	r3, #2
 800b592:	220e      	movs	r2, #14
 800b594:	4619      	mov	r1, r3
 800b596:	f017 fb31 	bl	8022bfc <memcpy>
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	08025708 	.word	0x08025708

0800b5a8 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2210      	movs	r2, #16
 800b5b8:	4906      	ldr	r1, [pc, #24]	@ (800b5d4 <xIsIPv6Loopback+0x2c>)
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f018 fab3 	bl	8023b26 <memcmp>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d101      	bne.n	800b5ca <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	08027f64 	.word	0x08027f64

0800b5d8 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	2bff      	cmp	r3, #255	@ 0xff
 800b5ea:	d123      	bne.n	800b634 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800b5ec:	f107 030c 	add.w	r3, r7, #12
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff ffae 	bl	800b554 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	785b      	ldrb	r3, [r3, #1]
 800b5fc:	f003 030f 	and.w	r3, r3, #15
 800b600:	2b00      	cmp	r3, #0
 800b602:	d102      	bne.n	800b60a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800b604:	2300      	movs	r3, #0
 800b606:	61fb      	str	r3, [r7, #28]
 800b608:	e014      	b.n	800b634 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	785b      	ldrb	r3, [r3, #1]
 800b60e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10c      	bne.n	800b630 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800b616:	f107 030c 	add.w	r3, r7, #12
 800b61a:	2210      	movs	r2, #16
 800b61c:	4908      	ldr	r1, [pc, #32]	@ (800b640 <xIsIPv6AllowedMulticast+0x68>)
 800b61e:	4618      	mov	r0, r3
 800b620:	f018 fa81 	bl	8023b26 <memcmp>
 800b624:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b626:	2b00      	cmp	r3, #0
 800b628:	d102      	bne.n	800b630 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800b62a:	2300      	movs	r3, #0
 800b62c:	61fb      	str	r3, [r7, #28]
 800b62e:	e001      	b.n	800b634 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800b630:	2301      	movs	r3, #1
 800b632:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b634:	69fb      	ldr	r3, [r7, #28]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3720      	adds	r7, #32
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	08027f54 	.word	0x08027f54

0800b644 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b08a      	sub	sp, #40	@ 0x28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2bff      	cmp	r3, #255	@ 0xff
 800b656:	d112      	bne.n	800b67e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d10e      	bne.n	800b67e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b664:	2bff      	cmp	r3, #255	@ 0xff
 800b666:	d10a      	bne.n	800b67e <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f103 000d 	add.w	r0, r3, #13
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	330d      	adds	r3, #13
 800b672:	2203      	movs	r2, #3
 800b674:	4619      	mov	r1, r3
 800b676:	f018 fa56 	bl	8023b26 <memcmp>
 800b67a:	6278      	str	r0, [r7, #36]	@ 0x24
 800b67c:	e069      	b.n	800b752 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	2210      	movs	r2, #16
 800b682:	4936      	ldr	r1, [pc, #216]	@ (800b75c <xCompareIPv6_Address+0x118>)
 800b684:	4618      	mov	r0, r3
 800b686:	f018 fa4e 	bl	8023b26 <memcmp>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d102      	bne.n	800b696 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800b690:	2300      	movs	r3, #0
 800b692:	627b      	str	r3, [r7, #36]	@ 0x24
 800b694:	e05d      	b.n	800b752 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b69c:	d10e      	bne.n	800b6bc <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b6a2:	2b80      	cmp	r3, #128	@ 0x80
 800b6a4:	d10a      	bne.n	800b6bc <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b6aa:	2bfe      	cmp	r3, #254	@ 0xfe
 800b6ac:	d106      	bne.n	800b6bc <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b6b2:	2b80      	cmp	r3, #128	@ 0x80
 800b6b4:	d102      	bne.n	800b6bc <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6ba:	e04a      	b.n	800b752 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d102      	bne.n	800b6c8 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6c6:	e044      	b.n	800b752 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b80      	cmp	r3, #128	@ 0x80
 800b6cc:	d107      	bne.n	800b6de <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68b9      	ldr	r1, [r7, #8]
 800b6d2:	2210      	movs	r2, #16
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f018 fa26 	bl	8023b26 <memcmp>
 800b6da:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6dc:	e039      	b.n	800b752 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	08db      	lsrs	r3, r3, #3
 800b6e2:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d006      	beq.n	800b6fc <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	68b9      	ldr	r1, [r7, #8]
 800b6f2:	6a3a      	ldr	r2, [r7, #32]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f018 fa16 	bl	8023b26 <memcmp>
 800b6fa:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d127      	bne.n	800b752 <xCompareIPv6_Address+0x10e>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f003 0307 	and.w	r3, r3, #7
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d022      	beq.n	800b752 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f003 0307 	and.w	r3, r3, #7
 800b712:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	f1c3 0308 	rsb	r3, r3, #8
 800b71a:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800b71c:	2201      	movs	r2, #1
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	fa02 f303 	lsl.w	r3, r2, r3
 800b724:	3b01      	subs	r3, #1
 800b726:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	43db      	mvns	r3, r3
 800b72e:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	6a3b      	ldr	r3, [r7, #32]
 800b734:	4413      	add	r3, r2
 800b736:	781a      	ldrb	r2, [r3, #0]
 800b738:	68b9      	ldr	r1, [r7, #8]
 800b73a:	6a3b      	ldr	r3, [r7, #32]
 800b73c:	440b      	add	r3, r1
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	4053      	eors	r3, r2
 800b742:	b2da      	uxtb	r2, r3
 800b744:	7cfb      	ldrb	r3, [r7, #19]
 800b746:	4013      	ands	r3, r2
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800b74e:	2301      	movs	r3, #1
 800b750:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800b752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b754:	4618      	mov	r0, r3
 800b756:	3728      	adds	r7, #40	@ 0x28
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	08027f74 	.word	0x08027f74

0800b760 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800b76c:	2301      	movs	r3, #1
 800b76e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800b770:	7dfb      	ldrb	r3, [r7, #23]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d10c      	bne.n	800b790 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b77e:	4619      	mov	r1, r3
 800b780:	4610      	mov	r0, r2
 800b782:	f7ff fdfd 	bl	800b380 <xCheckIPv6SizeFields>
 800b786:	4603      	mov	r3, r0
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d001      	beq.n	800b790 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800b78c:	2300      	movs	r3, #0
 800b78e:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800b790:	7dfb      	ldrb	r3, [r7, #23]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3718      	adds	r7, #24
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
	...

0800b79c <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	460a      	mov	r2, r1
 800b7a6:	71fb      	strb	r3, [r7, #7]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800b7ac:	79fb      	ldrb	r3, [r7, #7]
 800b7ae:	2b87      	cmp	r3, #135	@ 0x87
 800b7b0:	d04b      	beq.n	800b84a <xGetExtensionOrder+0xae>
 800b7b2:	2b87      	cmp	r3, #135	@ 0x87
 800b7b4:	dc4c      	bgt.n	800b850 <xGetExtensionOrder+0xb4>
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d030      	beq.n	800b81c <xGetExtensionOrder+0x80>
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	db48      	blt.n	800b850 <xGetExtensionOrder+0xb4>
 800b7be:	2b3c      	cmp	r3, #60	@ 0x3c
 800b7c0:	dc46      	bgt.n	800b850 <xGetExtensionOrder+0xb4>
 800b7c2:	2b2b      	cmp	r3, #43	@ 0x2b
 800b7c4:	db44      	blt.n	800b850 <xGetExtensionOrder+0xb4>
 800b7c6:	3b2b      	subs	r3, #43	@ 0x2b
 800b7c8:	2b11      	cmp	r3, #17
 800b7ca:	d841      	bhi.n	800b850 <xGetExtensionOrder+0xb4>
 800b7cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b7d4 <xGetExtensionOrder+0x38>)
 800b7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d2:	bf00      	nop
 800b7d4:	0800b833 	.word	0x0800b833
 800b7d8:	0800b839 	.word	0x0800b839
 800b7dc:	0800b851 	.word	0x0800b851
 800b7e0:	0800b851 	.word	0x0800b851
 800b7e4:	0800b851 	.word	0x0800b851
 800b7e8:	0800b851 	.word	0x0800b851
 800b7ec:	0800b851 	.word	0x0800b851
 800b7f0:	0800b845 	.word	0x0800b845
 800b7f4:	0800b83f 	.word	0x0800b83f
 800b7f8:	0800b851 	.word	0x0800b851
 800b7fc:	0800b851 	.word	0x0800b851
 800b800:	0800b851 	.word	0x0800b851
 800b804:	0800b851 	.word	0x0800b851
 800b808:	0800b851 	.word	0x0800b851
 800b80c:	0800b851 	.word	0x0800b851
 800b810:	0800b851 	.word	0x0800b851
 800b814:	0800b851 	.word	0x0800b851
 800b818:	0800b823 	.word	0x0800b823
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800b81c:	2301      	movs	r3, #1
 800b81e:	60fb      	str	r3, [r7, #12]
            break;
 800b820:	e01b      	b.n	800b85a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800b822:	2307      	movs	r3, #7
 800b824:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800b826:	79bb      	ldrb	r3, [r7, #6]
 800b828:	2b2b      	cmp	r3, #43	@ 0x2b
 800b82a:	d115      	bne.n	800b858 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800b82c:	2302      	movs	r3, #2
 800b82e:	60fb      	str	r3, [r7, #12]
            }

            break;
 800b830:	e012      	b.n	800b858 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800b832:	2303      	movs	r3, #3
 800b834:	60fb      	str	r3, [r7, #12]
            break;
 800b836:	e010      	b.n	800b85a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800b838:	2304      	movs	r3, #4
 800b83a:	60fb      	str	r3, [r7, #12]
            break;
 800b83c:	e00d      	b.n	800b85a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800b83e:	2305      	movs	r3, #5
 800b840:	60fb      	str	r3, [r7, #12]
            break;
 800b842:	e00a      	b.n	800b85a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800b844:	2306      	movs	r3, #6
 800b846:	60fb      	str	r3, [r7, #12]
            break;
 800b848:	e007      	b.n	800b85a <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800b84a:	2308      	movs	r3, #8
 800b84c:	60fb      	str	r3, [r7, #12]
            break;
 800b84e:	e004      	b.n	800b85a <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800b850:	f04f 33ff 	mov.w	r3, #4294967295
 800b854:	60fb      	str	r3, [r7, #12]
            break;
 800b856:	e000      	b.n	800b85a <xGetExtensionOrder+0xbe>
            break;
 800b858:	bf00      	nop
    }

    return xReturn;
 800b85a:	68fb      	ldr	r3, [r7, #12]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3714      	adds	r7, #20
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08e      	sub	sp, #56	@ 0x38
 800b86c:	af02      	add	r7, sp, #8
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800b872:	2300      	movs	r3, #0
 800b874:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b87c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b882:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800b884:	2300      	movs	r3, #0
 800b886:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800b88c:	2300      	movs	r3, #0
 800b88e:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800b890:	2300      	movs	r3, #0
 800b892:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b89c:	f107 020b 	add.w	r2, r7, #11
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	f000 faa5 	bl	800bdf0 <usGetExtensionHeaderLength>
 800b8a6:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	3336      	adds	r3, #54	@ 0x36
 800b8ac:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800b8ae:	69ba      	ldr	r2, [r7, #24]
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d243      	bcs.n	800b93e <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	8a5b      	ldrh	r3, [r3, #18]
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	021b      	lsls	r3, r3, #8
 800b8be:	b21a      	sxth	r2, r3
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	8a5b      	ldrh	r3, [r3, #18]
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	0a1b      	lsrs	r3, r3, #8
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	b21b      	sxth	r3, r3
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	b21b      	sxth	r3, r3
 800b8d0:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800b8d2:	8afb      	ldrh	r3, [r7, #22]
 800b8d4:	69fa      	ldr	r2, [r7, #28]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d231      	bcs.n	800b93e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d12e      	bne.n	800b93e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800b8e0:	7afa      	ldrb	r2, [r7, #11]
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ea:	3336      	adds	r3, #54	@ 0x36
 800b8ec:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800b8f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800b900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b902:	68f9      	ldr	r1, [r7, #12]
 800b904:	6938      	ldr	r0, [r7, #16]
 800b906:	f018 f91e 	bl	8023b46 <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	1ad2      	subs	r2, r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	b29b      	uxth	r3, r3
 800b91a:	8afa      	ldrh	r2, [r7, #22]
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800b920:	8afb      	ldrh	r3, [r7, #22]
 800b922:	021b      	lsls	r3, r3, #8
 800b924:	b21a      	sxth	r2, r3
 800b926:	8afb      	ldrh	r3, [r7, #22]
 800b928:	0a1b      	lsrs	r3, r3, #8
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	b21b      	sxth	r3, r3
 800b92e:	4313      	orrs	r3, r2
 800b930:	b21b      	sxth	r3, r3
 800b932:	b29a      	uxth	r2, r3
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800b938:	2301      	movs	r3, #1
 800b93a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800b93e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b942:	2b01      	cmp	r3, #1
 800b944:	d101      	bne.n	800b94a <eHandleIPv6ExtensionHeaders+0xe2>
 800b946:	4910      	ldr	r1, [pc, #64]	@ (800b988 <eHandleIPv6ExtensionHeaders+0x120>)
 800b948:	e000      	b.n	800b94c <eHandleIPv6ExtensionHeaders+0xe4>
 800b94a:	4910      	ldr	r1, [pc, #64]	@ (800b98c <eHandleIPv6ExtensionHeaders+0x124>)
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	8a5b      	ldrh	r3, [r3, #18]
 800b950:	b29b      	uxth	r3, r3
 800b952:	021b      	lsls	r3, r3, #8
 800b954:	b21a      	sxth	r2, r3
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	8a5b      	ldrh	r3, [r3, #18]
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	0a1b      	lsrs	r3, r3, #8
 800b95e:	b29b      	uxth	r3, r3
 800b960:	b21b      	sxth	r3, r3
 800b962:	4313      	orrs	r3, r2
 800b964:	b21b      	sxth	r3, r3
 800b966:	b29b      	uxth	r3, r3
 800b968:	461a      	mov	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	9200      	str	r2, [sp, #0]
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b976:	4806      	ldr	r0, [pc, #24]	@ (800b990 <eHandleIPv6ExtensionHeaders+0x128>)
 800b978:	f016 ff24 	bl	80227c4 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800b97c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b980:	4618      	mov	r0, r3
 800b982:	3730      	adds	r7, #48	@ 0x30
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	08025738 	.word	0x08025738
 800b98c:	08025740 	.word	0x08025740
 800b990:	08025744 	.word	0x08025744

0800b994 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d026      	beq.n	800b9f6 <pxTCPSocketLookup_IPv6+0x62>
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d023      	beq.n	800b9f6 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	7a1b      	ldrb	r3, [r3, #8]
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d010      	beq.n	800b9de <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d018      	beq.n	800b9f6 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	3354      	adds	r3, #84	@ 0x54
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	2210      	movs	r2, #16
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f018 f8aa 	bl	8023b26 <memcmp>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10e      	bne.n	800b9f6 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	e00b      	b.n	800b9f6 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d107      	bne.n	800b9f6 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d101      	bne.n	800b9f6 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
    }
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba0e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <xSend_UDP_Update_IPv6+0x24>
 800ba1c:	2173      	movs	r1, #115	@ 0x73
 800ba1e:	4811      	ldr	r0, [pc, #68]	@ (800ba64 <xSend_UDP_Update_IPv6+0x64>)
 800ba20:	f7f5 fff2 	bl	8001a08 <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	3308      	adds	r3, #8
 800ba2e:	2210      	movs	r2, #16
 800ba30:	4619      	mov	r1, r3
 800ba32:	f017 f8e3 	bl	8022bfc <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f103 0014 	add.w	r0, r3, #20
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	3308      	adds	r3, #8
 800ba40:	2210      	movs	r2, #16
 800ba42:	4619      	mov	r1, r3
 800ba44:	f017 f8da 	bl	8022bfc <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800ba50:	731a      	strb	r2, [r3, #12]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800ba58:	735a      	strb	r2, [r3, #13]

    return NULL;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3710      	adds	r7, #16
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	0802579c 	.word	0x0802579c

0800ba68 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800ba72:	2330      	movs	r3, #48	@ 0x30
 800ba74:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800ba76:	88fb      	ldrh	r3, [r7, #6]
 800ba78:	2b09      	cmp	r3, #9
 800ba7a:	d805      	bhi.n	800ba88 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800ba7c:	88fb      	ldrh	r3, [r7, #6]
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
 800ba82:	4413      	add	r3, r2
 800ba84:	73fb      	strb	r3, [r7, #15]
 800ba86:	e010      	b.n	800baaa <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800ba88:	88fb      	ldrh	r3, [r7, #6]
 800ba8a:	2b0f      	cmp	r3, #15
 800ba8c:	d809      	bhi.n	800baa2 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800ba8e:	2361      	movs	r3, #97	@ 0x61
 800ba90:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800ba92:	88fb      	ldrh	r3, [r7, #6]
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	4413      	add	r3, r2
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	3b0a      	subs	r3, #10
 800ba9e:	73fb      	strb	r3, [r7, #15]
 800baa0:	e003      	b.n	800baaa <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800baa2:	21b3      	movs	r1, #179	@ 0xb3
 800baa4:	4803      	ldr	r0, [pc, #12]	@ (800bab4 <cHexToChar+0x4c>)
 800baa6:	f7f5 ffaf 	bl	8001a08 <vAssertCalled>
    }

    return cReturn;
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	0802579c 	.word	0x0802579c

0800bab8 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800bab8:	b590      	push	{r4, r7, lr}
 800baba:	b08b      	sub	sp, #44	@ 0x2c
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	4613      	mov	r3, r2
 800bac4:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800bac6:	2304      	movs	r3, #4
 800bac8:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800baca:	2300      	movs	r3, #0
 800bacc:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800bace:	88fb      	ldrh	r3, [r7, #6]
 800bad0:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800bad2:	2300      	movs	r3, #0
 800bad4:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800bad6:	2300      	movs	r3, #0
 800bad8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bada:	e026      	b.n	800bb2a <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800badc:	8bfb      	ldrh	r3, [r7, #30]
 800bade:	0b1b      	lsrs	r3, r3, #12
 800bae0:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800bae2:	8a7b      	ldrh	r3, [r7, #18]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d001      	beq.n	800baec <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800bae8:	2301      	movs	r3, #1
 800baea:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d104      	bne.n	800bafc <uxHexPrintShort+0x44>
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	3b01      	subs	r3, #1
 800baf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d110      	bne.n	800bb1e <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	6a3a      	ldr	r2, [r7, #32]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d216      	bcs.n	800bb34 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	18d4      	adds	r4, r2, r3
 800bb0c:	8a7b      	ldrh	r3, [r7, #18]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7ff ffaa 	bl	800ba68 <cHexToChar>
 800bb14:	4603      	mov	r3, r0
 800bb16:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800bb1e:	8bfb      	ldrh	r3, [r7, #30]
 800bb20:	011b      	lsls	r3, r3, #4
 800bb22:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800bb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb26:	3301      	adds	r3, #1
 800bb28:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d3d4      	bcc.n	800badc <uxHexPrintShort+0x24>
 800bb32:	e000      	b.n	800bb36 <uxHexPrintShort+0x7e>
                break;
 800bb34:	bf00      	nop
    }

    return uxIndex;
 800bb36:	6a3b      	ldr	r3, [r7, #32]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	372c      	adds	r7, #44	@ 0x2c
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd90      	pop	{r4, r7, pc}

0800bb40 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800bb40:	b480      	push	{r7}
 800bb42:	b089      	sub	sp, #36	@ 0x24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800bb48:	2300      	movs	r3, #0
 800bb4a:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800bb50:	2300      	movs	r3, #0
 800bb52:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800bb54:	2308      	movs	r3, #8
 800bb56:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5e:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800bb60:	e02c      	b.n	800bbbc <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	005b      	lsls	r3, r3, #1
 800bb6a:	4413      	add	r3, r2
 800bb6c:	881b      	ldrh	r3, [r3, #0]
 800bb6e:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800bb70:	89fb      	ldrh	r3, [r7, #14]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d107      	bne.n	800bb86 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d101      	bne.n	800bb80 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	3301      	adds	r3, #1
 800bb84:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800bb86:	89fb      	ldrh	r3, [r7, #14]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d104      	bne.n	800bb96 <prv_ntop6_search_zeros+0x56>
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	69fa      	ldr	r2, [r7, #28]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d10f      	bne.n	800bbb6 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	dd0a      	ble.n	800bbb2 <prv_ntop6_search_zeros+0x72>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	dd05      	ble.n	800bbb2 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	697a      	ldr	r2, [r7, #20]
 800bbaa:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	69ba      	ldr	r2, [r7, #24]
 800bbb0:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	61fb      	str	r3, [r7, #28]
 800bbbc:	69fa      	ldr	r2, [r7, #28]
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	dbce      	blt.n	800bb62 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800bbc4:	bf00      	nop
 800bbc6:	bf00      	nop
 800bbc8:	3724      	adds	r7, #36	@ 0x24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b087      	sub	sp, #28
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800bbe2:	2308      	movs	r3, #8
 800bbe4:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	691a      	ldr	r2, [r3, #16]
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d827      	bhi.n	800bc42 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	223a      	movs	r2, #58	@ 0x3a
 800bbfc:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	1c5a      	adds	r2, r3, #1
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68da      	ldr	r2, [r3, #12]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	4413      	add	r3, r2
 800bc12:	693a      	ldr	r2, [r7, #16]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d116      	bne.n	800bc46 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	691a      	ldr	r2, [r3, #16]
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d80b      	bhi.n	800bc3c <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	223a      	movs	r2, #58	@ 0x3a
 800bc2e:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	611a      	str	r2, [r3, #16]
 800bc3a:	e004      	b.n	800bc46 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	617b      	str	r3, [r7, #20]
 800bc40:	e001      	b.n	800bc46 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800bc42:	2300      	movs	r3, #0
 800bc44:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800bc46:	697b      	ldr	r3, [r7, #20]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	371c      	adds	r7, #28
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800bc54:	b590      	push	{r4, r7, lr}
 800bc56:	b089      	sub	sp, #36	@ 0x24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800bc60:	2301      	movs	r3, #1
 800bc62:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800bc64:	2304      	movs	r3, #4
 800bc66:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	dd13      	ble.n	800bc98 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	691a      	ldr	r2, [r3, #16]
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	3b01      	subs	r3, #1
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d302      	bcc.n	800bc82 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	61fb      	str	r3, [r7, #28]
 800bc80:	e00a      	b.n	800bc98 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	4413      	add	r3, r2
 800bc8a:	223a      	movs	r2, #58	@ 0x3a
 800bc8c:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	1c5a      	adds	r2, r3, #1
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d130      	bne.n	800bd00 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	691a      	ldr	r2, [r3, #16]
 800bca2:	68b9      	ldr	r1, [r7, #8]
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	1acb      	subs	r3, r1, r3
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d827      	bhi.n	800bcfc <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	18d0      	adds	r0, r2, r3
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	4413      	add	r3, r2
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	021b      	lsls	r3, r3, #8
 800bcc8:	b21a      	sxth	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6819      	ldr	r1, [r3, #0]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	440b      	add	r3, r1
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	0a1b      	lsrs	r3, r3, #8
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	b21b      	sxth	r3, r3
 800bcde:	4313      	orrs	r3, r2
 800bce0:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	461a      	mov	r2, r3
 800bce6:	4621      	mov	r1, r4
 800bce8:	f7ff fee6 	bl	800bab8 <uxHexPrintShort>
 800bcec:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	691a      	ldr	r2, [r3, #16]
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	441a      	add	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	611a      	str	r2, [r3, #16]
 800bcfa:	e001      	b.n	800bd00 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800bd00:	69fb      	ldr	r3, [r7, #28]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3724      	adds	r7, #36	@ 0x24
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd90      	pop	{r4, r7, pc}

0800bd0a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b08a      	sub	sp, #40	@ 0x28
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	60f8      	str	r0, [r7, #12]
 800bd12:	60b9      	str	r1, [r7, #8]
 800bd14:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800bd16:	f107 0310 	add.w	r3, r7, #16
 800bd1a:	2214      	movs	r2, #20
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f017 f879 	bl	8022e16 <memset>

    xSet.pusAddress = pvSource;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d92c      	bls.n	800bd88 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800bd2e:	f107 0310 	add.w	r3, r7, #16
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7ff ff04 	bl	800bb40 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800bd38:	e01f      	b.n	800bd7a <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800bd3a:	69fa      	ldr	r2, [r7, #28]
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d10e      	bne.n	800bd60 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800bd42:	f107 0310 	add.w	r3, r7, #16
 800bd46:	461a      	mov	r2, r3
 800bd48:	6879      	ldr	r1, [r7, #4]
 800bd4a:	68b8      	ldr	r0, [r7, #8]
 800bd4c:	f7ff ff41 	bl	800bbd2 <prv_ntop6_write_zeros>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d015      	beq.n	800bd82 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800bd56:	69fa      	ldr	r2, [r7, #28]
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	61fb      	str	r3, [r7, #28]
 800bd5e:	e00c      	b.n	800bd7a <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800bd60:	f107 0310 	add.w	r3, r7, #16
 800bd64:	461a      	mov	r2, r3
 800bd66:	6879      	ldr	r1, [r7, #4]
 800bd68:	68b8      	ldr	r0, [r7, #8]
 800bd6a:	f7ff ff73 	bl	800bc54 <prv_ntop6_write_short>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d008      	beq.n	800bd86 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	3301      	adds	r3, #1
 800bd78:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	2b07      	cmp	r3, #7
 800bd7e:	dddc      	ble.n	800bd3a <FreeRTOS_inet_ntop6+0x30>
 800bd80:	e002      	b.n	800bd88 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800bd82:	bf00      	nop
 800bd84:	e000      	b.n	800bd88 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800bd86:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	2b07      	cmp	r3, #7
 800bd8c:	dc02      	bgt.n	800bd94 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd92:	e006      	b.n	800bda2 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	4413      	add	r3, r2
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800bda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3728      	adds	r7, #40	@ 0x28
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	2233      	movs	r2, #51	@ 0x33
 800bdba:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	2233      	movs	r2, #51	@ 0x33
 800bdc0:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	7b1a      	ldrb	r2, [r3, #12]
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	7b5a      	ldrb	r2, [r3, #13]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	7b9a      	ldrb	r2, [r3, #14]
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	7bda      	ldrb	r2, [r3, #15]
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	715a      	strb	r2, [r3, #5]
}
 800bde2:	bf00      	nop
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
	...

0800bdf0 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08e      	sub	sp, #56	@ 0x38
 800bdf4:	af02      	add	r7, sp, #8
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800be02:	2336      	movs	r3, #54	@ 0x36
 800be04:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800be06:	2300      	movs	r3, #0
 800be08:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 808c 	beq.w	800bf36 <usGetExtensionHeaderLength+0x146>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 8088 	beq.w	800bf36 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	7d1b      	ldrb	r3, [r3, #20]
 800be2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800be32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be36:	2100      	movs	r1, #0
 800be38:	4618      	mov	r0, r3
 800be3a:	f7ff fcaf 	bl	800b79c <xGetExtensionOrder>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	dd72      	ble.n	800bf2a <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800be44:	e06b      	b.n	800bf1e <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4a:	4413      	add	r3, r2
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800be52:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800be56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be5a:	4611      	mov	r1, r2
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7ff fc9d 	bl	800b79c <xGetExtensionOrder>
 800be62:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800be64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be66:	3301      	adds	r3, #1
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	4413      	add	r3, r2
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	3301      	adds	r3, #1
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800be78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	4413      	add	r3, r2
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	429a      	cmp	r2, r3
 800be82:	d806      	bhi.n	800be92 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	69fa      	ldr	r2, [r7, #28]
 800be88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be8a:	482d      	ldr	r0, [pc, #180]	@ (800bf40 <usGetExtensionHeaderLength+0x150>)
 800be8c:	f016 fc9a 	bl	80227c4 <lUDPLoggingPrintf>
                    break;
 800be90:	e051      	b.n	800bf36 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800be92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	4413      	add	r3, r2
 800be98:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800be9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800be9e:	2b06      	cmp	r3, #6
 800bea0:	d007      	beq.n	800beb2 <usGetExtensionHeaderLength+0xc2>
 800bea2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bea6:	2b11      	cmp	r3, #17
 800bea8:	d003      	beq.n	800beb2 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800beaa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800beae:	2b3a      	cmp	r3, #58	@ 0x3a
 800beb0:	d10d      	bne.n	800bece <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800beb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800beb6:	4619      	mov	r1, r3
 800beb8:	4822      	ldr	r0, [pc, #136]	@ (800bf44 <usGetExtensionHeaderLength+0x154>)
 800beba:	f016 fc83 	bl	80227c4 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800bebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec0:	3b36      	subs	r3, #54	@ 0x36
 800bec2:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800beca:	701a      	strb	r2, [r3, #0]
                    break;
 800becc:	e033      	b.n	800bf36 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed2:	4413      	add	r3, r2
 800bed4:	781a      	ldrb	r2, [r3, #0]
 800bed6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800beda:	4611      	mov	r1, r2
 800bedc:	4618      	mov	r0, r3
 800bede:	f7ff fc5d 	bl	800b79c <xGetExtensionOrder>
 800bee2:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800bee4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800bee8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	4613      	mov	r3, r2
 800bef2:	69ba      	ldr	r2, [r7, #24]
 800bef4:	4814      	ldr	r0, [pc, #80]	@ (800bf48 <usGetExtensionHeaderLength+0x158>)
 800bef6:	f016 fc65 	bl	80227c4 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d103      	bne.n	800bf08 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800bf00:	4812      	ldr	r0, [pc, #72]	@ (800bf4c <usGetExtensionHeaderLength+0x15c>)
 800bf02:	f016 fc5f 	bl	80227c4 <lUDPLoggingPrintf>
                    break;
 800bf06:	e016      	b.n	800bf36 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da03      	bge.n	800bf16 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800bf0e:	4810      	ldr	r0, [pc, #64]	@ (800bf50 <usGetExtensionHeaderLength+0x160>)
 800bf10:	f016 fc58 	bl	80227c4 <lUDPLoggingPrintf>
                    break;
 800bf14:	e00f      	b.n	800bf36 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800bf16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bf1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800bf1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf20:	3308      	adds	r3, #8
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d88e      	bhi.n	800be46 <usGetExtensionHeaderLength+0x56>
 800bf28:	e005      	b.n	800bf36 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bf30:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800bf32:	2300      	movs	r3, #0
 800bf34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800bf36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3730      	adds	r7, #48	@ 0x30
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	080257e4 	.word	0x080257e4
 800bf44:	0802582c 	.word	0x0802582c
 800bf48:	08025840 	.word	0x08025840
 800bf4c:	08025868 	.word	0x08025868
 800bf50:	080258c8 	.word	0x080258c8

0800bf54 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d104      	bne.n	800bf6e <vManageSolicitedNodeAddress+0x1a>
 800bf64:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800bf68:	482d      	ldr	r0, [pc, #180]	@ (800c020 <vManageSolicitedNodeAddress+0xcc>)
 800bf6a:	f7f5 fd4d 	bl	8001a08 <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d104      	bne.n	800bf82 <vManageSolicitedNodeAddress+0x2e>
 800bf78:	f240 1133 	movw	r1, #307	@ 0x133
 800bf7c:	4828      	ldr	r0, [pc, #160]	@ (800c020 <vManageSolicitedNodeAddress+0xcc>)
 800bf7e:	f7f5 fd43 	bl	8001a08 <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	3338      	adds	r3, #56	@ 0x38
 800bf86:	4618      	mov	r0, r3
 800bf88:	f002 f9c2 	bl	800e310 <xIPv6_GetIPType>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d005      	beq.n	800bfa2 <vManageSolicitedNodeAddress+0x4e>
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d002      	beq.n	800bfa2 <vManageSolicitedNodeAddress+0x4e>
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d138      	bne.n	800c014 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800bfa2:	2333      	movs	r3, #51	@ 0x33
 800bfa4:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800bfa6:	2333      	movs	r3, #51	@ 0x33
 800bfa8:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800bfaa:	23ff      	movs	r3, #255	@ 0xff
 800bfac:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bfb4:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bfbc:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800bfc4:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d111      	bne.n	800bff0 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bfd2:	695b      	ldr	r3, [r3, #20]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d01e      	beq.n	800c016 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bfde:	695b      	ldr	r3, [r3, #20]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800bfe6:	f107 0108 	add.w	r1, r7, #8
 800bfea:	4610      	mov	r0, r2
 800bfec:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800bfee:	e012      	b.n	800c016 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00c      	beq.n	800c016 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800c00a:	f107 0108 	add.w	r1, r7, #8
 800c00e:	4610      	mov	r0, r2
 800c010:	4798      	blx	r3
}
 800c012:	e000      	b.n	800c016 <vManageSolicitedNodeAddress+0xc2>
            break;
 800c014:	bf00      	nop
}
 800c016:	bf00      	nop
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	080258ec 	.word	0x080258ec

0800c024 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800c02a:	2000      	movs	r0, #0
 800c02c:	f001 fd8c 	bl	800db48 <FreeRTOS_FirstEndPoint>
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	e016      	b.n	800c062 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c03a:	f003 0304 	and.w	r3, r3, #4
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b00      	cmp	r3, #0
 800c042:	d009      	beq.n	800c058 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	3338      	adds	r3, #56	@ 0x38
 800c048:	4618      	mov	r0, r3
 800c04a:	f002 f961 	bl	800e310 <xIPv6_GetIPType>
 800c04e:	4603      	mov	r3, r0
 800c050:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800c052:	78fb      	ldrb	r3, [r7, #3]
 800c054:	2b01      	cmp	r3, #1
 800c056:	d008      	beq.n	800c06a <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	2000      	movs	r0, #0
 800c05c:	f001 fd96 	bl	800db8c <FreeRTOS_NextEndPoint>
 800c060:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1e5      	bne.n	800c034 <pxFindLocalEndpoint+0x10>
 800c068:	e000      	b.n	800c06c <pxFindLocalEndpoint+0x48>
                {
                    break;
 800c06a:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800c06c:	687b      	ldr	r3, [r7, #4]
    }
 800c06e:	4618      	mov	r0, r3
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800c076:	b580      	push	{r7, lr}
 800c078:	b086      	sub	sp, #24
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	60b9      	str	r1, [r7, #8]
 800c080:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f7ff faa8 	bl	800b5d8 <xIsIPv6AllowedMulticast>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00e      	beq.n	800c0ac <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f7ff fe8b 	bl	800bdac <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800c09c:	f7ff ffc2 	bl	800c024 <pxFindLocalEndpoint>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	75fb      	strb	r3, [r7, #23]
 800c0aa:	e001      	b.n	800c0b0 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800c0b0:	7dfb      	ldrb	r3, [r7, #23]
    }
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b088      	sub	sp, #32
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	68b9      	ldr	r1, [r7, #8]
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f7ff ffd2 	bl	800c076 <prvMACResolve>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800c0d6:	7ffb      	ldrb	r3, [r7, #31]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d106      	bne.n	800c0ea <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	68b9      	ldr	r1, [r7, #8]
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f000 f9a9 	bl	800c438 <prvNDCacheLookup>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800c0ea:	7ffb      	ldrb	r3, [r7, #31]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d104      	bne.n	800c0fa <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	4840      	ldr	r0, [pc, #256]	@ (800c1f8 <eNDGetCacheEntry+0x13c>)
 800c0f6:	f016 fb65 	bl	80227c4 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800c0fa:	7ffb      	ldrb	r3, [r7, #31]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d176      	bne.n	800c1ee <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f002 f905 	bl	800e310 <xIPv6_GetIPType>
 800c106:	4603      	mov	r3, r0
 800c108:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f001 fdae 	bl	800dc6c <FreeRTOS_FindEndPointOnIP_IPv6>
 800c110:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d00d      	beq.n	800c134 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d002      	beq.n	800c124 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	69ba      	ldr	r2, [r7, #24]
 800c122:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800c124:	68f9      	ldr	r1, [r7, #12]
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	3338      	adds	r3, #56	@ 0x38
 800c12a:	461a      	mov	r2, r3
 800c12c:	4833      	ldr	r0, [pc, #204]	@ (800c1fc <eNDGetCacheEntry+0x140>)
 800c12e:	f016 fb49 	bl	80227c4 <lUDPLoggingPrintf>
 800c132:	e05c      	b.n	800c1ee <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800c134:	7dfb      	ldrb	r3, [r7, #23]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d12b      	bne.n	800c192 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800c13a:	2000      	movs	r0, #0
 800c13c:	f001 fd04 	bl	800db48 <FreeRTOS_FirstEndPoint>
 800c140:	61b8      	str	r0, [r7, #24]
 800c142:	e017      	b.n	800c174 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	3338      	adds	r3, #56	@ 0x38
 800c148:	4618      	mov	r0, r3
 800c14a:	f002 f8e1 	bl	800e310 <xIPv6_GetIPType>
 800c14e:	4603      	mov	r3, r0
 800c150:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800c152:	7dba      	ldrb	r2, [r7, #22]
 800c154:	7dfb      	ldrb	r3, [r7, #23]
 800c156:	429a      	cmp	r2, r3
 800c158:	d107      	bne.n	800c16a <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	68b9      	ldr	r1, [r7, #8]
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f000 f96a 	bl	800c438 <prvNDCacheLookup>
 800c164:	4603      	mov	r3, r0
 800c166:	77fb      	strb	r3, [r7, #31]
                            break;
 800c168:	e007      	b.n	800c17a <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800c16a:	69b9      	ldr	r1, [r7, #24]
 800c16c:	2000      	movs	r0, #0
 800c16e:	f001 fd0d 	bl	800db8c <FreeRTOS_NextEndPoint>
 800c172:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d1e4      	bne.n	800c144 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800c17a:	68f9      	ldr	r1, [r7, #12]
 800c17c:	7ffb      	ldrb	r3, [r7, #31]
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d101      	bne.n	800c186 <eNDGetCacheEntry+0xca>
 800c182:	4b1f      	ldr	r3, [pc, #124]	@ (800c200 <eNDGetCacheEntry+0x144>)
 800c184:	e000      	b.n	800c188 <eNDGetCacheEntry+0xcc>
 800c186:	4b1f      	ldr	r3, [pc, #124]	@ (800c204 <eNDGetCacheEntry+0x148>)
 800c188:	461a      	mov	r2, r3
 800c18a:	481f      	ldr	r0, [pc, #124]	@ (800c208 <eNDGetCacheEntry+0x14c>)
 800c18c:	f016 fb1a 	bl	80227c4 <lUDPLoggingPrintf>
 800c190:	e02d      	b.n	800c1ee <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800c192:	2060      	movs	r0, #96	@ 0x60
 800c194:	f002 f87c 	bl	800e290 <FreeRTOS_FindGateWay>
 800c198:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d026      	beq.n	800c1ee <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	335c      	adds	r3, #92	@ 0x5c
 800c1a6:	2210      	movs	r2, #16
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	f016 fd27 	bl	8022bfc <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	4816      	ldr	r0, [pc, #88]	@ (800c20c <eNDGetCacheEntry+0x150>)
 800c1b4:	f016 fb06 	bl	80227c4 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	3338      	adds	r3, #56	@ 0x38
 800c1bc:	4619      	mov	r1, r3
 800c1be:	4814      	ldr	r0, [pc, #80]	@ (800c210 <eNDGetCacheEntry+0x154>)
 800c1c0:	f016 fb00 	bl	80227c4 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	68b9      	ldr	r1, [r7, #8]
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f000 f935 	bl	800c438 <prvNDCacheLookup>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d006      	beq.n	800c1e8 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	3338      	adds	r3, #56	@ 0x38
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	480c      	ldr	r0, [pc, #48]	@ (800c214 <eNDGetCacheEntry+0x158>)
 800c1e4:	f016 faee 	bl	80227c4 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	69ba      	ldr	r2, [r7, #24]
 800c1ec:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800c1ee:	7ffb      	ldrb	r3, [r7, #31]
    }
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3720      	adds	r7, #32
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	08025920 	.word	0x08025920
 800c1fc:	08025944 	.word	0x08025944
 800c200:	08025988 	.word	0x08025988
 800c204:	0802598c 	.word	0x0802598c
 800c208:	08025994 	.word	0x08025994
 800c20c:	080259bc 	.word	0x080259bc
 800c210:	080259e0 	.word	0x080259e0
 800c214:	08025a04 	.word	0x08025a04

0800c218 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800c218:	b5b0      	push	{r4, r5, r7, lr}
 800c21a:	b08e      	sub	sp, #56	@ 0x38
 800c21c:	af04      	add	r7, sp, #16
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800c224:	f04f 33ff 	mov.w	r3, #4294967295
 800c228:	623b      	str	r3, [r7, #32]
 800c22a:	f04f 33ff 	mov.w	r3, #4294967295
 800c22e:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800c230:	2397      	movs	r3, #151	@ 0x97
 800c232:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800c234:	2300      	movs	r3, #0
 800c236:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c238:	2300      	movs	r3, #0
 800c23a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c23c:	e033      	b.n	800c2a6 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c23e:	4a44      	ldr	r2, [pc, #272]	@ (800c350 <vNDRefreshCacheEntry+0x138>)
 800c240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c242:	015b      	lsls	r3, r3, #5
 800c244:	4413      	add	r3, r2
 800c246:	331d      	adds	r3, #29
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d106      	bne.n	800c25c <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800c24e:	6a3b      	ldr	r3, [r7, #32]
 800c250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c254:	d124      	bne.n	800c2a0 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800c256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c258:	623b      	str	r3, [r7, #32]
 800c25a:	e021      	b.n	800c2a0 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25e:	015b      	lsls	r3, r3, #5
 800c260:	4a3b      	ldr	r2, [pc, #236]	@ (800c350 <vNDRefreshCacheEntry+0x138>)
 800c262:	4413      	add	r3, r2
 800c264:	68b9      	ldr	r1, [r7, #8]
 800c266:	2210      	movs	r2, #16
 800c268:	4618      	mov	r0, r3
 800c26a:	f017 fc5c 	bl	8023b26 <memcmp>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d102      	bne.n	800c27a <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800c274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c276:	61fb      	str	r3, [r7, #28]
                break;
 800c278:	e018      	b.n	800c2ac <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800c27a:	4a35      	ldr	r2, [pc, #212]	@ (800c350 <vNDRefreshCacheEntry+0x138>)
 800c27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27e:	015b      	lsls	r3, r3, #5
 800c280:	4413      	add	r3, r2
 800c282:	331c      	adds	r3, #28
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	461a      	mov	r2, r3
 800c288:	8b7b      	ldrh	r3, [r7, #26]
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d908      	bls.n	800c2a0 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800c28e:	4a30      	ldr	r2, [pc, #192]	@ (800c350 <vNDRefreshCacheEntry+0x138>)
 800c290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c292:	015b      	lsls	r3, r3, #5
 800c294:	4413      	add	r3, r2
 800c296:	331c      	adds	r3, #28
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800c29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29e:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a8:	2b17      	cmp	r3, #23
 800c2aa:	ddc8      	ble.n	800c23e <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	da22      	bge.n	800c2f8 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800c2b2:	6a3b      	ldr	r3, [r7, #32]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	db02      	blt.n	800c2be <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
 800c2ba:	61fb      	str	r3, [r7, #28]
 800c2bc:	e01c      	b.n	800c2f8 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	461c      	mov	r4, r3
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	785b      	ldrb	r3, [r3, #1]
 800c2cc:	461d      	mov	r5, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	789b      	ldrb	r3, [r3, #2]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	78db      	ldrb	r3, [r3, #3]
 800c2d8:	4619      	mov	r1, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	791b      	ldrb	r3, [r3, #4]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	795b      	ldrb	r3, [r3, #5]
 800c2e4:	9303      	str	r3, [sp, #12]
 800c2e6:	9002      	str	r0, [sp, #8]
 800c2e8:	9101      	str	r1, [sp, #4]
 800c2ea:	9200      	str	r2, [sp, #0]
 800c2ec:	462b      	mov	r3, r5
 800c2ee:	4622      	mov	r2, r4
 800c2f0:	69f9      	ldr	r1, [r7, #28]
 800c2f2:	4818      	ldr	r0, [pc, #96]	@ (800c354 <vNDRefreshCacheEntry+0x13c>)
 800c2f4:	f016 fa66 	bl	80227c4 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	015b      	lsls	r3, r3, #5
 800c2fc:	4a14      	ldr	r2, [pc, #80]	@ (800c350 <vNDRefreshCacheEntry+0x138>)
 800c2fe:	4413      	add	r3, r2
 800c300:	68b9      	ldr	r1, [r7, #8]
 800c302:	2210      	movs	r2, #16
 800c304:	4618      	mov	r0, r3
 800c306:	f016 fc79 	bl	8022bfc <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	015b      	lsls	r3, r3, #5
 800c30e:	3310      	adds	r3, #16
 800c310:	4a0f      	ldr	r2, [pc, #60]	@ (800c350 <vNDRefreshCacheEntry+0x138>)
 800c312:	4413      	add	r3, r2
 800c314:	68f9      	ldr	r1, [r7, #12]
 800c316:	2206      	movs	r2, #6
 800c318:	4618      	mov	r0, r3
 800c31a:	f016 fc6f 	bl	8022bfc <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800c31e:	4a0c      	ldr	r2, [pc, #48]	@ (800c350 <vNDRefreshCacheEntry+0x138>)
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	015b      	lsls	r3, r3, #5
 800c324:	4413      	add	r3, r2
 800c326:	3318      	adds	r3, #24
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800c32c:	4a08      	ldr	r2, [pc, #32]	@ (800c350 <vNDRefreshCacheEntry+0x138>)
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	015b      	lsls	r3, r3, #5
 800c332:	4413      	add	r3, r2
 800c334:	331c      	adds	r3, #28
 800c336:	2296      	movs	r2, #150	@ 0x96
 800c338:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800c33a:	4a05      	ldr	r2, [pc, #20]	@ (800c350 <vNDRefreshCacheEntry+0x138>)
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	015b      	lsls	r3, r3, #5
 800c340:	4413      	add	r3, r2
 800c342:	331d      	adds	r3, #29
 800c344:	2201      	movs	r2, #1
 800c346:	701a      	strb	r2, [r3, #0]
    }
 800c348:	bf00      	nop
 800c34a:	3728      	adds	r7, #40	@ 0x28
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bdb0      	pop	{r4, r5, r7, pc}
 800c350:	20001228 	.word	0x20001228
 800c354:	08025a2c 	.word	0x08025a2c

0800c358 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c35e:	2300      	movs	r3, #0
 800c360:	60fb      	str	r3, [r7, #12]
 800c362:	e05f      	b.n	800c424 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800c364:	2300      	movs	r3, #0
 800c366:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800c368:	4a32      	ldr	r2, [pc, #200]	@ (800c434 <vNDAgeCache+0xdc>)
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	015b      	lsls	r3, r3, #5
 800c36e:	4413      	add	r3, r2
 800c370:	331c      	adds	r3, #28
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d052      	beq.n	800c41e <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800c378:	4a2e      	ldr	r2, [pc, #184]	@ (800c434 <vNDAgeCache+0xdc>)
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	015b      	lsls	r3, r3, #5
 800c37e:	4413      	add	r3, r2
 800c380:	331c      	adds	r3, #28
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	3b01      	subs	r3, #1
 800c386:	b2d9      	uxtb	r1, r3
 800c388:	4a2a      	ldr	r2, [pc, #168]	@ (800c434 <vNDAgeCache+0xdc>)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	015b      	lsls	r3, r3, #5
 800c38e:	4413      	add	r3, r2
 800c390:	331c      	adds	r3, #28
 800c392:	460a      	mov	r2, r1
 800c394:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800c396:	4a27      	ldr	r2, [pc, #156]	@ (800c434 <vNDAgeCache+0xdc>)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	015b      	lsls	r3, r3, #5
 800c39c:	4413      	add	r3, r2
 800c39e:	331c      	adds	r3, #28
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d109      	bne.n	800c3ba <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	015b      	lsls	r3, r3, #5
 800c3aa:	4a22      	ldr	r2, [pc, #136]	@ (800c434 <vNDAgeCache+0xdc>)
 800c3ac:	4413      	add	r3, r2
 800c3ae:	2220      	movs	r2, #32
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f016 fd2f 	bl	8022e16 <memset>
 800c3b8:	e031      	b.n	800c41e <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c3ba:	4a1e      	ldr	r2, [pc, #120]	@ (800c434 <vNDAgeCache+0xdc>)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	015b      	lsls	r3, r3, #5
 800c3c0:	4413      	add	r3, r2
 800c3c2:	331d      	adds	r3, #29
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d102      	bne.n	800c3d0 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	60bb      	str	r3, [r7, #8]
 800c3ce:	e009      	b.n	800c3e4 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800c3d0:	4a18      	ldr	r2, [pc, #96]	@ (800c434 <vNDAgeCache+0xdc>)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	015b      	lsls	r3, r3, #5
 800c3d6:	4413      	add	r3, r2
 800c3d8:	331c      	adds	r3, #28
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	2b03      	cmp	r3, #3
 800c3de:	d801      	bhi.n	800c3e4 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d019      	beq.n	800c41e <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c3ea:	2356      	movs	r3, #86	@ 0x56
 800c3ec:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f00b fad7 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 800c3f6:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00f      	beq.n	800c41e <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800c3fe:	4a0d      	ldr	r2, [pc, #52]	@ (800c434 <vNDAgeCache+0xdc>)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	015b      	lsls	r3, r3, #5
 800c404:	4413      	add	r3, r2
 800c406:	3318      	adds	r3, #24
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	015b      	lsls	r3, r3, #5
 800c412:	4a08      	ldr	r2, [pc, #32]	@ (800c434 <vNDAgeCache+0xdc>)
 800c414:	4413      	add	r3, r2
 800c416:	4619      	mov	r1, r3
 800c418:	6838      	ldr	r0, [r7, #0]
 800c41a:	f000 f8bb 	bl	800c594 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3301      	adds	r3, #1
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2b17      	cmp	r3, #23
 800c428:	dd9c      	ble.n	800c364 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800c42a:	bf00      	nop
 800c42c:	bf00      	nop
 800c42e:	3710      	adds	r7, #16
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	20001228 	.word	0x20001228

0800c438 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800c438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c43a:	b08d      	sub	sp, #52	@ 0x34
 800c43c:	af06      	add	r7, sp, #24
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800c444:	2300      	movs	r3, #0
 800c446:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c448:	2300      	movs	r3, #0
 800c44a:	617b      	str	r3, [r7, #20]
 800c44c:	e04a      	b.n	800c4e4 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c44e:	4a30      	ldr	r2, [pc, #192]	@ (800c510 <prvNDCacheLookup+0xd8>)
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	015b      	lsls	r3, r3, #5
 800c454:	4413      	add	r3, r2
 800c456:	331d      	adds	r3, #29
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d03f      	beq.n	800c4de <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	015b      	lsls	r3, r3, #5
 800c462:	4a2b      	ldr	r2, [pc, #172]	@ (800c510 <prvNDCacheLookup+0xd8>)
 800c464:	4413      	add	r3, r2
 800c466:	68f9      	ldr	r1, [r7, #12]
 800c468:	2210      	movs	r2, #16
 800c46a:	4618      	mov	r0, r3
 800c46c:	f017 fb5b 	bl	8023b26 <memcmp>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d133      	bne.n	800c4de <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c476:	68b8      	ldr	r0, [r7, #8]
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	015b      	lsls	r3, r3, #5
 800c47c:	3310      	adds	r3, #16
 800c47e:	4a24      	ldr	r2, [pc, #144]	@ (800c510 <prvNDCacheLookup+0xd8>)
 800c480:	4413      	add	r3, r2
 800c482:	2206      	movs	r2, #6
 800c484:	4619      	mov	r1, r3
 800c486:	f016 fbb9 	bl	8022bfc <memcpy>
                eReturn = eARPCacheHit;
 800c48a:	2301      	movs	r3, #1
 800c48c:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d007      	beq.n	800c4a4 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800c494:	4a1e      	ldr	r2, [pc, #120]	@ (800c510 <prvNDCacheLookup+0xd8>)
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	015b      	lsls	r3, r3, #5
 800c49a:	4413      	add	r3, r2
 800c49c:	3318      	adds	r3, #24
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	461e      	mov	r6, r3
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	785b      	ldrb	r3, [r3, #1]
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	789b      	ldrb	r3, [r3, #2]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	78db      	ldrb	r3, [r3, #3]
 800c4bc:	461c      	mov	r4, r3
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	791b      	ldrb	r3, [r3, #4]
 800c4c2:	461d      	mov	r5, r3
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	795b      	ldrb	r3, [r3, #5]
 800c4c8:	9304      	str	r3, [sp, #16]
 800c4ca:	9503      	str	r5, [sp, #12]
 800c4cc:	9402      	str	r4, [sp, #8]
 800c4ce:	9001      	str	r0, [sp, #4]
 800c4d0:	9100      	str	r1, [sp, #0]
 800c4d2:	4633      	mov	r3, r6
 800c4d4:	6979      	ldr	r1, [r7, #20]
 800c4d6:	480f      	ldr	r0, [pc, #60]	@ (800c514 <prvNDCacheLookup+0xdc>)
 800c4d8:	f016 f974 	bl	80227c4 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800c4dc:	e005      	b.n	800c4ea <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	617b      	str	r3, [r7, #20]
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	2b17      	cmp	r3, #23
 800c4e8:	ddb1      	ble.n	800c44e <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800c4ea:	7cfb      	ldrb	r3, [r7, #19]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10a      	bne.n	800c506 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	4808      	ldr	r0, [pc, #32]	@ (800c518 <prvNDCacheLookup+0xe0>)
 800c4f6:	f016 f965 	bl	80227c4 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d002      	beq.n	800c506 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800c506:	7cfb      	ldrb	r3, [r7, #19]
    }
 800c508:	4618      	mov	r0, r3
 800c50a:	371c      	adds	r7, #28
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c510:	20001228 	.word	0x20001228
 800c514:	08025a90 	.word	0x08025a90
 800c518:	08025ad0 	.word	0x08025ad0

0800c51c <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c52a:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c530:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	3316      	adds	r3, #22
 800c53c:	2210      	movs	r2, #16
 800c53e:	4619      	mov	r1, r3
 800c540:	f016 fb5c 	bl	8022bfc <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	f103 0016 	add.w	r0, r3, #22
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	3338      	adds	r3, #56	@ 0x38
 800c54e:	2210      	movs	r2, #16
 800c550:	4619      	mov	r1, r3
 800c552:	f016 fb53 	bl	8022bfc <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	b29b      	uxth	r3, r3
 800c55a:	021b      	lsls	r3, r3, #8
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	0a1b      	lsrs	r3, r3, #8
 800c562:	b29b      	uxth	r3, r3
 800c564:	4313      	orrs	r3, r2
 800c566:	b29a      	uxth	r2, r3
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800c584:	2100      	movs	r1, #0
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7fd fe46 	bl	800a218 <vReturnEthernetFrame>
    }
 800c58c:	bf00      	nop
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800c594:	b5b0      	push	{r4, r5, r7, lr}
 800c596:	b090      	sub	sp, #64	@ 0x40
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5a2:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800c5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 80c1 	beq.w	800c73a <vNDSendNeighbourSolicitation+0x1a6>
 800c5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ba:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c5be:	f003 0304 	and.w	r3, r3, #4
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f000 80b8 	beq.w	800c73a <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c5ca:	2356      	movs	r3, #86	@ 0x56
 800c5cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800c5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d909      	bls.n	800c5ec <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800c5d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5da:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c5dc:	f7fe f9ce 	bl	800a97c <pxDuplicateNetworkBufferWithDescriptor>
 800c5e0:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c5e2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c5e4:	f00b fa46 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800c5ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f000 80a3 	beq.w	800c73a <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800c5f4:	2320      	movs	r3, #32
 800c5f6:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800c5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5fc:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c600:	3336      	adds	r3, #54	@ 0x36
 800c602:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800c604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c608:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800c60a:	2333      	movs	r3, #51	@ 0x33
 800c60c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800c60e:	2333      	movs	r3, #51	@ 0x33
 800c610:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800c612:	23ff      	movs	r3, #255	@ 0xff
 800c614:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	7b5b      	ldrb	r3, [r3, #13]
 800c61a:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	7b9b      	ldrb	r3, [r3, #14]
 800c620:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	7bdb      	ldrb	r3, [r3, #15]
 800c626:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62a:	3306      	adds	r3, #6
 800c62c:	461a      	mov	r2, r3
 800c62e:	f107 0308 	add.w	r3, r7, #8
 800c632:	6818      	ldr	r0, [r3, #0]
 800c634:	6010      	str	r0, [r2, #0]
 800c636:	889b      	ldrh	r3, [r3, #4]
 800c638:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c63a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c63e:	33e8      	adds	r3, #232	@ 0xe8
 800c640:	2206      	movs	r2, #6
 800c642:	4619      	mov	r1, r3
 800c644:	f016 fada 	bl	8022bfc <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800c648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64a:	2200      	movs	r2, #0
 800c64c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c650:	731a      	strb	r2, [r3, #12]
 800c652:	2200      	movs	r2, #0
 800c654:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c658:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800c65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65c:	2260      	movs	r2, #96	@ 0x60
 800c65e:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800c660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c662:	2200      	movs	r2, #0
 800c664:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800c666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c668:	2200      	movs	r2, #0
 800c66a:	741a      	strb	r2, [r3, #16]
 800c66c:	2200      	movs	r2, #0
 800c66e:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800c670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c672:	b29b      	uxth	r3, r3
 800c674:	021b      	lsls	r3, r3, #8
 800c676:	b29a      	uxth	r2, r3
 800c678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c67a:	0a1b      	lsrs	r3, r3, #8
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	4313      	orrs	r3, r2
 800c680:	b29a      	uxth	r2, r3
 800c682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c684:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c688:	223a      	movs	r2, #58	@ 0x3a
 800c68a:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800c68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68e:	22ff      	movs	r2, #255	@ 0xff
 800c690:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c694:	f103 0016 	add.w	r0, r3, #22
 800c698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c69a:	3338      	adds	r3, #56	@ 0x38
 800c69c:	2210      	movs	r2, #16
 800c69e:	4619      	mov	r1, r3
 800c6a0:	f016 faac 	bl	8022bfc <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800c6a4:	f107 0310 	add.w	r3, r7, #16
 800c6a8:	2210      	movs	r2, #16
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f016 fbb2 	bl	8022e16 <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800c6b2:	23ff      	movs	r3, #255	@ 0xff
 800c6b4:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800c6be:	23ff      	movs	r3, #255	@ 0xff
 800c6c0:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	7b5b      	ldrb	r3, [r3, #13]
 800c6c6:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	7b9b      	ldrb	r3, [r3, #14]
 800c6cc:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	7bdb      	ldrb	r3, [r3, #15]
 800c6d2:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d6:	3326      	adds	r3, #38	@ 0x26
 800c6d8:	461d      	mov	r5, r3
 800c6da:	f107 0410 	add.w	r4, r7, #16
 800c6de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6e0:	6028      	str	r0, [r5, #0]
 800c6e2:	6069      	str	r1, [r5, #4]
 800c6e4:	60aa      	str	r2, [r5, #8]
 800c6e6:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800c6e8:	2220      	movs	r2, #32
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	6a38      	ldr	r0, [r7, #32]
 800c6ee:	f016 fb92 	bl	8022e16 <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	2287      	movs	r2, #135	@ 0x87
 800c6f6:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	3308      	adds	r3, #8
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	2210      	movs	r2, #16
 800c700:	4618      	mov	r0, r3
 800c702:	f016 fa7b 	bl	8022bfc <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	2201      	movs	r2, #1
 800c70a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800c70c:	6a3b      	ldr	r3, [r7, #32]
 800c70e:	2201      	movs	r2, #1
 800c710:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	f103 001a 	add.w	r0, r3, #26
 800c718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c71a:	33e8      	adds	r3, #232	@ 0xe8
 800c71c:	2206      	movs	r2, #6
 800c71e:	4619      	mov	r1, r3
 800c720:	f016 fa6c 	bl	8022bfc <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800c724:	6a3b      	ldr	r3, [r7, #32]
 800c726:	2200      	movs	r2, #0
 800c728:	709a      	strb	r2, [r3, #2]
 800c72a:	2200      	movs	r2, #0
 800c72c:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c72e:	2101      	movs	r1, #1
 800c730:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c732:	f7fd fd71 	bl	800a218 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800c736:	2301      	movs	r3, #1
 800c738:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800c73a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d005      	beq.n	800c74c <vNDSendNeighbourSolicitation+0x1b8>
 800c740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c742:	2b00      	cmp	r3, #0
 800c744:	d102      	bne.n	800c74c <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c746:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c748:	f00b f994 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800c74c:	bf00      	nop
 800c74e:	3740      	adds	r7, #64	@ 0x40
 800c750:	46bd      	mov	sp, r7
 800c752:	bdb0      	pop	{r4, r5, r7, pc}

0800c754 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	2b04      	cmp	r3, #4
 800c762:	dc29      	bgt.n	800c7b8 <pcMessageType+0x64>
 800c764:	2b00      	cmp	r3, #0
 800c766:	dc19      	bgt.n	800c79c <pcMessageType+0x48>
 800c768:	e049      	b.n	800c7fe <pcMessageType+0xaa>
 800c76a:	3b80      	subs	r3, #128	@ 0x80
 800c76c:	2b08      	cmp	r3, #8
 800c76e:	d846      	bhi.n	800c7fe <pcMessageType+0xaa>
 800c770:	a201      	add	r2, pc, #4	@ (adr r2, 800c778 <pcMessageType+0x24>)
 800c772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c776:	bf00      	nop
 800c778:	0800c7db 	.word	0x0800c7db
 800c77c:	0800c7e1 	.word	0x0800c7e1
 800c780:	0800c7ff 	.word	0x0800c7ff
 800c784:	0800c7ff 	.word	0x0800c7ff
 800c788:	0800c7ff 	.word	0x0800c7ff
 800c78c:	0800c7e7 	.word	0x0800c7e7
 800c790:	0800c7ed 	.word	0x0800c7ed
 800c794:	0800c7f3 	.word	0x0800c7f3
 800c798:	0800c7f9 	.word	0x0800c7f9
 800c79c:	3b01      	subs	r3, #1
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d82d      	bhi.n	800c7fe <pcMessageType+0xaa>
 800c7a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c7a8 <pcMessageType+0x54>)
 800c7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a8:	0800c7c3 	.word	0x0800c7c3
 800c7ac:	0800c7c9 	.word	0x0800c7c9
 800c7b0:	0800c7cf 	.word	0x0800c7cf
 800c7b4:	0800c7d5 	.word	0x0800c7d5
 800c7b8:	2b88      	cmp	r3, #136	@ 0x88
 800c7ba:	dc20      	bgt.n	800c7fe <pcMessageType+0xaa>
 800c7bc:	2b80      	cmp	r3, #128	@ 0x80
 800c7be:	dad4      	bge.n	800c76a <pcMessageType+0x16>
 800c7c0:	e01d      	b.n	800c7fe <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800c7c2:	4b14      	ldr	r3, [pc, #80]	@ (800c814 <pcMessageType+0xc0>)
 800c7c4:	60fb      	str	r3, [r7, #12]
                    break;
 800c7c6:	e01d      	b.n	800c804 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800c7c8:	4b13      	ldr	r3, [pc, #76]	@ (800c818 <pcMessageType+0xc4>)
 800c7ca:	60fb      	str	r3, [r7, #12]
                    break;
 800c7cc:	e01a      	b.n	800c804 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800c7ce:	4b13      	ldr	r3, [pc, #76]	@ (800c81c <pcMessageType+0xc8>)
 800c7d0:	60fb      	str	r3, [r7, #12]
                    break;
 800c7d2:	e017      	b.n	800c804 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800c7d4:	4b12      	ldr	r3, [pc, #72]	@ (800c820 <pcMessageType+0xcc>)
 800c7d6:	60fb      	str	r3, [r7, #12]
                    break;
 800c7d8:	e014      	b.n	800c804 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800c7da:	4b12      	ldr	r3, [pc, #72]	@ (800c824 <pcMessageType+0xd0>)
 800c7dc:	60fb      	str	r3, [r7, #12]
                    break;
 800c7de:	e011      	b.n	800c804 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800c7e0:	4b11      	ldr	r3, [pc, #68]	@ (800c828 <pcMessageType+0xd4>)
 800c7e2:	60fb      	str	r3, [r7, #12]
                    break;
 800c7e4:	e00e      	b.n	800c804 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800c7e6:	4b11      	ldr	r3, [pc, #68]	@ (800c82c <pcMessageType+0xd8>)
 800c7e8:	60fb      	str	r3, [r7, #12]
                    break;
 800c7ea:	e00b      	b.n	800c804 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800c7ec:	4b10      	ldr	r3, [pc, #64]	@ (800c830 <pcMessageType+0xdc>)
 800c7ee:	60fb      	str	r3, [r7, #12]
                    break;
 800c7f0:	e008      	b.n	800c804 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800c7f2:	4b10      	ldr	r3, [pc, #64]	@ (800c834 <pcMessageType+0xe0>)
 800c7f4:	60fb      	str	r3, [r7, #12]
                    break;
 800c7f6:	e005      	b.n	800c804 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800c7f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c838 <pcMessageType+0xe4>)
 800c7fa:	60fb      	str	r3, [r7, #12]
                    break;
 800c7fc:	e002      	b.n	800c804 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800c7fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c83c <pcMessageType+0xe8>)
 800c800:	60fb      	str	r3, [r7, #12]
                    break;
 800c802:	bf00      	nop
            }

            return pcReturn;
 800c804:	68fb      	ldr	r3, [r7, #12]
        }
 800c806:	4618      	mov	r0, r3
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	08025b98 	.word	0x08025b98
 800c818:	08025bac 	.word	0x08025bac
 800c81c:	08025bbc 	.word	0x08025bbc
 800c820:	08025bcc 	.word	0x08025bcc
 800c824:	08025be0 	.word	0x08025be0
 800c828:	08025bf0 	.word	0x08025bf0
 800c82c:	08025bfc 	.word	0x08025bfc
 800c830:	08025c08 	.word	0x08025c08
 800c834:	08025c14 	.word	0x08025c14
 800c838:	08025c24 	.word	0x08025c24
 800c83c:	08025c34 	.word	0x08025c34

0800c840 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800c840:	b580      	push	{r7, lr}
 800c842:	b088      	sub	sp, #32
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800c848:	4b19      	ldr	r3, [pc, #100]	@ (800c8b0 <prvCheckWaitingBuffer+0x70>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c84e:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	330e      	adds	r3, #14
 800c854:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	3308      	adds	r3, #8
 800c85c:	2210      	movs	r2, #16
 800c85e:	4619      	mov	r1, r3
 800c860:	f017 f961 	bl	8023b26 <memcmp>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d11d      	bne.n	800c8a6 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800c86a:	2300      	movs	r3, #0
 800c86c:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800c86e:	4811      	ldr	r0, [pc, #68]	@ (800c8b4 <prvCheckWaitingBuffer+0x74>)
 800c870:	f015 ffa8 	bl	80227c4 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800c874:	2301      	movs	r3, #1
 800c876:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800c878:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b0 <prvCheckWaitingBuffer+0x70>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800c87e:	f107 030c 	add.w	r3, r7, #12
 800c882:	6979      	ldr	r1, [r7, #20]
 800c884:	4618      	mov	r0, r3
 800c886:	f7fd fa13 	bl	8009cb0 <xSendEventStructToIPTask>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d004      	beq.n	800c89a <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800c890:	4b07      	ldr	r3, [pc, #28]	@ (800c8b0 <prvCheckWaitingBuffer+0x70>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4618      	mov	r0, r3
 800c896:	f00b f8ed 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800c89a:	4b05      	ldr	r3, [pc, #20]	@ (800c8b0 <prvCheckWaitingBuffer+0x70>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	f7fd fffb 	bl	800a89c <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800c8a6:	bf00      	nop
 800c8a8:	3720      	adds	r7, #32
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	2000119c 	.word	0x2000119c
 800c8b4:	08025c44 	.word	0x08025c44

0800c8b8 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	b09e      	sub	sp, #120	@ 0x78
 800c8be:	af02      	add	r7, sp, #8
 800c8c0:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c8c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8ca:	3336      	adds	r3, #54	@ 0x36
 800c8cc:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8d2:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800c8d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	2b80      	cmp	r3, #128	@ 0x80
 800c8da:	d01e      	beq.n	800c91a <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800c8dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	4698      	mov	r8, r3
 800c8e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7ff ff34 	bl	800c754 <pcMessageType>
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8f0:	f103 0516 	add.w	r5, r3, #22
 800c8f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8f6:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800c8fa:	f107 030c 	add.w	r3, r7, #12
 800c8fe:	2228      	movs	r2, #40	@ 0x28
 800c900:	4619      	mov	r1, r3
 800c902:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c904:	f001 fd5c 	bl	800e3c0 <pcEndpointName>
 800c908:	4603      	mov	r3, r0
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	9400      	str	r4, [sp, #0]
 800c90e:	462b      	mov	r3, r5
 800c910:	4632      	mov	r2, r6
 800c912:	4641      	mov	r1, r8
 800c914:	48a7      	ldr	r0, [pc, #668]	@ (800cbb4 <prvProcessICMPMessage_IPv6+0x2fc>)
 800c916:	f015 ff55 	bl	80227c4 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800c91a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c91c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c920:	f003 0304 	and.w	r3, r3, #4
 800c924:	b2db      	uxtb	r3, r3
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 813e 	beq.w	800cba8 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c92c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2b04      	cmp	r3, #4
 800c932:	dc1d      	bgt.n	800c970 <prvProcessICMPMessage_IPv6+0xb8>
 800c934:	2b00      	cmp	r3, #0
 800c936:	f300 8130 	bgt.w	800cb9a <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800c93a:	e130      	b.n	800cb9e <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c93c:	3b80      	subs	r3, #128	@ 0x80
 800c93e:	2b08      	cmp	r3, #8
 800c940:	f200 812d 	bhi.w	800cb9e <prvProcessICMPMessage_IPv6+0x2e6>
 800c944:	a201      	add	r2, pc, #4	@ (adr r2, 800c94c <prvProcessICMPMessage_IPv6+0x94>)
 800c946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94a:	bf00      	nop
 800c94c:	0800c97d 	.word	0x0800c97d
 800c950:	0800c9c5 	.word	0x0800c9c5
 800c954:	0800cb9f 	.word	0x0800cb9f
 800c958:	0800cb9f 	.word	0x0800cb9f
 800c95c:	0800cb9f 	.word	0x0800cb9f
 800c960:	0800cb9f 	.word	0x0800cb9f
 800c964:	0800cb93 	.word	0x0800cb93
 800c968:	0800ca3b 	.word	0x0800ca3b
 800c96c:	0800cb4b 	.word	0x0800cb4b
 800c970:	2b88      	cmp	r3, #136	@ 0x88
 800c972:	f300 8114 	bgt.w	800cb9e <prvProcessICMPMessage_IPv6+0x2e6>
 800c976:	2b80      	cmp	r3, #128	@ 0x80
 800c978:	dae0      	bge.n	800c93c <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800c97a:	e110      	b.n	800cb9e <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800c97c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c97e:	8a5b      	ldrh	r3, [r3, #18]
 800c980:	b29b      	uxth	r3, r3
 800c982:	021b      	lsls	r3, r3, #8
 800c984:	b21a      	sxth	r2, r3
 800c986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c988:	8a5b      	ldrh	r3, [r3, #18]
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	0a1b      	lsrs	r3, r3, #8
 800c98e:	b29b      	uxth	r3, r3
 800c990:	b21b      	sxth	r3, r3
 800c992:	4313      	orrs	r3, r2
 800c994:	b21b      	sxth	r3, r3
 800c996:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800c998:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c99a:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c99e:	3336      	adds	r3, #54	@ 0x36
 800c9a0:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d903      	bls.n	800c9b4 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800c9ac:	4882      	ldr	r0, [pc, #520]	@ (800cbb8 <prvProcessICMPMessage_IPv6+0x300>)
 800c9ae:	f015 ff09 	bl	80227c4 <lUDPLoggingPrintf>
                           break;
 800c9b2:	e0f9      	b.n	800cba8 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800c9b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9b6:	2281      	movs	r2, #129	@ 0x81
 800c9b8:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800c9ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7ff fdad 	bl	800c51c <prvReturnICMP_IPv6>
                   break;
 800c9c2:	e0f1      	b.n	800cba8 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800c9ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9cc:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800c9ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9d0:	8a5b      	ldrh	r3, [r3, #18]
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	021b      	lsls	r3, r3, #8
 800c9d6:	b21a      	sxth	r2, r3
 800c9d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9da:	8a5b      	ldrh	r3, [r3, #18]
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	0a1b      	lsrs	r3, r3, #8
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	b21b      	sxth	r3, r3
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	b21b      	sxth	r3, r3
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800c9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ee:	3b08      	subs	r3, #8
 800c9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800c9f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9f4:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800c9f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9f8:	3308      	adds	r3, #8
 800c9fa:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca00:	e00d      	b.n	800ca1e <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800ca02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	2b78      	cmp	r3, #120	@ 0x78
 800ca08:	d003      	beq.n	800ca12 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800ca0a:	2302      	movs	r3, #2
 800ca0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800ca10:	e009      	b.n	800ca26 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800ca12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca14:	3301      	adds	r3, #1
 800ca16:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800ca18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca1e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ca20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d3ed      	bcc.n	800ca02 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800ca26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca28:	889b      	ldrh	r3, [r3, #4]
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ca30:	4611      	mov	r1, r2
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7f5 f89e 	bl	8001b74 <vApplicationPingReplyHook>
                           break;
 800ca38:	e0b6      	b.n	800cba8 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800ca3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca3c:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca44:	3308      	adds	r3, #8
 800ca46:	4619      	mov	r1, r3
 800ca48:	4610      	mov	r0, r2
 800ca4a:	f001 f9cd 	bl	800dde8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800ca4e:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800ca50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d002      	beq.n	800ca5c <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800ca56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca58:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca5a:	e005      	b.n	800ca68 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800ca5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca5e:	3308      	adds	r3, #8
 800ca60:	4619      	mov	r1, r3
 800ca62:	4856      	ldr	r0, [pc, #344]	@ (800cbbc <prvProcessICMPMessage_IPv6+0x304>)
 800ca64:	f015 feae 	bl	80227c4 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800ca68:	2320      	movs	r3, #32
 800ca6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800ca6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca6e:	3336      	adds	r3, #54	@ 0x36
 800ca70:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d903      	bls.n	800ca84 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800ca7c:	484e      	ldr	r0, [pc, #312]	@ (800cbb8 <prvProcessICMPMessage_IPv6+0x300>)
 800ca7e:	f015 fea1 	bl	80227c4 <lUDPLoggingPrintf>
                           break;
 800ca82:	e091      	b.n	800cba8 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ca84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca86:	f103 0008 	add.w	r0, r3, #8
 800ca8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca8c:	3338      	adds	r3, #56	@ 0x38
 800ca8e:	2210      	movs	r2, #16
 800ca90:	4619      	mov	r1, r3
 800ca92:	f017 f848 	bl	8023b26 <memcmp>
 800ca96:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800ca98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca9a:	f103 0108 	add.w	r1, r3, #8
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caa2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800caa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d101      	bne.n	800cab0 <prvProcessICMPMessage_IPv6+0x1f8>
 800caac:	4b44      	ldr	r3, [pc, #272]	@ (800cbc0 <prvProcessICMPMessage_IPv6+0x308>)
 800caae:	e000      	b.n	800cab2 <prvProcessICMPMessage_IPv6+0x1fa>
 800cab0:	4b44      	ldr	r3, [pc, #272]	@ (800cbc4 <prvProcessICMPMessage_IPv6+0x30c>)
 800cab2:	4845      	ldr	r0, [pc, #276]	@ (800cbc8 <prvProcessICMPMessage_IPv6+0x310>)
 800cab4:	f015 fe86 	bl	80227c4 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800cab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d171      	bne.n	800cba2 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800cabe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cac0:	2288      	movs	r2, #136	@ 0x88
 800cac2:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800cac4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cac6:	2200      	movs	r2, #0
 800cac8:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800caca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cacc:	2200      	movs	r2, #0
 800cace:	711a      	strb	r2, [r3, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	715a      	strb	r2, [r3, #5]
 800cad4:	2200      	movs	r2, #0
 800cad6:	719a      	strb	r2, [r3, #6]
 800cad8:	2200      	movs	r2, #0
 800cada:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800cade:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800cae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	061a      	lsls	r2, r3, #24
 800cae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	021b      	lsls	r3, r3, #8
 800caec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800caf0:	431a      	orrs	r2, r3
 800caf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	0a1b      	lsrs	r3, r3, #8
 800caf8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cafc:	431a      	orrs	r2, r3
 800cafe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	0e1b      	lsrs	r3, r3, #24
 800cb04:	431a      	orrs	r2, r3
 800cb06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb08:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800cb0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb0c:	2202      	movs	r2, #2
 800cb0e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800cb10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb12:	2201      	movs	r2, #1
 800cb14:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800cb16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb18:	f103 001a 	add.w	r0, r3, #26
 800cb1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb1e:	33e8      	adds	r3, #232	@ 0xe8
 800cb20:	2206      	movs	r2, #6
 800cb22:	4619      	mov	r1, r3
 800cb24:	f016 f86a 	bl	8022bfc <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800cb28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb2a:	22ff      	movs	r2, #255	@ 0xff
 800cb2c:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800cb2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb30:	f103 0008 	add.w	r0, r3, #8
 800cb34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb36:	3338      	adds	r3, #56	@ 0x38
 800cb38:	2210      	movs	r2, #16
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	f016 f85e 	bl	8022bfc <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800cb40:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7ff fcea 	bl	800c51c <prvReturnICMP_IPv6>
                   break;
 800cb48:	e02b      	b.n	800cba2 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800cb4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb4c:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800cb50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb52:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800cb54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cb56:	4619      	mov	r1, r3
 800cb58:	f7ff fb5e 	bl	800c218 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800cb5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb5e:	3308      	adds	r3, #8
 800cb60:	4619      	mov	r1, r3
 800cb62:	481a      	ldr	r0, [pc, #104]	@ (800cbcc <prvProcessICMPMessage_IPv6+0x314>)
 800cb64:	f015 fe2e 	bl	80227c4 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 fa89 	bl	800d080 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800cb6e:	4b18      	ldr	r3, [pc, #96]	@ (800cbd0 <prvProcessICMPMessage_IPv6+0x318>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d017      	beq.n	800cba6 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800cb76:	4b16      	ldr	r3, [pc, #88]	@ (800cbd0 <prvProcessICMPMessage_IPv6+0x318>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fd fc4c 	bl	800a418 <uxIPHeaderSizePacket>
 800cb80:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800cb82:	2b28      	cmp	r3, #40	@ 0x28
 800cb84:	d10f      	bne.n	800cba6 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800cb86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb88:	3308      	adds	r3, #8
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7ff fe58 	bl	800c840 <prvCheckWaitingBuffer>
                    break;
 800cb90:	e009      	b.n	800cba6 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fb9a 	bl	800d2cc <vReceiveRA>
                            break;
 800cb98:	e006      	b.n	800cba8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cb9a:	bf00      	nop
 800cb9c:	e004      	b.n	800cba8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cb9e:	bf00      	nop
 800cba0:	e002      	b.n	800cba8 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800cba2:	bf00      	nop
 800cba4:	e000      	b.n	800cba8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cba6:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800cba8:	2300      	movs	r3, #0
    }
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3770      	adds	r7, #112	@ 0x70
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb4:	08025c54 	.word	0x08025c54
 800cbb8:	08025c8c 	.word	0x08025c8c
 800cbbc:	08025c98 	.word	0x08025c98
 800cbc0:	08025cc8 	.word	0x08025cc8
 800cbc4:	08025cd0 	.word	0x08025cd0
 800cbc8:	08025cd8 	.word	0x08025cd8
 800cbcc:	08025cfc 	.word	0x08025cfc
 800cbd0:	2000119c 	.word	0x2000119c

0800cbd4 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800cbd4:	b5b0      	push	{r4, r5, r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800cbdc:	2356      	movs	r3, #86	@ 0x56
 800cbde:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	69f8      	ldr	r0, [r7, #28]
 800cbe4:	f00a fede 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 800cbe8:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 80b1 	beq.w	800cd54 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	3314      	adds	r3, #20
 800cbf6:	2210      	movs	r2, #16
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f016 f90b 	bl	8022e16 <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cc0c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d104      	bne.n	800cc1e <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800cc14:	f240 419e 	movw	r1, #1182	@ 0x49e
 800cc18:	4850      	ldr	r0, [pc, #320]	@ (800cd5c <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800cc1a:	f7f4 fef5 	bl	8001a08 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc22:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	3336      	adds	r3, #54	@ 0x36
 800cc28:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	4a4c      	ldr	r2, [pc, #304]	@ (800cd60 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800cc2e:	6810      	ldr	r0, [r2, #0]
 800cc30:	6018      	str	r0, [r3, #0]
 800cc32:	8892      	ldrh	r2, [r2, #4]
 800cc34:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	1d98      	adds	r0, r3, #6
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	33e8      	adds	r3, #232	@ 0xe8
 800cc3e:	2206      	movs	r2, #6
 800cc40:	4619      	mov	r1, r3
 800cc42:	f015 ffdb 	bl	8022bfc <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800cc4e:	731a      	strb	r2, [r3, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800cc56:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	2260      	movs	r2, #96	@ 0x60
 800cc5c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	2200      	movs	r2, #0
 800cc62:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	2200      	movs	r2, #0
 800cc68:	741a      	strb	r2, [r3, #16]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	2200      	movs	r2, #0
 800cc72:	749a      	strb	r2, [r3, #18]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f042 0220 	orr.w	r2, r2, #32
 800cc7a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	223a      	movs	r2, #58	@ 0x3a
 800cc80:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	22ff      	movs	r2, #255	@ 0xff
 800cc86:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	f103 0016 	add.w	r0, r3, #22
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3338      	adds	r3, #56	@ 0x38
 800cc92:	2210      	movs	r2, #16
 800cc94:	4619      	mov	r1, r3
 800cc96:	f015 ffb1 	bl	8022bfc <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	3326      	adds	r3, #38	@ 0x26
 800cc9e:	4a31      	ldr	r2, [pc, #196]	@ (800cd64 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800cca0:	461c      	mov	r4, r3
 800cca2:	4615      	mov	r5, r2
 800cca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cca6:	6020      	str	r0, [r4, #0]
 800cca8:	6061      	str	r1, [r4, #4]
 800ccaa:	60a2      	str	r2, [r4, #8]
 800ccac:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800ccae:	2320      	movs	r3, #32
 800ccb0:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2288      	movs	r2, #136	@ 0x88
 800ccb6:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	711a      	strb	r2, [r3, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	715a      	strb	r2, [r3, #5]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	719a      	strb	r2, [r3, #6]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ccd2:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	061a      	lsls	r2, r3, #24
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	021b      	lsls	r3, r3, #8
 800cce0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cce4:	431a      	orrs	r2, r3
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	0a1b      	lsrs	r3, r3, #8
 800ccec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ccf0:	431a      	orrs	r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	0e1b      	lsrs	r3, r3, #24
 800ccf8:	431a      	orrs	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2202      	movs	r2, #2
 800cd02:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2201      	movs	r2, #1
 800cd08:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f103 001a 	add.w	r0, r3, #26
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	33e8      	adds	r3, #232	@ 0xe8
 800cd14:	2206      	movs	r2, #6
 800cd16:	4619      	mov	r1, r3
 800cd18:	f015 ff70 	bl	8022bfc <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	22ff      	movs	r2, #255	@ 0xff
 800cd20:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f103 0008 	add.w	r0, r3, #8
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	3338      	adds	r3, #56	@ 0x38
 800cd2c:	2210      	movs	r2, #16
 800cd2e:	4619      	mov	r1, r3
 800cd30:	f015 ff64 	bl	8022bfc <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2200      	movs	r2, #0
 800cd42:	709a      	strb	r2, [r3, #2]
 800cd44:	2200      	movs	r2, #0
 800cd46:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	69b9      	ldr	r1, [r7, #24]
 800cd50:	6978      	ldr	r0, [r7, #20]
 800cd52:	4798      	blx	r3
        }
    }
 800cd54:	bf00      	nop
 800cd56:	3720      	adds	r7, #32
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd5c:	08025d14 	.word	0x08025d14
 800cd60:	08027f94 	.word	0x08027f94
 800cd64:	08027f84 	.word	0x08027f84

0800cd68 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b090      	sub	sp, #64	@ 0x40
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	60b9      	str	r1, [r7, #8]
 800cd72:	607a      	str	r2, [r7, #4]
 800cd74:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800cd76:	2301      	movs	r3, #1
 800cd78:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d017      	beq.n	800cdb0 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800cd80:	2300      	movs	r3, #0
 800cd82:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd84:	e010      	b.n	800cda8 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800cd86:	f107 0214 	add.w	r2, r7, #20
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7f4 ff03 	bl	8001b9c <xApplicationGetRandomNumber>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d102      	bne.n	800cda2 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800cda0:	e00d      	b.n	800cdbe <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800cda2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda4:	3301      	adds	r3, #1
 800cda6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cda8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdaa:	2b03      	cmp	r3, #3
 800cdac:	ddeb      	ble.n	800cd86 <FreeRTOS_CreateIPv6Address+0x1e>
 800cdae:	e006      	b.n	800cdbe <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800cdb0:	f107 0314 	add.w	r3, r7, #20
 800cdb4:	2210      	movs	r2, #16
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f016 f82c 	bl	8022e16 <memset>
        }

        if( xResult == pdPASS )
 800cdbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d167      	bne.n	800ce94 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d004      	beq.n	800cdd4 <FreeRTOS_CreateIPv6Address+0x6c>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b80      	cmp	r3, #128	@ 0x80
 800cdce:	d801      	bhi.n	800cdd4 <FreeRTOS_CreateIPv6Address+0x6c>
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e000      	b.n	800cdd6 <FreeRTOS_CreateIPv6Address+0x6e>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d104      	bne.n	800cde4 <FreeRTOS_CreateIPv6Address+0x7c>
 800cdda:	f240 5105 	movw	r1, #1285	@ 0x505
 800cdde:	4830      	ldr	r0, [pc, #192]	@ (800cea0 <FreeRTOS_CreateIPv6Address+0x138>)
 800cde0:	f7f4 fe12 	bl	8001a08 <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b07      	cmp	r3, #7
 800cde8:	d907      	bls.n	800cdfa <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	68b9      	ldr	r1, [r7, #8]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	3307      	adds	r3, #7
 800cdf2:	08db      	lsrs	r3, r3, #3
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	f015 ff01 	bl	8022bfc <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800cdfa:	f107 0314 	add.w	r3, r7, #20
 800cdfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	08db      	lsrs	r3, r3, #3
 800ce04:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f003 0307 	and.w	r3, r3, #7
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d034      	beq.n	800ce7a <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f003 0307 	and.w	r3, r3, #7
 800ce16:	f1c3 0308 	rsb	r3, r3, #8
 800ce1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce20:	fa02 f303 	lsl.w	r3, r2, r3
 800ce24:	3b01      	subs	r3, #1
 800ce26:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800ce28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	43db      	mvns	r3, r3
 800ce2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce36:	4413      	add	r3, r2
 800ce38:	781a      	ldrb	r2, [r3, #0]
 800ce3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce3e:	4013      	ands	r3, r2
 800ce40:	b2d9      	uxtb	r1, r3
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce46:	4413      	add	r3, r2
 800ce48:	460a      	mov	r2, r1
 800ce4a:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce50:	4413      	add	r3, r2
 800ce52:	781a      	ldrb	r2, [r3, #0]
 800ce54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce56:	7819      	ldrb	r1, [r3, #0]
 800ce58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	400b      	ands	r3, r1
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	4313      	orrs	r3, r2
 800ce62:	b2d9      	uxtb	r1, r3
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce68:	4413      	add	r3, r2
 800ce6a:	460a      	mov	r2, r1
 800ce6c:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800ce6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce70:	3301      	adds	r3, #1
 800ce72:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800ce74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce76:	3301      	adds	r3, #1
 800ce78:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800ce7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7c:	2b0f      	cmp	r3, #15
 800ce7e:	d809      	bhi.n	800ce94 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800ce80:	68fa      	ldr	r2, [r7, #12]
 800ce82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce84:	18d0      	adds	r0, r2, r3
 800ce86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce88:	f1c3 0310 	rsb	r3, r3, #16
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce90:	f015 feb4 	bl	8022bfc <memcpy>
            }
        }

        return xResult;
 800ce94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800ce96:	4618      	mov	r0, r3
 800ce98:	3740      	adds	r7, #64	@ 0x40
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	08025d14 	.word	0x08025d14

0800cea4 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 fe48 	bl	800db48 <FreeRTOS_FirstEndPoint>
 800ceb8:	60b8      	str	r0, [r7, #8]
 800ceba:	e01a      	b.n	800cef2 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cec2:	2bfe      	cmp	r3, #254	@ 0xfe
 800cec4:	d110      	bne.n	800cee8 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800cecc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800ced0:	2b80      	cmp	r3, #128	@ 0x80
 800ced2:	d109      	bne.n	800cee8 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ced4:	6838      	ldr	r0, [r7, #0]
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	3338      	adds	r3, #56	@ 0x38
 800ceda:	2210      	movs	r2, #16
 800cedc:	4619      	mov	r1, r3
 800cede:	f015 fe8d 	bl	8022bfc <memcpy>
                xResult = pdPASS;
 800cee2:	2301      	movs	r3, #1
 800cee4:	60fb      	str	r3, [r7, #12]
                break;
 800cee6:	e007      	b.n	800cef8 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800cee8:	68b9      	ldr	r1, [r7, #8]
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 fe4e 	bl	800db8c <FreeRTOS_NextEndPoint>
 800cef0:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d1e1      	bne.n	800cebc <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800cef8:	68fb      	ldr	r3, [r7, #12]
    }
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
	...

0800cf04 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800cf04:	b5b0      	push	{r4, r5, r7, lr}
 800cf06:	b090      	sub	sp, #64	@ 0x40
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf12:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800cf14:	233e      	movs	r3, #62	@ 0x3e
 800cf16:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800cf20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d103      	bne.n	800cf2e <vNDSendRouterSolicitation+0x2a>
 800cf26:	218f      	movs	r1, #143	@ 0x8f
 800cf28:	4852      	ldr	r0, [pc, #328]	@ (800d074 <vNDSendRouterSolicitation+0x170>)
 800cf2a:	f7f4 fd6d 	bl	8001a08 <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf30:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cf34:	f003 0304 	and.w	r3, r3, #4
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d103      	bne.n	800cf46 <vNDSendRouterSolicitation+0x42>
 800cf3e:	2190      	movs	r1, #144	@ 0x90
 800cf40:	484c      	ldr	r0, [pc, #304]	@ (800d074 <vNDSendRouterSolicitation+0x170>)
 800cf42:	f7f4 fd61 	bl	8001a08 <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800cf46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf48:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cf4c:	f107 020c 	add.w	r2, r7, #12
 800cf50:	4611      	mov	r1, r2
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff ffa6 	bl	800cea4 <xGetLinkLocalAddress>
 800cf58:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800cf5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10a      	bne.n	800cf76 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800cf60:	4845      	ldr	r0, [pc, #276]	@ (800d078 <vNDSendRouterSolicitation+0x174>)
 800cf62:	f015 fc2f 	bl	80227c4 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800cf66:	f107 030c 	add.w	r3, r7, #12
 800cf6a:	2210      	movs	r2, #16
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f015 ff51 	bl	8022e16 <memset>
 800cf74:	e005      	b.n	800cf82 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800cf76:	f107 030c 	add.w	r3, r7, #12
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	483f      	ldr	r0, [pc, #252]	@ (800d07c <vNDSendRouterSolicitation+0x178>)
 800cf7e:	f015 fc21 	bl	80227c4 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800cf82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d909      	bls.n	800cfa0 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800cf8c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cf8e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cf90:	f7fd fcf4 	bl	800a97c <pxDuplicateNetworkBufferWithDescriptor>
 800cf94:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800cf96:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cf98:	f00a fd6c 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800cf9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800cfa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d062      	beq.n	800d06c <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800cfa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfaa:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800cfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfae:	3336      	adds	r3, #54	@ 0x36
 800cfb0:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800cfb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfb6:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800cfb8:	f107 031c 	add.w	r3, r7, #28
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	6838      	ldr	r0, [r7, #0]
 800cfc2:	f7ff f87b 	bl	800c0bc <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc8:	3306      	adds	r3, #6
 800cfca:	461a      	mov	r2, r3
 800cfcc:	f107 031c 	add.w	r3, r7, #28
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	6010      	str	r0, [r2, #0]
 800cfd4:	889b      	ldrh	r3, [r3, #4]
 800cfd6:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cfd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfdc:	33e8      	adds	r3, #232	@ 0xe8
 800cfde:	2206      	movs	r2, #6
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	f015 fe0b 	bl	8022bfc <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800cfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800cfee:	731a      	strb	r2, [r3, #12]
 800cff0:	2200      	movs	r2, #0
 800cff2:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800cff6:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800cff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffa:	2260      	movs	r2, #96	@ 0x60
 800cffc:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800cffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d000:	2200      	movs	r2, #0
 800d002:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800d004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d006:	2200      	movs	r2, #0
 800d008:	741a      	strb	r2, [r3, #16]
 800d00a:	2200      	movs	r2, #0
 800d00c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800d00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d010:	2200      	movs	r2, #0
 800d012:	749a      	strb	r2, [r3, #18]
 800d014:	2200      	movs	r2, #0
 800d016:	f042 0208 	orr.w	r2, r2, #8
 800d01a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800d01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d01e:	223a      	movs	r2, #58	@ 0x3a
 800d020:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800d022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d024:	22ff      	movs	r2, #255	@ 0xff
 800d026:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d02a:	3316      	adds	r3, #22
 800d02c:	461d      	mov	r5, r3
 800d02e:	f107 040c 	add.w	r4, r7, #12
 800d032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d034:	6028      	str	r0, [r5, #0]
 800d036:	6069      	str	r1, [r5, #4]
 800d038:	60aa      	str	r2, [r5, #8]
 800d03a:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03e:	3326      	adds	r3, #38	@ 0x26
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	2210      	movs	r2, #16
 800d044:	4618      	mov	r0, r3
 800d046:	f015 fdd9 	bl	8022bfc <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800d04a:	2208      	movs	r2, #8
 800d04c:	2100      	movs	r1, #0
 800d04e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d050:	f015 fee1 	bl	8022e16 <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800d054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d056:	2285      	movs	r2, #133	@ 0x85
 800d058:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800d05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05c:	2200      	movs	r2, #0
 800d05e:	709a      	strb	r2, [r3, #2]
 800d060:	2200      	movs	r2, #0
 800d062:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800d064:	2101      	movs	r1, #1
 800d066:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d068:	f7fd f8d6 	bl	800a218 <vReturnEthernetFrame>
        }
    }
 800d06c:	bf00      	nop
 800d06e:	3740      	adds	r7, #64	@ 0x40
 800d070:	46bd      	mov	sp, r7
 800d072:	bdb0      	pop	{r4, r5, r7, pc}
 800d074:	08025d40 	.word	0x08025d40
 800d078:	08025d6c 	.word	0x08025d6c
 800d07c:	08025d94 	.word	0x08025d94

0800d080 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d08c:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d092:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3336      	adds	r3, #54	@ 0x36
 800d098:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800d09a:	6938      	ldr	r0, [r7, #16]
 800d09c:	f000 fd54 	bl	800db48 <FreeRTOS_FirstEndPoint>
 800d0a0:	6178      	str	r0, [r7, #20]
 800d0a2:	e028      	b.n	800d0f6 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d0aa:	f003 0302 	and.w	r3, r3, #2
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d01b      	beq.n	800d0ec <vReceiveNA+0x6c>
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d0ba:	2b03      	cmp	r3, #3
 800d0bc:	d116      	bne.n	800d0ec <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	3308      	adds	r3, #8
 800d0c8:	2210      	movs	r2, #16
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	f016 fd2b 	bl	8023b26 <memcmp>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d10a      	bne.n	800d0ec <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d0d6:	697a      	ldr	r2, [r7, #20]
 800d0d8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d0dc:	f043 0302 	orr.w	r3, r3, #2
 800d0e0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800d0e4:	2164      	movs	r1, #100	@ 0x64
 800d0e6:	6978      	ldr	r0, [r7, #20]
 800d0e8:	f7fd fb3e 	bl	800a768 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800d0ec:	6979      	ldr	r1, [r7, #20]
 800d0ee:	6938      	ldr	r0, [r7, #16]
 800d0f0:	f000 fd4c 	bl	800db8c <FreeRTOS_NextEndPoint>
 800d0f4:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1d3      	bne.n	800d0a4 <vReceiveNA+0x24>
                }
            }
        }
    }
 800d0fc:	bf00      	nop
 800d0fe:	bf00      	nop
 800d100:	3718      	adds	r7, #24
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
	...

0800d108 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d10a:	b091      	sub	sp, #68	@ 0x44
 800d10c:	af04      	add	r7, sp, #16
 800d10e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800d110:	2300      	movs	r3, #0
 800d112:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800d114:	2310      	movs	r3, #16
 800d116:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	3336      	adds	r3, #54	@ 0x36
 800d11c:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d122:	6a3b      	ldr	r3, [r7, #32]
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d12c:	6a3b      	ldr	r3, [r7, #32]
 800d12e:	4413      	add	r3, r2
 800d130:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800d132:	2300      	movs	r3, #0
 800d134:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800d136:	e0b2      	b.n	800d29e <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800d138:	69ba      	ldr	r2, [r7, #24]
 800d13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13c:	4413      	add	r3, r2
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800d142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d144:	3301      	adds	r3, #1
 800d146:	69ba      	ldr	r2, [r7, #24]
 800d148:	4413      	add	r3, r2
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	00db      	lsls	r3, r3, #3
 800d152:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d103      	bne.n	800d162 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800d15a:	4856      	ldr	r0, [pc, #344]	@ (800d2b4 <vReceiveRA_ReadReply+0x1ac>)
 800d15c:	f015 fb32 	bl	80227c4 <lUDPLoggingPrintf>
                break;
 800d160:	e0a3      	b.n	800d2aa <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800d162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	4413      	add	r3, r2
 800d168:	69fa      	ldr	r2, [r7, #28]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d208      	bcs.n	800d180 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800d16e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	4413      	add	r3, r2
 800d174:	69fa      	ldr	r2, [r7, #28]
 800d176:	4619      	mov	r1, r3
 800d178:	484f      	ldr	r0, [pc, #316]	@ (800d2b8 <vReceiveRA_ReadReply+0x1b0>)
 800d17a:	f015 fb23 	bl	80227c4 <lUDPLoggingPrintf>
                break;
 800d17e:	e094      	b.n	800d2aa <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800d180:	7dfb      	ldrb	r3, [r7, #23]
 800d182:	3b01      	subs	r3, #1
 800d184:	2b04      	cmp	r3, #4
 800d186:	d87f      	bhi.n	800d288 <vReceiveRA_ReadReply+0x180>
 800d188:	a201      	add	r2, pc, #4	@ (adr r2, 800d190 <vReceiveRA_ReadReply+0x88>)
 800d18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18e:	bf00      	nop
 800d190:	0800d1a5 	.word	0x0800d1a5
 800d194:	0800d295 	.word	0x0800d295
 800d198:	0800d1ff 	.word	0x0800d1ff
 800d19c:	0800d295 	.word	0x0800d295
 800d1a0:	0800d26f 	.word	0x0800d26f
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800d1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a6:	3302      	adds	r3, #2
 800d1a8:	69ba      	ldr	r2, [r7, #24]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	461c      	mov	r4, r3
 800d1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b2:	3303      	adds	r3, #3
 800d1b4:	69ba      	ldr	r2, [r7, #24]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	461d      	mov	r5, r3
 800d1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1be:	3304      	adds	r3, #4
 800d1c0:	69ba      	ldr	r2, [r7, #24]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	461e      	mov	r6, r3
 800d1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ca:	3305      	adds	r3, #5
 800d1cc:	69ba      	ldr	r2, [r7, #24]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d6:	3306      	adds	r3, #6
 800d1d8:	69ba      	ldr	r2, [r7, #24]
 800d1da:	4413      	add	r3, r2
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e2:	3307      	adds	r3, #7
 800d1e4:	69ba      	ldr	r2, [r7, #24]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	9302      	str	r3, [sp, #8]
 800d1ec:	9001      	str	r0, [sp, #4]
 800d1ee:	9100      	str	r1, [sp, #0]
 800d1f0:	4633      	mov	r3, r6
 800d1f2:	462a      	mov	r2, r5
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	4831      	ldr	r0, [pc, #196]	@ (800d2bc <vReceiveRA_ReadReply+0x1b4>)
 800d1f8:	f015 fae4 	bl	80227c4 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800d1fc:	e04b      	b.n	800d296 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800d1fe:	69ba      	ldr	r2, [r7, #24]
 800d200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d202:	4413      	add	r3, r2
 800d204:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800d206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d208:	789b      	ldrb	r3, [r3, #2]
 800d20a:	4618      	mov	r0, r3
 800d20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	061a      	lsls	r2, r3, #24
 800d212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	021b      	lsls	r3, r3, #8
 800d218:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d21c:	431a      	orrs	r2, r3
 800d21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	0a1b      	lsrs	r3, r3, #8
 800d224:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d228:	431a      	orrs	r2, r3
 800d22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	0e1b      	lsrs	r3, r3, #24
 800d230:	ea42 0103 	orr.w	r1, r2, r3
 800d234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	061a      	lsls	r2, r3, #24
 800d23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	021b      	lsls	r3, r3, #8
 800d240:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d244:	431a      	orrs	r2, r3
 800d246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	0a1b      	lsrs	r3, r3, #8
 800d24c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d250:	431a      	orrs	r2, r3
 800d252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	0e1b      	lsrs	r3, r3, #24
 800d258:	431a      	orrs	r2, r3
 800d25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25c:	3310      	adds	r3, #16
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	4613      	mov	r3, r2
 800d262:	460a      	mov	r2, r1
 800d264:	4601      	mov	r1, r0
 800d266:	4816      	ldr	r0, [pc, #88]	@ (800d2c0 <vReceiveRA_ReadReply+0x1b8>)
 800d268:	f015 faac 	bl	80227c4 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800d26c:	e013      	b.n	800d296 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800d26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d270:	3304      	adds	r3, #4
 800d272:	69ba      	ldr	r2, [r7, #24]
 800d274:	4413      	add	r3, r2
 800d276:	4618      	mov	r0, r3
 800d278:	f7fd fe60 	bl	800af3c <ulChar2u32>
 800d27c:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800d27e:	68b9      	ldr	r1, [r7, #8]
 800d280:	4810      	ldr	r0, [pc, #64]	@ (800d2c4 <vReceiveRA_ReadReply+0x1bc>)
 800d282:	f015 fa9f 	bl	80227c4 <lUDPLoggingPrintf>
                   }
                   break;
 800d286:	e006      	b.n	800d296 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800d288:	7dfb      	ldrb	r3, [r7, #23]
 800d28a:	4619      	mov	r1, r3
 800d28c:	480e      	ldr	r0, [pc, #56]	@ (800d2c8 <vReceiveRA_ReadReply+0x1c0>)
 800d28e:	f015 fa99 	bl	80227c4 <lUDPLoggingPrintf>
                    break;
 800d292:	e000      	b.n	800d296 <vReceiveRA_ReadReply+0x18e>
                    break;
 800d294:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800d296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	4413      	add	r3, r2
 800d29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800d29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	69fa      	ldr	r2, [r7, #28]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	f63f af47 	bhi.w	800d138 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800d2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3734      	adds	r7, #52	@ 0x34
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2b4:	08025da8 	.word	0x08025da8
 800d2b8:	08025ddc 	.word	0x08025ddc
 800d2bc:	08025e00 	.word	0x08025e00
 800d2c0:	08025e2c 	.word	0x08025e2c
 800d2c4:	08025e54 	.word	0x08025e54
 800d2c8:	08025e64 	.word	0x08025e64

0800d2cc <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ce:	b08d      	sub	sp, #52	@ 0x34
 800d2d0:	af04      	add	r7, sp, #16
 800d2d2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d8:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800d2de:	2310      	movs	r3, #16
 800d2e0:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	3336      	adds	r3, #54	@ 0x36
 800d2e6:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d903      	bls.n	800d2fa <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800d2f2:	485b      	ldr	r0, [pc, #364]	@ (800d460 <vReceiveRA+0x194>)
 800d2f4:	f015 fa66 	bl	80227c4 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800d2f8:	e0ae      	b.n	800d458 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	3336      	adds	r3, #54	@ 0x36
 800d2fe:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	461c      	mov	r4, r3
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	785b      	ldrb	r3, [r3, #1]
 800d30a:	461d      	mov	r5, r3
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	885b      	ldrh	r3, [r3, #2]
 800d310:	b29b      	uxth	r3, r3
 800d312:	021b      	lsls	r3, r3, #8
 800d314:	b21a      	sxth	r2, r3
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	885b      	ldrh	r3, [r3, #2]
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	0a1b      	lsrs	r3, r3, #8
 800d31e:	b29b      	uxth	r3, r3
 800d320:	b21b      	sxth	r3, r3
 800d322:	4313      	orrs	r3, r2
 800d324:	b21b      	sxth	r3, r3
 800d326:	b29b      	uxth	r3, r3
 800d328:	461e      	mov	r6, r3
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	791b      	ldrb	r3, [r3, #4]
 800d32e:	4619      	mov	r1, r3
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	795b      	ldrb	r3, [r3, #5]
 800d334:	4618      	mov	r0, r3
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	88db      	ldrh	r3, [r3, #6]
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	021b      	lsls	r3, r3, #8
 800d33e:	b21a      	sxth	r2, r3
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	88db      	ldrh	r3, [r3, #6]
 800d344:	b29b      	uxth	r3, r3
 800d346:	0a1b      	lsrs	r3, r3, #8
 800d348:	b29b      	uxth	r3, r3
 800d34a:	b21b      	sxth	r3, r3
 800d34c:	4313      	orrs	r3, r2
 800d34e:	b21b      	sxth	r3, r3
 800d350:	b29b      	uxth	r3, r3
 800d352:	9302      	str	r3, [sp, #8]
 800d354:	9001      	str	r0, [sp, #4]
 800d356:	9100      	str	r1, [sp, #0]
 800d358:	4633      	mov	r3, r6
 800d35a:	462a      	mov	r2, r5
 800d35c:	4621      	mov	r1, r4
 800d35e:	4841      	ldr	r0, [pc, #260]	@ (800d464 <vReceiveRA+0x198>)
 800d360:	f015 fa30 	bl	80227c4 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	88db      	ldrh	r3, [r3, #6]
 800d368:	b29b      	uxth	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d074      	beq.n	800d458 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7ff feca 	bl	800d108 <vReceiveRA_ReadReply>
 800d374:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d104      	bne.n	800d388 <vReceiveRA+0xbc>
 800d37e:	f240 118b 	movw	r1, #395	@ 0x18b
 800d382:	4839      	ldr	r0, [pc, #228]	@ (800d468 <vReceiveRA+0x19c>)
 800d384:	f7f4 fb40 	bl	8001a08 <vAssertCalled>
                if( pxPrefixOption != NULL )
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d064      	beq.n	800d458 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d392:	4618      	mov	r0, r3
 800d394:	f000 fbd8 	bl	800db48 <FreeRTOS_FirstEndPoint>
 800d398:	61f8      	str	r0, [r7, #28]
 800d39a:	e05a      	b.n	800d452 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d3a2:	f003 0302 	and.w	r3, r3, #2
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d04b      	beq.n	800d444 <vReceiveRA+0x178>
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d146      	bne.n	800d444 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	789b      	ldrb	r3, [r3, #2]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	3310      	adds	r3, #16
 800d3ca:	2210      	movs	r2, #16
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	f015 fc15 	bl	8022bfc <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	3316      	adds	r3, #22
 800d3dc:	2210      	movs	r2, #16
 800d3de:	4619      	mov	r1, r3
 800d3e0:	f015 fc0c 	bl	8022bfc <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800d3e4:	69fa      	ldr	r2, [r7, #28]
 800d3e6:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d3ea:	f043 0301 	orr.w	r3, r3, #1
 800d3ee:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	061a      	lsls	r2, r3, #24
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	021b      	lsls	r3, r3, #8
 800d406:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d40a:	431a      	orrs	r2, r3
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	0a1b      	lsrs	r3, r3, #8
 800d412:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d416:	431a      	orrs	r2, r3
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	689b      	ldr	r3, [r3, #8]
 800d41c:	0e1b      	lsrs	r3, r3, #24
 800d41e:	431a      	orrs	r2, r3
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d426:	69fa      	ldr	r2, [r7, #28]
 800d428:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d42c:	f043 0302 	orr.w	r3, r3, #2
 800d430:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	2202      	movs	r2, #2
 800d438:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800d43c:	69f9      	ldr	r1, [r7, #28]
 800d43e:	2000      	movs	r0, #0
 800d440:	f000 f9b6 	bl	800d7b0 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d448:	69f9      	ldr	r1, [r7, #28]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 fb9e 	bl	800db8c <FreeRTOS_NextEndPoint>
 800d450:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1a1      	bne.n	800d39c <vReceiveRA+0xd0>
    }
 800d458:	bf00      	nop
 800d45a:	3724      	adds	r7, #36	@ 0x24
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d460:	08025e88 	.word	0x08025e88
 800d464:	08025eb8 	.word	0x08025eb8
 800d468:	08025d40 	.word	0x08025d40

0800d46c <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800d46c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d470:	b088      	sub	sp, #32
 800d472:	af00      	add	r7, sp, #0
 800d474:	6178      	str	r0, [r7, #20]
 800d476:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d478:	6939      	ldr	r1, [r7, #16]
 800d47a:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800d47c:	6979      	ldr	r1, [r7, #20]
 800d47e:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d482:	2901      	cmp	r1, #1
 800d484:	d133      	bne.n	800d4ee <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d48c:	1c5a      	adds	r2, r3, #1
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d804      	bhi.n	800d4a8 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d4a6:	e0bf      	b.n	800d628 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800d4a8:	4862      	ldr	r0, [pc, #392]	@ (800d634 <xRAProcess_HandleWaitStates+0x1c8>)
 800d4aa:	f015 f98b 	bl	80227c4 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	3390      	adds	r3, #144	@ 0x90
 800d4b8:	2258      	movs	r2, #88	@ 0x58
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	f015 fb9e 	bl	8022bfc <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800d4c0:	697a      	ldr	r2, [r7, #20]
 800d4c2:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d4c6:	f36f 0300 	bfc	r3, #0, #1
 800d4ca:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d4d6:	697a      	ldr	r2, [r7, #20]
 800d4d8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d4dc:	f043 0302 	orr.w	r3, r3, #2
 800d4e0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d4ec:	e09c      	b.n	800d628 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800d4ee:	6979      	ldr	r1, [r7, #20]
 800d4f0:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d4f4:	2903      	cmp	r1, #3
 800d4f6:	f040 8097 	bne.w	800d628 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800d4fa:	6979      	ldr	r1, [r7, #20]
 800d4fc:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d500:	f001 0102 	and.w	r1, r1, #2
 800d504:	b2c9      	uxtb	r1, r1
 800d506:	2900      	cmp	r1, #0
 800d508:	d00b      	beq.n	800d522 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	2202      	movs	r2, #2
 800d516:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d51a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d51e:	61fb      	str	r3, [r7, #28]
 800d520:	e082      	b.n	800d628 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800d522:	6979      	ldr	r1, [r7, #20]
 800d524:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800d528:	2902      	cmp	r1, #2
 800d52a:	d80e      	bhi.n	800d54a <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	2202      	movs	r2, #2
 800d53e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d542:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d546:	61fb      	str	r3, [r7, #28]
 800d548:	e06e      	b.n	800d628 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800d54a:	6979      	ldr	r1, [r7, #20]
 800d54c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d550:	f001 0101 	and.w	r1, r1, #1
 800d554:	b2c9      	uxtb	r1, r1
 800d556:	2900      	cmp	r1, #0
 800d558:	d057      	beq.n	800d60a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800d55a:	6979      	ldr	r1, [r7, #20]
 800d55c:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800d560:	2000      	movs	r0, #0
 800d562:	4688      	mov	r8, r1
 800d564:	4681      	mov	r9, r0
 800d566:	4640      	mov	r0, r8
 800d568:	4649      	mov	r1, r9
 800d56a:	f04f 0a00 	mov.w	sl, #0
 800d56e:	f04f 0b00 	mov.w	fp, #0
 800d572:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800d576:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800d57a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800d57e:	4650      	mov	r0, sl
 800d580:	4659      	mov	r1, fp
 800d582:	ebb0 0208 	subs.w	r2, r0, r8
 800d586:	eb61 0309 	sbc.w	r3, r1, r9
 800d58a:	f04f 0000 	mov.w	r0, #0
 800d58e:	f04f 0100 	mov.w	r1, #0
 800d592:	0259      	lsls	r1, r3, #9
 800d594:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800d598:	0250      	lsls	r0, r2, #9
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	eb12 0408 	adds.w	r4, r2, r8
 800d5a2:	eb43 0509 	adc.w	r5, r3, r9
 800d5a6:	f04f 0200 	mov.w	r2, #0
 800d5aa:	f04f 0300 	mov.w	r3, #0
 800d5ae:	01ab      	lsls	r3, r5, #6
 800d5b0:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800d5b4:	01a2      	lsls	r2, r4, #6
 800d5b6:	1b11      	subs	r1, r2, r4
 800d5b8:	6039      	str	r1, [r7, #0]
 800d5ba:	eb63 0305 	sbc.w	r3, r3, r5
 800d5be:	607b      	str	r3, [r7, #4]
 800d5c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	eb13 0308 	adds.w	r3, r3, r8
 800d5ca:	60bb      	str	r3, [r7, #8]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	eb43 0309 	adc.w	r3, r3, r9
 800d5d2:	60fb      	str	r3, [r7, #12]
 800d5d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d5d8:	f04f 0300 	mov.w	r3, #0
 800d5dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d5e0:	f7f2 fee6 	bl	80003b0 <__aeabi_uldivmod>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2204      	movs	r2, #4
 800d5f0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d600:	461a      	mov	r2, r3
 800d602:	480d      	ldr	r0, [pc, #52]	@ (800d638 <xRAProcess_HandleWaitStates+0x1cc>)
 800d604:	f015 f8de 	bl	80227c4 <lUDPLoggingPrintf>
 800d608:	e00b      	b.n	800d622 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	2206      	movs	r2, #6
 800d60e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	3338      	adds	r3, #56	@ 0x38
 800d616:	4619      	mov	r1, r3
 800d618:	4808      	ldr	r0, [pc, #32]	@ (800d63c <xRAProcess_HandleWaitStates+0x1d0>)
 800d61a:	f015 f8d3 	bl	80227c4 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800d61e:	2300      	movs	r3, #0
 800d620:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800d622:	6978      	ldr	r0, [r7, #20]
 800d624:	f7fc fa08 	bl	8009a38 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800d628:	69fb      	ldr	r3, [r7, #28]
    }
 800d62a:	4618      	mov	r0, r3
 800d62c:	3720      	adds	r7, #32
 800d62e:	46bd      	mov	sp, r7
 800d630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d634:	08025efc 	.word	0x08025efc
 800d638:	08025f24 	.word	0x08025f24
 800d63c:	08025f64 	.word	0x08025f64

0800d640 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800d640:	b580      	push	{r7, lr}
 800d642:	b08c      	sub	sp, #48	@ 0x30
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d654:	2b06      	cmp	r3, #6
 800d656:	f200 808c 	bhi.w	800d772 <xRAProcess_HandleOtherStates+0x132>
 800d65a:	a201      	add	r2, pc, #4	@ (adr r2, 800d660 <xRAProcess_HandleOtherStates+0x20>)
 800d65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d660:	0800d67d 	.word	0x0800d67d
 800d664:	0800d773 	.word	0x0800d773
 800d668:	0800d6df 	.word	0x0800d6df
 800d66c:	0800d773 	.word	0x0800d773
 800d670:	0800d75b 	.word	0x0800d75b
 800d674:	0800d765 	.word	0x0800d765
 800d678:	0800d773 	.word	0x0800d773
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800d67c:	f107 030c 	add.w	r3, r7, #12
 800d680:	2210      	movs	r2, #16
 800d682:	2100      	movs	r1, #0
 800d684:	4618      	mov	r0, r3
 800d686:	f015 fbc6 	bl	8022e16 <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800d68a:	23ff      	movs	r3, #255	@ 0xff
 800d68c:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800d68e:	2302      	movs	r3, #2
 800d690:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800d692:	2302      	movs	r3, #2
 800d694:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800d696:	233e      	movs	r3, #62	@ 0x3e
 800d698:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d69a:	2100      	movs	r1, #0
 800d69c:	6a38      	ldr	r0, [r7, #32]
 800d69e:	f00a f981 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 800d6a2:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d008      	beq.n	800d6bc <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800d6b0:	f107 030c 	add.w	r3, r7, #12
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	69f8      	ldr	r0, [r7, #28]
 800d6b8:	f7ff fc24 	bl	800cf04 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	2203      	movs	r2, #3
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	482d      	ldr	r0, [pc, #180]	@ (800d780 <xRAProcess_HandleOtherStates+0x140>)
 800d6ca:	f015 f87b 	bl	80227c4 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800d6ce:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d6dc:	e04a      	b.n	800d774 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d6e4:	f003 0302 	and.w	r3, r3, #2
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d014      	beq.n	800d718 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d6f4:	f36f 0341 	bfc	r3, #1, #1
 800d6f8:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d70c:	2301      	movs	r3, #1
 800d70e:	f7ff fb2b 	bl	800cd68 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800d712:	481c      	ldr	r0, [pc, #112]	@ (800d784 <xRAProcess_HandleOtherStates+0x144>)
 800d714:	f015 f856 	bl	80227c4 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	3338      	adds	r3, #56	@ 0x38
 800d71c:	4619      	mov	r1, r3
 800d71e:	481a      	ldr	r0, [pc, #104]	@ (800d788 <xRAProcess_HandleOtherStates+0x148>)
 800d720:	f015 f850 	bl	80227c4 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800d724:	2356      	movs	r3, #86	@ 0x56
 800d726:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d728:	2100      	movs	r1, #0
 800d72a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d72c:	f00a f93a 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 800d730:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800d732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d734:	2b00      	cmp	r3, #0
 800d736:	d008      	beq.n	800d74a <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	3338      	adds	r3, #56	@ 0x38
 800d742:	4619      	mov	r1, r3
 800d744:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d746:	f7fe ff25 	bl	800c594 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d74a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d74e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2203      	movs	r2, #3
 800d754:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d758:	e00c      	b.n	800d774 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2205      	movs	r2, #5
 800d75e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800d762:	e007      	b.n	800d774 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f000 f811 	bl	800d78c <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d76a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d76e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800d770:	e000      	b.n	800d774 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800d772:	bf00      	nop
        }

        return uxNewReloadTime;
 800d774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800d776:	4618      	mov	r0, r3
 800d778:	3730      	adds	r7, #48	@ 0x30
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	08025fa0 	.word	0x08025fa0
 800d784:	08025fd4 	.word	0x08025fd4
 800d788:	08025ff8 	.word	0x08025ff8

0800d78c <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800d7a4:	bf00      	nop
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800d7b0:	b590      	push	{r4, r7, lr}
 800d7b2:	b089      	sub	sp, #36	@ 0x24
 800d7b4:	af04      	add	r7, sp, #16
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800d7ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d7be:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d104      	bne.n	800d7d0 <vRAProcess+0x20>
 800d7c6:	f240 2189 	movw	r1, #649	@ 0x289
 800d7ca:	4828      	ldr	r0, [pc, #160]	@ (800d86c <vRAProcess+0xbc>)
 800d7cc:	f7f4 f91c 	bl	8001a08 <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d7d6:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d002      	beq.n	800d7e4 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800d7de:	6838      	ldr	r0, [r7, #0]
 800d7e0:	f7ff ffd4 	bl	800d78c <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800d7e4:	68f9      	ldr	r1, [r7, #12]
 800d7e6:	6838      	ldr	r0, [r7, #0]
 800d7e8:	f7ff fe40 	bl	800d46c <xRAProcess_HandleWaitStates>
 800d7ec:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800d7ee:	68f9      	ldr	r1, [r7, #12]
 800d7f0:	6838      	ldr	r0, [r7, #0]
 800d7f2:	f7ff ff25 	bl	800d640 <xRAProcess_HandleOtherStates>
 800d7f6:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d804:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	461c      	mov	r4, r3
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d812:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d816:	b2db      	uxtb	r3, r3
 800d818:	4618      	mov	r0, r3
 800d81a:	7afb      	ldrb	r3, [r7, #11]
 800d81c:	683a      	ldr	r2, [r7, #0]
 800d81e:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800d822:	9202      	str	r2, [sp, #8]
 800d824:	9301      	str	r3, [sp, #4]
 800d826:	9000      	str	r0, [sp, #0]
 800d828:	4623      	mov	r3, r4
 800d82a:	460a      	mov	r2, r1
 800d82c:	6879      	ldr	r1, [r7, #4]
 800d82e:	4810      	ldr	r0, [pc, #64]	@ (800d870 <vRAProcess+0xc0>)
 800d830:	f014 ffc8 	bl	80227c4 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d00d      	beq.n	800d856 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	4a0d      	ldr	r2, [pc, #52]	@ (800d874 <vRAProcess+0xc4>)
 800d83e:	fba2 2303 	umull	r2, r3, r2, r3
 800d842:	099b      	lsrs	r3, r3, #6
 800d844:	4619      	mov	r1, r3
 800d846:	480c      	ldr	r0, [pc, #48]	@ (800d878 <vRAProcess+0xc8>)
 800d848:	f014 ffbc 	bl	80227c4 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800d84c:	68f9      	ldr	r1, [r7, #12]
 800d84e:	6838      	ldr	r0, [r7, #0]
 800d850:	f7fc ff8a 	bl	800a768 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800d854:	e006      	b.n	800d864 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800d856:	4809      	ldr	r0, [pc, #36]	@ (800d87c <vRAProcess+0xcc>)
 800d858:	f014 ffb4 	bl	80227c4 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800d85c:	2100      	movs	r1, #0
 800d85e:	6838      	ldr	r0, [r7, #0]
 800d860:	f7fd f836 	bl	800a8d0 <vIPSetDHCP_RATimerEnableState>
    }
 800d864:	bf00      	nop
 800d866:	3714      	adds	r7, #20
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd90      	pop	{r4, r7, pc}
 800d86c:	08025d40 	.word	0x08025d40
 800d870:	08026020 	.word	0x08026020
 800d874:	10624dd3 	.word	0x10624dd3
 800d878:	0802606c 	.word	0x0802606c
 800d87c:	08026084 	.word	0x08026084

0800d880 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d002      	beq.n	800d89a <FreeRTOS_FillEndPoint+0x1a>
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d105      	bne.n	800d8a6 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	68f9      	ldr	r1, [r7, #12]
 800d89e:	483f      	ldr	r0, [pc, #252]	@ (800d99c <FreeRTOS_FillEndPoint+0x11c>)
 800d8a0:	f014 ff90 	bl	80227c4 <lUDPLoggingPrintf>
 800d8a4:	e075      	b.n	800d992 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d8ac:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800d8ae:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	68b8      	ldr	r0, [r7, #8]
 800d8b6:	f015 faae 	bl	8022e16 <memset>
            pxEndPoint->pxNext = pxNext;
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	697a      	ldr	r2, [r7, #20]
 800d8be:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	3303      	adds	r3, #3
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	061a      	lsls	r2, r3, #24
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	3302      	adds	r3, #2
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	041b      	lsls	r3, r3, #16
 800d8d2:	431a      	orrs	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	021b      	lsls	r3, r3, #8
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	7812      	ldrb	r2, [r2, #0]
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	3303      	adds	r3, #3
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	061a      	lsls	r2, r3, #24
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	3302      	adds	r3, #2
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	041b      	lsls	r3, r3, #16
 800d8f6:	431a      	orrs	r2, r3
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	021b      	lsls	r3, r3, #8
 800d900:	4313      	orrs	r3, r2
 800d902:	683a      	ldr	r2, [r7, #0]
 800d904:	7812      	ldrb	r2, [r2, #0]
 800d906:	431a      	orrs	r2, r3
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	3303      	adds	r3, #3
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	061a      	lsls	r2, r3, #24
 800d914:	6a3b      	ldr	r3, [r7, #32]
 800d916:	3302      	adds	r3, #2
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	041b      	lsls	r3, r3, #16
 800d91c:	431a      	orrs	r2, r3
 800d91e:	6a3b      	ldr	r3, [r7, #32]
 800d920:	3301      	adds	r3, #1
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	021b      	lsls	r3, r3, #8
 800d926:	4313      	orrs	r3, r2
 800d928:	6a3a      	ldr	r2, [r7, #32]
 800d92a:	7812      	ldrb	r2, [r2, #0]
 800d92c:	431a      	orrs	r2, r3
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800d932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d934:	3303      	adds	r3, #3
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	061a      	lsls	r2, r3, #24
 800d93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d93c:	3302      	adds	r3, #2
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	041b      	lsls	r3, r3, #16
 800d942:	431a      	orrs	r2, r3
 800d944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d946:	3301      	adds	r3, #1
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	021b      	lsls	r3, r3, #8
 800d94c:	4313      	orrs	r3, r2
 800d94e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d950:	7812      	ldrb	r2, [r2, #0]
 800d952:	431a      	orrs	r2, r3
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	43da      	mvns	r2, r3
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	431a      	orrs	r2, r3
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	331c      	adds	r3, #28
 800d96a:	68b9      	ldr	r1, [r7, #8]
 800d96c:	221c      	movs	r2, #28
 800d96e:	4618      	mov	r0, r3
 800d970:	f015 f944 	bl	8022bfc <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	693a      	ldr	r2, [r7, #16]
 800d978:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	33e8      	adds	r3, #232	@ 0xe8
 800d97e:	2206      	movs	r2, #6
 800d980:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d982:	4618      	mov	r0, r3
 800d984:	f015 f93a 	bl	8022bfc <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800d988:	68b9      	ldr	r1, [r7, #8]
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f000 f85c 	bl	800da48 <FreeRTOS_AddEndPoint>
        }
    }
 800d990:	bf00      	nop
 800d992:	bf00      	nop
 800d994:	3718      	adds	r7, #24
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	0802609c 	.word	0x0802609c

0800d9a0 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d021      	beq.n	800d9f6 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800d9b2:	4b14      	ldr	r3, [pc, #80]	@ (800da04 <FreeRTOS_AddNetworkInterface+0x64>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d106      	bne.n	800d9c8 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800d9ba:	4a12      	ldr	r2, [pc, #72]	@ (800da04 <FreeRTOS_AddNetworkInterface+0x64>)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	625a      	str	r2, [r3, #36]	@ 0x24
 800d9c6:	e016      	b.n	800d9f6 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800d9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800da04 <FreeRTOS_AddNetworkInterface+0x64>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800d9ce:	68fa      	ldr	r2, [r7, #12]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d00e      	beq.n	800d9f4 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d106      	bne.n	800d9ec <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800d9ea:	e004      	b.n	800d9f6 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9f0:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800d9f2:	e7ec      	b.n	800d9ce <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800d9f4:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800d9f6:	687b      	ldr	r3, [r7, #4]
    }
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3714      	adds	r7, #20
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	2000152c 	.word	0x2000152c

0800da08 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800da08:	b480      	push	{r7}
 800da0a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800da0c:	4b03      	ldr	r3, [pc, #12]	@ (800da1c <FreeRTOS_FirstNetworkInterface+0x14>)
 800da0e:	681b      	ldr	r3, [r3, #0]
    }
 800da10:	4618      	mov	r0, r3
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	2000152c 	.word	0x2000152c

0800da20 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da32:	60fb      	str	r3, [r7, #12]
 800da34:	e001      	b.n	800da3a <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800da36:	2300      	movs	r3, #0
 800da38:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800da3a:	68fb      	ldr	r3, [r7, #12]
    }
 800da3c:	4618      	mov	r0, r3
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800da52:	2300      	movs	r3, #0
 800da54:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a1b      	ldr	r3, [r3, #32]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d102      	bne.n	800da6c <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	683a      	ldr	r2, [r7, #0]
 800da6a:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800da6c:	4b33      	ldr	r3, [pc, #204]	@ (800db3c <FreeRTOS_AddEndPoint+0xf4>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d107      	bne.n	800da84 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	2200      	movs	r2, #0
 800da78:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800da7c:	4a2f      	ldr	r2, [pc, #188]	@ (800db3c <FreeRTOS_AddEndPoint+0xf4>)
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	6013      	str	r3, [r2, #0]
 800da82:	e01a      	b.n	800daba <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800da84:	4b2d      	ldr	r3, [pc, #180]	@ (800db3c <FreeRTOS_AddEndPoint+0xf4>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800da8a:	68fa      	ldr	r2, [r7, #12]
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d012      	beq.n	800dab8 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d108      	bne.n	800daae <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	683a      	ldr	r2, [r7, #0]
 800daa8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800daac:	e005      	b.n	800daba <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dab4:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800dab6:	e7e8      	b.n	800da8a <FreeRTOS_AddEndPoint+0x42>
                    break;
 800dab8:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dac0:	f003 0304 	and.w	r3, r3, #4
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00c      	beq.n	800dae4 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800dad0:	4619      	mov	r1, r3
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800dad8:	461a      	mov	r2, r3
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	3390      	adds	r3, #144	@ 0x90
 800dade:	4818      	ldr	r0, [pc, #96]	@ (800db40 <FreeRTOS_AddEndPoint+0xf8>)
 800dae0:	f014 fe70 	bl	80227c4 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800daea:	f003 0304 	and.w	r3, r3, #4
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d11e      	bne.n	800db32 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800dafa:	4619      	mov	r1, r3
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800db02:	4618      	mov	r0, r3
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	69db      	ldr	r3, [r3, #28]
 800db08:	061a      	lsls	r2, r3, #24
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	69db      	ldr	r3, [r3, #28]
 800db0e:	021b      	lsls	r3, r3, #8
 800db10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800db14:	431a      	orrs	r2, r3
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	69db      	ldr	r3, [r3, #28]
 800db1a:	0a1b      	lsrs	r3, r3, #8
 800db1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800db20:	431a      	orrs	r2, r3
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	69db      	ldr	r3, [r3, #28]
 800db26:	0e1b      	lsrs	r3, r3, #24
 800db28:	4313      	orrs	r3, r2
 800db2a:	4602      	mov	r2, r0
 800db2c:	4805      	ldr	r0, [pc, #20]	@ (800db44 <FreeRTOS_AddEndPoint+0xfc>)
 800db2e:	f014 fe49 	bl	80227c4 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800db32:	683b      	ldr	r3, [r7, #0]
    }
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	20001528 	.word	0x20001528
 800db40:	080260dc 	.word	0x080260dc
 800db44:	08026110 	.word	0x08026110

0800db48 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800db50:	4b0d      	ldr	r3, [pc, #52]	@ (800db88 <FreeRTOS_FirstEndPoint+0x40>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800db56:	e00c      	b.n	800db72 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00c      	beq.n	800db78 <FreeRTOS_FirstEndPoint+0x30>
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	429a      	cmp	r2, r3
 800db68:	d006      	beq.n	800db78 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800db70:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d1ef      	bne.n	800db58 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800db78:	68fb      	ldr	r3, [r7, #12]
    }
 800db7a:	4618      	mov	r0, r3
 800db7c:	3714      	adds	r7, #20
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	20001528 	.word	0x20001528

0800db8c <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d015      	beq.n	800dbcc <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dba6:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800dba8:	e00c      	b.n	800dbc4 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d011      	beq.n	800dbd4 <FreeRTOS_NextEndPoint+0x48>
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d00b      	beq.n	800dbd4 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dbc2:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d1ef      	bne.n	800dbaa <FreeRTOS_NextEndPoint+0x1e>
 800dbca:	e003      	b.n	800dbd4 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7ff ffbb 	bl	800db48 <FreeRTOS_FirstEndPoint>
 800dbd2:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
    }
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
	...

0800dbe0 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800dbe0:	b480      	push	{r7}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dbea:	4b1e      	ldr	r3, [pc, #120]	@ (800dc64 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800dbf0:	2308      	movs	r3, #8
 800dbf2:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800dbf4:	4b1c      	ldr	r3, [pc, #112]	@ (800dc68 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	4a1b      	ldr	r2, [pc, #108]	@ (800dc68 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dbfc:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800dbfe:	683a      	ldr	r2, [r7, #0]
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d223      	bcs.n	800dc4e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800dc06:	4a18      	ldr	r2, [pc, #96]	@ (800dc68 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	3312      	adds	r3, #18
 800dc0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc10:	1c5a      	adds	r2, r3, #1
 800dc12:	4915      	ldr	r1, [pc, #84]	@ (800dc68 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	3312      	adds	r3, #18
 800dc18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800dc1c:	e017      	b.n	800dc4e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dc24:	f003 0304 	and.w	r3, r3, #4
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d10b      	bne.n	800dc46 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00f      	beq.n	800dc54 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00b      	beq.n	800dc54 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d006      	beq.n	800dc54 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dc4c:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1e4      	bne.n	800dc1e <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800dc54:	68fb      	ldr	r3, [r7, #12]
    }
 800dc56:	4618      	mov	r0, r3
 800dc58:	3714      	adds	r7, #20
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr
 800dc62:	bf00      	nop
 800dc64:	20001528 	.word	0x20001528
 800dc68:	20001530 	.word	0x20001530

0800dc6c <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800dc74:	6879      	ldr	r1, [r7, #4]
 800dc76:	2000      	movs	r0, #0
 800dc78:	f000 f8b6 	bl	800dde8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800dc7c:	4603      	mov	r3, r0
        }
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3708      	adds	r7, #8
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
	...

0800dc88 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dc92:	4b17      	ldr	r3, [pc, #92]	@ (800dcf0 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800dc98:	4b16      	ldr	r3, [pc, #88]	@ (800dcf4 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	4a15      	ldr	r2, [pc, #84]	@ (800dcf4 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800dca0:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d119      	bne.n	800dcdc <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800dcac:	e016      	b.n	800dcdc <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d005      	beq.n	800dcc0 <FreeRTOS_FindEndPointOnMAC+0x38>
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d109      	bne.n	800dcd4 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	33e8      	adds	r3, #232	@ 0xe8
 800dcc4:	6879      	ldr	r1, [r7, #4]
 800dcc6:	2206      	movs	r2, #6
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f015 ff2c 	bl	8023b26 <memcmp>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d007      	beq.n	800dce4 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dcda:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1e5      	bne.n	800dcae <FreeRTOS_FindEndPointOnMAC+0x26>
 800dce2:	e000      	b.n	800dce6 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800dce4:	bf00      	nop
        }

        return pxEndPoint;
 800dce6:	68fb      	ldr	r3, [r7, #12]
    }
 800dce8:	4618      	mov	r0, r3
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	20001528 	.word	0x20001528
 800dcf4:	20001530 	.word	0x20001530

0800dcf8 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800dd02:	683a      	ldr	r2, [r7, #0]
 800dd04:	6879      	ldr	r1, [r7, #4]
 800dd06:	2000      	movs	r0, #0
 800dd08:	f000 f806 	bl	800dd18 <FreeRTOS_InterfaceEndPointOnNetMask>
 800dd0c:	4603      	mov	r3, r0
    }
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3708      	adds	r7, #8
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
	...

0800dd18 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dd24:	4b2d      	ldr	r3, [pc, #180]	@ (800dddc <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800dd2a:	230e      	movs	r3, #14
 800dd2c:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800dd2e:	4b2c      	ldr	r3, [pc, #176]	@ (800dde0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	3301      	adds	r3, #1
 800dd34:	4a2a      	ldr	r2, [pc, #168]	@ (800dde0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dd36:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d22d      	bcs.n	800dd9c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800dd40:	4a27      	ldr	r2, [pc, #156]	@ (800dde0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	3304      	adds	r3, #4
 800dd46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd4a:	1c5a      	adds	r2, r3, #1
 800dd4c:	4924      	ldr	r1, [pc, #144]	@ (800dde0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	3304      	adds	r3, #4
 800dd52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800dd56:	e021      	b.n	800dd9c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d005      	beq.n	800dd6a <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d114      	bne.n	800dd94 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dd70:	f003 0304 	and.w	r3, r3, #4
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d10c      	bne.n	800dd94 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd80:	d00f      	beq.n	800dda2 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	405a      	eors	r2, r3
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d006      	beq.n	800dda2 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dd9a:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1da      	bne.n	800dd58 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d113      	bne.n	800ddd0 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	061a      	lsls	r2, r3, #24
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	021b      	lsls	r3, r3, #8
 800ddb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ddb4:	431a      	orrs	r2, r3
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	0a1b      	lsrs	r3, r3, #8
 800ddba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ddbe:	431a      	orrs	r2, r3
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	0e1b      	lsrs	r3, r3, #24
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	6879      	ldr	r1, [r7, #4]
 800ddca:	4806      	ldr	r0, [pc, #24]	@ (800dde4 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800ddcc:	f014 fcfa 	bl	80227c4 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800ddd0:	697b      	ldr	r3, [r7, #20]
    }
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3718      	adds	r7, #24
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	20001528 	.word	0x20001528
 800dde0:	20001530 	.word	0x20001530
 800dde4:	08026144 	.word	0x08026144

0800dde8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800ddf2:	4b17      	ldr	r3, [pc, #92]	@ (800de50 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800ddf8:	e020      	b.n	800de3c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d005      	beq.n	800de0c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d113      	bne.n	800de34 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800de12:	f003 0304 	and.w	r3, r3, #4
 800de16:	b2db      	uxtb	r3, r3
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d00b      	beq.n	800de34 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de26:	461a      	mov	r2, r3
 800de28:	6839      	ldr	r1, [r7, #0]
 800de2a:	f7fd fc0b 	bl	800b644 <xCompareIPv6_Address>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d007      	beq.n	800de44 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800de3a:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1db      	bne.n	800ddfa <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800de42:	e000      	b.n	800de46 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800de44:	bf00      	nop
            }

            return pxEndPoint;
 800de46:	68fb      	ldr	r3, [r7, #12]
        }
 800de48:	4618      	mov	r0, r3
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	20001528 	.word	0x20001528

0800de54 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800de54:	b5b0      	push	{r4, r5, r7, lr}
 800de56:	b0b0      	sub	sp, #192	@ 0xc0
 800de58:	af04      	add	r7, sp, #16
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	607a      	str	r2, [r7, #4]
 800de5e:	603b      	str	r3, [r7, #0]
 800de60:	460b      	mov	r3, r1
 800de62:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800de64:	2300      	movs	r3, #0
 800de66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800de6a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800de6e:	2200      	movs	r2, #0
 800de70:	601a      	str	r2, [r3, #0]
 800de72:	605a      	str	r2, [r3, #4]
 800de74:	609a      	str	r2, [r3, #8]
 800de76:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800de78:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800de7c:	2200      	movs	r2, #0
 800de7e:	601a      	str	r2, [r3, #0]
 800de80:	605a      	str	r2, [r3, #4]
 800de82:	609a      	str	r2, [r3, #8]
 800de84:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800de86:	897b      	ldrh	r3, [r7, #10]
 800de88:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d101      	bne.n	800de94 <pxEasyFit+0x40>
 800de90:	2301      	movs	r3, #1
 800de92:	e000      	b.n	800de96 <pxEasyFit+0x42>
 800de94:	2300      	movs	r3, #0
 800de96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800de9a:	2300      	movs	r3, #0
 800de9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800dea0:	2300      	movs	r3, #0
 800dea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800dea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d123      	bne.n	800def6 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	2210      	movs	r2, #16
 800deb2:	4619      	mov	r1, r3
 800deb4:	4888      	ldr	r0, [pc, #544]	@ (800e0d8 <pxEasyFit+0x284>)
 800deb6:	f015 fe36 	bl	8023b26 <memcmp>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d101      	bne.n	800dec4 <pxEasyFit+0x70>
 800dec0:	2301      	movs	r3, #1
 800dec2:	e000      	b.n	800dec6 <pxEasyFit+0x72>
 800dec4:	2300      	movs	r3, #0
 800dec6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800deca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d105      	bne.n	800dede <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	683a      	ldr	r2, [r7, #0]
 800ded6:	4619      	mov	r1, r3
 800ded8:	4880      	ldr	r0, [pc, #512]	@ (800e0dc <pxEasyFit+0x288>)
 800deda:	f014 fc73 	bl	80227c4 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 fa15 	bl	800e310 <xIPv6_GetIPType>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d101      	bne.n	800def0 <pxEasyFit+0x9c>
 800deec:	2301      	movs	r3, #1
 800deee:	e000      	b.n	800def2 <pxEasyFit+0x9e>
 800def0:	2300      	movs	r3, #0
 800def2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800def6:	68f8      	ldr	r0, [r7, #12]
 800def8:	f7ff fe26 	bl	800db48 <FreeRTOS_FirstEndPoint>
 800defc:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800df00:	e07d      	b.n	800dffe <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800df02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df06:	33e8      	adds	r3, #232	@ 0xe8
 800df08:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800df0c:	2206      	movs	r2, #6
 800df0e:	4618      	mov	r0, r3
 800df10:	f015 fe09 	bl	8023b26 <memcmp>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d101      	bne.n	800df1e <pxEasyFit+0xca>
 800df1a:	2301      	movs	r3, #1
 800df1c:	e000      	b.n	800df20 <pxEasyFit+0xcc>
 800df1e:	2300      	movs	r3, #0
 800df20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800df24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df28:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800df2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800df30:	b2db      	uxtb	r3, r3
 800df32:	461a      	mov	r2, r3
 800df34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800df38:	4293      	cmp	r3, r2
 800df3a:	d159      	bne.n	800dff0 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800df3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df40:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800df42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df44:	3301      	adds	r3, #1
 800df46:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800df48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d134      	bne.n	800dfba <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800df50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df54:	3338      	adds	r3, #56	@ 0x38
 800df56:	4618      	mov	r0, r3
 800df58:	f000 f9da 	bl	800e310 <xIPv6_GetIPType>
 800df5c:	4603      	mov	r3, r0
 800df5e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800df62:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800df66:	2b05      	cmp	r3, #5
 800df68:	d035      	beq.n	800dfd6 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800df6a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d101      	bne.n	800df76 <pxEasyFit+0x122>
 800df72:	2301      	movs	r3, #1
 800df74:	e000      	b.n	800df78 <pxEasyFit+0x124>
 800df76:	2300      	movs	r3, #0
 800df78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800df7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df80:	3338      	adds	r3, #56	@ 0x38
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	2210      	movs	r2, #16
 800df86:	4618      	mov	r0, r3
 800df88:	f015 fdcd 	bl	8023b26 <memcmp>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d106      	bne.n	800dfa0 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800df92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df96:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800df98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df9a:	3301      	adds	r3, #1
 800df9c:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800df9e:	e01a      	b.n	800dfd6 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800dfa0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800dfa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d114      	bne.n	800dfd6 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800dfac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfb0:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800dfb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800dfb8:	e00d      	b.n	800dfd6 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800dfba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d108      	bne.n	800dfda <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800dfc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfcc:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800dfce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800dfd4:	e001      	b.n	800dfda <pxEasyFit+0x186>
                           break;
 800dfd6:	bf00      	nop
 800dfd8:	e000      	b.n	800dfdc <pxEasyFit+0x188>
                        break;
 800dfda:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800dfdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d105      	bne.n	800dff0 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800dfe4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800dfea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfee:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800dff0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f7ff fdc9 	bl	800db8c <FreeRTOS_NextEndPoint>
 800dffa:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800dffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e002:	2b00      	cmp	r3, #0
 800e004:	f47f af7d 	bne.w	800df02 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800e008:	2300      	movs	r3, #0
 800e00a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e00e:	e017      	b.n	800e040 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800e010:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	33b0      	adds	r3, #176	@ 0xb0
 800e018:	443b      	add	r3, r7
 800e01a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	dd09      	ble.n	800e036 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800e022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	33b0      	adds	r3, #176	@ 0xb0
 800e02a:	443b      	add	r3, r7
 800e02c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800e030:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800e034:	e008      	b.n	800e048 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800e036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e03a:	3301      	adds	r3, #1
 800e03c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e040:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e044:	2b03      	cmp	r3, #3
 800e046:	dde3      	ble.n	800e010 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800e048:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d13c      	bne.n	800e0ca <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800e050:	897b      	ldrh	r3, [r7, #10]
 800e052:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e056:	4293      	cmp	r3, r2
 800e058:	d101      	bne.n	800e05e <pxEasyFit+0x20a>
 800e05a:	230a      	movs	r3, #10
 800e05c:	e000      	b.n	800e060 <pxEasyFit+0x20c>
 800e05e:	2302      	movs	r3, #2
 800e060:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800e064:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800e066:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800e06a:	2328      	movs	r3, #40	@ 0x28
 800e06c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800e070:	f001 fc70 	bl	800f954 <FreeRTOS_inet_ntop>
 800e074:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800e078:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800e07a:	f107 0210 	add.w	r2, r7, #16
 800e07e:	2328      	movs	r3, #40	@ 0x28
 800e080:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800e084:	f001 fc66 	bl	800f954 <FreeRTOS_inet_ntop>
 800e088:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800e08c:	8979      	ldrh	r1, [r7, #10]
 800e08e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e090:	461c      	mov	r4, r3
 800e092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e094:	461d      	mov	r5, r3
 800e096:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e098:	4618      	mov	r0, r3
 800e09a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d002      	beq.n	800e0a8 <pxEasyFit+0x254>
 800e0a2:	f107 0310 	add.w	r3, r7, #16
 800e0a6:	e000      	b.n	800e0aa <pxEasyFit+0x256>
 800e0a8:	4b0d      	ldr	r3, [pc, #52]	@ (800e0e0 <pxEasyFit+0x28c>)
 800e0aa:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e0ae:	2a00      	cmp	r2, #0
 800e0b0:	d002      	beq.n	800e0b8 <pxEasyFit+0x264>
 800e0b2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800e0b6:	e000      	b.n	800e0ba <pxEasyFit+0x266>
 800e0b8:	4a09      	ldr	r2, [pc, #36]	@ (800e0e0 <pxEasyFit+0x28c>)
 800e0ba:	9202      	str	r2, [sp, #8]
 800e0bc:	9301      	str	r3, [sp, #4]
 800e0be:	9000      	str	r0, [sp, #0]
 800e0c0:	462b      	mov	r3, r5
 800e0c2:	4622      	mov	r2, r4
 800e0c4:	4807      	ldr	r0, [pc, #28]	@ (800e0e4 <pxEasyFit+0x290>)
 800e0c6:	f014 fb7d 	bl	80227c4 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800e0ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	37b0      	adds	r7, #176	@ 0xb0
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bdb0      	pop	{r4, r5, r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	08027f9c 	.word	0x08027f9c
 800e0dc:	080261e0 	.word	0x080261e0
 800e0e0:	080261fc 	.word	0x080261fc
 800e0e4:	08026204 	.word	0x08026204

0800e0e8 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800e0e8:	b590      	push	{r4, r7, lr}
 800e0ea:	b097      	sub	sp, #92	@ 0x5c
 800e0ec:	af02      	add	r7, sp, #8
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d104      	bne.n	800e10e <FreeRTOS_MatchingEndpoint+0x26>
 800e104:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800e108:	485e      	ldr	r0, [pc, #376]	@ (800e284 <FreeRTOS_MatchingEndpoint+0x19c>)
 800e10a:	f7f3 fc7d 	bl	8001a08 <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800e112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e114:	3302      	adds	r3, #2
 800e116:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800e118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e11a:	f003 0303 	and.w	r3, r3, #3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d004      	beq.n	800e12c <FreeRTOS_MatchingEndpoint+0x44>
 800e122:	f240 319b 	movw	r1, #923	@ 0x39b
 800e126:	4857      	ldr	r0, [pc, #348]	@ (800e284 <FreeRTOS_MatchingEndpoint+0x19c>)
 800e128:	f7f3 fc6e 	bl	8001a08 <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800e12c:	4b56      	ldr	r3, [pc, #344]	@ (800e288 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	3301      	adds	r3, #1
 800e132:	4a55      	ldr	r2, [pc, #340]	@ (800e288 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800e134:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800e136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e138:	7b1a      	ldrb	r2, [r3, #12]
 800e13a:	7b5b      	ldrb	r3, [r3, #13]
 800e13c:	021b      	lsls	r3, r3, #8
 800e13e:	4313      	orrs	r3, r2
 800e140:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800e142:	2300      	movs	r3, #0
 800e144:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800e146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e14a:	2210      	movs	r2, #16
 800e14c:	2100      	movs	r1, #0
 800e14e:	4618      	mov	r0, r3
 800e150:	f014 fe61 	bl	8022e16 <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800e154:	f107 0314 	add.w	r3, r7, #20
 800e158:	2210      	movs	r2, #16
 800e15a:	2100      	movs	r1, #0
 800e15c:	4618      	mov	r0, r3
 800e15e:	f014 fe5a 	bl	8022e16 <memset>

            switch( usFrameType )
 800e162:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e164:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e168:	4293      	cmp	r3, r2
 800e16a:	d009      	beq.n	800e180 <FreeRTOS_MatchingEndpoint+0x98>
 800e16c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e170:	4293      	cmp	r3, r2
 800e172:	dc6a      	bgt.n	800e24a <FreeRTOS_MatchingEndpoint+0x162>
 800e174:	2b08      	cmp	r3, #8
 800e176:	d05d      	beq.n	800e234 <FreeRTOS_MatchingEndpoint+0x14c>
 800e178:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800e17c:	d015      	beq.n	800e1aa <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800e17e:	e064      	b.n	800e24a <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e182:	3316      	adds	r3, #22
 800e184:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800e188:	6818      	ldr	r0, [r3, #0]
 800e18a:	6859      	ldr	r1, [r3, #4]
 800e18c:	689a      	ldr	r2, [r3, #8]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e194:	3326      	adds	r3, #38	@ 0x26
 800e196:	f107 0414 	add.w	r4, r7, #20
 800e19a:	6818      	ldr	r0, [r3, #0]
 800e19c:	6859      	ldr	r1, [r3, #4]
 800e19e:	689a      	ldr	r2, [r3, #8]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e1a8:	e050      	b.n	800e24c <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800e1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1b0:	8a9b      	ldrh	r3, [r3, #20]
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1b8:	d108      	bne.n	800e1cc <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800e1ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1bc:	331c      	adds	r3, #28
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800e1c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1c4:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800e1c8:	617b      	str	r3, [r7, #20]
 800e1ca:	e00d      	b.n	800e1e8 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800e1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1ce:	8a9b      	ldrh	r3, [r3, #20]
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1d6:	d107      	bne.n	800e1e8 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800e1d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1da:	331c      	adds	r3, #28
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800e1e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1e2:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800e1e6:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ea:	061a      	lsls	r2, r3, #24
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ee:	021b      	lsls	r3, r3, #8
 800e1f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e1f4:	431a      	orrs	r2, r3
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f8:	0a1b      	lsrs	r3, r3, #8
 800e1fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e1fe:	431a      	orrs	r2, r3
 800e200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e202:	0e1b      	lsrs	r3, r3, #24
 800e204:	ea42 0103 	orr.w	r1, r2, r3
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	061a      	lsls	r2, r3, #24
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	021b      	lsls	r3, r3, #8
 800e210:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e214:	431a      	orrs	r2, r3
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	0a1b      	lsrs	r3, r3, #8
 800e21a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e21e:	431a      	orrs	r2, r3
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	0e1b      	lsrs	r3, r3, #24
 800e224:	4313      	orrs	r3, r2
 800e226:	461a      	mov	r2, r3
 800e228:	4818      	ldr	r0, [pc, #96]	@ (800e28c <FreeRTOS_MatchingEndpoint+0x1a4>)
 800e22a:	f014 facb 	bl	80227c4 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800e22e:	2301      	movs	r3, #1
 800e230:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e232:	e00b      	b.n	800e24c <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800e234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e236:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e23a:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800e23c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e23e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e242:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800e244:	2301      	movs	r3, #1
 800e246:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e248:	e000      	b.n	800e24c <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800e24a:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800e24c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d113      	bne.n	800e27a <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800e252:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e254:	f107 030c 	add.w	r3, r7, #12
 800e258:	6810      	ldr	r0, [r2, #0]
 800e25a:	6018      	str	r0, [r3, #0]
 800e25c:	8892      	ldrh	r2, [r2, #4]
 800e25e:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800e260:	f107 0014 	add.w	r0, r7, #20
 800e264:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e268:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800e26a:	f107 030c 	add.w	r3, r7, #12
 800e26e:	9300      	str	r3, [sp, #0]
 800e270:	4603      	mov	r3, r0
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f7ff fdee 	bl	800de54 <pxEasyFit>
 800e278:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800e27a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800e27c:	4618      	mov	r0, r3
 800e27e:	3754      	adds	r7, #84	@ 0x54
 800e280:	46bd      	mov	sp, r7
 800e282:	bd90      	pop	{r4, r7, pc}
 800e284:	0802622c 	.word	0x0802622c
 800e288:	20001530 	.word	0x20001530
 800e28c:	0802625c 	.word	0x0802625c

0800e290 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800e298:	4b1b      	ldr	r3, [pc, #108]	@ (800e308 <FreeRTOS_FindGateWay+0x78>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800e29e:	e028      	b.n	800e2f2 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2b60      	cmp	r3, #96	@ 0x60
 800e2a4:	d112      	bne.n	800e2cc <FreeRTOS_FindGateWay+0x3c>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e2ac:	f003 0304 	and.w	r3, r3, #4
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00a      	beq.n	800e2cc <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	335c      	adds	r3, #92	@ 0x5c
 800e2ba:	2210      	movs	r2, #16
 800e2bc:	4619      	mov	r1, r3
 800e2be:	4813      	ldr	r0, [pc, #76]	@ (800e30c <FreeRTOS_FindGateWay+0x7c>)
 800e2c0:	f015 fc31 	bl	8023b26 <memcmp>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00f      	beq.n	800e2ea <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800e2ca:	e017      	b.n	800e2fc <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b40      	cmp	r3, #64	@ 0x40
 800e2d0:	d10b      	bne.n	800e2ea <FreeRTOS_FindGateWay+0x5a>
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e2d8:	f003 0304 	and.w	r3, r3, #4
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d103      	bne.n	800e2ea <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d107      	bne.n	800e2fa <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800e2f0:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1d3      	bne.n	800e2a0 <FreeRTOS_FindGateWay+0x10>
 800e2f8:	e000      	b.n	800e2fc <FreeRTOS_FindGateWay+0x6c>
                            break;
 800e2fa:	bf00      	nop
        }

        return pxEndPoint;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
    }
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	20001528 	.word	0x20001528
 800e30c:	08027f54 	.word	0x08027f54

0800e310 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800e310:	b580      	push	{r7, lr}
 800e312:	b086      	sub	sp, #24
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800e318:	2305      	movs	r3, #5
 800e31a:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d046      	beq.n	800e3b0 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800e322:	2300      	movs	r3, #0
 800e324:	613b      	str	r3, [r7, #16]
 800e326:	e040      	b.n	800e3aa <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	021b      	lsls	r3, r3, #8
 800e32e:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	785b      	ldrb	r3, [r3, #1]
 800e334:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800e336:	4313      	orrs	r3, r2
 800e338:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800e33a:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800e33c:	491f      	ldr	r1, [pc, #124]	@ (800e3bc <xIPv6_GetIPType+0xac>)
 800e33e:	693a      	ldr	r2, [r7, #16]
 800e340:	4613      	mov	r3, r2
 800e342:	005b      	lsls	r3, r3, #1
 800e344:	4413      	add	r3, r2
 800e346:	005b      	lsls	r3, r3, #1
 800e348:	440b      	add	r3, r1
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	2b04      	cmp	r3, #4
 800e34e:	d108      	bne.n	800e362 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7fd f929 	bl	800b5a8 <xIsIPv6Loopback>
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d002      	beq.n	800e362 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800e35c:	2304      	movs	r3, #4
 800e35e:	75fb      	strb	r3, [r7, #23]
                        break;
 800e360:	e026      	b.n	800e3b0 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800e362:	4916      	ldr	r1, [pc, #88]	@ (800e3bc <xIPv6_GetIPType+0xac>)
 800e364:	693a      	ldr	r2, [r7, #16]
 800e366:	4613      	mov	r3, r2
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	4413      	add	r3, r2
 800e36c:	005b      	lsls	r3, r3, #1
 800e36e:	440b      	add	r3, r1
 800e370:	3302      	adds	r3, #2
 800e372:	881a      	ldrh	r2, [r3, #0]
 800e374:	89fb      	ldrh	r3, [r7, #14]
 800e376:	4013      	ands	r3, r2
 800e378:	b299      	uxth	r1, r3
 800e37a:	4810      	ldr	r0, [pc, #64]	@ (800e3bc <xIPv6_GetIPType+0xac>)
 800e37c:	693a      	ldr	r2, [r7, #16]
 800e37e:	4613      	mov	r3, r2
 800e380:	005b      	lsls	r3, r3, #1
 800e382:	4413      	add	r3, r2
 800e384:	005b      	lsls	r3, r3, #1
 800e386:	4403      	add	r3, r0
 800e388:	3304      	adds	r3, #4
 800e38a:	881b      	ldrh	r3, [r3, #0]
 800e38c:	4299      	cmp	r1, r3
 800e38e:	d109      	bne.n	800e3a4 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800e390:	490a      	ldr	r1, [pc, #40]	@ (800e3bc <xIPv6_GetIPType+0xac>)
 800e392:	693a      	ldr	r2, [r7, #16]
 800e394:	4613      	mov	r3, r2
 800e396:	005b      	lsls	r3, r3, #1
 800e398:	4413      	add	r3, r2
 800e39a:	005b      	lsls	r3, r3, #1
 800e39c:	440b      	add	r3, r1
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	75fb      	strb	r3, [r7, #23]
                    break;
 800e3a2:	e005      	b.n	800e3b0 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	613b      	str	r3, [r7, #16]
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	2b04      	cmp	r3, #4
 800e3ae:	ddbb      	ble.n	800e328 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800e3b0:	7dfb      	ldrb	r3, [r7, #23]
    }
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3718      	adds	r7, #24
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	08027fac 	.word	0x08027fac

0800e3c0 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d105      	bne.n	800e3de <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800e3d2:	4a16      	ldr	r2, [pc, #88]	@ (800e42c <pcEndpointName+0x6c>)
 800e3d4:	6879      	ldr	r1, [r7, #4]
 800e3d6:	68b8      	ldr	r0, [r7, #8]
 800e3d8:	f015 fa20 	bl	802381c <snprintf>
 800e3dc:	e020      	b.n	800e420 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e3e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d002      	beq.n	800e3f4 <pcEndpointName+0x34>
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d007      	beq.n	800e402 <pcEndpointName+0x42>
 800e3f2:	e00f      	b.n	800e414 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800e3f4:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	68ba      	ldr	r2, [r7, #8]
 800e3fa:	2002      	movs	r0, #2
 800e3fc:	f001 faaa 	bl	800f954 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800e400:	e00e      	b.n	800e420 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	68ba      	ldr	r2, [r7, #8]
 800e40c:	200a      	movs	r0, #10
 800e40e:	f001 faa1 	bl	800f954 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800e412:	e005      	b.n	800e420 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800e414:	4a05      	ldr	r2, [pc, #20]	@ (800e42c <pcEndpointName+0x6c>)
 800e416:	6879      	ldr	r1, [r7, #4]
 800e418:	68b8      	ldr	r0, [r7, #8]
 800e41a:	f015 f9ff 	bl	802381c <snprintf>
                    break;
 800e41e:	bf00      	nop
            }
        }

        return pcBuffer;
 800e420:	68bb      	ldr	r3, [r7, #8]
    }
 800e422:	4618      	mov	r0, r3
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	0802627c 	.word	0x0802627c

0800e430 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b086      	sub	sp, #24
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f002 fc3f 	bl	8010cc0 <xSocketValid>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d102      	bne.n	800e44e <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800e448:	2300      	movs	r3, #0
 800e44a:	617b      	str	r3, [r7, #20]
 800e44c:	e015      	b.n	800e47a <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d006      	beq.n	800e462 <prvValidSocket+0x32>
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	69db      	ldr	r3, [r3, #28]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d102      	bne.n	800e462 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800e45c:	2300      	movs	r3, #0
 800e45e:	617b      	str	r3, [r7, #20]
 800e460:	e00b      	b.n	800e47a <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d002      	beq.n	800e476 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800e470:	2300      	movs	r3, #0
 800e472:	617b      	str	r3, [r7, #20]
 800e474:	e001      	b.n	800e47a <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800e476:	2301      	movs	r3, #1
 800e478:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e47a:	697b      	ldr	r3, [r7, #20]
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3718      	adds	r7, #24
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800e484:	b580      	push	{r7, lr}
 800e486:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800e488:	4803      	ldr	r0, [pc, #12]	@ (800e498 <vNetworkSocketsInit+0x14>)
 800e48a:	f7f5 f9a7 	bl	80037dc <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800e48e:	4803      	ldr	r0, [pc, #12]	@ (800e49c <vNetworkSocketsInit+0x18>)
 800e490:	f7f5 f9a4 	bl	80037dc <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800e494:	bf00      	nop
 800e496:	bd80      	pop	{r7, pc}
 800e498:	200015f4 	.word	0x200015f4
 800e49c:	20001608 	.word	0x20001608

0800e4a0 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	607a      	str	r2, [r7, #4]
 800e4ac:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800e4b6:	f7fb ff97 	bl	800a3e8 <xIPIsNetworkTaskReady>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d102      	bne.n	800e4c6 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	617b      	str	r3, [r7, #20]
 800e4c4:	e05e      	b.n	800e584 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d004      	beq.n	800e4d6 <prvDetermineSocketSize+0x36>
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2b0a      	cmp	r3, #10
 800e4d0:	d001      	beq.n	800e4d6 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2b02      	cmp	r3, #2
 800e4da:	d002      	beq.n	800e4e2 <prvDetermineSocketSize+0x42>
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2b0a      	cmp	r3, #10
 800e4e0:	d101      	bne.n	800e4e6 <prvDetermineSocketSize+0x46>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e000      	b.n	800e4e8 <prvDetermineSocketSize+0x48>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d104      	bne.n	800e4f6 <prvDetermineSocketSize+0x56>
 800e4ec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800e4f0:	4827      	ldr	r0, [pc, #156]	@ (800e590 <prvDetermineSocketSize+0xf0>)
 800e4f2:	f7f3 fa89 	bl	8001a08 <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800e4f6:	4b27      	ldr	r3, [pc, #156]	@ (800e594 <prvDetermineSocketSize+0xf4>)
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fe:	d004      	beq.n	800e50a <prvDetermineSocketSize+0x6a>
 800e500:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800e504:	4822      	ldr	r0, [pc, #136]	@ (800e590 <prvDetermineSocketSize+0xf0>)
 800e506:	f7f3 fa7f 	bl	8001a08 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800e50a:	4b23      	ldr	r3, [pc, #140]	@ (800e598 <prvDetermineSocketSize+0xf8>)
 800e50c:	689b      	ldr	r3, [r3, #8]
 800e50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e512:	d004      	beq.n	800e51e <prvDetermineSocketSize+0x7e>
 800e514:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800e518:	481d      	ldr	r0, [pc, #116]	@ (800e590 <prvDetermineSocketSize+0xf0>)
 800e51a:	f7f3 fa75 	bl	8001a08 <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2b11      	cmp	r3, #17
 800e522:	d110      	bne.n	800e546 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	2b02      	cmp	r3, #2
 800e528:	d009      	beq.n	800e53e <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800e52a:	2300      	movs	r3, #0
 800e52c:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d004      	beq.n	800e53e <prvDetermineSocketSize+0x9e>
 800e534:	f240 2106 	movw	r1, #518	@ 0x206
 800e538:	4815      	ldr	r0, [pc, #84]	@ (800e590 <prvDetermineSocketSize+0xf0>)
 800e53a:	f7f3 fa65 	bl	8001a08 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	2270      	movs	r2, #112	@ 0x70
 800e542:	601a      	str	r2, [r3, #0]
 800e544:	e01e      	b.n	800e584 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2b06      	cmp	r3, #6
 800e54a:	d111      	bne.n	800e570 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d009      	beq.n	800e566 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800e552:	2300      	movs	r3, #0
 800e554:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d004      	beq.n	800e566 <prvDetermineSocketSize+0xc6>
 800e55c:	f240 2113 	movw	r1, #531	@ 0x213
 800e560:	480b      	ldr	r0, [pc, #44]	@ (800e590 <prvDetermineSocketSize+0xf0>)
 800e562:	f7f3 fa51 	bl	8001a08 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e56c:	601a      	str	r2, [r3, #0]
 800e56e:	e009      	b.n	800e584 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800e570:	2300      	movs	r3, #0
 800e572:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d004      	beq.n	800e584 <prvDetermineSocketSize+0xe4>
 800e57a:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800e57e:	4804      	ldr	r0, [pc, #16]	@ (800e590 <prvDetermineSocketSize+0xf0>)
 800e580:	f7f3 fa42 	bl	8001a08 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800e584:	697b      	ldr	r3, [r7, #20]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3718      	adds	r7, #24
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	08026284 	.word	0x08026284
 800e594:	200015f4 	.word	0x200015f4
 800e598:	20001608 	.word	0x20001608

0800e59c <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800e5ac:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	7a1b      	ldrb	r3, [r3, #8]
 800e5b4:	f003 0301 	and.w	r3, r3, #1
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00a      	beq.n	800e5d4 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800e5be:	2314      	movs	r3, #20
 800e5c0:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800e5c8:	89fb      	ldrh	r3, [r7, #14]
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	b29a      	uxth	r2, r3
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e5da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800e5de:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800e5e2:	f640 3068 	movw	r0, #2920	@ 0xb68
 800e5e6:	f7fc fc85 	bl	800aef4 <FreeRTOS_round_up>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e5f8:	08db      	lsrs	r3, r3, #3
 800e5fa:	4a10      	ldr	r2, [pc, #64]	@ (800e63c <prvInitialiseTCPFields+0xa0>)
 800e5fc:	fba2 2303 	umull	r2, r3, r2, r3
 800e600:	099b      	lsrs	r3, r3, #6
 800e602:	4619      	mov	r1, r3
 800e604:	2001      	movs	r0, #1
 800e606:	f7fc fc35 	bl	800ae74 <FreeRTOS_max_size_t>
 800e60a:	4602      	mov	r2, r0
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e618:	08db      	lsrs	r3, r3, #3
 800e61a:	4a08      	ldr	r2, [pc, #32]	@ (800e63c <prvInitialiseTCPFields+0xa0>)
 800e61c:	fba2 2303 	umull	r2, r3, r2, r3
 800e620:	099b      	lsrs	r3, r3, #6
 800e622:	4619      	mov	r1, r3
 800e624:	2001      	movs	r0, #1
 800e626:	f7fc fc25 	bl	800ae74 <FreeRTOS_max_size_t>
 800e62a:	4602      	mov	r2, r0
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800e632:	bf00      	nop
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	2ce33e6d 	.word	0x2ce33e6d

0800e640 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b08a      	sub	sp, #40	@ 0x28
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800e64c:	2301      	movs	r3, #1
 800e64e:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2b0a      	cmp	r3, #10
 800e658:	d002      	beq.n	800e660 <FreeRTOS_socket+0x20>
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2b02      	cmp	r3, #2
 800e65e:	d101      	bne.n	800e664 <FreeRTOS_socket+0x24>
 800e660:	2301      	movs	r3, #1
 800e662:	e000      	b.n	800e666 <FreeRTOS_socket+0x26>
 800e664:	2300      	movs	r3, #0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d104      	bne.n	800e674 <FreeRTOS_socket+0x34>
 800e66a:	f240 2171 	movw	r1, #625	@ 0x271
 800e66e:	4845      	ldr	r0, [pc, #276]	@ (800e784 <FreeRTOS_socket+0x144>)
 800e670:	f7f3 f9ca 	bl	8001a08 <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d10c      	bne.n	800e694 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d005      	beq.n	800e68c <FreeRTOS_socket+0x4c>
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	2b02      	cmp	r3, #2
 800e684:	d105      	bne.n	800e692 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800e686:	2311      	movs	r3, #17
 800e688:	623b      	str	r3, [r7, #32]
                    break;
 800e68a:	e003      	b.n	800e694 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800e68c:	2306      	movs	r3, #6
 800e68e:	623b      	str	r3, [r7, #32]
                    break;
 800e690:	e000      	b.n	800e694 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800e692:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800e694:	f107 0314 	add.w	r3, r7, #20
 800e698:	6a3a      	ldr	r2, [r7, #32]
 800e69a:	68b9      	ldr	r1, [r7, #8]
 800e69c:	68f8      	ldr	r0, [r7, #12]
 800e69e:	f7ff feff 	bl	800e4a0 <prvDetermineSocketSize>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d103      	bne.n	800e6b0 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e6ae:	e063      	b.n	800e778 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7f8 f986 	bl	80069c4 <pvPortMalloc>
 800e6b8:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d103      	bne.n	800e6c8 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c4:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800e6c6:	e057      	b.n	800e778 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800e6c8:	f7f4 feb3 	bl	8003432 <xEventGroupCreate>
 800e6cc:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d106      	bne.n	800e6e2 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800e6d4:	69f8      	ldr	r0, [r7, #28]
 800e6d6:	f7f8 fa49 	bl	8006b6c <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e6da:	f04f 33ff 	mov.w	r3, #4294967295
 800e6de:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6e0:	e04a      	b.n	800e778 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	69f8      	ldr	r0, [r7, #28]
 800e6ea:	f014 fb94 	bl	8022e16 <memset>

            pxSocket->xEventGroup = xEventGroup;
 800e6ee:	69fb      	ldr	r3, [r7, #28]
 800e6f0:	69ba      	ldr	r2, [r7, #24]
 800e6f2:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	d008      	beq.n	800e70c <FreeRTOS_socket+0xcc>
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b0a      	cmp	r3, #10
 800e6fe:	d10b      	bne.n	800e718 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e700:	69fa      	ldr	r2, [r7, #28]
 800e702:	7a13      	ldrb	r3, [r2, #8]
 800e704:	f043 0301 	orr.w	r3, r3, #1
 800e708:	7213      	strb	r3, [r2, #8]
                        break;
 800e70a:	e009      	b.n	800e720 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e70c:	69fa      	ldr	r2, [r7, #28]
 800e70e:	7a13      	ldrb	r3, [r2, #8]
 800e710:	f36f 0300 	bfc	r3, #0, #1
 800e714:	7213      	strb	r3, [r2, #8]
                        break;
 800e716:	e003      	b.n	800e720 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800e718:	481b      	ldr	r0, [pc, #108]	@ (800e788 <FreeRTOS_socket+0x148>)
 800e71a:	f014 f853 	bl	80227c4 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800e71e:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800e720:	6a3b      	ldr	r3, [r7, #32]
 800e722:	2b11      	cmp	r3, #17
 800e724:	d105      	bne.n	800e732 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	3354      	adds	r3, #84	@ 0x54
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7f5 f856 	bl	80037dc <vListInitialise>
 800e730:	e007      	b.n	800e742 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800e732:	6a3b      	ldr	r3, [r7, #32]
 800e734:	2b06      	cmp	r3, #6
 800e736:	d104      	bne.n	800e742 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	4619      	mov	r1, r3
 800e73c:	69f8      	ldr	r0, [r7, #28]
 800e73e:	f7ff ff2d 	bl	800e59c <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	330c      	adds	r3, #12
 800e746:	4618      	mov	r0, r3
 800e748:	f7f5 f868 	bl	800381c <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	69fa      	ldr	r2, [r7, #28]
 800e750:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800e752:	69fb      	ldr	r3, [r7, #28]
 800e754:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e758:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e760:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	2202      	movs	r2, #2
 800e766:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800e778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3728      	adds	r7, #40	@ 0x28
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	08026284 	.word	0x08026284
 800e788:	080262b4 	.word	0x080262b4

0800e78c <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800e794:	2200      	movs	r2, #0
 800e796:	2111      	movs	r1, #17
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f7ff fe49 	bl	800e430 <prvValidSocket>
 800e79e:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d10d      	bne.n	800e7c2 <prvMakeSureSocketIsBound+0x36>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	69db      	ldr	r3, [r3, #28]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d109      	bne.n	800e7c2 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 f934 	bl	800ea20 <FreeRTOS_bind>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d001      	beq.n	800e7c2 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3710      	adds	r7, #16
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b088      	sub	sp, #32
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	607a      	str	r2, [r7, #4]
 800e7d8:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800e7de:	2304      	movs	r3, #4
 800e7e0:	753b      	strb	r3, [r7, #20]
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e8:	785b      	ldrb	r3, [r3, #1]
 800e7ea:	2b02      	cmp	r3, #2
 800e7ec:	d006      	beq.n	800e7fc <prvSendUDPPacket+0x30>
 800e7ee:	2b0a      	cmp	r3, #10
 800e7f0:	d109      	bne.n	800e806 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800e7f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7f4:	68b8      	ldr	r0, [r7, #8]
 800e7f6:	f7fd f903 	bl	800ba00 <xSend_UDP_Update_IPv6>
                break;
 800e7fa:	e005      	b.n	800e808 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800e7fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7fe:	68b8      	ldr	r0, [r7, #8]
 800e800:	f7fc fd68 	bl	800b2d4 <xSend_UDP_Update_IPv4>
                break;
 800e804:	e000      	b.n	800e808 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e806:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e80c:	441a      	add	r2, r3
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800e812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e814:	885a      	ldrh	r2, [r3, #2]
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	b29a      	uxth	r2, r3
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e828:	3306      	adds	r3, #6
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800e830:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800e836:	f107 0314 	add.w	r3, r7, #20
 800e83a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fb fa37 	bl	8009cb0 <xSendEventStructToIPTask>
 800e842:	4603      	mov	r3, r0
 800e844:	2b01      	cmp	r3, #1
 800e846:	d10b      	bne.n	800e860 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00d      	beq.n	800e870 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e858:	6879      	ldr	r1, [r7, #4]
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	4798      	blx	r3
 800e85e:	e007      	b.n	800e870 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	f003 0301 	and.w	r3, r3, #1
 800e866:	2b00      	cmp	r3, #0
 800e868:	d102      	bne.n	800e870 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e86a:	68b8      	ldr	r0, [r7, #8]
 800e86c:	f009 f902 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800e870:	69fb      	ldr	r3, [r7, #28]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3720      	adds	r7, #32
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b08e      	sub	sp, #56	@ 0x38
 800e87e:	af04      	add	r7, sp, #16
 800e880:	60f8      	str	r0, [r7, #12]
 800e882:	60b9      	str	r1, [r7, #8]
 800e884:	607a      	str	r2, [r7, #4]
 800e886:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e888:	2300      	movs	r3, #0
 800e88a:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e890:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	f003 0310 	and.w	r3, r3, #16
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d104      	bne.n	800e8a6 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800e89c:	f7fc f94a 	bl	800ab34 <xIsCallingFromIPTask>
 800e8a0:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d001      	beq.n	800e8aa <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	f003 0301 	and.w	r3, r3, #1
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d128      	bne.n	800e906 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800e8b4:	f107 0310 	add.w	r3, r7, #16
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7f6 fdbd 	bl	8005438 <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800e8be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	69ba      	ldr	r2, [r7, #24]
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f009 f86b 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 800e8ce:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d01b      	beq.n	800e90e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800e8d6:	6a3b      	ldr	r3, [r7, #32]
 800e8d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e8da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8dc:	4413      	add	r3, r2
 800e8de:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	68b9      	ldr	r1, [r7, #8]
 800e8e4:	69f8      	ldr	r0, [r7, #28]
 800e8e6:	f014 f989 	bl	8022bfc <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800e8ea:	f107 0218 	add.w	r2, r7, #24
 800e8ee:	f107 0310 	add.w	r3, r7, #16
 800e8f2:	4611      	mov	r1, r2
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7f6 fdd7 	bl	80054a8 <xTaskCheckForTimeOut>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d106      	bne.n	800e90e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800e900:	2300      	movs	r3, #0
 800e902:	61bb      	str	r3, [r7, #24]
 800e904:	e003      	b.n	800e90e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800e906:	68b8      	ldr	r0, [r7, #8]
 800e908:	f7fc f8cc 	bl	800aaa4 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800e90c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800e90e:	6a3b      	ldr	r3, [r7, #32]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d010      	beq.n	800e936 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e918:	6a3b      	ldr	r3, [r7, #32]
 800e91a:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e920:	9202      	str	r2, [sp, #8]
 800e922:	9301      	str	r3, [sp, #4]
 800e924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e926:	9300      	str	r3, [sp, #0]
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	6a39      	ldr	r1, [r7, #32]
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	f7ff ff4c 	bl	800e7cc <prvSendUDPPacket>
 800e934:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800e936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3728      	adds	r7, #40	@ 0x28
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b090      	sub	sp, #64	@ 0x40
 800e944:	af02      	add	r7, sp, #8
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	607a      	str	r2, [r7, #4]
 800e94c:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800e956:	2300      	movs	r3, #0
 800e958:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800e95a:	2300      	movs	r3, #0
 800e95c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800e95e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e960:	2b00      	cmp	r3, #0
 800e962:	d013      	beq.n	800e98c <FreeRTOS_sendto+0x4c>
 800e964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e966:	785b      	ldrb	r3, [r3, #1]
 800e968:	2b0a      	cmp	r3, #10
 800e96a:	d00f      	beq.n	800e98c <FreeRTOS_sendto+0x4c>
 800e96c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e96e:	785b      	ldrb	r3, [r3, #1]
 800e970:	2b02      	cmp	r3, #2
 800e972:	d00b      	beq.n	800e98c <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800e974:	f107 0310 	add.w	r3, r7, #16
 800e978:	2218      	movs	r2, #24
 800e97a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e97c:	4618      	mov	r0, r3
 800e97e:	f014 f93d 	bl	8022bfc <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800e982:	2302      	movs	r3, #2
 800e984:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800e986:	f107 0310 	add.w	r3, r7, #16
 800e98a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800e98c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d104      	bne.n	800e99c <FreeRTOS_sendto+0x5c>
 800e992:	f240 6143 	movw	r1, #1603	@ 0x643
 800e996:	4820      	ldr	r0, [pc, #128]	@ (800ea18 <FreeRTOS_sendto+0xd8>)
 800e998:	f7f3 f836 	bl	8001a08 <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d104      	bne.n	800e9ac <FreeRTOS_sendto+0x6c>
 800e9a2:	f240 6144 	movw	r1, #1604	@ 0x644
 800e9a6:	481c      	ldr	r0, [pc, #112]	@ (800ea18 <FreeRTOS_sendto+0xd8>)
 800e9a8:	f7f3 f82e 	bl	8001a08 <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800e9ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9ae:	785b      	ldrb	r3, [r3, #1]
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	d007      	beq.n	800e9c4 <FreeRTOS_sendto+0x84>
 800e9b4:	2b0a      	cmp	r3, #10
 800e9b6:	d10b      	bne.n	800e9d0 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800e9b8:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800e9bc:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800e9be:	233e      	movs	r3, #62	@ 0x3e
 800e9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e9c2:	e00c      	b.n	800e9de <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800e9c4:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800e9c8:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800e9ca:	232a      	movs	r3, #42	@ 0x2a
 800e9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e9ce:	e006      	b.n	800e9de <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800e9d0:	4812      	ldr	r0, [pc, #72]	@ (800ea1c <FreeRTOS_sendto+0xdc>)
 800e9d2:	f013 fef7 	bl	80227c4 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e9d6:	f06f 0315 	mvn.w	r3, #21
 800e9da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e9dc:	bf00      	nop
    }

    if( lReturn == 0 )
 800e9de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d114      	bne.n	800ea0e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d810      	bhi.n	800ea0e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800e9ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9ee:	f7ff fecd 	bl	800e78c <prvMakeSureSocketIsBound>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d10a      	bne.n	800ea0e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800e9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9fa:	9301      	str	r3, [sp, #4]
 800e9fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	68b9      	ldr	r1, [r7, #8]
 800ea06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea08:	f7ff ff37 	bl	800e87a <prvSendTo_ActualSend>
 800ea0c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800ea0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800ea10:	4618      	mov	r0, r3
 800ea12:	3738      	adds	r7, #56	@ 0x38
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	08026284 	.word	0x08026284
 800ea1c:	08026338 	.word	0x08026338

0800ea20 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b090      	sub	sp, #64	@ 0x40
 800ea24:	af02      	add	r7, sp, #8
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d013      	beq.n	800ea62 <FreeRTOS_bind+0x42>
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	785b      	ldrb	r3, [r3, #1]
 800ea3e:	2b0a      	cmp	r3, #10
 800ea40:	d00f      	beq.n	800ea62 <FreeRTOS_bind+0x42>
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	785b      	ldrb	r3, [r3, #1]
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	d00b      	beq.n	800ea62 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800ea4a:	f107 0310 	add.w	r3, r7, #16
 800ea4e:	2218      	movs	r2, #24
 800ea50:	68b9      	ldr	r1, [r7, #8]
 800ea52:	4618      	mov	r0, r3
 800ea54:	f014 f8d2 	bl	8022bfc <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800ea58:	2302      	movs	r3, #2
 800ea5a:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800ea5c:	f107 0310 	add.w	r3, r7, #16
 800ea60:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800ea62:	f7fc f867 	bl	800ab34 <xIsCallingFromIPTask>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d004      	beq.n	800ea76 <FreeRTOS_bind+0x56>
 800ea6c:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800ea70:	484b      	ldr	r0, [pc, #300]	@ (800eba0 <FreeRTOS_bind+0x180>)
 800ea72:	f7f2 ffc9 	bl	8001a08 <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800ea76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea78:	f002 f922 	bl	8010cc0 <xSocketValid>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d103      	bne.n	800ea8a <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ea82:	f06f 0315 	mvn.w	r3, #21
 800ea86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea88:	e084      	b.n	800eb94 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800ea8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea8c:	69db      	ldr	r3, [r3, #28]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d009      	beq.n	800eaa6 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800ea92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea94:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ea96:	4619      	mov	r1, r3
 800ea98:	4842      	ldr	r0, [pc, #264]	@ (800eba4 <FreeRTOS_bind+0x184>)
 800ea9a:	f013 fe93 	bl	80227c4 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ea9e:	f06f 0315 	mvn.w	r3, #21
 800eaa2:	637b      	str	r3, [r7, #52]	@ 0x34
 800eaa4:	e076      	b.n	800eb94 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800eaa6:	2309      	movs	r3, #9
 800eaa8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d042      	beq.n	800eb3c <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	785b      	ldrb	r3, [r3, #1]
 800eaba:	2b02      	cmp	r3, #2
 800eabc:	d010      	beq.n	800eae0 <FreeRTOS_bind+0xc0>
 800eabe:	2b0a      	cmp	r3, #10
 800eac0:	d129      	bne.n	800eb16 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800eac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	3308      	adds	r3, #8
 800eacc:	2210      	movs	r2, #16
 800eace:	4619      	mov	r1, r3
 800ead0:	f014 f894 	bl	8022bfc <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800ead4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ead6:	7a13      	ldrb	r3, [r2, #8]
 800ead8:	f043 0301 	orr.w	r3, r3, #1
 800eadc:	7213      	strb	r3, [r2, #8]
                        break;
 800eade:	e01e      	b.n	800eb1e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	689b      	ldr	r3, [r3, #8]
 800eae4:	061a      	lsls	r2, r3, #24
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	021b      	lsls	r3, r3, #8
 800eaec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800eaf0:	431a      	orrs	r2, r3
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	689b      	ldr	r3, [r3, #8]
 800eaf6:	0a1b      	lsrs	r3, r3, #8
 800eaf8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800eafc:	431a      	orrs	r2, r3
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	689b      	ldr	r3, [r3, #8]
 800eb02:	0e1b      	lsrs	r3, r3, #24
 800eb04:	431a      	orrs	r2, r3
 800eb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb08:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800eb0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb0c:	7a13      	ldrb	r3, [r2, #8]
 800eb0e:	f36f 0300 	bfc	r3, #0, #1
 800eb12:	7213      	strb	r3, [r2, #8]
                        break;
 800eb14:	e003      	b.n	800eb1e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800eb16:	4824      	ldr	r0, [pc, #144]	@ (800eba8 <FreeRTOS_bind+0x188>)
 800eb18:	f013 fe54 	bl	80227c4 <lUDPLoggingPrintf>
                    break;
 800eb1c:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	885b      	ldrh	r3, [r3, #2]
 800eb22:	021b      	lsls	r3, r3, #8
 800eb24:	b21a      	sxth	r2, r3
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	885b      	ldrh	r3, [r3, #2]
 800eb2a:	0a1b      	lsrs	r3, r3, #8
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	b21b      	sxth	r3, r3
 800eb30:	4313      	orrs	r3, r2
 800eb32:	b21b      	sxth	r3, r3
 800eb34:	b29a      	uxth	r2, r3
 800eb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb38:	871a      	strh	r2, [r3, #56]	@ 0x38
 800eb3a:	e009      	b.n	800eb50 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800eb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb3e:	2200      	movs	r2, #0
 800eb40:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800eb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb44:	3328      	adds	r3, #40	@ 0x28
 800eb46:	2210      	movs	r2, #16
 800eb48:	2100      	movs	r1, #0
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f014 f963 	bl	8022e16 <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800eb50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800eb54:	f04f 31ff 	mov.w	r1, #4294967295
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7fb f8a9 	bl	8009cb0 <xSendEventStructToIPTask>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d106      	bne.n	800eb72 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800eb64:	4811      	ldr	r0, [pc, #68]	@ (800ebac <FreeRTOS_bind+0x18c>)
 800eb66:	f013 fe2d 	bl	80227c4 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800eb6a:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800eb6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb70:	e010      	b.n	800eb94 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800eb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb74:	6858      	ldr	r0, [r3, #4]
 800eb76:	f04f 33ff 	mov.w	r3, #4294967295
 800eb7a:	9300      	str	r3, [sp, #0]
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	2201      	movs	r2, #1
 800eb80:	2110      	movs	r1, #16
 800eb82:	f7f4 fc6d 	bl	8003460 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800eb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb88:	69db      	ldr	r3, [r3, #28]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d102      	bne.n	800eb94 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eb8e:	f06f 0315 	mvn.w	r3, #21
 800eb92:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800eb94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3738      	adds	r7, #56	@ 0x38
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	08026284 	.word	0x08026284
 800eba4:	08026360 	.word	0x08026360
 800eba8:	0802638c 	.word	0x0802638c
 800ebac:	080263b4 	.word	0x080263b4

0800ebb0 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
 800ebbc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d004      	beq.n	800ebd2 <prvSocketBindAdd+0x22>
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ebce:	2b06      	cmp	r3, #6
 800ebd0:	d024      	beq.n	800ec1c <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	885b      	ldrh	r3, [r3, #2]
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 fdf1 	bl	800f7c0 <pxListFindListItemWithValue>
 800ebde:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d01b      	beq.n	800ec1c <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ebea:	2b06      	cmp	r3, #6
 800ebec:	d101      	bne.n	800ebf2 <prvSocketBindAdd+0x42>
 800ebee:	493e      	ldr	r1, [pc, #248]	@ (800ece8 <prvSocketBindAdd+0x138>)
 800ebf0:	e000      	b.n	800ebf4 <prvSocketBindAdd+0x44>
 800ebf2:	493e      	ldr	r1, [pc, #248]	@ (800ecec <prvSocketBindAdd+0x13c>)
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	885b      	ldrh	r3, [r3, #2]
 800ebf8:	021b      	lsls	r3, r3, #8
 800ebfa:	b21a      	sxth	r2, r3
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	885b      	ldrh	r3, [r3, #2]
 800ec00:	0a1b      	lsrs	r3, r3, #8
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	b21b      	sxth	r3, r3
 800ec06:	4313      	orrs	r3, r2
 800ec08:	b21b      	sxth	r3, r3
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	4838      	ldr	r0, [pc, #224]	@ (800ecf0 <prvSocketBindAdd+0x140>)
 800ec10:	f013 fdd8 	bl	80227c4 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800ec14:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800ec18:	617b      	str	r3, [r7, #20]
 800ec1a:	e060      	b.n	800ecde <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	885b      	ldrh	r3, [r3, #2]
 800ec20:	461a      	mov	r2, r3
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	885b      	ldrh	r3, [r3, #2]
 800ec2a:	021b      	lsls	r3, r3, #8
 800ec2c:	b21a      	sxth	r2, r3
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	885b      	ldrh	r3, [r3, #2]
 800ec32:	0a1b      	lsrs	r3, r3, #8
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	b21b      	sxth	r3, r3
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	b21b      	sxth	r3, r3
 800ec3c:	b29a      	uxth	r2, r3
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	785b      	ldrb	r3, [r3, #1]
 800ec46:	2b0a      	cmp	r3, #10
 800ec48:	d109      	bne.n	800ec5e <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	3308      	adds	r3, #8
 800ec54:	2210      	movs	r2, #16
 800ec56:	4619      	mov	r1, r3
 800ec58:	f013 ffd0 	bl	8022bfc <memcpy>
 800ec5c:	e00c      	b.n	800ec78 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	689b      	ldr	r3, [r3, #8]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d008      	beq.n	800ec78 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	2107      	movs	r1, #7
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7fe ffb7 	bl	800dbe0 <FreeRTOS_FindEndPointOnIP_IPv4>
 800ec72:	4602      	mov	r2, r0
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d019      	beq.n	800ecb4 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	061a      	lsls	r2, r3, #24
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	021b      	lsls	r3, r3, #8
 800ec90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ec94:	431a      	orrs	r2, r3
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	0a1b      	lsrs	r3, r3, #8
 800ec9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800eca2:	431a      	orrs	r2, r3
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	0e1b      	lsrs	r3, r3, #24
 800ecac:	431a      	orrs	r2, r3
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	629a      	str	r2, [r3, #40]	@ 0x28
 800ecb2:	e00a      	b.n	800ecca <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	785b      	ldrb	r3, [r3, #1]
 800ecb8:	2b0a      	cmp	r3, #10
 800ecba:	d006      	beq.n	800ecca <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3328      	adds	r3, #40	@ 0x28
 800ecc0:	2210      	movs	r2, #16
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f014 f8a6 	bl	8022e16 <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800ecca:	f7f5 fef9 	bl	8004ac0 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	330c      	adds	r3, #12
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f7f4 fdae 	bl	8003836 <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800ecda:	f7f5 feff 	bl	8004adc <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800ecde:	697b      	ldr	r3, [r7, #20]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3718      	adds	r7, #24
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	080263d8 	.word	0x080263d8
 800ecec:	080263dc 	.word	0x080263dc
 800ecf0:	080263e0 	.word	0x080263e0

0800ecf4 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b08e      	sub	sp, #56	@ 0x38
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
 800ed00:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800ed02:	2300      	movs	r3, #0
 800ed04:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800ed0a:	68f8      	ldr	r0, [r7, #12]
 800ed0c:	f001 ffd8 	bl	8010cc0 <xSocketValid>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d004      	beq.n	800ed20 <vSocketBind+0x2c>
 800ed16:	f240 716f 	movw	r1, #1903	@ 0x76f
 800ed1a:	4828      	ldr	r0, [pc, #160]	@ (800edbc <vSocketBind+0xc8>)
 800ed1c:	f7f2 fe74 	bl	8001a08 <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed26:	2b06      	cmp	r3, #6
 800ed28:	d102      	bne.n	800ed30 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800ed2a:	4b25      	ldr	r3, [pc, #148]	@ (800edc0 <vSocketBind+0xcc>)
 800ed2c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed2e:	e001      	b.n	800ed34 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800ed30:	4b24      	ldr	r3, [pc, #144]	@ (800edc4 <vSocketBind+0xd0>)
 800ed32:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800ed34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d115      	bne.n	800ed66 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800ed3a:	f107 0314 	add.w	r3, r7, #20
 800ed3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800ed40:	2218      	movs	r2, #24
 800ed42:	2100      	movs	r1, #0
 800ed44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed46:	f014 f866 	bl	8022e16 <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	7a1b      	ldrb	r3, [r3, #8]
 800ed4e:	f003 0301 	and.w	r3, r3, #1
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d003      	beq.n	800ed60 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800ed58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed5a:	220a      	movs	r2, #10
 800ed5c:	705a      	strb	r2, [r3, #1]
 800ed5e:	e002      	b.n	800ed66 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800ed60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed62:	2202      	movs	r2, #2
 800ed64:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800ed66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d104      	bne.n	800ed76 <vSocketBind+0x82>
 800ed6c:	f240 719b 	movw	r1, #1947	@ 0x79b
 800ed70:	4812      	ldr	r0, [pc, #72]	@ (800edbc <vSocketBind+0xc8>)
 800ed72:	f7f2 fe49 	bl	8001a08 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800ed76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed78:	885b      	ldrh	r3, [r3, #2]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d111      	bne.n	800eda2 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed84:	4618      	mov	r0, r3
 800ed86:	f000 fcc3 	bl	800f710 <prvGetPrivatePortNumber>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed90:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800ed92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed94:	885b      	ldrh	r3, [r3, #2]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d103      	bne.n	800eda2 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800ed9a:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800ed9e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800eda0:	e006      	b.n	800edb0 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eda6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eda8:	68f8      	ldr	r0, [r7, #12]
 800edaa:	f7ff ff01 	bl	800ebb0 <prvSocketBindAdd>
 800edae:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800edb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800edb2:	4618      	mov	r0, r3
 800edb4:	3738      	adds	r7, #56	@ 0x38
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	08026284 	.word	0x08026284
 800edc0:	20001608 	.word	0x20001608
 800edc4:	200015f4 	.word	0x200015f4

0800edc8 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b086      	sub	sp, #24
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800edd4:	230a      	movs	r3, #10
 800edd6:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f001 ff6f 	bl	8010cc0 <xSocketValid>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d102      	bne.n	800edee <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800ede8:	2300      	movs	r3, #0
 800edea:	617b      	str	r3, [r7, #20]
 800edec:	e02f      	b.n	800ee4e <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800edf4:	2b06      	cmp	r3, #6
 800edf6:	d10c      	bne.n	800ee12 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	2200      	movs	r2, #0
 800edfc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	2200      	movs	r2, #0
 800ee04:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800ee10:	e00a      	b.n	800ee28 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ee18:	2b11      	cmp	r3, #17
 800ee1a:	d105      	bne.n	800ee28 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	2200      	movs	r2, #0
 800ee26:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800ee28:	f107 0308 	add.w	r3, r7, #8
 800ee2c:	f04f 31ff 	mov.w	r1, #4294967295
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7fa ff3d 	bl	8009cb0 <xSendEventStructToIPTask>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d106      	bne.n	800ee4a <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800ee3c:	4806      	ldr	r0, [pc, #24]	@ (800ee58 <FreeRTOS_closesocket+0x90>)
 800ee3e:	f013 fcc1 	bl	80227c4 <lUDPLoggingPrintf>
            xResult = -1;
 800ee42:	f04f 33ff 	mov.w	r3, #4294967295
 800ee46:	617b      	str	r3, [r7, #20]
 800ee48:	e001      	b.n	800ee4e <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800ee4e:	697b      	ldr	r3, [r7, #20]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3718      	adds	r7, #24
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	08026404 	.word	0x08026404

0800ee5c <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800ee5c:	b590      	push	{r4, r7, lr}
 800ee5e:	b085      	sub	sp, #20
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ee6a:	2b06      	cmp	r3, #6
 800ee6c:	d129      	bne.n	800eec2 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d005      	beq.n	800ee84 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f008 fdf8 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f007 f804 	bl	8015e98 <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d005      	beq.n	800eea6 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7f7 fe63 	bl	8006b6c <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d005      	beq.n	800eebc <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7f7 fe58 	bl	8006b6c <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f8bd 	bl	800f03c <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	69db      	ldr	r3, [r3, #28]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d008      	beq.n	800eedc <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800eeca:	f7f5 fdf9 	bl	8004ac0 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	330c      	adds	r3, #12
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7f4 fd0c 	bl	80038f0 <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800eed8:	f7f5 fe00 	bl	8004adc <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eee2:	2b11      	cmp	r3, #17
 800eee4:	d10f      	bne.n	800ef06 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800eee6:	e00a      	b.n	800eefe <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7f4 fcfc 	bl	80038f0 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800eef8:	68f8      	ldr	r0, [r7, #12]
 800eefa:	f008 fdbb 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1f0      	bne.n	800eee8 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d004      	beq.n	800ef18 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7f4 fc0a 	bl	800372c <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ef1e:	2b06      	cmp	r3, #6
 800ef20:	d10c      	bne.n	800ef3c <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 f816 	bl	800ef54 <prvSocketProps>
 800ef28:	4604      	mov	r4, r0
 800ef2a:	f008 fdf5 	bl	8017b18 <uxGetNumberOfFreeNetworkBuffers>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	4b06      	ldr	r3, [pc, #24]	@ (800ef4c <vSocketClose+0xf0>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4621      	mov	r1, r4
 800ef36:	4806      	ldr	r0, [pc, #24]	@ (800ef50 <vSocketClose+0xf4>)
 800ef38:	f013 fc44 	bl	80227c4 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7f7 fe15 	bl	8006b6c <vPortFree>

    return NULL;
 800ef42:	2300      	movs	r3, #0
} /* Tested */
 800ef44:	4618      	mov	r0, r3
 800ef46:	3714      	adds	r7, #20
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd90      	pop	{r4, r7, pc}
 800ef4c:	20001608 	.word	0x20001608
 800ef50:	08026424 	.word	0x08026424

0800ef54 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af04      	add	r7, sp, #16
 800ef5a:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ef62:	2b06      	cmp	r3, #6
 800ef64:	d132      	bne.n	800efcc <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	7a1b      	ldrb	r3, [r3, #8]
 800ef6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d002      	beq.n	800ef7a <prvSocketProps+0x26>
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d014      	beq.n	800efa2 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800ef78:	e050      	b.n	800f01c <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800ef82:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800ef88:	687a      	ldr	r2, [r7, #4]
 800ef8a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800ef8e:	9202      	str	r2, [sp, #8]
 800ef90:	9301      	str	r3, [sp, #4]
 800ef92:	9000      	str	r0, [sp, #0]
 800ef94:	460b      	mov	r3, r1
 800ef96:	4a24      	ldr	r2, [pc, #144]	@ (800f028 <prvSocketProps+0xd4>)
 800ef98:	215c      	movs	r1, #92	@ 0x5c
 800ef9a:	4824      	ldr	r0, [pc, #144]	@ (800f02c <prvSocketProps+0xd8>)
 800ef9c:	f014 fc3e 	bl	802381c <snprintf>
                            break;
 800efa0:	e03c      	b.n	800f01c <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800efac:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800efb8:	9202      	str	r2, [sp, #8]
 800efba:	9301      	str	r3, [sp, #4]
 800efbc:	9000      	str	r0, [sp, #0]
 800efbe:	460b      	mov	r3, r1
 800efc0:	4a1b      	ldr	r2, [pc, #108]	@ (800f030 <prvSocketProps+0xdc>)
 800efc2:	215c      	movs	r1, #92	@ 0x5c
 800efc4:	4819      	ldr	r0, [pc, #100]	@ (800f02c <prvSocketProps+0xd8>)
 800efc6:	f014 fc29 	bl	802381c <snprintf>
                            break;
 800efca:	e027      	b.n	800f01c <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800efd2:	2b11      	cmp	r3, #17
 800efd4:	d122      	bne.n	800f01c <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	7a1b      	ldrb	r3, [r3, #8]
 800efda:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <prvSocketProps+0x96>
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d00c      	beq.n	800f002 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800efe8:	e018      	b.n	800f01c <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	4613      	mov	r3, r2
 800eff6:	4a0f      	ldr	r2, [pc, #60]	@ (800f034 <prvSocketProps+0xe0>)
 800eff8:	215c      	movs	r1, #92	@ 0x5c
 800effa:	480c      	ldr	r0, [pc, #48]	@ (800f02c <prvSocketProps+0xd8>)
 800effc:	f014 fc0e 	bl	802381c <snprintf>
                        break;
 800f000:	e00c      	b.n	800f01c <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	4613      	mov	r3, r2
 800f010:	4a09      	ldr	r2, [pc, #36]	@ (800f038 <prvSocketProps+0xe4>)
 800f012:	215c      	movs	r1, #92	@ 0x5c
 800f014:	4805      	ldr	r0, [pc, #20]	@ (800f02c <prvSocketProps+0xd8>)
 800f016:	f014 fc01 	bl	802381c <snprintf>
                        break;
 800f01a:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800f01c:	4b03      	ldr	r3, [pc, #12]	@ (800f02c <prvSocketProps+0xd8>)
    }
 800f01e:	4618      	mov	r0, r3
 800f020:	3708      	adds	r7, #8
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	08026458 	.word	0x08026458
 800f02c:	20001598 	.word	0x20001598
 800f030:	08026478 	.word	0x08026478
 800f034:	08026498 	.word	0x08026498
 800f038:	080264a8 	.word	0x080264a8

0800f03c <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b088      	sub	sp, #32
 800f040:	af02      	add	r7, sp, #8
 800f042:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f044:	4b3c      	ldr	r3, [pc, #240]	@ (800f138 <prvTCPSetSocketCount+0xfc>)
 800f046:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f04c:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f054:	2b01      	cmp	r3, #1
 800f056:	d12b      	bne.n	800f0b0 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800f05e:	e022      	b.n	800f0a6 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f072:	2b01      	cmp	r3, #1
 800f074:	d017      	beq.n	800f0a6 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800f07a:	89fa      	ldrh	r2, [r7, #14]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d112      	bne.n	800f0a6 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f086:	f003 0304 	and.w	r3, r3, #4
 800f08a:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d107      	bne.n	800f0a0 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f096:	f003 0302 	and.w	r3, r3, #2
 800f09a:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d002      	beq.n	800f0a6 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800f0a0:	68b8      	ldr	r0, [r7, #8]
 800f0a2:	f7ff fedb 	bl	800ee5c <vSocketClose>
            while( pxIterator != pxEnd )
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d1d8      	bne.n	800f060 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800f0ae:	e03e      	b.n	800f12e <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	617b      	str	r3, [r7, #20]
 800f0b6:	e036      	b.n	800f126 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d12b      	bne.n	800f120 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800f0cc:	89fa      	ldrh	r2, [r7, #14]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d126      	bne.n	800f120 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d021      	beq.n	800f120 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f0e2:	3b01      	subs	r3, #1
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f100:	4618      	mov	r0, r3
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f108:	2b01      	cmp	r3, #1
 800f10a:	d101      	bne.n	800f110 <prvTCPSetSocketCount+0xd4>
 800f10c:	4b0b      	ldr	r3, [pc, #44]	@ (800f13c <prvTCPSetSocketCount+0x100>)
 800f10e:	e000      	b.n	800f112 <prvTCPSetSocketCount+0xd6>
 800f110:	4b0b      	ldr	r3, [pc, #44]	@ (800f140 <prvTCPSetSocketCount+0x104>)
 800f112:	9300      	str	r3, [sp, #0]
 800f114:	4603      	mov	r3, r0
 800f116:	480b      	ldr	r0, [pc, #44]	@ (800f144 <prvTCPSetSocketCount+0x108>)
 800f118:	f013 fb54 	bl	80227c4 <lUDPLoggingPrintf>
                    break;
 800f11c:	bf00      	nop
    }
 800f11e:	e006      	b.n	800f12e <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800f126:	697a      	ldr	r2, [r7, #20]
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d1c4      	bne.n	800f0b8 <prvTCPSetSocketCount+0x7c>
    }
 800f12e:	bf00      	nop
 800f130:	3718      	adds	r7, #24
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	20001610 	.word	0x20001610
 800f13c:	080264b8 	.word	0x080264b8
 800f140:	080264bc 	.word	0x080264bc
 800f144:	080264c0 	.word	0x080264c0

0800f148 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800f148:	b580      	push	{r7, lr}
 800f14a:	b086      	sub	sp, #24
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f15a:	2b06      	cmp	r3, #6
 800f15c:	d00d      	beq.n	800f17a <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	2b04      	cmp	r3, #4
 800f162:	d101      	bne.n	800f168 <prvSockopt_so_buffer+0x20>
 800f164:	4b23      	ldr	r3, [pc, #140]	@ (800f1f4 <prvSockopt_so_buffer+0xac>)
 800f166:	e000      	b.n	800f16a <prvSockopt_so_buffer+0x22>
 800f168:	4b23      	ldr	r3, [pc, #140]	@ (800f1f8 <prvSockopt_so_buffer+0xb0>)
 800f16a:	4619      	mov	r1, r3
 800f16c:	4823      	ldr	r0, [pc, #140]	@ (800f1fc <prvSockopt_so_buffer+0xb4>)
 800f16e:	f013 fb29 	bl	80227c4 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f172:	f06f 0315 	mvn.w	r3, #21
 800f176:	617b      	str	r3, [r7, #20]
 800f178:	e036      	b.n	800f1e8 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	2b04      	cmp	r3, #4
 800f17e:	d104      	bne.n	800f18a <prvSockopt_so_buffer+0x42>
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f186:	2b00      	cmp	r3, #0
 800f188:	d107      	bne.n	800f19a <prvSockopt_so_buffer+0x52>
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	2b05      	cmp	r3, #5
 800f18e:	d112      	bne.n	800f1b6 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f196:	2b00      	cmp	r3, #0
 800f198:	d00d      	beq.n	800f1b6 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	2b04      	cmp	r3, #4
 800f19e:	d101      	bne.n	800f1a4 <prvSockopt_so_buffer+0x5c>
 800f1a0:	4b14      	ldr	r3, [pc, #80]	@ (800f1f4 <prvSockopt_so_buffer+0xac>)
 800f1a2:	e000      	b.n	800f1a6 <prvSockopt_so_buffer+0x5e>
 800f1a4:	4b14      	ldr	r3, [pc, #80]	@ (800f1f8 <prvSockopt_so_buffer+0xb0>)
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	4815      	ldr	r0, [pc, #84]	@ (800f200 <prvSockopt_so_buffer+0xb8>)
 800f1aa:	f013 fb0b 	bl	80227c4 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f1ae:	f06f 0315 	mvn.w	r3, #21
 800f1b2:	617b      	str	r3, [r7, #20]
 800f1b4:	e018      	b.n	800f1e8 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	2b04      	cmp	r3, #4
 800f1c0:	d10c      	bne.n	800f1dc <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	6938      	ldr	r0, [r7, #16]
 800f1cc:	f7fb fe92 	bl	800aef4 <FreeRTOS_round_up>
 800f1d0:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	693a      	ldr	r2, [r7, #16]
 800f1d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800f1da:	e003      	b.n	800f1e4 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	693a      	ldr	r2, [r7, #16]
 800f1e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800f1e8:	697b      	ldr	r3, [r7, #20]
    }
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3718      	adds	r7, #24
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	080264ec 	.word	0x080264ec
 800f1f8:	080264f0 	.word	0x080264f0
 800f1fc:	080264f4 	.word	0x080264f4
 800f200:	08026518 	.word	0x08026518

0800f204 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800f204:	b480      	push	{r7}
 800f206:	b087      	sub	sp, #28
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800f210:	2300      	movs	r3, #0
 800f212:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	2b09      	cmp	r3, #9
 800f218:	d002      	beq.n	800f220 <prvSetOptionCallback+0x1c>
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	2b0a      	cmp	r3, #10
 800f21e:	d102      	bne.n	800f226 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800f220:	2311      	movs	r3, #17
 800f222:	613b      	str	r3, [r7, #16]
 800f224:	e001      	b.n	800f22a <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800f226:	2306      	movs	r3, #6
 800f228:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	b2db      	uxtb	r3, r3
 800f234:	429a      	cmp	r2, r3
 800f236:	d002      	beq.n	800f23e <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f238:	f06f 0315 	mvn.w	r3, #21
 800f23c:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d131      	bne.n	800f2a8 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	3b06      	subs	r3, #6
 800f248:	2b04      	cmp	r3, #4
 800f24a:	d829      	bhi.n	800f2a0 <prvSetOptionCallback+0x9c>
 800f24c:	a201      	add	r2, pc, #4	@ (adr r2, 800f254 <prvSetOptionCallback+0x50>)
 800f24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f252:	bf00      	nop
 800f254:	0800f269 	.word	0x0800f269
 800f258:	0800f275 	.word	0x0800f275
 800f25c:	0800f281 	.word	0x0800f281
 800f260:	0800f28d 	.word	0x0800f28d
 800f264:	0800f297 	.word	0x0800f297
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800f272:	e019      	b.n	800f2a8 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	685a      	ldr	r2, [r3, #4]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800f27e:	e013      	b.n	800f2a8 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	689a      	ldr	r2, [r3, #8]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800f28a:	e00d      	b.n	800f2a8 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	68da      	ldr	r2, [r3, #12]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800f294:	e008      	b.n	800f2a8 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	691a      	ldr	r2, [r3, #16]
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800f29e:	e003      	b.n	800f2a8 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800f2a0:	f06f 0315 	mvn.w	r3, #21
 800f2a4:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800f2a6:	bf00      	nop
            }
        }

        return xReturn;
 800f2a8:	697b      	ldr	r3, [r7, #20]
    }
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	371c      	adds	r7, #28
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop

0800f2b8 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b086      	sub	sp, #24
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f2c2:	f06f 0315 	mvn.w	r3, #21
 800f2c6:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	3354      	adds	r3, #84	@ 0x54
 800f2cc:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f2d4:	2b06      	cmp	r3, #6
 800f2d6:	d003      	beq.n	800f2e0 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800f2d8:	4825      	ldr	r0, [pc, #148]	@ (800f370 <prvSetOptionTCPWindows+0xb8>)
 800f2da:	f013 fa73 	bl	80227c4 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800f2de:	e042      	b.n	800f366 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	2104      	movs	r1, #4
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f7ff ff2c 	bl	800f148 <prvSockopt_so_buffer>
 800f2f0:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d133      	bne.n	800f360 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	3308      	adds	r3, #8
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	2105      	movs	r1, #5
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f7ff ff21 	bl	800f148 <prvSockopt_so_buffer>
 800f306:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d12a      	bne.n	800f364 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	461a      	mov	r2, r3
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	461a      	mov	r2, r3
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800f32c:	f003 0301 	and.w	r3, r3, #1
 800f330:	b2db      	uxtb	r3, r3
 800f332:	2b00      	cmp	r3, #0
 800f334:	d017      	beq.n	800f366 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f33c:	693a      	ldr	r2, [r7, #16]
 800f33e:	8bd2      	ldrh	r2, [r2, #30]
 800f340:	fb03 f202 	mul.w	r2, r3, r2
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f350:	693a      	ldr	r2, [r7, #16]
 800f352:	8bd2      	ldrh	r2, [r2, #30]
 800f354:	fb03 f202 	mul.w	r2, r3, r2
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800f35e:	e002      	b.n	800f366 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800f360:	bf00      	nop
 800f362:	e000      	b.n	800f366 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800f364:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800f366:	697b      	ldr	r3, [r7, #20]
    }
 800f368:	4618      	mov	r0, r3
 800f36a:	3718      	adds	r7, #24
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	08026540 	.word	0x08026540

0800f374 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f37e:	f06f 0315 	mvn.w	r3, #21
 800f382:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f38e:	2b06      	cmp	r3, #6
 800f390:	d003      	beq.n	800f39a <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800f392:	4813      	ldr	r0, [pc, #76]	@ (800f3e0 <prvSetOptionLowHighWater+0x6c>)
 800f394:	f013 fa16 	bl	80227c4 <lUDPLoggingPrintf>
 800f398:	e01c      	b.n	800f3d4 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d206      	bcs.n	800f3b4 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	685a      	ldr	r2, [r3, #4]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d903      	bls.n	800f3bc <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800f3b4:	480b      	ldr	r0, [pc, #44]	@ (800f3e4 <prvSetOptionLowHighWater+0x70>)
 800f3b6:	f013 fa05 	bl	80227c4 <lUDPLoggingPrintf>
 800f3ba:	e00b      	b.n	800f3d4 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	681a      	ldr	r2, [r3, #0]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	685a      	ldr	r2, [r3, #4]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
    }
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	08026564 	.word	0x08026564
 800f3e4:	08026598 	.word	0x08026598

0800f3e8 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f3f2:	f06f 0315 	mvn.w	r3, #21
 800f3f6:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f3fe:	2b06      	cmp	r3, #6
 800f400:	d126      	bne.n	800f450 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d007      	beq.n	800f41a <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800f410:	f043 0302 	orr.w	r3, r3, #2
 800f414:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800f418:	e006      	b.n	800f428 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800f420:	f36f 0341 	bfc	r3, #1, #1
 800f424:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f42e:	2b04      	cmp	r3, #4
 800f430:	d90c      	bls.n	800f44c <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f001 fbd8 	bl	8010be8 <FreeRTOS_tx_size>
 800f438:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d006      	beq.n	800f44c <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2201      	movs	r2, #1
 800f442:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f446:	2006      	movs	r0, #6
 800f448:	f7fa fc1c 	bl	8009c84 <xSendEventToIPTask>
            }

            xReturn = 0;
 800f44c:	2300      	movs	r3, #0
 800f44e:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f450:	68fb      	ldr	r3, [r7, #12]
    }
 800f452:	4618      	mov	r0, r3
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b084      	sub	sp, #16
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
 800f462:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f464:	f06f 0315 	mvn.w	r3, #21
 800f468:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f470:	2b06      	cmp	r3, #6
 800f472:	d122      	bne.n	800f4ba <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d007      	beq.n	800f48c <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f482:	f043 0304 	orr.w	r3, r3, #4
 800f486:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800f48a:	e006      	b.n	800f49a <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f492:	f36f 0382 	bfc	r3, #2, #1
 800f496:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f49a:	687a      	ldr	r2, [r7, #4]
 800f49c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f4a0:	f043 0301 	orr.w	r3, r3, #1
 800f4a4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f4b0:	2006      	movs	r0, #6
 800f4b2:	f7fa fbe7 	bl	8009c84 <xSendEventToIPTask>
            xReturn = 0;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
    }
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3710      	adds	r7, #16
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b087      	sub	sp, #28
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d110      	bne.n	800f4fe <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f4e2:	2b11      	cmp	r3, #17
 800f4e4:	d107      	bne.n	800f4f6 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d902      	bls.n	800f4f6 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800f4f0:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f4f4:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	697a      	ldr	r2, [r7, #20]
 800f4fa:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800f4fc:	e002      	b.n	800f504 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	697a      	ldr	r2, [r7, #20]
 800f502:	621a      	str	r2, [r3, #32]
}
 800f504:	bf00      	nop
 800f506:	371c      	adds	r7, #28
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr

0800f510 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800f510:	b480      	push	{r7}
 800f512:	b085      	sub	sp, #20
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f51a:	f06f 0315 	mvn.w	r3, #21
 800f51e:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f526:	2b06      	cmp	r3, #6
 800f528:	d114      	bne.n	800f554 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d007      	beq.n	800f542 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f538:	f043 0308 	orr.w	r3, r3, #8
 800f53c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f540:	e006      	b.n	800f550 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f548:	f36f 03c3 	bfc	r3, #3, #1
 800f54c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f550:	2300      	movs	r3, #0
 800f552:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f554:	68fb      	ldr	r3, [r7, #12]
    }
 800f556:	4618      	mov	r0, r3
 800f558:	3714      	adds	r7, #20
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr

0800f562 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800f562:	b480      	push	{r7}
 800f564:	b085      	sub	sp, #20
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
 800f56a:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f56c:	f06f 0315 	mvn.w	r3, #21
 800f570:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f578:	2b06      	cmp	r3, #6
 800f57a:	d114      	bne.n	800f5a6 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d007      	beq.n	800f594 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f58a:	f043 0310 	orr.w	r3, r3, #16
 800f58e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f592:	e006      	b.n	800f5a2 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f59a:	f36f 1304 	bfc	r3, #4, #1
 800f59e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
    }
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3714      	adds	r7, #20
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b086      	sub	sp, #24
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	607a      	str	r2, [r7, #4]
 800f5c0:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f5c2:	f06f 0315 	mvn.w	r3, #21
 800f5c6:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800f5cc:	6938      	ldr	r0, [r7, #16]
 800f5ce:	f001 fb77 	bl	8010cc0 <xSocketValid>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	f040 8093 	bne.w	800f700 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2b12      	cmp	r3, #18
 800f5de:	f200 808b 	bhi.w	800f6f8 <FreeRTOS_setsockopt+0x144>
 800f5e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f5e8 <FreeRTOS_setsockopt+0x34>)
 800f5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e8:	0800f635 	.word	0x0800f635
 800f5ec:	0800f645 	.word	0x0800f645
 800f5f0:	0800f655 	.word	0x0800f655
 800f5f4:	0800f695 	.word	0x0800f695
 800f5f8:	0800f6af 	.word	0x0800f6af
 800f5fc:	0800f6af 	.word	0x0800f6af
 800f600:	0800f687 	.word	0x0800f687
 800f604:	0800f687 	.word	0x0800f687
 800f608:	0800f687 	.word	0x0800f687
 800f60c:	0800f687 	.word	0x0800f687
 800f610:	0800f687 	.word	0x0800f687
 800f614:	0800f6c9 	.word	0x0800f6c9
 800f618:	0800f6d5 	.word	0x0800f6d5
 800f61c:	0800f6bd 	.word	0x0800f6bd
 800f620:	0800f6e1 	.word	0x0800f6e1
 800f624:	0800f6ed 	.word	0x0800f6ed
 800f628:	0800f6f9 	.word	0x0800f6f9
 800f62c:	0800f6f9 	.word	0x0800f6f9
 800f630:	0800f6a3 	.word	0x0800f6a3
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800f634:	2200      	movs	r2, #0
 800f636:	6839      	ldr	r1, [r7, #0]
 800f638:	6938      	ldr	r0, [r7, #16]
 800f63a:	f7ff ff43 	bl	800f4c4 <prvSetOptionTimeout>
                xReturn = 0;
 800f63e:	2300      	movs	r3, #0
 800f640:	617b      	str	r3, [r7, #20]
                break;
 800f642:	e060      	b.n	800f706 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800f644:	2201      	movs	r2, #1
 800f646:	6839      	ldr	r1, [r7, #0]
 800f648:	6938      	ldr	r0, [r7, #16]
 800f64a:	f7ff ff3b 	bl	800f4c4 <prvSetOptionTimeout>
                xReturn = 0;
 800f64e:	2300      	movs	r3, #0
 800f650:	617b      	str	r3, [r7, #20]
                break;
 800f652:	e058      	b.n	800f706 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d109      	bne.n	800f66e <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f660:	f023 0302 	bic.w	r3, r3, #2
 800f664:	b2da      	uxtb	r2, r3
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800f66c:	e008      	b.n	800f680 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f674:	f043 0302 	orr.w	r3, r3, #2
 800f678:	b2da      	uxtb	r2, r3
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800f680:	2300      	movs	r3, #0
 800f682:	617b      	str	r3, [r7, #20]
                break;
 800f684:	e03f      	b.n	800f706 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	6879      	ldr	r1, [r7, #4]
 800f68a:	6938      	ldr	r0, [r7, #16]
 800f68c:	f7ff fdba 	bl	800f204 <prvSetOptionCallback>
 800f690:	6178      	str	r0, [r7, #20]
                        break;
 800f692:	e038      	b.n	800f706 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800f69c:	2300      	movs	r3, #0
 800f69e:	617b      	str	r3, [r7, #20]
                        break;
 800f6a0:	e031      	b.n	800f706 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800f6a2:	6839      	ldr	r1, [r7, #0]
 800f6a4:	6938      	ldr	r0, [r7, #16]
 800f6a6:	f7ff fe65 	bl	800f374 <prvSetOptionLowHighWater>
 800f6aa:	6178      	str	r0, [r7, #20]
                        break;
 800f6ac:	e02b      	b.n	800f706 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800f6ae:	683a      	ldr	r2, [r7, #0]
 800f6b0:	6879      	ldr	r1, [r7, #4]
 800f6b2:	6938      	ldr	r0, [r7, #16]
 800f6b4:	f7ff fd48 	bl	800f148 <prvSockopt_so_buffer>
 800f6b8:	6178      	str	r0, [r7, #20]
                        break;
 800f6ba:	e024      	b.n	800f706 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800f6bc:	6839      	ldr	r1, [r7, #0]
 800f6be:	6938      	ldr	r0, [r7, #16]
 800f6c0:	f7ff fdfa 	bl	800f2b8 <prvSetOptionTCPWindows>
 800f6c4:	6178      	str	r0, [r7, #20]
                        break;
 800f6c6:	e01e      	b.n	800f706 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	6938      	ldr	r0, [r7, #16]
 800f6cc:	f7ff ff20 	bl	800f510 <prvSetOptionReuseListenSocket>
 800f6d0:	6178      	str	r0, [r7, #20]
                        break;
 800f6d2:	e018      	b.n	800f706 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800f6d4:	6839      	ldr	r1, [r7, #0]
 800f6d6:	6938      	ldr	r0, [r7, #16]
 800f6d8:	f7ff ff43 	bl	800f562 <prvSetOptionCloseAfterSend>
 800f6dc:	6178      	str	r0, [r7, #20]
                        break;
 800f6de:	e012      	b.n	800f706 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800f6e0:	6839      	ldr	r1, [r7, #0]
 800f6e2:	6938      	ldr	r0, [r7, #16]
 800f6e4:	f7ff fe80 	bl	800f3e8 <prvSetOptionSetFullSize>
 800f6e8:	6178      	str	r0, [r7, #20]
                        break;
 800f6ea:	e00c      	b.n	800f706 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800f6ec:	6839      	ldr	r1, [r7, #0]
 800f6ee:	6938      	ldr	r0, [r7, #16]
 800f6f0:	f7ff feb3 	bl	800f45a <prvSetOptionStopRX>
 800f6f4:	6178      	str	r0, [r7, #20]
                        break;
 800f6f6:	e006      	b.n	800f706 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800f6f8:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800f6fc:	617b      	str	r3, [r7, #20]
                break;
 800f6fe:	e002      	b.n	800f706 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f700:	f06f 0315 	mvn.w	r3, #21
 800f704:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800f706:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f708:	4618      	mov	r0, r3
 800f70a:	3718      	adds	r7, #24
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800f718:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800f71c:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800f71e:	89fb      	ldrh	r3, [r7, #14]
 800f720:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800f722:	2300      	movs	r3, #0
 800f724:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800f726:	2300      	movs	r3, #0
 800f728:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2b06      	cmp	r3, #6
 800f72e:	d102      	bne.n	800f736 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800f730:	4b21      	ldr	r3, [pc, #132]	@ (800f7b8 <prvGetPrivatePortNumber+0xa8>)
 800f732:	613b      	str	r3, [r7, #16]
 800f734:	e001      	b.n	800f73a <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800f736:	4b21      	ldr	r3, [pc, #132]	@ (800f7bc <prvGetPrivatePortNumber+0xac>)
 800f738:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800f73a:	f107 0308 	add.w	r3, r7, #8
 800f73e:	4618      	mov	r0, r3
 800f740:	f7f2 fa2c 	bl	8001b9c <xApplicationGetRandomNumber>
 800f744:	4603      	mov	r3, r0
 800f746:	2b00      	cmp	r3, #0
 800f748:	d030      	beq.n	800f7ac <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800f74e:	89fa      	ldrh	r2, [r7, #14]
 800f750:	fbb3 f1f2 	udiv	r1, r3, r2
 800f754:	fb01 f202 	mul.w	r2, r1, r2
 800f758:	1a9b      	subs	r3, r3, r2
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f760:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800f762:	8abb      	ldrh	r3, [r7, #20]
 800f764:	021b      	lsls	r3, r3, #8
 800f766:	b21a      	sxth	r2, r3
 800f768:	8abb      	ldrh	r3, [r7, #20]
 800f76a:	0a1b      	lsrs	r3, r3, #8
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	b21b      	sxth	r3, r3
 800f770:	4313      	orrs	r3, r2
 800f772:	b21b      	sxth	r3, r3
 800f774:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800f776:	4619      	mov	r1, r3
 800f778:	6938      	ldr	r0, [r7, #16]
 800f77a:	f000 f821 	bl	800f7c0 <pxListFindListItemWithValue>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d10a      	bne.n	800f79a <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800f784:	8abb      	ldrh	r3, [r7, #20]
 800f786:	021b      	lsls	r3, r3, #8
 800f788:	b21a      	sxth	r2, r3
 800f78a:	8abb      	ldrh	r3, [r7, #20]
 800f78c:	0a1b      	lsrs	r3, r3, #8
 800f78e:	b29b      	uxth	r3, r3
 800f790:	b21b      	sxth	r3, r3
 800f792:	4313      	orrs	r3, r2
 800f794:	b21b      	sxth	r3, r3
 800f796:	82bb      	strh	r3, [r7, #20]
            break;
 800f798:	e009      	b.n	800f7ae <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800f79a:	2300      	movs	r3, #0
 800f79c:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800f79e:	8afb      	ldrh	r3, [r7, #22]
 800f7a0:	3b01      	subs	r3, #1
 800f7a2:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800f7a4:	8afb      	ldrh	r3, [r7, #22]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d1c7      	bne.n	800f73a <prvGetPrivatePortNumber+0x2a>
 800f7aa:	e000      	b.n	800f7ae <prvGetPrivatePortNumber+0x9e>
            break;
 800f7ac:	bf00      	nop

    return usResult;
 800f7ae:	8abb      	ldrh	r3, [r7, #20]
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3718      	adds	r7, #24
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	20001608 	.word	0x20001608
 800f7bc:	200015f4 	.word	0x200015f4

0800f7c0 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b086      	sub	sp, #24
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800f7ce:	f7fa fe0b 	bl	800a3e8 <xIPIsNetworkTaskReady>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d018      	beq.n	800f80a <pxListFindListItemWithValue+0x4a>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d015      	beq.n	800f80a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	3308      	adds	r3, #8
 800f7e2:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	613b      	str	r3, [r7, #16]
 800f7ea:	e00a      	b.n	800f802 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	683a      	ldr	r2, [r7, #0]
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d102      	bne.n	800f7fc <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	617b      	str	r3, [r7, #20]
                break;
 800f7fa:	e006      	b.n	800f80a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800f802:	693a      	ldr	r2, [r7, #16]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	429a      	cmp	r2, r3
 800f808:	d1f0      	bne.n	800f7ec <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800f80a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f80c:	4618      	mov	r0, r3
 800f80e:	3718      	adds	r7, #24
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800f81c:	2300      	movs	r3, #0
 800f81e:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800f820:	6879      	ldr	r1, [r7, #4]
 800f822:	480b      	ldr	r0, [pc, #44]	@ (800f850 <pxUDPSocketLookup+0x3c>)
 800f824:	f7ff ffcc 	bl	800f7c0 <pxListFindListItemWithValue>
 800f828:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d00a      	beq.n	800f846 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	68db      	ldr	r3, [r3, #12]
 800f834:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d104      	bne.n	800f846 <pxUDPSocketLookup+0x32>
 800f83c:	f640 4111 	movw	r1, #3089	@ 0xc11
 800f840:	4804      	ldr	r0, [pc, #16]	@ (800f854 <pxUDPSocketLookup+0x40>)
 800f842:	f7f2 f8e1 	bl	8001a08 <vAssertCalled>
    }

    return pxSocket;
 800f846:	68fb      	ldr	r3, [r7, #12]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3710      	adds	r7, #16
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	200015f4 	.word	0x200015f4
 800f854:	08026284 	.word	0x08026284

0800f858 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800f858:	b480      	push	{r7}
 800f85a:	b08b      	sub	sp, #44	@ 0x2c
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800f862:	2300      	movs	r3, #0
 800f864:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800f866:	1d3b      	adds	r3, r7, #4
 800f868:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f86e:	2300      	movs	r3, #0
 800f870:	627b      	str	r3, [r7, #36]	@ 0x24
 800f872:	e062      	b.n	800f93a <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800f874:	697a      	ldr	r2, [r7, #20]
 800f876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f878:	4413      	add	r3, r2
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800f87e:	2302      	movs	r3, #2
 800f880:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f882:	7ffa      	ldrb	r2, [r7, #31]
 800f884:	4b32      	ldr	r3, [pc, #200]	@ (800f950 <FreeRTOS_inet_ntoa+0xf8>)
 800f886:	fba3 1302 	umull	r1, r3, r3, r2
 800f88a:	08d9      	lsrs	r1, r3, #3
 800f88c:	460b      	mov	r3, r1
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	440b      	add	r3, r1
 800f892:	005b      	lsls	r3, r3, #1
 800f894:	1ad3      	subs	r3, r2, r3
 800f896:	b2d9      	uxtb	r1, r3
 800f898:	f107 020c 	add.w	r2, r7, #12
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	4413      	add	r3, r2
 800f8a0:	460a      	mov	r2, r1
 800f8a2:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800f8a4:	7ffb      	ldrb	r3, [r7, #31]
 800f8a6:	4a2a      	ldr	r2, [pc, #168]	@ (800f950 <FreeRTOS_inet_ntoa+0xf8>)
 800f8a8:	fba2 2303 	umull	r2, r3, r2, r3
 800f8ac:	08db      	lsrs	r3, r3, #3
 800f8ae:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d003      	beq.n	800f8be <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800f8b6:	69bb      	ldr	r3, [r7, #24]
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f8bc:	e7e1      	b.n	800f882 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800f8be:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800f8c0:	7ffb      	ldrb	r3, [r7, #31]
 800f8c2:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	61bb      	str	r3, [r7, #24]
 800f8c8:	e009      	b.n	800f8de <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800f8ca:	f107 020c 	add.w	r2, r7, #12
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d106      	bne.n	800f8e6 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f8d8:	69bb      	ldr	r3, [r7, #24]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	61bb      	str	r3, [r7, #24]
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d9f2      	bls.n	800f8ca <FreeRTOS_inet_ntoa+0x72>
 800f8e4:	e012      	b.n	800f90c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800f8e6:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f8e8:	e010      	b.n	800f90c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800f8ea:	f107 020c 	add.w	r2, r7, #12
 800f8ee:	69bb      	ldr	r3, [r7, #24]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	781a      	ldrb	r2, [r3, #0]
 800f8f4:	6839      	ldr	r1, [r7, #0]
 800f8f6:	6a3b      	ldr	r3, [r7, #32]
 800f8f8:	440b      	add	r3, r1
 800f8fa:	3230      	adds	r2, #48	@ 0x30
 800f8fc:	b2d2      	uxtb	r2, r2
 800f8fe:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800f900:	6a3b      	ldr	r3, [r7, #32]
 800f902:	3301      	adds	r3, #1
 800f904:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f906:	69bb      	ldr	r3, [r7, #24]
 800f908:	3301      	adds	r3, #1
 800f90a:	61bb      	str	r3, [r7, #24]
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	2b02      	cmp	r3, #2
 800f910:	d9eb      	bls.n	800f8ea <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800f912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f914:	2b02      	cmp	r3, #2
 800f916:	d805      	bhi.n	800f924 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800f918:	683a      	ldr	r2, [r7, #0]
 800f91a:	6a3b      	ldr	r3, [r7, #32]
 800f91c:	4413      	add	r3, r2
 800f91e:	222e      	movs	r2, #46	@ 0x2e
 800f920:	701a      	strb	r2, [r3, #0]
 800f922:	e004      	b.n	800f92e <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800f924:	683a      	ldr	r2, [r7, #0]
 800f926:	6a3b      	ldr	r3, [r7, #32]
 800f928:	4413      	add	r3, r2
 800f92a:	2200      	movs	r2, #0
 800f92c:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	3301      	adds	r3, #1
 800f932:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f936:	3301      	adds	r3, #1
 800f938:	627b      	str	r3, [r7, #36]	@ 0x24
 800f93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f93c:	2b03      	cmp	r3, #3
 800f93e:	d999      	bls.n	800f874 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800f940:	693b      	ldr	r3, [r7, #16]
}
 800f942:	4618      	mov	r0, r3
 800f944:	372c      	adds	r7, #44	@ 0x2c
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop
 800f950:	cccccccd 	.word	0xcccccccd

0800f954 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b086      	sub	sp, #24
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	607a      	str	r2, [r7, #4]
 800f960:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2b02      	cmp	r3, #2
 800f966:	d003      	beq.n	800f970 <FreeRTOS_inet_ntop+0x1c>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2b0a      	cmp	r3, #10
 800f96c:	d007      	beq.n	800f97e <FreeRTOS_inet_ntop+0x2a>
 800f96e:	e00d      	b.n	800f98c <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800f970:	683a      	ldr	r2, [r7, #0]
 800f972:	6879      	ldr	r1, [r7, #4]
 800f974:	68b8      	ldr	r0, [r7, #8]
 800f976:	f7fb fc8d 	bl	800b294 <FreeRTOS_inet_ntop4>
 800f97a:	6178      	str	r0, [r7, #20]
                break;
 800f97c:	e009      	b.n	800f992 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800f97e:	683a      	ldr	r2, [r7, #0]
 800f980:	6879      	ldr	r1, [r7, #4]
 800f982:	68b8      	ldr	r0, [r7, #8]
 800f984:	f7fc f9c1 	bl	800bd0a <FreeRTOS_inet_ntop6>
 800f988:	6178      	str	r0, [r7, #20]
                break;
 800f98a:	e002      	b.n	800f992 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800f98c:	2300      	movs	r3, #0
 800f98e:	617b      	str	r3, [r7, #20]
            break;
 800f990:	bf00      	nop
    }

    return pcResult;
 800f992:	697b      	ldr	r3, [r7, #20]
}
 800f994:	4618      	mov	r0, r3
 800f996:	3718      	adds	r7, #24
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	7a1b      	ldrb	r3, [r3, #8]
 800f9ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d002      	beq.n	800f9be <FreeRTOS_GetLocalAddress+0x22>
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d02a      	beq.n	800fa12 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800f9bc:	e044      	b.n	800fa48 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	2202      	movs	r2, #2
 800f9c2:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	2218      	movs	r2, #24
 800f9c8:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9ce:	061a      	lsls	r2, r3, #24
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9d4:	021b      	lsls	r3, r3, #8
 800f9d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f9da:	431a      	orrs	r2, r3
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9e0:	0a1b      	lsrs	r3, r3, #8
 800f9e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f9e6:	431a      	orrs	r2, r3
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9ec:	0e1b      	lsrs	r3, r3, #24
 800f9ee:	431a      	orrs	r2, r3
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f9f8:	021b      	lsls	r3, r3, #8
 800f9fa:	b21a      	sxth	r2, r3
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fa00:	0a1b      	lsrs	r3, r3, #8
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	b21b      	sxth	r3, r3
 800fa06:	4313      	orrs	r3, r2
 800fa08:	b21b      	sxth	r3, r3
 800fa0a:	b29a      	uxth	r2, r3
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	805a      	strh	r2, [r3, #2]
                break;
 800fa10:	e01a      	b.n	800fa48 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	220a      	movs	r2, #10
 800fa16:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	f103 0008 	add.w	r0, r3, #8
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	3328      	adds	r3, #40	@ 0x28
 800fa22:	2210      	movs	r2, #16
 800fa24:	4619      	mov	r1, r3
 800fa26:	f013 f8e9 	bl	8022bfc <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fa2e:	021b      	lsls	r3, r3, #8
 800fa30:	b21a      	sxth	r2, r3
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fa36:	0a1b      	lsrs	r3, r3, #8
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	b21b      	sxth	r3, r3
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	b21b      	sxth	r3, r3
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	805a      	strh	r2, [r3, #2]
                break;
 800fa46:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800fa48:	2318      	movs	r3, #24
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b084      	sub	sp, #16
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d006      	beq.n	800fa70 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fa66:	2300      	movs	r3, #0
 800fa68:	2200      	movs	r2, #0
 800fa6a:	2100      	movs	r1, #0
 800fa6c:	f7f4 f8ba 	bl	8003be4 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d015      	beq.n	800faa4 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	0a1b      	lsrs	r3, r3, #8
 800fa7e:	f003 030f 	and.w	r3, r3, #15
 800fa82:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d00c      	beq.n	800faa4 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	431a      	orrs	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	68f9      	ldr	r1, [r7, #12]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7f3 fdc4 	bl	800362c <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d00b      	beq.n	800fad0 <vSocketWakeUpUser+0x7e>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d007      	beq.n	800fad0 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	685a      	ldr	r2, [r3, #4]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4619      	mov	r1, r3
 800faca:	4610      	mov	r0, r2
 800facc:	f7f3 fdae 	bl	800362c <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	601a      	str	r2, [r3, #0]
}
 800fad6:	bf00      	nop
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800fade:	b480      	push	{r7}
 800fae0:	b085      	sub	sp, #20
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800faec:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800faee:	7afb      	ldrb	r3, [r7, #11]
 800faf0:	2b08      	cmp	r3, #8
 800faf2:	d006      	beq.n	800fb02 <bMayConnect+0x24>
 800faf4:	2b08      	cmp	r3, #8
 800faf6:	dc0b      	bgt.n	800fb10 <bMayConnect+0x32>
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d002      	beq.n	800fb02 <bMayConnect+0x24>
 800fafc:	2b02      	cmp	r3, #2
 800fafe:	d003      	beq.n	800fb08 <bMayConnect+0x2a>
 800fb00:	e006      	b.n	800fb10 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800fb02:	2300      	movs	r3, #0
 800fb04:	60fb      	str	r3, [r7, #12]
                break;
 800fb06:	e007      	b.n	800fb18 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800fb08:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800fb0c:	60fb      	str	r3, [r7, #12]
                break;
 800fb0e:	e003      	b.n	800fb18 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800fb10:	f06f 030a 	mvn.w	r3, #10
 800fb14:	60fb      	str	r3, [r7, #12]
                break;
 800fb16:	bf00      	nop
        }

        return xResult;
 800fb18:	68fb      	ldr	r3, [r7, #12]
    }
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3714      	adds	r7, #20
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
	...

0800fb28 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800fb32:	2300      	movs	r3, #0
 800fb34:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d103      	bne.n	800fb44 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800fb3c:	f06f 0315 	mvn.w	r3, #21
 800fb40:	60fb      	str	r3, [r7, #12]
 800fb42:	e01f      	b.n	800fb84 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800fb44:	2200      	movs	r2, #0
 800fb46:	2106      	movs	r1, #6
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7fe fc71 	bl	800e430 <prvValidSocket>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d103      	bne.n	800fb5c <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800fb54:	f06f 0308 	mvn.w	r3, #8
 800fb58:	60fb      	str	r3, [r7, #12]
 800fb5a:	e013      	b.n	800fb84 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f001 f867 	bl	8010c30 <FreeRTOS_issocketconnected>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	dd03      	ble.n	800fb70 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800fb68:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800fb6c:	60fb      	str	r3, [r7, #12]
 800fb6e:	e009      	b.n	800fb84 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	69db      	ldr	r3, [r3, #28]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d105      	bne.n	800fb84 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800fb78:	2200      	movs	r2, #0
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7fe ff4f 	bl	800ea20 <FreeRTOS_bind>
 800fb82:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f040 80a6 	bne.w	800fcd8 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f7ff ffa6 	bl	800fade <bMayConnect>
 800fb92:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	f040 809e 	bne.w	800fcd8 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fba2:	f36f 03c3 	bfc	r3, #3, #1
 800fba6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	785b      	ldrb	r3, [r3, #1]
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	d027      	beq.n	800fc0a <prvTCPConnectStart+0xe2>
 800fbba:	2b0a      	cmp	r3, #10
 800fbbc:	d168      	bne.n	800fc90 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	7a13      	ldrb	r3, [r2, #8]
 800fbc2:	f043 0301 	orr.w	r3, r3, #1
 800fbc6:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fbcc:	4618      	mov	r0, r3
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	f103 0108 	add.w	r1, r3, #8
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	885b      	ldrh	r3, [r3, #2]
 800fbd8:	021b      	lsls	r3, r3, #8
 800fbda:	b21a      	sxth	r2, r3
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	885b      	ldrh	r3, [r3, #2]
 800fbe0:	0a1b      	lsrs	r3, r3, #8
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	b21b      	sxth	r3, r3
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	b21b      	sxth	r3, r3
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	460a      	mov	r2, r1
 800fbee:	4601      	mov	r1, r0
 800fbf0:	483c      	ldr	r0, [pc, #240]	@ (800fce4 <prvTCPConnectStart+0x1bc>)
 800fbf2:	f012 fde7 	bl	80227c4 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	3308      	adds	r3, #8
 800fc00:	2210      	movs	r2, #16
 800fc02:	4619      	mov	r1, r3
 800fc04:	f012 fffa 	bl	8022bfc <memcpy>
                            break;
 800fc08:	e046      	b.n	800fc98 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	7a13      	ldrb	r3, [r2, #8]
 800fc0e:	f36f 0300 	bfc	r3, #0, #1
 800fc12:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fc18:	4618      	mov	r0, r3
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	061a      	lsls	r2, r3, #24
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	689b      	ldr	r3, [r3, #8]
 800fc24:	021b      	lsls	r3, r3, #8
 800fc26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fc2a:	431a      	orrs	r2, r3
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	0a1b      	lsrs	r3, r3, #8
 800fc32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fc36:	431a      	orrs	r2, r3
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	689b      	ldr	r3, [r3, #8]
 800fc3c:	0e1b      	lsrs	r3, r3, #24
 800fc3e:	ea42 0103 	orr.w	r1, r2, r3
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	885b      	ldrh	r3, [r3, #2]
 800fc46:	021b      	lsls	r3, r3, #8
 800fc48:	b21a      	sxth	r2, r3
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	885b      	ldrh	r3, [r3, #2]
 800fc4e:	0a1b      	lsrs	r3, r3, #8
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	b21b      	sxth	r3, r3
 800fc54:	4313      	orrs	r3, r2
 800fc56:	b21b      	sxth	r3, r3
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	460a      	mov	r2, r1
 800fc5c:	4601      	mov	r1, r0
 800fc5e:	4822      	ldr	r0, [pc, #136]	@ (800fce8 <prvTCPConnectStart+0x1c0>)
 800fc60:	f012 fdb0 	bl	80227c4 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	689b      	ldr	r3, [r3, #8]
 800fc68:	061a      	lsls	r2, r3, #24
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	021b      	lsls	r3, r3, #8
 800fc70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fc74:	431a      	orrs	r2, r3
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	689b      	ldr	r3, [r3, #8]
 800fc7a:	0a1b      	lsrs	r3, r3, #8
 800fc7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fc80:	431a      	orrs	r2, r3
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	0e1b      	lsrs	r3, r3, #24
 800fc88:	431a      	orrs	r2, r3
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800fc8e:	e003      	b.n	800fc98 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800fc90:	4816      	ldr	r0, [pc, #88]	@ (800fcec <prvTCPConnectStart+0x1c4>)
 800fc92:	f012 fd97 	bl	80227c4 <lUDPLoggingPrintf>
                        break;
 800fc96:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	885b      	ldrh	r3, [r3, #2]
 800fc9c:	021b      	lsls	r3, r3, #8
 800fc9e:	b21a      	sxth	r2, r3
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	885b      	ldrh	r3, [r3, #2]
 800fca4:	0a1b      	lsrs	r3, r3, #8
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	b21b      	sxth	r3, r3
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	b21b      	sxth	r3, r3
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800fcb6:	2102      	movs	r1, #2
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f001 fd77 	bl	80117ac <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800fcc6:	2006      	movs	r0, #6
 800fcc8:	f7f9 ffdc 	bl	8009c84 <xSendEventToIPTask>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d002      	beq.n	800fcd8 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800fcd2:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800fcd6:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
    }
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	080265c4 	.word	0x080265c4
 800fce8:	080265ec 	.word	0x080265ec
 800fcec:	08026610 	.word	0x08026610

0800fcf0 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b094      	sub	sp, #80	@ 0x50
 800fcf4:	af02      	add	r7, sp, #8
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800fd00:	2300      	movs	r3, #0
 800fd02:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800fd04:	f06f 0315 	mvn.w	r3, #21
 800fd08:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d013      	beq.n	800fd38 <FreeRTOS_connect+0x48>
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	785b      	ldrb	r3, [r3, #1]
 800fd14:	2b0a      	cmp	r3, #10
 800fd16:	d00f      	beq.n	800fd38 <FreeRTOS_connect+0x48>
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	785b      	ldrb	r3, [r3, #1]
 800fd1c:	2b02      	cmp	r3, #2
 800fd1e:	d00b      	beq.n	800fd38 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800fd20:	f107 0314 	add.w	r3, r7, #20
 800fd24:	2218      	movs	r2, #24
 800fd26:	68b9      	ldr	r1, [r7, #8]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f012 ff67 	bl	8022bfc <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800fd2e:	2302      	movs	r3, #2
 800fd30:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800fd32:	f107 0314 	add.w	r3, r7, #20
 800fd36:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800fd38:	68b9      	ldr	r1, [r7, #8]
 800fd3a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fd3c:	f7ff fef4 	bl	800fb28 <prvTCPConnectStart>
 800fd40:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800fd42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d146      	bne.n	800fdd6 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800fd48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d110      	bne.n	800fd70 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800fd4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd50:	6a1b      	ldr	r3, [r3, #32]
 800fd52:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800fd54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d103      	bne.n	800fd62 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800fd5a:	f06f 030a 	mvn.w	r3, #10
 800fd5e:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800fd60:	e039      	b.n	800fdd6 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800fd62:	2301      	movs	r3, #1
 800fd64:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800fd66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7f5 fb64 	bl	8005438 <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800fd70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fd72:	f000 ff5d 	bl	8010c30 <FreeRTOS_issocketconnected>
 800fd76:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800fd78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	db2a      	blt.n	800fdd4 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800fd7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	dd02      	ble.n	800fd8a <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800fd84:	2300      	movs	r3, #0
 800fd86:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800fd88:	e025      	b.n	800fdd6 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800fd8a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fd8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fd92:	4611      	mov	r1, r2
 800fd94:	4618      	mov	r0, r3
 800fd96:	f7f5 fb87 	bl	80054a8 <xTaskCheckForTimeOut>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d003      	beq.n	800fda8 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800fda0:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800fda4:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800fda6:	e016      	b.n	800fdd6 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800fda8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdaa:	6858      	ldr	r0, [r3, #4]
 800fdac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdae:	9300      	str	r3, [sp, #0]
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	2128      	movs	r1, #40	@ 0x28
 800fdb6:	f7f3 fb53 	bl	8003460 <xEventGroupWaitBits>
 800fdba:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800fdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdbe:	f003 0320 	and.w	r3, r3, #32
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d0c0      	beq.n	800fd48 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800fdc6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800fdca:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800fdcc:	4804      	ldr	r0, [pc, #16]	@ (800fde0 <FreeRTOS_connect+0xf0>)
 800fdce:	f012 fcf9 	bl	80227c4 <lUDPLoggingPrintf>
                    break;
 800fdd2:	e000      	b.n	800fdd6 <FreeRTOS_connect+0xe6>
                    break;
 800fdd4:	bf00      	nop
                }
            }
        }

        return xResult;
 800fdd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3748      	adds	r7, #72	@ 0x48
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	0802663c 	.word	0x0802663c

0800fde4 <prvAcceptWaitClient>:
 * @return A new connected socket or NULL.
 */
    static FreeRTOS_Socket_t * prvAcceptWaitClient( FreeRTOS_Socket_t * pxParentSocket,
                                                    struct freertos_sockaddr * pxAddress,
                                                    socklen_t * pxAddressLength )
    {
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b086      	sub	sp, #24
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxClientSocket = NULL;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	617b      	str	r3, [r7, #20]

        /* Is there a new client? */
        vTaskSuspendAll();
 800fdf4:	f7f4 fe64 	bl	8004ac0 <vTaskSuspendAll>
        {
            if( pxParentSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fdfe:	f003 0308 	and.w	r3, r3, #8
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d10b      	bne.n	800fe20 <prvAcceptWaitClient+0x3c>
            {
                pxClientSocket = pxParentSocket->u.xTCP.pxPeerSocket;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe0c:	617b      	str	r3, [r7, #20]

                if( pxClientSocket != NULL )
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d007      	beq.n	800fe24 <prvAcceptWaitClient+0x40>
                {
                    FreeRTOS_printf( ( "prvAcceptWaitClient: client %p parent %p\n",
 800fe14:	68fa      	ldr	r2, [r7, #12]
 800fe16:	6979      	ldr	r1, [r7, #20]
 800fe18:	4845      	ldr	r0, [pc, #276]	@ (800ff30 <prvAcceptWaitClient+0x14c>)
 800fe1a:	f012 fcd3 	bl	80227c4 <lUDPLoggingPrintf>
 800fe1e:	e001      	b.n	800fe24 <prvAcceptWaitClient+0x40>
                                       ( void * ) pxClientSocket, ( void * ) pxParentSocket ) );
                }
            }
            else
            {
                pxClientSocket = pxParentSocket;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	617b      	str	r3, [r7, #20]
            }

            if( pxClientSocket != NULL )
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d018      	beq.n	800fe5c <prvAcceptWaitClient+0x78>
            {
                /* Is it still not taken ? */
                if( pxClientSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED )
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fe30:	f003 0302 	and.w	r3, r3, #2
 800fe34:	b2db      	uxtb	r3, r3
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d00e      	beq.n	800fe58 <prvAcceptWaitClient+0x74>
                {
                    if( pxParentSocket->u.xTCP.pxPeerSocket != NULL )
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d002      	beq.n	800fe48 <prvAcceptWaitClient+0x64>
                    {
                        pxParentSocket->u.xTCP.pxPeerSocket = NULL;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2200      	movs	r2, #0
 800fe46:	67da      	str	r2, [r3, #124]	@ 0x7c
                    }

                    pxClientSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 800fe48:	697a      	ldr	r2, [r7, #20]
 800fe4a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fe4e:	f36f 0341 	bfc	r3, #1, #1
 800fe52:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800fe56:	e001      	b.n	800fe5c <prvAcceptWaitClient+0x78>
                }
                else
                {
                    pxClientSocket = NULL;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	617b      	str	r3, [r7, #20]
                }
            }
        }
        ( void ) xTaskResumeAll();
 800fe5c:	f7f4 fe3e 	bl	8004adc <xTaskResumeAll>

        if( pxClientSocket != NULL )
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d05e      	beq.n	800ff24 <prvAcceptWaitClient+0x140>
        {
            if( pxAddressLength != NULL )
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d002      	beq.n	800fe72 <prvAcceptWaitClient+0x8e>
            {
                *pxAddressLength = sizeof( struct freertos_sockaddr );
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2218      	movs	r2, #24
 800fe70:	601a      	str	r2, [r3, #0]
            }

            switch( pxClientSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	7a1b      	ldrb	r3, [r3, #8]
 800fe76:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fe7a:	b2db      	uxtb	r3, r3
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d002      	beq.n	800fe86 <prvAcceptWaitClient+0xa2>
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d02c      	beq.n	800fede <prvAcceptWaitClient+0xfa>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800fe84:	e04e      	b.n	800ff24 <prvAcceptWaitClient+0x140>
                        if( pxAddress != NULL )
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d048      	beq.n	800ff1e <prvAcceptWaitClient+0x13a>
                            pxAddress->sin_family = FREERTOS_AF_INET4;
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	2202      	movs	r2, #2
 800fe90:	705a      	strb	r2, [r3, #1]
                            pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_ntohl( pxClientSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe96:	061a      	lsls	r2, r3, #24
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe9c:	021b      	lsls	r3, r3, #8
 800fe9e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fea2:	431a      	orrs	r2, r3
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fea8:	0a1b      	lsrs	r3, r3, #8
 800feaa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800feae:	431a      	orrs	r2, r3
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800feb4:	0e1b      	lsrs	r3, r3, #24
 800feb6:	431a      	orrs	r2, r3
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	609a      	str	r2, [r3, #8]
                            pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fec2:	021b      	lsls	r3, r3, #8
 800fec4:	b21a      	sxth	r2, r3
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fecc:	0a1b      	lsrs	r3, r3, #8
 800fece:	b29b      	uxth	r3, r3
 800fed0:	b21b      	sxth	r3, r3
 800fed2:	4313      	orrs	r3, r2
 800fed4:	b21b      	sxth	r3, r3
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	805a      	strh	r2, [r3, #2]
                        break;
 800fedc:	e01f      	b.n	800ff1e <prvAcceptWaitClient+0x13a>
                        if( pxAddress != NULL )
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d01e      	beq.n	800ff22 <prvAcceptWaitClient+0x13e>
                            pxAddress->sin_family = FREERTOS_AF_INET6;
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	220a      	movs	r2, #10
 800fee8:	705a      	strb	r2, [r3, #1]
                            ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxClientSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	f103 0008 	add.w	r0, r3, #8
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	3354      	adds	r3, #84	@ 0x54
 800fef4:	2210      	movs	r2, #16
 800fef6:	4619      	mov	r1, r3
 800fef8:	f012 fe80 	bl	8022bfc <memcpy>
                            pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ff02:	021b      	lsls	r3, r3, #8
 800ff04:	b21a      	sxth	r2, r3
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ff0c:	0a1b      	lsrs	r3, r3, #8
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	b21b      	sxth	r3, r3
 800ff12:	4313      	orrs	r3, r2
 800ff14:	b21b      	sxth	r3, r3
 800ff16:	b29a      	uxth	r2, r3
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	805a      	strh	r2, [r3, #2]
                        break;
 800ff1c:	e001      	b.n	800ff22 <prvAcceptWaitClient+0x13e>
                        break;
 800ff1e:	bf00      	nop
 800ff20:	e000      	b.n	800ff24 <prvAcceptWaitClient+0x140>
                        break;
 800ff22:	bf00      	nop
            }
        }

        return pxClientSocket;
 800ff24:	697b      	ldr	r3, [r7, #20]
    }
 800ff26:	4618      	mov	r0, r3
 800ff28:	3718      	adds	r7, #24
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	08026668 	.word	0x08026668

0800ff34 <FreeRTOS_accept>:
 *         be bound already to the same port number as the listening socket.
 */
    Socket_t FreeRTOS_accept( Socket_t xServerSocket,
                              struct freertos_sockaddr * pxAddress,
                              socklen_t * pxAddressLength )
    {
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b08e      	sub	sp, #56	@ 0x38
 800ff38:	af02      	add	r7, sp, #8
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xServerSocket;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	627b      	str	r3, [r7, #36]	@ 0x24
        FreeRTOS_Socket_t * pxClientSocket = NULL;
 800ff44:	2300      	movs	r3, #0
 800ff46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        IPStackEvent_t xAskEvent;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	2106      	movs	r1, #6
 800ff50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff52:	f7fe fa6d 	bl	800e430 <prvValidSocket>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d103      	bne.n	800ff64 <FreeRTOS_accept+0x30>
            /* Not a valid socket or wrong type */

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 800ff5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff62:	e058      	b.n	8010016 <FreeRTOS_accept+0xe2>
        }
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 800ff64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff66:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ff6a:	f003 0308 	and.w	r3, r3, #8
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d000      	beq.n	800ff76 <FreeRTOS_accept+0x42>
 800ff74:	e008      	b.n	800ff88 <FreeRTOS_accept+0x54>
                 ( pxSocket->u.xTCP.eTCPState != eTCP_LISTEN ) )
 800ff76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff78:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	d003      	beq.n	800ff88 <FreeRTOS_accept+0x54>
            /* Parent socket is not in listening mode */

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 800ff80:	f04f 33ff 	mov.w	r3, #4294967295
 800ff84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff86:	e046      	b.n	8010016 <FreeRTOS_accept+0xe2>
        else
        {
            /* Loop will stop with breaks. */
            for( ; ; )
            {
                pxClientSocket = prvAcceptWaitClient( pxSocket, pxAddress, pxAddressLength );
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	68b9      	ldr	r1, [r7, #8]
 800ff8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff8e:	f7ff ff29 	bl	800fde4 <prvAcceptWaitClient>
 800ff92:	62f8      	str	r0, [r7, #44]	@ 0x2c

                if( pxClientSocket != NULL )
 800ff94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d013      	beq.n	800ffc2 <FreeRTOS_accept+0x8e>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800ff9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff9c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ffa0:	f003 0308 	and.w	r3, r3, #8
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d130      	bne.n	801000c <FreeRTOS_accept+0xd8>
                    {
                        /* Ask to set an event in 'xEventGroup' as soon as a new
                         * client gets connected for this listening socket. */
                        xAskEvent.eEventType = eTCPAcceptEvent;
 800ffaa:	2307      	movs	r3, #7
 800ffac:	743b      	strb	r3, [r7, #16]
                        xAskEvent.pvData = pxSocket;
 800ffae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb0:	617b      	str	r3, [r7, #20]
                        ( void ) xSendEventStructToIPTask( &xAskEvent, portMAX_DELAY );
 800ffb2:	f107 0310 	add.w	r3, r7, #16
 800ffb6:	f04f 31ff 	mov.w	r1, #4294967295
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7f9 fe78 	bl	8009cb0 <xSendEventStructToIPTask>
                    }

                    break;
 800ffc0:	e024      	b.n	801000c <FreeRTOS_accept+0xd8>
                }

                if( xTimed == pdFALSE )
 800ffc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d10c      	bne.n	800ffe2 <FreeRTOS_accept+0xae>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800ffc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffca:	6a1b      	ldr	r3, [r3, #32]
 800ffcc:	623b      	str	r3, [r7, #32]

                    if( xRemainingTime == ( TickType_t ) 0 )
 800ffce:	6a3b      	ldr	r3, [r7, #32]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d01d      	beq.n	8010010 <FreeRTOS_accept+0xdc>
                    {
                        break;
                    }

                    /* Don't get here a second time */
                    xTimed = pdTRUE;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800ffd8:	f107 0318 	add.w	r3, r7, #24
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7f5 fa2b 	bl	8005438 <vTaskSetTimeOutState>
                }

                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800ffe2:	f107 0220 	add.w	r2, r7, #32
 800ffe6:	f107 0318 	add.w	r3, r7, #24
 800ffea:	4611      	mov	r1, r2
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7f5 fa5b 	bl	80054a8 <xTaskCheckForTimeOut>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d10d      	bne.n	8010014 <FreeRTOS_accept+0xe0>
                {
                    break;
                }

                /* Put the calling task to 'sleep' until a down-stream event is received. */
                ( void ) xEventGroupWaitBits( pxSocket->xEventGroup,
 800fff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffa:	6858      	ldr	r0, [r3, #4]
 800fffc:	6a3b      	ldr	r3, [r7, #32]
 800fffe:	9300      	str	r3, [sp, #0]
 8010000:	2300      	movs	r3, #0
 8010002:	2201      	movs	r2, #1
 8010004:	2104      	movs	r1, #4
 8010006:	f7f3 fa2b 	bl	8003460 <xEventGroupWaitBits>
                pxClientSocket = prvAcceptWaitClient( pxSocket, pxAddress, pxAddressLength );
 801000a:	e7bd      	b.n	800ff88 <FreeRTOS_accept+0x54>
                    break;
 801000c:	bf00      	nop
 801000e:	e002      	b.n	8010016 <FreeRTOS_accept+0xe2>
                        break;
 8010010:	bf00      	nop
 8010012:	e000      	b.n	8010016 <FreeRTOS_accept+0xe2>
                    break;
 8010014:	bf00      	nop
                                              pdFALSE /*xWaitAllBits*/,
                                              xRemainingTime );
            }
        }

        return pxClientSocket;
 8010016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8010018:	4618      	mov	r0, r3
 801001a:	3730      	adds	r7, #48	@ 0x30
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 8010020:	b580      	push	{r7, lr}
 8010022:	b08a      	sub	sp, #40	@ 0x28
 8010024:	af02      	add	r7, sp, #8
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
 801002c:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	f003 0301 	and.w	r3, r3, #1
 8010034:	2b00      	cmp	r3, #0
 8010036:	d13b      	bne.n	80100b0 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	089b      	lsrs	r3, r3, #2
 801003c:	f003 0301 	and.w	r3, r3, #1
 8010040:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 8010048:	69bb      	ldr	r3, [r7, #24]
 801004a:	9300      	str	r3, [sp, #0]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	68ba      	ldr	r2, [r7, #8]
 8010050:	2100      	movs	r1, #0
 8010052:	f001 fa04 	bl	801145e <uxStreamBufferGet>
 8010056:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 8010058:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010060:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010064:	b2db      	uxtb	r3, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	d02b      	beq.n	80100c2 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010070:	4618      	mov	r0, r3
 8010072:	f001 f8c5 	bl	8011200 <uxStreamBufferFrontSpace>
 8010076:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801007e:	697a      	ldr	r2, [r7, #20]
 8010080:	429a      	cmp	r2, r3
 8010082:	d31e      	bcc.n	80100c2 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 8010084:	68fa      	ldr	r2, [r7, #12]
 8010086:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801008a:	f36f 13c7 	bfc	r3, #7, #1
 801008e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8010092:	68fa      	ldr	r2, [r7, #12]
 8010094:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010098:	f043 0301 	orr.w	r3, r3, #1
 801009c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2201      	movs	r2, #1
 80100a4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 80100a8:	2006      	movs	r0, #6
 80100aa:	f7f9 fdeb 	bl	8009c84 <xSendEventToIPTask>
 80100ae:	e008      	b.n	80100c2 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80100b6:	68b9      	ldr	r1, [r7, #8]
 80100b8:	4618      	mov	r0, r3
 80100ba:	f001 f930 	bl	801131e <uxStreamBufferGetPtr>
 80100be:	4603      	mov	r3, r0
 80100c0:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 80100c2:	69fb      	ldr	r3, [r7, #28]
    }
 80100c4:	4618      	mov	r0, r3
 80100c6:	3720      	adds	r7, #32
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b08e      	sub	sp, #56	@ 0x38
 80100d0:	af02      	add	r7, sp, #8
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	60b9      	str	r1, [r7, #8]
 80100d6:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 80100d8:	2300      	movs	r3, #0
 80100da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 80100dc:	2300      	movs	r3, #0
 80100de:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 80100e0:	2300      	movs	r3, #0
 80100e2:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d05f      	beq.n	80101ae <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80100f4:	4618      	mov	r0, r3
 80100f6:	f001 f894 	bl	8011222 <uxStreamBufferGetSize>
 80100fa:	4603      	mov	r3, r0
 80100fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 80100fe:	e056      	b.n	80101ae <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 801010a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801010e:	2b00      	cmp	r3, #0
 8010110:	d007      	beq.n	8010122 <prvRecvWait+0x56>
 8010112:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010116:	2b08      	cmp	r3, #8
 8010118:	d003      	beq.n	8010122 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 801011a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801011e:	2b09      	cmp	r3, #9
 8010120:	d10e      	bne.n	8010140 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 8010122:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8010126:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 801012e:	f003 0308 	and.w	r3, r3, #8
 8010132:	b2db      	uxtb	r3, r3
 8010134:	2b00      	cmp	r3, #0
 8010136:	d03e      	beq.n	80101b6 <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 8010138:	f06f 030b 	mvn.w	r3, #11
 801013c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 801013e:	e03a      	b.n	80101b6 <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 8010140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010142:	2b00      	cmp	r3, #0
 8010144:	d111      	bne.n	801016a <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	6a1b      	ldr	r3, [r3, #32]
 801014a:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d033      	beq.n	80101ba <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f003 0310 	and.w	r3, r3, #16
 8010158:	2b00      	cmp	r3, #0
 801015a:	d130      	bne.n	80101be <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 801015c:	2301      	movs	r3, #1
 801015e:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 8010160:	f107 0314 	add.w	r3, r7, #20
 8010164:	4618      	mov	r0, r3
 8010166:	f7f5 f967 	bl	8005438 <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 801016a:	f107 021c 	add.w	r2, r7, #28
 801016e:	f107 0314 	add.w	r3, r7, #20
 8010172:	4611      	mov	r1, r2
 8010174:	4618      	mov	r0, r3
 8010176:	f7f5 f997 	bl	80054a8 <xTaskCheckForTimeOut>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	d120      	bne.n	80101c2 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6858      	ldr	r0, [r3, #4]
 8010184:	69fb      	ldr	r3, [r7, #28]
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	2300      	movs	r3, #0
 801018a:	2201      	movs	r2, #1
 801018c:	2161      	movs	r1, #97	@ 0x61
 801018e:	f7f3 f967 	bl	8003460 <xEventGroupWaitBits>
 8010192:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801019a:	2b00      	cmp	r3, #0
 801019c:	d007      	beq.n	80101ae <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80101a4:	4618      	mov	r0, r3
 80101a6:	f001 f83c 	bl	8011222 <uxStreamBufferGetSize>
 80101aa:	4603      	mov	r3, r0
 80101ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 80101ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d0a5      	beq.n	8010100 <prvRecvWait+0x34>
 80101b4:	e006      	b.n	80101c4 <prvRecvWait+0xf8>
                break;
 80101b6:	bf00      	nop
 80101b8:	e004      	b.n	80101c4 <prvRecvWait+0xf8>
                    break;
 80101ba:	bf00      	nop
 80101bc:	e002      	b.n	80101c4 <prvRecvWait+0xf8>
                    break;
 80101be:	bf00      	nop
 80101c0:	e000      	b.n	80101c4 <prvRecvWait+0xf8>
                break;
 80101c2:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101c8:	601a      	str	r2, [r3, #0]

        return xByteCount;
 80101ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80101cc:	4618      	mov	r0, r3
 80101ce:	3730      	adds	r7, #48	@ 0x30
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b088      	sub	sp, #32
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	607a      	str	r2, [r7, #4]
 80101e0:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 80101ea:	2300      	movs	r3, #0
 80101ec:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 80101ee:	2201      	movs	r2, #1
 80101f0:	2106      	movs	r1, #6
 80101f2:	69b8      	ldr	r0, [r7, #24]
 80101f4:	f7fe f91c 	bl	800e430 <prvValidSocket>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d103      	bne.n	8010206 <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 80101fe:	f06f 0315 	mvn.w	r3, #21
 8010202:	61fb      	str	r3, [r7, #28]
 8010204:	e01d      	b.n	8010242 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	f003 0301 	and.w	r3, r3, #1
 801020c:	2b00      	cmp	r3, #0
 801020e:	d006      	beq.n	801021e <FreeRTOS_recv+0x4a>
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d103      	bne.n	801021e <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 8010216:	f06f 0315 	mvn.w	r3, #21
 801021a:	61fb      	str	r3, [r7, #28]
 801021c:	e011      	b.n	8010242 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 801021e:	f107 0314 	add.w	r3, r7, #20
 8010222:	683a      	ldr	r2, [r7, #0]
 8010224:	4619      	mov	r1, r3
 8010226:	69b8      	ldr	r0, [r7, #24]
 8010228:	f7ff ff50 	bl	80100cc <prvRecvWait>
 801022c:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	2b00      	cmp	r3, #0
 8010232:	dd06      	ble.n	8010242 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	68b9      	ldr	r1, [r7, #8]
 801023a:	69b8      	ldr	r0, [r7, #24]
 801023c:	f7ff fef0 	bl	8010020 <prvRecvData>
 8010240:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 8010242:	69fb      	ldr	r3, [r7, #28]
    }
 8010244:	4618      	mov	r0, r3
 8010246:	3720      	adds	r7, #32
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 8010256:	2301      	movs	r3, #1
 8010258:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 801025a:	2201      	movs	r2, #1
 801025c:	2106      	movs	r1, #6
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f7fe f8e6 	bl	800e430 <prvValidSocket>
 8010264:	4603      	mov	r3, r0
 8010266:	2b00      	cmp	r3, #0
 8010268:	d103      	bne.n	8010272 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 801026a:	f06f 0315 	mvn.w	r3, #21
 801026e:	60fb      	str	r3, [r7, #12]
 8010270:	e040      	b.n	80102f4 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8010278:	f003 0308 	and.w	r3, r3, #8
 801027c:	b2db      	uxtb	r3, r3
 801027e:	2b00      	cmp	r3, #0
 8010280:	d003      	beq.n	801028a <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 8010282:	f06f 030b 	mvn.w	r3, #11
 8010286:	60fb      	str	r3, [r7, #12]
 8010288:	e034      	b.n	80102f4 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010290:	2b00      	cmp	r3, #0
 8010292:	d009      	beq.n	80102a8 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 801029a:	2b08      	cmp	r3, #8
 801029c:	d004      	beq.n	80102a8 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 80102a4:	2b09      	cmp	r3, #9
 80102a6:	d103      	bne.n	80102b0 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 80102a8:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80102ac:	60fb      	str	r3, [r7, #12]
 80102ae:	e021      	b.n	80102f4 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80102b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102ba:	b2db      	uxtb	r3, r3
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d002      	beq.n	80102c6 <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 80102c0:	2300      	movs	r3, #0
 80102c2:	60fb      	str	r3, [r7, #12]
 80102c4:	e016      	b.n	80102f4 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d102      	bne.n	80102d2 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 80102cc:	2300      	movs	r3, #0
 80102ce:	60fb      	str	r3, [r7, #12]
 80102d0:	e010      	b.n	80102f4 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d10b      	bne.n	80102f4 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 80102dc:	2100      	movs	r1, #0
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 fac6 	bl	8010870 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d102      	bne.n	80102f4 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 80102ee:	f06f 030b 	mvn.w	r3, #11
 80102f2:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 80102f4:	68fb      	ldr	r3, [r7, #12]
    }
 80102f6:	4618      	mov	r0, r3
 80102f8:	3710      	adds	r7, #16
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 80102fe:	b580      	push	{r7, lr}
 8010300:	b088      	sub	sp, #32
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
 8010306:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 8010308:	2300      	movs	r3, #0
 801030a:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 8010310:	2300      	movs	r3, #0
 8010312:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	2200      	movs	r2, #0
 8010318:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 801031a:	2200      	movs	r2, #0
 801031c:	2106      	movs	r1, #6
 801031e:	6978      	ldr	r0, [r7, #20]
 8010320:	f7fe f886 	bl	800e430 <prvValidSocket>
 8010324:	4603      	mov	r3, r0
 8010326:	2b01      	cmp	r3, #1
 8010328:	d135      	bne.n	8010396 <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010330:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 8010332:	69bb      	ldr	r3, [r7, #24]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d10f      	bne.n	8010358 <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 801033e:	f003 0308 	and.w	r3, r3, #8
 8010342:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 8010344:	2b00      	cmp	r3, #0
 8010346:	d107      	bne.n	8010358 <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 8010348:	2100      	movs	r1, #0
 801034a:	6978      	ldr	r0, [r7, #20]
 801034c:	f000 fa90 	bl	8010870 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010356:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 8010358:	69bb      	ldr	r3, [r7, #24]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d01b      	beq.n	8010396 <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 801035e:	69b8      	ldr	r0, [r7, #24]
 8010360:	f000 ff3d 	bl	80111de <uxStreamBufferGetSpace>
 8010364:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 8010366:	69bb      	ldr	r3, [r7, #24]
 8010368:	691a      	ldr	r2, [r3, #16]
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	689b      	ldr	r3, [r3, #8]
 801036e:	1ad3      	subs	r3, r2, r3
 8010370:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 8010372:	68fa      	ldr	r2, [r7, #12]
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	429a      	cmp	r2, r3
 8010378:	d803      	bhi.n	8010382 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 801037a:	68fa      	ldr	r2, [r7, #12]
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	601a      	str	r2, [r3, #0]
 8010380:	e002      	b.n	8010388 <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 8010382:	693a      	ldr	r2, [r7, #16]
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	689b      	ldr	r3, [r3, #8]
 801038c:	3310      	adds	r3, #16
 801038e:	69ba      	ldr	r2, [r7, #24]
 8010390:	4413      	add	r3, r2
 8010392:	3304      	adds	r3, #4
 8010394:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 8010396:	69fb      	ldr	r3, [r7, #28]
    }
 8010398:	4618      	mov	r0, r3
 801039a:	3720      	adds	r7, #32
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b090      	sub	sp, #64	@ 0x40
 80103a4:	af02      	add	r7, sp, #8
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	60b9      	str	r1, [r7, #8]
 80103aa:	607a      	str	r2, [r7, #4]
 80103ac:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 80103ae:	2300      	movs	r3, #0
 80103b0:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80103bc:	4618      	mov	r0, r3
 80103be:	f000 ff0e 	bl	80111de <uxStreamBufferGetSpace>
 80103c2:	4603      	mov	r3, r0
 80103c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 80103c6:	2300      	movs	r3, #0
 80103c8:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 80103ce:	e08f      	b.n	80104f0 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 80103d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	dd4b      	ble.n	801046e <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 80103d6:	2300      	movs	r3, #0
 80103d8:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 80103da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103de:	429a      	cmp	r2, r3
 80103e0:	dd01      	ble.n	80103e6 <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 80103e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80103ec:	f003 0310 	and.w	r3, r3, #16
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d00e      	beq.n	8010414 <prvTCPSendLoop+0x74>
 80103f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d10a      	bne.n	8010414 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 80103fe:	2301      	movs	r3, #1
 8010400:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 8010402:	f7f4 fb5d 	bl	8004ac0 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 8010406:	68fa      	ldr	r2, [r7, #12]
 8010408:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801040c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010410:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801041a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801041c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801041e:	2100      	movs	r1, #0
 8010420:	f000 ff9d 	bl	801135e <uxStreamBufferAdd>
 8010424:	4603      	mov	r3, r0
 8010426:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 8010428:	6a3b      	ldr	r3, [r7, #32]
 801042a:	2b01      	cmp	r3, #1
 801042c:	d101      	bne.n	8010432 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 801042e:	f7f4 fb55 	bl	8004adc <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	2201      	movs	r2, #1
 8010436:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 801043a:	f7fa fb7b 	bl	800ab34 <xIsCallingFromIPTask>
 801043e:	4603      	mov	r3, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	d102      	bne.n	801044a <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010444:	2006      	movs	r0, #6
 8010446:	f7f9 fc1d 	bl	8009c84 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 801044a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801044c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801044e:	1ad3      	subs	r3, r2, r3
 8010450:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 8010452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010456:	4413      	add	r3, r2
 8010458:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 801045a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801045c:	2b00      	cmp	r3, #0
 801045e:	d053      	beq.n	8010508 <prvTCPSendLoop+0x168>
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d050      	beq.n	8010508 <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 8010466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801046a:	4413      	add	r3, r2
 801046c:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 801046e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010470:	2b00      	cmp	r3, #0
 8010472:	d119      	bne.n	80104a8 <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010478:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 801047a:	f7fa fb5b 	bl	800ab34 <xIsCallingFromIPTask>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d001      	beq.n	8010488 <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 8010484:	2300      	movs	r3, #0
 8010486:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 8010488:	69fb      	ldr	r3, [r7, #28]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d035      	beq.n	80104fa <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	f003 0310 	and.w	r3, r3, #16
 8010494:	2b00      	cmp	r3, #0
 8010496:	d132      	bne.n	80104fe <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 8010498:	2301      	movs	r3, #1
 801049a:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 801049c:	f107 0314 	add.w	r3, r7, #20
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7f4 ffc9 	bl	8005438 <vTaskSetTimeOutState>
 80104a6:	e00a      	b.n	80104be <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 80104a8:	f107 021c 	add.w	r2, r7, #28
 80104ac:	f107 0314 	add.w	r3, r7, #20
 80104b0:	4611      	mov	r1, r2
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7f4 fff8 	bl	80054a8 <xTaskCheckForTimeOut>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d121      	bne.n	8010502 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	6858      	ldr	r0, [r3, #4]
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	9300      	str	r3, [sp, #0]
 80104c6:	2300      	movs	r3, #0
 80104c8:	2201      	movs	r2, #1
 80104ca:	2122      	movs	r1, #34	@ 0x22
 80104cc:	f7f2 ffc8 	bl	8003460 <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 80104d0:	6879      	ldr	r1, [r7, #4]
 80104d2:	68f8      	ldr	r0, [r7, #12]
 80104d4:	f7ff feba 	bl	801024c <prvTCPSendCheck>
 80104d8:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 80104da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104dc:	2b00      	cmp	r3, #0
 80104de:	db12      	blt.n	8010506 <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80104e6:	4618      	mov	r0, r3
 80104e8:	f000 fe79 	bl	80111de <uxStreamBufferGetSpace>
 80104ec:	4603      	mov	r3, r0
 80104ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 80104f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f73f af6c 	bgt.w	80103d0 <prvTCPSendLoop+0x30>
 80104f8:	e006      	b.n	8010508 <prvTCPSendLoop+0x168>
                    break;
 80104fa:	bf00      	nop
 80104fc:	e004      	b.n	8010508 <prvTCPSendLoop+0x168>
                    break;
 80104fe:	bf00      	nop
 8010500:	e002      	b.n	8010508 <prvTCPSendLoop+0x168>
                    break;
 8010502:	bf00      	nop
 8010504:	e000      	b.n	8010508 <prvTCPSendLoop+0x168>
                break;
 8010506:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 8010508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801050a:	4618      	mov	r0, r3
 801050c:	3738      	adds	r7, #56	@ 0x38
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
	...

08010514 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 8010514:	b580      	push	{r7, lr}
 8010516:	b086      	sub	sp, #24
 8010518:	af00      	add	r7, sp, #0
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
 8010520:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 8010526:	6879      	ldr	r1, [r7, #4]
 8010528:	6938      	ldr	r0, [r7, #16]
 801052a:	f7ff fe8f 	bl	801024c <prvTCPSendCheck>
 801052e:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	2b00      	cmp	r3, #0
 8010534:	dd24      	ble.n	8010580 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	68b9      	ldr	r1, [r7, #8]
 801053c:	6938      	ldr	r0, [r7, #16]
 801053e:	f7ff ff2f 	bl	80103a0 <prvTCPSendLoop>
 8010542:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d11a      	bne.n	8010580 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010550:	2b05      	cmp	r3, #5
 8010552:	d903      	bls.n	801055c <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 8010554:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8010558:	617b      	str	r3, [r7, #20]
 801055a:	e011      	b.n	8010580 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010560:	2b17      	cmp	r3, #23
 8010562:	d00a      	beq.n	801057a <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010568:	4619      	mov	r1, r3
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010574:	4805      	ldr	r0, [pc, #20]	@ (801058c <FreeRTOS_send+0x78>)
 8010576:	f012 f925 	bl	80227c4 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 801057a:	f06f 031b 	mvn.w	r3, #27
 801057e:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 8010580:	697b      	ldr	r3, [r7, #20]
    }
 8010582:	4618      	mov	r0, r3
 8010584:	3718      	adds	r7, #24
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	08026694 	.word	0x08026694

08010590 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 801059a:	2300      	movs	r3, #0
 801059c:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 80105a2:	2201      	movs	r2, #1
 80105a4:	2106      	movs	r1, #6
 80105a6:	68b8      	ldr	r0, [r7, #8]
 80105a8:	f7fd ff42 	bl	800e430 <prvValidSocket>
 80105ac:	4603      	mov	r3, r0
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d103      	bne.n	80105ba <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 80105b2:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 80105b6:	60fb      	str	r3, [r7, #12]
 80105b8:	e056      	b.n	8010668 <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d008      	beq.n	80105d6 <FreeRTOS_listen+0x46>
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80105ca:	2b08      	cmp	r3, #8
 80105cc:	d003      	beq.n	80105d6 <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 80105ce:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 80105d2:	60fb      	str	r3, [r7, #12]
 80105d4:	e048      	b.n	8010668 <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 80105d6:	6839      	ldr	r1, [r7, #0]
 80105d8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80105dc:	f7fa fc5a 	bl	800ae94 <FreeRTOS_min_int32>
 80105e0:	4603      	mov	r3, r0
 80105e2:	b29a      	uxth	r2, r3
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80105f0:	f003 0308 	and.w	r3, r3, #8
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d032      	beq.n	8010660 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010600:	2b00      	cmp	r3, #0
 8010602:	d005      	beq.n	8010610 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801060a:	4618      	mov	r0, r3
 801060c:	f000 fe2b 	bl	8011266 <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d005      	beq.n	8010626 <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010620:	4618      	mov	r0, r3
 8010622:	f000 fe20 	bl	8011266 <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	33aa      	adds	r3, #170	@ 0xaa
 801062a:	225a      	movs	r2, #90	@ 0x5a
 801062c:	2100      	movs	r1, #0
 801062e:	4618      	mov	r0, r3
 8010630:	f012 fbf1 	bl	8022e16 <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801063a:	22c0      	movs	r2, #192	@ 0xc0
 801063c:	2100      	movs	r1, #0
 801063e:	4618      	mov	r0, r3
 8010640:	f012 fbe9 	bl	8022e16 <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	3368      	adds	r3, #104	@ 0x68
 8010648:	2204      	movs	r2, #4
 801064a:	2100      	movs	r1, #0
 801064c:	4618      	mov	r0, r3
 801064e:	f012 fbe2 	bl	8022e16 <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 8010652:	68ba      	ldr	r2, [r7, #8]
 8010654:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010658:	f043 0308 	orr.w	r3, r3, #8
 801065c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 8010660:	2101      	movs	r1, #1
 8010662:	68b8      	ldr	r0, [r7, #8]
 8010664:	f001 f8a2 	bl	80117ac <vTCPStateChange>
        }

        return xResult;
 8010668:	68fb      	ldr	r3, [r7, #12]
    }
 801066a:	4618      	mov	r0, r3
 801066c:	3710      	adds	r7, #16
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 8010672:	b580      	push	{r7, lr}
 8010674:	b084      	sub	sp, #16
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
 801067a:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 8010680:	2201      	movs	r2, #1
 8010682:	2106      	movs	r1, #6
 8010684:	68b8      	ldr	r0, [r7, #8]
 8010686:	f7fd fed3 	bl	800e430 <prvValidSocket>
 801068a:	4603      	mov	r3, r0
 801068c:	2b00      	cmp	r3, #0
 801068e:	d103      	bne.n	8010698 <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8010690:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010694:	60fb      	str	r3, [r7, #12]
 8010696:	e018      	b.n	80106ca <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801069e:	2b05      	cmp	r3, #5
 80106a0:	d003      	beq.n	80106aa <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 80106a2:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80106a6:	60fb      	str	r3, [r7, #12]
 80106a8:	e00f      	b.n	80106ca <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 80106aa:	68ba      	ldr	r2, [r7, #8]
 80106ac:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80106b0:	f043 0320 	orr.w	r3, r3, #32
 80106b4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	2201      	movs	r2, #1
 80106bc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 80106c0:	2006      	movs	r0, #6
 80106c2:	f7f9 fadf 	bl	8009c84 <xSendEventToIPTask>
            xResult = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 80106ca:	68fb      	ldr	r3, [r7, #12]
    }
 80106cc:	4618      	mov	r0, r3
 80106ce:	3710      	adds	r7, #16
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b08a      	sub	sp, #40	@ 0x28
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 80106dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80106e0:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 80106e2:	f7f4 faff 	bl	8004ce4 <xTaskGetTickCount>
 80106e6:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 80106e8:	4b32      	ldr	r3, [pc, #200]	@ (80107b4 <xTCPTimerCheck+0xe0>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	69ba      	ldr	r2, [r7, #24]
 80106ee:	1ad3      	subs	r3, r2, r3
 80106f0:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80106f2:	4b31      	ldr	r3, [pc, #196]	@ (80107b8 <xTCPTimerCheck+0xe4>)
 80106f4:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80106f6:	4b31      	ldr	r3, [pc, #196]	@ (80107bc <xTCPTimerCheck+0xe8>)
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 80106fc:	4a2d      	ldr	r2, [pc, #180]	@ (80107b4 <xTCPTimerCheck+0xe0>)
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 8010702:	6a3b      	ldr	r3, [r7, #32]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d14b      	bne.n	80107a0 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 8010708:	2301      	movs	r3, #1
 801070a:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 801070c:	e048      	b.n	80107a0 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801070e:	69fb      	ldr	r3, [r7, #28]
 8010710:	68db      	ldr	r3, [r3, #12]
 8010712:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010720:	2b00      	cmp	r3, #0
 8010722:	d03a      	beq.n	801079a <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801072a:	461a      	mov	r2, r3
 801072c:	6a3b      	ldr	r3, [r7, #32]
 801072e:	4293      	cmp	r3, r2
 8010730:	d20a      	bcs.n	8010748 <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 8010738:	6a3b      	ldr	r3, [r7, #32]
 801073a:	b29b      	uxth	r3, r3
 801073c:	1ad3      	subs	r3, r2, r3
 801073e:	b29a      	uxth	r2, r3
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8010746:	e00a      	b.n	801075e <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	2200      	movs	r2, #0
 801074c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 8010750:	6938      	ldr	r0, [r7, #16]
 8010752:	f000 ff33 	bl	80115bc <xTCPSocketCheck>
 8010756:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2b00      	cmp	r3, #0
 801075c:	db1f      	blt.n	801079e <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d008      	beq.n	8010778 <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d003      	beq.n	8010774 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 801076c:	6938      	ldr	r0, [r7, #16]
 801076e:	f7ff f970 	bl	800fa52 <vSocketWakeUpUser>
 8010772:	e001      	b.n	8010778 <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 8010774:	2300      	movs	r3, #0
 8010776:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801077e:	2b00      	cmp	r3, #0
 8010780:	d00e      	beq.n	80107a0 <xTCPTimerCheck+0xcc>
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010788:	461a      	mov	r2, r3
 801078a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801078c:	4293      	cmp	r3, r2
 801078e:	d907      	bls.n	80107a0 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010796:	627b      	str	r3, [r7, #36]	@ 0x24
 8010798:	e002      	b.n	80107a0 <xTCPTimerCheck+0xcc>
                continue;
 801079a:	bf00      	nop
 801079c:	e000      	b.n	80107a0 <xTCPTimerCheck+0xcc>
                    continue;
 801079e:	bf00      	nop
        while( pxIterator != pxEnd )
 80107a0:	69fa      	ldr	r2, [r7, #28]
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d1b2      	bne.n	801070e <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 80107a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80107aa:	4618      	mov	r0, r3
 80107ac:	3728      	adds	r7, #40	@ 0x28
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	2000161c 	.word	0x2000161c
 80107b8:	20001610 	.word	0x20001610
 80107bc:	20001608 	.word	0x20001608

080107c0 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 80107c0:	b082      	sub	sp, #8
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b088      	sub	sp, #32
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
 80107ca:	6039      	str	r1, [r7, #0]
 80107cc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80107d0:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 80107d4:	2300      	movs	r3, #0
 80107d6:	61bb      	str	r3, [r7, #24]
 80107d8:	2300      	movs	r3, #0
 80107da:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80107dc:	4b23      	ldr	r3, [pc, #140]	@ (801086c <pxTCPSocketLookup+0xac>)
 80107de:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	61fb      	str	r3, [r7, #28]
 80107e6:	e02e      	b.n	8010846 <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80107e8:	69fb      	ldr	r3, [r7, #28]
 80107ea:	68db      	ldr	r3, [r3, #12]
 80107ec:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d122      	bne.n	8010840 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010800:	2b01      	cmp	r3, #1
 8010802:	d102      	bne.n	801080a <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	617b      	str	r3, [r7, #20]
 8010808:	e01a      	b.n	8010840 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010812:	b29b      	uxth	r3, r3
 8010814:	429a      	cmp	r2, r3
 8010816:	d113      	bne.n	8010840 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 8010818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801081a:	2b00      	cmp	r3, #0
 801081c:	d006      	beq.n	801082c <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 801081e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f7fb f8b6 	bl	800b994 <pxTCPSocketLookup_IPv6>
 8010828:	61b8      	str	r0, [r7, #24]
 801082a:	e006      	b.n	801083a <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010832:	429a      	cmp	r2, r3
 8010834:	d101      	bne.n	801083a <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d107      	bne.n	8010850 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 8010840:	69fb      	ldr	r3, [r7, #28]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 8010846:	69fa      	ldr	r2, [r7, #28]
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	429a      	cmp	r2, r3
 801084c:	d1cc      	bne.n	80107e8 <pxTCPSocketLookup+0x28>
 801084e:	e000      	b.n	8010852 <pxTCPSocketLookup+0x92>
                    {
                        break;
 8010850:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d101      	bne.n	801085c <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 801085c:	69bb      	ldr	r3, [r7, #24]
    }
 801085e:	4618      	mov	r0, r3
 8010860:	3720      	adds	r7, #32
 8010862:	46bd      	mov	sp, r7
 8010864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010868:	b002      	add	sp, #8
 801086a:	4770      	bx	lr
 801086c:	20001610 	.word	0x20001610

08010870 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 8010870:	b580      	push	{r7, lr}
 8010872:	b088      	sub	sp, #32
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d048      	beq.n	8010912 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 8010880:	2314      	movs	r3, #20
 8010882:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 8010884:	2350      	movs	r3, #80	@ 0x50
 8010886:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8010894:	fbb3 f3f2 	udiv	r3, r3, r2
 8010898:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d00f      	beq.n	80108c0 <prvTCPCreateStream+0x50>
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	2b04      	cmp	r3, #4
 80108a4:	d80c      	bhi.n	80108c0 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	3b01      	subs	r3, #1
 80108aa:	4a40      	ldr	r2, [pc, #256]	@ (80109ac <prvTCPCreateStream+0x13c>)
 80108ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80108b0:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	3b01      	subs	r3, #1
 80108b6:	4a3d      	ldr	r2, [pc, #244]	@ (80109ac <prvTCPCreateStream+0x13c>)
 80108b8:	00db      	lsls	r3, r3, #3
 80108ba:	4413      	add	r3, r2
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80108c6:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d10c      	bne.n	80108ec <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80108d8:	69ba      	ldr	r2, [r7, #24]
 80108da:	fb02 f303 	mul.w	r3, r2, r3
 80108de:	4a34      	ldr	r2, [pc, #208]	@ (80109b0 <prvTCPCreateStream+0x140>)
 80108e0:	fba2 2303 	umull	r2, r3, r2, r3
 80108e4:	095a      	lsrs	r2, r3, #5
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d111      	bne.n	801091a <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80108fc:	697a      	ldr	r2, [r7, #20]
 80108fe:	fb02 f303 	mul.w	r3, r2, r3
 8010902:	4a2b      	ldr	r2, [pc, #172]	@ (80109b0 <prvTCPCreateStream+0x140>)
 8010904:	fba2 2303 	umull	r2, r3, r2, r3
 8010908:	095a      	lsrs	r2, r3, #5
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8010910:	e003      	b.n	801091a <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010918:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 801091a:	69fb      	ldr	r3, [r7, #28]
 801091c:	3304      	adds	r3, #4
 801091e:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	f023 0303 	bic.w	r3, r3, #3
 8010926:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	3314      	adds	r3, #20
 801092c:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 801092e:	68f8      	ldr	r0, [r7, #12]
 8010930:	f7f6 f848 	bl	80069c4 <pvPortMalloc>
 8010934:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d10e      	bne.n	801095a <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 801093c:	481d      	ldr	r0, [pc, #116]	@ (80109b4 <prvTCPCreateStream+0x144>)
 801093e:	f011 ff41 	bl	80227c4 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8010948:	f043 0308 	orr.w	r3, r3, #8
 801094c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8010950:	2108      	movs	r1, #8
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 ff2a 	bl	80117ac <vTCPStateChange>
 8010958:	e022      	b.n	80109a0 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 801095a:	2214      	movs	r2, #20
 801095c:	2100      	movs	r1, #0
 801095e:	68b8      	ldr	r0, [r7, #8]
 8010960:	f012 fa59 	bl	8022e16 <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	69fa      	ldr	r2, [r7, #28]
 8010968:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 801096a:	4b13      	ldr	r3, [pc, #76]	@ (80109b8 <prvTCPCreateStream+0x148>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00a      	beq.n	8010988 <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d001      	beq.n	801097c <prvTCPCreateStream+0x10c>
 8010978:	2152      	movs	r1, #82	@ 0x52
 801097a:	e000      	b.n	801097e <prvTCPCreateStream+0x10e>
 801097c:	2154      	movs	r1, #84	@ 0x54
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	69fa      	ldr	r2, [r7, #28]
 8010982:	480e      	ldr	r0, [pc, #56]	@ (80109bc <prvTCPCreateStream+0x14c>)
 8010984:	f011 ff1e 	bl	80227c4 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d004      	beq.n	8010998 <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	68ba      	ldr	r2, [r7, #8]
 8010992:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8010996:	e003      	b.n	80109a0 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	68ba      	ldr	r2, [r7, #8]
 801099c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 80109a0:	68bb      	ldr	r3, [r7, #8]
    }
 80109a2:	4618      	mov	r0, r3
 80109a4:	3720      	adds	r7, #32
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	08027fcc 	.word	0x08027fcc
 80109b0:	51eb851f 	.word	0x51eb851f
 80109b4:	080266bc 	.word	0x080266bc
 80109b8:	2000164c 	.word	0x2000164c
 80109bc:	080266e0 	.word	0x080266e0

080109c0 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b08a      	sub	sp, #40	@ 0x28
 80109c4:	af02      	add	r7, sp, #8
 80109c6:	60f8      	str	r0, [r7, #12]
 80109c8:	60b9      	str	r1, [r7, #8]
 80109ca:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 80109d0:	2300      	movs	r3, #0
 80109d2:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d006      	beq.n	80109e8 <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 80109da:	69fb      	ldr	r3, [r7, #28]
 80109dc:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 80109e2:	2300      	movs	r3, #0
 80109e4:	61fb      	str	r3, [r7, #28]
 80109e6:	e009      	b.n	80109fc <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80109ee:	f107 0214 	add.w	r2, r7, #20
 80109f2:	4611      	mov	r1, r2
 80109f4:	4618      	mov	r0, r3
 80109f6:	f000 fc92 	bl	801131e <uxStreamBufferGetPtr>
 80109fa:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 80109fc:	69bb      	ldr	r3, [r7, #24]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d011      	beq.n	8010a26 <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010a08:	6979      	ldr	r1, [r7, #20]
 8010a0a:	69ba      	ldr	r2, [r7, #24]
 8010a0c:	68f8      	ldr	r0, [r7, #12]
 8010a0e:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 8010a16:	2300      	movs	r3, #0
 8010a18:	9300      	str	r3, [sp, #0]
 8010a1a:	69bb      	ldr	r3, [r7, #24]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	2100      	movs	r1, #0
 8010a20:	f000 fd1d 	bl	801145e <uxStreamBufferGet>
        {
 8010a24:	e7d4      	b.n	80109d0 <vTCPAddRxdata_Callback+0x10>
        }
    }
 8010a26:	bf00      	nop
 8010a28:	3720      	adds	r7, #32
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}

08010a2e <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 8010a2e:	b580      	push	{r7, lr}
 8010a30:	b084      	sub	sp, #16
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010a3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010a40:	b2db      	uxtb	r3, r3
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d121      	bne.n	8010a8a <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f000 fbd7 	bl	8011200 <uxStreamBufferFrontSpace>
 8010a52:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d814      	bhi.n	8010a8a <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a6a:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010a74:	f043 0301 	orr.w	r3, r3, #1
 8010a78:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2201      	movs	r2, #1
 8010a80:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010a84:	2006      	movs	r0, #6
 8010a86:	f7f9 f8fd 	bl	8009c84 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f043 0201 	orr.w	r2, r3, #1
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a9a:	f003 0301 	and.w	r3, r3, #1
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d005      	beq.n	8010aae <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 8010aae:	bf00      	nop
 8010ab0:	3710      	adds	r7, #16
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
	...

08010ab8 <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 8010ab8:	b5b0      	push	{r4, r5, r7, lr}
 8010aba:	b08c      	sub	sp, #48	@ 0x30
 8010abc:	af04      	add	r7, sp, #16
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	607a      	str	r2, [r7, #4]
 8010ac4:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010acc:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d001      	beq.n	8010ae0 <lTCPAddRxdata+0x28>
 8010adc:	2301      	movs	r3, #1
 8010ade:	e000      	b.n	8010ae2 <lTCPAddRxdata+0x2a>
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d10a      	bne.n	8010b04 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8010aee:	2101      	movs	r1, #1
 8010af0:	68f8      	ldr	r0, [r7, #12]
 8010af2:	f7ff febd 	bl	8010870 <prvTCPCreateStream>
 8010af6:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d102      	bne.n	8010b04 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 8010afe:	f04f 33ff 	mov.w	r3, #4294967295
 8010b02:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 8010b04:	69bb      	ldr	r3, [r7, #24]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	db41      	blt.n	8010b8e <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d00f      	beq.n	8010b30 <lTCPAddRxdata+0x78>
 8010b10:	69f8      	ldr	r0, [r7, #28]
 8010b12:	f000 fb86 	bl	8011222 <uxStreamBufferGetSize>
 8010b16:	4603      	mov	r3, r0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d109      	bne.n	8010b30 <lTCPAddRxdata+0x78>
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d106      	bne.n	8010b30 <lTCPAddRxdata+0x78>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d003      	beq.n	8010b30 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	687a      	ldr	r2, [r7, #4]
 8010b34:	68b9      	ldr	r1, [r7, #8]
 8010b36:	69f8      	ldr	r0, [r7, #28]
 8010b38:	f000 fc11 	bl	801135e <uxStreamBufferAdd>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	69ba      	ldr	r2, [r7, #24]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d013      	beq.n	8010b70 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 8010b48:	69fb      	ldr	r3, [r7, #28]
 8010b4a:	681c      	ldr	r4, [r3, #0]
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	689d      	ldr	r5, [r3, #8]
 8010b50:	69f8      	ldr	r0, [r7, #28]
 8010b52:	f000 fb55 	bl	8011200 <uxStreamBufferFrontSpace>
 8010b56:	4602      	mov	r2, r0
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	9303      	str	r3, [sp, #12]
 8010b5e:	9202      	str	r2, [sp, #8]
 8010b60:	9501      	str	r5, [sp, #4]
 8010b62:	9400      	str	r4, [sp, #0]
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	69ba      	ldr	r2, [r7, #24]
 8010b68:	68b9      	ldr	r1, [r7, #8]
 8010b6a:	480b      	ldr	r0, [pc, #44]	@ (8010b98 <lTCPAddRxdata+0xe0>)
 8010b6c:	f011 fe2a 	bl	80227c4 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d10b      	bne.n	8010b8e <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d005      	beq.n	8010b88 <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 8010b7c:	683a      	ldr	r2, [r7, #0]
 8010b7e:	6979      	ldr	r1, [r7, #20]
 8010b80:	68f8      	ldr	r0, [r7, #12]
 8010b82:	f7ff ff1d 	bl	80109c0 <vTCPAddRxdata_Callback>
 8010b86:	e002      	b.n	8010b8e <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 8010b88:	68f8      	ldr	r0, [r7, #12]
 8010b8a:	f7ff ff50 	bl	8010a2e <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 8010b8e:	69bb      	ldr	r3, [r7, #24]
    }
 8010b90:	4618      	mov	r0, r3
 8010b92:	3720      	adds	r7, #32
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bdb0      	pop	{r4, r5, r7, pc}
 8010b98:	0802671c 	.word	0x0802671c

08010b9c <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010bae:	2b06      	cmp	r3, #6
 8010bb0:	d003      	beq.n	8010bba <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010bb2:	f06f 0315 	mvn.w	r3, #21
 8010bb6:	60fb      	str	r3, [r7, #12]
 8010bb8:	e011      	b.n	8010bde <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d008      	beq.n	8010bd6 <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f000 fb07 	bl	80111de <uxStreamBufferGetSpace>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	60fb      	str	r3, [r7, #12]
 8010bd4:	e003      	b.n	8010bde <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010bdc:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010bde:	68fb      	ldr	r3, [r7, #12]
    }
 8010be0:	4618      	mov	r0, r3
 8010be2:	3710      	adds	r7, #16
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010bfa:	2b06      	cmp	r3, #6
 8010bfc:	d003      	beq.n	8010c06 <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010bfe:	f06f 0315 	mvn.w	r3, #21
 8010c02:	60fb      	str	r3, [r7, #12]
 8010c04:	e00f      	b.n	8010c26 <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d008      	beq.n	8010c22 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010c16:	4618      	mov	r0, r3
 8010c18:	f000 fb03 	bl	8011222 <uxStreamBufferGetSize>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	60fb      	str	r3, [r7, #12]
 8010c20:	e001      	b.n	8010c26 <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 8010c22:	2300      	movs	r3, #0
 8010c24:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010c26:	68fb      	ldr	r3, [r7, #12]
    }
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3710      	adds	r7, #16
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 8010c30:	b480      	push	{r7}
 8010c32:	b085      	sub	sp, #20
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010c46:	2b06      	cmp	r3, #6
 8010c48:	d003      	beq.n	8010c52 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010c4a:	f06f 0315 	mvn.w	r3, #21
 8010c4e:	60fb      	str	r3, [r7, #12]
 8010c50:	e00b      	b.n	8010c6a <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010c58:	2b04      	cmp	r3, #4
 8010c5a:	d906      	bls.n	8010c6a <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010c62:	2b07      	cmp	r3, #7
 8010c64:	d801      	bhi.n	8010c6a <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 8010c66:	2301      	movs	r3, #1
 8010c68:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
    }
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3714      	adds	r7, #20
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b084      	sub	sp, #16
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010c8a:	2b06      	cmp	r3, #6
 8010c8c:	d003      	beq.n	8010c96 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010c8e:	f06f 0315 	mvn.w	r3, #21
 8010c92:	60fb      	str	r3, [r7, #12]
 8010c94:	e00f      	b.n	8010cb6 <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d008      	beq.n	8010cb2 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f000 fabb 	bl	8011222 <uxStreamBufferGetSize>
 8010cac:	4603      	mov	r3, r0
 8010cae:	60fb      	str	r3, [r7, #12]
 8010cb0:	e001      	b.n	8010cb6 <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
    }
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3710      	adds	r7, #16
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b085      	sub	sp, #20
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cd2:	d004      	beq.n	8010cde <xSocketValid+0x1e>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d001      	beq.n	8010cde <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 8010cde:	68fb      	ldr	r3, [r7, #12]
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3714      	adds	r7, #20
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr

08010cec <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 8010cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cf0:	b09c      	sub	sp, #112	@ 0x70
 8010cf2:	af08      	add	r7, sp, #32
 8010cf4:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 8010cf6:	2320      	movs	r3, #32
 8010cf8:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8010cfa:	f7f3 fff3 	bl	8004ce4 <xTaskGetTickCount>
 8010cfe:	4602      	mov	r2, r0
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d06:	1ad3      	subs	r3, r2, r3
 8010d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	60fb      	str	r3, [r7, #12]
 8010d0e:	f107 0310 	add.w	r3, r7, #16
 8010d12:	2200      	movs	r2, #0
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	605a      	str	r2, [r3, #4]
 8010d18:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d11f      	bne.n	8010d64 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010d2a:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010d32:	f107 000c 	add.w	r0, r7, #12
 8010d36:	9300      	str	r3, [sp, #0]
 8010d38:	4613      	mov	r3, r2
 8010d3a:	4a3b      	ldr	r2, [pc, #236]	@ (8010e28 <vTCPNetStat_TCPSocket+0x13c>)
 8010d3c:	2110      	movs	r1, #16
 8010d3e:	f012 fd6d 	bl	802381c <snprintf>
 8010d42:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	da04      	bge.n	8010d54 <vTCPNetStat_TCPSocket+0x68>
 8010d4a:	f241 61df 	movw	r1, #5855	@ 0x16df
 8010d4e:	4837      	ldr	r0, [pc, #220]	@ (8010e2c <vTCPNetStat_TCPSocket+0x140>)
 8010d50:	f7f0 fe5a 	bl	8001a08 <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d56:	2b0f      	cmp	r3, #15
 8010d58:	dd04      	ble.n	8010d64 <vTCPNetStat_TCPSocket+0x78>
 8010d5a:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 8010d5e:	4833      	ldr	r0, [pc, #204]	@ (8010e2c <vTCPNetStat_TCPSocket+0x140>)
 8010d60:	f7f0 fe52 	bl	8001a08 <vAssertCalled>
        }

        if( age > 999999U )
 8010d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d66:	4a32      	ldr	r2, [pc, #200]	@ (8010e30 <vTCPNetStat_TCPSocket+0x144>)
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d901      	bls.n	8010d70 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 8010d6c:	4b30      	ldr	r3, [pc, #192]	@ (8010e30 <vTCPNetStat_TCPSocket+0x144>)
 8010d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	7a1b      	ldrb	r3, [r3, #8]
 8010d74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010d78:	b2db      	uxtb	r3, r3
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d002      	beq.n	8010d84 <vTCPNetStat_TCPSocket+0x98>
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	d009      	beq.n	8010d96 <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 8010d82:	e011      	b.n	8010da8 <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d88:	f107 001c 	add.w	r0, r7, #28
 8010d8c:	4a29      	ldr	r2, [pc, #164]	@ (8010e34 <vTCPNetStat_TCPSocket+0x148>)
 8010d8e:	2128      	movs	r1, #40	@ 0x28
 8010d90:	f012 fd44 	bl	802381c <snprintf>
                    break;
 8010d94:	e008      	b.n	8010da8 <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 8010d9a:	f107 001c 	add.w	r0, r7, #28
 8010d9e:	4a26      	ldr	r2, [pc, #152]	@ (8010e38 <vTCPNetStat_TCPSocket+0x14c>)
 8010da0:	2128      	movs	r1, #40	@ 0x28
 8010da2:	f012 fd3b 	bl	802381c <snprintf>
                    break;
 8010da6:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010dac:	4698      	mov	r8, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010db4:	461c      	mov	r4, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	bf14      	ite	ne
 8010dc0:	2301      	movne	r3, #1
 8010dc2:	2300      	moveq	r3, #0
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	461d      	mov	r5, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	bf14      	ite	ne
 8010dd2:	2301      	movne	r3, #1
 8010dd4:	2300      	moveq	r3, #0
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	461e      	mov	r6, r3
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010de0:	4618      	mov	r0, r3
 8010de2:	f002 fbf5 	bl	80135d0 <FreeRTOS_GetTCPStateName>
 8010de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010de8:	4a11      	ldr	r2, [pc, #68]	@ (8010e30 <vTCPNetStat_TCPSocket+0x144>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	bf28      	it	cs
 8010dee:	4613      	movcs	r3, r2
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 8010df6:	603a      	str	r2, [r7, #0]
 8010df8:	f107 011c 	add.w	r1, r7, #28
 8010dfc:	f107 020c 	add.w	r2, r7, #12
 8010e00:	9206      	str	r2, [sp, #24]
 8010e02:	683a      	ldr	r2, [r7, #0]
 8010e04:	9205      	str	r2, [sp, #20]
 8010e06:	9304      	str	r3, [sp, #16]
 8010e08:	9003      	str	r0, [sp, #12]
 8010e0a:	9602      	str	r6, [sp, #8]
 8010e0c:	9501      	str	r5, [sp, #4]
 8010e0e:	9400      	str	r4, [sp, #0]
 8010e10:	460b      	mov	r3, r1
 8010e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e14:	4641      	mov	r1, r8
 8010e16:	4809      	ldr	r0, [pc, #36]	@ (8010e3c <vTCPNetStat_TCPSocket+0x150>)
 8010e18:	f011 fcd4 	bl	80227c4 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 8010e1c:	bf00      	nop
 8010e1e:	3750      	adds	r7, #80	@ 0x50
 8010e20:	46bd      	mov	sp, r7
 8010e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e26:	bf00      	nop
 8010e28:	08026764 	.word	0x08026764
 8010e2c:	08026284 	.word	0x08026284
 8010e30:	000f423f 	.word	0x000f423f
 8010e34:	0802676c 	.word	0x0802676c
 8010e38:	08026774 	.word	0x08026774
 8010e3c:	0802677c 	.word	0x0802677c

08010e40 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b08a      	sub	sp, #40	@ 0x28
 8010e44:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 8010e46:	2300      	movs	r3, #0
 8010e48:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 8010e4a:	f006 fe59 	bl	8017b00 <uxGetMinimumFreeNetworkBuffers>
 8010e4e:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 8010e50:	f006 fe62 	bl	8017b18 <uxGetNumberOfFreeNetworkBuffers>
 8010e54:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 8010e56:	4b26      	ldr	r3, [pc, #152]	@ (8010ef0 <vTCPNetStat+0xb0>)
 8010e58:	689b      	ldr	r3, [r3, #8]
 8010e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e5e:	d003      	beq.n	8010e68 <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8010e60:	4824      	ldr	r0, [pc, #144]	@ (8010ef4 <vTCPNetStat+0xb4>)
 8010e62:	f011 fcaf 	bl	80227c4 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 8010e66:	e03f      	b.n	8010ee8 <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 8010e68:	4b23      	ldr	r3, [pc, #140]	@ (8010ef8 <vTCPNetStat+0xb8>)
 8010e6a:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 8010e6c:	4b23      	ldr	r3, [pc, #140]	@ (8010efc <vTCPNetStat+0xbc>)
 8010e6e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 8010e70:	4823      	ldr	r0, [pc, #140]	@ (8010f00 <vTCPNetStat+0xc0>)
 8010e72:	f011 fca7 	bl	80227c4 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010e76:	4b1e      	ldr	r3, [pc, #120]	@ (8010ef0 <vTCPNetStat+0xb0>)
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	61fb      	str	r3, [r7, #28]
 8010e7c:	e00b      	b.n	8010e96 <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	68db      	ldr	r3, [r3, #12]
 8010e82:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f7ff ff31 	bl	8010cec <vTCPNetStat_TCPSocket>
                count++;
 8010e8a:	69bb      	ldr	r3, [r7, #24]
 8010e8c:	3301      	adds	r3, #1
 8010e8e:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 8010e96:	69fa      	ldr	r2, [r7, #28]
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d1ef      	bne.n	8010e7e <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 8010e9e:	4b19      	ldr	r3, [pc, #100]	@ (8010f04 <vTCPNetStat+0xc4>)
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	61fb      	str	r3, [r7, #28]
 8010ea4:	e014      	b.n	8010ed0 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	021b      	lsls	r3, r3, #8
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	0a1b      	lsrs	r3, r3, #8
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	4313      	orrs	r3, r2
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	4812      	ldr	r0, [pc, #72]	@ (8010f08 <vTCPNetStat+0xc8>)
 8010ec0:	f011 fc80 	bl	80227c4 <lUDPLoggingPrintf>
                count++;
 8010ec4:	69bb      	ldr	r3, [r7, #24]
 8010ec6:	3301      	adds	r3, #1
 8010ec8:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010eca:	69fb      	ldr	r3, [r7, #28]
 8010ecc:	685b      	ldr	r3, [r3, #4]
 8010ece:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 8010ed0:	69fa      	ldr	r2, [r7, #28]
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d1e6      	bne.n	8010ea6 <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 8010ed8:	2340      	movs	r3, #64	@ 0x40
 8010eda:	9300      	str	r3, [sp, #0]
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	697a      	ldr	r2, [r7, #20]
 8010ee0:	69b9      	ldr	r1, [r7, #24]
 8010ee2:	480a      	ldr	r0, [pc, #40]	@ (8010f0c <vTCPNetStat+0xcc>)
 8010ee4:	f011 fc6e 	bl	80227c4 <lUDPLoggingPrintf>
    }
 8010ee8:	bf00      	nop
 8010eea:	3720      	adds	r7, #32
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	20001608 	.word	0x20001608
 8010ef4:	080267a8 	.word	0x080267a8
 8010ef8:	20001610 	.word	0x20001610
 8010efc:	200015fc 	.word	0x200015fc
 8010f00:	080267c4 	.word	0x080267c4
 8010f04:	200015f4 	.word	0x200015f4
 8010f08:	0802680c 	.word	0x0802680c
 8010f0c:	0802681c 	.word	0x0802681c

08010f10 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b086      	sub	sp, #24
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f26:	f003 0304 	and.w	r3, r3, #4
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d109      	bne.n	8010f44 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f36:	f003 0302 	and.w	r3, r3, #2
 8010f3a:	b2db      	uxtb	r3, r3
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d101      	bne.n	8010f44 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 8010f40:	2301      	movs	r3, #1
 8010f42:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f48:	f003 0301 	and.w	r3, r3, #1
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d038      	beq.n	8010fc2 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d111      	bne.n	8010f7e <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d02f      	beq.n	8010fc2 <vSocketSelectTCP+0xb2>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f66:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f6a:	f003 0302 	and.w	r3, r3, #2
 8010f6e:	b2db      	uxtb	r3, r3
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d026      	beq.n	8010fc2 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	f043 0301 	orr.w	r3, r3, #1
 8010f7a:	613b      	str	r3, [r7, #16]
 8010f7c:	e021      	b.n	8010fc2 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f84:	f003 0308 	and.w	r3, r3, #8
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00c      	beq.n	8010fa8 <vSocketSelectTCP+0x98>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f94:	f003 0302 	and.w	r3, r3, #2
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d004      	beq.n	8010fa8 <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	f043 0301 	orr.w	r3, r3, #1
 8010fa4:	613b      	str	r3, [r7, #16]
 8010fa6:	e00c      	b.n	8010fc2 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d009      	beq.n	8010fc2 <vSocketSelectTCP+0xb2>
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f7ff fe62 	bl	8010c78 <FreeRTOS_rx_size>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	dd03      	ble.n	8010fc2 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	f043 0301 	orr.w	r3, r3, #1
 8010fc0:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fc6:	f003 0304 	and.w	r3, r3, #4
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d00d      	beq.n	8010fea <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010fd4:	2b08      	cmp	r3, #8
 8010fd6:	d004      	beq.n	8010fe2 <vSocketSelectTCP+0xd2>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d103      	bne.n	8010fea <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	f043 0304 	orr.w	r3, r3, #4
 8010fe8:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fee:	f003 0302 	and.w	r3, r3, #2
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d034      	beq.n	8011060 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d007      	beq.n	8011010 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7ff fdcb 	bl	8010b9c <FreeRTOS_tx_space>
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	dd01      	ble.n	8011010 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 801100c:	2301      	movs	r3, #1
 801100e:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d11d      	bne.n	8011052 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801101c:	f003 0308 	and.w	r3, r3, #8
 8011020:	b2db      	uxtb	r3, r3
 8011022:	2b00      	cmp	r3, #0
 8011024:	d015      	beq.n	8011052 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 801102c:	2b04      	cmp	r3, #4
 801102e:	d910      	bls.n	8011052 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011036:	f003 0310 	and.w	r3, r3, #16
 801103a:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 801103c:	2b00      	cmp	r3, #0
 801103e:	d108      	bne.n	8011052 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 8011040:	687a      	ldr	r2, [r7, #4]
 8011042:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011046:	f043 0310 	orr.w	r3, r3, #16
 801104a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 801104e:	2301      	movs	r3, #1
 8011050:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d003      	beq.n	8011060 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	f043 0302 	orr.w	r3, r3, #2
 801105e:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 8011060:	693b      	ldr	r3, [r7, #16]
        }
 8011062:	4618      	mov	r0, r3
 8011064:	3718      	adds	r7, #24
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
	...

0801106c <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 801106c:	b580      	push	{r7, lr}
 801106e:	b08a      	sub	sp, #40	@ 0x28
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 8011074:	2301      	movs	r3, #1
 8011076:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 8011078:	2300      	movs	r3, #0
 801107a:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 801107c:	2300      	movs	r3, #0
 801107e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011080:	e043      	b.n	801110a <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 8011082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011084:	2b00      	cmp	r3, #0
 8011086:	d102      	bne.n	801108e <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 8011088:	4b34      	ldr	r3, [pc, #208]	@ (801115c <vSocketSelect+0xf0>)
 801108a:	617b      	str	r3, [r7, #20]
 801108c:	e001      	b.n	8011092 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801108e:	4b34      	ldr	r3, [pc, #208]	@ (8011160 <vSocketSelect+0xf4>)
 8011090:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	61bb      	str	r3, [r7, #24]
 8011098:	e030      	b.n	80110fc <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801109a:	69bb      	ldr	r3, [r7, #24]
 801109c:	68db      	ldr	r3, [r3, #12]
 801109e:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d124      	bne.n	80110f4 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 80110aa:	2300      	movs	r3, #0
 80110ac:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80110b4:	2b06      	cmp	r3, #6
 80110b6:	d107      	bne.n	80110c8 <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 80110b8:	68b8      	ldr	r0, [r7, #8]
 80110ba:	f7ff ff29 	bl	8010f10 <vSocketSelectTCP>
 80110be:	4602      	mov	r2, r0
 80110c0:	6a3b      	ldr	r3, [r7, #32]
 80110c2:	4313      	orrs	r3, r2
 80110c4:	623b      	str	r3, [r7, #32]
 80110c6:	e00d      	b.n	80110e4 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110cc:	f003 0301 	and.w	r3, r3, #1
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d007      	beq.n	80110e4 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d003      	beq.n	80110e4 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80110dc:	6a3b      	ldr	r3, [r7, #32]
 80110de:	f043 0301 	orr.w	r3, r3, #1
 80110e2:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	6a3a      	ldr	r2, [r7, #32]
 80110e8:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 80110ea:	69fa      	ldr	r2, [r7, #28]
 80110ec:	6a3b      	ldr	r3, [r7, #32]
 80110ee:	4313      	orrs	r3, r2
 80110f0:	61fb      	str	r3, [r7, #28]
 80110f2:	e000      	b.n	80110f6 <vSocketSelect+0x8a>
                    continue;
 80110f4:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 80110fc:	69ba      	ldr	r2, [r7, #24]
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	429a      	cmp	r2, r3
 8011102:	d1ca      	bne.n	801109a <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8011104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011106:	3301      	adds	r3, #1
 8011108:	627b      	str	r3, [r7, #36]	@ 0x24
 801110a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	429a      	cmp	r2, r3
 8011110:	ddb7      	ble.n	8011082 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	2100      	movs	r1, #0
 8011118:	4618      	mov	r0, r3
 801111a:	f7f2 fa59 	bl	80035d0 <xEventGroupClearBits>
 801111e:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	43da      	mvns	r2, r3
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	4013      	ands	r3, r2
 8011128:	f003 030f 	and.w	r3, r3, #15
 801112c:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d005      	beq.n	8011140 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	68f9      	ldr	r1, [r7, #12]
 801113a:	4618      	mov	r0, r3
 801113c:	f7f2 fa48 	bl	80035d0 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681a      	ldr	r2, [r3, #0]
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	f043 0310 	orr.w	r3, r3, #16
 801114a:	4619      	mov	r1, r3
 801114c:	4610      	mov	r0, r2
 801114e:	f7f2 fa6d 	bl	800362c <xEventGroupSetBits>
    }
 8011152:	bf00      	nop
 8011154:	3728      	adds	r7, #40	@ 0x28
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	200015fc 	.word	0x200015fc
 8011160:	20001610 	.word	0x20001610

08011164 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 8011164:	b480      	push	{r7}
 8011166:	b087      	sub	sp, #28
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	691b      	ldr	r3, [r3, #16]
 8011174:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 8011176:	693a      	ldr	r2, [r7, #16]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	441a      	add	r2, r3
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	3b01      	subs	r3, #1
 8011182:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8011184:	697a      	ldr	r2, [r7, #20]
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	429a      	cmp	r2, r3
 801118a:	d303      	bcc.n	8011194 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 801118c:	697a      	ldr	r2, [r7, #20]
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	1ad3      	subs	r3, r2, r3
 8011192:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8011194:	697b      	ldr	r3, [r7, #20]
}
 8011196:	4618      	mov	r0, r3
 8011198:	371c      	adds	r7, #28
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr

080111a2 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 80111a2:	b480      	push	{r7}
 80111a4:	b087      	sub	sp, #28
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	60f8      	str	r0, [r7, #12]
 80111aa:	60b9      	str	r1, [r7, #8]
 80111ac:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	691b      	ldr	r3, [r3, #16]
 80111b2:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 80111b4:	693a      	ldr	r2, [r7, #16]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	441a      	add	r2, r3
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	1ad3      	subs	r3, r2, r3
 80111be:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 80111c0:	697a      	ldr	r2, [r7, #20]
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d303      	bcc.n	80111d0 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 80111c8:	697a      	ldr	r2, [r7, #20]
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	1ad3      	subs	r3, r2, r3
 80111ce:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 80111d0:	697b      	ldr	r3, [r7, #20]
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	371c      	adds	r7, #28
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr

080111de <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 80111de:	b580      	push	{r7, lr}
 80111e0:	b082      	sub	sp, #8
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6899      	ldr	r1, [r3, #8]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	461a      	mov	r2, r3
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f7ff ffb7 	bl	8011164 <uxStreamBufferSpace>
 80111f6:	4603      	mov	r3, r0
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3708      	adds	r7, #8
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}

08011200 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	68d9      	ldr	r1, [r3, #12]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	461a      	mov	r2, r3
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f7ff ffa6 	bl	8011164 <uxStreamBufferSpace>
 8011218:	4603      	mov	r3, r0
}
 801121a:	4618      	mov	r0, r3
 801121c:	3708      	adds	r7, #8
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}

08011222 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 8011222:	b580      	push	{r7, lr}
 8011224:	b082      	sub	sp, #8
 8011226:	af00      	add	r7, sp, #0
 8011228:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6819      	ldr	r1, [r3, #0]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	689b      	ldr	r3, [r3, #8]
 8011232:	461a      	mov	r2, r3
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f7ff ffb4 	bl	80111a2 <uxStreamBufferDistance>
 801123a:	4603      	mov	r3, r0
}
 801123c:	4618      	mov	r0, r3
 801123e:	3708      	adds	r7, #8
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6859      	ldr	r1, [r3, #4]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	689b      	ldr	r3, [r3, #8]
 8011254:	461a      	mov	r2, r3
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f7ff ffa3 	bl	80111a2 <uxStreamBufferDistance>
 801125c:	4603      	mov	r3, r0
}
 801125e:	4618      	mov	r0, r3
 8011260:	3708      	adds	r7, #8
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 8011266:	b480      	push	{r7}
 8011268:	b083      	sub	sp, #12
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2200      	movs	r2, #0
 8011272:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2200      	movs	r2, #0
 8011278:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2200      	movs	r2, #0
 801127e:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2200      	movs	r2, #0
 8011284:	605a      	str	r2, [r3, #4]
}
 8011286:	bf00      	nop
 8011288:	370c      	adds	r7, #12
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr

08011292 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 8011292:	b580      	push	{r7, lr}
 8011294:	b086      	sub	sp, #24
 8011296:	af00      	add	r7, sp, #0
 8011298:	6078      	str	r0, [r7, #4]
 801129a:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	691b      	ldr	r3, [r3, #16]
 80112a0:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f7ff ffce 	bl	8011244 <uxStreamBufferMidSpace>
 80112a8:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	685b      	ldr	r3, [r3, #4]
 80112ae:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 80112b4:	693a      	ldr	r2, [r7, #16]
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d901      	bls.n	80112c0 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 80112c0:	697a      	ldr	r2, [r7, #20]
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	4413      	add	r3, r2
 80112c6:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 80112c8:	697a      	ldr	r2, [r7, #20]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d303      	bcc.n	80112d8 <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 80112d0:	697a      	ldr	r2, [r7, #20]
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	697a      	ldr	r2, [r7, #20]
 80112dc:	605a      	str	r2, [r3, #4]
}
 80112de:	bf00      	nop
 80112e0:	3718      	adds	r7, #24
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 80112e6:	b480      	push	{r7}
 80112e8:	b087      	sub	sp, #28
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	60f8      	str	r0, [r7, #12]
 80112ee:	60b9      	str	r1, [r7, #8]
 80112f0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80112f2:	2300      	movs	r3, #0
 80112f4:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 80112fc:	68ba      	ldr	r2, [r7, #8]
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	1ad2      	subs	r2, r2, r3
 8011302:	6879      	ldr	r1, [r7, #4]
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	1acb      	subs	r3, r1, r3
 8011308:	429a      	cmp	r2, r3
 801130a:	d801      	bhi.n	8011310 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 801130c:	2301      	movs	r3, #1
 801130e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8011310:	697b      	ldr	r3, [r7, #20]
}
 8011312:	4618      	mov	r0, r3
 8011314:	371c      	adds	r7, #28
 8011316:	46bd      	mov	sp, r7
 8011318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131c:	4770      	bx	lr

0801131e <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 801131e:	b580      	push	{r7, lr}
 8011320:	b084      	sub	sp, #16
 8011322:	af00      	add	r7, sp, #0
 8011324:	6078      	str	r0, [r7, #4]
 8011326:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f7ff ff77 	bl	8011222 <uxStreamBufferGetSize>
 8011334:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f103 0214 	add.w	r2, r3, #20
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	441a      	add	r2, r3
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	691a      	ldr	r2, [r3, #16]
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	4619      	mov	r1, r3
 801134e:	68b8      	ldr	r0, [r7, #8]
 8011350:	f7f9 fdc0 	bl	800aed4 <FreeRTOS_min_size_t>
 8011354:	4603      	mov	r3, r0
}
 8011356:	4618      	mov	r0, r3
 8011358:	3710      	adds	r7, #16
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}

0801135e <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 801135e:	b580      	push	{r7, lr}
 8011360:	b08a      	sub	sp, #40	@ 0x28
 8011362:	af00      	add	r7, sp, #0
 8011364:	60f8      	str	r0, [r7, #12]
 8011366:	60b9      	str	r1, [r7, #8]
 8011368:	607a      	str	r2, [r7, #4]
 801136a:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 801136c:	68f8      	ldr	r0, [r7, #12]
 801136e:	f7ff ff36 	bl	80111de <uxStreamBufferGetSpace>
 8011372:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 8011374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	429a      	cmp	r2, r3
 801137a:	d904      	bls.n	8011386 <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 801137c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	1ad3      	subs	r3, r2, r3
 8011382:	627b      	str	r3, [r7, #36]	@ 0x24
 8011384:	e001      	b.n	801138a <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 8011386:	2300      	movs	r3, #0
 8011388:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 801138a:	6839      	ldr	r1, [r7, #0]
 801138c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801138e:	f7f9 fda1 	bl	800aed4 <FreeRTOS_min_size_t>
 8011392:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8011394:	69fb      	ldr	r3, [r7, #28]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d05c      	beq.n	8011454 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	691b      	ldr	r3, [r3, #16]
 801139e:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	689b      	ldr	r3, [r3, #8]
 80113a4:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d00b      	beq.n	80113c4 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 80113ac:	6a3a      	ldr	r2, [r7, #32]
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	4413      	add	r3, r2
 80113b2:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 80113b4:	6a3a      	ldr	r2, [r7, #32]
 80113b6:	69bb      	ldr	r3, [r7, #24]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d303      	bcc.n	80113c4 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 80113bc:	6a3a      	ldr	r2, [r7, #32]
 80113be:	69bb      	ldr	r3, [r7, #24]
 80113c0:	1ad3      	subs	r3, r2, r3
 80113c2:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d021      	beq.n	801140e <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 80113ca:	69ba      	ldr	r2, [r7, #24]
 80113cc:	6a3b      	ldr	r3, [r7, #32]
 80113ce:	1ad3      	subs	r3, r2, r3
 80113d0:	69f9      	ldr	r1, [r7, #28]
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7f9 fd7e 	bl	800aed4 <FreeRTOS_min_size_t>
 80113d8:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 80113da:	6a3b      	ldr	r3, [r7, #32]
 80113dc:	3310      	adds	r3, #16
 80113de:	68fa      	ldr	r2, [r7, #12]
 80113e0:	4413      	add	r3, r2
 80113e2:	3304      	adds	r3, #4
 80113e4:	697a      	ldr	r2, [r7, #20]
 80113e6:	6879      	ldr	r1, [r7, #4]
 80113e8:	4618      	mov	r0, r3
 80113ea:	f011 fc07 	bl	8022bfc <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 80113ee:	69fa      	ldr	r2, [r7, #28]
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d90b      	bls.n	801140e <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	f103 0014 	add.w	r0, r3, #20
 80113fc:	687a      	ldr	r2, [r7, #4]
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	18d1      	adds	r1, r2, r3
 8011402:	69fa      	ldr	r2, [r7, #28]
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	461a      	mov	r2, r3
 801140a:	f011 fbf7 	bl	8022bfc <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 801140e:	f7f3 fb57 	bl	8004ac0 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d10e      	bne.n	8011436 <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 8011418:	6a3a      	ldr	r2, [r7, #32]
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	4413      	add	r3, r2
 801141e:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 8011420:	6a3a      	ldr	r2, [r7, #32]
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	429a      	cmp	r2, r3
 8011426:	d303      	bcc.n	8011430 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 8011428:	6a3a      	ldr	r2, [r7, #32]
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	1ad3      	subs	r3, r2, r3
 801142e:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	6a3a      	ldr	r2, [r7, #32]
 8011434:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	68db      	ldr	r3, [r3, #12]
 801143a:	6a3a      	ldr	r2, [r7, #32]
 801143c:	4619      	mov	r1, r3
 801143e:	68f8      	ldr	r0, [r7, #12]
 8011440:	f7ff ff51 	bl	80112e6 <xStreamBufferLessThenEqual>
 8011444:	4603      	mov	r3, r0
 8011446:	2b00      	cmp	r3, #0
 8011448:	d002      	beq.n	8011450 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	6a3a      	ldr	r2, [r7, #32]
 801144e:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 8011450:	f7f3 fb44 	bl	8004adc <xTaskResumeAll>
    }

    return uxCount;
 8011454:	69fb      	ldr	r3, [r7, #28]
}
 8011456:	4618      	mov	r0, r3
 8011458:	3728      	adds	r7, #40	@ 0x28
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}

0801145e <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 801145e:	b580      	push	{r7, lr}
 8011460:	b08a      	sub	sp, #40	@ 0x28
 8011462:	af00      	add	r7, sp, #0
 8011464:	60f8      	str	r0, [r7, #12]
 8011466:	60b9      	str	r1, [r7, #8]
 8011468:	607a      	str	r2, [r7, #4]
 801146a:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 801146c:	68f8      	ldr	r0, [r7, #12]
 801146e:	f7ff fed8 	bl	8011222 <uxStreamBufferGetSize>
 8011472:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 8011474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	429a      	cmp	r2, r3
 801147a:	d904      	bls.n	8011486 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 801147c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	1ad3      	subs	r3, r2, r3
 8011482:	627b      	str	r3, [r7, #36]	@ 0x24
 8011484:	e001      	b.n	801148a <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 8011486:	2300      	movs	r3, #0
 8011488:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 801148a:	6839      	ldr	r1, [r7, #0]
 801148c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801148e:	f7f9 fd21 	bl	800aed4 <FreeRTOS_min_size_t>
 8011492:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d04e      	beq.n	8011538 <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	691b      	ldr	r3, [r3, #16]
 801149e:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00b      	beq.n	80114c4 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 80114ac:	6a3a      	ldr	r2, [r7, #32]
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	4413      	add	r3, r2
 80114b2:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 80114b4:	6a3a      	ldr	r2, [r7, #32]
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d303      	bcc.n	80114c4 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 80114bc:	6a3a      	ldr	r2, [r7, #32]
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d021      	beq.n	801150e <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 80114ca:	69ba      	ldr	r2, [r7, #24]
 80114cc:	6a3b      	ldr	r3, [r7, #32]
 80114ce:	1ad3      	subs	r3, r2, r3
 80114d0:	69f9      	ldr	r1, [r7, #28]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7f9 fcfe 	bl	800aed4 <FreeRTOS_min_size_t>
 80114d8:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 80114da:	6a3b      	ldr	r3, [r7, #32]
 80114dc:	3310      	adds	r3, #16
 80114de:	68fa      	ldr	r2, [r7, #12]
 80114e0:	4413      	add	r3, r2
 80114e2:	3304      	adds	r3, #4
 80114e4:	697a      	ldr	r2, [r7, #20]
 80114e6:	4619      	mov	r1, r3
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f011 fb87 	bl	8022bfc <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 80114ee:	69fa      	ldr	r2, [r7, #28]
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d90b      	bls.n	801150e <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	18d0      	adds	r0, r2, r3
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	f103 0114 	add.w	r1, r3, #20
 8011502:	69fa      	ldr	r2, [r7, #28]
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	1ad3      	subs	r3, r2, r3
 8011508:	461a      	mov	r2, r3
 801150a:	f011 fb77 	bl	8022bfc <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 801150e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011510:	2b00      	cmp	r3, #0
 8011512:	d111      	bne.n	8011538 <uxStreamBufferGet+0xda>
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d10e      	bne.n	8011538 <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 801151a:	6a3a      	ldr	r2, [r7, #32]
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	4413      	add	r3, r2
 8011520:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8011522:	6a3a      	ldr	r2, [r7, #32]
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	429a      	cmp	r2, r3
 8011528:	d303      	bcc.n	8011532 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 801152a:	6a3a      	ldr	r2, [r7, #32]
 801152c:	69bb      	ldr	r3, [r7, #24]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	6a3a      	ldr	r2, [r7, #32]
 8011536:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 8011538:	69fb      	ldr	r3, [r7, #28]
}
 801153a:	4618      	mov	r0, r3
 801153c:	3728      	adds	r7, #40	@ 0x28
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
	...

08011544 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8011544:	b580      	push	{r7, lr}
 8011546:	b082      	sub	sp, #8
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 801154c:	4b0a      	ldr	r3, [pc, #40]	@ (8011578 <vSocketCloseNextTime+0x34>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d009      	beq.n	8011568 <vSocketCloseNextTime+0x24>
 8011554:	4b08      	ldr	r3, [pc, #32]	@ (8011578 <vSocketCloseNextTime+0x34>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	429a      	cmp	r2, r3
 801155c:	d004      	beq.n	8011568 <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 801155e:	4b06      	ldr	r3, [pc, #24]	@ (8011578 <vSocketCloseNextTime+0x34>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	4618      	mov	r0, r3
 8011564:	f7fd fc7a 	bl	800ee5c <vSocketClose>
        }

        xSocketToClose = pxSocket;
 8011568:	4a03      	ldr	r2, [pc, #12]	@ (8011578 <vSocketCloseNextTime+0x34>)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6013      	str	r3, [r2, #0]
    }
 801156e:	bf00      	nop
 8011570:	3708      	adds	r7, #8
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
 8011576:	bf00      	nop
 8011578:	20001620 	.word	0x20001620

0801157c <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 8011584:	4b0c      	ldr	r3, [pc, #48]	@ (80115b8 <vSocketListenNextTime+0x3c>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d00e      	beq.n	80115aa <vSocketListenNextTime+0x2e>
 801158c:	4b0a      	ldr	r3, [pc, #40]	@ (80115b8 <vSocketListenNextTime+0x3c>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	429a      	cmp	r2, r3
 8011594:	d009      	beq.n	80115aa <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 8011596:	4b08      	ldr	r3, [pc, #32]	@ (80115b8 <vSocketListenNextTime+0x3c>)
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	4b07      	ldr	r3, [pc, #28]	@ (80115b8 <vSocketListenNextTime+0x3c>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80115a2:	4619      	mov	r1, r3
 80115a4:	4610      	mov	r0, r2
 80115a6:	f7fe fff3 	bl	8010590 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 80115aa:	4a03      	ldr	r2, [pc, #12]	@ (80115b8 <vSocketListenNextTime+0x3c>)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6013      	str	r3, [r2, #0]
    }
 80115b0:	bf00      	nop
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	20001624 	.word	0x20001624

080115bc <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 80115bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115c0:	b086      	sub	sp, #24
 80115c2:	af02      	add	r7, sp, #8
 80115c4:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 80115c6:	2300      	movs	r3, #0
 80115c8:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 80115ca:	2300      	movs	r3, #0
 80115cc:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80115d4:	2b04      	cmp	r3, #4
 80115d6:	d907      	bls.n	80115e8 <xTCPSocketCheck+0x2c>
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d002      	beq.n	80115e8 <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f003 f834 	bl	8014650 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d05f      	beq.n	80116b2 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80115f8:	f003 0320 	and.w	r3, r3, #32
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d148      	bne.n	8011694 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011608:	2b00      	cmp	r3, #0
 801160a:	d03b      	beq.n	8011684 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 801160c:	4b37      	ldr	r3, [pc, #220]	@ (80116ec <xTCPSocketCheck+0x130>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	2b01      	cmp	r3, #1
 8011612:	dd25      	ble.n	8011660 <xTCPSocketCheck+0xa4>
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011618:	2b17      	cmp	r3, #23
 801161a:	d021      	beq.n	8011660 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011620:	461e      	mov	r6, r3
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011628:	4698      	mov	r8, r3
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8011636:	1ad5      	subs	r5, r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8011644:	1ad4      	subs	r4, r2, r3
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f7f8 ff00 	bl	800a44c <uxIPHeaderSizeSocket>
 801164c:	4603      	mov	r3, r0
 801164e:	3314      	adds	r3, #20
 8011650:	9301      	str	r3, [sp, #4]
 8011652:	9400      	str	r4, [sp, #0]
 8011654:	462b      	mov	r3, r5
 8011656:	4642      	mov	r2, r8
 8011658:	4631      	mov	r1, r6
 801165a:	4825      	ldr	r0, [pc, #148]	@ (80116f0 <xTCPSocketCheck+0x134>)
 801165c:	f011 f8b2 	bl	80227c4 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f7f8 fef0 	bl	800a44c <uxIPHeaderSizeSocket>
 801166c:	4603      	mov	r3, r0
 801166e:	f103 0214 	add.w	r2, r3, #20
 8011672:	2301      	movs	r3, #1
 8011674:	4621      	mov	r1, r4
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f002 fac8 	bl	8013c0c <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2200      	movs	r2, #0
 8011680:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f000 faa1 	bl	8011bcc <prvTCPNextTimeout>
 801168a:	4603      	mov	r3, r0
 801168c:	2b01      	cmp	r3, #1
 801168e:	d901      	bls.n	8011694 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 8011690:	2301      	movs	r3, #1
 8011692:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801169a:	2b00      	cmp	r3, #0
 801169c:	d009      	beq.n	80116b2 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80116a4:	4618      	mov	r0, r3
 80116a6:	f006 f9e5 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2200      	movs	r2, #0
 80116ae:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d113      	bne.n	80116e0 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80116be:	2b04      	cmp	r3, #4
 80116c0:	d804      	bhi.n	80116cc <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 80116c8:	2b02      	cmp	r3, #2
 80116ca:	d102      	bne.n	80116d2 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f002 f9ff 	bl	8013ad0 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f000 fa7a 	bl	8011bcc <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f001 f973 	bl	80129c4 <prvTCPStatusAgeCheck>
 80116de:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 80116e0:	68fb      	ldr	r3, [r7, #12]
    }
 80116e2:	4618      	mov	r0, r3
 80116e4:	3710      	adds	r7, #16
 80116e6:	46bd      	mov	sp, r7
 80116e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116ec:	2000164c 	.word	0x2000164c
 80116f0:	08026854 	.word	0x08026854

080116f4 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 80116fc:	f7f3 faf2 	bl	8004ce4 <xTaskGetTickCount>
 8011700:	4602      	mov	r2, r0
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 8011708:	687a      	ldr	r2, [r7, #4]
 801170a:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801170e:	f36f 0382 	bfc	r3, #2, #1
 8011712:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801171c:	f36f 0341 	bfc	r3, #1, #1
 8011720:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 801172c:	f7f3 fada 	bl	8004ce4 <xTaskGetTickCount>
 8011730:	4602      	mov	r2, r0
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 8011738:	bf00      	nop
 801173a:	3708      	adds	r7, #8
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 8011740:	b480      	push	{r7}
 8011742:	b087      	sub	sp, #28
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8011748:	2300      	movs	r3, #0
 801174a:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801174c:	4b15      	ldr	r3, [pc, #84]	@ (80117a4 <vTCPRemoveTCPChild+0x64>)
 801174e:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8011750:	4b15      	ldr	r3, [pc, #84]	@ (80117a8 <vTCPRemoveTCPChild+0x68>)
 8011752:	68db      	ldr	r3, [r3, #12]
 8011754:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 8011756:	e01a      	b.n	801178e <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	68db      	ldr	r3, [r3, #12]
 801175c:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 8011764:	68ba      	ldr	r2, [r7, #8]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	429a      	cmp	r2, r3
 801176a:	d010      	beq.n	801178e <vTCPRemoveTCPChild+0x4e>
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011774:	429a      	cmp	r2, r3
 8011776:	d10a      	bne.n	801178e <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801177c:	687a      	ldr	r2, [r7, #4]
 801177e:	429a      	cmp	r2, r3
 8011780:	d105      	bne.n	801178e <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	2200      	movs	r2, #0
 8011786:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 8011788:	2301      	movs	r3, #1
 801178a:	617b      	str	r3, [r7, #20]
                    break;
 801178c:	e003      	b.n	8011796 <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 801178e:	693a      	ldr	r2, [r7, #16]
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	429a      	cmp	r2, r3
 8011794:	d1e0      	bne.n	8011758 <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 8011796:	697b      	ldr	r3, [r7, #20]
    }
 8011798:	4618      	mov	r0, r3
 801179a:	371c      	adds	r7, #28
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr
 80117a4:	20001610 	.word	0x20001610
 80117a8:	20001608 	.word	0x20001608

080117ac <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 80117ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117ae:	b097      	sub	sp, #92	@ 0x5c
 80117b0:	af02      	add	r7, sp, #8
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	460b      	mov	r3, r1
 80117b6:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80117c2:	2b04      	cmp	r3, #4
 80117c4:	d906      	bls.n	80117d4 <vTCPStateChange+0x28>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80117cc:	2b08      	cmp	r3, #8
 80117ce:	d001      	beq.n	80117d4 <vTCPStateChange+0x28>
 80117d0:	2301      	movs	r3, #1
 80117d2:	e000      	b.n	80117d6 <vTCPStateChange+0x2a>
 80117d4:	2300      	movs	r3, #0
 80117d6:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 80117d8:	78fb      	ldrb	r3, [r7, #3]
 80117da:	2b04      	cmp	r3, #4
 80117dc:	d904      	bls.n	80117e8 <vTCPStateChange+0x3c>
 80117de:	78fb      	ldrb	r3, [r7, #3]
 80117e0:	2b08      	cmp	r3, #8
 80117e2:	d001      	beq.n	80117e8 <vTCPStateChange+0x3c>
 80117e4:	2301      	movs	r3, #1
 80117e6:	e000      	b.n	80117ea <vTCPStateChange+0x3e>
 80117e8:	2300      	movs	r3, #0
 80117ea:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80117f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 80117f6:	2300      	movs	r3, #0
 80117f8:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 80117fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117fe:	2b02      	cmp	r3, #2
 8011800:	d007      	beq.n	8011812 <vTCPStateChange+0x66>
 8011802:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011806:	2b03      	cmp	r3, #3
 8011808:	d003      	beq.n	8011812 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 801180a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801180e:	2b04      	cmp	r3, #4
 8011810:	d114      	bne.n	801183c <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 8011812:	78fb      	ldrb	r3, [r7, #3]
 8011814:	2b08      	cmp	r3, #8
 8011816:	d111      	bne.n	801183c <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 8011818:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801181c:	4618      	mov	r0, r3
 801181e:	f001 fed7 	bl	80135d0 <FreeRTOS_GetTCPStateName>
 8011822:	4604      	mov	r4, r0
 8011824:	78fb      	ldrb	r3, [r7, #3]
 8011826:	4618      	mov	r0, r3
 8011828:	f001 fed2 	bl	80135d0 <FreeRTOS_GetTCPStateName>
 801182c:	4603      	mov	r3, r0
 801182e:	461a      	mov	r2, r3
 8011830:	4621      	mov	r1, r4
 8011832:	4875      	ldr	r0, [pc, #468]	@ (8011a08 <vTCPStateChange+0x25c>)
 8011834:	f010 ffc6 	bl	80227c4 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 8011838:	2301      	movs	r3, #1
 801183a:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 801183c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801183e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011840:	429a      	cmp	r2, r3
 8011842:	f000 809f 	beq.w	8011984 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801184c:	f003 0304 	and.w	r3, r3, #4
 8011850:	b2db      	uxtb	r3, r3
 8011852:	2b00      	cmp	r3, #0
 8011854:	d012      	beq.n	801187c <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801185c:	f003 0308 	and.w	r3, r3, #8
 8011860:	b2db      	uxtb	r3, r3
 8011862:	2b00      	cmp	r3, #0
 8011864:	d10a      	bne.n	801187c <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801186a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 801186c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801186e:	2b00      	cmp	r3, #0
 8011870:	d104      	bne.n	801187c <vTCPStateChange+0xd0>
 8011872:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8011876:	4865      	ldr	r0, [pc, #404]	@ (8011a0c <vTCPStateChange+0x260>)
 8011878:	f7f0 f8c6 	bl	8001a08 <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 801187c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801187e:	2b00      	cmp	r3, #0
 8011880:	d057      	beq.n	8011932 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011888:	f003 0304 	and.w	r3, r3, #4
 801188c:	b2db      	uxtb	r3, r3
 801188e:	2b00      	cmp	r3, #0
 8011890:	d03c      	beq.n	801190c <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8011892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011894:	2b00      	cmp	r3, #0
 8011896:	d027      	beq.n	80118e8 <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 8011898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801189a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801189c:	2b00      	cmp	r3, #0
 801189e:	d102      	bne.n	80118a6 <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 80118a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118a2:	687a      	ldr	r2, [r7, #4]
 80118a4:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80118a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f043 0204 	orr.w	r2, r3, #4
 80118ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118b0:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 80118b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118b6:	f003 0301 	and.w	r3, r3, #1
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d005      	beq.n	80118ca <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 80118be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80118c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118c8:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 80118ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118cc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d009      	beq.n	80118e8 <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 80118d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118d6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80118da:	f003 0308 	and.w	r3, r3, #8
 80118de:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d101      	bne.n	80118e8 <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 80118e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118e6:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2200      	movs	r2, #0
 80118ec:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80118f4:	f36f 0382 	bfc	r3, #2, #1
 80118f8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011902:	f043 0302 	orr.w	r3, r3, #2
 8011906:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 801190a:	e024      	b.n	8011956 <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f043 0208 	orr.w	r2, r3, #8
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801191c:	f003 0302 	and.w	r3, r3, #2
 8011920:	2b00      	cmp	r3, #0
 8011922:	d018      	beq.n	8011956 <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	601a      	str	r2, [r3, #0]
 8011930:	e011      	b.n	8011956 <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8011932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f043 0220 	orr.w	r2, r3, #32
 801193a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801193c:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 801193e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011942:	f003 0304 	and.w	r3, r3, #4
 8011946:	2b00      	cmp	r3, #0
 8011948:	d005      	beq.n	8011956 <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 801194a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8011952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011954:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801195c:	2b00      	cmp	r3, #0
 801195e:	d004      	beq.n	801196a <vTCPStateChange+0x1be>
 8011960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011962:	2b00      	cmp	r3, #0
 8011964:	d101      	bne.n	801196a <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011970:	4618      	mov	r0, r3
 8011972:	f000 ffff 	bl	8012974 <prvTCPSocketIsActive>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d103      	bne.n	8011984 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2200      	movs	r2, #0
 8011980:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	78fa      	ldrb	r2, [r7, #3]
 8011988:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 801198c:	78fb      	ldrb	r3, [r7, #3]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d003      	beq.n	801199a <vTCPStateChange+0x1ee>
 8011992:	78fb      	ldrb	r3, [r7, #3]
 8011994:	2b08      	cmp	r3, #8
 8011996:	f040 8084 	bne.w	8011aa2 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 801199a:	2300      	movs	r3, #0
 801199c:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 801199e:	2300      	movs	r3, #0
 80119a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 80119a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d106      	bne.n	80119b8 <vTCPStateChange+0x20c>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d002      	beq.n	80119b8 <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 80119b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d006      	beq.n	80119ce <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 80119c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d101      	bne.n	80119ce <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 80119ca:	2301      	movs	r3, #1
 80119cc:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80119d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80119d8:	b2db      	uxtb	r3, r3
 80119da:	4619      	mov	r1, r3
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80119e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80119e6:	b2db      	uxtb	r3, r3
 80119e8:	461a      	mov	r2, r3
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80119f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	4806      	ldr	r0, [pc, #24]	@ (8011a10 <vTCPStateChange+0x264>)
 80119f8:	f010 fee4 	bl	80227c4 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 80119fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d008      	beq.n	8011a14 <vTCPStateChange+0x268>
 8011a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011a06:	e006      	b.n	8011a16 <vTCPStateChange+0x26a>
 8011a08:	08026880 	.word	0x08026880
 8011a0c:	08026894 	.word	0x08026894
 8011a10:	080268c4 	.word	0x080268c4
 8011a14:	2300      	movs	r3, #0
 8011a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011a18:	9200      	str	r2, [sp, #0]
 8011a1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011a1c:	6879      	ldr	r1, [r7, #4]
 8011a1e:	4865      	ldr	r0, [pc, #404]	@ (8011bb4 <vTCPStateChange+0x408>)
 8011a20:	f010 fed0 	bl	80227c4 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 8011a24:	f7f3 f84c 	bl	8004ac0 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a2e:	f003 0304 	and.w	r3, r3, #4
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d107      	bne.n	8011a48 <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a3e:	f003 0302 	and.w	r3, r3, #2
 8011a42:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d026      	beq.n	8011a96 <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a4e:	f003 0308 	and.w	r3, r3, #8
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d11e      	bne.n	8011a96 <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f7ff fe71 	bl	8011740 <vTCPRemoveTCPChild>
 8011a5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011a66:	f36f 0382 	bfc	r3, #2, #1
 8011a6a:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 8011a6e:	687a      	ldr	r2, [r7, #4]
 8011a70:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011a74:	f36f 0341 	bfc	r3, #1, #1
 8011a78:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 8011a7c:	f7f9 f85a 	bl	800ab34 <xIsCallingFromIPTask>
 8011a80:	4603      	mov	r3, r0
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d104      	bne.n	8011a90 <vTCPStateChange+0x2e4>
 8011a86:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8011a8a:	484b      	ldr	r0, [pc, #300]	@ (8011bb8 <vTCPStateChange+0x40c>)
 8011a8c:	f7ef ffbc 	bl	8001a08 <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f7ff fd57 	bl	8011544 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 8011a96:	f7f3 f821 	bl	8004adc <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 8011a9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a9c:	4847      	ldr	r0, [pc, #284]	@ (8011bbc <vTCPStateChange+0x410>)
 8011a9e:	f010 fe91 	bl	80227c4 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 8011aa2:	78fb      	ldrb	r3, [r7, #3]
 8011aa4:	2b08      	cmp	r3, #8
 8011aa6:	d11b      	bne.n	8011ae0 <vTCPStateChange+0x334>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011aae:	f003 0308 	and.w	r3, r3, #8
 8011ab2:	b2db      	uxtb	r3, r3
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d013      	beq.n	8011ae0 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 8011ab8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011abc:	3b03      	subs	r3, #3
 8011abe:	2b01      	cmp	r3, #1
 8011ac0:	d80d      	bhi.n	8011ade <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	483d      	ldr	r0, [pc, #244]	@ (8011bc0 <vTCPStateChange+0x414>)
 8011aca:	f010 fe7b 	bl	80227c4 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f7ff fd50 	bl	801157c <vSocketListenNextTime>
                    break;
 8011adc:	e000      	b.n	8011ae0 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8011ade:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f7ff fe07 	bl	80116f4 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8011ae6:	4b37      	ldr	r3, [pc, #220]	@ (8011bc4 <vTCPStateChange+0x418>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	db4f      	blt.n	8011b8e <vTCPStateChange+0x3e2>
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011af2:	2b17      	cmp	r3, #23
 8011af4:	d04b      	beq.n	8011b8e <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	7a1b      	ldrb	r3, [r3, #8]
 8011afa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d002      	beq.n	8011b0a <vTCPStateChange+0x35e>
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d01d      	beq.n	8011b44 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 8011b08:	e026      	b.n	8011b58 <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b0e:	061a      	lsls	r2, r3, #24
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b14:	021b      	lsls	r3, r3, #8
 8011b16:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011b1a:	431a      	orrs	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b20:	0a1b      	lsrs	r3, r3, #8
 8011b22:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011b26:	431a      	orrs	r2, r3
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b2c:	0e1b      	lsrs	r3, r3, #24
 8011b2e:	4313      	orrs	r3, r2
 8011b30:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8011b32:	f107 0208 	add.w	r2, r7, #8
 8011b36:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8011b3a:	2328      	movs	r3, #40	@ 0x28
 8011b3c:	2002      	movs	r0, #2
 8011b3e:	f7fd ff09 	bl	800f954 <FreeRTOS_inet_ntop>
                           break;
 8011b42:	e009      	b.n	8011b58 <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 8011b4a:	f107 0208 	add.w	r2, r7, #8
 8011b4e:	2328      	movs	r3, #40	@ 0x28
 8011b50:	200a      	movs	r0, #10
 8011b52:	f7fd feff 	bl	800f954 <FreeRTOS_inet_ntop>
                            break;
 8011b56:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011b5c:	461d      	mov	r5, r3
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011b64:	461e      	mov	r6, r3
 8011b66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f001 fd30 	bl	80135d0 <FreeRTOS_GetTCPStateName>
 8011b70:	4604      	mov	r4, r0
 8011b72:	78fb      	ldrb	r3, [r7, #3]
 8011b74:	4618      	mov	r0, r3
 8011b76:	f001 fd2b 	bl	80135d0 <FreeRTOS_GetTCPStateName>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	f107 0208 	add.w	r2, r7, #8
 8011b80:	9301      	str	r3, [sp, #4]
 8011b82:	9400      	str	r4, [sp, #0]
 8011b84:	4633      	mov	r3, r6
 8011b86:	4629      	mov	r1, r5
 8011b88:	480f      	ldr	r0, [pc, #60]	@ (8011bc8 <vTCPStateChange+0x41c>)
 8011b8a:	f010 fe1b 	bl	80227c4 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 8011b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d005      	beq.n	8011ba0 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8011b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b96:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011b9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011b9c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011b9e:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 8011ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d002      	beq.n	8011bac <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 8011ba6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011ba8:	f7fd ff53 	bl	800fa52 <vSocketWakeUpUser>
        }
    }
 8011bac:	bf00      	nop
 8011bae:	3754      	adds	r7, #84	@ 0x54
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bb4:	08026900 	.word	0x08026900
 8011bb8:	08026894 	.word	0x08026894
 8011bbc:	08026934 	.word	0x08026934
 8011bc0:	08026958 	.word	0x08026958
 8011bc4:	2000164c 	.word	0x2000164c
 8011bc8:	0802697c 	.word	0x0802697c

08011bcc <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8011bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011bd0:	b098      	sub	sp, #96	@ 0x60
 8011bd2:	af02      	add	r7, sp, #8
 8011bd4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8011bd6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011bda:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bde:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011be2:	2b02      	cmp	r3, #2
 8011be4:	f040 80cc 	bne.w	8011d80 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 8011be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bea:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011bee:	f003 0308 	and.w	r3, r3, #8
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d01a      	beq.n	8011c2e <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 8011bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bfa:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011bfe:	2b02      	cmp	r3, #2
 8011c00:	d811      	bhi.n	8011c26 <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8011c02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c04:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d102      	bne.n	8011c12 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011c10:	e010      	b.n	8011c34 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8011c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c14:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011c18:	3b01      	subs	r3, #1
 8011c1a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8011c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8011c24:	e006      	b.n	8011c34 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 8011c26:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8011c2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8011c2c:	e002      	b.n	8011c34 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8011c2e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011c32:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8011c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c36:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c3a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011c3e:	4618      	mov	r0, r3
 8011c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c42:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011c46:	461a      	mov	r2, r3
 8011c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c4a:	9300      	str	r3, [sp, #0]
 8011c4c:	4613      	mov	r3, r2
 8011c4e:	4602      	mov	r2, r0
 8011c50:	48a4      	ldr	r0, [pc, #656]	@ (8011ee4 <prvTCPNextTimeout+0x318>)
 8011c52:	f010 fdb7 	bl	80227c4 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8011c56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c58:	2200      	movs	r2, #0
 8011c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c5c:	647a      	str	r2, [r7, #68]	@ 0x44
 8011c5e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8011c62:	4622      	mov	r2, r4
 8011c64:	462b      	mov	r3, r5
 8011c66:	f04f 0000 	mov.w	r0, #0
 8011c6a:	f04f 0100 	mov.w	r1, #0
 8011c6e:	0159      	lsls	r1, r3, #5
 8011c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011c74:	0150      	lsls	r0, r2, #5
 8011c76:	4602      	mov	r2, r0
 8011c78:	460b      	mov	r3, r1
 8011c7a:	4621      	mov	r1, r4
 8011c7c:	1a51      	subs	r1, r2, r1
 8011c7e:	6239      	str	r1, [r7, #32]
 8011c80:	4629      	mov	r1, r5
 8011c82:	eb63 0301 	sbc.w	r3, r3, r1
 8011c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c88:	f04f 0200 	mov.w	r2, #0
 8011c8c:	f04f 0300 	mov.w	r3, #0
 8011c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011c94:	4649      	mov	r1, r9
 8011c96:	008b      	lsls	r3, r1, #2
 8011c98:	4641      	mov	r1, r8
 8011c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011c9e:	4641      	mov	r1, r8
 8011ca0:	008a      	lsls	r2, r1, #2
 8011ca2:	4610      	mov	r0, r2
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	4622      	mov	r2, r4
 8011caa:	189b      	adds	r3, r3, r2
 8011cac:	61bb      	str	r3, [r7, #24]
 8011cae:	462b      	mov	r3, r5
 8011cb0:	460a      	mov	r2, r1
 8011cb2:	eb42 0303 	adc.w	r3, r2, r3
 8011cb6:	61fb      	str	r3, [r7, #28]
 8011cb8:	f04f 0200 	mov.w	r2, #0
 8011cbc:	f04f 0300 	mov.w	r3, #0
 8011cc0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011cc4:	4629      	mov	r1, r5
 8011cc6:	00cb      	lsls	r3, r1, #3
 8011cc8:	4621      	mov	r1, r4
 8011cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011cce:	4621      	mov	r1, r4
 8011cd0:	00ca      	lsls	r2, r1, #3
 8011cd2:	4610      	mov	r0, r2
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011cda:	f04f 0300 	mov.w	r3, #0
 8011cde:	f7ee fb67 	bl	80003b0 <__aeabi_uldivmod>
 8011ce2:	4602      	mov	r2, r0
 8011ce4:	460b      	mov	r3, r1
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d044      	beq.n	8011d76 <prvTCPNextTimeout+0x1aa>
 8011cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cee:	2200      	movs	r2, #0
 8011cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011cf2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011cf4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011cf8:	4622      	mov	r2, r4
 8011cfa:	462b      	mov	r3, r5
 8011cfc:	f04f 0000 	mov.w	r0, #0
 8011d00:	f04f 0100 	mov.w	r1, #0
 8011d04:	0159      	lsls	r1, r3, #5
 8011d06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011d0a:	0150      	lsls	r0, r2, #5
 8011d0c:	4602      	mov	r2, r0
 8011d0e:	460b      	mov	r3, r1
 8011d10:	4621      	mov	r1, r4
 8011d12:	ebb2 0a01 	subs.w	sl, r2, r1
 8011d16:	4629      	mov	r1, r5
 8011d18:	eb63 0b01 	sbc.w	fp, r3, r1
 8011d1c:	f04f 0200 	mov.w	r2, #0
 8011d20:	f04f 0300 	mov.w	r3, #0
 8011d24:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011d28:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8011d2c:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8011d30:	4692      	mov	sl, r2
 8011d32:	469b      	mov	fp, r3
 8011d34:	4623      	mov	r3, r4
 8011d36:	eb1a 0303 	adds.w	r3, sl, r3
 8011d3a:	613b      	str	r3, [r7, #16]
 8011d3c:	462b      	mov	r3, r5
 8011d3e:	eb4b 0303 	adc.w	r3, fp, r3
 8011d42:	617b      	str	r3, [r7, #20]
 8011d44:	f04f 0200 	mov.w	r2, #0
 8011d48:	f04f 0300 	mov.w	r3, #0
 8011d4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011d50:	4629      	mov	r1, r5
 8011d52:	00cb      	lsls	r3, r1, #3
 8011d54:	4621      	mov	r1, r4
 8011d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011d5a:	4621      	mov	r1, r4
 8011d5c:	00ca      	lsls	r2, r1, #3
 8011d5e:	4610      	mov	r0, r2
 8011d60:	4619      	mov	r1, r3
 8011d62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011d66:	f04f 0300 	mov.w	r3, #0
 8011d6a:	f7ee fb21 	bl	80003b0 <__aeabi_uldivmod>
 8011d6e:	4602      	mov	r2, r0
 8011d70:	460b      	mov	r3, r1
 8011d72:	b292      	uxth	r2, r2
 8011d74:	e000      	b.n	8011d78 <prvTCPNextTimeout+0x1ac>
 8011d76:	2201      	movs	r2, #1
 8011d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d7a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8011d7e:	e0a8      	b.n	8011ed2 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8011d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d82:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	f040 80a3 	bne.w	8011ed2 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8011d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d8e:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d94:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8011d98:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	f004 fcbd 	bl	801671c <xTCPWindowTxHasData>
 8011da2:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 8011da4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d108      	bne.n	8011dbc <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 8011daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d002      	beq.n	8011db6 <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 8011db0:	2301      	movs	r3, #1
 8011db2:	653b      	str	r3, [r7, #80]	@ 0x50
 8011db4:	e002      	b.n	8011dbc <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8011db6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011dba:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 8011dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8011dc2:	637a      	str	r2, [r7, #52]	@ 0x34
 8011dc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011dc8:	4652      	mov	r2, sl
 8011dca:	465b      	mov	r3, fp
 8011dcc:	f04f 0000 	mov.w	r0, #0
 8011dd0:	f04f 0100 	mov.w	r1, #0
 8011dd4:	0159      	lsls	r1, r3, #5
 8011dd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011dda:	0150      	lsls	r0, r2, #5
 8011ddc:	4602      	mov	r2, r0
 8011dde:	460b      	mov	r3, r1
 8011de0:	4651      	mov	r1, sl
 8011de2:	ebb2 0801 	subs.w	r8, r2, r1
 8011de6:	4659      	mov	r1, fp
 8011de8:	eb63 0901 	sbc.w	r9, r3, r1
 8011dec:	f04f 0200 	mov.w	r2, #0
 8011df0:	f04f 0300 	mov.w	r3, #0
 8011df4:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8011df8:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011dfc:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8011e00:	4690      	mov	r8, r2
 8011e02:	4699      	mov	r9, r3
 8011e04:	4653      	mov	r3, sl
 8011e06:	eb18 0303 	adds.w	r3, r8, r3
 8011e0a:	60bb      	str	r3, [r7, #8]
 8011e0c:	465b      	mov	r3, fp
 8011e0e:	eb49 0303 	adc.w	r3, r9, r3
 8011e12:	60fb      	str	r3, [r7, #12]
 8011e14:	f04f 0200 	mov.w	r2, #0
 8011e18:	f04f 0300 	mov.w	r3, #0
 8011e1c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8011e20:	4649      	mov	r1, r9
 8011e22:	00cb      	lsls	r3, r1, #3
 8011e24:	4641      	mov	r1, r8
 8011e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011e2a:	4641      	mov	r1, r8
 8011e2c:	00ca      	lsls	r2, r1, #3
 8011e2e:	4610      	mov	r0, r2
 8011e30:	4619      	mov	r1, r3
 8011e32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011e36:	f04f 0300 	mov.w	r3, #0
 8011e3a:	f7ee fab9 	bl	80003b0 <__aeabi_uldivmod>
 8011e3e:	4602      	mov	r2, r0
 8011e40:	460b      	mov	r3, r1
 8011e42:	4613      	mov	r3, r2
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d040      	beq.n	8011eca <prvTCPNextTimeout+0x2fe>
 8011e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011e50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8011e54:	4642      	mov	r2, r8
 8011e56:	464b      	mov	r3, r9
 8011e58:	f04f 0000 	mov.w	r0, #0
 8011e5c:	f04f 0100 	mov.w	r1, #0
 8011e60:	0159      	lsls	r1, r3, #5
 8011e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011e66:	0150      	lsls	r0, r2, #5
 8011e68:	4602      	mov	r2, r0
 8011e6a:	460b      	mov	r3, r1
 8011e6c:	4641      	mov	r1, r8
 8011e6e:	1a54      	subs	r4, r2, r1
 8011e70:	4649      	mov	r1, r9
 8011e72:	eb63 0501 	sbc.w	r5, r3, r1
 8011e76:	f04f 0200 	mov.w	r2, #0
 8011e7a:	f04f 0300 	mov.w	r3, #0
 8011e7e:	00ab      	lsls	r3, r5, #2
 8011e80:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8011e84:	00a2      	lsls	r2, r4, #2
 8011e86:	4614      	mov	r4, r2
 8011e88:	461d      	mov	r5, r3
 8011e8a:	4643      	mov	r3, r8
 8011e8c:	18e3      	adds	r3, r4, r3
 8011e8e:	603b      	str	r3, [r7, #0]
 8011e90:	464b      	mov	r3, r9
 8011e92:	eb45 0303 	adc.w	r3, r5, r3
 8011e96:	607b      	str	r3, [r7, #4]
 8011e98:	f04f 0200 	mov.w	r2, #0
 8011e9c:	f04f 0300 	mov.w	r3, #0
 8011ea0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	00cb      	lsls	r3, r1, #3
 8011ea8:	4621      	mov	r1, r4
 8011eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011eae:	4621      	mov	r1, r4
 8011eb0:	00ca      	lsls	r2, r1, #3
 8011eb2:	4610      	mov	r0, r2
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011eba:	f04f 0300 	mov.w	r3, #0
 8011ebe:	f7ee fa77 	bl	80003b0 <__aeabi_uldivmod>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	b292      	uxth	r2, r2
 8011ec8:	e000      	b.n	8011ecc <prvTCPNextTimeout+0x300>
 8011eca:	2201      	movs	r2, #1
 8011ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ece:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8011ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ed4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3758      	adds	r7, #88	@ 0x58
 8011edc:	46bd      	mov	sp, r7
 8011ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011ee2:	bf00      	nop
 8011ee4:	080269a0 	.word	0x080269a0

08011ee8 <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 8011ee8:	b4b0      	push	{r4, r5, r7}
 8011eea:	b08b      	sub	sp, #44	@ 0x2c
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8011ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef8:	899b      	ldrh	r3, [r3, #12]
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011f00:	4293      	cmp	r3, r2
 8011f02:	d10e      	bne.n	8011f22 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	330e      	adds	r3, #14
 8011f08:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 8011f0e:	69fb      	ldr	r3, [r7, #28]
 8011f10:	3308      	adds	r3, #8
 8011f12:	f107 0408 	add.w	r4, r7, #8
 8011f16:	6818      	ldr	r0, [r3, #0]
 8011f18:	6859      	ldr	r1, [r3, #4]
 8011f1a:	689a      	ldr	r2, [r3, #8]
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f20:	e018      	b.n	8011f54 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	330e      	adds	r3, #14
 8011f26:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8011f2c:	6a3b      	ldr	r3, [r7, #32]
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	061a      	lsls	r2, r3, #24
 8011f32:	6a3b      	ldr	r3, [r7, #32]
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	021b      	lsls	r3, r3, #8
 8011f38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011f3c:	431a      	orrs	r2, r3
 8011f3e:	6a3b      	ldr	r3, [r7, #32]
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	0a1b      	lsrs	r3, r3, #8
 8011f44:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011f48:	431a      	orrs	r2, r3
 8011f4a:	6a3b      	ldr	r3, [r7, #32]
 8011f4c:	68db      	ldr	r3, [r3, #12]
 8011f4e:	0e1b      	lsrs	r3, r3, #24
 8011f50:	4313      	orrs	r3, r2
 8011f52:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	461d      	mov	r5, r3
 8011f58:	f107 0408 	add.w	r4, r7, #8
 8011f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f60:	6823      	ldr	r3, [r4, #0]
 8011f62:	602b      	str	r3, [r5, #0]
    }
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	372c      	adds	r7, #44	@ 0x2c
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bcb0      	pop	{r4, r5, r7}
 8011f6c:	4770      	bx	lr
	...

08011f70 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8011f70:	b5b0      	push	{r4, r5, r7, lr}
 8011f72:	b096      	sub	sp, #88	@ 0x58
 8011f74:	af04      	add	r7, sp, #16
 8011f76:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d104      	bne.n	8011f8c <xProcessReceivedTCPPacket+0x1c>
 8011f82:	f240 21f7 	movw	r1, #759	@ 0x2f7
 8011f86:	4898      	ldr	r0, [pc, #608]	@ (80121e8 <xProcessReceivedTCPPacket+0x278>)
 8011f88:	f7ef fd3e 	bl	8001a08 <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d104      	bne.n	8011f9e <xProcessReceivedTCPPacket+0x2e>
 8011f94:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 8011f98:	4893      	ldr	r0, [pc, #588]	@ (80121e8 <xProcessReceivedTCPPacket+0x278>)
 8011f9a:	f7ef fd35 	bl	8001a08 <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8011fa2:	69fb      	ldr	r3, [r7, #28]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7f8 fa37 	bl	800a418 <uxIPHeaderSizePacket>
 8011faa:	4603      	mov	r3, r0
 8011fac:	330e      	adds	r3, #14
 8011fae:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fb6:	3314      	adds	r3, #20
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d202      	bcs.n	8011fc2 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8011fc0:	e191      	b.n	80122e6 <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 8011fc2:	69fb      	ldr	r3, [r7, #28]
 8011fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 8011fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fc8:	4413      	add	r3, r2
 8011fca:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fce:	7b5b      	ldrb	r3, [r3, #13]
 8011fd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 8011fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fd4:	885b      	ldrh	r3, [r3, #2]
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	021b      	lsls	r3, r3, #8
 8011fda:	b21a      	sxth	r2, r3
 8011fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fde:	885b      	ldrh	r3, [r3, #2]
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	0a1b      	lsrs	r3, r3, #8
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	b21b      	sxth	r3, r3
 8011fe8:	4313      	orrs	r3, r2
 8011fea:	b21b      	sxth	r3, r3
 8011fec:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 8011fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ff0:	881b      	ldrh	r3, [r3, #0]
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	021b      	lsls	r3, r3, #8
 8011ff6:	b21a      	sxth	r2, r3
 8011ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ffa:	881b      	ldrh	r3, [r3, #0]
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	0a1b      	lsrs	r3, r3, #8
 8012000:	b29b      	uxth	r3, r3
 8012002:	b21b      	sxth	r3, r3
 8012004:	4313      	orrs	r3, r2
 8012006:	b21b      	sxth	r3, r3
 8012008:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 801200a:	69fb      	ldr	r3, [r7, #28]
 801200c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801200e:	f107 0308 	add.w	r3, r7, #8
 8012012:	4611      	mov	r1, r2
 8012014:	4618      	mov	r0, r3
 8012016:	f7ff ff67 	bl	8011ee8 <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 801201a:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 801201c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801201e:	9303      	str	r3, [sp, #12]
 8012020:	466c      	mov	r4, sp
 8012022:	f107 0310 	add.w	r3, r7, #16
 8012026:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801202a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801202e:	f107 0308 	add.w	r3, r7, #8
 8012032:	cb0c      	ldmia	r3, {r2, r3}
 8012034:	4629      	mov	r1, r5
 8012036:	2000      	movs	r0, #0
 8012038:	f7fe fbc2 	bl	80107c0 <pxTCPSocketLookup>
 801203c:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 801203e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012040:	2b00      	cmp	r3, #0
 8012042:	d008      	beq.n	8012056 <xProcessReceivedTCPPacket+0xe6>
 8012044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012046:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801204a:	4618      	mov	r0, r3
 801204c:	f000 fc92 	bl	8012974 <prvTCPSocketIsActive>
 8012050:	4603      	mov	r3, r0
 8012052:	2b00      	cmp	r3, #0
 8012054:	d116      	bne.n	8012084 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 8012056:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012058:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801205a:	4619      	mov	r1, r3
 801205c:	4863      	ldr	r0, [pc, #396]	@ (80121ec <xProcessReceivedTCPPacket+0x27c>)
 801205e:	f010 fbb1 	bl	80227c4 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8012062:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012064:	f003 031f 	and.w	r3, r3, #31
 8012068:	2b10      	cmp	r3, #16
 801206a:	d008      	beq.n	801207e <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 801206c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801206e:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8012072:	2b00      	cmp	r3, #0
 8012074:	d103      	bne.n	801207e <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012076:	69fb      	ldr	r3, [r7, #28]
 8012078:	4618      	mov	r0, r3
 801207a:	f002 fd0b 	bl	8014a94 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 801207e:	2300      	movs	r3, #0
 8012080:	647b      	str	r3, [r7, #68]	@ 0x44
 8012082:	e0d6      	b.n	8012232 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8012084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012086:	2200      	movs	r2, #0
 8012088:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 801208c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801208e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012092:	2b01      	cmp	r3, #1
 8012094:	d127      	bne.n	80120e6 <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 8012096:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012098:	f003 031f 	and.w	r3, r3, #31
 801209c:	2b02      	cmp	r3, #2
 801209e:	d015      	beq.n	80120cc <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 80120a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80120a2:	4618      	mov	r0, r3
 80120a4:	f003 fbbe 	bl	8015824 <prvTCPFlagMeaning>
 80120a8:	4601      	mov	r1, r0
 80120aa:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80120ac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80120ae:	4850      	ldr	r0, [pc, #320]	@ (80121f0 <xProcessReceivedTCPPacket+0x280>)
 80120b0:	f010 fb88 	bl	80227c4 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 80120b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80120b6:	f003 0304 	and.w	r3, r3, #4
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d103      	bne.n	80120c6 <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 80120be:	69fb      	ldr	r3, [r7, #28]
 80120c0:	4618      	mov	r0, r3
 80120c2:	f002 fce7 	bl	8014a94 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 80120c6:	2300      	movs	r3, #0
 80120c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80120ca:	e0b2      	b.n	8012232 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 80120cc:	69fb      	ldr	r3, [r7, #28]
 80120ce:	4619      	mov	r1, r3
 80120d0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80120d2:	f001 f999 	bl	8013408 <prvHandleListen>
 80120d6:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 80120d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120da:	2b00      	cmp	r3, #0
 80120dc:	f040 80a9 	bne.w	8012232 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 80120e0:	2300      	movs	r3, #0
 80120e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80120e4:	e0a5      	b.n	8012232 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 80120e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80120e8:	f003 0304 	and.w	r3, r3, #4
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d068      	beq.n	80121c2 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 80120f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80120f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80120f4:	4619      	mov	r1, r3
 80120f6:	483f      	ldr	r0, [pc, #252]	@ (80121f4 <xProcessReceivedTCPPacket+0x284>)
 80120f8:	f010 fb64 	bl	80227c4 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80120fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120fe:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012102:	2b02      	cmp	r3, #2
 8012104:	d11f      	bne.n	8012146 <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8012106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012108:	689b      	ldr	r3, [r3, #8]
 801210a:	061a      	lsls	r2, r3, #24
 801210c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801210e:	689b      	ldr	r3, [r3, #8]
 8012110:	021b      	lsls	r3, r3, #8
 8012112:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012116:	431a      	orrs	r2, r3
 8012118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801211a:	689b      	ldr	r3, [r3, #8]
 801211c:	0a1b      	lsrs	r3, r3, #8
 801211e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012122:	431a      	orrs	r2, r3
 8012124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012126:	689b      	ldr	r3, [r3, #8]
 8012128:	0e1b      	lsrs	r3, r3, #24
 801212a:	4313      	orrs	r3, r2
 801212c:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 801212e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012130:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012134:	3301      	adds	r3, #1
 8012136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012138:	429a      	cmp	r2, r3
 801213a:	d13f      	bne.n	80121bc <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 801213c:	2100      	movs	r1, #0
 801213e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012140:	f7ff fb34 	bl	80117ac <vTCPStateChange>
 8012144:	e03a      	b.n	80121bc <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8012146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012148:	685b      	ldr	r3, [r3, #4]
 801214a:	061a      	lsls	r2, r3, #24
 801214c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	021b      	lsls	r3, r3, #8
 8012152:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012156:	431a      	orrs	r2, r3
 8012158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801215a:	685b      	ldr	r3, [r3, #4]
 801215c:	0a1b      	lsrs	r3, r3, #8
 801215e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012162:	431a      	orrs	r2, r3
 8012164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012166:	685b      	ldr	r3, [r3, #4]
 8012168:	0e1b      	lsrs	r3, r3, #24
 801216a:	4313      	orrs	r3, r2
 801216c:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 801216e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012170:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8012174:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012176:	429a      	cmp	r2, r3
 8012178:	d104      	bne.n	8012184 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 801217a:	2100      	movs	r1, #0
 801217c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801217e:	f7ff fb15 	bl	80117ac <vTCPStateChange>
 8012182:	e01b      	b.n	80121bc <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8012184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012186:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801218a:	4619      	mov	r1, r3
 801218c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801218e:	f003 fc82 	bl	8015a96 <xSequenceGreaterThan>
 8012192:	4603      	mov	r3, r0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d011      	beq.n	80121bc <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8012198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801219a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 801219e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121a0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 80121a4:	4413      	add	r3, r2
 80121a6:	4619      	mov	r1, r3
 80121a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80121aa:	f003 fc5e 	bl	8015a6a <xSequenceLessThan>
 80121ae:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d003      	beq.n	80121bc <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	4618      	mov	r0, r3
 80121b8:	f002 fc5f 	bl	8014a7a <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 80121bc:	2300      	movs	r3, #0
 80121be:	647b      	str	r3, [r7, #68]	@ 0x44
 80121c0:	e037      	b.n	8012232 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 80121c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80121c4:	f003 031f 	and.w	r3, r3, #31
 80121c8:	2b02      	cmp	r3, #2
 80121ca:	d117      	bne.n	80121fc <xProcessReceivedTCPPacket+0x28c>
 80121cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121ce:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80121d2:	2b04      	cmp	r3, #4
 80121d4:	d912      	bls.n	80121fc <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 80121d6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80121d8:	4619      	mov	r1, r3
 80121da:	4807      	ldr	r0, [pc, #28]	@ (80121f8 <xProcessReceivedTCPPacket+0x288>)
 80121dc:	f010 faf2 	bl	80227c4 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 80121e0:	2300      	movs	r3, #0
 80121e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80121e4:	e025      	b.n	8012232 <xProcessReceivedTCPPacket+0x2c2>
 80121e6:	bf00      	nop
 80121e8:	08026894 	.word	0x08026894
 80121ec:	080269cc 	.word	0x080269cc
 80121f0:	080269f4 	.word	0x080269f4
 80121f4:	08026a2c 	.word	0x08026a2c
 80121f8:	08026a50 	.word	0x08026a50
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 80121fc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80121fe:	f7f8 f925 	bl	800a44c <uxIPHeaderSizeSocket>
 8012202:	4603      	mov	r3, r0
 8012204:	330e      	adds	r3, #14
 8012206:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8012208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801220a:	33a0      	adds	r3, #160	@ 0xa0
 801220c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801220e:	4413      	add	r3, r2
 8012210:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8012214:	69fb      	ldr	r3, [r7, #28]
 8012216:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801221a:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 801221c:	2214      	movs	r2, #20
 801221e:	4619      	mov	r1, r3
 8012220:	f010 fcec 	bl	8022bfc <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 8012224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012226:	330d      	adds	r3, #13
 8012228:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801222a:	4413      	add	r3, r2
 801222c:	2210      	movs	r2, #16
 801222e:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 8012232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012234:	2b00      	cmp	r3, #0
 8012236:	d056      	beq.n	80122e6 <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 8012238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801223a:	2b00      	cmp	r3, #0
 801223c:	d104      	bne.n	8012248 <xProcessReceivedTCPPacket+0x2d8>
 801223e:	f240 319e 	movw	r1, #926	@ 0x39e
 8012242:	482b      	ldr	r0, [pc, #172]	@ (80122f0 <xProcessReceivedTCPPacket+0x380>)
 8012244:	f7ef fbe0 	bl	8001a08 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 8012248:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801224a:	f7ff fa53 	bl	80116f4 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 801224e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012250:	7b1b      	ldrb	r3, [r3, #12]
 8012252:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012256:	2b50      	cmp	r3, #80	@ 0x50
 8012258:	d905      	bls.n	8012266 <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 801225a:	69fb      	ldr	r3, [r7, #28]
 801225c:	4619      	mov	r1, r3
 801225e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012260:	f000 f894 	bl	801238c <prvCheckOptions>
 8012264:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 8012266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012268:	2b00      	cmp	r3, #0
 801226a:	d03c      	beq.n	80122e6 <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 801226c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801226e:	89db      	ldrh	r3, [r3, #14]
 8012270:	b29b      	uxth	r3, r3
 8012272:	021b      	lsls	r3, r3, #8
 8012274:	b21a      	sxth	r2, r3
 8012276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012278:	89db      	ldrh	r3, [r3, #14]
 801227a:	b29b      	uxth	r3, r3
 801227c:	0a1b      	lsrs	r3, r3, #8
 801227e:	b29b      	uxth	r3, r3
 8012280:	b21b      	sxth	r3, r3
 8012282:	4313      	orrs	r3, r2
 8012284:	b21b      	sxth	r3, r3
 8012286:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8012288:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801228a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801228c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8012290:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012292:	f003 0302 	and.w	r3, r3, #2
 8012296:	2b00      	cmp	r3, #0
 8012298:	d10a      	bne.n	80122b0 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 801229a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801229c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80122a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80122a2:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 80122a6:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 80122aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122ac:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 80122b0:	f107 031c 	add.w	r3, r7, #28
 80122b4:	4619      	mov	r1, r3
 80122b6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80122b8:	f000 ff78 	bl	80131ac <prvTCPHandleState>
 80122bc:	4603      	mov	r3, r0
 80122be:	2b00      	cmp	r3, #0
 80122c0:	dd05      	ble.n	80122ce <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 80122c2:	f107 031c 	add.w	r3, r7, #28
 80122c6:	4619      	mov	r1, r3
 80122c8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80122ca:	f001 fc6f 	bl	8013bac <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 80122ce:	69fb      	ldr	r3, [r7, #28]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d005      	beq.n	80122e0 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	4618      	mov	r0, r3
 80122d8:	f005 fbcc 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 80122dc:	2300      	movs	r3, #0
 80122de:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 80122e0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80122e2:	f7ff fc73 	bl	8011bcc <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 80122e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80122e8:	4618      	mov	r0, r3
 80122ea:	3748      	adds	r7, #72	@ 0x48
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bdb0      	pop	{r4, r5, r7, pc}
 80122f0:	08026894 	.word	0x08026894

080122f4 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b088      	sub	sp, #32
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012300:	021b      	lsls	r3, r3, #8
 8012302:	b21a      	sxth	r2, r3
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012308:	0a1b      	lsrs	r3, r3, #8
 801230a:	b29b      	uxth	r3, r3
 801230c:	b21b      	sxth	r3, r3
 801230e:	4313      	orrs	r3, r2
 8012310:	b21b      	sxth	r3, r3
 8012312:	b29b      	uxth	r3, r3
 8012314:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 8012316:	2300      	movs	r3, #0
 8012318:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801231a:	4b19      	ldr	r3, [pc, #100]	@ (8012380 <xTCPCheckNewClient+0x8c>)
 801231c:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 801231e:	4b19      	ldr	r3, [pc, #100]	@ (8012384 <xTCPCheckNewClient+0x90>)
 8012320:	68db      	ldr	r3, [r3, #12]
 8012322:	61fb      	str	r3, [r7, #28]
 8012324:	e023      	b.n	801236e <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 8012326:	69fb      	ldr	r3, [r7, #28]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	697a      	ldr	r2, [r7, #20]
 801232c:	429a      	cmp	r2, r3
 801232e:	d11b      	bne.n	8012368 <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8012330:	69fb      	ldr	r3, [r7, #28]
 8012332:	68db      	ldr	r3, [r3, #12]
 8012334:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 801233c:	2b06      	cmp	r3, #6
 801233e:	d113      	bne.n	8012368 <xTCPCheckNewClient+0x74>
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012346:	f003 0302 	and.w	r3, r3, #2
 801234a:	b2db      	uxtb	r3, r3
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00b      	beq.n	8012368 <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	68fa      	ldr	r2, [r7, #12]
 8012354:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801235a:	4619      	mov	r1, r3
 801235c:	480a      	ldr	r0, [pc, #40]	@ (8012388 <xTCPCheckNewClient+0x94>)
 801235e:	f010 fa31 	bl	80227c4 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 8012362:	2301      	movs	r3, #1
 8012364:	61bb      	str	r3, [r7, #24]
                    break;
 8012366:	e006      	b.n	8012376 <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 801236e:	69fa      	ldr	r2, [r7, #28]
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	429a      	cmp	r2, r3
 8012374:	d1d7      	bne.n	8012326 <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 8012376:	69bb      	ldr	r3, [r7, #24]
    }
 8012378:	4618      	mov	r0, r3
 801237a:	3720      	adds	r7, #32
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	20001610 	.word	0x20001610
 8012384:	20001608 	.word	0x20001608
 8012388:	08026a70 	.word	0x08026a70

0801238c <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801238c:	b580      	push	{r7, lr}
 801238e:	b08c      	sub	sp, #48	@ 0x30
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8012396:	6838      	ldr	r0, [r7, #0]
 8012398:	f7f8 f83e 	bl	800a418 <uxIPHeaderSizePacket>
 801239c:	4603      	mov	r3, r0
 801239e:	330e      	adds	r3, #14
 80123a0:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80123a6:	69fb      	ldr	r3, [r7, #28]
 80123a8:	4413      	add	r3, r2
 80123aa:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 80123ac:	2301      	movs	r3, #1
 80123ae:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	3314      	adds	r3, #20
 80123b4:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	3314      	adds	r3, #20
 80123be:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	7b1b      	ldrb	r3, [r3, #12]
 80123c4:	2b50      	cmp	r3, #80	@ 0x50
 80123c6:	d93f      	bls.n	8012448 <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 80123c8:	693b      	ldr	r3, [r7, #16]
 80123ca:	7b1b      	ldrb	r3, [r3, #12]
 80123cc:	091b      	lsrs	r3, r3, #4
 80123ce:	b2db      	uxtb	r3, r3
 80123d0:	3b05      	subs	r3, #5
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	009b      	lsls	r3, r3, #2
 80123d6:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 80123d8:	7bfb      	ldrb	r3, [r7, #15]
 80123da:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123e0:	697a      	ldr	r2, [r7, #20]
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d230      	bcs.n	8012448 <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	1ad3      	subs	r3, r2, r3
 80123ee:	6a3a      	ldr	r2, [r7, #32]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d829      	bhi.n	8012448 <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	7b5b      	ldrb	r3, [r3, #13]
 80123f8:	f003 0302 	and.w	r3, r3, #2
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d002      	beq.n	8012406 <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 8012400:	2301      	movs	r3, #1
 8012402:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012404:	e001      	b.n	801240a <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 8012406:	2300      	movs	r3, #0
 8012408:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 801240a:	6a3b      	ldr	r3, [r7, #32]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d018      	beq.n	8012442 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 8012410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	6a39      	ldr	r1, [r7, #32]
 8012416:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012418:	f000 f81c 	bl	8012454 <prvSingleStepTCPHeaderOptions>
 801241c:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	2b00      	cmp	r3, #0
 8012422:	da02      	bge.n	801242a <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 8012424:	2300      	movs	r3, #0
 8012426:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 8012428:	e00e      	b.n	8012448 <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d00a      	beq.n	8012446 <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	6a3a      	ldr	r2, [r7, #32]
 8012434:	1ad3      	subs	r3, r2, r3
 8012436:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801243c:	4413      	add	r3, r2
 801243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 8012440:	e7e3      	b.n	801240a <prvCheckOptions+0x7e>
                            break;
 8012442:	bf00      	nop
 8012444:	e000      	b.n	8012448 <prvCheckOptions+0xbc>
                            break;
 8012446:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 8012448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801244a:	4618      	mov	r0, r3
 801244c:	3730      	adds	r7, #48	@ 0x30
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
	...

08012454 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 8012454:	b580      	push	{r7, lr}
 8012456:	b08a      	sub	sp, #40	@ 0x28
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	607a      	str	r2, [r7, #4]
 8012460:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 8012466:	2300      	movs	r3, #0
 8012468:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012470:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8012472:	2300      	movs	r3, #0
 8012474:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d102      	bne.n	8012484 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 801247e:	2300      	movs	r3, #0
 8012480:	61fb      	str	r3, [r7, #28]
 8012482:	e0da      	b.n	801263a <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	2b01      	cmp	r3, #1
 801248a:	d102      	bne.n	8012492 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 801248c:	2301      	movs	r3, #1
 801248e:	61fb      	str	r3, [r7, #28]
 8012490:	e0d3      	b.n	801263a <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	2b01      	cmp	r3, #1
 8012496:	d803      	bhi.n	80124a0 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 8012498:	f04f 33ff 	mov.w	r3, #4294967295
 801249c:	61fb      	str	r3, [r7, #28]
 801249e:	e0cc      	b.n	801263a <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	2b03      	cmp	r3, #3
 80124a6:	d11e      	bne.n	80124e6 <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	2b02      	cmp	r3, #2
 80124ac:	d904      	bls.n	80124b8 <prvSingleStepTCPHeaderOptions+0x64>
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	3301      	adds	r3, #1
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	2b03      	cmp	r3, #3
 80124b6:	d003      	beq.n	80124c0 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 80124b8:	f04f 33ff 	mov.w	r3, #4294967295
 80124bc:	61fb      	str	r3, [r7, #28]
 80124be:	e0bc      	b.n	801263a <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00c      	beq.n	80124e0 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	3302      	adds	r3, #2
 80124ca:	781a      	ldrb	r2, [r3, #0]
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 80124d2:	687a      	ldr	r2, [r7, #4]
 80124d4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80124d8:	f043 0310 	orr.w	r3, r3, #16
 80124dc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 80124e0:	2303      	movs	r3, #3
 80124e2:	61fb      	str	r3, [r7, #28]
 80124e4:	e0a9      	b.n	801263a <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	2b02      	cmp	r3, #2
 80124ec:	d16d      	bne.n	80125ca <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	2b03      	cmp	r3, #3
 80124f2:	d904      	bls.n	80124fe <prvSingleStepTCPHeaderOptions+0xaa>
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	3301      	adds	r3, #1
 80124f8:	781b      	ldrb	r3, [r3, #0]
 80124fa:	2b04      	cmp	r3, #4
 80124fc:	d003      	beq.n	8012506 <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 80124fe:	f04f 33ff 	mov.w	r3, #4294967295
 8012502:	61fb      	str	r3, [r7, #28]
 8012504:	e099      	b.n	801263a <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	3302      	adds	r3, #2
 801250a:	4618      	mov	r0, r3
 801250c:	f7f8 fd31 	bl	800af72 <usChar2u16>
 8012510:	4603      	mov	r3, r0
 8012512:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801251a:	461a      	mov	r2, r3
 801251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801251e:	4293      	cmp	r3, r2
 8012520:	d010      	beq.n	8012544 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 8012522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012524:	2b00      	cmp	r3, #0
 8012526:	d105      	bne.n	8012534 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 8012528:	f04f 33ff 	mov.w	r3, #4294967295
 801252c:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 801252e:	2301      	movs	r3, #1
 8012530:	61bb      	str	r3, [r7, #24]
 8012532:	e007      	b.n	8012544 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801253a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801253c:	4619      	mov	r1, r3
 801253e:	4841      	ldr	r0, [pc, #260]	@ (8012644 <prvSingleStepTCPHeaderOptions+0x1f0>)
 8012540:	f010 f940 	bl	80227c4 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d177      	bne.n	801263a <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 801254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254c:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8012550:	d202      	bcs.n	8012558 <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 8012552:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8012556:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801255e:	461a      	mov	r2, r3
 8012560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012562:	4293      	cmp	r3, r2
 8012564:	d22e      	bcs.n	80125c4 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8012566:	687a      	ldr	r2, [r7, #4]
 8012568:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801256c:	f043 0301 	orr.w	r3, r3, #1
 8012570:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801257a:	461a      	mov	r2, r3
 801257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801257e:	4293      	cmp	r3, r2
 8012580:	d207      	bcs.n	8012592 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801258a:	4619      	mov	r1, r3
 801258c:	482e      	ldr	r0, [pc, #184]	@ (8012648 <prvSingleStepTCPHeaderOptions+0x1f4>)
 801258e:	f010 f919 	bl	80227c4 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	685a      	ldr	r2, [r3, #4]
 8012596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012598:	fbb2 f3f3 	udiv	r3, r2, r3
 801259c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801259e:	fb03 f202 	mul.w	r2, r3, r2
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 80125a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a8:	b29a      	uxth	r2, r3
 80125aa:	693b      	ldr	r3, [r7, #16]
 80125ac:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 80125b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125b2:	b29a      	uxth	r2, r3
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 80125ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125bc:	b29a      	uxth	r2, r3
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 80125c4:	2304      	movs	r3, #4
 80125c6:	61fb      	str	r3, [r7, #28]
 80125c8:	e037      	b.n	801263a <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	3301      	adds	r3, #1
 80125ce:	781b      	ldrb	r3, [r3, #0]
 80125d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 80125d4:	2300      	movs	r3, #0
 80125d6:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 80125d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80125dc:	2b01      	cmp	r3, #1
 80125de:	d904      	bls.n	80125ea <prvSingleStepTCPHeaderOptions+0x196>
 80125e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80125e4:	697a      	ldr	r2, [r7, #20]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d203      	bcs.n	80125f2 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 80125ea:	f04f 33ff 	mov.w	r3, #4294967295
 80125ee:	61fb      	str	r3, [r7, #28]
 80125f0:	e023      	b.n	801263a <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	2b05      	cmp	r3, #5
 80125f8:	d11a      	bne.n	8012630 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 80125fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80125fe:	3b02      	subs	r3, #2
 8012600:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 8012604:	69fb      	ldr	r3, [r7, #28]
 8012606:	3302      	adds	r3, #2
 8012608:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 801260a:	e00d      	b.n	8012628 <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 801260c:	69fb      	ldr	r3, [r7, #28]
 801260e:	687a      	ldr	r2, [r7, #4]
 8012610:	4619      	mov	r1, r3
 8012612:	68f8      	ldr	r0, [r7, #12]
 8012614:	f000 f81a 	bl	801264c <prvReadSackOption>
                            lIndex += 8;
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	3308      	adds	r3, #8
 801261c:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 801261e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012622:	3b08      	subs	r3, #8
 8012624:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 8012628:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801262c:	2b07      	cmp	r3, #7
 801262e:	d8ed      	bhi.n	801260c <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 8012630:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012634:	69fa      	ldr	r2, [r7, #28]
 8012636:	4413      	add	r3, r2
 8012638:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 801263a:	69fb      	ldr	r3, [r7, #28]
    }
 801263c:	4618      	mov	r0, r3
 801263e:	3728      	adds	r7, #40	@ 0x28
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	08026a9c 	.word	0x08026a9c
 8012648:	08026ab4 	.word	0x08026ab4

0801264c <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 801264c:	b580      	push	{r7, lr}
 801264e:	b08a      	sub	sp, #40	@ 0x28
 8012650:	af02      	add	r7, sp, #8
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 8012658:	68fa      	ldr	r2, [r7, #12]
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	4413      	add	r3, r2
 801265e:	4618      	mov	r0, r3
 8012660:	f7f8 fc6c 	bl	800af3c <ulChar2u32>
 8012664:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	3304      	adds	r3, #4
 801266a:	68fa      	ldr	r2, [r7, #12]
 801266c:	4413      	add	r3, r2
 801266e:	4618      	mov	r0, r3
 8012670:	f7f8 fc64 	bl	800af3c <ulChar2u32>
 8012674:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801267c:	69ba      	ldr	r2, [r7, #24]
 801267e:	69f9      	ldr	r1, [r7, #28]
 8012680:	4618      	mov	r0, r3
 8012682:	f004 fba3 	bl	8016dcc <ulTCPWindowTxSack>
 8012686:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801268e:	2b00      	cmp	r3, #0
 8012690:	d029      	beq.n	80126e6 <prvReadSackOption+0x9a>
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d026      	beq.n	80126e6 <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801269e:	2300      	movs	r3, #0
 80126a0:	9300      	str	r3, [sp, #0]
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	2200      	movs	r2, #0
 80126a6:	2100      	movs	r1, #0
 80126a8:	f7fe fed9 	bl	801145e <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f043 0202 	orr.w	r2, r3, #2
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126bc:	f003 0302 	and.w	r3, r3, #2
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d005      	beq.n	80126d0 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d005      	beq.n	80126e6 <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80126e0:	6979      	ldr	r1, [r7, #20]
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 80126e6:	bf00      	nop
 80126e8:	3720      	adds	r7, #32
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}

080126ee <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 80126ee:	b590      	push	{r4, r7, lr}
 80126f0:	b08f      	sub	sp, #60	@ 0x3c
 80126f2:	af00      	add	r7, sp, #0
 80126f4:	6078      	str	r0, [r7, #4]
 80126f6:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f7f7 fe8b 	bl	800a418 <uxIPHeaderSizePacket>
 8012702:	4603      	mov	r3, r0
 8012704:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012706:	4423      	add	r3, r4
 8012708:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801270a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801270c:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f7f7 fe82 	bl	800a418 <uxIPHeaderSizePacket>
 8012714:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 8012716:	2300      	movs	r3, #0
 8012718:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 801271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801271e:	7b1b      	ldrb	r3, [r3, #12]
 8012720:	089b      	lsrs	r3, r3, #2
 8012722:	b2db      	uxtb	r3, r3
 8012724:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8012728:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 801272c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012730:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012736:	69f9      	ldr	r1, [r7, #28]
 8012738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801273a:	440b      	add	r3, r1
 801273c:	330e      	adds	r3, #14
 801273e:	441a      	add	r2, r3
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012748:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 801274a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801274c:	3b0e      	subs	r3, #14
 801274e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012754:	899b      	ldrh	r3, [r3, #12]
 8012756:	b29b      	uxth	r3, r3
 8012758:	2b08      	cmp	r3, #8
 801275a:	d004      	beq.n	8012766 <prvCheckRxData+0x78>
 801275c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8012760:	4293      	cmp	r3, r2
 8012762:	d015      	beq.n	8012790 <prvCheckRxData+0xa2>
 8012764:	e02c      	b.n	80127c0 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801276a:	330e      	adds	r3, #14
 801276c:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	885b      	ldrh	r3, [r3, #2]
 8012772:	b29b      	uxth	r3, r3
 8012774:	021b      	lsls	r3, r3, #8
 8012776:	b21a      	sxth	r2, r3
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	885b      	ldrh	r3, [r3, #2]
 801277c:	b29b      	uxth	r3, r3
 801277e:	0a1b      	lsrs	r3, r3, #8
 8012780:	b29b      	uxth	r3, r3
 8012782:	b21b      	sxth	r3, r3
 8012784:	4313      	orrs	r3, r2
 8012786:	b21b      	sxth	r3, r3
 8012788:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 801278a:	8afb      	ldrh	r3, [r7, #22]
 801278c:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 801278e:	e01a      	b.n	80127c6 <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012794:	330e      	adds	r3, #14
 8012796:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 8012798:	69bb      	ldr	r3, [r7, #24]
 801279a:	889b      	ldrh	r3, [r3, #4]
 801279c:	b29b      	uxth	r3, r3
 801279e:	021b      	lsls	r3, r3, #8
 80127a0:	b21a      	sxth	r2, r3
 80127a2:	69bb      	ldr	r3, [r7, #24]
 80127a4:	889b      	ldrh	r3, [r3, #4]
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	0a1b      	lsrs	r3, r3, #8
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	b21b      	sxth	r3, r3
 80127ae:	4313      	orrs	r3, r2
 80127b0:	b21b      	sxth	r3, r3
 80127b2:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 80127b4:	8afb      	ldrh	r3, [r7, #22]
 80127b6:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 80127b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127ba:	3328      	adds	r3, #40	@ 0x28
 80127bc:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 80127be:	e002      	b.n	80127c6 <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 80127c0:	2300      	movs	r3, #0
 80127c2:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 80127c4:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 80127c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127ca:	429a      	cmp	r2, r3
 80127cc:	dd01      	ble.n	80127d2 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 80127ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127d0:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 80127d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127d4:	69fb      	ldr	r3, [r7, #28]
 80127d6:	4413      	add	r3, r2
 80127d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127da:	429a      	cmp	r2, r3
 80127dc:	dd06      	ble.n	80127ec <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 80127de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	4413      	add	r3, r2
 80127e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127e6:	1ad3      	subs	r3, r2, r3
 80127e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80127ea:	e001      	b.n	80127f0 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 80127ec:	2300      	movs	r3, #0
 80127ee:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 80127f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127f2:	7b5b      	ldrb	r3, [r3, #13]
 80127f4:	f003 0320 	and.w	r3, r3, #32
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d01c      	beq.n	8012836 <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 80127fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127fe:	8a5b      	ldrh	r3, [r3, #18]
 8012800:	b29b      	uxth	r3, r3
 8012802:	021b      	lsls	r3, r3, #8
 8012804:	b21a      	sxth	r2, r3
 8012806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012808:	8a5b      	ldrh	r3, [r3, #18]
 801280a:	b29b      	uxth	r3, r3
 801280c:	0a1b      	lsrs	r3, r3, #8
 801280e:	b29b      	uxth	r3, r3
 8012810:	b21b      	sxth	r3, r3
 8012812:	4313      	orrs	r3, r2
 8012814:	b21b      	sxth	r3, r3
 8012816:	b29b      	uxth	r3, r3
 8012818:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	681a      	ldr	r2, [r3, #0]
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	441a      	add	r2, r3
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8012826:	68f9      	ldr	r1, [r7, #12]
 8012828:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801282a:	f7f8 fb33 	bl	800ae94 <FreeRTOS_min_int32>
 801282e:	4602      	mov	r2, r0
 8012830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012832:	1a9b      	subs	r3, r3, r2
 8012834:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 8012836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 8012838:	4618      	mov	r0, r3
 801283a:	373c      	adds	r7, #60	@ 0x3c
 801283c:	46bd      	mov	sp, r7
 801283e:	bd90      	pop	{r4, r7, pc}

08012840 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 8012840:	b580      	push	{r7, lr}
 8012842:	b092      	sub	sp, #72	@ 0x48
 8012844:	af02      	add	r7, sp, #8
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	607a      	str	r2, [r7, #4]
 801284c:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f7f7 fde2 	bl	800a418 <uxIPHeaderSizePacket>
 8012854:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801285a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801285c:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 801285e:	4413      	add	r3, r2
 8012860:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012864:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801286c:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 801286e:	2300      	movs	r3, #0
 8012870:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	061a      	lsls	r2, r3, #24
 8012880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	021b      	lsls	r3, r3, #8
 8012886:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801288a:	431a      	orrs	r2, r3
 801288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	0a1b      	lsrs	r3, r3, #8
 8012892:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012896:	431a      	orrs	r2, r3
 8012898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	0e1b      	lsrs	r3, r3, #24
 801289e:	4313      	orrs	r3, r2
 80128a0:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 80128a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d057      	beq.n	8012958 <prvStoreRxData+0x118>
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80128ae:	2b03      	cmp	r3, #3
 80128b0:	d952      	bls.n	8012958 <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 80128b2:	2300      	movs	r3, #0
 80128b4:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d007      	beq.n	80128d0 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7fe fc89 	bl	80111de <uxStreamBufferGetSpace>
 80128cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80128ce:	e003      	b.n	80128d8 <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80128d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 80128d8:	f107 0310 	add.w	r3, r7, #16
 80128dc:	9300      	str	r3, [sp, #0]
 80128de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128e2:	69f9      	ldr	r1, [r7, #28]
 80128e4:	6a38      	ldr	r0, [r7, #32]
 80128e6:	f003 fd45 	bl	8016374 <lTCPWindowRxCheck>
 80128ea:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	db20      	blt.n	8012934 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 80128f2:	693b      	ldr	r3, [r7, #16]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d007      	beq.n	8012908 <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 80128f8:	693b      	ldr	r3, [r7, #16]
 80128fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128fc:	1ad3      	subs	r3, r2, r3
 80128fe:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	68ba      	ldr	r2, [r7, #8]
 8012904:	4413      	add	r3, r2
 8012906:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 8012908:	69b9      	ldr	r1, [r7, #24]
 801290a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801290c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801290e:	68f8      	ldr	r0, [r7, #12]
 8012910:	f7fe f8d2 	bl	8010ab8 <lTCPAddRxdata>
 8012914:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 8012916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012918:	697a      	ldr	r2, [r7, #20]
 801291a:	429a      	cmp	r2, r3
 801291c:	d00a      	beq.n	8012934 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 801291e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012920:	6979      	ldr	r1, [r7, #20]
 8012922:	4813      	ldr	r0, [pc, #76]	@ (8012970 <prvStoreRxData+0x130>)
 8012924:	f00f ff4e 	bl	80227c4 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f002 f8b3 	bl	8014a94 <prvTCPSendReset>
                    xResult = -1;
 801292e:	f04f 33ff 	mov.w	r3, #4294967295
 8012932:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 8012934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012936:	2b00      	cmp	r3, #0
 8012938:	d113      	bne.n	8012962 <prvStoreRxData+0x122>
 801293a:	6a3b      	ldr	r3, [r7, #32]
 801293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801293e:	2b00      	cmp	r3, #0
 8012940:	d00f      	beq.n	8012962 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 8012942:	6a3b      	ldr	r3, [r7, #32]
 8012944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012946:	2200      	movs	r2, #0
 8012948:	2100      	movs	r1, #0
 801294a:	68f8      	ldr	r0, [r7, #12]
 801294c:	f7fe f8b4 	bl	8010ab8 <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 8012950:	6a3b      	ldr	r3, [r7, #32]
 8012952:	2200      	movs	r2, #0
 8012954:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 8012956:	e004      	b.n	8012962 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 8012958:	6a3b      	ldr	r3, [r7, #32]
 801295a:	2200      	movs	r2, #0
 801295c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012960:	e000      	b.n	8012964 <prvStoreRxData+0x124>
        {
 8012962:	bf00      	nop
        }

        return xResult;
 8012964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 8012966:	4618      	mov	r0, r3
 8012968:	3740      	adds	r7, #64	@ 0x40
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	08026acc 	.word	0x08026acc

08012974 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 8012974:	b480      	push	{r7}
 8012976:	b085      	sub	sp, #20
 8012978:	af00      	add	r7, sp, #0
 801297a:	4603      	mov	r3, r0
 801297c:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 801297e:	79fb      	ldrb	r3, [r7, #7]
 8012980:	2b0b      	cmp	r3, #11
 8012982:	bf8c      	ite	hi
 8012984:	2201      	movhi	r2, #1
 8012986:	2200      	movls	r2, #0
 8012988:	b2d2      	uxtb	r2, r2
 801298a:	2a00      	cmp	r2, #0
 801298c:	d10f      	bne.n	80129ae <prvTCPSocketIsActive+0x3a>
 801298e:	f640 3281 	movw	r2, #2945	@ 0xb81
 8012992:	fa22 f303 	lsr.w	r3, r2, r3
 8012996:	f003 0301 	and.w	r3, r3, #1
 801299a:	2b00      	cmp	r3, #0
 801299c:	bf14      	ite	ne
 801299e:	2301      	movne	r3, #1
 80129a0:	2300      	moveq	r3, #0
 80129a2:	b2db      	uxtb	r3, r3
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d002      	beq.n	80129ae <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 80129a8:	2300      	movs	r3, #0
 80129aa:	60fb      	str	r3, [r7, #12]
                break;
 80129ac:	e002      	b.n	80129b4 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 80129ae:	2301      	movs	r3, #1
 80129b0:	60fb      	str	r3, [r7, #12]
                break;
 80129b2:	bf00      	nop
        }

        return xResult;
 80129b4:	68fb      	ldr	r3, [r7, #12]
    }
 80129b6:	4618      	mov	r0, r3
 80129b8:	3714      	adds	r7, #20
 80129ba:	46bd      	mov	sp, r7
 80129bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c0:	4770      	bx	lr
	...

080129c4 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 80129c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129c6:	b089      	sub	sp, #36	@ 0x24
 80129c8:	af02      	add	r7, sp, #8
 80129ca:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80129d2:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 80129d4:	7cfb      	ldrb	r3, [r7, #19]
 80129d6:	2b08      	cmp	r3, #8
 80129d8:	d00b      	beq.n	80129f2 <prvTCPStatusAgeCheck+0x2e>
 80129da:	2b08      	cmp	r3, #8
 80129dc:	dc0c      	bgt.n	80129f8 <prvTCPStatusAgeCheck+0x34>
 80129de:	2b01      	cmp	r3, #1
 80129e0:	dc02      	bgt.n	80129e8 <prvTCPStatusAgeCheck+0x24>
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	da05      	bge.n	80129f2 <prvTCPStatusAgeCheck+0x2e>
 80129e6:	e007      	b.n	80129f8 <prvTCPStatusAgeCheck+0x34>
 80129e8:	2b05      	cmp	r3, #5
 80129ea:	d105      	bne.n	80129f8 <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 80129ec:	2300      	movs	r3, #0
 80129ee:	617b      	str	r3, [r7, #20]
                    break;
 80129f0:	e005      	b.n	80129fe <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 80129f2:	2300      	movs	r3, #0
 80129f4:	617b      	str	r3, [r7, #20]
                    break;
 80129f6:	e002      	b.n	80129fe <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 80129f8:	2301      	movs	r3, #1
 80129fa:	617b      	str	r3, [r7, #20]
                    break;
 80129fc:	bf00      	nop
            }

            if( xResult != pdFALSE )
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d032      	beq.n	8012a6a <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8012a04:	f7f2 f96e 	bl	8004ce4 <xTaskGetTickCount>
 8012a08:	4602      	mov	r2, r0
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012a10:	1ad3      	subs	r3, r2, r3
 8012a12:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	f247 5230 	movw	r2, #30000	@ 0x7530
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	d925      	bls.n	8012a6a <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012a22:	461d      	mov	r5, r3
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012a2e:	461e      	mov	r6, r3
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012a36:	4618      	mov	r0, r3
 8012a38:	f000 fdca 	bl	80135d0 <FreeRTOS_GetTCPStateName>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	9300      	str	r3, [sp, #0]
 8012a40:	4633      	mov	r3, r6
 8012a42:	4622      	mov	r2, r4
 8012a44:	4629      	mov	r1, r5
 8012a46:	480b      	ldr	r0, [pc, #44]	@ (8012a74 <prvTCPStatusAgeCheck+0xb0>)
 8012a48:	f00f febc 	bl	80227c4 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012a4c:	2108      	movs	r1, #8
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f7fe feac 	bl	80117ac <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012a5a:	f003 0304 	and.w	r3, r3, #4
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d002      	beq.n	8012a6a <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 8012a64:	f04f 33ff 	mov.w	r3, #4294967295
 8012a68:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 8012a6a:	697b      	ldr	r3, [r7, #20]
        }
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	371c      	adds	r7, #28
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a74:	08026af4 	.word	0x08026af4

08012a78 <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8012a78:	b5b0      	push	{r4, r5, r7, lr}
 8012a7a:	b08a      	sub	sp, #40	@ 0x28
 8012a7c:	af02      	add	r7, sp, #8
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012a86:	6838      	ldr	r0, [r7, #0]
 8012a88:	f7f7 fcc6 	bl	800a418 <uxIPHeaderSizePacket>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012a90:	4423      	add	r3, r4
 8012a92:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012a94:	69bb      	ldr	r3, [r7, #24]
 8012a96:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	74fb      	strb	r3, [r7, #19]
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	7b5b      	ldrb	r3, [r3, #13]
 8012aa0:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012aa8:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	689b      	ldr	r3, [r3, #8]
 8012ab2:	061a      	lsls	r2, r3, #24
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	689b      	ldr	r3, [r3, #8]
 8012ab8:	021b      	lsls	r3, r3, #8
 8012aba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012abe:	431a      	orrs	r2, r3
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	689b      	ldr	r3, [r3, #8]
 8012ac4:	0a1b      	lsrs	r3, r3, #8
 8012ac6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012aca:	431a      	orrs	r2, r3
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	689b      	ldr	r3, [r3, #8]
 8012ad0:	0e1b      	lsrs	r3, r3, #24
 8012ad2:	4313      	orrs	r3, r2
 8012ad4:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8012ad6:	7cbb      	ldrb	r3, [r7, #18]
 8012ad8:	f003 0301 	and.w	r3, r3, #1
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d004      	beq.n	8012aea <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	695b      	ldr	r3, [r3, #20]
 8012ae4:	1c5a      	adds	r2, r3, #1
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d10b      	bne.n	8012b12 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	6a1a      	ldr	r2, [r3, #32]
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8012b02:	687a      	ldr	r2, [r7, #4]
 8012b04:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012b08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b0c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8012b10:	e00c      	b.n	8012b2c <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b16:	3301      	adds	r3, #1
 8012b18:	68ba      	ldr	r2, [r7, #8]
 8012b1a:	429a      	cmp	r2, r3
 8012b1c:	d106      	bne.n	8012b2c <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012b24:	f043 0301 	orr.w	r3, r3, #1
 8012b28:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012b32:	f003 0301 	and.w	r3, r3, #1
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d10b      	bne.n	8012b54 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	2211      	movs	r2, #17
 8012b48:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 8012b4a:	210a      	movs	r1, #10
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f7fe fe2d 	bl	80117ac <vTCPStateChange>
 8012b52:	e023      	b.n	8012b9c <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b58:	1c5a      	adds	r2, r3, #1
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012b64:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d103      	bne.n	8012b76 <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	2200      	movs	r2, #0
 8012b72:	735a      	strb	r2, [r3, #13]
 8012b74:	e012      	b.n	8012b9c <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012b7c:	f003 0302 	and.w	r3, r3, #2
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d103      	bne.n	8012b8e <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	2210      	movs	r2, #16
 8012b8a:	735a      	strb	r2, [r3, #13]
 8012b8c:	e002      	b.n	8012b94 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	2200      	movs	r2, #0
 8012b92:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012b94:	2108      	movs	r1, #8
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f7fe fe08 	bl	80117ac <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	6a1a      	ldr	r2, [r3, #32]
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8012ba4:	697b      	ldr	r3, [r7, #20]
 8012ba6:	7b5b      	ldrb	r3, [r3, #13]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d00d      	beq.n	8012bc8 <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f7f7 fc4d 	bl	800a44c <uxIPHeaderSizeSocket>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	b2da      	uxtb	r2, r3
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012bbc:	4413      	add	r3, r2
 8012bbe:	b2db      	uxtb	r3, r3
 8012bc0:	3314      	adds	r3, #20
 8012bc2:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8012bc4:	7cfb      	ldrb	r3, [r7, #19]
 8012bc6:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012bce:	3314      	adds	r3, #20
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	009b      	lsls	r3, r3, #2
 8012bd4:	b2da      	uxtb	r2, r3
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 8012bda:	4b14      	ldr	r3, [pc, #80]	@ (8012c2c <prvTCPHandleFin+0x1b4>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d01f      	beq.n	8012c22 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	69db      	ldr	r3, [r3, #28]
 8012be6:	68ba      	ldr	r2, [r7, #8]
 8012be8:	1ad0      	subs	r0, r2, r3
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	6a1a      	ldr	r2, [r3, #32]
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	69db      	ldr	r3, [r3, #28]
 8012bf2:	1ad4      	subs	r4, r2, r3
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	69db      	ldr	r3, [r3, #28]
 8012bfc:	1ad5      	subs	r5, r2, r3
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	69db      	ldr	r3, [r3, #28]
 8012c06:	1ad3      	subs	r3, r2, r3
 8012c08:	68fa      	ldr	r2, [r7, #12]
 8012c0a:	6911      	ldr	r1, [r2, #16]
 8012c0c:	68fa      	ldr	r2, [r7, #12]
 8012c0e:	68d2      	ldr	r2, [r2, #12]
 8012c10:	1a8a      	subs	r2, r1, r2
 8012c12:	9201      	str	r2, [sp, #4]
 8012c14:	9300      	str	r3, [sp, #0]
 8012c16:	462b      	mov	r3, r5
 8012c18:	4622      	mov	r2, r4
 8012c1a:	4601      	mov	r1, r0
 8012c1c:	4804      	ldr	r0, [pc, #16]	@ (8012c30 <prvTCPHandleFin+0x1b8>)
 8012c1e:	f00f fdd1 	bl	80227c4 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8012c22:	69fb      	ldr	r3, [r7, #28]
    }
 8012c24:	4618      	mov	r0, r3
 8012c26:	3720      	adds	r7, #32
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8012c2c:	2000164c 	.word	0x2000164c
 8012c30:	08026b2c 	.word	0x08026b2c

08012c34 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012c34:	b590      	push	{r4, r7, lr}
 8012c36:	b09b      	sub	sp, #108	@ 0x6c
 8012c38:	af02      	add	r7, sp, #8
 8012c3a:	60f8      	str	r0, [r7, #12]
 8012c3c:	60b9      	str	r1, [r7, #8]
 8012c3e:	607a      	str	r2, [r7, #4]
 8012c40:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012c46:	68f8      	ldr	r0, [r7, #12]
 8012c48:	f7f7 fc00 	bl	800a44c <uxIPHeaderSizeSocket>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012c50:	4423      	add	r3, r4
 8012c52:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c56:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c62:	7b5b      	ldrb	r3, [r3, #13]
 8012c64:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8012c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	061a      	lsls	r2, r3, #24
 8012c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c70:	685b      	ldr	r3, [r3, #4]
 8012c72:	021b      	lsls	r3, r3, #8
 8012c74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012c78:	431a      	orrs	r2, r3
 8012c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c7c:	685b      	ldr	r3, [r3, #4]
 8012c7e:	0a1b      	lsrs	r3, r3, #8
 8012c80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012c84:	431a      	orrs	r2, r3
 8012c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c88:	685b      	ldr	r3, [r3, #4]
 8012c8a:	0e1b      	lsrs	r3, r3, #24
 8012c8c:	4313      	orrs	r3, r2
 8012c8e:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 8012c90:	2300      	movs	r3, #0
 8012c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 8012c94:	2300      	movs	r3, #0
 8012c96:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 8012c98:	2310      	movs	r3, #16
 8012c9a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 8012c9e:	2317      	movs	r3, #23
 8012ca0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012caa:	2b02      	cmp	r3, #2
 8012cac:	d105      	bne.n	8012cba <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8012cae:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8012cb2:	f043 0302 	orr.w	r3, r3, #2
 8012cb6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8012cba:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8012cbe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012cc2:	4013      	ands	r3, r2
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d044      	beq.n	8012d58 <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012cd4:	2b04      	cmp	r3, #4
 8012cd6:	d101      	bne.n	8012cdc <prvHandleSynReceived+0xa8>
 8012cd8:	4977      	ldr	r1, [pc, #476]	@ (8012eb8 <prvHandleSynReceived+0x284>)
 8012cda:	e000      	b.n	8012cde <prvHandleSynReceived+0xaa>
 8012cdc:	4977      	ldr	r1, [pc, #476]	@ (8012ebc <prvHandleSynReceived+0x288>)
 8012cde:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012ce2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8012ce6:	4876      	ldr	r0, [pc, #472]	@ (8012ec0 <prvHandleSynReceived+0x28c>)
 8012ce8:	f00f fd6c 	bl	80227c4 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012cec:	2108      	movs	r1, #8
 8012cee:	68f8      	ldr	r0, [r7, #12]
 8012cf0:	f7fe fd5c 	bl	80117ac <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8012cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cf6:	689b      	ldr	r3, [r3, #8]
 8012cf8:	061a      	lsls	r2, r3, #24
 8012cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cfc:	689b      	ldr	r3, [r3, #8]
 8012cfe:	021b      	lsls	r3, r3, #8
 8012d00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012d04:	431a      	orrs	r2, r3
 8012d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d08:	689b      	ldr	r3, [r3, #8]
 8012d0a:	0a1b      	lsrs	r3, r3, #8
 8012d0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012d10:	431a      	orrs	r2, r3
 8012d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d14:	689b      	ldr	r3, [r3, #8]
 8012d16:	0e1b      	lsrs	r3, r3, #24
 8012d18:	431a      	orrs	r2, r3
 8012d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012d22:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8012d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d26:	7b5b      	ldrb	r3, [r3, #13]
 8012d28:	f043 0304 	orr.w	r3, r3, #4
 8012d2c:	b2da      	uxtb	r2, r3
 8012d2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d30:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012d32:	68f8      	ldr	r0, [r7, #12]
 8012d34:	f7f7 fb8a 	bl	800a44c <uxIPHeaderSizeSocket>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	4413      	add	r3, r2
 8012d3e:	3314      	adds	r3, #20
 8012d40:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d44:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	b2db      	uxtb	r3, r3
 8012d4a:	3314      	adds	r3, #20
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	009b      	lsls	r3, r3, #2
 8012d50:	b2da      	uxtb	r2, r3
 8012d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d54:	731a      	strb	r2, [r3, #12]
 8012d56:	e0aa      	b.n	8012eae <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d60:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8012d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d6a:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012d74:	2b02      	cmp	r3, #2
 8012d76:	d12e      	bne.n	8012dd6 <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012d78:	68f8      	ldr	r0, [r7, #12]
 8012d7a:	f7f7 fb67 	bl	800a44c <uxIPHeaderSizeSocket>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 8012d82:	33a0      	adds	r3, #160	@ 0xa0
 8012d84:	68fa      	ldr	r2, [r7, #12]
 8012d86:	4413      	add	r3, r2
 8012d88:	330a      	adds	r3, #10
 8012d8a:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d8e:	2210      	movs	r2, #16
 8012d90:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d94:	2210      	movs	r2, #16
 8012d96:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8012daa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012dac:	f003 f8ec 	bl	8015f88 <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8012db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012db2:	1c5a      	adds	r2, r3, #1
 8012db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012db6:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8012db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012dba:	1c5a      	adds	r2, r3, #1
 8012dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dbe:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8012dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dc2:	6a1b      	ldr	r3, [r3, #32]
 8012dc4:	1c5a      	adds	r2, r3, #1
 8012dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dc8:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 8012dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012dce:	1c5a      	adds	r2, r3, #1
 8012dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dd2:	635a      	str	r2, [r3, #52]	@ 0x34
 8012dd4:	e005      	b.n	8012de2 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d102      	bne.n	8012de2 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012de0:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012de4:	69db      	ldr	r3, [r3, #28]
 8012de6:	1c5a      	adds	r2, r3, #1
 8012de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dea:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	7a1b      	ldrb	r3, [r3, #8]
 8012df0:	f003 0301 	and.w	r3, r3, #1
 8012df4:	b2db      	uxtb	r3, r3
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d001      	beq.n	8012dfe <prvHandleSynReceived+0x1ca>
 8012dfa:	200a      	movs	r0, #10
 8012dfc:	e000      	b.n	8012e00 <prvHandleSynReceived+0x1cc>
 8012dfe:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012e06:	f107 0210 	add.w	r2, r7, #16
 8012e0a:	2328      	movs	r3, #40	@ 0x28
 8012e0c:	f7fc fda2 	bl	800f954 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012e16:	2b02      	cmp	r3, #2
 8012e18:	d101      	bne.n	8012e1e <prvHandleSynReceived+0x1ea>
 8012e1a:	492a      	ldr	r1, [pc, #168]	@ (8012ec4 <prvHandleSynReceived+0x290>)
 8012e1c:	e000      	b.n	8012e20 <prvHandleSynReceived+0x1ec>
 8012e1e:	492a      	ldr	r1, [pc, #168]	@ (8012ec8 <prvHandleSynReceived+0x294>)
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012e24:	461c      	mov	r4, r3
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012e34:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f107 0310 	add.w	r3, r7, #16
 8012e40:	9001      	str	r0, [sp, #4]
 8012e42:	9200      	str	r2, [sp, #0]
 8012e44:	4622      	mov	r2, r4
 8012e46:	4821      	ldr	r0, [pc, #132]	@ (8012ecc <prvHandleSynReceived+0x298>)
 8012e48:	f00f fcbc 	bl	80227c4 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012e52:	2b02      	cmp	r3, #2
 8012e54:	d002      	beq.n	8012e5c <prvHandleSynReceived+0x228>
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d014      	beq.n	8012e86 <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e5e:	2210      	movs	r2, #16
 8012e60:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012e62:	68f8      	ldr	r0, [r7, #12]
 8012e64:	f7f7 faf2 	bl	800a44c <uxIPHeaderSizeSocket>
 8012e68:	4602      	mov	r2, r0
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	4413      	add	r3, r2
 8012e6e:	3314      	adds	r3, #20
 8012e70:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	b2db      	uxtb	r3, r3
 8012e7a:	3314      	adds	r3, #20
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	009b      	lsls	r3, r3, #2
 8012e80:	b2da      	uxtb	r2, r3
 8012e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e84:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012e8c:	f003 0310 	and.w	r3, r3, #16
 8012e90:	b2db      	uxtb	r3, r3
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d107      	bne.n	8012ea6 <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 8012ea6:	2105      	movs	r1, #5
 8012ea8:	68f8      	ldr	r0, [r7, #12]
 8012eaa:	f7fe fc7f 	bl	80117ac <vTCPStateChange>
        }

        return xSendLength;
 8012eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3764      	adds	r7, #100	@ 0x64
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd90      	pop	{r4, r7, pc}
 8012eb8:	08026b6c 	.word	0x08026b6c
 8012ebc:	08026b7c 	.word	0x08026b7c
 8012ec0:	08026b8c 	.word	0x08026b8c
 8012ec4:	08026bb0 	.word	0x08026bb0
 8012ec8:	08026bb8 	.word	0x08026bb8
 8012ecc:	08026bc0 	.word	0x08026bc0

08012ed0 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012ed0:	b590      	push	{r4, r7, lr}
 8012ed2:	b097      	sub	sp, #92	@ 0x5c
 8012ed4:	af02      	add	r7, sp, #8
 8012ed6:	60f8      	str	r0, [r7, #12]
 8012ed8:	60b9      	str	r1, [r7, #8]
 8012eda:	607a      	str	r2, [r7, #4]
 8012edc:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012ee4:	68f8      	ldr	r0, [r7, #12]
 8012ee6:	f7f7 fab1 	bl	800a44c <uxIPHeaderSizeSocket>
 8012eea:	4603      	mov	r3, r0
 8012eec:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012eee:	4423      	add	r3, r4
 8012ef0:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ef4:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f00:	7b5b      	ldrb	r3, [r3, #13]
 8012f02:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 8012f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	061a      	lsls	r2, r3, #24
 8012f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f0e:	685b      	ldr	r3, [r3, #4]
 8012f10:	021b      	lsls	r3, r3, #8
 8012f12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012f16:	431a      	orrs	r2, r3
 8012f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	0a1b      	lsrs	r3, r3, #8
 8012f1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012f22:	431a      	orrs	r2, r3
 8012f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	0e1b      	lsrs	r3, r3, #24
 8012f2a:	4313      	orrs	r3, r2
 8012f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f2e:	2300      	movs	r3, #0
 8012f30:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8012f32:	2300      	movs	r3, #0
 8012f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012f36:	2300      	movs	r3, #0
 8012f38:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8012f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f40:	89db      	ldrh	r3, [r3, #14]
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	021b      	lsls	r3, r3, #8
 8012f46:	b21a      	sxth	r2, r3
 8012f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f4a:	89db      	ldrh	r3, [r3, #14]
 8012f4c:	b29b      	uxth	r3, r3
 8012f4e:	0a1b      	lsrs	r3, r3, #8
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	b21b      	sxth	r3, r3
 8012f54:	4313      	orrs	r3, r2
 8012f56:	b21b      	sxth	r3, r3
 8012f58:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8012f5a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8012f68:	68fa      	ldr	r2, [r7, #12]
 8012f6a:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012f6e:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 8012f78:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012f7c:	f003 0310 	and.w	r3, r3, #16
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	f000 8106 	beq.w	8013192 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 8012f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f88:	689b      	ldr	r3, [r3, #8]
 8012f8a:	061a      	lsls	r2, r3, #24
 8012f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f8e:	689b      	ldr	r3, [r3, #8]
 8012f90:	021b      	lsls	r3, r3, #8
 8012f92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012f96:	431a      	orrs	r2, r3
 8012f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f9a:	689b      	ldr	r3, [r3, #8]
 8012f9c:	0a1b      	lsrs	r3, r3, #8
 8012f9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012fa2:	431a      	orrs	r2, r3
 8012fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012fa6:	689b      	ldr	r3, [r3, #8]
 8012fa8:	0e1b      	lsrs	r3, r3, #24
 8012faa:	4313      	orrs	r3, r2
 8012fac:	4619      	mov	r1, r3
 8012fae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012fb0:	f003 feee 	bl	8016d90 <ulTCPWindowTxAck>
 8012fb4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d02c      	beq.n	801301a <prvHandleEstablished+0x14a>
 8012fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d029      	beq.n	801301a <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012fcc:	2300      	movs	r3, #0
 8012fce:	9300      	str	r3, [sp, #0]
 8012fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	2100      	movs	r1, #0
 8012fd6:	f7fe fa42 	bl	801145e <uxStreamBufferGet>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d01c      	beq.n	801301a <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	f043 0202 	orr.w	r2, r3, #2
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ff0:	f003 0302 	and.w	r3, r3, #2
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d005      	beq.n	8013004 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801300a:	2b00      	cmp	r3, #0
 801300c:	d005      	beq.n	801301a <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8013014:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013016:	68f8      	ldr	r0, [r7, #12]
 8013018:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013020:	2b00      	cmp	r3, #0
 8013022:	d002      	beq.n	801302a <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 8013024:	68f8      	ldr	r0, [r7, #12]
 8013026:	f001 fb13 	bl	8014650 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801302a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801302c:	6a1a      	ldr	r2, [r3, #32]
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801303a:	f003 0320 	and.w	r3, r3, #32
 801303e:	b2db      	uxtb	r3, r3
 8013040:	2b00      	cmp	r3, #0
 8013042:	d105      	bne.n	8013050 <prvHandleEstablished+0x180>
 8013044:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8013048:	f003 0301 	and.w	r3, r3, #1
 801304c:	2b00      	cmp	r3, #0
 801304e:	d06b      	beq.n	8013128 <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8013050:	2301      	movs	r3, #1
 8013052:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801305a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801305e:	b2db      	uxtb	r3, r3
 8013060:	2b00      	cmp	r3, #0
 8013062:	d13a      	bne.n	80130da <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8013064:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013066:	f002 fe87 	bl	8015d78 <xTCPWindowRxEmpty>
 801306a:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 801306c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801306e:	f003 fafd 	bl	801666c <xTCPWindowTxDone>
 8013072:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8013074:	6a3b      	ldr	r3, [r7, #32]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d002      	beq.n	8013080 <prvHandleEstablished+0x1b0>
 801307a:	69fb      	ldr	r3, [r7, #28]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d10f      	bne.n	80130a0 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013084:	4619      	mov	r1, r3
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801308c:	461a      	mov	r2, r3
 801308e:	69fb      	ldr	r3, [r7, #28]
 8013090:	9300      	str	r3, [sp, #0]
 8013092:	6a3b      	ldr	r3, [r7, #32]
 8013094:	4841      	ldr	r0, [pc, #260]	@ (801319c <prvHandleEstablished+0x2cc>)
 8013096:	f00f fb95 	bl	80227c4 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 801309a:	2300      	movs	r3, #0
 801309c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801309e:	e01c      	b.n	80130da <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80130a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	441a      	add	r2, r3
 80130a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130a8:	691b      	ldr	r3, [r3, #16]
 80130aa:	1ad3      	subs	r3, r2, r3
 80130ac:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 80130ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130b0:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 80130b2:	69bb      	ldr	r3, [r7, #24]
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	dd10      	ble.n	80130da <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 80130b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130ba:	691a      	ldr	r2, [r3, #16]
 80130bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130be:	68db      	ldr	r3, [r3, #12]
 80130c0:	1ad1      	subs	r1, r2, r3
 80130c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130c4:	699a      	ldr	r2, [r3, #24]
 80130c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130c8:	68db      	ldr	r3, [r3, #12]
 80130ca:	1ad3      	subs	r3, r2, r3
 80130cc:	460a      	mov	r2, r1
 80130ce:	69b9      	ldr	r1, [r7, #24]
 80130d0:	4833      	ldr	r0, [pc, #204]	@ (80131a0 <prvHandleEstablished+0x2d0>)
 80130d2:	f00f fb77 	bl	80227c4 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 80130d6:	2300      	movs	r3, #0
 80130d8:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 80130da:	4b32      	ldr	r3, [pc, #200]	@ (80131a4 <prvHandleEstablished+0x2d4>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	dd11      	ble.n	8013106 <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80130e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80130ea:	1ad1      	subs	r1, r2, r3
 80130ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130ee:	6a1a      	ldr	r2, [r3, #32]
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80130f6:	1ad3      	subs	r3, r2, r3
 80130f8:	9300      	str	r3, [sp, #0]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	460a      	mov	r2, r1
 80130fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013100:	4829      	ldr	r0, [pc, #164]	@ (80131a8 <prvHandleEstablished+0x2d8>)
 8013102:	f00f fb5f 	bl	80227c4 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 8013106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013108:	2b00      	cmp	r3, #0
 801310a:	d00d      	beq.n	8013128 <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 801310c:	68fa      	ldr	r2, [r7, #12]
 801310e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013112:	f043 0320 	orr.w	r3, r3, #32
 8013116:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	4619      	mov	r1, r3
 8013120:	68f8      	ldr	r0, [r7, #12]
 8013122:	f7ff fca9 	bl	8012a78 <prvTCPHandleFin>
 8013126:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 8013128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801312a:	2b00      	cmp	r3, #0
 801312c:	d131      	bne.n	8013192 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 801312e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013130:	2210      	movs	r2, #16
 8013132:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d01d      	beq.n	8013176 <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801313a:	68f8      	ldr	r0, [r7, #12]
 801313c:	f7f7 f986 	bl	800a44c <uxIPHeaderSizeSocket>
 8013140:	4602      	mov	r2, r0
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	4413      	add	r3, r2
 8013146:	3314      	adds	r3, #20
 8013148:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 801314a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801314c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	b2db      	uxtb	r3, r3
 8013152:	3314      	adds	r3, #20
 8013154:	b2db      	uxtb	r3, r3
 8013156:	009b      	lsls	r3, r3, #2
 8013158:	b2da      	uxtb	r2, r3
 801315a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801315c:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013168:	b2db      	uxtb	r3, r3
 801316a:	2b00      	cmp	r3, #0
 801316c:	d003      	beq.n	8013176 <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 801316e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013174:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d10a      	bne.n	8013192 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 801317c:	683a      	ldr	r2, [r7, #0]
 801317e:	68b9      	ldr	r1, [r7, #8]
 8013180:	68f8      	ldr	r0, [r7, #12]
 8013182:	f001 f8a1 	bl	80142c8 <prvTCPPrepareSend>
 8013186:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 8013188:	697b      	ldr	r3, [r7, #20]
 801318a:	2b00      	cmp	r3, #0
 801318c:	dd01      	ble.n	8013192 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8013192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013194:	4618      	mov	r0, r3
 8013196:	3754      	adds	r7, #84	@ 0x54
 8013198:	46bd      	mov	sp, r7
 801319a:	bd90      	pop	{r4, r7, pc}
 801319c:	08026bf4 	.word	0x08026bf4
 80131a0:	08026c20 	.word	0x08026c20
 80131a4:	2000164c 	.word	0x2000164c
 80131a8:	08026c54 	.word	0x08026c54

080131ac <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 80131ac:	b590      	push	{r4, r7, lr}
 80131ae:	b08f      	sub	sp, #60	@ 0x3c
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7f7 f929 	bl	800a418 <uxIPHeaderSizePacket>
 80131c6:	4603      	mov	r3, r0
 80131c8:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80131ca:	4423      	add	r3, r4
 80131cc:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80131ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 80131d2:	2300      	movs	r3, #0
 80131d4:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80131d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	061a      	lsls	r2, r3, #24
 80131dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	021b      	lsls	r3, r3, #8
 80131e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80131e6:	431a      	orrs	r2, r3
 80131e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	0a1b      	lsrs	r3, r3, #8
 80131ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80131f2:	431a      	orrs	r2, r3
 80131f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131f6:	685b      	ldr	r3, [r3, #4]
 80131f8:	0e1b      	lsrs	r3, r3, #24
 80131fa:	4313      	orrs	r3, r2
 80131fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 80131fe:	2300      	movs	r3, #0
 8013200:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8013202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013204:	7b5b      	ldrb	r3, [r3, #13]
 8013206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013210:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 8013212:	2300      	movs	r3, #0
 8013214:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f107 0208 	add.w	r2, r7, #8
 801321e:	4611      	mov	r1, r2
 8013220:	4618      	mov	r0, r3
 8013222:	f7ff fa64 	bl	80126ee <prvCheckRxData>
 8013226:	4603      	mov	r3, r0
 8013228:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013230:	2b04      	cmp	r3, #4
 8013232:	d90c      	bls.n	801324e <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 8013234:	69fb      	ldr	r3, [r7, #28]
 8013236:	691a      	ldr	r2, [r3, #16]
 8013238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801323a:	3301      	adds	r3, #1
 801323c:	429a      	cmp	r2, r3
 801323e:	d106      	bne.n	801324e <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8013240:	687a      	ldr	r2, [r7, #4]
 8013242:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013246:	f043 0301 	orr.w	r3, r3, #1
 801324a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 801324e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	441a      	add	r2, r3
 8013254:	69fb      	ldr	r3, [r7, #28]
 8013256:	699b      	ldr	r3, [r3, #24]
 8013258:	1ad3      	subs	r3, r2, r3
 801325a:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	2b00      	cmp	r3, #0
 8013260:	dd04      	ble.n	801326c <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8013262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	441a      	add	r2, r3
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 801326c:	68b9      	ldr	r1, [r7, #8]
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	681a      	ldr	r2, [r3, #0]
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f7ff fae3 	bl	8012840 <prvStoreRxData>
 801327a:	4603      	mov	r3, r0
 801327c:	2b00      	cmp	r3, #0
 801327e:	da03      	bge.n	8013288 <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8013280:	f04f 33ff 	mov.w	r3, #4294967295
 8013284:	637b      	str	r3, [r7, #52]	@ 0x34
 8013286:	e0ae      	b.n	80133e6 <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	4619      	mov	r1, r3
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f001 fa0c 	bl	80146ac <prvSetOptions>
 8013294:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801329c:	2b04      	cmp	r3, #4
 801329e:	d10c      	bne.n	80132ba <prvTCPHandleState+0x10e>
 80132a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80132a4:	f003 031f 	and.w	r3, r3, #31
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d106      	bne.n	80132ba <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 80132ac:	4855      	ldr	r0, [pc, #340]	@ (8013404 <prvTCPHandleState+0x258>)
 80132ae:	f00f fa89 	bl	80227c4 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 80132b2:	2103      	movs	r1, #3
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f7fe fa79 	bl	80117ac <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 80132ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80132be:	f003 0301 	and.w	r3, r3, #1
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d022      	beq.n	801330c <prvTCPHandleState+0x160>
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80132cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80132d0:	b2db      	uxtb	r3, r3
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d11a      	bne.n	801330c <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 80132d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	441a      	add	r2, r3
 80132dc:	69fb      	ldr	r3, [r7, #28]
 80132de:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 80132e0:	687a      	ldr	r2, [r7, #4]
 80132e2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80132e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132ea:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80132f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132f8:	b2db      	uxtb	r3, r3
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d106      	bne.n	801330c <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8013304:	f043 0302 	orr.w	r3, r3, #2
 8013308:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013312:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 8013314:	7bfb      	ldrb	r3, [r7, #15]
 8013316:	2b0b      	cmp	r3, #11
 8013318:	d864      	bhi.n	80133e4 <prvTCPHandleState+0x238>
 801331a:	a201      	add	r2, pc, #4	@ (adr r2, 8013320 <prvTCPHandleState+0x174>)
 801331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013320:	080133e5 	.word	0x080133e5
 8013324:	080133e5 	.word	0x080133e5
 8013328:	080133b3 	.word	0x080133b3
 801332c:	08013351 	.word	0x08013351
 8013330:	080133b3 	.word	0x080133b3
 8013334:	080133c5 	.word	0x080133c5
 8013338:	080133d5 	.word	0x080133d5
 801333c:	080133d5 	.word	0x080133d5
 8013340:	080133e5 	.word	0x080133e5
 8013344:	080133e5 	.word	0x080133e5
 8013348:	080133d5 	.word	0x080133d5
 801334c:	080133e5 	.word	0x080133e5
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 8013350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013352:	6878      	ldr	r0, [r7, #4]
 8013354:	f000 fe4e 	bl	8013ff4 <prvSetSynAckOptions>
 8013358:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 801335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801335c:	2212      	movs	r2, #18
 801335e:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f7f7 f873 	bl	800a44c <uxIPHeaderSizeSocket>
 8013366:	4602      	mov	r2, r0
 8013368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801336a:	4413      	add	r3, r2
 801336c:	3314      	adds	r3, #20
 801336e:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013376:	b2db      	uxtb	r3, r3
 8013378:	3314      	adds	r3, #20
 801337a:	b2db      	uxtb	r3, r3
 801337c:	009b      	lsls	r3, r3, #2
 801337e:	b2da      	uxtb	r2, r3
 8013380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013382:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8013384:	2104      	movs	r1, #4
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f7fe fa10 	bl	80117ac <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 801338c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801338e:	1c5a      	adds	r2, r3, #1
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8013394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013396:	1c5a      	adds	r2, r3, #1
 8013398:	69fb      	ldr	r3, [r7, #28]
 801339a:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 801339c:	69fb      	ldr	r3, [r7, #28]
 801339e:	69db      	ldr	r3, [r3, #28]
 80133a0:	1c5a      	adds	r2, r3, #1
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	69db      	ldr	r3, [r3, #28]
 80133aa:	1c5a      	adds	r2, r3, #1
 80133ac:	69fb      	ldr	r3, [r7, #28]
 80133ae:	621a      	str	r2, [r3, #32]
                    break;
 80133b0:	e019      	b.n	80133e6 <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	6819      	ldr	r1, [r3, #0]
 80133b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133b8:	697a      	ldr	r2, [r7, #20]
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f7ff fc3a 	bl	8012c34 <prvHandleSynReceived>
 80133c0:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80133c2:	e010      	b.n	80133e6 <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 80133c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133c6:	697a      	ldr	r2, [r7, #20]
 80133c8:	6839      	ldr	r1, [r7, #0]
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f7ff fd80 	bl	8012ed0 <prvHandleEstablished>
 80133d0:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80133d2:	e008      	b.n	80133e6 <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	4619      	mov	r1, r3
 80133da:	6878      	ldr	r0, [r7, #4]
 80133dc:	f7ff fb4c 	bl	8012a78 <prvTCPHandleFin>
 80133e0:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80133e2:	e000      	b.n	80133e6 <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 80133e4:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 80133e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	dd06      	ble.n	80133fa <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 80133ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133ee:	697a      	ldr	r2, [r7, #20]
 80133f0:	6839      	ldr	r1, [r7, #0]
 80133f2:	6878      	ldr	r0, [r7, #4]
 80133f4:	f001 fa1a 	bl	801482c <prvSendData>
 80133f8:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 80133fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80133fc:	4618      	mov	r0, r3
 80133fe:	373c      	adds	r7, #60	@ 0x3c
 8013400:	46bd      	mov	sp, r7
 8013402:	bd90      	pop	{r4, r7, pc}
 8013404:	08026c8c 	.word	0x08026c8c

08013408 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 8013412:	2300      	movs	r3, #0
 8013414:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8013416:	6838      	ldr	r0, [r7, #0]
 8013418:	f7f6 fffe 	bl	800a418 <uxIPHeaderSizePacket>
 801341c:	4603      	mov	r3, r0
 801341e:	2b14      	cmp	r3, #20
 8013420:	d002      	beq.n	8013428 <prvHandleListen+0x20>
 8013422:	2b28      	cmp	r3, #40	@ 0x28
 8013424:	d006      	beq.n	8013434 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 8013426:	e00b      	b.n	8013440 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 8013428:	6839      	ldr	r1, [r7, #0]
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f000 f8ee 	bl	801360c <prvHandleListen_IPV4>
 8013430:	60f8      	str	r0, [r7, #12]
                    break;
 8013432:	e005      	b.n	8013440 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 8013434:	6839      	ldr	r1, [r7, #0]
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f000 fa10 	bl	801385c <prvHandleListen_IPV6>
 801343c:	60f8      	str	r0, [r7, #12]
                    break;
 801343e:	bf00      	nop
        }

        return pxNewSocket;
 8013440:	68fb      	ldr	r3, [r7, #12]
    }
 8013442:	4618      	mov	r0, r3
 8013444:	3710      	adds	r7, #16
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}
	...

0801344c <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 801344c:	b590      	push	{r4, r7, lr}
 801344e:	b08f      	sub	sp, #60	@ 0x3c
 8013450:	af04      	add	r7, sp, #16
 8013452:	6078      	str	r0, [r7, #4]
 8013454:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	6a1a      	ldr	r2, [r3, #32]
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d009      	beq.n	8013502 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134fa:	f043 0205 	orr.w	r2, r3, #5
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 8013502:	f107 030c 	add.w	r3, r7, #12
 8013506:	4619      	mov	r1, r3
 8013508:	6838      	ldr	r0, [r7, #0]
 801350a:	f7fc fa47 	bl	800f99c <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 801350e:	687a      	ldr	r2, [r7, #4]
 8013510:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013514:	f043 0304 	orr.w	r3, r3, #4
 8013518:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	683a      	ldr	r2, [r7, #0]
 8013520:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8013528:	3301      	adds	r3, #1
 801352a:	b29a      	uxth	r2, r3
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013536:	2b00      	cmp	r3, #0
 8013538:	d102      	bne.n	8013540 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013544:	4619      	mov	r1, r3
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801354c:	4618      	mov	r0, r3
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013554:	461c      	mov	r4, r3
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801355c:	2b01      	cmp	r3, #1
 801355e:	d101      	bne.n	8013564 <prvTCPSocketCopy+0x118>
 8013560:	4a17      	ldr	r2, [pc, #92]	@ (80135c0 <prvTCPSocketCopy+0x174>)
 8013562:	e000      	b.n	8013566 <prvTCPSocketCopy+0x11a>
 8013564:	4a17      	ldr	r2, [pc, #92]	@ (80135c4 <prvTCPSocketCopy+0x178>)
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d002      	beq.n	8013572 <prvTCPSocketCopy+0x126>
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013570:	e000      	b.n	8013574 <prvTCPSocketCopy+0x128>
 8013572:	2300      	movs	r3, #0
 8013574:	9303      	str	r3, [sp, #12]
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	9302      	str	r3, [sp, #8]
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	9301      	str	r3, [sp, #4]
 801357e:	9200      	str	r2, [sp, #0]
 8013580:	4623      	mov	r3, r4
 8013582:	4602      	mov	r2, r0
 8013584:	4810      	ldr	r0, [pc, #64]	@ (80135c8 <prvTCPSocketCopy+0x17c>)
 8013586:	f00f f91d 	bl	80227c4 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 801358a:	f107 010c 	add.w	r1, r7, #12
 801358e:	2301      	movs	r3, #1
 8013590:	2218      	movs	r2, #24
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f7fb fbae 	bl	800ecf4 <vSocketBind>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d008      	beq.n	80135b0 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 801359e:	480b      	ldr	r0, [pc, #44]	@ (80135cc <prvTCPSocketCopy+0x180>)
 80135a0:	f00f f910 	bl	80227c4 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f7fb fc59 	bl	800ee5c <vSocketClose>
            xResult = pdFALSE;
 80135aa:	2300      	movs	r3, #0
 80135ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80135ae:	e001      	b.n	80135b4 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 80135b0:	2301      	movs	r3, #1
 80135b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 80135b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80135b6:	4618      	mov	r0, r3
 80135b8:	372c      	adds	r7, #44	@ 0x2c
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd90      	pop	{r4, r7, pc}
 80135be:	bf00      	nop
 80135c0:	08026ccc 	.word	0x08026ccc
 80135c4:	08026cd0 	.word	0x08026cd0
 80135c8:	08026cd4 	.word	0x08026cd4
 80135cc:	08026d18 	.word	0x08026d18

080135d0 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 80135d0:	b480      	push	{r7}
 80135d2:	b085      	sub	sp, #20
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	db02      	blt.n	80135e8 <FreeRTOS_GetTCPStateName+0x18>
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2b0c      	cmp	r3, #12
 80135e6:	dd04      	ble.n	80135f2 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 80135e8:	230d      	movs	r3, #13
 80135ea:	60fb      	str	r3, [r7, #12]
                xIndex--;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	3b01      	subs	r3, #1
 80135f0:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 80135f2:	4a05      	ldr	r2, [pc, #20]	@ (8013608 <FreeRTOS_GetTCPStateName+0x38>)
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 80135fa:	4618      	mov	r0, r3
 80135fc:	3714      	adds	r7, #20
 80135fe:	46bd      	mov	sp, r7
 8013600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013604:	4770      	bx	lr
 8013606:	bf00      	nop
 8013608:	08027fec 	.word	0x08027fec

0801360c <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 801360c:	b590      	push	{r4, r7, lr}
 801360e:	b08f      	sub	sp, #60	@ 0x3c
 8013610:	af02      	add	r7, sp, #8
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 8013616:	2300      	movs	r3, #0
 8013618:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 801361a:	2300      	movs	r3, #0
 801361c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 801361e:	2300      	movs	r3, #0
 8013620:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 8013622:	2300      	movs	r3, #0
 8013624:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 8013626:	2300      	movs	r3, #0
 8013628:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d008      	beq.n	8013642 <prvHandleListen_IPV4+0x36>
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d005      	beq.n	8013642 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8013636:	683b      	ldr	r3, [r7, #0]
 8013638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013640:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8013642:	6a3b      	ldr	r3, [r7, #32]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d015      	beq.n	8013674 <prvHandleListen_IPV4+0x68>
 8013648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801364a:	f8d3 201e 	ldr.w	r2, [r3, #30]
 801364e:	6a3b      	ldr	r3, [r7, #32]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	429a      	cmp	r2, r3
 8013654:	d10e      	bne.n	8013674 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8013656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013658:	f8d3 001e 	ldr.w	r0, [r3, #30]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8013660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013662:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 8013666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013668:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801366a:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 801366c:	f7ee f9ec 	bl	8001a48 <ulApplicationGetNextSequenceNumber>
 8013670:	6278      	str	r0, [r7, #36]	@ 0x24
 8013672:	e001      	b.n	8013678 <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8013674:	2300      	movs	r3, #0
 8013676:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 8013678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801367a:	2b00      	cmp	r3, #0
 801367c:	d059      	beq.n	8013732 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013684:	f003 0308 	and.w	r3, r3, #8
 8013688:	b2db      	uxtb	r3, r3
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00c      	beq.n	80136a8 <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8013692:	687a      	ldr	r2, [r7, #4]
 8013694:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013698:	f043 0304 	orr.w	r3, r3, #4
 801369c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80136a6:	e044      	b.n	8013732 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 80136a8:	2300      	movs	r3, #0
 80136aa:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d31b      	bcc.n	80136f4 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80136c0:	4619      	mov	r1, r3
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80136c8:	461a      	mov	r2, r3
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80136d0:	4618      	mov	r0, r3
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80136d8:	2b01      	cmp	r3, #1
 80136da:	d101      	bne.n	80136e0 <prvHandleListen_IPV4+0xd4>
 80136dc:	4b5b      	ldr	r3, [pc, #364]	@ (801384c <prvHandleListen_IPV4+0x240>)
 80136de:	e000      	b.n	80136e2 <prvHandleListen_IPV4+0xd6>
 80136e0:	4b5b      	ldr	r3, [pc, #364]	@ (8013850 <prvHandleListen_IPV4+0x244>)
 80136e2:	9300      	str	r3, [sp, #0]
 80136e4:	4603      	mov	r3, r0
 80136e6:	485b      	ldr	r0, [pc, #364]	@ (8013854 <prvHandleListen_IPV4+0x248>)
 80136e8:	f00f f86c 	bl	80227c4 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 80136ec:	6838      	ldr	r0, [r7, #0]
 80136ee:	f001 f9d1 	bl	8014a94 <prvTCPSendReset>
 80136f2:	e01e      	b.n	8013732 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80136f4:	2206      	movs	r2, #6
 80136f6:	2101      	movs	r1, #1
 80136f8:	2002      	movs	r0, #2
 80136fa:	f7fa ffa1 	bl	800e640 <FreeRTOS_socket>
 80136fe:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d003      	beq.n	801370e <prvHandleListen_IPV4+0x102>
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801370c:	d106      	bne.n	801371c <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 801370e:	4852      	ldr	r0, [pc, #328]	@ (8013858 <prvHandleListen_IPV4+0x24c>)
 8013710:	f00f f858 	bl	80227c4 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8013714:	6838      	ldr	r0, [r7, #0]
 8013716:	f001 f9bd 	bl	8014a94 <prvTCPSendReset>
 801371a:	e00a      	b.n	8013732 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 801371c:	6879      	ldr	r1, [r7, #4]
 801371e:	6978      	ldr	r0, [r7, #20]
 8013720:	f7ff fe94 	bl	801344c <prvTCPSocketCopy>
 8013724:	4603      	mov	r3, r0
 8013726:	2b00      	cmp	r3, #0
 8013728:	d003      	beq.n	8013732 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 801372e:	2301      	movs	r3, #1
 8013730:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8013732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013734:	2b00      	cmp	r3, #0
 8013736:	f000 8083 	beq.w	8013840 <prvHandleListen_IPV4+0x234>
 801373a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801373c:	2b00      	cmp	r3, #0
 801373e:	d07f      	beq.n	8013840 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013744:	6838      	ldr	r0, [r7, #0]
 8013746:	f7f6 fe67 	bl	800a418 <uxIPHeaderSizePacket>
 801374a:	4603      	mov	r3, r0
 801374c:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 801374e:	4423      	add	r3, r4
 8013750:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013758:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 801375a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801375c:	7a13      	ldrb	r3, [r2, #8]
 801375e:	f36f 0300 	bfc	r3, #0, #1
 8013762:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8013764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013766:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8013768:	b29b      	uxth	r3, r3
 801376a:	021b      	lsls	r3, r3, #8
 801376c:	b21a      	sxth	r2, r3
 801376e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013770:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8013772:	b29b      	uxth	r3, r3
 8013774:	0a1b      	lsrs	r3, r3, #8
 8013776:	b29b      	uxth	r3, r3
 8013778:	b21b      	sxth	r3, r3
 801377a:	4313      	orrs	r3, r2
 801377c:	b21b      	sxth	r3, r3
 801377e:	b29a      	uxth	r2, r3
 8013780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013782:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8013786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013788:	f8d3 301a 	ldr.w	r3, [r3, #26]
 801378c:	061a      	lsls	r2, r3, #24
 801378e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013790:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013794:	021b      	lsls	r3, r3, #8
 8013796:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801379a:	431a      	orrs	r2, r3
 801379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801379e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80137a2:	0a1b      	lsrs	r3, r3, #8
 80137a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80137a8:	431a      	orrs	r2, r3
 80137aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137ac:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80137b0:	0e1b      	lsrs	r3, r3, #24
 80137b2:	431a      	orrs	r2, r3
 80137b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137b6:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80137b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80137bc:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	061a      	lsls	r2, r3, #24
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	685b      	ldr	r3, [r3, #4]
 80137ca:	021b      	lsls	r3, r3, #8
 80137cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80137d0:	431a      	orrs	r2, r3
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	0a1b      	lsrs	r3, r3, #8
 80137d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80137dc:	431a      	orrs	r2, r3
 80137de:	693b      	ldr	r3, [r7, #16]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	0e1b      	lsrs	r3, r3, #24
 80137e4:	431a      	orrs	r2, r3
 80137e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137e8:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 80137ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80137ee:	f002 f877 	bl	80158e0 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 80137f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80137f4:	f000 fb66 	bl	8013ec4 <prvTCPCreateWindow>
 80137f8:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	d008      	beq.n	8013812 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	2b01      	cmp	r3, #1
 8013804:	d102      	bne.n	801380c <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 8013806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013808:	f7fb fb28 	bl	800ee5c <vSocketClose>
                }

                pxReturn = NULL;
 801380c:	2300      	movs	r3, #0
 801380e:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8013810:	e016      	b.n	8013840 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8013812:	2103      	movs	r1, #3
 8013814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013816:	f7fd ffc9 	bl	80117ac <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801381e:	2b5a      	cmp	r3, #90	@ 0x5a
 8013820:	d902      	bls.n	8013828 <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8013822:	235a      	movs	r3, #90	@ 0x5a
 8013824:	61bb      	str	r3, [r7, #24]
 8013826:	e002      	b.n	801382e <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801382c:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 801382e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013830:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8013838:	69ba      	ldr	r2, [r7, #24]
 801383a:	4619      	mov	r1, r3
 801383c:	f00f f9de 	bl	8022bfc <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8013840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8013842:	4618      	mov	r0, r3
 8013844:	3734      	adds	r7, #52	@ 0x34
 8013846:	46bd      	mov	sp, r7
 8013848:	bd90      	pop	{r4, r7, pc}
 801384a:	bf00      	nop
 801384c:	08026dc0 	.word	0x08026dc0
 8013850:	08026dc4 	.word	0x08026dc4
 8013854:	08026dc8 	.word	0x08026dc8
 8013858:	08026df8 	.word	0x08026df8

0801385c <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 801385c:	b590      	push	{r4, r7, lr}
 801385e:	b08f      	sub	sp, #60	@ 0x3c
 8013860:	af02      	add	r7, sp, #8
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8013866:	2300      	movs	r3, #0
 8013868:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 801386a:	2300      	movs	r3, #0
 801386c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 801386e:	2300      	movs	r3, #0
 8013870:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 8013872:	2300      	movs	r3, #0
 8013874:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 8013876:	2300      	movs	r3, #0
 8013878:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d024      	beq.n	80138ca <prvHandleListen_IPV6+0x6e>
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d021      	beq.n	80138ca <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801388a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013890:	2b00      	cmp	r3, #0
 8013892:	d103      	bne.n	801389c <prvHandleListen_IPV6+0x40>
 8013894:	215d      	movs	r1, #93	@ 0x5d
 8013896:	487b      	ldr	r0, [pc, #492]	@ (8013a84 <prvHandleListen_IPV6+0x228>)
 8013898:	f7ee f8b6 	bl	8001a08 <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 801389c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801389e:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80138a6:	3338      	adds	r3, #56	@ 0x38
 80138a8:	2210      	movs	r2, #16
 80138aa:	4619      	mov	r1, r3
 80138ac:	f010 f93b 	bl	8023b26 <memcmp>
 80138b0:	4603      	mov	r3, r0
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d109      	bne.n	80138ca <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 80138b6:	f107 0308 	add.w	r3, r7, #8
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7ee f96e 	bl	8001b9c <xApplicationGetRandomNumber>
 80138c0:	4603      	mov	r3, r0
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	d101      	bne.n	80138ca <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 80138c6:	2301      	movs	r3, #1
 80138c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 80138ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d059      	beq.n	8013984 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80138d6:	f003 0308 	and.w	r3, r3, #8
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d00c      	beq.n	80138fa <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80138ea:	f043 0304 	orr.w	r3, r3, #4
 80138ee:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	687a      	ldr	r2, [r7, #4]
 80138f6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80138f8:	e044      	b.n	8013984 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 80138fa:	2300      	movs	r3, #0
 80138fc:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801390a:	429a      	cmp	r2, r3
 801390c:	d31b      	bcc.n	8013946 <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013912:	4619      	mov	r1, r3
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801391a:	461a      	mov	r2, r3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013922:	4618      	mov	r0, r3
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801392a:	2b01      	cmp	r3, #1
 801392c:	d101      	bne.n	8013932 <prvHandleListen_IPV6+0xd6>
 801392e:	4b56      	ldr	r3, [pc, #344]	@ (8013a88 <prvHandleListen_IPV6+0x22c>)
 8013930:	e000      	b.n	8013934 <prvHandleListen_IPV6+0xd8>
 8013932:	4b56      	ldr	r3, [pc, #344]	@ (8013a8c <prvHandleListen_IPV6+0x230>)
 8013934:	9300      	str	r3, [sp, #0]
 8013936:	4603      	mov	r3, r0
 8013938:	4855      	ldr	r0, [pc, #340]	@ (8013a90 <prvHandleListen_IPV6+0x234>)
 801393a:	f00e ff43 	bl	80227c4 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 801393e:	6838      	ldr	r0, [r7, #0]
 8013940:	f001 f8a8 	bl	8014a94 <prvTCPSendReset>
 8013944:	e01e      	b.n	8013984 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8013946:	2206      	movs	r2, #6
 8013948:	2101      	movs	r1, #1
 801394a:	200a      	movs	r0, #10
 801394c:	f7fa fe78 	bl	800e640 <FreeRTOS_socket>
 8013950:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8013952:	69bb      	ldr	r3, [r7, #24]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d003      	beq.n	8013960 <prvHandleListen_IPV6+0x104>
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801395e:	d106      	bne.n	801396e <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8013960:	484c      	ldr	r0, [pc, #304]	@ (8013a94 <prvHandleListen_IPV6+0x238>)
 8013962:	f00e ff2f 	bl	80227c4 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8013966:	6838      	ldr	r0, [r7, #0]
 8013968:	f001 f894 	bl	8014a94 <prvTCPSendReset>
 801396c:	e00a      	b.n	8013984 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 801396e:	6879      	ldr	r1, [r7, #4]
 8013970:	69b8      	ldr	r0, [r7, #24]
 8013972:	f7ff fd6b 	bl	801344c <prvTCPSocketCopy>
 8013976:	4603      	mov	r3, r0
 8013978:	2b00      	cmp	r3, #0
 801397a:	d003      	beq.n	8013984 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 801397c:	69bb      	ldr	r3, [r7, #24]
 801397e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8013980:	2301      	movs	r3, #1
 8013982:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 8013984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013986:	2b00      	cmp	r3, #0
 8013988:	d076      	beq.n	8013a78 <prvHandleListen_IPV6+0x21c>
 801398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801398c:	2b00      	cmp	r3, #0
 801398e:	d073      	beq.n	8013a78 <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013994:	6838      	ldr	r0, [r7, #0]
 8013996:	f7f6 fd3f 	bl	800a418 <uxIPHeaderSizePacket>
 801399a:	4603      	mov	r3, r0
 801399c:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 801399e:	4423      	add	r3, r4
 80139a0:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80139a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139a8:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 80139aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80139ac:	7a13      	ldrb	r3, [r2, #8]
 80139ae:	f043 0301 	orr.w	r3, r3, #1
 80139b2:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139b8:	330e      	adds	r3, #14
 80139ba:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 80139bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80139c0:	b29b      	uxth	r3, r3
 80139c2:	021b      	lsls	r3, r3, #8
 80139c4:	b21a      	sxth	r2, r3
 80139c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80139ca:	b29b      	uxth	r3, r3
 80139cc:	0a1b      	lsrs	r3, r3, #8
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	b21b      	sxth	r3, r3
 80139d2:	4313      	orrs	r3, r2
 80139d4:	b21b      	sxth	r3, r3
 80139d6:	b29a      	uxth	r2, r3
 80139d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139da:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80139de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139e0:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	3308      	adds	r3, #8
 80139e8:	2210      	movs	r2, #16
 80139ea:	4619      	mov	r1, r3
 80139ec:	f00f f906 	bl	8022bfc <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80139f0:	68ba      	ldr	r2, [r7, #8]
 80139f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139f4:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	061a      	lsls	r2, r3, #24
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	021b      	lsls	r3, r3, #8
 8013a04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013a08:	431a      	orrs	r2, r3
 8013a0a:	697b      	ldr	r3, [r7, #20]
 8013a0c:	685b      	ldr	r3, [r3, #4]
 8013a0e:	0a1b      	lsrs	r3, r3, #8
 8013a10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013a14:	431a      	orrs	r2, r3
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	685b      	ldr	r3, [r3, #4]
 8013a1a:	0e1b      	lsrs	r3, r3, #24
 8013a1c:	431a      	orrs	r2, r3
 8013a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a20:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8013a24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a26:	f001 ff5b 	bl	80158e0 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8013a2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a2c:	f000 fa4a 	bl	8013ec4 <prvTCPCreateWindow>
 8013a30:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	2b01      	cmp	r3, #1
 8013a36:	d008      	beq.n	8013a4a <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8013a38:	6a3b      	ldr	r3, [r7, #32]
 8013a3a:	2b01      	cmp	r3, #1
 8013a3c:	d102      	bne.n	8013a44 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 8013a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a40:	f7fb fa0c 	bl	800ee5c <vSocketClose>
                }

                pxReturn = NULL;
 8013a44:	2300      	movs	r3, #0
 8013a46:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8013a48:	e016      	b.n	8013a78 <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8013a4a:	2103      	movs	r1, #3
 8013a4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a4e:	f7fd fead 	bl	80117ac <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a56:	2b5a      	cmp	r3, #90	@ 0x5a
 8013a58:	d902      	bls.n	8013a60 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8013a5a:	235a      	movs	r3, #90	@ 0x5a
 8013a5c:	61fb      	str	r3, [r7, #28]
 8013a5e:	e002      	b.n	8013a66 <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a64:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8013a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a68:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8013a70:	69fa      	ldr	r2, [r7, #28]
 8013a72:	4619      	mov	r1, r3
 8013a74:	f00f f8c2 	bl	8022bfc <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8013a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3734      	adds	r7, #52	@ 0x34
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd90      	pop	{r4, r7, pc}
 8013a82:	bf00      	nop
 8013a84:	08026e18 	.word	0x08026e18
 8013a88:	08026e58 	.word	0x08026e58
 8013a8c:	08026e5c 	.word	0x08026e5c
 8013a90:	08026e60 	.word	0x08026e60
 8013a94:	08026e90 	.word	0x08026e90

08013a98 <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b084      	sub	sp, #16
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013aaa:	f003 0308 	and.w	r3, r3, #8
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d107      	bne.n	8013ac4 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f000 fa51 	bl	8013f5c <prvTCPPrepareConnect>
 8013aba:	4603      	mov	r3, r0
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	d001      	beq.n	8013ac4 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
    }
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3710      	adds	r7, #16
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
	...

08013ad0 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b088      	sub	sp, #32
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8013adc:	2300      	movs	r3, #0
 8013ade:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013ae6:	2b02      	cmp	r3, #2
 8013ae8:	d010      	beq.n	8013b0c <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 8013aea:	2300      	movs	r3, #0
 8013aec:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8013aee:	f107 030c 	add.w	r3, r7, #12
 8013af2:	4619      	mov	r1, r3
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f000 f859 	bl	8013bac <prvTCPSendRepeated>
 8013afa:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d04d      	beq.n	8013b9e <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	4618      	mov	r0, r3
 8013b06:	f003 ffb5 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
 8013b0a:	e048      	b.n	8013b9e <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013b12:	2b02      	cmp	r3, #2
 8013b14:	d90d      	bls.n	8013b32 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013b20:	461a      	mov	r2, r3
 8013b22:	4821      	ldr	r0, [pc, #132]	@ (8013ba8 <prvTCPSendPacket+0xd8>)
 8013b24:	f00e fe4e 	bl	80227c4 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8013b28:	2108      	movs	r1, #8
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7fd fe3e 	bl	80117ac <vTCPStateChange>
 8013b30:	e035      	b.n	8013b9e <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8013b32:	6878      	ldr	r0, [r7, #4]
 8013b34:	f7ff ffb0 	bl	8013a98 <prvTCPMakeSurePrepared>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	2b01      	cmp	r3, #1
 8013b3c:	d12f      	bne.n	8013b9e <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	f7f6 fc84 	bl	800a44c <uxIPHeaderSizeSocket>
 8013b44:	4603      	mov	r3, r0
 8013b46:	330e      	adds	r3, #14
 8013b48:	33a0      	adds	r3, #160	@ 0xa0
 8013b4a:	687a      	ldr	r2, [r7, #4]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	330a      	adds	r3, #10
 8013b50:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	4619      	mov	r1, r3
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f000 fa4c 	bl	8013ff4 <prvSetSynAckOptions>
 8013b5c:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f7f6 fc74 	bl	800a44c <uxIPHeaderSizeSocket>
 8013b64:	4602      	mov	r2, r0
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	4413      	add	r3, r2
 8013b6a:	3314      	adds	r3, #20
 8013b6c:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 8013b6e:	69bb      	ldr	r3, [r7, #24]
 8013b70:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	b2db      	uxtb	r3, r3
 8013b76:	3314      	adds	r3, #20
 8013b78:	b2db      	uxtb	r3, r3
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	b2da      	uxtb	r2, r3
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013b88:	3301      	adds	r3, #1
 8013b8a:	b2da      	uxtb	r2, r3
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8013b92:	69fa      	ldr	r2, [r7, #28]
 8013b94:	2300      	movs	r3, #0
 8013b96:	2100      	movs	r1, #0
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f000 f837 	bl	8013c0c <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013b9e:	69fb      	ldr	r3, [r7, #28]
    }
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	3720      	adds	r7, #32
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	08026eb0 	.word	0x08026eb0

08013bac <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b086      	sub	sp, #24
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	617b      	str	r3, [r7, #20]
 8013bc2:	e019      	b.n	8013bf8 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8013bc4:	68fa      	ldr	r2, [r7, #12]
 8013bc6:	6839      	ldr	r1, [r7, #0]
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f000 fb7d 	bl	80142c8 <prvTCPPrepareSend>
 8013bce:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	dd14      	ble.n	8013c00 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8013bd6:	683b      	ldr	r3, [r7, #0]
 8013bd8:	6819      	ldr	r1, [r3, #0]
 8013bda:	68ba      	ldr	r2, [r7, #8]
 8013bdc:	2301      	movs	r3, #1
 8013bde:	6878      	ldr	r0, [r7, #4]
 8013be0:	f000 f814 	bl	8013c0c <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	2200      	movs	r2, #0
 8013be8:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 8013bea:	693a      	ldr	r2, [r7, #16]
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	4413      	add	r3, r2
 8013bf0:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	3301      	adds	r3, #1
 8013bf6:	617b      	str	r3, [r7, #20]
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	2b07      	cmp	r3, #7
 8013bfc:	d9e2      	bls.n	8013bc4 <prvTCPSendRepeated+0x18>
 8013bfe:	e000      	b.n	8013c02 <prvTCPSendRepeated+0x56>
                break;
 8013c00:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013c02:	693b      	ldr	r3, [r7, #16]
    }
 8013c04:	4618      	mov	r0, r3
 8013c06:	3718      	adds	r7, #24
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b086      	sub	sp, #24
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	60f8      	str	r0, [r7, #12]
 8013c14:	60b9      	str	r1, [r7, #8]
 8013c16:	607a      	str	r2, [r7, #4]
 8013c18:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8013c1e:	2300      	movs	r3, #0
 8013c20:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d008      	beq.n	8013c3a <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 8013c28:	6938      	ldr	r0, [r7, #16]
 8013c2a:	f7f6 fbf5 	bl	800a418 <uxIPHeaderSizePacket>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b28      	cmp	r3, #40	@ 0x28
 8013c32:	d113      	bne.n	8013c5c <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013c34:	2301      	movs	r3, #1
 8013c36:	617b      	str	r3, [r7, #20]
 8013c38:	e010      	b.n	8013c5c <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d008      	beq.n	8013c52 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8013c40:	68f8      	ldr	r0, [r7, #12]
 8013c42:	f7f6 fc03 	bl	800a44c <uxIPHeaderSizeSocket>
 8013c46:	4603      	mov	r3, r0
 8013c48:	2b28      	cmp	r3, #40	@ 0x28
 8013c4a:	d107      	bne.n	8013c5c <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	617b      	str	r3, [r7, #20]
 8013c50:	e004      	b.n	8013c5c <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8013c52:	f240 1119 	movw	r1, #281	@ 0x119
 8013c56:	480c      	ldr	r0, [pc, #48]	@ (8013c88 <prvTCPReturnPacket+0x7c>)
 8013c58:	f7ed fed6 	bl	8001a08 <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	2b01      	cmp	r3, #1
 8013c60:	d105      	bne.n	8013c6e <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	68b9      	ldr	r1, [r7, #8]
 8013c68:	68f8      	ldr	r0, [r7, #12]
 8013c6a:	f001 fa61 	bl	8015130 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 8013c6e:	697b      	ldr	r3, [r7, #20]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d105      	bne.n	8013c80 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	687a      	ldr	r2, [r7, #4]
 8013c78:	68b9      	ldr	r1, [r7, #8]
 8013c7a:	68f8      	ldr	r0, [r7, #12]
 8013c7c:	f000 ff18 	bl	8014ab0 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 8013c80:	bf00      	nop
 8013c82:	3718      	adds	r7, #24
 8013c84:	46bd      	mov	sp, r7
 8013c86:	bd80      	pop	{r7, pc}
 8013c88:	08026ecc 	.word	0x08026ecc

08013c8c <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b08a      	sub	sp, #40	@ 0x28
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013c9e:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013ca8:	4413      	add	r3, r2
 8013caa:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d007      	beq.n	8013cc6 <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7fd fa9f 	bl	8011200 <uxStreamBufferFrontSpace>
 8013cc2:	6278      	str	r0, [r7, #36]	@ 0x24
 8013cc4:	e003      	b.n	8013cce <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013ccc:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8013cce:	69bb      	ldr	r3, [r7, #24]
 8013cd0:	685b      	ldr	r3, [r3, #4]
 8013cd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7f7 f8ed 	bl	800aeb4 <FreeRTOS_min_uint32>
 8013cda:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013ce2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013ce6:	b2db      	uxtb	r3, r3
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d107      	bne.n	8013cfc <prvTCPReturn_CheckTCPWindow+0x70>
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8013cf2:	f003 0304 	and.w	r3, r3, #4
 8013cf6:	b2db      	uxtb	r3, r3
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d001      	beq.n	8013d00 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013d06:	461a      	mov	r2, r3
 8013d08:	6a3b      	ldr	r3, [r7, #32]
 8013d0a:	4293      	cmp	r3, r2
 8013d0c:	d20a      	bcs.n	8013d24 <prvTCPReturn_CheckTCPWindow+0x98>
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013d14:	461a      	mov	r2, r3
 8013d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d18:	4293      	cmp	r3, r2
 8013d1a:	d303      	bcc.n	8013d24 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013d22:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	6a3b      	ldr	r3, [r7, #32]
 8013d2e:	40d3      	lsrs	r3, r2
 8013d30:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8013d32:	69fb      	ldr	r3, [r7, #28]
 8013d34:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8013d38:	4293      	cmp	r3, r2
 8013d3a:	d902      	bls.n	8013d42 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8013d3c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8013d40:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8013d42:	69fb      	ldr	r3, [r7, #28]
 8013d44:	b29b      	uxth	r3, r3
 8013d46:	021b      	lsls	r3, r3, #8
 8013d48:	b21a      	sxth	r2, r3
 8013d4a:	69fb      	ldr	r3, [r7, #28]
 8013d4c:	b29b      	uxth	r3, r3
 8013d4e:	0a1b      	lsrs	r3, r3, #8
 8013d50:	b29b      	uxth	r3, r3
 8013d52:	b21b      	sxth	r3, r3
 8013d54:	4313      	orrs	r3, r2
 8013d56:	b21b      	sxth	r3, r3
 8013d58:	b29a      	uxth	r2, r3
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8013d5e:	68fa      	ldr	r2, [r7, #12]
 8013d60:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013d64:	f36f 0300 	bfc	r3, #0, #1
 8013d68:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8013d6c:	69bb      	ldr	r3, [r7, #24]
 8013d6e:	691a      	ldr	r2, [r3, #16]
 8013d70:	6a3b      	ldr	r3, [r7, #32]
 8013d72:	441a      	add	r2, r3
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 8013d78:	bf00      	nop
 8013d7a:	3728      	adds	r7, #40	@ 0x28
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b088      	sub	sp, #32
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	607a      	str	r2, [r7, #4]
 8013d8c:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013d94:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013d9e:	4413      	add	r3, r2
 8013da0:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013da8:	f003 0302 	and.w	r3, r3, #2
 8013dac:	b2db      	uxtb	r3, r3
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d029      	beq.n	8013e06 <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8013db2:	68fa      	ldr	r2, [r7, #12]
 8013db4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013db8:	f36f 0341 	bfc	r3, #1, #1
 8013dbc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8013dc0:	68fa      	ldr	r2, [r7, #12]
 8013dc2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013dc6:	f043 0304 	orr.w	r3, r3, #4
 8013dca:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013dd4:	1e5a      	subs	r2, r3, #1
 8013dd6:	69bb      	ldr	r3, [r7, #24]
 8013dd8:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013dda:	69bb      	ldr	r3, [r7, #24]
 8013ddc:	685b      	ldr	r3, [r3, #4]
 8013dde:	061a      	lsls	r2, r3, #24
 8013de0:	69bb      	ldr	r3, [r7, #24]
 8013de2:	685b      	ldr	r3, [r3, #4]
 8013de4:	021b      	lsls	r3, r3, #8
 8013de6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013dea:	431a      	orrs	r2, r3
 8013dec:	69bb      	ldr	r3, [r7, #24]
 8013dee:	685b      	ldr	r3, [r3, #4]
 8013df0:	0a1b      	lsrs	r3, r3, #8
 8013df2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013df6:	431a      	orrs	r2, r3
 8013df8:	69bb      	ldr	r3, [r7, #24]
 8013dfa:	685b      	ldr	r3, [r3, #4]
 8013dfc:	0e1b      	lsrs	r3, r3, #24
 8013dfe:	431a      	orrs	r2, r3
 8013e00:	69bb      	ldr	r3, [r7, #24]
 8013e02:	605a      	str	r2, [r3, #4]
 8013e04:	e043      	b.n	8013e8e <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013e0c:	061a      	lsls	r2, r3, #24
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013e14:	021b      	lsls	r3, r3, #8
 8013e16:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013e1a:	431a      	orrs	r2, r3
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013e22:	0a1b      	lsrs	r3, r3, #8
 8013e24:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013e28:	431a      	orrs	r2, r3
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013e30:	0e1b      	lsrs	r3, r3, #24
 8013e32:	431a      	orrs	r2, r3
 8013e34:	69bb      	ldr	r3, [r7, #24]
 8013e36:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 8013e38:	69bb      	ldr	r3, [r7, #24]
 8013e3a:	7b5b      	ldrb	r3, [r3, #13]
 8013e3c:	f003 0301 	and.w	r3, r3, #1
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d024      	beq.n	8013e8e <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8013e44:	68f8      	ldr	r0, [r7, #12]
 8013e46:	f7f6 fb01 	bl	800a44c <uxIPHeaderSizeSocket>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	1a9b      	subs	r3, r3, r2
 8013e50:	3b14      	subs	r3, #20
 8013e52:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8013e54:	69fb      	ldr	r3, [r7, #28]
 8013e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	441a      	add	r2, r3
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d014      	beq.n	8013e8e <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8013e64:	69bb      	ldr	r3, [r7, #24]
 8013e66:	7b5b      	ldrb	r3, [r3, #13]
 8013e68:	f023 0301 	bic.w	r3, r3, #1
 8013e6c:	b2da      	uxtb	r2, r3
 8013e6e:	69bb      	ldr	r3, [r7, #24]
 8013e70:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 8013e72:	69fb      	ldr	r3, [r7, #28]
 8013e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e76:	69fb      	ldr	r3, [r7, #28]
 8013e78:	69db      	ldr	r3, [r3, #28]
 8013e7a:	1ad1      	subs	r1, r2, r3
 8013e7c:	69fb      	ldr	r3, [r7, #28]
 8013e7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e80:	69fb      	ldr	r3, [r7, #28]
 8013e82:	69db      	ldr	r3, [r3, #28]
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	697a      	ldr	r2, [r7, #20]
 8013e88:	480d      	ldr	r0, [pc, #52]	@ (8013ec0 <prvTCPReturn_SetSequenceNumber+0x140>)
 8013e8a:	f00e fc9b 	bl	80227c4 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8013e8e:	69fb      	ldr	r3, [r7, #28]
 8013e90:	691b      	ldr	r3, [r3, #16]
 8013e92:	061a      	lsls	r2, r3, #24
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	691b      	ldr	r3, [r3, #16]
 8013e98:	021b      	lsls	r3, r3, #8
 8013e9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013e9e:	431a      	orrs	r2, r3
 8013ea0:	69fb      	ldr	r3, [r7, #28]
 8013ea2:	691b      	ldr	r3, [r3, #16]
 8013ea4:	0a1b      	lsrs	r3, r3, #8
 8013ea6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013eaa:	431a      	orrs	r2, r3
 8013eac:	69fb      	ldr	r3, [r7, #28]
 8013eae:	691b      	ldr	r3, [r3, #16]
 8013eb0:	0e1b      	lsrs	r3, r3, #24
 8013eb2:	431a      	orrs	r2, r3
 8013eb4:	69bb      	ldr	r3, [r7, #24]
 8013eb6:	609a      	str	r2, [r3, #8]
    }
 8013eb8:	bf00      	nop
 8013eba:	3720      	adds	r7, #32
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}
 8013ec0:	08026f08 	.word	0x08026f08

08013ec4 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8013ec4:	b5b0      	push	{r4, r5, r7, lr}
 8013ec6:	b088      	sub	sp, #32
 8013ec8:	af02      	add	r7, sp, #8
 8013eca:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013ed2:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8013eda:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 8013edc:	4b1d      	ldr	r3, [pc, #116]	@ (8013f54 <prvTCPCreateWindow+0x90>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d014      	beq.n	8013f0e <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013eea:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013eee:	fb02 f103 	mul.w	r1, r2, r3
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013f04:	9300      	str	r3, [sp, #0]
 8013f06:	4603      	mov	r3, r0
 8013f08:	4813      	ldr	r0, [pc, #76]	@ (8013f58 <prvTCPCreateWindow+0x94>)
 8013f0a:	f00e fc5b 	bl	80227c4 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013f14:	697b      	ldr	r3, [r7, #20]
 8013f16:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013f1a:	fb02 f103 	mul.w	r1, r2, r3
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013f24:	fb02 f403 	mul.w	r4, r2, r3
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8013f34:	687a      	ldr	r2, [r7, #4]
 8013f36:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 8013f3a:	9201      	str	r2, [sp, #4]
 8013f3c:	9300      	str	r3, [sp, #0]
 8013f3e:	462b      	mov	r3, r5
 8013f40:	4622      	mov	r2, r4
 8013f42:	f001 ffd7 	bl	8015ef4 <xTCPWindowCreate>
 8013f46:	60f8      	str	r0, [r7, #12]

        return xReturn;
 8013f48:	68fb      	ldr	r3, [r7, #12]
    }
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3718      	adds	r7, #24
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bdb0      	pop	{r4, r5, r7, pc}
 8013f52:	bf00      	nop
 8013f54:	2000164c 	.word	0x2000164c
 8013f58:	08026f28 	.word	0x08026f28

08013f5c <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013f64:	2301      	movs	r3, #1
 8013f66:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	7a1b      	ldrb	r3, [r3, #8]
 8013f6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013f70:	b2db      	uxtb	r3, r3
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d002      	beq.n	8013f7c <prvTCPPrepareConnect+0x20>
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d005      	beq.n	8013f86 <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8013f7a:	e009      	b.n	8013f90 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f000 ff69 	bl	8014e54 <prvTCPPrepareConnect_IPV4>
 8013f82:	60f8      	str	r0, [r7, #12]
                    break;
 8013f84:	e004      	b.n	8013f90 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f001 fab4 	bl	80154f4 <prvTCPPrepareConnect_IPV6>
 8013f8c:	60f8      	str	r0, [r7, #12]
                    break;
 8013f8e:	bf00      	nop
        }

        return xReturn;
 8013f90:	68fb      	ldr	r3, [r7, #12]
    }
 8013f92:	4618      	mov	r0, r3
 8013f94:	3710      	adds	r7, #16
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
	...

08013f9c <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b084      	sub	sp, #16
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8013fb0:	fb02 f303 	mul.w	r3, r2, r3
 8013fb4:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 8013fba:	e005      	b.n	8013fc8 <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	085b      	lsrs	r3, r3, #1
 8013fc0:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 8013fc2:	7afb      	ldrb	r3, [r7, #11]
 8013fc4:	3301      	adds	r3, #1
 8013fc6:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013fce:	d2f5      	bcs.n	8013fbc <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013fdc:	461a      	mov	r2, r3
 8013fde:	7afb      	ldrb	r3, [r7, #11]
 8013fe0:	4803      	ldr	r0, [pc, #12]	@ (8013ff0 <prvWinScaleFactor+0x54>)
 8013fe2:	f00e fbef 	bl	80227c4 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 8013fe6:	7afb      	ldrb	r3, [r7, #11]
        }
 8013fe8:	4618      	mov	r0, r3
 8013fea:	3710      	adds	r7, #16
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}
 8013ff0:	08026f60 	.word	0x08026f60

08013ff4 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b084      	sub	sp, #16
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014004:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	2202      	movs	r2, #2
 801400a:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	2204      	movs	r2, #4
 8014010:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8014012:	89fb      	ldrh	r3, [r7, #14]
 8014014:	0a1b      	lsrs	r3, r3, #8
 8014016:	b29b      	uxth	r3, r3
 8014018:	b2da      	uxtb	r2, r3
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 801401e:	89fb      	ldrh	r3, [r7, #14]
 8014020:	b2da      	uxtb	r2, r3
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f7ff ffb8 	bl	8013f9c <prvWinScaleFactor>
 801402c:	4603      	mov	r3, r0
 801402e:	461a      	mov	r2, r3
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	2201      	movs	r2, #1
 801403a:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	2203      	movs	r2, #3
 8014040:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	2203      	movs	r2, #3
 8014046:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8014052:	2308      	movs	r3, #8
 8014054:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 8014056:	683a      	ldr	r2, [r7, #0]
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	4413      	add	r3, r2
 801405c:	3314      	adds	r3, #20
 801405e:	2201      	movs	r2, #1
 8014060:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	3301      	adds	r3, #1
 8014066:	683a      	ldr	r2, [r7, #0]
 8014068:	4413      	add	r3, r2
 801406a:	2201      	movs	r2, #1
 801406c:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	3302      	adds	r3, #2
 8014072:	683a      	ldr	r2, [r7, #0]
 8014074:	4413      	add	r3, r2
 8014076:	2204      	movs	r2, #4
 8014078:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	3303      	adds	r3, #3
 801407e:	683a      	ldr	r2, [r7, #0]
 8014080:	4413      	add	r3, r2
 8014082:	2202      	movs	r2, #2
 8014084:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	3304      	adds	r3, #4
 801408a:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 801408c:	68bb      	ldr	r3, [r7, #8]
    }
 801408e:	4618      	mov	r0, r3
 8014090:	3710      	adds	r7, #16
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
	...

08014098 <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 8014098:	b580      	push	{r7, lr}
 801409a:	b088      	sub	sp, #32
 801409c:	af00      	add	r7, sp, #0
 801409e:	60f8      	str	r0, [r7, #12]
 80140a0:	60b9      	str	r1, [r7, #8]
 80140a2:	607a      	str	r2, [r7, #4]
 80140a4:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 80140a6:	4b38      	ldr	r3, [pc, #224]	@ (8014188 <prvTCPBufferResize+0xf0>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d00b      	beq.n	80140c6 <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 80140ae:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 80140b2:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d102      	bne.n	80140c0 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 80140ba:	2301      	movs	r3, #1
 80140bc:	617b      	str	r3, [r7, #20]
 80140be:	e020      	b.n	8014102 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80140c0:	2300      	movs	r3, #0
 80140c2:	617b      	str	r3, [r7, #20]
 80140c4:	e01d      	b.n	8014102 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80140c6:	68f8      	ldr	r0, [r7, #12]
 80140c8:	f7f6 f9c0 	bl	800a44c <uxIPHeaderSizeSocket>
 80140cc:	4602      	mov	r2, r0
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	4413      	add	r3, r2
 80140d2:	3322      	adds	r3, #34	@ 0x22
 80140d4:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	69ba      	ldr	r2, [r7, #24]
 80140da:	4413      	add	r3, r2
 80140dc:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 80140de:	69bb      	ldr	r3, [r7, #24]
 80140e0:	2b59      	cmp	r3, #89	@ 0x59
 80140e2:	d801      	bhi.n	80140e8 <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80140e4:	235a      	movs	r3, #90	@ 0x5a
 80140e6:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d004      	beq.n	80140f8 <prvTCPBufferResize+0x60>
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140f2:	69ba      	ldr	r2, [r7, #24]
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d902      	bls.n	80140fe <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 80140f8:	2301      	movs	r3, #1
 80140fa:	617b      	str	r3, [r7, #20]
 80140fc:	e001      	b.n	8014102 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80140fe:	2300      	movs	r3, #0
 8014100:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d023      	beq.n	8014150 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 8014108:	2100      	movs	r1, #0
 801410a:	69b8      	ldr	r0, [r7, #24]
 801410c:	f003 fc4a 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 8014110:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 8014112:	69fb      	ldr	r3, [r7, #28]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d031      	beq.n	801417c <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	69ba      	ldr	r2, [r7, #24]
 801411c:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d00c      	beq.n	801413e <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8014124:	69fb      	ldr	r3, [r7, #28]
 8014126:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014130:	461a      	mov	r2, r3
 8014132:	f00e fd63 	bl	8022bfc <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014136:	68b8      	ldr	r0, [r7, #8]
 8014138:	f003 fc9c 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
 801413c:	e01e      	b.n	801417c <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 801413e:	69fb      	ldr	r3, [r7, #28]
 8014140:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	33aa      	adds	r3, #170	@ 0xaa
 8014146:	225a      	movs	r2, #90	@ 0x5a
 8014148:	4619      	mov	r1, r3
 801414a:	f00e fd57 	bl	8022bfc <memcpy>
 801414e:	e015      	b.n	801417c <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d104      	bne.n	8014160 <prvTCPBufferResize+0xc8>
 8014156:	f240 21ca 	movw	r1, #714	@ 0x2ca
 801415a:	480c      	ldr	r0, [pc, #48]	@ (801418c <prvTCPBufferResize+0xf4>)
 801415c:	f7ed fc54 	bl	8001a08 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8014164:	68f8      	ldr	r0, [r7, #12]
 8014166:	f7f6 f971 	bl	800a44c <uxIPHeaderSizeSocket>
 801416a:	4602      	mov	r2, r0
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	441a      	add	r2, r3
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	4413      	add	r3, r2
 8014174:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 801417c:	69fb      	ldr	r3, [r7, #28]
    }
 801417e:	4618      	mov	r0, r3
 8014180:	3720      	adds	r7, #32
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}
 8014186:	bf00      	nop
 8014188:	08028038 	.word	0x08028038
 801418c:	08026ecc 	.word	0x08026ecc

08014190 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8014190:	b580      	push	{r7, lr}
 8014192:	b086      	sub	sp, #24
 8014194:	af00      	add	r7, sp, #0
 8014196:	60f8      	str	r0, [r7, #12]
 8014198:	60b9      	str	r1, [r7, #8]
 801419a:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 801419c:	2300      	movs	r3, #0
 801419e:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 80141a0:	2300      	movs	r3, #0
 80141a2:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d008      	beq.n	80141bc <prvTCPReturn_SetEndPoint+0x2c>
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d004      	beq.n	80141bc <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 80141ba:	e078      	b.n	80142ae <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 80141bc:	483e      	ldr	r0, [pc, #248]	@ (80142b8 <prvTCPReturn_SetEndPoint+0x128>)
 80141be:	f00e fb01 	bl	80227c4 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	2b14      	cmp	r3, #20
 80141c6:	d003      	beq.n	80141d0 <prvTCPReturn_SetEndPoint+0x40>
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2b28      	cmp	r3, #40	@ 0x28
 80141cc:	d03d      	beq.n	801424a <prvTCPReturn_SetEndPoint+0xba>
 80141ce:	e056      	b.n	801427e <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141d4:	330e      	adds	r3, #14
 80141d6:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	691b      	ldr	r3, [r3, #16]
 80141dc:	2108      	movs	r1, #8
 80141de:	4618      	mov	r0, r3
 80141e0:	f7f9 fd8a 	bl	800dcf8 <FreeRTOS_FindEndPointOnNetMask>
 80141e4:	4602      	mov	r2, r0
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d149      	bne.n	8014286 <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	68db      	ldr	r3, [r3, #12]
 80141f6:	061a      	lsls	r2, r3, #24
 80141f8:	697b      	ldr	r3, [r7, #20]
 80141fa:	68db      	ldr	r3, [r3, #12]
 80141fc:	021b      	lsls	r3, r3, #8
 80141fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014202:	431a      	orrs	r2, r3
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	0a1b      	lsrs	r3, r3, #8
 801420a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801420e:	431a      	orrs	r2, r3
 8014210:	697b      	ldr	r3, [r7, #20]
 8014212:	68db      	ldr	r3, [r3, #12]
 8014214:	0e1b      	lsrs	r3, r3, #24
 8014216:	ea42 0103 	orr.w	r1, r2, r3
 801421a:	697b      	ldr	r3, [r7, #20]
 801421c:	691b      	ldr	r3, [r3, #16]
 801421e:	061a      	lsls	r2, r3, #24
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	691b      	ldr	r3, [r3, #16]
 8014224:	021b      	lsls	r3, r3, #8
 8014226:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801422a:	431a      	orrs	r2, r3
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	691b      	ldr	r3, [r3, #16]
 8014230:	0a1b      	lsrs	r3, r3, #8
 8014232:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014236:	431a      	orrs	r2, r3
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	691b      	ldr	r3, [r3, #16]
 801423c:	0e1b      	lsrs	r3, r3, #24
 801423e:	4313      	orrs	r3, r2
 8014240:	461a      	mov	r2, r3
 8014242:	481e      	ldr	r0, [pc, #120]	@ (80142bc <prvTCPReturn_SetEndPoint+0x12c>)
 8014244:	f00e fabe 	bl	80227c4 <lUDPLoggingPrintf>
                        break;
 8014248:	e01d      	b.n	8014286 <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801424e:	330e      	adds	r3, #14
 8014250:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 8014252:	693b      	ldr	r3, [r7, #16]
 8014254:	3318      	adds	r3, #24
 8014256:	4618      	mov	r0, r3
 8014258:	f7f9 fd08 	bl	800dc6c <FreeRTOS_FindEndPointOnIP_IPv6>
 801425c:	4602      	mov	r2, r0
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014266:	2b00      	cmp	r3, #0
 8014268:	d10f      	bne.n	801428a <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	f103 0108 	add.w	r1, r3, #8
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	3318      	adds	r3, #24
 8014274:	461a      	mov	r2, r3
 8014276:	4812      	ldr	r0, [pc, #72]	@ (80142c0 <prvTCPReturn_SetEndPoint+0x130>)
 8014278:	f00e faa4 	bl	80227c4 <lUDPLoggingPrintf>
                        break;
 801427c:	e005      	b.n	801428a <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	2200      	movs	r2, #0
 8014282:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8014284:	e002      	b.n	801428c <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8014286:	bf00      	nop
 8014288:	e000      	b.n	801428c <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 801428a:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014290:	2b00      	cmp	r3, #0
 8014292:	d00c      	beq.n	80142ae <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8014294:	68bb      	ldr	r3, [r7, #8]
 8014296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014298:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 801429c:	4619      	mov	r1, r3
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80142a2:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 80142a6:	461a      	mov	r2, r3
 80142a8:	4806      	ldr	r0, [pc, #24]	@ (80142c4 <prvTCPReturn_SetEndPoint+0x134>)
 80142aa:	f00e fa8b 	bl	80227c4 <lUDPLoggingPrintf>
    }
 80142ae:	bf00      	nop
 80142b0:	3718      	adds	r7, #24
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	08026f94 	.word	0x08026f94
 80142bc:	08026fbc 	.word	0x08026fbc
 80142c0:	08026ff0 	.word	0x08026ff0
 80142c4:	08027024 	.word	0x08027024

080142c8 <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b096      	sub	sp, #88	@ 0x58
 80142cc:	af02      	add	r7, sp, #8
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 80142d4:	2300      	movs	r3, #0
 80142d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d004      	beq.n	80142ea <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80142e8:	e002      	b.n	80142f0 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	33aa      	adds	r3, #170	@ 0xaa
 80142ee:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80142f0:	68f8      	ldr	r0, [r7, #12]
 80142f2:	f7f6 f8ab 	bl	800a44c <uxIPHeaderSizeSocket>
 80142f6:	4603      	mov	r3, r0
 80142f8:	330e      	adds	r3, #14
 80142fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80142fc:	4413      	add	r3, r2
 80142fe:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8014306:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 8014308:	2300      	movs	r3, #0
 801430a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 801430c:	2300      	movs	r3, #0
 801430e:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 8014310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014312:	7b5b      	ldrb	r3, [r3, #13]
 8014314:	f043 0310 	orr.w	r3, r3, #16
 8014318:	b2da      	uxtb	r2, r3
 801431a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801431c:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014324:	2b00      	cmp	r3, #0
 8014326:	f000 80a5 	beq.w	8014474 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014330:	2b01      	cmp	r3, #1
 8014332:	d90a      	bls.n	801434a <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801433a:	f107 0210 	add.w	r2, r7, #16
 801433e:	4619      	mov	r1, r3
 8014340:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014342:	f002 fb13 	bl	801696c <ulTCPWindowTxGet>
 8014346:	4603      	mov	r3, r0
 8014348:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 801434a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801434c:	2b00      	cmp	r3, #0
 801434e:	f340 8091 	ble.w	8014474 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	6819      	ldr	r1, [r3, #0]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801435a:	68f8      	ldr	r0, [r7, #12]
 801435c:	f7ff fe9c 	bl	8014098 <prvTCPBufferResize>
 8014360:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 8014362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014364:	2b00      	cmp	r3, #0
 8014366:	f000 8082 	beq.w	801446e <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801436e:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8014370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014374:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014376:	68f8      	ldr	r0, [r7, #12]
 8014378:	f7f6 f868 	bl	800a44c <uxIPHeaderSizeSocket>
 801437c:	4603      	mov	r3, r0
 801437e:	330e      	adds	r3, #14
 8014380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014382:	4413      	add	r3, r2
 8014384:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 8014386:	68f8      	ldr	r0, [r7, #12]
 8014388:	f7f6 f860 	bl	800a44c <uxIPHeaderSizeSocket>
 801438c:	4602      	mov	r2, r0
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	4413      	add	r3, r2
 8014392:	3322      	adds	r3, #34	@ 0x22
 8014394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014396:	4413      	add	r3, r2
 8014398:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	693a      	ldr	r2, [r7, #16]
 80143aa:	4619      	mov	r1, r3
 80143ac:	f7fc fef9 	bl	80111a2 <uxStreamBufferDistance>
 80143b0:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80143b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143ba:	2201      	movs	r2, #1
 80143bc:	9200      	str	r2, [sp, #0]
 80143be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80143c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80143c2:	f7fd f84c 	bl	801145e <uxStreamBufferGet>
 80143c6:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 80143c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d007      	beq.n	80143e0 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 80143d0:	6939      	ldr	r1, [r7, #16]
 80143d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143d4:	9300      	str	r3, [sp, #0]
 80143d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80143da:	4898      	ldr	r0, [pc, #608]	@ (801463c <prvTCPPrepareSend+0x374>)
 80143dc:	f00e f9f2 	bl	80227c4 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80143e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80143ea:	b2db      	uxtb	r3, r3
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d041      	beq.n	8014474 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80143f6:	693b      	ldr	r3, [r7, #16]
 80143f8:	4619      	mov	r1, r3
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014400:	689b      	ldr	r3, [r3, #8]
 8014402:	461a      	mov	r2, r3
 8014404:	f7fc fecd 	bl	80111a2 <uxStreamBufferDistance>
 8014408:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 801440a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801440c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801440e:	429a      	cmp	r2, r3
 8014410:	d130      	bne.n	8014474 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014418:	689b      	ldr	r3, [r3, #8]
 801441a:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8014430:	6a3b      	ldr	r3, [r7, #32]
 8014432:	9301      	str	r3, [sp, #4]
 8014434:	69fb      	ldr	r3, [r7, #28]
 8014436:	9300      	str	r3, [sp, #0]
 8014438:	69bb      	ldr	r3, [r7, #24]
 801443a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801443c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801443e:	4880      	ldr	r0, [pc, #512]	@ (8014640 <prvTCPPrepareSend+0x378>)
 8014440:	f00e f9c0 	bl	80227c4 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8014444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014446:	7b5b      	ldrb	r3, [r3, #13]
 8014448:	f043 0301 	orr.w	r3, r3, #1
 801444c:	b2da      	uxtb	r2, r3
 801444e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014450:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8014452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014458:	441a      	add	r2, r3
 801445a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801445c:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 801445e:	68fa      	ldr	r2, [r7, #12]
 8014460:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014468:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 801446c:	e002      	b.n	8014474 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 801446e:	f04f 33ff 	mov.w	r3, #4294967295
 8014472:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8014474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014476:	2b00      	cmp	r3, #0
 8014478:	f2c0 8099 	blt.w	80145ae <prvTCPPrepareSend+0x2e6>
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8014482:	2b05      	cmp	r3, #5
 8014484:	f040 8093 	bne.w	80145ae <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801448e:	f003 0320 	and.w	r3, r3, #32
 8014492:	b2db      	uxtb	r3, r3
 8014494:	2b00      	cmp	r3, #0
 8014496:	d029      	beq.n	80144ec <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8014498:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801449a:	f002 f8e7 	bl	801666c <xTCPWindowTxDone>
 801449e:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d023      	beq.n	80144ec <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 80144a4:	68fa      	ldr	r2, [r7, #12]
 80144a6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80144aa:	f36f 1345 	bfc	r3, #5, #1
 80144ae:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 80144b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144b4:	7b5b      	ldrb	r3, [r3, #13]
 80144b6:	f043 0301 	orr.w	r3, r3, #1
 80144ba:	b2da      	uxtb	r2, r3
 80144bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144be:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80144c0:	68fa      	ldr	r2, [r7, #12]
 80144c2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80144c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144ca:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80144ce:	68fa      	ldr	r2, [r7, #12]
 80144d0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80144d4:	f043 0301 	orr.w	r3, r3, #1
 80144d8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80144dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144de:	6a1a      	ldr	r2, [r3, #32]
 80144e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144e2:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 80144e4:	2106      	movs	r1, #6
 80144e6:	68f8      	ldr	r0, [r7, #12]
 80144e8:	f7fd f960 	bl	80117ac <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80144f2:	2b03      	cmp	r3, #3
 80144f4:	d90f      	bls.n	8014516 <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014500:	461a      	mov	r2, r3
 8014502:	4850      	ldr	r0, [pc, #320]	@ (8014644 <prvTCPPrepareSend+0x37c>)
 8014504:	f00e f95e 	bl	80227c4 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8014508:	2108      	movs	r1, #8
 801450a:	68f8      	ldr	r0, [r7, #12]
 801450c:	f7fd f94e 	bl	80117ac <vTCPStateChange>
                    lDataLen = -1;
 8014510:	f04f 33ff 	mov.w	r3, #4294967295
 8014514:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 8014516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014518:	2b00      	cmp	r3, #0
 801451a:	d148      	bne.n	80145ae <prvTCPPrepareSend+0x2e6>
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014522:	f003 0301 	and.w	r3, r3, #1
 8014526:	b2db      	uxtb	r3, r3
 8014528:	2b00      	cmp	r3, #0
 801452a:	d140      	bne.n	80145ae <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 801452c:	f7f0 fbda 	bl	8004ce4 <xTaskGetTickCount>
 8014530:	4602      	mov	r2, r0
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014538:	1ad3      	subs	r3, r2, r3
 801453a:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 801453c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8014540:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014548:	2b00      	cmp	r3, #0
 801454a:	d002      	beq.n	8014552 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 801454c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8014550:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 8014552:	697a      	ldr	r2, [r7, #20]
 8014554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014556:	429a      	cmp	r2, r3
 8014558:	d929      	bls.n	80145ae <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 801455a:	f7f0 fbc3 	bl	8004ce4 <xTaskGetTickCount>
 801455e:	4602      	mov	r2, r0
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 8014566:	4b38      	ldr	r3, [pc, #224]	@ (8014648 <prvTCPPrepareSend+0x380>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d00b      	beq.n	8014586 <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014578:	461a      	mov	r2, r3
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014580:	4832      	ldr	r0, [pc, #200]	@ (801464c <prvTCPPrepareSend+0x384>)
 8014582:	f00e f91f 	bl	80227c4 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8014586:	68fa      	ldr	r2, [r7, #12]
 8014588:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801458c:	f043 0302 	orr.w	r3, r3, #2
 8014590:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 801459a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80145a4:	3301      	adds	r3, #1
 80145a6:	b2da      	uxtb	r2, r3
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 80145ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	db3e      	blt.n	8014632 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 80145b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	dc0f      	bgt.n	80145da <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80145c0:	f003 0301 	and.w	r3, r3, #1
 80145c4:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d107      	bne.n	80145da <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80145d0:	f003 0302 	and.w	r3, r3, #2
 80145d4:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d02b      	beq.n	8014632 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 80145da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145dc:	7b5b      	ldrb	r3, [r3, #13]
 80145de:	f023 0308 	bic.w	r3, r3, #8
 80145e2:	b2da      	uxtb	r2, r3
 80145e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145e6:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	b2db      	uxtb	r3, r3
 80145ec:	3314      	adds	r3, #20
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	009b      	lsls	r3, r3, #2
 80145f2:	b2da      	uxtb	r2, r3
 80145f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145f6:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 80145f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145fa:	7b5b      	ldrb	r3, [r3, #13]
 80145fc:	f043 0310 	orr.w	r3, r3, #16
 8014600:	b2da      	uxtb	r2, r3
 8014602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014604:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 8014606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014608:	2b00      	cmp	r3, #0
 801460a:	d006      	beq.n	801461a <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 801460c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801460e:	7b5b      	ldrb	r3, [r3, #13]
 8014610:	f043 0308 	orr.w	r3, r3, #8
 8014614:	b2da      	uxtb	r2, r3
 8014616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014618:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801461a:	68f8      	ldr	r0, [r7, #12]
 801461c:	f7f5 ff16 	bl	800a44c <uxIPHeaderSizeSocket>
 8014620:	4602      	mov	r2, r0
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	4413      	add	r3, r2
 8014626:	3314      	adds	r3, #20
 8014628:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 801462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801462c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801462e:	4413      	add	r3, r2
 8014630:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8014632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8014634:	4618      	mov	r0, r3
 8014636:	3750      	adds	r7, #80	@ 0x50
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	08027058 	.word	0x08027058
 8014640:	0802708c 	.word	0x0802708c
 8014644:	080270b4 	.word	0x080270b4
 8014648:	2000164c 	.word	0x2000164c
 801464c:	080270d4 	.word	0x080270d4

08014650 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801465e:	4618      	mov	r0, r3
 8014660:	f7fc fdf0 	bl	8011244 <uxStreamBufferMidSpace>
 8014664:	4603      	mov	r3, r0
 8014666:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	2b00      	cmp	r3, #0
 801466c:	dd1a      	ble.n	80146a4 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8014674:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801467c:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 801467e:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014686:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8014688:	f001 ff5c 	bl	8016544 <lTCPWindowTxAdd>
 801468c:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	2b00      	cmp	r3, #0
 8014692:	dd07      	ble.n	80146a4 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801469a:	68ba      	ldr	r2, [r7, #8]
 801469c:	4611      	mov	r1, r2
 801469e:	4618      	mov	r0, r3
 80146a0:	f7fc fdf7 	bl	8011292 <vStreamBufferMoveMid>
            }
        }
    }
 80146a4:	bf00      	nop
 80146a6:	3710      	adds	r7, #16
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}

080146ac <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80146ac:	b590      	push	{r4, r7, lr}
 80146ae:	b08b      	sub	sp, #44	@ 0x2c
 80146b0:	af02      	add	r7, sp, #8
 80146b2:	6078      	str	r0, [r7, #4]
 80146b4:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80146ba:	6838      	ldr	r0, [r7, #0]
 80146bc:	f7f5 feac 	bl	800a418 <uxIPHeaderSizePacket>
 80146c0:	4603      	mov	r3, r0
 80146c2:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80146c4:	4423      	add	r3, r4
 80146c6:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80146c8:	69bb      	ldr	r3, [r7, #24]
 80146ca:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80146d2:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 80146d4:	693b      	ldr	r3, [r7, #16]
 80146d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80146da:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d05c      	beq.n	801479c <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 80146e2:	4b4f      	ldr	r3, [pc, #316]	@ (8014820 <prvSetOptions+0x174>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	db44      	blt.n	8014774 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80146ee:	4618      	mov	r0, r3
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80146f6:	461c      	mov	r4, r3
 80146f8:	693b      	ldr	r3, [r7, #16]
 80146fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80146fe:	061a      	lsls	r2, r3, #24
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014706:	021b      	lsls	r3, r3, #8
 8014708:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801470c:	431a      	orrs	r2, r3
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014714:	0a1b      	lsrs	r3, r3, #8
 8014716:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801471a:	431a      	orrs	r2, r3
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014722:	0e1b      	lsrs	r3, r3, #24
 8014724:	431a      	orrs	r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801472c:	1ad3      	subs	r3, r2, r3
 801472e:	693a      	ldr	r2, [r7, #16]
 8014730:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8014734:	0611      	lsls	r1, r2, #24
 8014736:	693a      	ldr	r2, [r7, #16]
 8014738:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801473c:	0212      	lsls	r2, r2, #8
 801473e:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8014742:	4311      	orrs	r1, r2
 8014744:	693a      	ldr	r2, [r7, #16]
 8014746:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801474a:	0a12      	lsrs	r2, r2, #8
 801474c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8014750:	4311      	orrs	r1, r2
 8014752:	693a      	ldr	r2, [r7, #16]
 8014754:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8014758:	0e12      	lsrs	r2, r2, #24
 801475a:	4311      	orrs	r1, r2
 801475c:	687a      	ldr	r2, [r7, #4]
 801475e:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8014762:	1a8a      	subs	r2, r1, r2
 8014764:	9201      	str	r2, [sp, #4]
 8014766:	9300      	str	r3, [sp, #0]
 8014768:	69fb      	ldr	r3, [r7, #28]
 801476a:	4622      	mov	r2, r4
 801476c:	4601      	mov	r1, r0
 801476e:	482d      	ldr	r0, [pc, #180]	@ (8014824 <prvSetOptions+0x178>)
 8014770:	f00e f828 	bl	80227c4 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	3380      	adds	r3, #128	@ 0x80
 8014778:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 801477a:	697b      	ldr	r3, [r7, #20]
 801477c:	3314      	adds	r3, #20
 801477e:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8014780:	69fa      	ldr	r2, [r7, #28]
 8014782:	68f9      	ldr	r1, [r7, #12]
 8014784:	68b8      	ldr	r0, [r7, #8]
 8014786:	f00e fa39 	bl	8022bfc <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801478a:	69fb      	ldr	r3, [r7, #28]
 801478c:	b2db      	uxtb	r3, r3
 801478e:	3314      	adds	r3, #20
 8014790:	b2db      	uxtb	r3, r3
 8014792:	009b      	lsls	r3, r3, #2
 8014794:	b2da      	uxtb	r2, r3
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	731a      	strb	r2, [r3, #12]
 801479a:	e03c      	b.n	8014816 <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80147a2:	2b04      	cmp	r3, #4
 80147a4:	d937      	bls.n	8014816 <prvSetOptions+0x16a>
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80147ac:	f003 0301 	and.w	r3, r3, #1
 80147b0:	b2db      	uxtb	r3, r3
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d02f      	beq.n	8014816 <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80147bc:	f36f 0300 	bfc	r3, #0, #1
 80147c0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 80147c4:	4b16      	ldr	r3, [pc, #88]	@ (8014820 <prvSetOptions+0x174>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	db06      	blt.n	80147da <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80147d2:	4619      	mov	r1, r3
 80147d4:	4814      	ldr	r0, [pc, #80]	@ (8014828 <prvSetOptions+0x17c>)
 80147d6:	f00d fff5 	bl	80227c4 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 80147da:	697b      	ldr	r3, [r7, #20]
 80147dc:	2202      	movs	r2, #2
 80147de:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	2204      	movs	r2, #4
 80147e4:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80147ec:	0a1b      	lsrs	r3, r3, #8
 80147ee:	b29b      	uxth	r3, r3
 80147f0:	b2da      	uxtb	r2, r3
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80147fc:	b2da      	uxtb	r2, r3
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 8014802:	2304      	movs	r3, #4
 8014804:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	b2db      	uxtb	r3, r3
 801480a:	3314      	adds	r3, #20
 801480c:	b2db      	uxtb	r3, r3
 801480e:	009b      	lsls	r3, r3, #2
 8014810:	b2da      	uxtb	r2, r3
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 8014816:	69fb      	ldr	r3, [r7, #28]
    }
 8014818:	4618      	mov	r0, r3
 801481a:	3724      	adds	r7, #36	@ 0x24
 801481c:	46bd      	mov	sp, r7
 801481e:	bd90      	pop	{r4, r7, pc}
 8014820:	2000164c 	.word	0x2000164c
 8014824:	080270f4 	.word	0x080270f4
 8014828:	0802711c 	.word	0x0802711c

0801482c <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 801482c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801482e:	b093      	sub	sp, #76	@ 0x4c
 8014830:	af04      	add	r7, sp, #16
 8014832:	60f8      	str	r0, [r7, #12]
 8014834:	60b9      	str	r1, [r7, #8]
 8014836:	607a      	str	r2, [r7, #4]
 8014838:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	4618      	mov	r0, r3
 8014846:	f7f5 fde7 	bl	800a418 <uxIPHeaderSizePacket>
 801484a:	4603      	mov	r3, r0
 801484c:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801484e:	4423      	add	r3, r4
 8014850:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8014852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014854:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801485c:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	4618      	mov	r0, r3
 8014868:	f7f5 fdd6 	bl	800a418 <uxIPHeaderSizePacket>
 801486c:	4603      	mov	r3, r0
 801486e:	3314      	adds	r3, #20
 8014870:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 8014872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014874:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801487a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801487c:	691b      	ldr	r3, [r3, #16]
 801487e:	1ad3      	subs	r3, r2, r3
 8014880:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8014882:	69fb      	ldr	r3, [r7, #28]
 8014884:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801488c:	005b      	lsls	r3, r3, #1
 801488e:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d079      	beq.n	801498a <prvSendData+0x15e>
 8014896:	69ba      	ldr	r2, [r7, #24]
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	429a      	cmp	r2, r3
 801489c:	db75      	blt.n	801498a <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80148a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80148a8:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d16d      	bne.n	801498a <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 80148ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80148b0:	6a3b      	ldr	r3, [r7, #32]
 80148b2:	429a      	cmp	r2, r3
 80148b4:	d169      	bne.n	801498a <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 80148bc:	2b05      	cmp	r3, #5
 80148be:	d164      	bne.n	801498a <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 80148c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148c2:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 80148c4:	2b10      	cmp	r3, #16
 80148c6:	d160      	bne.n	801498a <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80148ce:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d00f      	beq.n	80148fe <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d005      	beq.n	80148f4 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80148ee:	4618      	mov	r0, r3
 80148f0:	f003 f8c0 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	681a      	ldr	r2, [r3, #0]
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 80148fe:	687a      	ldr	r2, [r7, #4]
 8014900:	693b      	ldr	r3, [r7, #16]
 8014902:	429a      	cmp	r2, r3
 8014904:	d204      	bcs.n	8014910 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	2202      	movs	r2, #2
 801490a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 801490e:	e00c      	b.n	801492a <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	2214      	movs	r2, #20
 8014914:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801491e:	2b00      	cmp	r3, #0
 8014920:	d103      	bne.n	801492a <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2201      	movs	r2, #1
 8014926:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801492a:	4b3d      	ldr	r3, [pc, #244]	@ (8014a20 <prvSendData+0x1f4>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	2b01      	cmp	r3, #1
 8014930:	dd25      	ble.n	801497e <prvSendData+0x152>
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014936:	2b17      	cmp	r3, #23
 8014938:	d021      	beq.n	801497e <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801493e:	461d      	mov	r5, r3
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014946:	461e      	mov	r6, r3
 8014948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801494a:	691a      	ldr	r2, [r3, #16]
 801494c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801494e:	68db      	ldr	r3, [r3, #12]
 8014950:	1ad0      	subs	r0, r2, r3
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8014958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801495a:	69db      	ldr	r3, [r3, #28]
 801495c:	1ad3      	subs	r3, r2, r3
 801495e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014960:	68f9      	ldr	r1, [r7, #12]
 8014962:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 8014966:	460c      	mov	r4, r1
 8014968:	69b9      	ldr	r1, [r7, #24]
 801496a:	9103      	str	r1, [sp, #12]
 801496c:	9402      	str	r4, [sp, #8]
 801496e:	9201      	str	r2, [sp, #4]
 8014970:	9300      	str	r3, [sp, #0]
 8014972:	4603      	mov	r3, r0
 8014974:	4632      	mov	r2, r6
 8014976:	4629      	mov	r1, r5
 8014978:	482a      	ldr	r0, [pc, #168]	@ (8014a24 <prvSendData+0x1f8>)
 801497a:	f00d ff23 	bl	80227c4 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	2200      	movs	r2, #0
 8014982:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8014984:	2300      	movs	r3, #0
 8014986:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 8014988:	e015      	b.n	80149b6 <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014990:	2b00      	cmp	r3, #0
 8014992:	d010      	beq.n	80149b6 <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d005      	beq.n	80149ae <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80149a8:	4618      	mov	r0, r3
 80149aa:	f003 f863 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2200      	movs	r2, #0
 80149b2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 80149b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d02b      	beq.n	8014a14 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80149bc:	4b18      	ldr	r3, [pc, #96]	@ (8014a20 <prvSendData+0x1f4>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	2b01      	cmp	r3, #1
 80149c2:	dd1d      	ble.n	8014a00 <prvSendData+0x1d4>
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80149c8:	2b17      	cmp	r3, #23
 80149ca:	d019      	beq.n	8014a00 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80149d0:	4618      	mov	r0, r3
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80149d8:	461c      	mov	r4, r3
 80149da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149dc:	691a      	ldr	r2, [r3, #16]
 80149de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149e0:	68db      	ldr	r3, [r3, #12]
 80149e2:	1ad1      	subs	r1, r2, r3
 80149e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149ea:	69db      	ldr	r3, [r3, #28]
 80149ec:	1ad3      	subs	r3, r2, r3
 80149ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80149f0:	9201      	str	r2, [sp, #4]
 80149f2:	9300      	str	r3, [sp, #0]
 80149f4:	460b      	mov	r3, r1
 80149f6:	4622      	mov	r2, r4
 80149f8:	4601      	mov	r1, r0
 80149fa:	480b      	ldr	r0, [pc, #44]	@ (8014a28 <prvSendData+0x1fc>)
 80149fc:	f00d fee2 	bl	80227c4 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	6819      	ldr	r1, [r3, #0]
 8014a04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014a06:	2301      	movs	r3, #1
 8014a08:	68f8      	ldr	r0, [r7, #12]
 8014a0a:	f7ff f8ff 	bl	8013c0c <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	2200      	movs	r2, #0
 8014a12:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8014a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8014a16:	4618      	mov	r0, r3
 8014a18:	373c      	adds	r7, #60	@ 0x3c
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a1e:	bf00      	nop
 8014a20:	2000164c 	.word	0x2000164c
 8014a24:	08027130 	.word	0x08027130
 8014a28:	08027168 	.word	0x08027168

08014a2c <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
 8014a34:	460b      	mov	r3, r1
 8014a36:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 8014a38:	2301      	movs	r3, #1
 8014a3a:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f7f5 fceb 	bl	800a418 <uxIPHeaderSizePacket>
 8014a42:	4603      	mov	r3, r0
 8014a44:	2b14      	cmp	r3, #20
 8014a46:	d002      	beq.n	8014a4e <prvTCPSendSpecialPacketHelper+0x22>
 8014a48:	2b28      	cmp	r3, #40	@ 0x28
 8014a4a:	d007      	beq.n	8014a5c <prvTCPSendSpecialPacketHelper+0x30>
 8014a4c:	e00d      	b.n	8014a6a <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 8014a4e:	78fb      	ldrb	r3, [r7, #3]
 8014a50:	4619      	mov	r1, r3
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f000 fb18 	bl	8015088 <prvTCPSendSpecialPktHelper_IPV4>
 8014a58:	60f8      	str	r0, [r7, #12]
                        break;
 8014a5a:	e009      	b.n	8014a70 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 8014a5c:	78fb      	ldrb	r3, [r7, #3]
 8014a5e:	4619      	mov	r1, r3
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f000 fe8b 	bl	801577c <prvTCPSendSpecialPktHelper_IPV6>
 8014a66:	60f8      	str	r0, [r7, #12]
                        break;
 8014a68:	e002      	b.n	8014a70 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	60fb      	str	r3, [r7, #12]
                    break;
 8014a6e:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 8014a70:	68fb      	ldr	r3, [r7, #12]
    }
 8014a72:	4618      	mov	r0, r3
 8014a74:	3710      	adds	r7, #16
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}

08014a7a <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8014a7a:	b580      	push	{r7, lr}
 8014a7c:	b082      	sub	sp, #8
 8014a7e:	af00      	add	r7, sp, #0
 8014a80:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8014a82:	2110      	movs	r1, #16
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f7ff ffd1 	bl	8014a2c <prvTCPSendSpecialPacketHelper>
 8014a8a:	4603      	mov	r3, r0
    }
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3708      	adds	r7, #8
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}

08014a94 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b082      	sub	sp, #8
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8014a9c:	2114      	movs	r1, #20
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f7ff ffc4 	bl	8014a2c <prvTCPSendSpecialPacketHelper>
 8014aa4:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3708      	adds	r7, #8
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
	...

08014ab0 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b0a6      	sub	sp, #152	@ 0x98
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	60b9      	str	r1, [r7, #8]
 8014aba:	607a      	str	r2, [r7, #4]
 8014abc:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 8014aca:	2300      	movs	r3, #0
 8014acc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 8014ae8:	2314      	movs	r3, #20
 8014aea:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8014aec:	2300      	movs	r3, #0
 8014aee:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8014af0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d117      	bne.n	8014b28 <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 8014af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014afc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8014b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014b04:	2238      	movs	r2, #56	@ 0x38
 8014b06:	2100      	movs	r1, #0
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f00e f984 	bl	8022e16 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8014b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b18:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b1e:	225a      	movs	r2, #90	@ 0x5a
 8014b20:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8014b22:	2300      	movs	r3, #0
 8014b24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8014b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d114      	bne.n	8014b5a <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8014b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b36:	4619      	mov	r1, r3
 8014b38:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014b3c:	f7f5 ff1e 	bl	800a97c <pxDuplicateNetworkBufferWithDescriptor>
 8014b40:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8014b44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d003      	beq.n	8014b54 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014b52:	e002      	b.n	8014b5a <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8014b54:	48bc      	ldr	r0, [pc, #752]	@ (8014e48 <prvTCPReturnPacket_IPV4+0x398>)
 8014b56:	f00d fe35 	bl	80227c4 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8014b5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	f000 8166 	beq.w	8014e30 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8014b64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b6a:	330e      	adds	r3, #14
 8014b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8014b6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8014b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014b7c:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8014b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014b86:	330e      	adds	r3, #14
 8014b88:	4413      	add	r3, r2
 8014b8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d10b      	bne.n	8014bb0 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014b98:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014b9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014b9e:	68f8      	ldr	r0, [r7, #12]
 8014ba0:	f7ff faf6 	bl	8014190 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	f000 813d 	beq.w	8014e2a <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d028      	beq.n	8014c08 <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014bb6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014bb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014bbc:	68f8      	ldr	r0, [r7, #12]
 8014bbe:	f7ff f865 	bl	8013c8c <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014bc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014bca:	68f8      	ldr	r0, [r7, #12]
 8014bcc:	f7ff f8d8 	bl	8013d80 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bd4:	061a      	lsls	r2, r3, #24
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bda:	021b      	lsls	r3, r3, #8
 8014bdc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014be0:	431a      	orrs	r2, r3
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014be6:	0a1b      	lsrs	r3, r3, #8
 8014be8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014bec:	431a      	orrs	r2, r3
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bf2:	0e1b      	lsrs	r3, r3, #24
 8014bf4:	431a      	orrs	r2, r3
 8014bf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014bf8:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8014bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c00:	681a      	ldr	r2, [r3, #0]
 8014c02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c04:	60da      	str	r2, [r3, #12]
 8014c06:	e017      	b.n	8014c38 <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8014c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c14:	689a      	ldr	r2, [r3, #8]
 8014c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c1a:	605a      	str	r2, [r3, #4]
 8014c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014c22:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8014c24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c26:	691b      	ldr	r3, [r3, #16]
 8014c28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014c2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c2c:	68da      	ldr	r2, [r3, #12]
 8014c2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c30:	611a      	str	r2, [r3, #16]
 8014c32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c34:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014c36:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8014c38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c3a:	2280      	movs	r2, #128	@ 0x80
 8014c3c:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	021b      	lsls	r3, r3, #8
 8014c44:	b29a      	uxth	r2, r3
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	0a1b      	lsrs	r3, r3, #8
 8014c4a:	b29b      	uxth	r3, r3
 8014c4c:	4313      	orrs	r3, r2
 8014c4e:	b29a      	uxth	r2, r3
 8014c50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c52:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8014c54:	4b7d      	ldr	r3, [pc, #500]	@ (8014e4c <prvTCPReturnPacket_IPV4+0x39c>)
 8014c56:	881b      	ldrh	r3, [r3, #0]
 8014c58:	021b      	lsls	r3, r3, #8
 8014c5a:	b21a      	sxth	r2, r3
 8014c5c:	4b7b      	ldr	r3, [pc, #492]	@ (8014e4c <prvTCPReturnPacket_IPV4+0x39c>)
 8014c5e:	881b      	ldrh	r3, [r3, #0]
 8014c60:	0a1b      	lsrs	r3, r3, #8
 8014c62:	b29b      	uxth	r3, r3
 8014c64:	b21b      	sxth	r3, r3
 8014c66:	4313      	orrs	r3, r2
 8014c68:	b21b      	sxth	r3, r3
 8014c6a:	b29a      	uxth	r2, r3
 8014c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c6e:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8014c70:	4b76      	ldr	r3, [pc, #472]	@ (8014e4c <prvTCPReturnPacket_IPV4+0x39c>)
 8014c72:	881b      	ldrh	r3, [r3, #0]
 8014c74:	3301      	adds	r3, #1
 8014c76:	b29a      	uxth	r2, r3
 8014c78:	4b74      	ldr	r3, [pc, #464]	@ (8014e4c <prvTCPReturnPacket_IPV4+0x39c>)
 8014c7a:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8014c7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c7e:	2200      	movs	r2, #0
 8014c80:	719a      	strb	r2, [r3, #6]
 8014c82:	2200      	movs	r2, #0
 8014c84:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014c86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c8a:	781a      	ldrb	r2, [r3, #0]
 8014c8c:	785b      	ldrb	r3, [r3, #1]
 8014c8e:	021b      	lsls	r3, r3, #8
 8014c90:	4313      	orrs	r3, r2
 8014c92:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8014c96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c9a:	885b      	ldrh	r3, [r3, #2]
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014ca2:	801a      	strh	r2, [r3, #0]
 8014ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014ca8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8014cac:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8014cae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cb2:	687a      	ldr	r2, [r7, #4]
 8014cb4:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8014cb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014cbc:	f103 020e 	add.w	r2, r3, #14
 8014cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cc4:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014cc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014cc8:	3306      	adds	r3, #6
 8014cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014cce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014cd0:	691b      	ldr	r3, [r3, #16]
 8014cd2:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8014cd4:	f107 0214 	add.w	r2, r7, #20
 8014cd8:	f107 011c 	add.w	r1, r7, #28
 8014cdc:	f107 0318 	add.w	r3, r7, #24
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f7f2 fd7f 	bl	80077e4 <eARPGetCacheEntry>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8014cec:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8014cf0:	2b01      	cmp	r3, #1
 8014cf2:	d108      	bne.n	8014d06 <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8014cf4:	f107 031c 	add.w	r3, r7, #28
 8014cf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8014cfc:	697a      	ldr	r2, [r7, #20]
 8014cfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d02:	631a      	str	r2, [r3, #48]	@ 0x30
 8014d04:	e003      	b.n	8014d0e <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014d06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014d08:	3306      	adds	r3, #6
 8014d0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014d0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	f000 808a 	beq.w	8014e2e <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8014d1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014d1c:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8014d1e:	2206      	movs	r2, #6
 8014d20:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014d24:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014d26:	f00d ff69 	bl	8022bfc <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8014d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d30:	33e8      	adds	r3, #232	@ 0xe8
 8014d32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8014d36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014d38:	3306      	adds	r3, #6
 8014d3a:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014d3c:	2206      	movs	r2, #6
 8014d3e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014d42:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014d44:	f00d ff5a 	bl	8022bfc <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8014d48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d4e:	2b3b      	cmp	r3, #59	@ 0x3b
 8014d50:	d81a      	bhi.n	8014d88 <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014d5c:	e00c      	b.n	8014d78 <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d68:	4413      	add	r3, r2
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d72:	3301      	adds	r3, #1
 8014d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d7c:	2b3b      	cmp	r3, #59	@ 0x3b
 8014d7e:	ddee      	ble.n	8014d5e <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014d80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d84:	223c      	movs	r2, #60	@ 0x3c
 8014d86:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8014d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d8e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d104      	bne.n	8014da0 <prvTCPReturnPacket_IPV4+0x2f0>
 8014d96:	f240 111d 	movw	r1, #285	@ 0x11d
 8014d9a:	482d      	ldr	r0, [pc, #180]	@ (8014e50 <prvTCPReturnPacket_IPV4+0x3a0>)
 8014d9c:	f7ec fe34 	bl	8001a08 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014da0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014da6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014daa:	68db      	ldr	r3, [r3, #12]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d104      	bne.n	8014dba <prvTCPReturnPacket_IPV4+0x30a>
 8014db0:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8014db4:	4826      	ldr	r0, [pc, #152]	@ (8014e50 <prvTCPReturnPacket_IPV4+0x3a0>)
 8014db6:	f7ec fe27 	bl	8001a08 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8014dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014dc0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014dc4:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8014dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014dc8:	68db      	ldr	r3, [r3, #12]
 8014dca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014dce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014dd2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8014dd4:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8014dd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d121      	bne.n	8014e22 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014de2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8014de6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8014dea:	021b      	lsls	r3, r3, #8
 8014dec:	4313      	orrs	r3, r2
 8014dee:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8014df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014df6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014df8:	b29a      	uxth	r2, r3
 8014dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014dfe:	845a      	strh	r2, [r3, #34]	@ 0x22
 8014e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014e04:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8014e08:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014e0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014e0c:	691a      	ldr	r2, [r3, #16]
 8014e0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014e10:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014e12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e14:	3306      	adds	r3, #6
 8014e16:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8014e18:	2206      	movs	r2, #6
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f00d feee 	bl	8022bfc <memcpy>
 8014e20:	e006      	b.n	8014e30 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8014e22:	2300      	movs	r3, #0
 8014e24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014e28:	e002      	b.n	8014e30 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 8014e2a:	bf00      	nop
 8014e2c:	e000      	b.n	8014e30 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8014e2e:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8014e30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014e34:	2b01      	cmp	r3, #1
 8014e36:	d103      	bne.n	8014e40 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014e38:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014e3c:	f002 fe1a 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8014e40:	bf00      	nop
 8014e42:	3798      	adds	r7, #152	@ 0x98
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}
 8014e48:	08027194 	.word	0x08027194
 8014e4c:	200011a4 	.word	0x200011a4
 8014e50:	080271bc 	.word	0x080271bc

08014e54 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e56:	b093      	sub	sp, #76	@ 0x4c
 8014e58:	af06      	add	r7, sp, #24
 8014e5a:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014e5c:	2301      	movs	r3, #1
 8014e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8014e60:	2300      	movs	r3, #0
 8014e62:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014e64:	f107 030c 	add.w	r3, r7, #12
 8014e68:	2206      	movs	r2, #6
 8014e6a:	2100      	movs	r1, #0
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f00d ffd2 	bl	8022e16 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e76:	061a      	lsls	r2, r3, #24
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e7c:	021b      	lsls	r3, r3, #8
 8014e7e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014e82:	431a      	orrs	r2, r3
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e88:	0a1b      	lsrs	r3, r3, #8
 8014e8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014e8e:	431a      	orrs	r2, r3
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e94:	0e1b      	lsrs	r3, r3, #24
 8014e96:	4313      	orrs	r3, r2
 8014e98:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8014ea0:	f107 010c 	add.w	r1, r7, #12
 8014ea4:	f107 0314 	add.w	r3, r7, #20
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f7f2 fc9b 	bl	80077e4 <eARPGetCacheEntry>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 8014eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014eb8:	2b01      	cmp	r3, #1
 8014eba:	d037      	beq.n	8014f2c <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8014ec2:	3301      	adds	r3, #1
 8014ec4:	b2da      	uxtb	r2, r3
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	061a      	lsls	r2, r3, #24
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	021b      	lsls	r3, r3, #8
 8014ed8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014edc:	431a      	orrs	r2, r3
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	0a1b      	lsrs	r3, r3, #8
 8014ee2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014ee6:	431a      	orrs	r2, r3
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	0e1b      	lsrs	r3, r3, #24
 8014eec:	431a      	orrs	r2, r3
 8014eee:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8014ef2:	7b38      	ldrb	r0, [r7, #12]
 8014ef4:	7b7c      	ldrb	r4, [r7, #13]
 8014ef6:	7bbd      	ldrb	r5, [r7, #14]
 8014ef8:	7bfe      	ldrb	r6, [r7, #15]
 8014efa:	f897 c010 	ldrb.w	ip, [r7, #16]
 8014efe:	f8c7 c000 	str.w	ip, [r7]
 8014f02:	f897 c011 	ldrb.w	ip, [r7, #17]
 8014f06:	4663      	mov	r3, ip
 8014f08:	9305      	str	r3, [sp, #20]
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	9304      	str	r3, [sp, #16]
 8014f0e:	9603      	str	r6, [sp, #12]
 8014f10:	9502      	str	r5, [sp, #8]
 8014f12:	9401      	str	r4, [sp, #4]
 8014f14:	9000      	str	r0, [sp, #0]
 8014f16:	4673      	mov	r3, lr
 8014f18:	485a      	ldr	r0, [pc, #360]	@ (8015084 <prvTCPPrepareConnect_IPV4+0x230>)
 8014f1a:	f00d fc53 	bl	80227c4 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7f2 feb3 	bl	8007c8c <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 8014f26:	2300      	movs	r3, #0
 8014f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8014f2a:	e000      	b.n	8014f2e <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8014f2c:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d010      	beq.n	8014f56 <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014f46:	f7ec fd7f 	bl	8001a48 <ulApplicationGetNextSequenceNumber>
 8014f4a:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d101      	bne.n	8014f56 <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8014f52:	2300      	movs	r3, #0
 8014f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 8014f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	f000 808d 	beq.w	8015078 <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	33aa      	adds	r3, #170	@ 0xaa
 8014f62:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 8014f64:	6a3b      	ldr	r3, [r7, #32]
 8014f66:	330e      	adds	r3, #14
 8014f68:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014f72:	687a      	ldr	r2, [r7, #4]
 8014f74:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014f78:	f043 0308 	orr.w	r3, r3, #8
 8014f7c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	33aa      	adds	r3, #170	@ 0xaa
 8014f84:	225a      	movs	r2, #90	@ 0x5a
 8014f86:	2100      	movs	r1, #0
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f00d ff44 	bl	8022e16 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8014f8e:	6a3b      	ldr	r3, [r7, #32]
 8014f90:	3306      	adds	r3, #6
 8014f92:	461a      	mov	r2, r3
 8014f94:	f107 030c 	add.w	r3, r7, #12
 8014f98:	6818      	ldr	r0, [r3, #0]
 8014f9a:	6010      	str	r0, [r2, #0]
 8014f9c:	889b      	ldrh	r3, [r3, #4]
 8014f9e:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8014fa0:	6a3b      	ldr	r3, [r7, #32]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	f042 0208 	orr.w	r2, r2, #8
 8014fa8:	731a      	strb	r2, [r3, #12]
 8014faa:	2200      	movs	r2, #0
 8014fac:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	2245      	movs	r2, #69	@ 0x45
 8014fb2:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8014fb4:	2338      	movs	r3, #56	@ 0x38
 8014fb6:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8014fb8:	8b7b      	ldrh	r3, [r7, #26]
 8014fba:	021b      	lsls	r3, r3, #8
 8014fbc:	b21a      	sxth	r2, r3
 8014fbe:	8b7b      	ldrh	r3, [r7, #26]
 8014fc0:	0a1b      	lsrs	r3, r3, #8
 8014fc2:	b29b      	uxth	r3, r3
 8014fc4:	b21b      	sxth	r3, r3
 8014fc6:	4313      	orrs	r3, r2
 8014fc8:	b21b      	sxth	r3, r3
 8014fca:	b29a      	uxth	r2, r3
 8014fcc:	69fb      	ldr	r3, [r7, #28]
 8014fce:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8014fd0:	69fb      	ldr	r3, [r7, #28]
 8014fd2:	2280      	movs	r2, #128	@ 0x80
 8014fd4:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 8014fd6:	69fb      	ldr	r3, [r7, #28]
 8014fd8:	2206      	movs	r2, #6
 8014fda:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fe0:	061a      	lsls	r2, r3, #24
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fe6:	021b      	lsls	r3, r3, #8
 8014fe8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014fec:	431a      	orrs	r2, r3
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ff2:	0a1b      	lsrs	r3, r3, #8
 8014ff4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014ff8:	431a      	orrs	r2, r3
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ffe:	0e1b      	lsrs	r3, r3, #24
 8015000:	431a      	orrs	r2, r3
 8015002:	69fb      	ldr	r3, [r7, #28]
 8015004:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801500c:	021b      	lsls	r3, r3, #8
 801500e:	b21a      	sxth	r2, r3
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015016:	0a1b      	lsrs	r3, r3, #8
 8015018:	b29b      	uxth	r3, r3
 801501a:	b21b      	sxth	r3, r3
 801501c:	4313      	orrs	r3, r2
 801501e:	b21b      	sxth	r3, r3
 8015020:	b29a      	uxth	r2, r3
 8015022:	6a3b      	ldr	r3, [r7, #32]
 8015024:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801502a:	021b      	lsls	r3, r3, #8
 801502c:	b21a      	sxth	r2, r3
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8015032:	0a1b      	lsrs	r3, r3, #8
 8015034:	b29b      	uxth	r3, r3
 8015036:	b21b      	sxth	r3, r3
 8015038:	4313      	orrs	r3, r2
 801503a:	b21b      	sxth	r3, r3
 801503c:	b29a      	uxth	r2, r3
 801503e:	6a3b      	ldr	r3, [r7, #32]
 8015040:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	2200      	movs	r2, #0
 8015046:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801504e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8015052:	6a3b      	ldr	r3, [r7, #32]
 8015054:	2250      	movs	r2, #80	@ 0x50
 8015056:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 801505a:	6a3b      	ldr	r3, [r7, #32]
 801505c:	2202      	movs	r2, #2
 801505e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f000 fc3c 	bl	80158e0 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f7fe ff2b 	bl	8013ec4 <prvTCPCreateWindow>
 801506e:	4603      	mov	r3, r0
 8015070:	2b01      	cmp	r3, #1
 8015072:	d001      	beq.n	8015078 <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 8015074:	2300      	movs	r3, #0
 8015076:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 8015078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801507a:	4618      	mov	r0, r3
 801507c:	3734      	adds	r7, #52	@ 0x34
 801507e:	46bd      	mov	sp, r7
 8015080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015082:	bf00      	nop
 8015084:	080271fc 	.word	0x080271fc

08015088 <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b086      	sub	sp, #24
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
 8015090:	460b      	mov	r3, r1
 8015092:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015098:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801509a:	2328      	movs	r3, #40	@ 0x28
 801509c:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80150a4:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 80150a6:	697b      	ldr	r3, [r7, #20]
 80150a8:	78fa      	ldrb	r2, [r7, #3]
 80150aa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80150ae:	697b      	ldr	r3, [r7, #20]
 80150b0:	2250      	movs	r2, #80	@ 0x50
 80150b2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 80150b6:	7bfb      	ldrb	r3, [r7, #15]
 80150b8:	f003 0302 	and.w	r3, r3, #2
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d02c      	beq.n	801511a <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 80150c0:	697b      	ldr	r3, [r7, #20]
 80150c2:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80150c6:	061a      	lsls	r2, r3, #24
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80150ce:	021b      	lsls	r3, r3, #8
 80150d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80150d4:	431a      	orrs	r2, r3
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80150dc:	0a1b      	lsrs	r3, r3, #8
 80150de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80150e2:	431a      	orrs	r2, r3
 80150e4:	697b      	ldr	r3, [r7, #20]
 80150e6:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80150ea:	0e1b      	lsrs	r3, r3, #24
 80150ec:	4313      	orrs	r3, r2
 80150ee:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	3301      	adds	r3, #1
 80150f4:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	061a      	lsls	r2, r3, #24
 80150fa:	68bb      	ldr	r3, [r7, #8]
 80150fc:	021b      	lsls	r3, r3, #8
 80150fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015102:	431a      	orrs	r2, r3
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	0a1b      	lsrs	r3, r3, #8
 8015108:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801510c:	431a      	orrs	r2, r3
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	0e1b      	lsrs	r3, r3, #24
 8015112:	431a      	orrs	r2, r3
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 801511a:	2300      	movs	r3, #0
 801511c:	693a      	ldr	r2, [r7, #16]
 801511e:	6879      	ldr	r1, [r7, #4]
 8015120:	2000      	movs	r0, #0
 8015122:	f7fe fd73 	bl	8013c0c <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 8015126:	2300      	movs	r3, #0
}
 8015128:	4618      	mov	r0, r3
 801512a:	3718      	adds	r7, #24
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}

08015130 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8015130:	b5b0      	push	{r4, r5, r7, lr}
 8015132:	b0aa      	sub	sp, #168	@ 0xa8
 8015134:	af00      	add	r7, sp, #0
 8015136:	60f8      	str	r0, [r7, #12]
 8015138:	60b9      	str	r1, [r7, #8]
 801513a:	607a      	str	r2, [r7, #4]
 801513c:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 801513e:	2300      	movs	r3, #0
 8015140:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8015144:	2300      	movs	r3, #0
 8015146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 801514a:	2300      	movs	r3, #0
 801514c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 8015156:	2300      	movs	r3, #0
 8015158:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8015162:	2300      	movs	r3, #0
 8015164:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 8015168:	2300      	movs	r3, #0
 801516a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 801516e:	2328      	movs	r3, #40	@ 0x28
 8015170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8015174:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015178:	2b00      	cmp	r3, #0
 801517a:	d103      	bne.n	8015184 <prvTCPReturnPacket_IPV6+0x54>
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	2b00      	cmp	r3, #0
 8015180:	f000 81ae 	beq.w	80154e0 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8015184:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015188:	2b00      	cmp	r3, #0
 801518a:	d117      	bne.n	80151bc <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 801518c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015190:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8015194:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015198:	2238      	movs	r2, #56	@ 0x38
 801519a:	2100      	movs	r1, #0
 801519c:	4618      	mov	r0, r3
 801519e:	f00d fe3a 	bl	8022e16 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 80151a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151ac:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80151ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151b2:	225a      	movs	r2, #90	@ 0x5a
 80151b4:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 80151b6:	2300      	movs	r3, #0
 80151b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 80151bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d114      	bne.n	80151ee <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 80151c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151ca:	4619      	mov	r1, r3
 80151cc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80151d0:	f7f5 fbd4 	bl	800a97c <pxDuplicateNetworkBufferWithDescriptor>
 80151d4:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 80151d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d003      	beq.n	80151e8 <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 80151e0:	2301      	movs	r3, #1
 80151e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80151e6:	e002      	b.n	80151ee <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 80151e8:	48c0      	ldr	r0, [pc, #768]	@ (80154ec <prvTCPReturnPacket_IPV6+0x3bc>)
 80151ea:	f00d faeb 	bl	80227c4 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 80151ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	f000 8175 	beq.w	80154e2 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80151f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d103      	bne.n	801520a <prvTCPReturnPacket_IPV6+0xda>
 8015202:	219d      	movs	r1, #157	@ 0x9d
 8015204:	48ba      	ldr	r0, [pc, #744]	@ (80154f0 <prvTCPReturnPacket_IPV6+0x3c0>)
 8015206:	f7ec fbff 	bl	8001a08 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801520a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801520e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015210:	330e      	adds	r3, #14
 8015212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8015216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801521c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8015220:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8015228:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801522c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801522e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8015232:	330e      	adds	r3, #14
 8015234:	4413      	add	r3, r2
 8015236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801523a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801523e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015240:	2b00      	cmp	r3, #0
 8015242:	d117      	bne.n	8015274 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8015244:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8015248:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801524c:	68f8      	ldr	r0, [r7, #12]
 801524e:	f7fe ff9f 	bl	8014190 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8015252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015258:	2b00      	cmp	r3, #0
 801525a:	d10b      	bne.n	8015274 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 801525c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015260:	2b00      	cmp	r3, #0
 8015262:	d003      	beq.n	801526c <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015264:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8015268:	f002 fc04 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 801526c:	2300      	movs	r3, #0
 801526e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8015272:	e136      	b.n	80154e2 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d025      	beq.n	80152c6 <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801527a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801527e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015282:	68f8      	ldr	r0, [r7, #12]
 8015284:	f7fe fd02 	bl	8013c8c <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801528e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015292:	68f8      	ldr	r0, [r7, #12]
 8015294:	f7fe fd74 	bl	8013d80 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015298:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801529c:	f103 0018 	add.w	r0, r3, #24
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	3354      	adds	r3, #84	@ 0x54
 80152a4:	2210      	movs	r2, #16
 80152a6:	4619      	mov	r1, r3
 80152a8:	f00d fca8 	bl	8022bfc <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80152ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152b0:	f103 0008 	add.w	r0, r3, #8
 80152b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80152b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152ba:	3338      	adds	r3, #56	@ 0x38
 80152bc:	2210      	movs	r2, #16
 80152be:	4619      	mov	r1, r3
 80152c0:	f00d fc9c 	bl	8022bfc <memcpy>
 80152c4:	e02d      	b.n	8015322 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 80152c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152ca:	685b      	ldr	r3, [r3, #4]
 80152cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80152ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152d2:	689a      	ldr	r2, [r3, #8]
 80152d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152d8:	605a      	str	r2, [r3, #4]
 80152da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80152e0:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80152e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152e6:	3318      	adds	r3, #24
 80152e8:	f107 0410 	add.w	r4, r7, #16
 80152ec:	6818      	ldr	r0, [r3, #0]
 80152ee:	6859      	ldr	r1, [r3, #4]
 80152f0:	689a      	ldr	r2, [r3, #8]
 80152f2:	68db      	ldr	r3, [r3, #12]
 80152f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80152f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152fa:	f103 0018 	add.w	r0, r3, #24
 80152fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015302:	3308      	adds	r3, #8
 8015304:	2210      	movs	r2, #16
 8015306:	4619      	mov	r1, r3
 8015308:	f00d fc78 	bl	8022bfc <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801530c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015310:	3308      	adds	r3, #8
 8015312:	461d      	mov	r5, r3
 8015314:	f107 0410 	add.w	r4, r7, #16
 8015318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801531a:	6028      	str	r0, [r5, #0]
 801531c:	6069      	str	r1, [r5, #4]
 801531e:	60aa      	str	r2, [r5, #8]
 8015320:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	b29b      	uxth	r3, r3
 8015326:	3b28      	subs	r3, #40	@ 0x28
 8015328:	b29b      	uxth	r3, r3
 801532a:	021b      	lsls	r3, r3, #8
 801532c:	b29a      	uxth	r2, r3
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	3b28      	subs	r3, #40	@ 0x28
 8015332:	0a1b      	lsrs	r3, r3, #8
 8015334:	b29b      	uxth	r3, r3
 8015336:	4313      	orrs	r3, r2
 8015338:	b29a      	uxth	r2, r3
 801533a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801533e:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8015340:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015344:	781a      	ldrb	r2, [r3, #0]
 8015346:	785b      	ldrb	r3, [r3, #1]
 8015348:	021b      	lsls	r3, r3, #8
 801534a:	4313      	orrs	r3, r2
 801534c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8015350:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015354:	885b      	ldrh	r3, [r3, #2]
 8015356:	b29a      	uxth	r2, r3
 8015358:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801535c:	801a      	strh	r2, [r3, #0]
 801535e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015362:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8015366:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8015368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801536c:	687a      	ldr	r2, [r7, #4]
 801536e:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8015370:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015376:	f103 020e 	add.w	r2, r3, #14
 801537a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801537e:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015384:	3318      	adds	r3, #24
 8015386:	f107 0420 	add.w	r4, r7, #32
 801538a:	6818      	ldr	r0, [r3, #0]
 801538c:	6859      	ldr	r1, [r3, #4]
 801538e:	689a      	ldr	r2, [r3, #8]
 8015390:	68db      	ldr	r3, [r3, #12]
 8015392:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8015394:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015398:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801539c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80153a0:	f107 0320 	add.w	r3, r7, #32
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7f6 fe89 	bl	800c0bc <eNDGetCacheEntry>
 80153aa:	4603      	mov	r3, r0
 80153ac:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 80153b0:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80153b4:	2b01      	cmp	r3, #1
 80153b6:	d104      	bne.n	80153c2 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 80153b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80153bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80153c0:	e004      	b.n	80153cc <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 80153c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80153c6:	3306      	adds	r3, #6
 80153c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 80153cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80153d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 80153d4:	2206      	movs	r2, #6
 80153d6:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80153da:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80153de:	f00d fc0d 	bl	8022bfc <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 80153e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153e8:	33e8      	adds	r3, #232	@ 0xe8
 80153ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 80153ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80153f2:	3306      	adds	r3, #6
 80153f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80153f8:	2206      	movs	r2, #6
 80153fa:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80153fe:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8015402:	f00d fbfb 	bl	8022bfc <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8015406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801540c:	2b3b      	cmp	r3, #59	@ 0x3b
 801540e:	d81a      	bhi.n	8015446 <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8015410:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015416:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801541a:	e00c      	b.n	8015436 <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 801541c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015422:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015426:	4413      	add	r3, r2
 8015428:	2200      	movs	r2, #0
 801542a:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801542c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015430:	3301      	adds	r3, #1
 8015432:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8015436:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801543a:	2b3b      	cmp	r3, #59	@ 0x3b
 801543c:	ddee      	ble.n	801541c <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 801543e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015442:	223c      	movs	r2, #60	@ 0x3c
 8015444:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8015446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801544a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801544c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015450:	2b00      	cmp	r3, #0
 8015452:	d104      	bne.n	801545e <prvTCPReturnPacket_IPV6+0x32e>
 8015454:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8015458:	4825      	ldr	r0, [pc, #148]	@ (80154f0 <prvTCPReturnPacket_IPV6+0x3c0>)
 801545a:	f7ec fad5 	bl	8001a08 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 801545e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015464:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015468:	68db      	ldr	r3, [r3, #12]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d104      	bne.n	8015478 <prvTCPReturnPacket_IPV6+0x348>
 801546e:	f240 1119 	movw	r1, #281	@ 0x119
 8015472:	481f      	ldr	r0, [pc, #124]	@ (80154f0 <prvTCPReturnPacket_IPV6+0x3c0>)
 8015474:	f7ec fac8 	bl	8001a08 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8015478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801547e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015482:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8015484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015486:	68db      	ldr	r3, [r3, #12]
 8015488:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801548c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015490:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8015492:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8015494:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015498:	2b00      	cmp	r3, #0
 801549a:	d122      	bne.n	80154e2 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 801549c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80154a0:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 80154a4:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80154a8:	021b      	lsls	r3, r3, #8
 80154aa:	4313      	orrs	r3, r2
 80154ac:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 80154b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80154b4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80154b6:	b29a      	uxth	r2, r3
 80154b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80154bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80154be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80154c2:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 80154c6:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80154c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80154cc:	f103 0008 	add.w	r0, r3, #8
 80154d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80154d4:	3318      	adds	r3, #24
 80154d6:	2210      	movs	r2, #16
 80154d8:	4619      	mov	r1, r3
 80154da:	f00d fb8f 	bl	8022bfc <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 80154de:	e000      	b.n	80154e2 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 80154e0:	bf00      	nop
}
 80154e2:	bf00      	nop
 80154e4:	37a8      	adds	r7, #168	@ 0xa8
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bdb0      	pop	{r4, r5, r7, pc}
 80154ea:	bf00      	nop
 80154ec:	0802723c 	.word	0x0802723c
 80154f0:	08027264 	.word	0x08027264

080154f4 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 80154f4:	b590      	push	{r4, r7, lr}
 80154f6:	b093      	sub	sp, #76	@ 0x4c
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80154fc:	2300      	movs	r3, #0
 80154fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8015500:	2300      	movs	r3, #0
 8015502:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8015504:	2301      	movs	r3, #1
 8015506:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 8015508:	2300      	movs	r3, #0
 801550a:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 801550c:	2300      	movs	r3, #0
 801550e:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 8015510:	2300      	movs	r3, #0
 8015512:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8015514:	f107 0310 	add.w	r3, r7, #16
 8015518:	2206      	movs	r2, #6
 801551a:	2100      	movs	r1, #0
 801551c:	4618      	mov	r0, r3
 801551e:	f00d fc7a 	bl	8022e16 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 8015522:	f107 0318 	add.w	r3, r7, #24
 8015526:	2210      	movs	r2, #16
 8015528:	2100      	movs	r1, #0
 801552a:	4618      	mov	r0, r3
 801552c:	f00d fc73 	bl	8022e16 <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	3354      	adds	r3, #84	@ 0x54
 8015534:	f107 0418 	add.w	r4, r7, #24
 8015538:	6818      	ldr	r0, [r3, #0]
 801553a:	6859      	ldr	r1, [r3, #4]
 801553c:	689a      	ldr	r2, [r3, #8]
 801553e:	68db      	ldr	r3, [r3, #12]
 8015540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 8015542:	f107 020c 	add.w	r2, r7, #12
 8015546:	f107 0110 	add.w	r1, r7, #16
 801554a:	f107 0318 	add.w	r3, r7, #24
 801554e:	4618      	mov	r0, r3
 8015550:	f7f6 fdb4 	bl	800c0bc <eNDGetCacheEntry>
 8015554:	4603      	mov	r3, r0
 8015556:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 801555a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801555e:	68fa      	ldr	r2, [r7, #12]
 8015560:	4619      	mov	r1, r3
 8015562:	4881      	ldr	r0, [pc, #516]	@ (8015768 <prvTCPPrepareConnect_IPV6+0x274>)
 8015564:	f00d f92e 	bl	80227c4 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d002      	beq.n	8015574 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 801556e:	68fa      	ldr	r2, [r7, #12]
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f7f4 ff69 	bl	800a44c <uxIPHeaderSizeSocket>
 801557a:	4603      	mov	r3, r0
 801557c:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801557e:	33a0      	adds	r3, #160	@ 0xa0
 8015580:	687a      	ldr	r2, [r7, #4]
 8015582:	4413      	add	r3, r2
 8015584:	330a      	adds	r3, #10
 8015586:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 8015588:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801558c:	2b01      	cmp	r3, #1
 801558e:	d02c      	beq.n	80155ea <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8015596:	3301      	adds	r3, #1
 8015598:	b2da      	uxtb	r2, r3
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d001      	beq.n	80155aa <prvTCPPrepareConnect_IPV6+0xb6>
 80155a6:	4a71      	ldr	r2, [pc, #452]	@ (801576c <prvTCPPrepareConnect_IPV6+0x278>)
 80155a8:	e000      	b.n	80155ac <prvTCPPrepareConnect_IPV6+0xb8>
 80155aa:	4a71      	ldr	r2, [pc, #452]	@ (8015770 <prvTCPPrepareConnect_IPV6+0x27c>)
 80155ac:	f107 0318 	add.w	r3, r7, #24
 80155b0:	4619      	mov	r1, r3
 80155b2:	4870      	ldr	r0, [pc, #448]	@ (8015774 <prvTCPPrepareConnect_IPV6+0x280>)
 80155b4:	f00d f906 	bl	80227c4 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d012      	beq.n	80155e4 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 80155be:	2356      	movs	r3, #86	@ 0x56
 80155c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 80155c2:	2100      	movs	r1, #0
 80155c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80155c6:	f002 f9ed 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 80155ca:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 80155cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d008      	beq.n	80155e4 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80155d2:	68fa      	ldr	r2, [r7, #12]
 80155d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155d6:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 80155d8:	f107 0318 	add.w	r3, r7, #24
 80155dc:	4619      	mov	r1, r3
 80155de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155e0:	f7f6 ffd8 	bl	800c594 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 80155e4:	2300      	movs	r3, #0
 80155e6:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 80155e8:	e000      	b.n	80155ec <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 80155ea:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 80155ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d010      	beq.n	8015614 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015604:	f7ec fa20 	bl	8001a48 <ulApplicationGetNextSequenceNumber>
 8015608:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 801560a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801560c:	2b00      	cmp	r3, #0
 801560e:	d101      	bne.n	8015614 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 8015610:	2300      	movs	r3, #0
 8015612:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 8015614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015616:	2b00      	cmp	r3, #0
 8015618:	d05d      	beq.n	80156d6 <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	33aa      	adds	r3, #170	@ 0xaa
 801561e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 8015620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015622:	330e      	adds	r3, #14
 8015624:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2200      	movs	r2, #0
 801562a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 801562e:	687a      	ldr	r2, [r7, #4]
 8015630:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8015634:	f043 0308 	orr.w	r3, r3, #8
 8015638:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	33aa      	adds	r3, #170	@ 0xaa
 8015640:	225a      	movs	r2, #90	@ 0x5a
 8015642:	2100      	movs	r1, #0
 8015644:	4618      	mov	r0, r3
 8015646:	f00d fbe6 	bl	8022e16 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 801564a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801564c:	3306      	adds	r3, #6
 801564e:	461a      	mov	r2, r3
 8015650:	f107 0310 	add.w	r3, r7, #16
 8015654:	6818      	ldr	r0, [r3, #0]
 8015656:	6010      	str	r0, [r2, #0]
 8015658:	889b      	ldrh	r3, [r3, #4]
 801565a:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	7a1b      	ldrb	r3, [r3, #8]
 8015660:	f003 0301 	and.w	r3, r3, #1
 8015664:	b2db      	uxtb	r3, r3
 8015666:	2b00      	cmp	r3, #0
 8015668:	d035      	beq.n	80156d6 <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 801566a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801566c:	2200      	movs	r2, #0
 801566e:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8015672:	731a      	strb	r2, [r3, #12]
 8015674:	2200      	movs	r2, #0
 8015676:	f062 0222 	orn	r2, r2, #34	@ 0x22
 801567a:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 801567c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801567e:	2260      	movs	r2, #96	@ 0x60
 8015680:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8015682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015684:	2200      	movs	r2, #0
 8015686:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 8015688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801568a:	2200      	movs	r2, #0
 801568c:	709a      	strb	r2, [r3, #2]
 801568e:	2200      	movs	r2, #0
 8015690:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8015692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015694:	2200      	movs	r2, #0
 8015696:	711a      	strb	r2, [r3, #4]
 8015698:	2200      	movs	r2, #0
 801569a:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 801569e:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 80156a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a2:	2206      	movs	r2, #6
 80156a4:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 80156a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a8:	2280      	movs	r2, #128	@ 0x80
 80156aa:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 80156ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ae:	f103 0008 	add.w	r0, r3, #8
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	3354      	adds	r3, #84	@ 0x54
 80156b6:	2210      	movs	r2, #16
 80156b8:	4619      	mov	r1, r3
 80156ba:	f00d fa9f 	bl	8022bfc <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 80156be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156c0:	f103 0018 	add.w	r0, r3, #24
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	3328      	adds	r3, #40	@ 0x28
 80156c8:	2210      	movs	r2, #16
 80156ca:	4619      	mov	r1, r3
 80156cc:	f00d fa96 	bl	8022bfc <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156d4:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d03a      	beq.n	8015752 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 80156dc:	68fa      	ldr	r2, [r7, #12]
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80156e8:	021b      	lsls	r3, r3, #8
 80156ea:	b21a      	sxth	r2, r3
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80156f2:	0a1b      	lsrs	r3, r3, #8
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	b21b      	sxth	r3, r3
 80156f8:	4313      	orrs	r3, r2
 80156fa:	b21b      	sxth	r3, r3
 80156fc:	b29a      	uxth	r2, r3
 80156fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015700:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8015706:	021b      	lsls	r3, r3, #8
 8015708:	b21a      	sxth	r2, r3
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801570e:	0a1b      	lsrs	r3, r3, #8
 8015710:	b29b      	uxth	r3, r3
 8015712:	b21b      	sxth	r3, r3
 8015714:	4313      	orrs	r3, r2
 8015716:	b21b      	sxth	r3, r3
 8015718:	b29a      	uxth	r2, r3
 801571a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801571c:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2200      	movs	r2, #0
 8015722:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801572a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 801572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015730:	2250      	movs	r2, #80	@ 0x50
 8015732:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8015734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015736:	2202      	movs	r2, #2
 8015738:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f000 f8d0 	bl	80158e0 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f7fe fbbf 	bl	8013ec4 <prvTCPCreateWindow>
 8015746:	4603      	mov	r3, r0
 8015748:	2b01      	cmp	r3, #1
 801574a:	d007      	beq.n	801575c <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 801574c:	2300      	movs	r3, #0
 801574e:	647b      	str	r3, [r7, #68]	@ 0x44
 8015750:	e004      	b.n	801575c <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 8015752:	4809      	ldr	r0, [pc, #36]	@ (8015778 <prvTCPPrepareConnect_IPV6+0x284>)
 8015754:	f00d f836 	bl	80227c4 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 8015758:	2300      	movs	r3, #0
 801575a:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 801575c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 801575e:	4618      	mov	r0, r3
 8015760:	374c      	adds	r7, #76	@ 0x4c
 8015762:	46bd      	mov	sp, r7
 8015764:	bd90      	pop	{r4, r7, pc}
 8015766:	bf00      	nop
 8015768:	080272a4 	.word	0x080272a4
 801576c:	080272cc 	.word	0x080272cc
 8015770:	080272d0 	.word	0x080272d0
 8015774:	080272d4 	.word	0x080272d4
 8015778:	080272f8 	.word	0x080272f8

0801577c <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b086      	sub	sp, #24
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
 8015784:	460b      	mov	r3, r1
 8015786:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801578c:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801578e:	233c      	movs	r3, #60	@ 0x3c
 8015790:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8015792:	697b      	ldr	r3, [r7, #20]
 8015794:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015798:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801579a:	697b      	ldr	r3, [r7, #20]
 801579c:	78fa      	ldrb	r2, [r7, #3]
 801579e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	2250      	movs	r2, #80	@ 0x50
 80157a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 80157aa:	7bfb      	ldrb	r3, [r7, #15]
 80157ac:	f003 0302 	and.w	r3, r3, #2
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d02c      	beq.n	801580e <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80157ba:	061a      	lsls	r2, r3, #24
 80157bc:	697b      	ldr	r3, [r7, #20]
 80157be:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80157c2:	021b      	lsls	r3, r3, #8
 80157c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80157c8:	431a      	orrs	r2, r3
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80157d0:	0a1b      	lsrs	r3, r3, #8
 80157d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80157d6:	431a      	orrs	r2, r3
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80157de:	0e1b      	lsrs	r3, r3, #24
 80157e0:	4313      	orrs	r3, r2
 80157e2:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	3301      	adds	r3, #1
 80157e8:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	061a      	lsls	r2, r3, #24
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	021b      	lsls	r3, r3, #8
 80157f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80157f6:	431a      	orrs	r2, r3
 80157f8:	68bb      	ldr	r3, [r7, #8]
 80157fa:	0a1b      	lsrs	r3, r3, #8
 80157fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015800:	431a      	orrs	r2, r3
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	0e1b      	lsrs	r3, r3, #24
 8015806:	431a      	orrs	r2, r3
 8015808:	697b      	ldr	r3, [r7, #20]
 801580a:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 801580e:	2300      	movs	r3, #0
 8015810:	693a      	ldr	r2, [r7, #16]
 8015812:	6879      	ldr	r1, [r7, #4]
 8015814:	2000      	movs	r0, #0
 8015816:	f7fe f9f9 	bl	8013c0c <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 801581a:	2300      	movs	r3, #0
}
 801581c:	4618      	mov	r0, r3
 801581e:	3718      	adds	r7, #24
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 8015824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015826:	b08d      	sub	sp, #52	@ 0x34
 8015828:	af08      	add	r7, sp, #32
 801582a:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 8015836:	2b00      	cmp	r3, #0
 8015838:	d002      	beq.n	8015840 <prvTCPFlagMeaning+0x1c>
 801583a:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 801583e:	e001      	b.n	8015844 <prvTCPFlagMeaning+0x20>
 8015840:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 801584a:	2b00      	cmp	r3, #0
 801584c:	d001      	beq.n	8015852 <prvTCPFlagMeaning+0x2e>
 801584e:	2353      	movs	r3, #83	@ 0x53
 8015850:	e000      	b.n	8015854 <prvTCPFlagMeaning+0x30>
 8015852:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 8015854:	68fa      	ldr	r2, [r7, #12]
 8015856:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 801585a:	2a00      	cmp	r2, #0
 801585c:	d001      	beq.n	8015862 <prvTCPFlagMeaning+0x3e>
 801585e:	2252      	movs	r2, #82	@ 0x52
 8015860:	e000      	b.n	8015864 <prvTCPFlagMeaning+0x40>
 8015862:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 8015864:	68f9      	ldr	r1, [r7, #12]
 8015866:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 801586a:	2900      	cmp	r1, #0
 801586c:	d001      	beq.n	8015872 <prvTCPFlagMeaning+0x4e>
 801586e:	2150      	movs	r1, #80	@ 0x50
 8015870:	e000      	b.n	8015874 <prvTCPFlagMeaning+0x50>
 8015872:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 8015874:	68f8      	ldr	r0, [r7, #12]
 8015876:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 801587a:	2800      	cmp	r0, #0
 801587c:	d001      	beq.n	8015882 <prvTCPFlagMeaning+0x5e>
 801587e:	2041      	movs	r0, #65	@ 0x41
 8015880:	e000      	b.n	8015884 <prvTCPFlagMeaning+0x60>
 8015882:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8015884:	68fc      	ldr	r4, [r7, #12]
 8015886:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 801588a:	2c00      	cmp	r4, #0
 801588c:	d001      	beq.n	8015892 <prvTCPFlagMeaning+0x6e>
 801588e:	2455      	movs	r4, #85	@ 0x55
 8015890:	e000      	b.n	8015894 <prvTCPFlagMeaning+0x70>
 8015892:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8015894:	68fd      	ldr	r5, [r7, #12]
 8015896:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 801589a:	2d00      	cmp	r5, #0
 801589c:	d001      	beq.n	80158a2 <prvTCPFlagMeaning+0x7e>
 801589e:	2545      	movs	r5, #69	@ 0x45
 80158a0:	e000      	b.n	80158a4 <prvTCPFlagMeaning+0x80>
 80158a2:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 80158a4:	68fe      	ldr	r6, [r7, #12]
 80158a6:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 80158aa:	2e00      	cmp	r6, #0
 80158ac:	d001      	beq.n	80158b2 <prvTCPFlagMeaning+0x8e>
 80158ae:	2643      	movs	r6, #67	@ 0x43
 80158b0:	e000      	b.n	80158b4 <prvTCPFlagMeaning+0x90>
 80158b2:	262e      	movs	r6, #46	@ 0x2e
 80158b4:	9606      	str	r6, [sp, #24]
 80158b6:	9505      	str	r5, [sp, #20]
 80158b8:	9404      	str	r4, [sp, #16]
 80158ba:	9003      	str	r0, [sp, #12]
 80158bc:	9102      	str	r1, [sp, #8]
 80158be:	9201      	str	r2, [sp, #4]
 80158c0:	9300      	str	r3, [sp, #0]
 80158c2:	4663      	mov	r3, ip
 80158c4:	4a04      	ldr	r2, [pc, #16]	@ (80158d8 <prvTCPFlagMeaning+0xb4>)
 80158c6:	210a      	movs	r1, #10
 80158c8:	4804      	ldr	r0, [pc, #16]	@ (80158dc <prvTCPFlagMeaning+0xb8>)
 80158ca:	f00d ffa7 	bl	802381c <snprintf>
            return retString;
 80158ce:	4b03      	ldr	r3, [pc, #12]	@ (80158dc <prvTCPFlagMeaning+0xb8>)
        }
 80158d0:	4618      	mov	r0, r3
 80158d2:	3714      	adds	r7, #20
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158d8:	08027324 	.word	0x08027324
 80158dc:	20001628 	.word	0x20001628

080158e0 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	7a1b      	ldrb	r3, [r3, #8]
 80158ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80158f0:	b2db      	uxtb	r3, r3
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d002      	beq.n	80158fc <prvSocketSetMSS+0x1c>
 80158f6:	2b01      	cmp	r3, #1
 80158f8:	d004      	beq.n	8015904 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 80158fa:	e007      	b.n	801590c <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f000 f809 	bl	8015914 <prvSocketSetMSS_IPV4>
                    break;
 8015902:	e003      	b.n	801590c <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f000 f84b 	bl	80159a0 <prvSocketSetMSS_IPV6>
                    break;
 801590a:	bf00      	nop
        }
    }
 801590c:	bf00      	nop
 801590e:	3708      	adds	r7, #8
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}

08015914 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b084      	sub	sp, #16
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 801591c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015920:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015926:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d023      	beq.n	8015976 <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 801592e:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015932:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015938:	061a      	lsls	r2, r3, #24
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801593e:	021b      	lsls	r3, r3, #8
 8015940:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015944:	431a      	orrs	r2, r3
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801594a:	0a1b      	lsrs	r3, r3, #8
 801594c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015950:	431a      	orrs	r2, r3
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015956:	0e1b      	lsrs	r3, r3, #24
 8015958:	431a      	orrs	r2, r3
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	405a      	eors	r2, r3
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	685b      	ldr	r3, [r3, #4]
 8015964:	4013      	ands	r3, r2
 8015966:	2b00      	cmp	r3, #0
 8015968:	d005      	beq.n	8015976 <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 801596a:	68f9      	ldr	r1, [r7, #12]
 801596c:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8015970:	f7f5 faa0 	bl	800aeb4 <FreeRTOS_min_uint32>
 8015974:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015980:	68f9      	ldr	r1, [r7, #12]
 8015982:	4806      	ldr	r0, [pc, #24]	@ (801599c <prvSocketSetMSS_IPV4+0x88>)
 8015984:	f00c ff1e 	bl	80227c4 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	b29a      	uxth	r2, r3
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8015992:	bf00      	nop
 8015994:	3710      	adds	r7, #16
 8015996:	46bd      	mov	sp, r7
 8015998:	bd80      	pop	{r7, pc}
 801599a:	bf00      	nop
 801599c:	08027338 	.word	0x08027338

080159a0 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b090      	sub	sp, #64	@ 0x40
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 80159a8:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80159ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 80159ae:	2300      	movs	r3, #0
 80159b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d103      	bne.n	80159c0 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 80159b8:	481f      	ldr	r0, [pc, #124]	@ (8015a38 <prvSocketSetMSS_IPV6+0x98>)
 80159ba:	f00c ff03 	bl	80227c4 <lUDPLoggingPrintf>

            break;
 80159be:	e036      	b.n	8015a2e <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80159c4:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 80159c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d018      	beq.n	80159fe <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 80159cc:	2314      	movs	r3, #20
 80159ce:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 80159d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80159d2:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80159d6:	1a9b      	subs	r3, r3, r2
 80159d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	3354      	adds	r3, #84	@ 0x54
 80159de:	4618      	mov	r0, r3
 80159e0:	f7f8 fc96 	bl	800e310 <xIPv6_GetIPType>
 80159e4:	4603      	mov	r3, r0
 80159e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 80159ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d105      	bne.n	80159fe <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 80159f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80159f4:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80159f8:	f7f5 fa5c 	bl	800aeb4 <FreeRTOS_min_uint32>
 80159fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8015a04:	f107 0208 	add.w	r2, r7, #8
 8015a08:	2328      	movs	r3, #40	@ 0x28
 8015a0a:	200a      	movs	r0, #10
 8015a0c:	f7f9 ffa2 	bl	800f954 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015a16:	f107 0208 	add.w	r2, r7, #8
 8015a1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015a1c:	4807      	ldr	r0, [pc, #28]	@ (8015a3c <prvSocketSetMSS_IPV6+0x9c>)
 8015a1e:	f00c fed1 	bl	80227c4 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8015a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a24:	b29a      	uxth	r2, r3
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 8015a2c:	bf00      	nop
 8015a2e:	bf00      	nop
 8015a30:	3740      	adds	r7, #64	@ 0x40
 8015a32:	46bd      	mov	sp, r7
 8015a34:	bd80      	pop	{r7, pc}
 8015a36:	bf00      	nop
 8015a38:	08027364 	.word	0x08027364
 8015a3c:	08027390 	.word	0x08027390

08015a40 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8015a40:	b480      	push	{r7}
 8015a42:	b085      	sub	sp, #20
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 8015a4e:	683a      	ldr	r2, [r7, #0]
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	1ad3      	subs	r3, r2, r3
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	db01      	blt.n	8015a5c <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 8015a58:	2301      	movs	r3, #1
 8015a5a:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8015a5c:	68fb      	ldr	r3, [r7, #12]
        }
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3714      	adds	r7, #20
 8015a62:	46bd      	mov	sp, r7
 8015a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a68:	4770      	bx	lr

08015a6a <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 8015a6a:	b480      	push	{r7}
 8015a6c:	b085      	sub	sp, #20
 8015a6e:	af00      	add	r7, sp, #0
 8015a70:	6078      	str	r0, [r7, #4]
 8015a72:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015a74:	2300      	movs	r3, #0
 8015a76:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 8015a78:	683a      	ldr	r2, [r7, #0]
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	1ad3      	subs	r3, r2, r3
 8015a7e:	3b01      	subs	r3, #1
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	db01      	blt.n	8015a88 <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8015a84:	2301      	movs	r3, #1
 8015a86:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015a88:	68fb      	ldr	r3, [r7, #12]
    }
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3714      	adds	r7, #20
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a94:	4770      	bx	lr

08015a96 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 8015a96:	b480      	push	{r7}
 8015a98:	b085      	sub	sp, #20
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	6078      	str	r0, [r7, #4]
 8015a9e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 8015aa4:	687a      	ldr	r2, [r7, #4]
 8015aa6:	683b      	ldr	r3, [r7, #0]
 8015aa8:	1ad3      	subs	r3, r2, r3
 8015aaa:	3b01      	subs	r3, #1
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	db01      	blt.n	8015ab4 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015ab4:	68fb      	ldr	r3, [r7, #12]
    }
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3714      	adds	r7, #20
 8015aba:	46bd      	mov	sp, r7
 8015abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac0:	4770      	bx	lr

08015ac2 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8015ac2:	b480      	push	{r7}
 8015ac4:	b085      	sub	sp, #20
 8015ac6:	af00      	add	r7, sp, #0
 8015ac8:	6078      	str	r0, [r7, #4]
 8015aca:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015acc:	2300      	movs	r3, #0
 8015ace:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	1ad3      	subs	r3, r2, r3
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	db01      	blt.n	8015ade <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 8015ada:	2301      	movs	r3, #1
 8015adc:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015ade:	68fb      	ldr	r3, [r7, #12]
    }
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	3714      	adds	r7, #20
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aea:	4770      	bx	lr

08015aec <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
 8015af4:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	3308      	adds	r3, #8
 8015afa:	461a      	mov	r2, r3
 8015afc:	6839      	ldr	r1, [r7, #0]
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f000 f822 	bl	8015b48 <vListInsertGeneric>
        }
 8015b04:	bf00      	nop
 8015b06:	3708      	adds	r7, #8
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd80      	pop	{r7, pc}

08015b0c <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b082      	sub	sp, #8
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8015b14:	f7ef f8e6 	bl	8004ce4 <xTaskGetTickCount>
 8015b18:	4602      	mov	r2, r0
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	601a      	str	r2, [r3, #0]
    }
 8015b1e:	bf00      	nop
 8015b20:	3708      	adds	r7, #8
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}

08015b26 <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 8015b26:	b580      	push	{r7, lr}
 8015b28:	b084      	sub	sp, #16
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8015b2e:	f7ef f8d9 	bl	8004ce4 <xTaskGetTickCount>
 8015b32:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	68fa      	ldr	r2, [r7, #12]
 8015b3a:	1ad3      	subs	r3, r2, r3
 8015b3c:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8015b3e:	68bb      	ldr	r3, [r7, #8]
    }
 8015b40:	4618      	mov	r0, r3
 8015b42:	3710      	adds	r7, #16
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}

08015b48 <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 8015b48:	b480      	push	{r7}
 8015b4a:	b085      	sub	sp, #20
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	60f8      	str	r0, [r7, #12]
 8015b50:	60b9      	str	r1, [r7, #8]
 8015b52:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	687a      	ldr	r2, [r7, #4]
 8015b58:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	689a      	ldr	r2, [r3, #8]
 8015b5e:	68bb      	ldr	r3, [r7, #8]
 8015b60:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	689b      	ldr	r3, [r3, #8]
 8015b66:	68ba      	ldr	r2, [r7, #8]
 8015b68:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	68ba      	ldr	r2, [r7, #8]
 8015b6e:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	68fa      	ldr	r2, [r7, #12]
 8015b74:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	1c5a      	adds	r2, r3, #1
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	601a      	str	r2, [r3, #0]
        }
 8015b80:	bf00      	nop
 8015b82:	3714      	adds	r7, #20
 8015b84:	46bd      	mov	sp, r7
 8015b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8a:	4770      	bx	lr

08015b8c <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b082      	sub	sp, #8
 8015b90:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8015b92:	4827      	ldr	r0, [pc, #156]	@ (8015c30 <prvCreateSectors+0xa4>)
 8015b94:	f7ed fe22 	bl	80037dc <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8015b98:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8015b9c:	f7f0 ff12 	bl	80069c4 <pvPortMalloc>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	4a24      	ldr	r2, [pc, #144]	@ (8015c34 <prvCreateSectors+0xa8>)
 8015ba4:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 8015ba6:	4b23      	ldr	r3, [pc, #140]	@ (8015c34 <prvCreateSectors+0xa8>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d107      	bne.n	8015bbe <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8015bae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8015bb2:	4821      	ldr	r0, [pc, #132]	@ (8015c38 <prvCreateSectors+0xac>)
 8015bb4:	f00c fe06 	bl	80227c4 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	603b      	str	r3, [r7, #0]
 8015bbc:	e032      	b.n	8015c24 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8015bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8015c34 <prvCreateSectors+0xa8>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015bc6:	2100      	movs	r1, #0
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f00d f924 	bl	8022e16 <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015bce:	2300      	movs	r3, #0
 8015bd0:	607b      	str	r3, [r7, #4]
 8015bd2:	e022      	b.n	8015c1a <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015bd4:	4b17      	ldr	r3, [pc, #92]	@ (8015c34 <prvCreateSectors+0xa8>)
 8015bd6:	6819      	ldr	r1, [r3, #0]
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	019a      	lsls	r2, r3, #6
 8015bdc:	4b15      	ldr	r3, [pc, #84]	@ (8015c34 <prvCreateSectors+0xa8>)
 8015bde:	6818      	ldr	r0, [r3, #0]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	019b      	lsls	r3, r3, #6
 8015be4:	4403      	add	r3, r0
 8015be6:	440a      	add	r2, r1
 8015be8:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015bea:	4b12      	ldr	r3, [pc, #72]	@ (8015c34 <prvCreateSectors+0xa8>)
 8015bec:	6819      	ldr	r1, [r3, #0]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	019a      	lsls	r2, r3, #6
 8015bf2:	4b10      	ldr	r3, [pc, #64]	@ (8015c34 <prvCreateSectors+0xa8>)
 8015bf4:	6818      	ldr	r0, [r3, #0]
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	019b      	lsls	r3, r3, #6
 8015bfa:	4403      	add	r3, r0
 8015bfc:	440a      	add	r2, r1
 8015bfe:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8015c00:	4b0c      	ldr	r3, [pc, #48]	@ (8015c34 <prvCreateSectors+0xa8>)
 8015c02:	681a      	ldr	r2, [r3, #0]
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	019b      	lsls	r3, r3, #6
 8015c08:	4413      	add	r3, r2
 8015c0a:	332c      	adds	r3, #44	@ 0x2c
 8015c0c:	4619      	mov	r1, r3
 8015c0e:	4808      	ldr	r0, [pc, #32]	@ (8015c30 <prvCreateSectors+0xa4>)
 8015c10:	f7ff ff6c 	bl	8015aec <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	3301      	adds	r3, #1
 8015c18:	607b      	str	r3, [r7, #4]
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8015c1e:	ddd9      	ble.n	8015bd4 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8015c20:	2301      	movs	r3, #1
 8015c22:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8015c24:	683b      	ldr	r3, [r7, #0]
        }
 8015c26:	4618      	mov	r0, r3
 8015c28:	3708      	adds	r7, #8
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}
 8015c2e:	bf00      	nop
 8015c30:	20001638 	.word	0x20001638
 8015c34:	20001634 	.word	0x20001634
 8015c38:	080273c0 	.word	0x080273c0

08015c3c <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8015c3c:	b480      	push	{r7}
 8015c3e:	b087      	sub	sp, #28
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
 8015c44:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 8015c46:	2300      	movs	r3, #0
 8015c48:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	33ac      	adds	r3, #172	@ 0xac
 8015c4e:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	685b      	ldr	r3, [r3, #4]
 8015c54:	617b      	str	r3, [r7, #20]
 8015c56:	e00d      	b.n	8015c74 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	68db      	ldr	r3, [r3, #12]
 8015c5c:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8015c5e:	68bb      	ldr	r3, [r7, #8]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	683a      	ldr	r2, [r7, #0]
 8015c64:	429a      	cmp	r2, r3
 8015c66:	d102      	bne.n	8015c6e <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	613b      	str	r3, [r7, #16]
                    break;
 8015c6c:	e006      	b.n	8015c7c <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	685b      	ldr	r3, [r3, #4]
 8015c72:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 8015c74:	697a      	ldr	r2, [r7, #20]
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	d1ed      	bne.n	8015c58 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 8015c7c:	693b      	ldr	r3, [r7, #16]
        }
 8015c7e:	4618      	mov	r0, r3
 8015c80:	371c      	adds	r7, #28
 8015c82:	46bd      	mov	sp, r7
 8015c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c88:	4770      	bx	lr
	...

08015c8c <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b088      	sub	sp, #32
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	60f8      	str	r0, [r7, #12]
 8015c94:	60b9      	str	r1, [r7, #8]
 8015c96:	607a      	str	r2, [r7, #4]
 8015c98:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8015c9a:	4b33      	ldr	r3, [pc, #204]	@ (8015d68 <xTCPWindowNew+0xdc>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d10c      	bne.n	8015cbc <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d001      	beq.n	8015cac <xTCPWindowNew+0x20>
 8015ca8:	2352      	movs	r3, #82	@ 0x52
 8015caa:	e000      	b.n	8015cae <xTCPWindowNew+0x22>
 8015cac:	2354      	movs	r3, #84	@ 0x54
 8015cae:	4619      	mov	r1, r3
 8015cb0:	482e      	ldr	r0, [pc, #184]	@ (8015d6c <xTCPWindowNew+0xe0>)
 8015cb2:	f00c fd87 	bl	80227c4 <lUDPLoggingPrintf>
                pxSegment = NULL;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	61fb      	str	r3, [r7, #28]
 8015cba:	e04f      	b.n	8015d5c <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8015cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8015d68 <xTCPWindowNew+0xdc>)
 8015cbe:	68db      	ldr	r3, [r3, #12]
 8015cc0:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015cc2:	69bb      	ldr	r3, [r7, #24]
 8015cc4:	68db      	ldr	r3, [r3, #12]
 8015cc6:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 8015cc8:	69bb      	ldr	r3, [r7, #24]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d104      	bne.n	8015cd8 <xTCPWindowNew+0x4c>
 8015cce:	f240 2125 	movw	r1, #549	@ 0x225
 8015cd2:	4827      	ldr	r0, [pc, #156]	@ (8015d70 <xTCPWindowNew+0xe4>)
 8015cd4:	f7eb fe98 	bl	8001a08 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 8015cd8:	69fb      	ldr	r3, [r7, #28]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d104      	bne.n	8015ce8 <xTCPWindowNew+0x5c>
 8015cde:	f240 2126 	movw	r1, #550	@ 0x226
 8015ce2:	4823      	ldr	r0, [pc, #140]	@ (8015d70 <xTCPWindowNew+0xe4>)
 8015ce4:	f7eb fe90 	bl	8001a08 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 8015ce8:	69b8      	ldr	r0, [r7, #24]
 8015cea:	f7ed fe01 	bl	80038f0 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d006      	beq.n	8015d02 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	33a4      	adds	r3, #164	@ 0xa4
 8015cf8:	69b9      	ldr	r1, [r7, #24]
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7ff fef6 	bl	8015aec <vListInsertFifo>
 8015d00:	e005      	b.n	8015d0e <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	3390      	adds	r3, #144	@ 0x90
 8015d06:	69b9      	ldr	r1, [r7, #24]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7ff feef 	bl	8015aec <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8015d0e:	69fb      	ldr	r3, [r7, #28]
 8015d10:	3310      	adds	r3, #16
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7ff fefa 	bl	8015b0c <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 8015d18:	69fb      	ldr	r3, [r7, #28]
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8015d1e:	683b      	ldr	r3, [r7, #0]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d001      	beq.n	8015d28 <xTCPWindowNew+0x9c>
 8015d24:	2101      	movs	r1, #1
 8015d26:	e000      	b.n	8015d2a <xTCPWindowNew+0x9e>
 8015d28:	2100      	movs	r1, #0
 8015d2a:	69fa      	ldr	r2, [r7, #28]
 8015d2c:	7d93      	ldrb	r3, [r2, #22]
 8015d2e:	f361 0382 	bfi	r3, r1, #2, #1
 8015d32:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8015d34:	69fb      	ldr	r3, [r7, #28]
 8015d36:	687a      	ldr	r2, [r7, #4]
 8015d38:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 8015d3a:	69fb      	ldr	r3, [r7, #28]
 8015d3c:	687a      	ldr	r2, [r7, #4]
 8015d3e:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8015d40:	69fb      	ldr	r3, [r7, #28]
 8015d42:	68ba      	ldr	r2, [r7, #8]
 8015d44:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8015d46:	4b08      	ldr	r3, [pc, #32]	@ (8015d68 <xTCPWindowNew+0xdc>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8015d4c:	4b09      	ldr	r3, [pc, #36]	@ (8015d74 <xTCPWindowNew+0xe8>)
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	697a      	ldr	r2, [r7, #20]
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d202      	bcs.n	8015d5c <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 8015d56:	4a07      	ldr	r2, [pc, #28]	@ (8015d74 <xTCPWindowNew+0xe8>)
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8015d5c:	69fb      	ldr	r3, [r7, #28]
        }
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3720      	adds	r7, #32
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}
 8015d66:	bf00      	nop
 8015d68:	20001638 	.word	0x20001638
 8015d6c:	080273e4 	.word	0x080273e4
 8015d70:	08027414 	.word	0x08027414
 8015d74:	2000001c 	.word	0x2000001c

08015d78 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b084      	sub	sp, #16
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d002      	beq.n	8015d90 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	60fb      	str	r3, [r7, #12]
 8015d8e:	e01e      	b.n	8015dce <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	691b      	ldr	r3, [r3, #16]
 8015d94:	1c5a      	adds	r2, r3, #1
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	699b      	ldr	r3, [r3, #24]
 8015d9a:	4619      	mov	r1, r3
 8015d9c:	4610      	mov	r0, r2
 8015d9e:	f7ff fe90 	bl	8015ac2 <xSequenceGreaterThanOrEqual>
 8015da2:	4603      	mov	r3, r0
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d002      	beq.n	8015dae <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8015da8:	2301      	movs	r3, #1
 8015daa:	60fb      	str	r3, [r7, #12]
 8015dac:	e00f      	b.n	8015dce <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	691a      	ldr	r2, [r3, #16]
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	68db      	ldr	r3, [r3, #12]
 8015db6:	1ad1      	subs	r1, r2, r3
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	699a      	ldr	r2, [r3, #24]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	68db      	ldr	r3, [r3, #12]
 8015dc0:	1ad3      	subs	r3, r2, r3
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	4804      	ldr	r0, [pc, #16]	@ (8015dd8 <xTCPWindowRxEmpty+0x60>)
 8015dc6:	f00c fcfd 	bl	80227c4 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8015dce:	68fb      	ldr	r3, [r7, #12]
        }
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	3710      	adds	r7, #16
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	08027444 	.word	0x08027444

08015ddc <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b084      	sub	sp, #16
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d102      	bne.n	8015df2 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8015dec:	2300      	movs	r3, #0
 8015dee:	60fb      	str	r3, [r7, #12]
 8015df0:	e008      	b.n	8015e04 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	68db      	ldr	r3, [r3, #12]
 8015df6:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	68db      	ldr	r3, [r3, #12]
 8015dfc:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8015dfe:	68b8      	ldr	r0, [r7, #8]
 8015e00:	f7ed fd76 	bl	80038f0 <uxListRemove>
            }

            return pxSegment;
 8015e04:	68fb      	ldr	r3, [r7, #12]
        }
 8015e06:	4618      	mov	r0, r3
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}

08015e0e <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8015e0e:	b480      	push	{r7}
 8015e10:	b085      	sub	sp, #20
 8015e12:	af00      	add	r7, sp, #0
 8015e14:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d102      	bne.n	8015e24 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	60fb      	str	r3, [r7, #12]
 8015e22:	e005      	b.n	8015e30 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	68db      	ldr	r3, [r3, #12]
 8015e28:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015e2a:	68bb      	ldr	r3, [r7, #8]
 8015e2c:	68db      	ldr	r3, [r3, #12]
 8015e2e:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8015e30:	68fb      	ldr	r3, [r7, #12]
        }
 8015e32:	4618      	mov	r0, r3
 8015e34:	3714      	adds	r7, #20
 8015e36:	46bd      	mov	sp, r7
 8015e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3c:	4770      	bx	lr
	...

08015e40 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d004      	beq.n	8015e5a <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	3318      	adds	r3, #24
 8015e54:	4618      	mov	r0, r3
 8015e56:	f7ed fd4b 	bl	80038f0 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2200      	movs	r2, #0
 8015e64:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	2200      	movs	r2, #0
 8015e6a:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d004      	beq.n	8015e7e <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	332c      	adds	r3, #44	@ 0x2c
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7ed fd39 	bl	80038f0 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	332c      	adds	r3, #44	@ 0x2c
 8015e82:	4619      	mov	r1, r3
 8015e84:	4803      	ldr	r0, [pc, #12]	@ (8015e94 <vTCPWindowFree+0x54>)
 8015e86:	f7ff fe31 	bl	8015aec <vListInsertFifo>
        }
 8015e8a:	bf00      	nop
 8015e8c:	3708      	adds	r7, #8
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	bd80      	pop	{r7, pc}
 8015e92:	bf00      	nop
 8015e94:	20001638 	.word	0x20001638

08015e98 <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b086      	sub	sp, #24
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	613b      	str	r3, [r7, #16]
 8015ea4:	e01d      	b.n	8015ee2 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 8015ea6:	693b      	ldr	r3, [r7, #16]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d003      	beq.n	8015eb4 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	33a4      	adds	r3, #164	@ 0xa4
 8015eb0:	617b      	str	r3, [r7, #20]
 8015eb2:	e002      	b.n	8015eba <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	3390      	adds	r3, #144	@ 0x90
 8015eb8:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 8015eba:	697b      	ldr	r3, [r7, #20]
 8015ebc:	689b      	ldr	r3, [r3, #8]
 8015ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ec2:	d10b      	bne.n	8015edc <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015ec4:	e006      	b.n	8015ed4 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	68db      	ldr	r3, [r3, #12]
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 8015ece:	68f8      	ldr	r0, [r7, #12]
 8015ed0:	f7ff ffb6 	bl	8015e40 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d1f4      	bne.n	8015ec6 <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	613b      	str	r3, [r7, #16]
 8015ee2:	693b      	ldr	r3, [r7, #16]
 8015ee4:	2b01      	cmp	r3, #1
 8015ee6:	ddde      	ble.n	8015ea6 <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 8015ee8:	bf00      	nop
 8015eea:	bf00      	nop
 8015eec:	3718      	adds	r7, #24
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}
	...

08015ef4 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b086      	sub	sp, #24
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	60f8      	str	r0, [r7, #12]
 8015efc:	60b9      	str	r1, [r7, #8]
 8015efe:	607a      	str	r2, [r7, #4]
 8015f00:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8015f02:	2301      	movs	r3, #1
 8015f04:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 8015f06:	4b1d      	ldr	r3, [pc, #116]	@ (8015f7c <xTCPWindowCreate+0x88>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d102      	bne.n	8015f14 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8015f0e:	f7ff fe3d 	bl	8015b8c <prvCreateSectors>
 8015f12:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	3390      	adds	r3, #144	@ 0x90
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f7ed fc5f 	bl	80037dc <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	33a4      	adds	r3, #164	@ 0xa4
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7ed fc5a 	bl	80037dc <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	3340      	adds	r3, #64	@ 0x40
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f7ed fc55 	bl	80037dc <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	3354      	adds	r3, #84	@ 0x54
 8015f36:	4618      	mov	r0, r3
 8015f38:	f7ed fc50 	bl	80037dc <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	3368      	adds	r3, #104	@ 0x68
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7ed fc4b 	bl	80037dc <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 8015f46:	4b0e      	ldr	r3, [pc, #56]	@ (8015f80 <xTCPWindowCreate+0x8c>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d004      	beq.n	8015f58 <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8015f4e:	687a      	ldr	r2, [r7, #4]
 8015f50:	68b9      	ldr	r1, [r7, #8]
 8015f52:	480c      	ldr	r0, [pc, #48]	@ (8015f84 <xTCPWindowCreate+0x90>)
 8015f54:	f00c fc36 	bl	80227c4 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	68ba      	ldr	r2, [r7, #8]
 8015f5c:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	687a      	ldr	r2, [r7, #4]
 8015f62:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8015f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f66:	6a3a      	ldr	r2, [r7, #32]
 8015f68:	6839      	ldr	r1, [r7, #0]
 8015f6a:	68f8      	ldr	r0, [r7, #12]
 8015f6c:	f000 f80c 	bl	8015f88 <vTCPWindowInit>

        return xReturn;
 8015f70:	697b      	ldr	r3, [r7, #20]
    }
 8015f72:	4618      	mov	r0, r3
 8015f74:	3718      	adds	r7, #24
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	bf00      	nop
 8015f7c:	20001634 	.word	0x20001634
 8015f80:	2000164c 	.word	0x2000164c
 8015f84:	08027474 	.word	0x08027474

08015f88 <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 8015f88:	b480      	push	{r7}
 8015f8a:	b087      	sub	sp, #28
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	60f8      	str	r0, [r7, #12]
 8015f90:	60b9      	str	r1, [r7, #8]
 8015f92:	607a      	str	r2, [r7, #4]
 8015f94:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 8015f96:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8015f9a:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8015fa2:	68fa      	ldr	r2, [r7, #12]
 8015fa4:	7813      	ldrb	r3, [r2, #0]
 8015fa6:	f043 0301 	orr.w	r3, r3, #1
 8015faa:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 8015fac:	683b      	ldr	r3, [r7, #0]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d024      	beq.n	8015ffc <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d004      	beq.n	8015fc6 <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	b29a      	uxth	r2, r3
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015fcc:	461a      	mov	r2, r3
 8015fce:	683b      	ldr	r3, [r7, #0]
 8015fd0:	4293      	cmp	r3, r2
 8015fd2:	d304      	bcc.n	8015fde <vTCPWindowInit+0x56>
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d10e      	bne.n	8015ffc <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	685a      	ldr	r2, [r3, #4]
 8015fe2:	683b      	ldr	r3, [r7, #0]
 8015fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8015fe8:	683a      	ldr	r2, [r7, #0]
 8015fea:	fb03 f202 	mul.w	r2, r3, r2
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	b29a      	uxth	r2, r3
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	697a      	ldr	r2, [r7, #20]
 8016000:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	68ba      	ldr	r2, [r7, #8]
 8016006:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	68ba      	ldr	r2, [r7, #8]
 801600c:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	68ba      	ldr	r2, [r7, #8]
 8016012:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	687a      	ldr	r2, [r7, #4]
 8016018:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	687a      	ldr	r2, [r7, #4]
 801601e:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	687a      	ldr	r2, [r7, #4]
 801602a:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	687a      	ldr	r2, [r7, #4]
 8016030:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8016032:	bf00      	nop
 8016034:	371c      	adds	r7, #28
 8016036:	46bd      	mov	sp, r7
 8016038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603c:	4770      	bx	lr
	...

08016040 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8016040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016042:	b08f      	sub	sp, #60	@ 0x3c
 8016044:	af04      	add	r7, sp, #16
 8016046:	60f8      	str	r0, [r7, #12]
 8016048:	60b9      	str	r1, [r7, #8]
 801604a:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 801604c:	2300      	movs	r3, #0
 801604e:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8016050:	68ba      	ldr	r2, [r7, #8]
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	4413      	add	r3, r2
 8016056:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	33ac      	adds	r3, #172	@ 0xac
 801605c:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 801605e:	69bb      	ldr	r3, [r7, #24]
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	623b      	str	r3, [r7, #32]
 8016064:	e027      	b.n	80160b6 <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016066:	6a3b      	ldr	r3, [r7, #32]
 8016068:	68db      	ldr	r3, [r3, #12]
 801606a:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	68b9      	ldr	r1, [r7, #8]
 8016072:	4618      	mov	r0, r3
 8016074:	f7ff fd25 	bl	8015ac2 <xSequenceGreaterThanOrEqual>
 8016078:	4603      	mov	r3, r0
 801607a:	2b00      	cmp	r3, #0
 801607c:	d018      	beq.n	80160b0 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 801607e:	697b      	ldr	r3, [r7, #20]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	69f9      	ldr	r1, [r7, #28]
 8016084:	4618      	mov	r0, r3
 8016086:	f7ff fcf0 	bl	8015a6a <xSequenceLessThan>
 801608a:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 801608c:	2b00      	cmp	r3, #0
 801608e:	d00f      	beq.n	80160b0 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8016090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016092:	2b00      	cmp	r3, #0
 8016094:	d00a      	beq.n	80160ac <xTCPWindowRxConfirm+0x6c>
 8016096:	697b      	ldr	r3, [r7, #20]
 8016098:	681a      	ldr	r2, [r3, #0]
 801609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	4619      	mov	r1, r3
 80160a0:	4610      	mov	r0, r2
 80160a2:	f7ff fce2 	bl	8015a6a <xSequenceLessThan>
 80160a6:	4603      	mov	r3, r0
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d001      	beq.n	80160b0 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 80160ac:	697b      	ldr	r3, [r7, #20]
 80160ae:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 80160b0:	6a3b      	ldr	r3, [r7, #32]
 80160b2:	685b      	ldr	r3, [r3, #4]
 80160b4:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 80160b6:	6a3a      	ldr	r2, [r7, #32]
 80160b8:	69bb      	ldr	r3, [r7, #24]
 80160ba:	429a      	cmp	r2, r3
 80160bc:	d1d3      	bne.n	8016066 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 80160be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d030      	beq.n	8016126 <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80160c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160c6:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 80160c8:	68ba      	ldr	r2, [r7, #8]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d104      	bne.n	80160d8 <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80160ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160d0:	689a      	ldr	r2, [r3, #8]
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	429a      	cmp	r2, r3
 80160d6:	d026      	beq.n	8016126 <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80160de:	461e      	mov	r6, r3
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	68ba      	ldr	r2, [r7, #8]
 80160e6:	1ad5      	subs	r5, r2, r3
 80160e8:	68ba      	ldr	r2, [r7, #8]
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	441a      	add	r2, r3
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	68db      	ldr	r3, [r3, #12]
 80160f2:	1ad3      	subs	r3, r2, r3
 80160f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80160f6:	6811      	ldr	r1, [r2, #0]
 80160f8:	68fa      	ldr	r2, [r7, #12]
 80160fa:	68d2      	ldr	r2, [r2, #12]
 80160fc:	1a8a      	subs	r2, r1, r2
 80160fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016100:	6889      	ldr	r1, [r1, #8]
 8016102:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016104:	6800      	ldr	r0, [r0, #0]
 8016106:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8016108:	68a4      	ldr	r4, [r4, #8]
 801610a:	4404      	add	r4, r0
 801610c:	68f8      	ldr	r0, [r7, #12]
 801610e:	68c0      	ldr	r0, [r0, #12]
 8016110:	1a20      	subs	r0, r4, r0
 8016112:	9003      	str	r0, [sp, #12]
 8016114:	9102      	str	r1, [sp, #8]
 8016116:	9201      	str	r2, [sp, #4]
 8016118:	9300      	str	r3, [sp, #0]
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	462a      	mov	r2, r5
 801611e:	4631      	mov	r1, r6
 8016120:	4803      	ldr	r0, [pc, #12]	@ (8016130 <xTCPWindowRxConfirm+0xf0>)
 8016122:	f00c fb4f 	bl	80227c4 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 8016126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8016128:	4618      	mov	r0, r3
 801612a:	372c      	adds	r7, #44	@ 0x2c
 801612c:	46bd      	mov	sp, r7
 801612e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016130:	080274a4 	.word	0x080274a4

08016134 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8016134:	b5b0      	push	{r4, r5, r7, lr}
 8016136:	b08a      	sub	sp, #40	@ 0x28
 8016138:	af04      	add	r7, sp, #16
 801613a:	6078      	str	r0, [r7, #4]
 801613c:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	691b      	ldr	r3, [r3, #16]
 8016142:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8016144:	693a      	ldr	r2, [r7, #16]
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	4413      	add	r3, r2
 801614a:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016152:	2b00      	cmp	r3, #0
 8016154:	d04e      	beq.n	80161f4 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 8016156:	697b      	ldr	r3, [r7, #20]
 8016158:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 801615a:	683a      	ldr	r2, [r7, #0]
 801615c:	6939      	ldr	r1, [r7, #16]
 801615e:	6878      	ldr	r0, [r7, #4]
 8016160:	f7ff ff6e 	bl	8016040 <xTCPWindowRxConfirm>
 8016164:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d002      	beq.n	8016172 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 801616c:	68b8      	ldr	r0, [r7, #8]
 801616e:	f7ff fe67 	bl	8015e40 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d1f0      	bne.n	801615a <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8016178:	6979      	ldr	r1, [r7, #20]
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f7ff fd5e 	bl	8015c3c <xTCPWindowRxFind>
 8016180:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d009      	beq.n	801619c <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	689b      	ldr	r3, [r3, #8]
 801618c:	461a      	mov	r2, r3
 801618e:	697b      	ldr	r3, [r7, #20]
 8016190:	4413      	add	r3, r2
 8016192:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8016194:	68b8      	ldr	r0, [r7, #8]
 8016196:	f7ff fe53 	bl	8015e40 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801619a:	e7ed      	b.n	8016178 <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 801619c:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 801619e:	68fa      	ldr	r2, [r7, #12]
 80161a0:	697b      	ldr	r3, [r7, #20]
 80161a2:	429a      	cmp	r2, r3
 80161a4:	d026      	beq.n	80161f4 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 80161a6:	697a      	ldr	r2, [r7, #20]
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	1ad2      	subs	r2, r2, r3
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 80161b0:	4b14      	ldr	r3, [pc, #80]	@ (8016204 <prvTCPWindowRx_ExpectedRX+0xd0>)
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	dd1d      	ble.n	80161f4 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80161be:	461c      	mov	r4, r3
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80161c6:	461d      	mov	r5, r3
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	68db      	ldr	r3, [r3, #12]
 80161cc:	693a      	ldr	r2, [r7, #16]
 80161ce:	1ad0      	subs	r0, r2, r3
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161d4:	687a      	ldr	r2, [r7, #4]
 80161d6:	68d2      	ldr	r2, [r2, #12]
 80161d8:	68f9      	ldr	r1, [r7, #12]
 80161da:	1a8a      	subs	r2, r1, r2
 80161dc:	6879      	ldr	r1, [r7, #4]
 80161de:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 80161e2:	9102      	str	r1, [sp, #8]
 80161e4:	9201      	str	r2, [sp, #4]
 80161e6:	9300      	str	r3, [sp, #0]
 80161e8:	4603      	mov	r3, r0
 80161ea:	462a      	mov	r2, r5
 80161ec:	4621      	mov	r1, r4
 80161ee:	4806      	ldr	r0, [pc, #24]	@ (8016208 <prvTCPWindowRx_ExpectedRX+0xd4>)
 80161f0:	f00c fae8 	bl	80227c4 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	697a      	ldr	r2, [r7, #20]
 80161f8:	611a      	str	r2, [r3, #16]
        }
 80161fa:	bf00      	nop
 80161fc:	3718      	adds	r7, #24
 80161fe:	46bd      	mov	sp, r7
 8016200:	bdb0      	pop	{r4, r5, r7, pc}
 8016202:	bf00      	nop
 8016204:	2000164c 	.word	0x2000164c
 8016208:	080274e4 	.word	0x080274e4

0801620c <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 801620c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801620e:	b08f      	sub	sp, #60	@ 0x3c
 8016210:	af04      	add	r7, sp, #16
 8016212:	60f8      	str	r0, [r7, #12]
 8016214:	60b9      	str	r1, [r7, #8]
 8016216:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 8016218:	f04f 33ff 	mov.w	r3, #4294967295
 801621c:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 801621e:	68ba      	ldr	r2, [r7, #8]
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	4413      	add	r3, r2
 8016224:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	691b      	ldr	r3, [r3, #16]
 801622a:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 801622c:	6a39      	ldr	r1, [r7, #32]
 801622e:	68f8      	ldr	r0, [r7, #12]
 8016230:	f7ff fd04 	bl	8015c3c <xTCPWindowRxFind>
 8016234:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8016236:	69bb      	ldr	r3, [r7, #24]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d006      	beq.n	801624a <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 801623c:	69bb      	ldr	r3, [r7, #24]
 801623e:	689b      	ldr	r3, [r3, #8]
 8016240:	461a      	mov	r2, r3
 8016242:	6a3b      	ldr	r3, [r7, #32]
 8016244:	4413      	add	r3, r2
 8016246:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8016248:	e7f0      	b.n	801622c <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 801624a:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 801624c:	4b45      	ldr	r3, [pc, #276]	@ (8016364 <prvTCPWindowRx_UnexpectedRX+0x158>)
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	2b00      	cmp	r3, #0
 8016252:	dd20      	ble.n	8016296 <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801625a:	461d      	mov	r5, r3
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016262:	461e      	mov	r6, r3
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	68db      	ldr	r3, [r3, #12]
 8016268:	68ba      	ldr	r2, [r7, #8]
 801626a:	1ad0      	subs	r0, r2, r3
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	68db      	ldr	r3, [r3, #12]
 8016270:	69fa      	ldr	r2, [r7, #28]
 8016272:	1ad3      	subs	r3, r2, r3
 8016274:	68b9      	ldr	r1, [r7, #8]
 8016276:	69fa      	ldr	r2, [r7, #28]
 8016278:	1a8a      	subs	r2, r1, r2
 801627a:	4614      	mov	r4, r2
 801627c:	68fa      	ldr	r2, [r7, #12]
 801627e:	68d2      	ldr	r2, [r2, #12]
 8016280:	6a39      	ldr	r1, [r7, #32]
 8016282:	1a8a      	subs	r2, r1, r2
 8016284:	9202      	str	r2, [sp, #8]
 8016286:	9401      	str	r4, [sp, #4]
 8016288:	9300      	str	r3, [sp, #0]
 801628a:	4603      	mov	r3, r0
 801628c:	4632      	mov	r2, r6
 801628e:	4629      	mov	r1, r5
 8016290:	4835      	ldr	r0, [pc, #212]	@ (8016368 <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8016292:	f00c fa97 	bl	80227c4 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	4a34      	ldr	r2, [pc, #208]	@ (801636c <prvTCPWindowRx_UnexpectedRX+0x160>)
 801629a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	061a      	lsls	r2, r3, #24
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	021b      	lsls	r3, r3, #8
 80162a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80162aa:	431a      	orrs	r2, r3
 80162ac:	68bb      	ldr	r3, [r7, #8]
 80162ae:	0a1b      	lsrs	r3, r3, #8
 80162b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80162b4:	431a      	orrs	r2, r3
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	0e1b      	lsrs	r3, r3, #24
 80162ba:	431a      	orrs	r2, r3
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 80162c2:	6a3b      	ldr	r3, [r7, #32]
 80162c4:	061a      	lsls	r2, r3, #24
 80162c6:	6a3b      	ldr	r3, [r7, #32]
 80162c8:	021b      	lsls	r3, r3, #8
 80162ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80162ce:	431a      	orrs	r2, r3
 80162d0:	6a3b      	ldr	r3, [r7, #32]
 80162d2:	0a1b      	lsrs	r3, r3, #8
 80162d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80162d8:	431a      	orrs	r2, r3
 80162da:	6a3b      	ldr	r3, [r7, #32]
 80162dc:	0e1b      	lsrs	r3, r3, #24
 80162de:	431a      	orrs	r2, r3
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	220c      	movs	r2, #12
 80162ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 80162ee:	68b9      	ldr	r1, [r7, #8]
 80162f0:	68f8      	ldr	r0, [r7, #12]
 80162f2:	f7ff fca3 	bl	8015c3c <xTCPWindowRxFind>
 80162f6:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 80162f8:	69bb      	ldr	r3, [r7, #24]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d12d      	bne.n	801635a <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 80162fe:	687a      	ldr	r2, [r7, #4]
 8016300:	2301      	movs	r3, #1
 8016302:	68b9      	ldr	r1, [r7, #8]
 8016304:	68f8      	ldr	r0, [r7, #12]
 8016306:	f7ff fcc1 	bl	8015c8c <xTCPWindowNew>
 801630a:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 801630c:	69bb      	ldr	r3, [r7, #24]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d104      	bne.n	801631c <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	2200      	movs	r2, #0
 8016316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801631a:	e01e      	b.n	801635a <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 801631c:	4b11      	ldr	r3, [pc, #68]	@ (8016364 <prvTCPWindowRx_UnexpectedRX+0x158>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d014      	beq.n	801634e <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801632a:	4619      	mov	r1, r3
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016332:	4618      	mov	r0, r3
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	68db      	ldr	r3, [r3, #12]
 8016338:	68ba      	ldr	r2, [r7, #8]
 801633a:	1ad2      	subs	r2, r2, r3
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016342:	9300      	str	r3, [sp, #0]
 8016344:	4613      	mov	r3, r2
 8016346:	4602      	mov	r2, r0
 8016348:	4809      	ldr	r0, [pc, #36]	@ (8016370 <prvTCPWindowRx_UnexpectedRX+0x164>)
 801634a:	f00c fa3b 	bl	80227c4 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 801634e:	68ba      	ldr	r2, [r7, #8]
 8016350:	69fb      	ldr	r3, [r7, #28]
 8016352:	1ad3      	subs	r3, r2, r3
 8016354:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 8016356:	697b      	ldr	r3, [r7, #20]
 8016358:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 801635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 801635c:	4618      	mov	r0, r3
 801635e:	372c      	adds	r7, #44	@ 0x2c
 8016360:	46bd      	mov	sp, r7
 8016362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016364:	2000164c 	.word	0x2000164c
 8016368:	08027528 	.word	0x08027528
 801636c:	0a050101 	.word	0x0a050101
 8016370:	08027568 	.word	0x08027568

08016374 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8016374:	b580      	push	{r7, lr}
 8016376:	b08c      	sub	sp, #48	@ 0x30
 8016378:	af00      	add	r7, sp, #0
 801637a:	60f8      	str	r0, [r7, #12]
 801637c:	60b9      	str	r1, [r7, #8]
 801637e:	607a      	str	r2, [r7, #4]
 8016380:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8016382:	f04f 33ff 	mov.w	r3, #4294967295
 8016386:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8016390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016392:	2200      	movs	r2, #0
 8016394:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	691b      	ldr	r3, [r3, #16]
 801639a:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 801639c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801639e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163a0:	4413      	add	r3, r2
 80163a2:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 80163a4:	69fa      	ldr	r2, [r7, #28]
 80163a6:	6a3b      	ldr	r3, [r7, #32]
 80163a8:	1ad3      	subs	r3, r2, r3
 80163aa:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 80163ac:	69bb      	ldr	r3, [r7, #24]
 80163ae:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 80163b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80163b2:	6a3b      	ldr	r3, [r7, #32]
 80163b4:	1ad3      	subs	r3, r2, r3
 80163b6:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 80163b8:	69bb      	ldr	r3, [r7, #24]
 80163ba:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 80163bc:	693b      	ldr	r3, [r7, #16]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	da18      	bge.n	80163f4 <lTCPWindowRxCheck+0x80>
 80163c2:	697b      	ldr	r3, [r7, #20]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	dd15      	ble.n	80163f4 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	68db      	ldr	r3, [r3, #12]
 80163cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80163ce:	1ad2      	subs	r2, r2, r3
 80163d0:	697b      	ldr	r3, [r7, #20]
 80163d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80163d4:	4824      	ldr	r0, [pc, #144]	@ (8016468 <lTCPWindowRxCheck+0xf4>)
 80163d6:	f00c f9f5 	bl	80227c4 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80163de:	1ad3      	subs	r3, r2, r3
 80163e0:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 80163e2:	693b      	ldr	r3, [r7, #16]
 80163e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80163e6:	4413      	add	r3, r2
 80163e8:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 80163ea:	693b      	ldr	r3, [r7, #16]
 80163ec:	425b      	negs	r3, r3
 80163ee:	461a      	mov	r2, r3
 80163f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163f2:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	2200      	movs	r2, #0
 80163f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	2200      	movs	r2, #0
 8016400:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8016402:	6a3a      	ldr	r2, [r7, #32]
 8016404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016406:	429a      	cmp	r2, r3
 8016408:	d110      	bne.n	801642c <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 801640a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	429a      	cmp	r2, r3
 8016410:	d905      	bls.n	801641e <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 8016412:	683a      	ldr	r2, [r7, #0]
 8016414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016416:	4815      	ldr	r0, [pc, #84]	@ (801646c <lTCPWindowRxCheck+0xf8>)
 8016418:	f00c f9d4 	bl	80227c4 <lUDPLoggingPrintf>
 801641c:	e01f      	b.n	801645e <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 801641e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016420:	68f8      	ldr	r0, [r7, #12]
 8016422:	f7ff fe87 	bl	8016134 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 8016426:	2300      	movs	r3, #0
 8016428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801642a:	e018      	b.n	801645e <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 801642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801642e:	3301      	adds	r3, #1
 8016430:	6a3a      	ldr	r2, [r7, #32]
 8016432:	429a      	cmp	r2, r3
 8016434:	d013      	beq.n	801645e <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 8016436:	697b      	ldr	r3, [r7, #20]
 8016438:	2b00      	cmp	r3, #0
 801643a:	dd10      	ble.n	801645e <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 801643c:	683b      	ldr	r3, [r7, #0]
 801643e:	697a      	ldr	r2, [r7, #20]
 8016440:	429a      	cmp	r2, r3
 8016442:	dd06      	ble.n	8016452 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016448:	6979      	ldr	r1, [r7, #20]
 801644a:	4809      	ldr	r0, [pc, #36]	@ (8016470 <lTCPWindowRxCheck+0xfc>)
 801644c:	f00c f9ba 	bl	80227c4 <lUDPLoggingPrintf>
 8016450:	e005      	b.n	801645e <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 8016452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016454:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016456:	68f8      	ldr	r0, [r7, #12]
 8016458:	f7ff fed8 	bl	801620c <prvTCPWindowRx_UnexpectedRX>
 801645c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 801645e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8016460:	4618      	mov	r0, r3
 8016462:	3730      	adds	r7, #48	@ 0x30
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}
 8016468:	08027598 	.word	0x08027598
 801646c:	080275d8 	.word	0x080275d8
 8016470:	08027618 	.word	0x08027618

08016474 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8016474:	b480      	push	{r7}
 8016476:	b087      	sub	sp, #28
 8016478:	af00      	add	r7, sp, #0
 801647a:	60f8      	str	r0, [r7, #12]
 801647c:	60b9      	str	r1, [r7, #8]
 801647e:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8016480:	68fa      	ldr	r2, [r7, #12]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	4413      	add	r3, r2
 8016486:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 8016488:	697a      	ldr	r2, [r7, #20]
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	429a      	cmp	r2, r3
 801648e:	db03      	blt.n	8016498 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8016490:	697a      	ldr	r2, [r7, #20]
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	1ad3      	subs	r3, r2, r3
 8016496:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 8016498:	697b      	ldr	r3, [r7, #20]
        }
 801649a:	4618      	mov	r0, r3
 801649c:	371c      	adds	r7, #28
 801649e:	46bd      	mov	sp, r7
 80164a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a4:	4770      	bx	lr
	...

080164a8 <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b088      	sub	sp, #32
 80164ac:	af02      	add	r7, sp, #8
 80164ae:	60f8      	str	r0, [r7, #12]
 80164b0:	60b9      	str	r1, [r7, #8]
 80164b2:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	685a      	ldr	r2, [r3, #4]
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	689b      	ldr	r3, [r3, #8]
 80164bc:	1ad3      	subs	r3, r2, r3
 80164be:	4619      	mov	r1, r3
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f7f4 fce7 	bl	800ae94 <FreeRTOS_min_int32>
 80164c6:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 80164c8:	68bb      	ldr	r3, [r7, #8]
 80164ca:	689a      	ldr	r2, [r3, #8]
 80164cc:	697b      	ldr	r3, [r7, #20]
 80164ce:	441a      	add	r2, r3
 80164d0:	68bb      	ldr	r3, [r7, #8]
 80164d2:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	689a      	ldr	r2, [r3, #8]
 80164d8:	68bb      	ldr	r3, [r7, #8]
 80164da:	685b      	ldr	r3, [r3, #4]
 80164dc:	429a      	cmp	r2, r3
 80164de:	db02      	blt.n	80164e6 <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	2200      	movs	r2, #0
 80164e4:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80164ea:	697b      	ldr	r3, [r7, #20]
 80164ec:	441a      	add	r2, r3
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80164f2:	4b12      	ldr	r3, [pc, #72]	@ (801653c <prvTCPWindowTxAdd_FrontSegment+0x94>)
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	2b01      	cmp	r3, #1
 80164f8:	dd1a      	ble.n	8016530 <prvTCPWindowTxAdd_FrontSegment+0x88>
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016500:	2b17      	cmp	r3, #23
 8016502:	d015      	beq.n	8016530 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	681a      	ldr	r2, [r3, #0]
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	69db      	ldr	r3, [r3, #28]
 801650c:	1ad1      	subs	r1, r2, r3
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	6898      	ldr	r0, [r3, #8]
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	69db      	ldr	r3, [r3, #28]
 801651a:	1ad3      	subs	r3, r2, r3
 801651c:	68ba      	ldr	r2, [r7, #8]
 801651e:	68d2      	ldr	r2, [r2, #12]
 8016520:	9201      	str	r2, [sp, #4]
 8016522:	9300      	str	r3, [sp, #0]
 8016524:	4603      	mov	r3, r0
 8016526:	460a      	mov	r2, r1
 8016528:	6879      	ldr	r1, [r7, #4]
 801652a:	4805      	ldr	r0, [pc, #20]	@ (8016540 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 801652c:	f00c f94a 	bl	80227c4 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8016530:	697b      	ldr	r3, [r7, #20]
        }
 8016532:	4618      	mov	r0, r3
 8016534:	3718      	adds	r7, #24
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}
 801653a:	bf00      	nop
 801653c:	2000164c 	.word	0x2000164c
 8016540:	0802765c 	.word	0x0802765c

08016544 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8016544:	b580      	push	{r7, lr}
 8016546:	b08a      	sub	sp, #40	@ 0x28
 8016548:	af00      	add	r7, sp, #0
 801654a:	60f8      	str	r0, [r7, #12]
 801654c:	60b9      	str	r1, [r7, #8]
 801654e:	607a      	str	r2, [r7, #4]
 8016550:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8016552:	68bb      	ldr	r3, [r7, #8]
 8016554:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 8016556:	2300      	movs	r3, #0
 8016558:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016562:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8016564:	69bb      	ldr	r3, [r7, #24]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d073      	beq.n	8016652 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 801656a:	69bb      	ldr	r3, [r7, #24]
 801656c:	689a      	ldr	r2, [r3, #8]
 801656e:	69bb      	ldr	r3, [r7, #24]
 8016570:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8016572:	429a      	cmp	r2, r3
 8016574:	da6d      	bge.n	8016652 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8016576:	69bb      	ldr	r3, [r7, #24]
 8016578:	7d9b      	ldrb	r3, [r3, #22]
 801657a:	f003 0301 	and.w	r3, r3, #1
 801657e:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8016580:	2b00      	cmp	r3, #0
 8016582:	d166      	bne.n	8016652 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8016584:	69bb      	ldr	r3, [r7, #24]
 8016586:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8016588:	2b00      	cmp	r3, #0
 801658a:	d062      	beq.n	8016652 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 801658c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801658e:	69b9      	ldr	r1, [r7, #24]
 8016590:	68f8      	ldr	r0, [r7, #12]
 8016592:	f7ff ff89 	bl	80164a8 <prvTCPWindowTxAdd_FrontSegment>
 8016596:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 8016598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	1ad3      	subs	r3, r2, r3
 801659e:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 80165a0:	6a3a      	ldr	r2, [r7, #32]
 80165a2:	697b      	ldr	r3, [r7, #20]
 80165a4:	4413      	add	r3, r2
 80165a6:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 80165a8:	697a      	ldr	r2, [r7, #20]
 80165aa:	6839      	ldr	r1, [r7, #0]
 80165ac:	69f8      	ldr	r0, [r7, #28]
 80165ae:	f7ff ff61 	bl	8016474 <lTCPIncrementTxPosition>
 80165b2:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 80165b4:	e04d      	b.n	8016652 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80165c0:	461a      	mov	r2, r3
 80165c2:	2300      	movs	r3, #0
 80165c4:	68f8      	ldr	r0, [r7, #12]
 80165c6:	f7ff fb61 	bl	8015c8c <xTCPWindowNew>
 80165ca:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 80165cc:	69bb      	ldr	r3, [r7, #24]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d037      	beq.n	8016642 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 80165d2:	69bb      	ldr	r3, [r7, #24]
 80165d4:	685b      	ldr	r3, [r3, #4]
 80165d6:	4619      	mov	r1, r3
 80165d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80165da:	f7f4 fc5b 	bl	800ae94 <FreeRTOS_min_int32>
 80165de:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 80165e0:	69bb      	ldr	r3, [r7, #24]
 80165e2:	697a      	ldr	r2, [r7, #20]
 80165e4:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 80165e6:	69bb      	ldr	r3, [r7, #24]
 80165e8:	69fa      	ldr	r2, [r7, #28]
 80165ea:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 80165ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	1ad3      	subs	r3, r2, r3
 80165f2:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 80165f4:	697a      	ldr	r2, [r7, #20]
 80165f6:	6839      	ldr	r1, [r7, #0]
 80165f8:	69f8      	ldr	r0, [r7, #28]
 80165fa:	f7ff ff3b 	bl	8016474 <lTCPIncrementTxPosition>
 80165fe:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016604:	697b      	ldr	r3, [r7, #20]
 8016606:	441a      	add	r2, r3
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 801660c:	6a3a      	ldr	r2, [r7, #32]
 801660e:	697b      	ldr	r3, [r7, #20]
 8016610:	4413      	add	r3, r2
 8016612:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 801661a:	69bb      	ldr	r3, [r7, #24]
 801661c:	3318      	adds	r3, #24
 801661e:	4619      	mov	r1, r3
 8016620:	4610      	mov	r0, r2
 8016622:	f7ff fa63 	bl	8015aec <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8016626:	69bb      	ldr	r3, [r7, #24]
 8016628:	689a      	ldr	r2, [r3, #8]
 801662a:	69bb      	ldr	r3, [r7, #24]
 801662c:	685b      	ldr	r3, [r3, #4]
 801662e:	429a      	cmp	r2, r3
 8016630:	da03      	bge.n	801663a <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	69ba      	ldr	r2, [r7, #24]
 8016636:	67da      	str	r2, [r3, #124]	@ 0x7c
 8016638:	e00b      	b.n	8016652 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	2200      	movs	r2, #0
 801663e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8016640:	e007      	b.n	8016652 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 8016642:	6a3b      	ldr	r3, [r7, #32]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d008      	beq.n	801665a <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 8016648:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801664a:	4807      	ldr	r0, [pc, #28]	@ (8016668 <lTCPWindowTxAdd+0x124>)
 801664c:	f00c f8ba 	bl	80227c4 <lUDPLoggingPrintf>
                    }

                    break;
 8016650:	e003      	b.n	801665a <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 8016652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016654:	2b00      	cmp	r3, #0
 8016656:	dcae      	bgt.n	80165b6 <lTCPWindowTxAdd+0x72>
 8016658:	e000      	b.n	801665c <lTCPWindowTxAdd+0x118>
                    break;
 801665a:	bf00      	nop
                }
            }

            return lDone;
 801665c:	6a3b      	ldr	r3, [r7, #32]
        }
 801665e:	4618      	mov	r0, r3
 8016660:	3728      	adds	r7, #40	@ 0x28
 8016662:	46bd      	mov	sp, r7
 8016664:	bd80      	pop	{r7, pc}
 8016666:	bf00      	nop
 8016668:	080276a4 	.word	0x080276a4

0801666c <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 801666c:	b480      	push	{r7}
 801666e:	b083      	sub	sp, #12
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801667a:	2b00      	cmp	r3, #0
 801667c:	d101      	bne.n	8016682 <xTCPWindowTxDone+0x16>
 801667e:	2301      	movs	r3, #1
 8016680:	e000      	b.n	8016684 <xTCPWindowTxDone+0x18>
 8016682:	2300      	movs	r3, #0
        }
 8016684:	4618      	mov	r0, r3
 8016686:	370c      	adds	r7, #12
 8016688:	46bd      	mov	sp, r7
 801668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668e:	4770      	bx	lr

08016690 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8016690:	b580      	push	{r7, lr}
 8016692:	b086      	sub	sp, #24
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
 8016698:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	3354      	adds	r3, #84	@ 0x54
 801669e:	4618      	mov	r0, r3
 80166a0:	f7ff fbb5 	bl	8015e0e <xTCPWindowPeekHead>
 80166a4:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d102      	bne.n	80166b2 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 80166ac:	2300      	movs	r3, #0
 80166ae:	613b      	str	r3, [r7, #16]
 80166b0:	e02f      	b.n	8016712 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	6a1b      	ldr	r3, [r3, #32]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d306      	bcc.n	80166cc <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	6a1b      	ldr	r3, [r3, #32]
 80166c6:	1ad3      	subs	r3, r2, r3
 80166c8:	617b      	str	r3, [r7, #20]
 80166ca:	e001      	b.n	80166d0 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 80166cc:	2300      	movs	r3, #0
 80166ce:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 80166d0:	6979      	ldr	r1, [r7, #20]
 80166d2:	6838      	ldr	r0, [r7, #0]
 80166d4:	f7f4 fbee 	bl	800aeb4 <FreeRTOS_min_uint32>
 80166d8:	4602      	mov	r2, r0
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	1a9b      	subs	r3, r3, r2
 80166de:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	689b      	ldr	r3, [r3, #8]
 80166e4:	461a      	mov	r2, r3
 80166e6:	68bb      	ldr	r3, [r7, #8]
 80166e8:	4293      	cmp	r3, r2
 80166ea:	d302      	bcc.n	80166f2 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 80166ec:	2301      	movs	r3, #1
 80166ee:	613b      	str	r3, [r7, #16]
 80166f0:	e001      	b.n	80166f6 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 80166f2:	2300      	movs	r3, #0
 80166f4:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d00a      	beq.n	8016712 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	689b      	ldr	r3, [r3, #8]
 8016704:	4619      	mov	r1, r3
 8016706:	697b      	ldr	r3, [r7, #20]
 8016708:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 801670a:	429a      	cmp	r2, r3
 801670c:	d201      	bcs.n	8016712 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 801670e:	2300      	movs	r3, #0
 8016710:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 8016712:	693b      	ldr	r3, [r7, #16]
        }
 8016714:	4618      	mov	r0, r3
 8016716:	3718      	adds	r7, #24
 8016718:	46bd      	mov	sp, r7
 801671a:	bd80      	pop	{r7, pc}

0801671c <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 801671c:	b580      	push	{r7, lr}
 801671e:	b08a      	sub	sp, #40	@ 0x28
 8016720:	af00      	add	r7, sp, #0
 8016722:	60f8      	str	r0, [r7, #12]
 8016724:	60b9      	str	r1, [r7, #8]
 8016726:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2200      	movs	r2, #0
 801672c:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016732:	2b00      	cmp	r3, #0
 8016734:	d002      	beq.n	801673c <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 8016736:	2301      	movs	r3, #1
 8016738:	627b      	str	r3, [r7, #36]	@ 0x24
 801673a:	e050      	b.n	80167de <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	3368      	adds	r3, #104	@ 0x68
 8016740:	4618      	mov	r0, r3
 8016742:	f7ff fb64 	bl	8015e0e <xTCPWindowPeekHead>
 8016746:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 8016748:	6a3b      	ldr	r3, [r7, #32]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d01f      	beq.n	801678e <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016752:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8016754:	6a3b      	ldr	r3, [r7, #32]
 8016756:	3310      	adds	r3, #16
 8016758:	4618      	mov	r0, r3
 801675a:	f7ff f9e4 	bl	8015b26 <ulTimerGetAge>
 801675e:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 8016760:	6a3b      	ldr	r3, [r7, #32]
 8016762:	7d1b      	ldrb	r3, [r3, #20]
 8016764:	461a      	mov	r2, r3
 8016766:	2301      	movs	r3, #1
 8016768:	4093      	lsls	r3, r2
 801676a:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	69fa      	ldr	r2, [r7, #28]
 8016770:	fb02 f303 	mul.w	r3, r2, r3
 8016774:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 8016776:	697a      	ldr	r2, [r7, #20]
 8016778:	69bb      	ldr	r3, [r7, #24]
 801677a:	429a      	cmp	r2, r3
 801677c:	d904      	bls.n	8016788 <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 801677e:	697a      	ldr	r2, [r7, #20]
 8016780:	69bb      	ldr	r3, [r7, #24]
 8016782:	1ad2      	subs	r2, r2, r3
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 8016788:	2301      	movs	r3, #1
 801678a:	627b      	str	r3, [r7, #36]	@ 0x24
 801678c:	e027      	b.n	80167de <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	3354      	adds	r3, #84	@ 0x54
 8016792:	4618      	mov	r0, r3
 8016794:	f7ff fb3b 	bl	8015e0e <xTCPWindowPeekHead>
 8016798:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 801679a:	6a3b      	ldr	r3, [r7, #32]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d102      	bne.n	80167a6 <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 80167a0:	2300      	movs	r3, #0
 80167a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80167a4:	e01b      	b.n	80167de <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 80167a6:	68b9      	ldr	r1, [r7, #8]
 80167a8:	68f8      	ldr	r0, [r7, #12]
 80167aa:	f7ff ff71 	bl	8016690 <prvTCPWindowTxHasSpace>
 80167ae:	4603      	mov	r3, r0
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d102      	bne.n	80167ba <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 80167b4:	2300      	movs	r3, #0
 80167b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80167b8:	e011      	b.n	80167de <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	781b      	ldrb	r3, [r3, #0]
 80167be:	f003 0302 	and.w	r3, r3, #2
 80167c2:	b2db      	uxtb	r3, r3
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d008      	beq.n	80167da <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80167c8:	6a3b      	ldr	r3, [r7, #32]
 80167ca:	689a      	ldr	r2, [r3, #8]
 80167cc:	6a3b      	ldr	r3, [r7, #32]
 80167ce:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80167d0:	429a      	cmp	r2, r3
 80167d2:	da02      	bge.n	80167da <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 80167d4:	2300      	movs	r3, #0
 80167d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80167d8:	e001      	b.n	80167de <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 80167da:	2301      	movs	r3, #1
 80167dc:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 80167de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80167e0:	4618      	mov	r0, r3
 80167e2:	3728      	adds	r7, #40	@ 0x28
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}

080167e8 <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 80167e8:	b590      	push	{r4, r7, lr}
 80167ea:	b087      	sub	sp, #28
 80167ec:	af02      	add	r7, sp, #8
 80167ee:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	3368      	adds	r3, #104	@ 0x68
 80167f4:	4618      	mov	r0, r3
 80167f6:	f7ff fb0a 	bl	8015e0e <xTCPWindowPeekHead>
 80167fa:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d043      	beq.n	801688a <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	7d1b      	ldrb	r3, [r3, #20]
 8016806:	461a      	mov	r2, r3
 8016808:	2301      	movs	r3, #1
 801680a:	4093      	lsls	r3, r2
 801680c:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016812:	461a      	mov	r2, r3
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	fb02 f303 	mul.w	r3, r2, r3
 801681a:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	3310      	adds	r3, #16
 8016820:	4618      	mov	r0, r3
 8016822:	f7ff f980 	bl	8015b26 <ulTimerGetAge>
 8016826:	4602      	mov	r2, r0
 8016828:	68bb      	ldr	r3, [r7, #8]
 801682a:	4293      	cmp	r3, r2
 801682c:	d22b      	bcs.n	8016886 <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	3368      	adds	r3, #104	@ 0x68
 8016832:	4618      	mov	r0, r3
 8016834:	f7ff fad2 	bl	8015ddc <xTCPWindowGetHead>
 8016838:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	2200      	movs	r2, #0
 801683e:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016840:	4b14      	ldr	r3, [pc, #80]	@ (8016894 <pxTCPWindowTx_GetWaitQueue+0xac>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d020      	beq.n	801688a <pxTCPWindowTx_GetWaitQueue+0xa2>
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801684e:	2b17      	cmp	r3, #23
 8016850:	d01b      	beq.n	801688a <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016858:	4618      	mov	r0, r3
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016860:	461c      	mov	r4, r3
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	6899      	ldr	r1, [r3, #8]
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	681a      	ldr	r2, [r3, #0]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	69db      	ldr	r3, [r3, #28]
 801686e:	1ad3      	subs	r3, r2, r3
 8016870:	68fa      	ldr	r2, [r7, #12]
 8016872:	6812      	ldr	r2, [r2, #0]
 8016874:	9201      	str	r2, [sp, #4]
 8016876:	9300      	str	r3, [sp, #0]
 8016878:	460b      	mov	r3, r1
 801687a:	4622      	mov	r2, r4
 801687c:	4601      	mov	r1, r0
 801687e:	4806      	ldr	r0, [pc, #24]	@ (8016898 <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8016880:	f00b ffa0 	bl	80227c4 <lUDPLoggingPrintf>
 8016884:	e001      	b.n	801688a <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 8016886:	2300      	movs	r3, #0
 8016888:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 801688a:	68fb      	ldr	r3, [r7, #12]
        }
 801688c:	4618      	mov	r0, r3
 801688e:	3714      	adds	r7, #20
 8016890:	46bd      	mov	sp, r7
 8016892:	bd90      	pop	{r4, r7, pc}
 8016894:	2000164c 	.word	0x2000164c
 8016898:	080276e0 	.word	0x080276e0

0801689c <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 801689c:	b590      	push	{r4, r7, lr}
 801689e:	b087      	sub	sp, #28
 80168a0:	af02      	add	r7, sp, #8
 80168a2:	6078      	str	r0, [r7, #4]
 80168a4:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	3354      	adds	r3, #84	@ 0x54
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7ff faaf 	bl	8015e0e <xTCPWindowPeekHead>
 80168b0:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d04f      	beq.n	8016958 <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	781b      	ldrb	r3, [r3, #0]
 80168bc:	f003 0302 	and.w	r3, r3, #2
 80168c0:	b2db      	uxtb	r3, r3
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d008      	beq.n	80168d8 <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	689a      	ldr	r2, [r3, #8]
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80168ce:	429a      	cmp	r2, r3
 80168d0:	da02      	bge.n	80168d8 <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 80168d2:	2300      	movs	r3, #0
 80168d4:	60fb      	str	r3, [r7, #12]
 80168d6:	e03f      	b.n	8016958 <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 80168d8:	6839      	ldr	r1, [r7, #0]
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f7ff fed8 	bl	8016690 <prvTCPWindowTxHasSpace>
 80168e0:	4603      	mov	r3, r0
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d102      	bne.n	80168ec <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 80168e6:	2300      	movs	r3, #0
 80168e8:	60fb      	str	r3, [r7, #12]
 80168ea:	e035      	b.n	8016958 <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	3354      	adds	r3, #84	@ 0x54
 80168f0:	4618      	mov	r0, r3
 80168f2:	f7ff fa73 	bl	8015ddc <xTCPWindowGetHead>
 80168f6:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80168fc:	68fa      	ldr	r2, [r7, #12]
 80168fe:	429a      	cmp	r2, r3
 8016900:	d102      	bne.n	8016908 <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2200      	movs	r2, #0
 8016906:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	68fa      	ldr	r2, [r7, #12]
 801690e:	6892      	ldr	r2, [r2, #8]
 8016910:	441a      	add	r2, r3
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016916:	4b13      	ldr	r3, [pc, #76]	@ (8016964 <pxTCPWindowTx_GetTXQueue+0xc8>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	2b01      	cmp	r3, #1
 801691c:	dd1c      	ble.n	8016958 <pxTCPWindowTx_GetTXQueue+0xbc>
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016924:	2b17      	cmp	r3, #23
 8016926:	d017      	beq.n	8016958 <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801692e:	4618      	mov	r0, r3
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016936:	461c      	mov	r4, r3
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	6899      	ldr	r1, [r3, #8]
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	681a      	ldr	r2, [r3, #0]
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	69db      	ldr	r3, [r3, #28]
 8016944:	1ad3      	subs	r3, r2, r3
 8016946:	683a      	ldr	r2, [r7, #0]
 8016948:	9201      	str	r2, [sp, #4]
 801694a:	9300      	str	r3, [sp, #0]
 801694c:	460b      	mov	r3, r1
 801694e:	4622      	mov	r2, r4
 8016950:	4601      	mov	r1, r0
 8016952:	4805      	ldr	r0, [pc, #20]	@ (8016968 <pxTCPWindowTx_GetTXQueue+0xcc>)
 8016954:	f00b ff36 	bl	80227c4 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 8016958:	68fb      	ldr	r3, [r7, #12]
        }
 801695a:	4618      	mov	r0, r3
 801695c:	3714      	adds	r7, #20
 801695e:	46bd      	mov	sp, r7
 8016960:	bd90      	pop	{r4, r7, pc}
 8016962:	bf00      	nop
 8016964:	2000164c 	.word	0x2000164c
 8016968:	0802772c 	.word	0x0802772c

0801696c <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 801696c:	b590      	push	{r4, r7, lr}
 801696e:	b08b      	sub	sp, #44	@ 0x2c
 8016970:	af02      	add	r7, sp, #8
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 8016978:	2300      	movs	r3, #0
 801697a:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	3340      	adds	r3, #64	@ 0x40
 8016980:	4618      	mov	r0, r3
 8016982:	f7ff fa2b 	bl	8015ddc <xTCPWindowGetHead>
 8016986:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8016990:	69fb      	ldr	r3, [r7, #28]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d01c      	beq.n	80169d0 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 8016996:	4b41      	ldr	r3, [pc, #260]	@ (8016a9c <ulTCPWindowTxGet+0x130>)
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d024      	beq.n	80169e8 <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80169a4:	4618      	mov	r0, r3
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80169ac:	461c      	mov	r4, r3
 80169ae:	69fb      	ldr	r3, [r7, #28]
 80169b0:	6899      	ldr	r1, [r3, #8]
 80169b2:	69fb      	ldr	r3, [r7, #28]
 80169b4:	681a      	ldr	r2, [r3, #0]
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	69db      	ldr	r3, [r3, #28]
 80169ba:	1ad3      	subs	r3, r2, r3
 80169bc:	68ba      	ldr	r2, [r7, #8]
 80169be:	9201      	str	r2, [sp, #4]
 80169c0:	9300      	str	r3, [sp, #0]
 80169c2:	460b      	mov	r3, r1
 80169c4:	4622      	mov	r2, r4
 80169c6:	4601      	mov	r1, r0
 80169c8:	4835      	ldr	r0, [pc, #212]	@ (8016aa0 <ulTCPWindowTxGet+0x134>)
 80169ca:	f00b fefb 	bl	80227c4 <lUDPLoggingPrintf>
 80169ce:	e00b      	b.n	80169e8 <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 80169d0:	68f8      	ldr	r0, [r7, #12]
 80169d2:	f7ff ff09 	bl	80167e8 <pxTCPWindowTx_GetWaitQueue>
 80169d6:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 80169d8:	69fb      	ldr	r3, [r7, #28]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d104      	bne.n	80169e8 <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 80169de:	68b9      	ldr	r1, [r7, #8]
 80169e0:	68f8      	ldr	r0, [r7, #12]
 80169e2:	f7ff ff5b 	bl	801689c <pxTCPWindowTx_GetTXQueue>
 80169e6:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 80169e8:	69fb      	ldr	r3, [r7, #28]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d051      	beq.n	8016a92 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 80169ee:	69fb      	ldr	r3, [r7, #28]
 80169f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d004      	beq.n	8016a00 <ulTCPWindowTxGet+0x94>
 80169f6:	f240 7136 	movw	r1, #1846	@ 0x736
 80169fa:	482a      	ldr	r0, [pc, #168]	@ (8016aa4 <ulTCPWindowTxGet+0x138>)
 80169fc:	f7eb f804 	bl	8001a08 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016a06:	69fb      	ldr	r3, [r7, #28]
 8016a08:	3318      	adds	r3, #24
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	4610      	mov	r0, r2
 8016a0e:	f7ff f86d 	bl	8015aec <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8016a12:	69fa      	ldr	r2, [r7, #28]
 8016a14:	7d93      	ldrb	r3, [r2, #22]
 8016a16:	f043 0301 	orr.w	r3, r3, #1
 8016a1a:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8016a1c:	69fb      	ldr	r3, [r7, #28]
 8016a1e:	7d1b      	ldrb	r3, [r3, #20]
 8016a20:	3301      	adds	r3, #1
 8016a22:	b2da      	uxtb	r2, r3
 8016a24:	69fb      	ldr	r3, [r7, #28]
 8016a26:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8016a28:	69fb      	ldr	r3, [r7, #28]
 8016a2a:	7d1b      	ldrb	r3, [r3, #20]
 8016a2c:	2b04      	cmp	r3, #4
 8016a2e:	d120      	bne.n	8016a72 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	689a      	ldr	r2, [r3, #8]
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8016a3a:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8016a3c:	429a      	cmp	r2, r3
 8016a3e:	d918      	bls.n	8016a72 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8016a46:	005b      	lsls	r3, r3, #1
 8016a48:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016a50:	4619      	mov	r1, r3
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016a58:	4618      	mov	r0, r3
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	689a      	ldr	r2, [r3, #8]
 8016a5e:	8afb      	ldrh	r3, [r7, #22]
 8016a60:	9300      	str	r3, [sp, #0]
 8016a62:	4613      	mov	r3, r2
 8016a64:	4602      	mov	r2, r0
 8016a66:	4810      	ldr	r0, [pc, #64]	@ (8016aa8 <ulTCPWindowTxGet+0x13c>)
 8016a68:	f00b feac 	bl	80227c4 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 8016a6c:	8afa      	ldrh	r2, [r7, #22]
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8016a72:	69fb      	ldr	r3, [r7, #28]
 8016a74:	3310      	adds	r3, #16
 8016a76:	4618      	mov	r0, r3
 8016a78:	f7ff f848 	bl	8015b0c <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8016a7c:	69fb      	ldr	r3, [r7, #28]
 8016a7e:	681a      	ldr	r2, [r3, #0]
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8016a84:	69fb      	ldr	r3, [r7, #28]
 8016a86:	68da      	ldr	r2, [r3, #12]
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8016a8c:	69fb      	ldr	r3, [r7, #28]
 8016a8e:	689b      	ldr	r3, [r3, #8]
 8016a90:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8016a92:	69bb      	ldr	r3, [r7, #24]
        }
 8016a94:	4618      	mov	r0, r3
 8016a96:	3724      	adds	r7, #36	@ 0x24
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd90      	pop	{r4, r7, pc}
 8016a9c:	2000164c 	.word	0x2000164c
 8016aa0:	08027778 	.word	0x08027778
 8016aa4:	08027414 	.word	0x08027414
 8016aa8:	080277c4 	.word	0x080277c4

08016aac <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b084      	sub	sp, #16
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
 8016ab4:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8016ab6:	683b      	ldr	r3, [r7, #0]
 8016ab8:	3310      	adds	r3, #16
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7ff f833 	bl	8015b26 <ulTimerGetAge>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016ac8:	68fa      	ldr	r2, [r7, #12]
 8016aca:	429a      	cmp	r2, r3
 8016acc:	dc0e      	bgt.n	8016aec <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016ad2:	4613      	mov	r3, r2
 8016ad4:	00db      	lsls	r3, r3, #3
 8016ad6:	1a9a      	subs	r2, r3, r2
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	4413      	add	r3, r2
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	da00      	bge.n	8016ae2 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8016ae0:	3307      	adds	r3, #7
 8016ae2:	10db      	asrs	r3, r3, #3
 8016ae4:	461a      	mov	r2, r3
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	639a      	str	r2, [r3, #56]	@ 0x38
 8016aea:	e00d      	b.n	8016b08 <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016af0:	4613      	mov	r3, r2
 8016af2:	005b      	lsls	r3, r3, #1
 8016af4:	441a      	add	r2, r3
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	4413      	add	r3, r2
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	da00      	bge.n	8016b00 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8016afe:	3303      	adds	r3, #3
 8016b00:	109b      	asrs	r3, r3, #2
 8016b02:	461a      	mov	r2, r3
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016b0c:	2b31      	cmp	r3, #49	@ 0x31
 8016b0e:	dc02      	bgt.n	8016b16 <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	2232      	movs	r2, #50	@ 0x32
 8016b14:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8016b16:	bf00      	nop
 8016b18:	3710      	adds	r7, #16
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}
	...

08016b20 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8016b20:	b5b0      	push	{r4, r5, r7, lr}
 8016b22:	b090      	sub	sp, #64	@ 0x40
 8016b24:	af04      	add	r7, sp, #16
 8016b26:	60f8      	str	r0, [r7, #12]
 8016b28:	60b9      	str	r1, [r7, #8]
 8016b2a:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	3398      	adds	r3, #152	@ 0x98
 8016b38:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 8016b3a:	69fb      	ldr	r3, [r7, #28]
 8016b3c:	685b      	ldr	r3, [r3, #4]
 8016b3e:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8016b40:	e0a6      	b.n	8016c90 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8016b42:	2300      	movs	r3, #0
 8016b44:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b48:	68db      	ldr	r3, [r3, #12]
 8016b4a:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8016b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b4e:	685b      	ldr	r3, [r3, #4]
 8016b50:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8016b52:	69bb      	ldr	r3, [r7, #24]
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	4619      	mov	r1, r3
 8016b58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016b5a:	f7fe ff9c 	bl	8015a96 <xSequenceGreaterThan>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	f040 8094 	bne.w	8016c8e <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8016b66:	69bb      	ldr	r3, [r7, #24]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016b6c:	429a      	cmp	r2, r3
 8016b6e:	f040 809c 	bne.w	8016caa <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8016b72:	69bb      	ldr	r3, [r7, #24]
 8016b74:	689b      	ldr	r3, [r3, #8]
 8016b76:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016b78:	69bb      	ldr	r3, [r7, #24]
 8016b7a:	7d9b      	ldrb	r3, [r3, #22]
 8016b7c:	f003 0302 	and.w	r3, r3, #2
 8016b80:	b2db      	uxtb	r3, r3
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d144      	bne.n	8016c10 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8016b86:	69bb      	ldr	r3, [r7, #24]
 8016b88:	681a      	ldr	r2, [r3, #0]
 8016b8a:	697b      	ldr	r3, [r7, #20]
 8016b8c:	4413      	add	r3, r2
 8016b8e:	6879      	ldr	r1, [r7, #4]
 8016b90:	4618      	mov	r0, r3
 8016b92:	f7fe ff80 	bl	8015a96 <xSequenceGreaterThan>
 8016b96:	4603      	mov	r3, r0
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d023      	beq.n	8016be4 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8016b9c:	69bb      	ldr	r3, [r7, #24]
 8016b9e:	681a      	ldr	r2, [r3, #0]
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	69db      	ldr	r3, [r3, #28]
 8016ba4:	1ad3      	subs	r3, r2, r3
 8016ba6:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016bae:	461c      	mov	r4, r3
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016bb6:	461d      	mov	r5, r3
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	69db      	ldr	r3, [r3, #28]
 8016bbc:	693a      	ldr	r2, [r7, #16]
 8016bbe:	1ad0      	subs	r0, r2, r3
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	69db      	ldr	r3, [r3, #28]
 8016bc4:	687a      	ldr	r2, [r7, #4]
 8016bc6:	1ad3      	subs	r3, r2, r3
 8016bc8:	6939      	ldr	r1, [r7, #16]
 8016bca:	697a      	ldr	r2, [r7, #20]
 8016bcc:	440a      	add	r2, r1
 8016bce:	9202      	str	r2, [sp, #8]
 8016bd0:	693a      	ldr	r2, [r7, #16]
 8016bd2:	9201      	str	r2, [sp, #4]
 8016bd4:	9300      	str	r3, [sp, #0]
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	462a      	mov	r2, r5
 8016bda:	4621      	mov	r1, r4
 8016bdc:	4836      	ldr	r0, [pc, #216]	@ (8016cb8 <prvTCPWindowTxCheckAck+0x198>)
 8016bde:	f00b fdf1 	bl	80227c4 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8016be2:	e063      	b.n	8016cac <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8016be4:	69ba      	ldr	r2, [r7, #24]
 8016be6:	7d93      	ldrb	r3, [r2, #22]
 8016be8:	f043 0302 	orr.w	r3, r3, #2
 8016bec:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016bee:	69bb      	ldr	r3, [r7, #24]
 8016bf0:	7d1b      	ldrb	r3, [r3, #20]
 8016bf2:	2b01      	cmp	r3, #1
 8016bf4:	d10a      	bne.n	8016c0c <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8016bf6:	69bb      	ldr	r3, [r7, #24]
 8016bf8:	681a      	ldr	r2, [r3, #0]
 8016bfa:	697b      	ldr	r3, [r7, #20]
 8016bfc:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016bfe:	687a      	ldr	r2, [r7, #4]
 8016c00:	429a      	cmp	r2, r3
 8016c02:	d103      	bne.n	8016c0c <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8016c04:	69b9      	ldr	r1, [r7, #24]
 8016c06:	68f8      	ldr	r0, [r7, #12]
 8016c08:	f7ff ff50 	bl	8016aac <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	6a1b      	ldr	r3, [r3, #32]
 8016c14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016c16:	429a      	cmp	r2, r3
 8016c18:	d128      	bne.n	8016c6c <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016c1a:	4b28      	ldr	r3, [pc, #160]	@ (8016cbc <prvTCPWindowTxCheckAck+0x19c>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	2b01      	cmp	r3, #1
 8016c20:	dd15      	ble.n	8016c4e <prvTCPWindowTxCheckAck+0x12e>
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016c28:	2b17      	cmp	r3, #23
 8016c2a:	d010      	beq.n	8016c4e <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	69db      	ldr	r3, [r3, #28]
 8016c30:	68ba      	ldr	r2, [r7, #8]
 8016c32:	1ad1      	subs	r1, r2, r3
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	69db      	ldr	r3, [r3, #28]
 8016c38:	687a      	ldr	r2, [r7, #4]
 8016c3a:	1ad0      	subs	r0, r2, r3
 8016c3c:	69bb      	ldr	r3, [r7, #24]
 8016c3e:	681a      	ldr	r2, [r3, #0]
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	69db      	ldr	r3, [r3, #28]
 8016c44:	1ad3      	subs	r3, r2, r3
 8016c46:	4602      	mov	r2, r0
 8016c48:	481d      	ldr	r0, [pc, #116]	@ (8016cc0 <prvTCPWindowTxCheckAck+0x1a0>)
 8016c4a:	f00b fdbb 	bl	80227c4 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	6a1a      	ldr	r2, [r3, #32]
 8016c52:	697b      	ldr	r3, [r7, #20]
 8016c54:	441a      	add	r2, r3
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8016c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016c5c:	697b      	ldr	r3, [r7, #20]
 8016c5e:	4413      	add	r3, r2
 8016c60:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8016c62:	69b8      	ldr	r0, [r7, #24]
 8016c64:	f7ff f8ec 	bl	8015e40 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8016c68:	2300      	movs	r3, #0
 8016c6a:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8016c6c:	6a3b      	ldr	r3, [r7, #32]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d008      	beq.n	8016c84 <prvTCPWindowTxCheckAck+0x164>
 8016c72:	69bb      	ldr	r3, [r7, #24]
 8016c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d004      	beq.n	8016c84 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016c7a:	69bb      	ldr	r3, [r7, #24]
 8016c7c:	3318      	adds	r3, #24
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f7ec fe36 	bl	80038f0 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8016c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016c86:	697b      	ldr	r3, [r7, #20]
 8016c88:	4413      	add	r3, r2
 8016c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016c8c:	e000      	b.n	8016c90 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 8016c8e:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8016c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c92:	69fb      	ldr	r3, [r7, #28]
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d009      	beq.n	8016cac <prvTCPWindowTxCheckAck+0x18c>
 8016c98:	6879      	ldr	r1, [r7, #4]
 8016c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016c9c:	f7fe fee5 	bl	8015a6a <xSequenceLessThan>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	f47f af4d 	bne.w	8016b42 <prvTCPWindowTxCheckAck+0x22>
 8016ca8:	e000      	b.n	8016cac <prvTCPWindowTxCheckAck+0x18c>
                    break;
 8016caa:	bf00      	nop
            }

            return ulBytesConfirmed;
 8016cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3730      	adds	r7, #48	@ 0x30
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8016cb6:	bf00      	nop
 8016cb8:	080277fc 	.word	0x080277fc
 8016cbc:	2000164c 	.word	0x2000164c
 8016cc0:	08027844 	.word	0x08027844

08016cc4 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b086      	sub	sp, #24
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
 8016ccc:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8016cce:	2300      	movs	r3, #0
 8016cd0:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	3370      	adds	r3, #112	@ 0x70
 8016cd6:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	685b      	ldr	r3, [r3, #4]
 8016cdc:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8016cde:	e049      	b.n	8016d74 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016ce0:	697b      	ldr	r3, [r7, #20]
 8016ce2:	68db      	ldr	r3, [r3, #12]
 8016ce4:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8016ce6:	697b      	ldr	r3, [r7, #20]
 8016ce8:	685b      	ldr	r3, [r3, #4]
 8016cea:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	7d9b      	ldrb	r3, [r3, #22]
 8016cf0:	f003 0302 	and.w	r3, r3, #2
 8016cf4:	b2db      	uxtb	r3, r3
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d13c      	bne.n	8016d74 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8016cfa:	68bb      	ldr	r3, [r7, #8]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	6839      	ldr	r1, [r7, #0]
 8016d00:	4618      	mov	r0, r3
 8016d02:	f7fe feb2 	bl	8015a6a <xSequenceLessThan>
 8016d06:	4603      	mov	r3, r0
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d033      	beq.n	8016d74 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	7d5b      	ldrb	r3, [r3, #21]
 8016d10:	3301      	adds	r3, #1
 8016d12:	b2da      	uxtb	r2, r3
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8016d18:	68bb      	ldr	r3, [r7, #8]
 8016d1a:	7d5b      	ldrb	r3, [r3, #21]
 8016d1c:	2b03      	cmp	r3, #3
 8016d1e:	d129      	bne.n	8016d74 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8016d20:	68bb      	ldr	r3, [r7, #8]
 8016d22:	2200      	movs	r2, #0
 8016d24:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016d26:	4b18      	ldr	r3, [pc, #96]	@ (8016d88 <prvTCPWindowFastRetransmit+0xc4>)
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	db11      	blt.n	8016d52 <prvTCPWindowFastRetransmit+0x8e>
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016d34:	2b17      	cmp	r3, #23
 8016d36:	d00c      	beq.n	8016d52 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 8016d38:	68bb      	ldr	r3, [r7, #8]
 8016d3a:	681a      	ldr	r2, [r3, #0]
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	69db      	ldr	r3, [r3, #28]
 8016d40:	1ad1      	subs	r1, r2, r3
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	69db      	ldr	r3, [r3, #28]
 8016d46:	683a      	ldr	r2, [r7, #0]
 8016d48:	1ad3      	subs	r3, r2, r3
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	480f      	ldr	r0, [pc, #60]	@ (8016d8c <prvTCPWindowFastRetransmit+0xc8>)
 8016d4e:	f00b fd39 	bl	80227c4 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016d52:	68bb      	ldr	r3, [r7, #8]
 8016d54:	3318      	adds	r3, #24
 8016d56:	4618      	mov	r0, r3
 8016d58:	f7ec fdca 	bl	80038f0 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8016d62:	68bb      	ldr	r3, [r7, #8]
 8016d64:	3318      	adds	r3, #24
 8016d66:	4619      	mov	r1, r3
 8016d68:	4610      	mov	r0, r2
 8016d6a:	f7fe febf 	bl	8015aec <vListInsertFifo>
                            ulCount++;
 8016d6e:	693b      	ldr	r3, [r7, #16]
 8016d70:	3301      	adds	r3, #1
 8016d72:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8016d74:	697a      	ldr	r2, [r7, #20]
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	429a      	cmp	r2, r3
 8016d7a:	d1b1      	bne.n	8016ce0 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8016d7c:	693b      	ldr	r3, [r7, #16]
        }
 8016d7e:	4618      	mov	r0, r3
 8016d80:	3718      	adds	r7, #24
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}
 8016d86:	bf00      	nop
 8016d88:	2000164c 	.word	0x2000164c
 8016d8c:	08027880 	.word	0x08027880

08016d90 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b084      	sub	sp, #16
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
 8016d98:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6a1b      	ldr	r3, [r3, #32]
 8016d9e:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8016da0:	68b9      	ldr	r1, [r7, #8]
 8016da2:	6838      	ldr	r0, [r7, #0]
 8016da4:	f7fe fe4c 	bl	8015a40 <xSequenceLessThanOrEqual>
 8016da8:	4603      	mov	r3, r0
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d002      	beq.n	8016db4 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8016dae:	2300      	movs	r3, #0
 8016db0:	60fb      	str	r3, [r7, #12]
 8016db2:	e005      	b.n	8016dc0 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8016db4:	683a      	ldr	r2, [r7, #0]
 8016db6:	68b9      	ldr	r1, [r7, #8]
 8016db8:	6878      	ldr	r0, [r7, #4]
 8016dba:	f7ff feb1 	bl	8016b20 <prvTCPWindowTxCheckAck>
 8016dbe:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
        }
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	3710      	adds	r7, #16
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}
	...

08016dcc <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8016dcc:	b5b0      	push	{r4, r5, r7, lr}
 8016dce:	b088      	sub	sp, #32
 8016dd0:	af02      	add	r7, sp, #8
 8016dd2:	60f8      	str	r0, [r7, #12]
 8016dd4:	60b9      	str	r1, [r7, #8]
 8016dd6:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	6a1b      	ldr	r3, [r3, #32]
 8016ddc:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8016dde:	687a      	ldr	r2, [r7, #4]
 8016de0:	68b9      	ldr	r1, [r7, #8]
 8016de2:	68f8      	ldr	r0, [r7, #12]
 8016de4:	f7ff fe9c 	bl	8016b20 <prvTCPWindowTxCheckAck>
 8016de8:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8016dea:	68b9      	ldr	r1, [r7, #8]
 8016dec:	68f8      	ldr	r0, [r7, #12]
 8016dee:	f7ff ff69 	bl	8016cc4 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8016df2:	4b16      	ldr	r3, [pc, #88]	@ (8016e4c <ulTCPWindowTxSack+0x80>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	dd23      	ble.n	8016e42 <ulTCPWindowTxSack+0x76>
 8016dfa:	6979      	ldr	r1, [r7, #20]
 8016dfc:	68b8      	ldr	r0, [r7, #8]
 8016dfe:	f7fe fe4a 	bl	8015a96 <xSequenceGreaterThan>
 8016e02:	4603      	mov	r3, r0
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d01c      	beq.n	8016e42 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016e0e:	461c      	mov	r4, r3
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016e16:	461d      	mov	r5, r3
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	69db      	ldr	r3, [r3, #28]
 8016e1c:	68ba      	ldr	r2, [r7, #8]
 8016e1e:	1ad0      	subs	r0, r2, r3
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	69db      	ldr	r3, [r3, #28]
 8016e24:	687a      	ldr	r2, [r7, #4]
 8016e26:	1ad3      	subs	r3, r2, r3
 8016e28:	68fa      	ldr	r2, [r7, #12]
 8016e2a:	6a11      	ldr	r1, [r2, #32]
 8016e2c:	68fa      	ldr	r2, [r7, #12]
 8016e2e:	69d2      	ldr	r2, [r2, #28]
 8016e30:	1a8a      	subs	r2, r1, r2
 8016e32:	9201      	str	r2, [sp, #4]
 8016e34:	9300      	str	r3, [sp, #0]
 8016e36:	4603      	mov	r3, r0
 8016e38:	462a      	mov	r2, r5
 8016e3a:	4621      	mov	r1, r4
 8016e3c:	4804      	ldr	r0, [pc, #16]	@ (8016e50 <ulTCPWindowTxSack+0x84>)
 8016e3e:	f00b fcc1 	bl	80227c4 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8016e42:	693b      	ldr	r3, [r7, #16]
        }
 8016e44:	4618      	mov	r0, r3
 8016e46:	3718      	adds	r7, #24
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8016e4c:	2000164c 	.word	0x2000164c
 8016e50:	080278c0 	.word	0x080278c0

08016e54 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b084      	sub	sp, #16
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d014      	beq.n	8016e8c <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e66:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	899b      	ldrh	r3, [r3, #12]
 8016e6c:	b29b      	uxth	r3, r3
 8016e6e:	2b08      	cmp	r3, #8
 8016e70:	d004      	beq.n	8016e7c <vProcessGeneratedUDPPacket+0x28>
 8016e72:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8016e76:	4293      	cmp	r3, r2
 8016e78:	d004      	beq.n	8016e84 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 8016e7a:	e007      	b.n	8016e8c <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8016e7c:	6878      	ldr	r0, [r7, #4]
 8016e7e:	f000 f845 	bl	8016f0c <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8016e82:	e003      	b.n	8016e8c <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 8016e84:	6878      	ldr	r0, [r7, #4]
 8016e86:	f000 fae3 	bl	8017450 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 8016e8a:	bf00      	nop
        }
    }
}
 8016e8c:	bf00      	nop
 8016e8e:	3710      	adds	r7, #16
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}

08016e94 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b086      	sub	sp, #24
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	60f8      	str	r0, [r7, #12]
 8016e9c:	460b      	mov	r3, r1
 8016e9e:	607a      	str	r2, [r7, #4]
 8016ea0:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d103      	bne.n	8016eb4 <xProcessReceivedUDPPacket+0x20>
 8016eac:	2178      	movs	r1, #120	@ 0x78
 8016eae:	4816      	ldr	r0, [pc, #88]	@ (8016f08 <xProcessReceivedUDPPacket+0x74>)
 8016eb0:	f7ea fdaa 	bl	8001a08 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d103      	bne.n	8016ec4 <xProcessReceivedUDPPacket+0x30>
 8016ebc:	2179      	movs	r1, #121	@ 0x79
 8016ebe:	4812      	ldr	r0, [pc, #72]	@ (8016f08 <xProcessReceivedUDPPacket+0x74>)
 8016ec0:	f7ea fda2 	bl	8001a08 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ec8:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8016eca:	693b      	ldr	r3, [r7, #16]
 8016ecc:	899b      	ldrh	r3, [r3, #12]
 8016ece:	b29b      	uxth	r3, r3
 8016ed0:	2b08      	cmp	r3, #8
 8016ed2:	d004      	beq.n	8016ede <xProcessReceivedUDPPacket+0x4a>
 8016ed4:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8016ed8:	4293      	cmp	r3, r2
 8016eda:	d008      	beq.n	8016eee <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8016edc:	e00f      	b.n	8016efe <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8016ede:	897b      	ldrh	r3, [r7, #10]
 8016ee0:	687a      	ldr	r2, [r7, #4]
 8016ee2:	4619      	mov	r1, r3
 8016ee4:	68f8      	ldr	r0, [r7, #12]
 8016ee6:	f000 f92f 	bl	8017148 <xProcessReceivedUDPPacket_IPv4>
 8016eea:	6178      	str	r0, [r7, #20]
                break;
 8016eec:	e007      	b.n	8016efe <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 8016eee:	897b      	ldrh	r3, [r7, #10]
 8016ef0:	687a      	ldr	r2, [r7, #4]
 8016ef2:	4619      	mov	r1, r3
 8016ef4:	68f8      	ldr	r0, [r7, #12]
 8016ef6:	f000 fbdd 	bl	80176b4 <xProcessReceivedUDPPacket_IPv6>
 8016efa:	6178      	str	r0, [r7, #20]
                break;
 8016efc:	bf00      	nop
    }

    return xReturn;
 8016efe:	697b      	ldr	r3, [r7, #20]
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3718      	adds	r7, #24
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}
 8016f08:	080278f4 	.word	0x080278f4

08016f0c <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b08e      	sub	sp, #56	@ 0x38
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	695b      	ldr	r3, [r3, #20]
 8016f18:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f1e:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f24:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d104      	bne.n	8016f38 <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f32:	3b2a      	subs	r3, #42	@ 0x2a
 8016f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8016f36:	e003      	b.n	8016f40 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f3c:	3b2a      	subs	r3, #42	@ 0x2a
 8016f3e:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8016f40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016f42:	f107 0208 	add.w	r2, r7, #8
 8016f46:	f107 030c 	add.w	r3, r7, #12
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f7f0 fc4a 	bl	80077e4 <eARPGetCacheEntry>
 8016f50:	4603      	mov	r3, r0
 8016f52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d102      	bne.n	8016f64 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016f5e:	68ba      	ldr	r2, [r7, #8]
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 8016f64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016f68:	2b02      	cmp	r3, #2
 8016f6a:	f000 80a0 	beq.w	80170ae <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 8016f6e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016f72:	2b01      	cmp	r3, #1
 8016f74:	d176      	bne.n	8017064 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 8016f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f78:	330e      	adds	r3, #14
 8016f7a:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d025      	beq.n	8016fd0 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8016f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f86:	3322      	adds	r3, #34	@ 0x22
 8016f88:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016f8e:	6a3b      	ldr	r3, [r7, #32]
 8016f90:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8016f96:	6a3b      	ldr	r3, [r7, #32]
 8016f98:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8016f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f9c:	b29b      	uxth	r3, r3
 8016f9e:	3308      	adds	r3, #8
 8016fa0:	b29a      	uxth	r2, r3
 8016fa2:	6a3b      	ldr	r3, [r7, #32]
 8016fa4:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8016fa6:	6a3b      	ldr	r3, [r7, #32]
 8016fa8:	889b      	ldrh	r3, [r3, #4]
 8016faa:	b29b      	uxth	r3, r3
 8016fac:	021b      	lsls	r3, r3, #8
 8016fae:	b21a      	sxth	r2, r3
 8016fb0:	6a3b      	ldr	r3, [r7, #32]
 8016fb2:	889b      	ldrh	r3, [r3, #4]
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	0a1b      	lsrs	r3, r3, #8
 8016fb8:	b29b      	uxth	r3, r3
 8016fba:	b21b      	sxth	r3, r3
 8016fbc:	4313      	orrs	r3, r2
 8016fbe:	b21b      	sxth	r3, r3
 8016fc0:	b29a      	uxth	r2, r3
 8016fc2:	6a3b      	ldr	r3, [r7, #32]
 8016fc4:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8016fc6:	6a3b      	ldr	r3, [r7, #32]
 8016fc8:	2200      	movs	r2, #0
 8016fca:	719a      	strb	r2, [r3, #6]
 8016fcc:	2200      	movs	r2, #0
 8016fce:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8016fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8017140 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 8016fd2:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fd8:	3306      	adds	r3, #6
 8016fda:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8016fdc:	2218      	movs	r2, #24
 8016fde:	69f9      	ldr	r1, [r7, #28]
 8016fe0:	69b8      	ldr	r0, [r7, #24]
 8016fe2:	f00b fe0b 	bl	8022bfc <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d109      	bne.n	8017002 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8016fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ff0:	2201      	movs	r2, #1
 8016ff2:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8016ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ff6:	b29b      	uxth	r3, r3
 8016ff8:	331c      	adds	r3, #28
 8016ffa:	b29a      	uxth	r2, r3
 8016ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ffe:	805a      	strh	r2, [r3, #2]
 8017000:	e005      	b.n	801700e <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8017002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017004:	b29b      	uxth	r3, r3
 8017006:	331c      	adds	r3, #28
 8017008:	b29a      	uxth	r2, r3
 801700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801700c:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 801700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017010:	885b      	ldrh	r3, [r3, #2]
 8017012:	b29b      	uxth	r3, r3
 8017014:	021b      	lsls	r3, r3, #8
 8017016:	b21a      	sxth	r2, r3
 8017018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801701a:	885b      	ldrh	r3, [r3, #2]
 801701c:	b29b      	uxth	r3, r3
 801701e:	0a1b      	lsrs	r3, r3, #8
 8017020:	b29b      	uxth	r3, r3
 8017022:	b21b      	sxth	r3, r3
 8017024:	4313      	orrs	r3, r2
 8017026:	b21b      	sxth	r3, r3
 8017028:	b29a      	uxth	r2, r3
 801702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801702c:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	695a      	ldr	r2, [r3, #20]
 8017032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017034:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801703a:	2b00      	cmp	r3, #0
 801703c:	d004      	beq.n	8017048 <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017042:	681a      	ldr	r2, [r3, #0]
 8017044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017046:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8017048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801704a:	2200      	movs	r2, #0
 801704c:	719a      	strb	r2, [r3, #6]
 801704e:	2200      	movs	r2, #0
 8017050:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	695b      	ldr	r3, [r3, #20]
 8017056:	4a3b      	ldr	r2, [pc, #236]	@ (8017144 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 8017058:	4293      	cmp	r3, r2
 801705a:	d128      	bne.n	80170ae <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 801705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801705e:	2201      	movs	r2, #1
 8017060:	721a      	strb	r2, [r3, #8]
 8017062:	e024      	b.n	80170ae <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8017064:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8017068:	2b00      	cmp	r3, #0
 801706a:	d11d      	bne.n	80170a8 <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	2200      	movs	r2, #0
 8017070:	4619      	mov	r1, r3
 8017072:	2000      	movs	r0, #0
 8017074:	f7f0 faa2 	bl	80075bc <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	695b      	ldr	r3, [r3, #20]
 801707c:	210b      	movs	r1, #11
 801707e:	4618      	mov	r0, r3
 8017080:	f7f6 fe3a 	bl	800dcf8 <FreeRTOS_FindEndPointOnNetMask>
 8017084:	4602      	mov	r2, r0
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801708e:	2b00      	cmp	r3, #0
 8017090:	d103      	bne.n	801709a <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 8017092:	2302      	movs	r3, #2
 8017094:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8017098:	e009      	b.n	80170ae <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 801709a:	68fa      	ldr	r2, [r7, #12]
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 80170a0:	6878      	ldr	r0, [r7, #4]
 80170a2:	f7f0 fe07 	bl	8007cb4 <vARPGenerateRequestPacket>
 80170a6:	e002      	b.n	80170ae <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 80170a8:	2302      	movs	r3, #2
 80170aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 80170ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80170b2:	2b02      	cmp	r3, #2
 80170b4:	d03d      	beq.n	8017132 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d035      	beq.n	801712a <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80170c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80170c6:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170cc:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80170ce:	693b      	ldr	r3, [r7, #16]
 80170d0:	1d98      	adds	r0, r3, #6
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80170d6:	33e8      	adds	r3, #232	@ 0xe8
 80170d8:	2206      	movs	r2, #6
 80170da:	4619      	mov	r1, r3
 80170dc:	f00b fd8e 	bl	8022bfc <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170e4:	2b3b      	cmp	r3, #59	@ 0x3b
 80170e6:	d812      	bhi.n	801710e <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80170ee:	e008      	b.n	8017102 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80170f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170f6:	4413      	add	r3, r2
 80170f8:	2200      	movs	r2, #0
 80170fa:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80170fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170fe:	3301      	adds	r3, #1
 8017100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017104:	2b3b      	cmp	r3, #59	@ 0x3b
 8017106:	ddf3      	ble.n	80170f0 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	223c      	movs	r2, #60	@ 0x3c
 801710c:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d011      	beq.n	8017138 <vProcessGeneratedUDPPacket_IPv4+0x22c>
 8017114:	697b      	ldr	r3, [r7, #20]
 8017116:	68db      	ldr	r3, [r3, #12]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d00d      	beq.n	8017138 <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	68db      	ldr	r3, [r3, #12]
 8017120:	2201      	movs	r2, #1
 8017122:	6879      	ldr	r1, [r7, #4]
 8017124:	6978      	ldr	r0, [r7, #20]
 8017126:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8017128:	e006      	b.n	8017138 <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801712a:	6878      	ldr	r0, [r7, #4]
 801712c:	f000 fca2 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
}
 8017130:	e002      	b.n	8017138 <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8017132:	6878      	ldr	r0, [r7, #4]
 8017134:	f000 fc9e 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
}
 8017138:	bf00      	nop
 801713a:	3738      	adds	r7, #56	@ 0x38
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}
 8017140:	08028020 	.word	0x08028020
 8017144:	fc0000e0 	.word	0xfc0000e0

08017148 <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8017148:	b590      	push	{r4, r7, lr}
 801714a:	b099      	sub	sp, #100	@ 0x64
 801714c:	af02      	add	r7, sp, #8
 801714e:	60f8      	str	r0, [r7, #12]
 8017150:	460b      	mov	r3, r1
 8017152:	607a      	str	r2, [r7, #4]
 8017154:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 8017156:	2301      	movs	r3, #1
 8017158:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d104      	bne.n	801716a <xProcessReceivedUDPPacket_IPv4+0x22>
 8017160:	f240 116f 	movw	r1, #367	@ 0x16f
 8017164:	4872      	ldr	r0, [pc, #456]	@ (8017330 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8017166:	f7ea fc4f 	bl	8001a08 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801716e:	2b00      	cmp	r3, #0
 8017170:	d104      	bne.n	801717c <xProcessReceivedUDPPacket_IPv4+0x34>
 8017172:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8017176:	486e      	ldr	r0, [pc, #440]	@ (8017330 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8017178:	f7ea fc46 	bl	8001a08 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017180:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017186:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8017188:	897b      	ldrh	r3, [r7, #10]
 801718a:	4618      	mov	r0, r3
 801718c:	f7f8 fb42 	bl	800f814 <pxUDPSocketLookup>
 8017190:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	2200      	movs	r2, #0
 8017196:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 8017198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801719a:	2b00      	cmp	r3, #0
 801719c:	f000 8085 	beq.w	80172aa <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 80171a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d018      	beq.n	80171d8 <xProcessReceivedUDPPacket_IPv4+0x90>
 80171a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d014      	beq.n	80171d8 <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80171ae:	68f8      	ldr	r0, [r7, #12]
 80171b0:	f7f0 f8ee 	bl	8007390 <xCheckRequiresARPResolution>
 80171b4:	4603      	mov	r3, r0
 80171b6:	2b01      	cmp	r3, #1
 80171b8:	d105      	bne.n	80171c6 <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	2201      	movs	r2, #1
 80171be:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 80171c0:	2300      	movs	r3, #0
 80171c2:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 80171c4:	e0ae      	b.n	8017324 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80171c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80171c8:	1d9a      	adds	r2, r3, #6
 80171ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80171cc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80171d0:	4619      	mov	r1, r3
 80171d2:	4610      	mov	r0, r2
 80171d4:	f7f0 f9bc 	bl	8007550 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80171d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d02f      	beq.n	8017240 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171e4:	332a      	adds	r3, #42	@ 0x2a
 80171e6:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80171e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171ec:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80171f2:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	695b      	ldr	r3, [r3, #20]
 80171f8:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 80171fa:	2302      	movs	r3, #2
 80171fc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8017200:	2318      	movs	r3, #24
 8017202:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 8017206:	897b      	ldrh	r3, [r7, #10]
 8017208:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 801720a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801720c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8017210:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8017212:	2302      	movs	r3, #2
 8017214:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8017216:	2318      	movs	r3, #24
 8017218:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801721e:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 8017222:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8017226:	f107 0310 	add.w	r3, r7, #16
 801722a:	9300      	str	r3, [sp, #0]
 801722c:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 801722e:	460b      	mov	r3, r1
 8017230:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017232:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017234:	47a0      	blx	r4
 8017236:	4603      	mov	r3, r0
 8017238:	2b00      	cmp	r3, #0
 801723a:	d001      	beq.n	8017240 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 801723c:	2300      	movs	r3, #0
 801723e:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8017240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017242:	2b01      	cmp	r3, #1
 8017244:	d16e      	bne.n	8017324 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8017246:	f7ed fc3b 	bl	8004ac0 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 801724a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801724c:	3354      	adds	r3, #84	@ 0x54
 801724e:	68fa      	ldr	r2, [r7, #12]
 8017250:	4611      	mov	r1, r2
 8017252:	4618      	mov	r0, r3
 8017254:	f7ec faef 	bl	8003836 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8017258:	f7ed fc40 	bl	8004adc <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 801725c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801725e:	685b      	ldr	r3, [r3, #4]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d005      	beq.n	8017270 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8017264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017266:	685b      	ldr	r3, [r3, #4]
 8017268:	2101      	movs	r1, #1
 801726a:	4618      	mov	r0, r3
 801726c:	f7ec f9de 	bl	800362c <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8017270:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017274:	2b00      	cmp	r3, #0
 8017276:	d00c      	beq.n	8017292 <xProcessReceivedUDPPacket_IPv4+0x14a>
 8017278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801727a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801727c:	f003 0301 	and.w	r3, r3, #1
 8017280:	2b00      	cmp	r3, #0
 8017282:	d006      	beq.n	8017292 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8017284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	2101      	movs	r1, #1
 801728c:	4618      	mov	r0, r3
 801728e:	f7ec f9cd 	bl	800362c <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8017292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017296:	2b00      	cmp	r3, #0
 8017298:	d044      	beq.n	8017324 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801729a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801729c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801729e:	2300      	movs	r3, #0
 80172a0:	2200      	movs	r2, #0
 80172a2:	2100      	movs	r1, #0
 80172a4:	f7ec fc9e 	bl	8003be4 <xQueueGenericSend>
 80172a8:	e03c      	b.n	8017324 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 80172aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172ac:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80172ae:	b29b      	uxth	r3, r3
 80172b0:	021b      	lsls	r3, r3, #8
 80172b2:	b21a      	sxth	r2, r3
 80172b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172b6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80172b8:	b29b      	uxth	r3, r3
 80172ba:	0a1b      	lsrs	r3, r3, #8
 80172bc:	b29b      	uxth	r3, r3
 80172be:	b21b      	sxth	r3, r3
 80172c0:	4313      	orrs	r3, r2
 80172c2:	b21b      	sxth	r3, r3
 80172c4:	2b35      	cmp	r3, #53	@ 0x35
 80172c6:	d10f      	bne.n	80172e8 <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 80172c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172ca:	1d98      	adds	r0, r3, #6
 80172cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172ce:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80172d6:	461a      	mov	r2, r3
 80172d8:	f7f0 f970 	bl	80075bc <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80172dc:	68f8      	ldr	r0, [r7, #12]
 80172de:	f7f0 fe02 	bl	8007ee6 <ulDNSHandlePacket>
 80172e2:	4603      	mov	r3, r0
 80172e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80172e6:	e01d      	b.n	8017324 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80172e8:	897b      	ldrh	r3, [r7, #10]
 80172ea:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80172ee:	4293      	cmp	r3, r2
 80172f0:	d006      	beq.n	8017300 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 80172f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172f4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80172f6:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80172f8:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80172fc:	4293      	cmp	r3, r2
 80172fe:	d10f      	bne.n	8017320 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8017300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017302:	1d98      	adds	r0, r3, #6
 8017304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017306:	f8d3 101a 	ldr.w	r1, [r3, #26]
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801730e:	461a      	mov	r2, r3
 8017310:	f7f0 f954 	bl	80075bc <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8017314:	68f8      	ldr	r0, [r7, #12]
 8017316:	f7f0 fde6 	bl	8007ee6 <ulDNSHandlePacket>
 801731a:	4603      	mov	r3, r0
 801731c:	657b      	str	r3, [r7, #84]	@ 0x54
 801731e:	e001      	b.n	8017324 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8017320:	2300      	movs	r3, #0
 8017322:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8017324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8017326:	4618      	mov	r0, r3
 8017328:	375c      	adds	r7, #92	@ 0x5c
 801732a:	46bd      	mov	sp, r7
 801732c:	bd90      	pop	{r4, r7, pc}
 801732e:	bf00      	nop
 8017330:	08027924 	.word	0x08027924

08017334 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b086      	sub	sp, #24
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 801733e:	2000      	movs	r0, #0
 8017340:	f7f6 fc02 	bl	800db48 <FreeRTOS_FirstEndPoint>
 8017344:	6178      	str	r0, [r7, #20]
 8017346:	e021      	b.n	801738c <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2b60      	cmp	r3, #96	@ 0x60
 801734c:	d119      	bne.n	8017382 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 801734e:	697b      	ldr	r3, [r7, #20]
 8017350:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8017354:	f003 0304 	and.w	r3, r3, #4
 8017358:	b2db      	uxtb	r3, r3
 801735a:	2b00      	cmp	r3, #0
 801735c:	d011      	beq.n	8017382 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 801735e:	697b      	ldr	r3, [r7, #20]
 8017360:	3338      	adds	r3, #56	@ 0x38
 8017362:	4618      	mov	r0, r3
 8017364:	f7f6 ffd4 	bl	800e310 <xIPv6_GetIPType>
 8017368:	4603      	mov	r3, r0
 801736a:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 801736c:	7cfb      	ldrb	r3, [r7, #19]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d101      	bne.n	8017376 <pxGetEndpoint+0x42>
 8017372:	2301      	movs	r3, #1
 8017374:	e000      	b.n	8017378 <pxGetEndpoint+0x44>
 8017376:	2300      	movs	r3, #0
 8017378:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 801737a:	68fa      	ldr	r2, [r7, #12]
 801737c:	683b      	ldr	r3, [r7, #0]
 801737e:	429a      	cmp	r2, r3
 8017380:	d008      	beq.n	8017394 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8017382:	6979      	ldr	r1, [r7, #20]
 8017384:	2000      	movs	r0, #0
 8017386:	f7f6 fc01 	bl	800db8c <FreeRTOS_NextEndPoint>
 801738a:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 801738c:	697b      	ldr	r3, [r7, #20]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d1da      	bne.n	8017348 <pxGetEndpoint+0x14>
 8017392:	e000      	b.n	8017396 <pxGetEndpoint+0x62>
                {
                    break;
 8017394:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 8017396:	697b      	ldr	r3, [r7, #20]
}
 8017398:	4618      	mov	r0, r3
 801739a:	3718      	adds	r7, #24
 801739c:	46bd      	mov	sp, r7
 801739e:	bd80      	pop	{r7, pc}

080173a0 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b084      	sub	sp, #16
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
 80173a8:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 80173aa:	2300      	movs	r3, #0
 80173ac:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	f103 0114 	add.w	r1, r3, #20
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d001      	beq.n	80173c0 <prvStartLookup+0x20>
 80173bc:	4b1e      	ldr	r3, [pc, #120]	@ (8017438 <prvStartLookup+0x98>)
 80173be:	e000      	b.n	80173c2 <prvStartLookup+0x22>
 80173c0:	4b1e      	ldr	r3, [pc, #120]	@ (801743c <prvStartLookup+0x9c>)
 80173c2:	461a      	mov	r2, r3
 80173c4:	481e      	ldr	r0, [pc, #120]	@ (8017440 <prvStartLookup+0xa0>)
 80173c6:	f00b f9fd 	bl	80227c4 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d11f      	bne.n	8017412 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	3314      	adds	r3, #20
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7f6 ff9a 	bl	800e310 <xIPv6_GetIPType>
 80173dc:	4603      	mov	r3, r0
 80173de:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 80173e0:	7bbb      	ldrb	r3, [r7, #14]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d101      	bne.n	80173ea <prvStartLookup+0x4a>
 80173e6:	2301      	movs	r3, #1
 80173e8:	e000      	b.n	80173ec <prvStartLookup+0x4c>
 80173ea:	2300      	movs	r3, #0
 80173ec:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 80173ee:	68b9      	ldr	r1, [r7, #8]
 80173f0:	2060      	movs	r0, #96	@ 0x60
 80173f2:	f7ff ff9f 	bl	8017334 <pxGetEndpoint>
 80173f6:	4602      	mov	r2, r0
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017400:	2b00      	cmp	r3, #0
 8017402:	d001      	beq.n	8017408 <prvStartLookup+0x68>
 8017404:	4b0f      	ldr	r3, [pc, #60]	@ (8017444 <prvStartLookup+0xa4>)
 8017406:	e000      	b.n	801740a <prvStartLookup+0x6a>
 8017408:	4b0f      	ldr	r3, [pc, #60]	@ (8017448 <prvStartLookup+0xa8>)
 801740a:	4619      	mov	r1, r3
 801740c:	480f      	ldr	r0, [pc, #60]	@ (801744c <prvStartLookup+0xac>)
 801740e:	f00b f9d9 	bl	80227c4 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017416:	2b00      	cmp	r3, #0
 8017418:	d008      	beq.n	801742c <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	3314      	adds	r3, #20
 801741e:	4619      	mov	r1, r3
 8017420:	6878      	ldr	r0, [r7, #4]
 8017422:	f7f5 f8b7 	bl	800c594 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 8017426:	683b      	ldr	r3, [r7, #0]
 8017428:	2201      	movs	r2, #1
 801742a:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 801742c:	7bfb      	ldrb	r3, [r7, #15]
}
 801742e:	4618      	mov	r0, r3
 8017430:	3710      	adds	r7, #16
 8017432:	46bd      	mov	sp, r7
 8017434:	bd80      	pop	{r7, pc}
 8017436:	bf00      	nop
 8017438:	08027958 	.word	0x08027958
 801743c:	0802795c 	.word	0x0802795c
 8017440:	08027960 	.word	0x08027960
 8017444:	08027984 	.word	0x08027984
 8017448:	08027988 	.word	0x08027988
 801744c:	0802798c 	.word	0x0802798c

08017450 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8017450:	b590      	push	{r4, r7, lr}
 8017452:	b093      	sub	sp, #76	@ 0x4c
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 8017458:	2300      	movs	r3, #0
 801745a:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 801745c:	2300      	movs	r3, #0
 801745e:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 8017460:	2300      	movs	r3, #0
 8017462:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 8017464:	2300      	movs	r3, #0
 8017466:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801746c:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 801746e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017470:	330e      	adds	r3, #14
 8017472:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	3314      	adds	r3, #20
 8017478:	f107 040c 	add.w	r4, r7, #12
 801747c:	6818      	ldr	r0, [r3, #0]
 801747e:	6859      	ldr	r1, [r3, #4]
 8017480:	689a      	ldr	r2, [r3, #8]
 8017482:	68db      	ldr	r3, [r3, #12]
 8017484:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801748a:	2b00      	cmp	r3, #0
 801748c:	d107      	bne.n	801749e <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 801748e:	233e      	movs	r3, #62	@ 0x3e
 8017490:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017498:	1ad3      	subs	r3, r2, r3
 801749a:	643b      	str	r3, [r7, #64]	@ 0x40
 801749c:	e003      	b.n	80174a6 <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174a2:	3b3e      	subs	r3, #62	@ 0x3e
 80174a4:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	3314      	adds	r3, #20
 80174aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80174ac:	f107 021c 	add.w	r2, r7, #28
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7f4 fe03 	bl	800c0bc <eNDGetCacheEntry>
 80174b6:	4603      	mov	r3, r0
 80174b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 80174bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80174c0:	2b02      	cmp	r3, #2
 80174c2:	f000 80b1 	beq.w	8017628 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 80174c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80174ca:	2b01      	cmp	r3, #1
 80174cc:	f040 8095 	bne.w	80175fa <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80174d0:	69fa      	ldr	r2, [r7, #28]
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d109      	bne.n	80174f2 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 80174de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174e0:	2260      	movs	r2, #96	@ 0x60
 80174e2:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 80174e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174e6:	223a      	movs	r2, #58	@ 0x3a
 80174e8:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 80174ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174ec:	2280      	movs	r2, #128	@ 0x80
 80174ee:	71da      	strb	r2, [r3, #7]
 80174f0:	e05e      	b.n	80175b0 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 80174f2:	2300      	movs	r3, #0
 80174f4:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 80174f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174f8:	3336      	adds	r3, #54	@ 0x36
 80174fa:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 80174fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174fe:	2260      	movs	r2, #96	@ 0x60
 8017500:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 8017502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017504:	2200      	movs	r2, #0
 8017506:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 8017508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801750a:	2200      	movs	r2, #0
 801750c:	709a      	strb	r2, [r3, #2]
 801750e:	2200      	movs	r2, #0
 8017510:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 8017512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017514:	22ff      	movs	r2, #255	@ 0xff
 8017516:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801751c:	b29b      	uxth	r3, r3
 801751e:	3b36      	subs	r3, #54	@ 0x36
 8017520:	b29a      	uxth	r2, r3
 8017522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017524:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8017526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017528:	2211      	movs	r2, #17
 801752a:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017530:	b29b      	uxth	r3, r3
 8017532:	3b36      	subs	r3, #54	@ 0x36
 8017534:	b29a      	uxth	r2, r3
 8017536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017538:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 801753a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801753c:	889b      	ldrh	r3, [r3, #4]
 801753e:	b29b      	uxth	r3, r3
 8017540:	021b      	lsls	r3, r3, #8
 8017542:	b21a      	sxth	r2, r3
 8017544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017546:	889b      	ldrh	r3, [r3, #4]
 8017548:	b29b      	uxth	r3, r3
 801754a:	0a1b      	lsrs	r3, r3, #8
 801754c:	b29b      	uxth	r3, r3
 801754e:	b21b      	sxth	r3, r3
 8017550:	4313      	orrs	r3, r2
 8017552:	b21b      	sxth	r3, r3
 8017554:	b29a      	uxth	r2, r3
 8017556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017558:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 801755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017560:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8017566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017568:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801756c:	889b      	ldrh	r3, [r3, #4]
 801756e:	b29b      	uxth	r3, r3
 8017570:	021b      	lsls	r3, r3, #8
 8017572:	b21a      	sxth	r2, r3
 8017574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017576:	889b      	ldrh	r3, [r3, #4]
 8017578:	b29b      	uxth	r3, r3
 801757a:	0a1b      	lsrs	r3, r3, #8
 801757c:	b29b      	uxth	r3, r3
 801757e:	b21b      	sxth	r3, r3
 8017580:	4313      	orrs	r3, r2
 8017582:	b21b      	sxth	r3, r3
 8017584:	b29a      	uxth	r2, r3
 8017586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017588:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801758c:	2200      	movs	r2, #0
 801758e:	719a      	strb	r2, [r3, #6]
 8017590:	2200      	movs	r2, #0
 8017592:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017598:	2b00      	cmp	r3, #0
 801759a:	d009      	beq.n	80175b0 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 801759c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801759e:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80175a6:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 80175a8:	2210      	movs	r2, #16
 80175aa:	4619      	mov	r1, r3
 80175ac:	f00b fb26 	bl	8022bfc <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d10e      	bne.n	80175d6 <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 80175b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175ba:	b29b      	uxth	r3, r3
 80175bc:	3308      	adds	r3, #8
 80175be:	b29b      	uxth	r3, r3
 80175c0:	021b      	lsls	r3, r3, #8
 80175c2:	b29a      	uxth	r2, r3
 80175c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175c6:	3308      	adds	r3, #8
 80175c8:	0a1b      	lsrs	r3, r3, #8
 80175ca:	b29b      	uxth	r3, r3
 80175cc:	4313      	orrs	r3, r2
 80175ce:	b29a      	uxth	r2, r3
 80175d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175d2:	809a      	strh	r2, [r3, #4]
 80175d4:	e028      	b.n	8017628 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 80175d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175d8:	2211      	movs	r2, #17
 80175da:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 80175dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175de:	b29b      	uxth	r3, r3
 80175e0:	3308      	adds	r3, #8
 80175e2:	b29b      	uxth	r3, r3
 80175e4:	021b      	lsls	r3, r3, #8
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175ea:	3308      	adds	r3, #8
 80175ec:	0a1b      	lsrs	r3, r3, #8
 80175ee:	b29b      	uxth	r3, r3
 80175f0:	4313      	orrs	r3, r2
 80175f2:	b29a      	uxth	r2, r3
 80175f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175f6:	809a      	strh	r2, [r3, #4]
 80175f8:	e016      	b.n	8017628 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 80175fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d10f      	bne.n	8017622 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 8017602:	69fb      	ldr	r3, [r7, #28]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d002      	beq.n	801760e <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8017608:	69fa      	ldr	r2, [r7, #28]
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 801760e:	f107 0320 	add.w	r3, r7, #32
 8017612:	4619      	mov	r1, r3
 8017614:	6878      	ldr	r0, [r7, #4]
 8017616:	f7ff fec3 	bl	80173a0 <prvStartLookup>
 801761a:	4603      	mov	r3, r0
 801761c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8017620:	e002      	b.n	8017628 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8017622:	2302      	movs	r3, #2
 8017624:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 8017628:	6a3b      	ldr	r3, [r7, #32]
 801762a:	2b01      	cmp	r3, #1
 801762c:	d03d      	beq.n	80176aa <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 801762e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017632:	2b02      	cmp	r3, #2
 8017634:	d036      	beq.n	80176a4 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801763a:	2b00      	cmp	r3, #0
 801763c:	d02e      	beq.n	801769c <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017642:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017646:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801764c:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 801764e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017650:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017656:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8017658:	2206      	movs	r2, #6
 801765a:	4619      	mov	r1, r3
 801765c:	f00b face 	bl	8022bfc <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017664:	2b3b      	cmp	r3, #59	@ 0x3b
 8017666:	d812      	bhi.n	801768e <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801766c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801766e:	e008      	b.n	8017682 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017676:	4413      	add	r3, r2
 8017678:	2200      	movs	r2, #0
 801767a:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801767c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801767e:	3301      	adds	r3, #1
 8017680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017684:	2b3b      	cmp	r3, #59	@ 0x3b
 8017686:	ddf3      	ble.n	8017670 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	223c      	movs	r2, #60	@ 0x3c
 801768c:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 801768e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017690:	68db      	ldr	r3, [r3, #12]
 8017692:	2201      	movs	r2, #1
 8017694:	6879      	ldr	r1, [r7, #4]
 8017696:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017698:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801769a:	e006      	b.n	80176aa <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801769c:	6878      	ldr	r0, [r7, #4]
 801769e:	f000 f9e9 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
}
 80176a2:	e002      	b.n	80176aa <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f000 f9e5 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
}
 80176aa:	bf00      	nop
 80176ac:	374c      	adds	r7, #76	@ 0x4c
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd90      	pop	{r4, r7, pc}
	...

080176b4 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 80176b4:	b590      	push	{r4, r7, lr}
 80176b6:	b09b      	sub	sp, #108	@ 0x6c
 80176b8:	af02      	add	r7, sp, #8
 80176ba:	60f8      	str	r0, [r7, #12]
 80176bc:	460b      	mov	r3, r1
 80176be:	607a      	str	r2, [r7, #4]
 80176c0:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 80176c2:	2301      	movs	r3, #1
 80176c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d104      	bne.n	80176d6 <xProcessReceivedUDPPacket_IPv6+0x22>
 80176cc:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80176d0:	4874      	ldr	r0, [pc, #464]	@ (80178a4 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 80176d2:	f7ea f999 	bl	8001a08 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d104      	bne.n	80176e8 <xProcessReceivedUDPPacket_IPv6+0x34>
 80176de:	f240 1187 	movw	r1, #391	@ 0x187
 80176e2:	4870      	ldr	r0, [pc, #448]	@ (80178a4 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 80176e4:	f7ea f990 	bl	8001a08 <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176ec:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80176ee:	897b      	ldrh	r3, [r7, #10]
 80176f0:	4618      	mov	r0, r3
 80176f2:	f7f8 f88f 	bl	800f814 <pxUDPSocketLookup>
 80176f6:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	2200      	movs	r2, #0
 80176fc:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 80176fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017700:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8017702:	b29b      	uxth	r3, r3
 8017704:	2b00      	cmp	r3, #0
 8017706:	d109      	bne.n	801771c <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 8017708:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801770a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801770c:	b29b      	uxth	r3, r3
 801770e:	4619      	mov	r1, r3
 8017710:	4865      	ldr	r0, [pc, #404]	@ (80178a8 <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 8017712:	f00b f857 	bl	80227c4 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 8017716:	2300      	movs	r3, #0
 8017718:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801771a:	e0bd      	b.n	8017898 <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 801771c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801771e:	2b00      	cmp	r3, #0
 8017720:	f000 8091 	beq.w	8017846 <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8017724:	68f8      	ldr	r0, [r7, #12]
 8017726:	f7ef fe33 	bl	8007390 <xCheckRequiresARPResolution>
 801772a:	4603      	mov	r3, r0
 801772c:	2b01      	cmp	r3, #1
 801772e:	d105      	bne.n	801773c <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2201      	movs	r2, #1
 8017734:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 8017736:	2300      	movs	r3, #0
 8017738:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 801773a:	e0ad      	b.n	8017898 <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 801773c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801773e:	1d98      	adds	r0, r3, #6
 8017740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017742:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 801774a:	461a      	mov	r2, r3
 801774c:	f7f4 fd64 	bl	800c218 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8017750:	68f8      	ldr	r0, [r7, #12]
 8017752:	f7f2 fe61 	bl	800a418 <uxIPHeaderSizePacket>
 8017756:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8017758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801775a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801775c:	2b00      	cmp	r3, #0
 801775e:	d03d      	beq.n	80177dc <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017766:	3316      	adds	r3, #22
 8017768:	4413      	add	r3, r2
 801776a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 801776c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801776e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017770:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017776:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 8017778:	897b      	ldrh	r3, [r7, #10]
 801777a:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801777c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801777e:	3316      	adds	r3, #22
 8017780:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8017784:	6818      	ldr	r0, [r3, #0]
 8017786:	6859      	ldr	r1, [r3, #4]
 8017788:	689a      	ldr	r2, [r3, #8]
 801778a:	68db      	ldr	r3, [r3, #12]
 801778c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801778e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017790:	3326      	adds	r3, #38	@ 0x26
 8017792:	f107 041c 	add.w	r4, r7, #28
 8017796:	6818      	ldr	r0, [r3, #0]
 8017798:	6859      	ldr	r1, [r3, #4]
 801779a:	689a      	ldr	r2, [r3, #8]
 801779c:	68db      	ldr	r3, [r3, #12]
 801779e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 80177a0:	230a      	movs	r3, #10
 80177a2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 80177a6:	230a      	movs	r3, #10
 80177a8:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 80177aa:	2318      	movs	r3, #24
 80177ac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 80177b0:	2318      	movs	r3, #24
 80177b2:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177b8:	3b3e      	subs	r3, #62	@ 0x3e
 80177ba:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 80177bc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80177c0:	f107 0314 	add.w	r3, r7, #20
 80177c4:	9300      	str	r3, [sp, #0]
 80177c6:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 80177c8:	4613      	mov	r3, r2
 80177ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80177cc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80177ce:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80177d0:	47a0      	blx	r4
 80177d2:	4603      	mov	r3, r0
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d001      	beq.n	80177dc <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 80177d8:	2300      	movs	r3, #0
 80177da:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 80177dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80177de:	2b01      	cmp	r3, #1
 80177e0:	d15a      	bne.n	8017898 <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 80177e2:	f7ed f96d 	bl	8004ac0 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80177e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177e8:	3354      	adds	r3, #84	@ 0x54
 80177ea:	68fa      	ldr	r2, [r7, #12]
 80177ec:	4611      	mov	r1, r2
 80177ee:	4618      	mov	r0, r3
 80177f0:	f7ec f821 	bl	8003836 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 80177f4:	f7ed f972 	bl	8004adc <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 80177f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177fa:	685b      	ldr	r3, [r3, #4]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d005      	beq.n	801780c <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8017800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017802:	685b      	ldr	r3, [r3, #4]
 8017804:	2101      	movs	r1, #1
 8017806:	4618      	mov	r0, r3
 8017808:	f7eb ff10 	bl	800362c <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 801780c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801780e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017810:	2b00      	cmp	r3, #0
 8017812:	d00c      	beq.n	801782e <xProcessReceivedUDPPacket_IPv6+0x17a>
 8017814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017818:	f003 0301 	and.w	r3, r3, #1
 801781c:	2b00      	cmp	r3, #0
 801781e:	d006      	beq.n	801782e <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8017820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	2101      	movs	r1, #1
 8017828:	4618      	mov	r0, r3
 801782a:	f7eb feff 	bl	800362c <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 801782e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017832:	2b00      	cmp	r3, #0
 8017834:	d030      	beq.n	8017898 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8017836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017838:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801783a:	2300      	movs	r3, #0
 801783c:	2200      	movs	r2, #0
 801783e:	2100      	movs	r1, #0
 8017840:	f7ec f9d0 	bl	8003be4 <xQueueGenericSend>
 8017844:	e028      	b.n	8017898 <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 8017846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801784a:	b29b      	uxth	r3, r3
 801784c:	021b      	lsls	r3, r3, #8
 801784e:	b21a      	sxth	r2, r3
 8017850:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017854:	b29b      	uxth	r3, r3
 8017856:	0a1b      	lsrs	r3, r3, #8
 8017858:	b29b      	uxth	r3, r3
 801785a:	b21b      	sxth	r3, r3
 801785c:	4313      	orrs	r3, r2
 801785e:	b21b      	sxth	r3, r3
 8017860:	2b35      	cmp	r3, #53	@ 0x35
 8017862:	d105      	bne.n	8017870 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8017864:	68f8      	ldr	r0, [r7, #12]
 8017866:	f7f0 fb3e 	bl	8007ee6 <ulDNSHandlePacket>
 801786a:	4603      	mov	r3, r0
 801786c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801786e:	e013      	b.n	8017898 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8017870:	897b      	ldrh	r3, [r7, #10]
 8017872:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8017876:	4293      	cmp	r3, r2
 8017878:	d006      	beq.n	8017888 <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 801787a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801787c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801787e:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8017880:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8017884:	4293      	cmp	r3, r2
 8017886:	d105      	bne.n	8017894 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8017888:	68f8      	ldr	r0, [r7, #12]
 801788a:	f7f0 fb2c 	bl	8007ee6 <ulDNSHandlePacket>
 801788e:	4603      	mov	r3, r0
 8017890:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017892:	e001      	b.n	8017898 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8017894:	2300      	movs	r3, #0
 8017896:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8017898:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801789a:	4618      	mov	r0, r3
 801789c:	3764      	adds	r7, #100	@ 0x64
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd90      	pop	{r4, r7, pc}
 80178a2:	bf00      	nop
 80178a4:	080279b4 	.word	0x080279b4
 80178a8:	080279e8 	.word	0x080279e8

080178ac <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 80178ac:	b480      	push	{r7}
 80178ae:	b083      	sub	sp, #12
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 80178b4:	2301      	movs	r3, #1
    }
 80178b6:	4618      	mov	r0, r3
 80178b8:	370c      	adds	r7, #12
 80178ba:	46bd      	mov	sp, r7
 80178bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c0:	4770      	bx	lr

080178c2 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 80178c2:	b480      	push	{r7}
 80178c4:	af00      	add	r7, sp, #0
    }
 80178c6:	bf00      	nop
 80178c8:	46bd      	mov	sp, r7
 80178ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ce:	4770      	bx	lr

080178d0 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b082      	sub	sp, #8
 80178d4:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 80178d6:	4b2e      	ldr	r3, [pc, #184]	@ (8017990 <xNetworkBuffersInitialise+0xc0>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d149      	bne.n	8017972 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 80178de:	2140      	movs	r1, #64	@ 0x40
 80178e0:	2040      	movs	r0, #64	@ 0x40
 80178e2:	f7ec f955 	bl	8003b90 <xQueueCreateCountingSemaphore>
 80178e6:	4603      	mov	r3, r0
 80178e8:	4a29      	ldr	r2, [pc, #164]	@ (8017990 <xNetworkBuffersInitialise+0xc0>)
 80178ea:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 80178ec:	4b28      	ldr	r3, [pc, #160]	@ (8017990 <xNetworkBuffersInitialise+0xc0>)
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d103      	bne.n	80178fc <xNetworkBuffersInitialise+0x2c>
 80178f4:	21c3      	movs	r1, #195	@ 0xc3
 80178f6:	4827      	ldr	r0, [pc, #156]	@ (8017994 <xNetworkBuffersInitialise+0xc4>)
 80178f8:	f7ea f886 	bl	8001a08 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 80178fc:	4b24      	ldr	r3, [pc, #144]	@ (8017990 <xNetworkBuffersInitialise+0xc0>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d036      	beq.n	8017972 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 8017904:	4824      	ldr	r0, [pc, #144]	@ (8017998 <xNetworkBuffersInitialise+0xc8>)
 8017906:	f7eb ff69 	bl	80037dc <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 801790a:	4824      	ldr	r0, [pc, #144]	@ (801799c <xNetworkBuffersInitialise+0xcc>)
 801790c:	f001 fa24 	bl	8018d58 <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8017910:	2300      	movs	r3, #0
 8017912:	603b      	str	r3, [r7, #0]
 8017914:	e027      	b.n	8017966 <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 8017916:	683a      	ldr	r2, [r7, #0]
 8017918:	4613      	mov	r3, r2
 801791a:	00db      	lsls	r3, r3, #3
 801791c:	1a9b      	subs	r3, r3, r2
 801791e:	00db      	lsls	r3, r3, #3
 8017920:	4a1e      	ldr	r2, [pc, #120]	@ (801799c <xNetworkBuffersInitialise+0xcc>)
 8017922:	4413      	add	r3, r2
 8017924:	4618      	mov	r0, r3
 8017926:	f7eb ff79 	bl	800381c <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 801792a:	683a      	ldr	r2, [r7, #0]
 801792c:	4613      	mov	r3, r2
 801792e:	00db      	lsls	r3, r3, #3
 8017930:	1a9b      	subs	r3, r3, r2
 8017932:	00db      	lsls	r3, r3, #3
 8017934:	4a19      	ldr	r2, [pc, #100]	@ (801799c <xNetworkBuffersInitialise+0xcc>)
 8017936:	1899      	adds	r1, r3, r2
 8017938:	4818      	ldr	r0, [pc, #96]	@ (801799c <xNetworkBuffersInitialise+0xcc>)
 801793a:	683a      	ldr	r2, [r7, #0]
 801793c:	4613      	mov	r3, r2
 801793e:	00db      	lsls	r3, r3, #3
 8017940:	1a9b      	subs	r3, r3, r2
 8017942:	00db      	lsls	r3, r3, #3
 8017944:	4403      	add	r3, r0
 8017946:	330c      	adds	r3, #12
 8017948:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 801794a:	683a      	ldr	r2, [r7, #0]
 801794c:	4613      	mov	r3, r2
 801794e:	00db      	lsls	r3, r3, #3
 8017950:	1a9b      	subs	r3, r3, r2
 8017952:	00db      	lsls	r3, r3, #3
 8017954:	4a11      	ldr	r2, [pc, #68]	@ (801799c <xNetworkBuffersInitialise+0xcc>)
 8017956:	4413      	add	r3, r2
 8017958:	4619      	mov	r1, r3
 801795a:	480f      	ldr	r0, [pc, #60]	@ (8017998 <xNetworkBuffersInitialise+0xc8>)
 801795c:	f7eb ff8f 	bl	800387e <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8017960:	683b      	ldr	r3, [r7, #0]
 8017962:	3301      	adds	r3, #1
 8017964:	603b      	str	r3, [r7, #0]
 8017966:	683b      	ldr	r3, [r7, #0]
 8017968:	2b3f      	cmp	r3, #63	@ 0x3f
 801796a:	d9d4      	bls.n	8017916 <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 801796c:	4b0c      	ldr	r3, [pc, #48]	@ (80179a0 <xNetworkBuffersInitialise+0xd0>)
 801796e:	2240      	movs	r2, #64	@ 0x40
 8017970:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8017972:	4b07      	ldr	r3, [pc, #28]	@ (8017990 <xNetworkBuffersInitialise+0xc0>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d102      	bne.n	8017980 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 801797a:	2300      	movs	r3, #0
 801797c:	607b      	str	r3, [r7, #4]
 801797e:	e001      	b.n	8017984 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 8017980:	2301      	movs	r3, #1
 8017982:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8017984:	687b      	ldr	r3, [r7, #4]
}
 8017986:	4618      	mov	r0, r3
 8017988:	3708      	adds	r7, #8
 801798a:	46bd      	mov	sp, r7
 801798c:	bd80      	pop	{r7, pc}
 801798e:	bf00      	nop
 8017990:	20002468 	.word	0x20002468
 8017994:	08027a28 	.word	0x08027a28
 8017998:	20001650 	.word	0x20001650
 801799c:	20001668 	.word	0x20001668
 80179a0:	20001664 	.word	0x20001664

080179a4 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b086      	sub	sp, #24
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
 80179ac:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 80179ae:	2300      	movs	r3, #0
 80179b0:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 80179b2:	2300      	movs	r3, #0
 80179b4:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 80179b6:	4b2a      	ldr	r3, [pc, #168]	@ (8017a60 <pxGetNetworkBufferWithDescriptor+0xbc>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d04b      	beq.n	8017a56 <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 80179be:	4b28      	ldr	r3, [pc, #160]	@ (8017a60 <pxGetNetworkBufferWithDescriptor+0xbc>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	6839      	ldr	r1, [r7, #0]
 80179c4:	4618      	mov	r0, r3
 80179c6:	f7ec fac5 	bl	8003f54 <xQueueSemaphoreTake>
 80179ca:	4603      	mov	r3, r0
 80179cc:	2b01      	cmp	r3, #1
 80179ce:	d13d      	bne.n	8017a4c <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 80179d0:	f7ee fef6 	bl	80067c0 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 80179d4:	4b23      	ldr	r3, [pc, #140]	@ (8017a64 <pxGetNetworkBufferWithDescriptor+0xc0>)
 80179d6:	68db      	ldr	r3, [r3, #12]
 80179d8:	68db      	ldr	r3, [r3, #12]
 80179da:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 80179dc:	6978      	ldr	r0, [r7, #20]
 80179de:	f7ff ff65 	bl	80178ac <bIsValidNetworkDescriptor>
 80179e2:	4603      	mov	r3, r0
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d009      	beq.n	80179fc <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 80179e8:	697b      	ldr	r3, [r7, #20]
 80179ea:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 80179ec:	4a1d      	ldr	r2, [pc, #116]	@ (8017a64 <pxGetNetworkBufferWithDescriptor+0xc0>)
 80179ee:	4293      	cmp	r3, r2
 80179f0:	d104      	bne.n	80179fc <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 80179f2:	697b      	ldr	r3, [r7, #20]
 80179f4:	4618      	mov	r0, r3
 80179f6:	f7eb ff7b 	bl	80038f0 <uxListRemove>
 80179fa:	e001      	b.n	8017a00 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 80179fc:	2301      	movs	r3, #1
 80179fe:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8017a00:	f7ee ff0a 	bl	8006818 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8017a04:	693b      	ldr	r3, [r7, #16]
 8017a06:	2b01      	cmp	r3, #1
 8017a08:	d10b      	bne.n	8017a22 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 8017a0a:	6978      	ldr	r0, [r7, #20]
 8017a0c:	f7ff ff4e 	bl	80178ac <bIsValidNetworkDescriptor>
 8017a10:	4603      	mov	r3, r0
 8017a12:	461a      	mov	r2, r3
 8017a14:	6979      	ldr	r1, [r7, #20]
 8017a16:	4814      	ldr	r0, [pc, #80]	@ (8017a68 <pxGetNetworkBufferWithDescriptor+0xc4>)
 8017a18:	f00a fed4 	bl	80227c4 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	617b      	str	r3, [r7, #20]
 8017a20:	e019      	b.n	8017a56 <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8017a22:	4b10      	ldr	r3, [pc, #64]	@ (8017a64 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 8017a28:	4b10      	ldr	r3, [pc, #64]	@ (8017a6c <pxGetNetworkBufferWithDescriptor+0xc8>)
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	68fa      	ldr	r2, [r7, #12]
 8017a2e:	429a      	cmp	r2, r3
 8017a30:	d202      	bcs.n	8017a38 <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 8017a32:	4a0e      	ldr	r2, [pc, #56]	@ (8017a6c <pxGetNetworkBufferWithDescriptor+0xc8>)
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 8017a38:	697b      	ldr	r3, [r7, #20]
 8017a3a:	687a      	ldr	r2, [r7, #4]
 8017a3c:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 8017a3e:	697b      	ldr	r3, [r7, #20]
 8017a40:	2200      	movs	r2, #0
 8017a42:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 8017a44:	697b      	ldr	r3, [r7, #20]
 8017a46:	2200      	movs	r2, #0
 8017a48:	631a      	str	r2, [r3, #48]	@ 0x30
 8017a4a:	e004      	b.n	8017a56 <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 8017a4c:	f240 113b 	movw	r1, #315	@ 0x13b
 8017a50:	4807      	ldr	r0, [pc, #28]	@ (8017a70 <pxGetNetworkBufferWithDescriptor+0xcc>)
 8017a52:	f7e9 ffd9 	bl	8001a08 <vAssertCalled>
        }
    }

    return pxReturn;
 8017a56:	697b      	ldr	r3, [r7, #20]
}
 8017a58:	4618      	mov	r0, r3
 8017a5a:	3718      	adds	r7, #24
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd80      	pop	{r7, pc}
 8017a60:	20002468 	.word	0x20002468
 8017a64:	20001650 	.word	0x20001650
 8017a68:	08027a74 	.word	0x08027a74
 8017a6c:	20001664 	.word	0x20001664
 8017a70:	08027a28 	.word	0x08027a28

08017a74 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b084      	sub	sp, #16
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f7ff ff15 	bl	80178ac <bIsValidNetworkDescriptor>
 8017a82:	4603      	mov	r3, r0
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d104      	bne.n	8017a92 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 8017a88:	6879      	ldr	r1, [r7, #4]
 8017a8a:	4819      	ldr	r0, [pc, #100]	@ (8017af0 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 8017a8c:	f00a fe9a 	bl	80227c4 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8017a90:	e029      	b.n	8017ae6 <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 8017a92:	f7ee fe95 	bl	80067c0 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	691b      	ldr	r3, [r3, #16]
 8017a9a:	4a16      	ldr	r2, [pc, #88]	@ (8017af4 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8017a9c:	4293      	cmp	r3, r2
 8017a9e:	d101      	bne.n	8017aa4 <vReleaseNetworkBufferAndDescriptor+0x30>
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	e000      	b.n	8017aa6 <vReleaseNetworkBufferAndDescriptor+0x32>
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d104      	bne.n	8017ab8 <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	4619      	mov	r1, r3
 8017ab2:	4810      	ldr	r0, [pc, #64]	@ (8017af4 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8017ab4:	f7eb febf 	bl	8003836 <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 8017ab8:	f7ee feae 	bl	8006818 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d008      	beq.n	8017ad4 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8017ac2:	f000 f829 	bl	8017b18 <uxGetNumberOfFreeNetworkBuffers>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	461a      	mov	r2, r3
 8017aca:	6879      	ldr	r1, [r7, #4]
 8017acc:	480a      	ldr	r0, [pc, #40]	@ (8017af8 <vReleaseNetworkBufferAndDescriptor+0x84>)
 8017ace:	f00a fe79 	bl	80227c4 <lUDPLoggingPrintf>
}
 8017ad2:	e008      	b.n	8017ae6 <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8017ad4:	4b09      	ldr	r3, [pc, #36]	@ (8017afc <vReleaseNetworkBufferAndDescriptor+0x88>)
 8017ad6:	6818      	ldr	r0, [r3, #0]
 8017ad8:	2300      	movs	r3, #0
 8017ada:	2200      	movs	r2, #0
 8017adc:	2100      	movs	r1, #0
 8017ade:	f7ec f881 	bl	8003be4 <xQueueGenericSend>
            prvShowWarnings();
 8017ae2:	f7ff feee 	bl	80178c2 <prvShowWarnings>
}
 8017ae6:	bf00      	nop
 8017ae8:	3710      	adds	r7, #16
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd80      	pop	{r7, pc}
 8017aee:	bf00      	nop
 8017af0:	08027ab8 	.word	0x08027ab8
 8017af4:	20001650 	.word	0x20001650
 8017af8:	08027af0 	.word	0x08027af0
 8017afc:	20002468 	.word	0x20002468

08017b00 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8017b00:	b480      	push	{r7}
 8017b02:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8017b04:	4b03      	ldr	r3, [pc, #12]	@ (8017b14 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8017b06:	681b      	ldr	r3, [r3, #0]
}
 8017b08:	4618      	mov	r0, r3
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b10:	4770      	bx	lr
 8017b12:	bf00      	nop
 8017b14:	20001664 	.word	0x20001664

08017b18 <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8017b18:	b480      	push	{r7}
 8017b1a:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8017b1c:	4b03      	ldr	r3, [pc, #12]	@ (8017b2c <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
}
 8017b20:	4618      	mov	r0, r3
 8017b22:	46bd      	mov	sp, r7
 8017b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b28:	4770      	bx	lr
 8017b2a:	bf00      	nop
 8017b2c:	20001650 	.word	0x20001650

08017b30 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8017b30:	b480      	push	{r7}
 8017b32:	b085      	sub	sp, #20
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8017b38:	2300      	movs	r3, #0
 8017b3a:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	4a11      	ldr	r2, [pc, #68]	@ (8017b84 <xHas_1F_PHYSPCS+0x54>)
 8017b40:	4293      	cmp	r3, r2
 8017b42:	d016      	beq.n	8017b72 <xHas_1F_PHYSPCS+0x42>
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	4a0f      	ldr	r2, [pc, #60]	@ (8017b84 <xHas_1F_PHYSPCS+0x54>)
 8017b48:	4293      	cmp	r3, r2
 8017b4a:	d80f      	bhi.n	8017b6c <xHas_1F_PHYSPCS+0x3c>
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8017b88 <xHas_1F_PHYSPCS+0x58>)
 8017b50:	4293      	cmp	r3, r2
 8017b52:	d00e      	beq.n	8017b72 <xHas_1F_PHYSPCS+0x42>
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	4a0c      	ldr	r2, [pc, #48]	@ (8017b88 <xHas_1F_PHYSPCS+0x58>)
 8017b58:	4293      	cmp	r3, r2
 8017b5a:	d807      	bhi.n	8017b6c <xHas_1F_PHYSPCS+0x3c>
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8017b8c <xHas_1F_PHYSPCS+0x5c>)
 8017b60:	4293      	cmp	r3, r2
 8017b62:	d006      	beq.n	8017b72 <xHas_1F_PHYSPCS+0x42>
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	4a0a      	ldr	r2, [pc, #40]	@ (8017b90 <xHas_1F_PHYSPCS+0x60>)
 8017b68:	4293      	cmp	r3, r2
 8017b6a:	d002      	beq.n	8017b72 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8017b6c:	2301      	movs	r3, #1
 8017b6e:	60fb      	str	r3, [r7, #12]
            break;
 8017b70:	e000      	b.n	8017b74 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 8017b72:	bf00      	nop
    }

    return xResult;
 8017b74:	68fb      	ldr	r3, [r7, #12]
}
 8017b76:	4618      	mov	r0, r3
 8017b78:	3714      	adds	r7, #20
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b80:	4770      	bx	lr
 8017b82:	bf00      	nop
 8017b84:	ff000710 	.word	0xff000710
 8017b88:	2000a250 	.word	0x2000a250
 8017b8c:	20005c90 	.word	0x20005c90
 8017b90:	2000a221 	.word	0x2000a221

08017b94 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8017b94:	b480      	push	{r7}
 8017b96:	b085      	sub	sp, #20
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8017bd8 <xHas_19_PHYCR+0x44>)
 8017ba4:	4293      	cmp	r3, r2
 8017ba6:	d00b      	beq.n	8017bc0 <xHas_19_PHYCR+0x2c>
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	4a0b      	ldr	r2, [pc, #44]	@ (8017bd8 <xHas_19_PHYCR+0x44>)
 8017bac:	4293      	cmp	r3, r2
 8017bae:	d80a      	bhi.n	8017bc6 <xHas_19_PHYCR+0x32>
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8017bdc <xHas_19_PHYCR+0x48>)
 8017bb4:	4293      	cmp	r3, r2
 8017bb6:	d003      	beq.n	8017bc0 <xHas_19_PHYCR+0x2c>
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	4a09      	ldr	r2, [pc, #36]	@ (8017be0 <xHas_19_PHYCR+0x4c>)
 8017bbc:	4293      	cmp	r3, r2
 8017bbe:	d102      	bne.n	8017bc6 <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8017bc0:	2301      	movs	r3, #1
 8017bc2:	60fb      	str	r3, [r7, #12]
            break;
 8017bc4:	e000      	b.n	8017bc8 <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 8017bc6:	bf00      	nop
    }

    return xResult;
 8017bc8:	68fb      	ldr	r3, [r7, #12]
}
 8017bca:	4618      	mov	r0, r3
 8017bcc:	3714      	adds	r7, #20
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd4:	4770      	bx	lr
 8017bd6:	bf00      	nop
 8017bd8:	2000a221 	.word	0x2000a221
 8017bdc:	0007c130 	.word	0x0007c130
 8017be0:	20005c90 	.word	0x20005c90

08017be4 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b084      	sub	sp, #16
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	60f8      	str	r0, [r7, #12]
 8017bec:	60b9      	str	r1, [r7, #8]
 8017bee:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8017bf0:	2240      	movs	r2, #64	@ 0x40
 8017bf2:	2100      	movs	r1, #0
 8017bf4:	68f8      	ldr	r0, [r7, #12]
 8017bf6:	f00b f90e 	bl	8022e16 <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	68ba      	ldr	r2, [r7, #8]
 8017bfe:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	687a      	ldr	r2, [r7, #4]
 8017c04:	605a      	str	r2, [r3, #4]
}
 8017c06:	bf00      	nop
 8017c08:	3710      	adds	r7, #16
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}
	...

08017c10 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b086      	sub	sp, #24
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	2200      	movs	r2, #0
 8017c1c:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017c1e:	2300      	movs	r3, #0
 8017c20:	617b      	str	r3, [r7, #20]
 8017c22:	e03a      	b.n	8017c9a <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8017c24:	2300      	movs	r3, #0
 8017c26:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	f107 020c 	add.w	r2, r7, #12
 8017c30:	2103      	movs	r1, #3
 8017c32:	6978      	ldr	r0, [r7, #20]
 8017c34:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017c3c:	4293      	cmp	r3, r2
 8017c3e:	d029      	beq.n	8017c94 <xPhyDiscover+0x84>
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d026      	beq.n	8017c94 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	f107 0208 	add.w	r2, r7, #8
 8017c4e:	2102      	movs	r1, #2
 8017c50:	6978      	ldr	r0, [r7, #20]
 8017c52:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8017c54:	68bb      	ldr	r3, [r7, #8]
 8017c56:	041a      	lsls	r2, r3, #16
 8017c58:	68f9      	ldr	r1, [r7, #12]
 8017c5a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8017c5e:	400b      	ands	r3, r1
 8017c60:	4313      	orrs	r3, r2
 8017c62:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c68:	697a      	ldr	r2, [r7, #20]
 8017c6a:	b2d1      	uxtb	r1, r2
 8017c6c:	687a      	ldr	r2, [r7, #4]
 8017c6e:	4413      	add	r3, r2
 8017c70:	460a      	mov	r2, r1
 8017c72:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	3202      	adds	r2, #2
 8017c7c:	6939      	ldr	r1, [r7, #16]
 8017c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c86:	1c5a      	adds	r2, r3, #1
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c90:	2b04      	cmp	r3, #4
 8017c92:	d005      	beq.n	8017ca0 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017c94:	697b      	ldr	r3, [r7, #20]
 8017c96:	3301      	adds	r3, #1
 8017c98:	617b      	str	r3, [r7, #20]
 8017c9a:	697b      	ldr	r3, [r7, #20]
 8017c9c:	2b1f      	cmp	r3, #31
 8017c9e:	ddc1      	ble.n	8017c24 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	dd05      	ble.n	8017cb4 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	689b      	ldr	r3, [r3, #8]
 8017cac:	4619      	mov	r1, r3
 8017cae:	4804      	ldr	r0, [pc, #16]	@ (8017cc0 <xPhyDiscover+0xb0>)
 8017cb0:	f00a fd88 	bl	80227c4 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	3718      	adds	r7, #24
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}
 8017cc0:	08027b34 	.word	0x08027b34

08017cc4 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b08c      	sub	sp, #48	@ 0x30
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
 8017ccc:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017cd6:	e017      	b.n	8017d08 <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017cd8:	687a      	ldr	r2, [r7, #4]
 8017cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cdc:	4413      	add	r3, r2
 8017cde:	3318      	adds	r3, #24
 8017ce0:	781b      	ldrb	r3, [r3, #0]
 8017ce2:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	f107 0218 	add.w	r2, r7, #24
 8017cec:	2100      	movs	r1, #0
 8017cee:	69f8      	ldr	r0, [r7, #28]
 8017cf0:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	685b      	ldr	r3, [r3, #4]
 8017cf6:	69ba      	ldr	r2, [r7, #24]
 8017cf8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8017cfc:	2100      	movs	r1, #0
 8017cfe:	69f8      	ldr	r0, [r7, #28]
 8017d00:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d04:	3301      	adds	r3, #1
 8017d06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	dbe2      	blt.n	8017cd8 <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8017d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017d16:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8017d18:	f107 030c 	add.w	r3, r7, #12
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7ed fb8b 	bl	8005438 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017d22:	2300      	movs	r3, #0
 8017d24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d26:	e01f      	b.n	8017d68 <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017d28:	687a      	ldr	r2, [r7, #4]
 8017d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d2c:	4413      	add	r3, r2
 8017d2e:	3318      	adds	r3, #24
 8017d30:	781b      	ldrb	r3, [r3, #0]
 8017d32:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	f107 0218 	add.w	r2, r7, #24
 8017d3c:	2100      	movs	r1, #0
 8017d3e:	6a38      	ldr	r0, [r7, #32]
 8017d40:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8017d42:	69bb      	ldr	r3, [r7, #24]
 8017d44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d10a      	bne.n	8017d62 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8017d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017d4e:	482d      	ldr	r0, [pc, #180]	@ (8017e04 <xPhyReset+0x140>)
 8017d50:	f00a fd38 	bl	80227c4 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8017d54:	2201      	movs	r2, #1
 8017d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d58:	fa02 f303 	lsl.w	r3, r2, r3
 8017d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017d5e:	4313      	orrs	r3, r2
 8017d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d64:	3301      	adds	r3, #1
 8017d66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	dbda      	blt.n	8017d28 <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8017d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017d74:	683b      	ldr	r3, [r7, #0]
 8017d76:	429a      	cmp	r2, r3
 8017d78:	d013      	beq.n	8017da2 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8017d7a:	f107 0214 	add.w	r2, r7, #20
 8017d7e:	f107 030c 	add.w	r3, r7, #12
 8017d82:	4611      	mov	r1, r2
 8017d84:	4618      	mov	r0, r3
 8017d86:	f7ed fb8f 	bl	80054a8 <xTaskCheckForTimeOut>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d004      	beq.n	8017d9a <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8017d90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017d92:	481d      	ldr	r0, [pc, #116]	@ (8017e08 <xPhyReset+0x144>)
 8017d94:	f00a fd16 	bl	80227c4 <lUDPLoggingPrintf>
            break;
 8017d98:	e004      	b.n	8017da4 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017d9a:	2032      	movs	r0, #50	@ 0x32
 8017d9c:	f7ec fdd8 	bl	8004950 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017da0:	e7bf      	b.n	8017d22 <xPhyReset+0x5e>
            break;
 8017da2:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017da4:	2300      	movs	r3, #0
 8017da6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017da8:	e01e      	b.n	8017de8 <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 8017daa:	2201      	movs	r2, #1
 8017dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dae:	409a      	lsls	r2, r3
 8017db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017db2:	4013      	ands	r3, r2
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d114      	bne.n	8017de2 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017db8:	687a      	ldr	r2, [r7, #4]
 8017dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dbc:	4413      	add	r3, r2
 8017dbe:	3318      	adds	r3, #24
 8017dc0:	781b      	ldrb	r3, [r3, #0]
 8017dc2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	f107 0218 	add.w	r2, r7, #24
 8017dcc:	2100      	movs	r1, #0
 8017dce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017dd0:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	685b      	ldr	r3, [r3, #4]
 8017dd6:	69ba      	ldr	r2, [r7, #24]
 8017dd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017ddc:	2100      	movs	r1, #0
 8017dde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017de0:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017de4:	3301      	adds	r3, #1
 8017de6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017dec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017dee:	429a      	cmp	r2, r3
 8017df0:	dbdb      	blt.n	8017daa <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017df2:	2032      	movs	r0, #50	@ 0x32
 8017df4:	f7ec fdac 	bl	8004950 <vTaskDelay>

    return ulDoneMask;
 8017df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	3730      	adds	r7, #48	@ 0x30
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	bd80      	pop	{r7, pc}
 8017e02:	bf00      	nop
 8017e04:	08027b40 	.word	0x08027b40
 8017e08:	08027b64 	.word	0x08027b64

08017e0c <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b088      	sub	sp, #32
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
 8017e14:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	dc05      	bgt.n	8017e2a <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8017e1e:	487c      	ldr	r0, [pc, #496]	@ (8018010 <xPhyConfigure+0x204>)
 8017e20:	f00a fcd0 	bl	80227c4 <lUDPLoggingPrintf>
        return -1;
 8017e24:	f04f 33ff 	mov.w	r3, #4294967295
 8017e28:	e0ed      	b.n	8018006 <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	781b      	ldrb	r3, [r3, #0]
 8017e2e:	2b03      	cmp	r3, #3
 8017e30:	d107      	bne.n	8017e42 <xPhyConfigure+0x36>
 8017e32:	683b      	ldr	r3, [r7, #0]
 8017e34:	789b      	ldrb	r3, [r3, #2]
 8017e36:	2b03      	cmp	r3, #3
 8017e38:	d103      	bne.n	8017e42 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8017e3a:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8017e3e:	61fb      	str	r3, [r7, #28]
 8017e40:	e044      	b.n	8017ecc <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8017e42:	2301      	movs	r3, #1
 8017e44:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8017e46:	683b      	ldr	r3, [r7, #0]
 8017e48:	781b      	ldrb	r3, [r3, #0]
 8017e4a:	2b03      	cmp	r3, #3
 8017e4c:	d10d      	bne.n	8017e6a <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	789b      	ldrb	r3, [r3, #2]
 8017e52:	2b02      	cmp	r3, #2
 8017e54:	d104      	bne.n	8017e60 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8017e56:	69fb      	ldr	r3, [r7, #28]
 8017e58:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8017e5c:	61fb      	str	r3, [r7, #28]
 8017e5e:	e035      	b.n	8017ecc <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8017e60:	69fb      	ldr	r3, [r7, #28]
 8017e62:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8017e66:	61fb      	str	r3, [r7, #28]
 8017e68:	e030      	b.n	8017ecc <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8017e6a:	683b      	ldr	r3, [r7, #0]
 8017e6c:	789b      	ldrb	r3, [r3, #2]
 8017e6e:	2b03      	cmp	r3, #3
 8017e70:	d10d      	bne.n	8017e8e <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017e72:	683b      	ldr	r3, [r7, #0]
 8017e74:	781b      	ldrb	r3, [r3, #0]
 8017e76:	2b01      	cmp	r3, #1
 8017e78:	d104      	bne.n	8017e84 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8017e7a:	69fb      	ldr	r3, [r7, #28]
 8017e7c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8017e80:	61fb      	str	r3, [r7, #28]
 8017e82:	e023      	b.n	8017ecc <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8017e84:	69fb      	ldr	r3, [r7, #28]
 8017e86:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8017e8a:	61fb      	str	r3, [r7, #28]
 8017e8c:	e01e      	b.n	8017ecc <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8017e8e:	683b      	ldr	r3, [r7, #0]
 8017e90:	781b      	ldrb	r3, [r3, #0]
 8017e92:	2b02      	cmp	r3, #2
 8017e94:	d10d      	bne.n	8017eb2 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017e96:	683b      	ldr	r3, [r7, #0]
 8017e98:	789b      	ldrb	r3, [r3, #2]
 8017e9a:	2b02      	cmp	r3, #2
 8017e9c:	d104      	bne.n	8017ea8 <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8017e9e:	69fb      	ldr	r3, [r7, #28]
 8017ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017ea4:	61fb      	str	r3, [r7, #28]
 8017ea6:	e011      	b.n	8017ecc <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8017ea8:	69fb      	ldr	r3, [r7, #28]
 8017eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017eae:	61fb      	str	r3, [r7, #28]
 8017eb0:	e00c      	b.n	8017ecc <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017eb2:	683b      	ldr	r3, [r7, #0]
 8017eb4:	789b      	ldrb	r3, [r3, #2]
 8017eb6:	2b02      	cmp	r3, #2
 8017eb8:	d104      	bne.n	8017ec4 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8017eba:	69fb      	ldr	r3, [r7, #28]
 8017ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ec0:	61fb      	str	r3, [r7, #28]
 8017ec2:	e003      	b.n	8017ecc <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8017ec4:	69fb      	ldr	r3, [r7, #28]
 8017ec6:	f043 0320 	orr.w	r3, r3, #32
 8017eca:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ed0:	2201      	movs	r2, #1
 8017ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8017ed6:	3b01      	subs	r3, #1
 8017ed8:	4619      	mov	r1, r3
 8017eda:	6878      	ldr	r0, [r7, #4]
 8017edc:	f7ff fef2 	bl	8017cc4 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	61bb      	str	r3, [r7, #24]
 8017ee4:	e080      	b.n	8017fe8 <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017ee6:	687a      	ldr	r2, [r7, #4]
 8017ee8:	69bb      	ldr	r3, [r7, #24]
 8017eea:	4413      	add	r3, r2
 8017eec:	3318      	adds	r3, #24
 8017eee:	781b      	ldrb	r3, [r3, #0]
 8017ef0:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	69ba      	ldr	r2, [r7, #24]
 8017ef6:	3202      	adds	r2, #2
 8017ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017efc:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	685b      	ldr	r3, [r3, #4]
 8017f02:	69fa      	ldr	r2, [r7, #28]
 8017f04:	2104      	movs	r1, #4
 8017f06:	6978      	ldr	r0, [r7, #20]
 8017f08:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	f107 020c 	add.w	r2, r7, #12
 8017f12:	2100      	movs	r1, #0
 8017f14:	6978      	ldr	r0, [r7, #20]
 8017f16:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8017f1e:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8017f26:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	781b      	ldrb	r3, [r3, #0]
 8017f2c:	2b02      	cmp	r3, #2
 8017f2e:	d003      	beq.n	8017f38 <xPhyConfigure+0x12c>
 8017f30:	683b      	ldr	r3, [r7, #0]
 8017f32:	781b      	ldrb	r3, [r3, #0]
 8017f34:	2b03      	cmp	r3, #3
 8017f36:	d104      	bne.n	8017f42 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017f3e:	60fb      	str	r3, [r7, #12]
 8017f40:	e007      	b.n	8017f52 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017f42:	683b      	ldr	r3, [r7, #0]
 8017f44:	781b      	ldrb	r3, [r3, #0]
 8017f46:	2b01      	cmp	r3, #1
 8017f48:	d103      	bne.n	8017f52 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017f50:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017f52:	683b      	ldr	r3, [r7, #0]
 8017f54:	789b      	ldrb	r3, [r3, #2]
 8017f56:	2b02      	cmp	r3, #2
 8017f58:	d003      	beq.n	8017f62 <xPhyConfigure+0x156>
 8017f5a:	683b      	ldr	r3, [r7, #0]
 8017f5c:	789b      	ldrb	r3, [r3, #2]
 8017f5e:	2b03      	cmp	r3, #3
 8017f60:	d104      	bne.n	8017f6c <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017f68:	60fb      	str	r3, [r7, #12]
 8017f6a:	e007      	b.n	8017f7c <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8017f6c:	683b      	ldr	r3, [r7, #0]
 8017f6e:	789b      	ldrb	r3, [r3, #2]
 8017f70:	2b01      	cmp	r3, #1
 8017f72:	d103      	bne.n	8017f7c <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017f7a:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8017f7c:	6938      	ldr	r0, [r7, #16]
 8017f7e:	f7ff fe09 	bl	8017b94 <xHas_19_PHYCR>
 8017f82:	4603      	mov	r3, r0
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d026      	beq.n	8017fd6 <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	f107 0208 	add.w	r2, r7, #8
 8017f90:	2119      	movs	r1, #25
 8017f92:	6978      	ldr	r0, [r7, #20]
 8017f94:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8017f96:	68bb      	ldr	r3, [r7, #8]
 8017f98:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8017f9c:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8017f9e:	683b      	ldr	r3, [r7, #0]
 8017fa0:	785b      	ldrb	r3, [r3, #1]
 8017fa2:	2b03      	cmp	r3, #3
 8017fa4:	d104      	bne.n	8017fb0 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8017fa6:	68bb      	ldr	r3, [r7, #8]
 8017fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017fac:	60bb      	str	r3, [r7, #8]
 8017fae:	e00c      	b.n	8017fca <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8017fb0:	683b      	ldr	r3, [r7, #0]
 8017fb2:	785b      	ldrb	r3, [r3, #1]
 8017fb4:	2b02      	cmp	r3, #2
 8017fb6:	d104      	bne.n	8017fc2 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017fbe:	60bb      	str	r3, [r7, #8]
 8017fc0:	e003      	b.n	8017fca <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8017fc2:	68bb      	ldr	r3, [r7, #8]
 8017fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017fc8:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	685b      	ldr	r3, [r3, #4]
 8017fce:	68ba      	ldr	r2, [r7, #8]
 8017fd0:	2119      	movs	r1, #25
 8017fd2:	6978      	ldr	r0, [r7, #20]
 8017fd4:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	461a      	mov	r2, r3
 8017fda:	69f9      	ldr	r1, [r7, #28]
 8017fdc:	480d      	ldr	r0, [pc, #52]	@ (8018014 <xPhyConfigure+0x208>)
 8017fde:	f00a fbf1 	bl	80227c4 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017fe2:	69bb      	ldr	r3, [r7, #24]
 8017fe4:	3301      	adds	r3, #1
 8017fe6:	61bb      	str	r3, [r7, #24]
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017fec:	69ba      	ldr	r2, [r7, #24]
 8017fee:	429a      	cmp	r2, r3
 8017ff0:	f6ff af79 	blt.w	8017ee6 <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	69fa      	ldr	r2, [r7, #28]
 8018002:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8018004:	2300      	movs	r3, #0
}
 8018006:	4618      	mov	r0, r3
 8018008:	3720      	adds	r7, #32
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}
 801800e:	bf00      	nop
 8018010:	08027b98 	.word	0x08027b98
 8018014:	08027bbc 	.word	0x08027bbc

08018018 <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 8018018:	b590      	push	{r4, r7, lr}
 801801a:	b095      	sub	sp, #84	@ 0x54
 801801c:	af02      	add	r7, sp, #8
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8018022:	683b      	ldr	r3, [r7, #0]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d101      	bne.n	801802c <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 8018028:	2300      	movs	r3, #0
 801802a:	e18d      	b.n	8018348 <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 801802c:	2300      	movs	r3, #0
 801802e:	647b      	str	r3, [r7, #68]	@ 0x44
 8018030:	e020      	b.n	8018074 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8018032:	683a      	ldr	r2, [r7, #0]
 8018034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018036:	fa22 f303 	lsr.w	r3, r2, r3
 801803a:	f003 0301 	and.w	r3, r3, #1
 801803e:	2b00      	cmp	r3, #0
 8018040:	d015      	beq.n	801806e <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8018042:	687a      	ldr	r2, [r7, #4]
 8018044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018046:	4413      	add	r3, r2
 8018048:	3318      	adds	r3, #24
 801804a:	781b      	ldrb	r3, [r3, #0]
 801804c:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	685b      	ldr	r3, [r3, #4]
 8018052:	687a      	ldr	r2, [r7, #4]
 8018054:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8018056:	2104      	movs	r1, #4
 8018058:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801805a:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	685b      	ldr	r3, [r3, #4]
 8018060:	687a      	ldr	r2, [r7, #4]
 8018062:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8018064:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018068:	2100      	movs	r1, #0
 801806a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801806c:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 801806e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018070:	3301      	adds	r3, #1
 8018072:	647b      	str	r3, [r7, #68]	@ 0x44
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018078:	461a      	mov	r2, r3
 801807a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801807c:	4293      	cmp	r3, r2
 801807e:	d3d8      	bcc.n	8018032 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8018080:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8018084:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 8018086:	f107 0318 	add.w	r3, r7, #24
 801808a:	4618      	mov	r0, r3
 801808c:	f7ed f9d4 	bl	8005438 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8018090:	2300      	movs	r3, #0
 8018092:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8018094:	2301      	movs	r3, #1
 8018096:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018098:	2300      	movs	r3, #0
 801809a:	647b      	str	r3, [r7, #68]	@ 0x44
 801809c:	e025      	b.n	80180ea <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 801809e:	683a      	ldr	r2, [r7, #0]
 80180a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180a2:	4013      	ands	r3, r2
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d01a      	beq.n	80180de <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 80180a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80180aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180ac:	4013      	ands	r3, r2
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d115      	bne.n	80180de <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80180b2:	687a      	ldr	r2, [r7, #4]
 80180b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80180b6:	4413      	add	r3, r2
 80180b8:	3318      	adds	r3, #24
 80180ba:	781b      	ldrb	r3, [r3, #0]
 80180bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80180c6:	2101      	movs	r1, #1
 80180c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80180ca:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 80180cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180ce:	f003 0320 	and.w	r3, r3, #32
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d003      	beq.n	80180de <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 80180d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80180d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180da:	4313      	orrs	r3, r2
 80180dc:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80180de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80180e0:	3301      	adds	r3, #1
 80180e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80180e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180e6:	005b      	lsls	r3, r3, #1
 80180e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180ee:	461a      	mov	r2, r3
 80180f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80180f2:	4293      	cmp	r3, r2
 80180f4:	d3d3      	bcc.n	801809e <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 80180f6:	683a      	ldr	r2, [r7, #0]
 80180f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80180fa:	429a      	cmp	r2, r3
 80180fc:	d013      	beq.n	8018126 <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80180fe:	f107 0220 	add.w	r2, r7, #32
 8018102:	f107 0318 	add.w	r3, r7, #24
 8018106:	4611      	mov	r1, r2
 8018108:	4618      	mov	r0, r3
 801810a:	f7ed f9cd 	bl	80054a8 <xTaskCheckForTimeOut>
 801810e:	4603      	mov	r3, r0
 8018110:	2b00      	cmp	r3, #0
 8018112:	d004      	beq.n	801811e <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8018114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018116:	488e      	ldr	r0, [pc, #568]	@ (8018350 <xPhyStartAutoNegotiation+0x338>)
 8018118:	f00a fb54 	bl	80227c4 <lUDPLoggingPrintf>
            break;
 801811c:	e004      	b.n	8018128 <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 801811e:	2032      	movs	r0, #50	@ 0x32
 8018120:	f7ec fc16 	bl	8004950 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8018124:	e7b6      	b.n	8018094 <xPhyStartAutoNegotiation+0x7c>
            break;
 8018126:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 8018128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801812a:	2b00      	cmp	r3, #0
 801812c:	f000 810b 	beq.w	8018346 <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8018130:	2301      	movs	r3, #1
 8018132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801813a:	43db      	mvns	r3, r3
 801813c:	401a      	ands	r2, r3
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018142:	2300      	movs	r3, #0
 8018144:	647b      	str	r3, [r7, #68]	@ 0x44
 8018146:	e0f7      	b.n	8018338 <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8018148:	687a      	ldr	r2, [r7, #4]
 801814a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801814c:	4413      	add	r3, r2
 801814e:	3318      	adds	r3, #24
 8018150:	781b      	ldrb	r3, [r3, #0]
 8018152:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018158:	3202      	adds	r2, #2
 801815a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801815e:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8018160:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018164:	4013      	ands	r3, r2
 8018166:	2b00      	cmp	r3, #0
 8018168:	f000 80df 	beq.w	801832a <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	685b      	ldr	r3, [r3, #4]
 8018170:	687a      	ldr	r2, [r7, #4]
 8018172:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8018174:	2100      	movs	r1, #0
 8018176:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018178:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018182:	2101      	movs	r1, #1
 8018184:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018186:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 8018188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801818a:	f003 0304 	and.w	r3, r3, #4
 801818e:	2b00      	cmp	r3, #0
 8018190:	d005      	beq.n	801819e <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018198:	431a      	orrs	r2, r3
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 801819e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181a0:	4a6c      	ldr	r2, [pc, #432]	@ (8018354 <xPhyStartAutoNegotiation+0x33c>)
 80181a2:	4293      	cmp	r3, r2
 80181a4:	d130      	bne.n	8018208 <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	f107 0214 	add.w	r2, r7, #20
 80181ae:	211e      	movs	r1, #30
 80181b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80181b2:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 80181b4:	697b      	ldr	r3, [r7, #20]
 80181b6:	f003 0307 	and.w	r3, r3, #7
 80181ba:	3b01      	subs	r3, #1
 80181bc:	2b05      	cmp	r3, #5
 80181be:	d814      	bhi.n	80181ea <xPhyStartAutoNegotiation+0x1d2>
 80181c0:	a201      	add	r2, pc, #4	@ (adr r2, 80181c8 <xPhyStartAutoNegotiation+0x1b0>)
 80181c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181c6:	bf00      	nop
 80181c8:	080181e1 	.word	0x080181e1
 80181cc:	080181eb 	.word	0x080181eb
 80181d0:	080181eb 	.word	0x080181eb
 80181d4:	080181eb 	.word	0x080181eb
 80181d8:	080181e1 	.word	0x080181e1
 80181dc:	080181eb 	.word	0x080181eb
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80181e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181e2:	f043 0302 	orr.w	r3, r3, #2
 80181e6:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 80181e8:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 80181ea:	697b      	ldr	r3, [r7, #20]
 80181ec:	f003 0307 	and.w	r3, r3, #7
 80181f0:	2b02      	cmp	r3, #2
 80181f2:	d801      	bhi.n	80181f8 <xPhyStartAutoNegotiation+0x1e0>
 80181f4:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 80181f6:	e05b      	b.n	80182b0 <xPhyStartAutoNegotiation+0x298>
 80181f8:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 80181fa:	2b01      	cmp	r3, #1
 80181fc:	d858      	bhi.n	80182b0 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80181fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018200:	f043 0304 	orr.w	r3, r3, #4
 8018204:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8018206:	e053      	b.n	80182b0 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 8018208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801820a:	4a53      	ldr	r2, [pc, #332]	@ (8018358 <xPhyStartAutoNegotiation+0x340>)
 801820c:	4293      	cmp	r3, r2
 801820e:	d126      	bne.n	801825e <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8018210:	2300      	movs	r3, #0
 8018212:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8018214:	2300      	movs	r3, #0
 8018216:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	f107 0210 	add.w	r2, r7, #16
 8018220:	211f      	movs	r1, #31
 8018222:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018224:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 8018226:	693b      	ldr	r3, [r7, #16]
 8018228:	0a1b      	lsrs	r3, r3, #8
 801822a:	f003 0307 	and.w	r3, r3, #7
 801822e:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8018230:	2300      	movs	r3, #0
 8018232:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8018234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018236:	2b02      	cmp	r3, #2
 8018238:	d002      	beq.n	8018240 <xPhyStartAutoNegotiation+0x228>
 801823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801823c:	2b05      	cmp	r3, #5
 801823e:	d103      	bne.n	8018248 <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8018240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018242:	f043 0302 	orr.w	r3, r3, #2
 8018246:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 8018248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801824a:	2b05      	cmp	r3, #5
 801824c:	d002      	beq.n	8018254 <xPhyStartAutoNegotiation+0x23c>
 801824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018250:	2b06      	cmp	r3, #6
 8018252:	d12d      	bne.n	80182b0 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8018254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018256:	f043 0304 	orr.w	r3, r3, #4
 801825a:	627b      	str	r3, [r7, #36]	@ 0x24
 801825c:	e028      	b.n	80182b0 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 801825e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018260:	f7ff fc66 	bl	8017b30 <xHas_1F_PHYSPCS>
 8018264:	4603      	mov	r3, r0
 8018266:	2b00      	cmp	r3, #0
 8018268:	d01b      	beq.n	80182a2 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	f107 020c 	add.w	r2, r7, #12
 8018272:	211f      	movs	r1, #31
 8018274:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018276:	4798      	blx	r3
                ulRegValue = 0;
 8018278:	2300      	movs	r3, #0
 801827a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	f003 0310 	and.w	r3, r3, #16
 8018282:	2b00      	cmp	r3, #0
 8018284:	d003      	beq.n	801828e <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8018286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018288:	f043 0304 	orr.w	r3, r3, #4
 801828c:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	f003 030c 	and.w	r3, r3, #12
 8018294:	2b04      	cmp	r3, #4
 8018296:	d10b      	bne.n	80182b0 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8018298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801829a:	f043 0302 	orr.w	r3, r3, #2
 801829e:	627b      	str	r3, [r7, #36]	@ 0x24
 80182a0:	e006      	b.n	80182b0 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80182aa:	2110      	movs	r1, #16
 80182ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80182ae:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 80182b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80182b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182b4:	f003 0304 	and.w	r3, r3, #4
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d001      	beq.n	80182c0 <xPhyStartAutoNegotiation+0x2a8>
 80182bc:	4827      	ldr	r0, [pc, #156]	@ (801835c <xPhyStartAutoNegotiation+0x344>)
 80182be:	e000      	b.n	80182c2 <xPhyStartAutoNegotiation+0x2aa>
 80182c0:	4827      	ldr	r0, [pc, #156]	@ (8018360 <xPhyStartAutoNegotiation+0x348>)
 80182c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182c4:	f003 0302 	and.w	r3, r3, #2
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d001      	beq.n	80182d0 <xPhyStartAutoNegotiation+0x2b8>
 80182cc:	240a      	movs	r4, #10
 80182ce:	e000      	b.n	80182d2 <xPhyStartAutoNegotiation+0x2ba>
 80182d0:	2464      	movs	r4, #100	@ 0x64
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80182d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182d8:	4013      	ands	r3, r2
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d001      	beq.n	80182e2 <xPhyStartAutoNegotiation+0x2ca>
 80182de:	4b21      	ldr	r3, [pc, #132]	@ (8018364 <xPhyStartAutoNegotiation+0x34c>)
 80182e0:	e000      	b.n	80182e4 <xPhyStartAutoNegotiation+0x2cc>
 80182e2:	4b21      	ldr	r3, [pc, #132]	@ (8018368 <xPhyStartAutoNegotiation+0x350>)
 80182e4:	9300      	str	r3, [sp, #0]
 80182e6:	4623      	mov	r3, r4
 80182e8:	4602      	mov	r2, r0
 80182ea:	4820      	ldr	r0, [pc, #128]	@ (801836c <xPhyStartAutoNegotiation+0x354>)
 80182ec:	f00a fa6a 	bl	80227c4 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 80182f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182f2:	f003 0304 	and.w	r3, r3, #4
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d004      	beq.n	8018304 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	2202      	movs	r2, #2
 80182fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8018302:	e003      	b.n	801830c <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	2201      	movs	r2, #1
 8018308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 801830c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801830e:	f003 0302 	and.w	r3, r3, #2
 8018312:	2b00      	cmp	r3, #0
 8018314:	d004      	beq.n	8018320 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	2201      	movs	r2, #1
 801831a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801831e:	e005      	b.n	801832c <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	2202      	movs	r2, #2
 8018324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8018328:	e000      	b.n	801832c <xPhyStartAutoNegotiation+0x314>
                continue;
 801832a:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801832c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801832e:	3301      	adds	r3, #1
 8018330:	647b      	str	r3, [r7, #68]	@ 0x44
 8018332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018334:	005b      	lsls	r3, r3, #1
 8018336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801833c:	461a      	mov	r2, r3
 801833e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018340:	4293      	cmp	r3, r2
 8018342:	f4ff af01 	bcc.w	8018148 <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 8018346:	2300      	movs	r3, #0
}
 8018348:	4618      	mov	r0, r3
 801834a:	374c      	adds	r7, #76	@ 0x4c
 801834c:	46bd      	mov	sp, r7
 801834e:	bd90      	pop	{r4, r7, pc}
 8018350:	08027be0 	.word	0x08027be0
 8018354:	00221560 	.word	0x00221560
 8018358:	00221550 	.word	0x00221550
 801835c:	08027c2c 	.word	0x08027c2c
 8018360:	08027c34 	.word	0x08027c34
 8018364:	08027c3c 	.word	0x08027c3c
 8018368:	08027c44 	.word	0x08027c44
 801836c:	08027c48 	.word	0x08027c48

08018370 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8018370:	b580      	push	{r7, lr}
 8018372:	b088      	sub	sp, #32
 8018374:	af00      	add	r7, sp, #0
 8018376:	6078      	str	r0, [r7, #4]
 8018378:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 801837a:	2301      	movs	r3, #1
 801837c:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 801837e:	2300      	movs	r3, #0
 8018380:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8018382:	683b      	ldr	r3, [r7, #0]
 8018384:	2b00      	cmp	r3, #0
 8018386:	dd2b      	ble.n	80183e0 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	331c      	adds	r3, #28
 801838c:	4618      	mov	r0, r3
 801838e:	f7ed f853 	bl	8005438 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8018398:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801839a:	2300      	movs	r3, #0
 801839c:	61bb      	str	r3, [r7, #24]
 801839e:	e019      	b.n	80183d4 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80183a4:	69fb      	ldr	r3, [r7, #28]
 80183a6:	4013      	ands	r3, r2
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d10d      	bne.n	80183c8 <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80183b0:	69fb      	ldr	r3, [r7, #28]
 80183b2:	431a      	orrs	r2, r3
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80183bc:	4619      	mov	r1, r3
 80183be:	4842      	ldr	r0, [pc, #264]	@ (80184c8 <xPhyCheckLinkStatus+0x158>)
 80183c0:	f00a fa00 	bl	80227c4 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 80183c4:	2301      	movs	r3, #1
 80183c6:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80183c8:	69bb      	ldr	r3, [r7, #24]
 80183ca:	3301      	adds	r3, #1
 80183cc:	61bb      	str	r3, [r7, #24]
 80183ce:	69fb      	ldr	r3, [r7, #28]
 80183d0:	005b      	lsls	r3, r3, #1
 80183d2:	61fb      	str	r3, [r7, #28]
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80183d8:	69ba      	ldr	r2, [r7, #24]
 80183da:	429a      	cmp	r2, r3
 80183dc:	dbe0      	blt.n	80183a0 <xPhyCheckLinkStatus+0x30>
 80183de:	e06e      	b.n	80184be <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f103 021c 	add.w	r2, r3, #28
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	3324      	adds	r3, #36	@ 0x24
 80183ea:	4619      	mov	r1, r3
 80183ec:	4610      	mov	r0, r2
 80183ee:	f7ed f85b 	bl	80054a8 <xTaskCheckForTimeOut>
 80183f2:	4603      	mov	r3, r0
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d062      	beq.n	80184be <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80183f8:	2300      	movs	r3, #0
 80183fa:	61bb      	str	r3, [r7, #24]
 80183fc:	e045      	b.n	801848a <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80183fe:	687a      	ldr	r2, [r7, #4]
 8018400:	69bb      	ldr	r3, [r7, #24]
 8018402:	4413      	add	r3, r2
 8018404:	3318      	adds	r3, #24
 8018406:	781b      	ldrb	r3, [r3, #0]
 8018408:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	f107 020c 	add.w	r2, r7, #12
 8018412:	2101      	movs	r1, #1
 8018414:	6938      	ldr	r0, [r7, #16]
 8018416:	4798      	blx	r3
 8018418:	4603      	mov	r3, r0
 801841a:	2b00      	cmp	r3, #0
 801841c:	d12f      	bne.n	801847e <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018422:	69fb      	ldr	r3, [r7, #28]
 8018424:	4013      	ands	r3, r2
 8018426:	2b00      	cmp	r3, #0
 8018428:	bf14      	ite	ne
 801842a:	2301      	movne	r3, #1
 801842c:	2300      	moveq	r3, #0
 801842e:	b2da      	uxtb	r2, r3
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	f003 0304 	and.w	r3, r3, #4
 8018436:	2b00      	cmp	r3, #0
 8018438:	bf14      	ite	ne
 801843a:	2301      	movne	r3, #1
 801843c:	2300      	moveq	r3, #0
 801843e:	b2db      	uxtb	r3, r3
 8018440:	4053      	eors	r3, r2
 8018442:	b2db      	uxtb	r3, r3
 8018444:	2b00      	cmp	r3, #0
 8018446:	d01a      	beq.n	801847e <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	f003 0304 	and.w	r3, r3, #4
 801844e:	2b00      	cmp	r3, #0
 8018450:	d006      	beq.n	8018460 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018456:	69fb      	ldr	r3, [r7, #28]
 8018458:	431a      	orrs	r2, r3
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	635a      	str	r2, [r3, #52]	@ 0x34
 801845e:	e006      	b.n	801846e <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018464:	69fb      	ldr	r3, [r7, #28]
 8018466:	43db      	mvns	r3, r3
 8018468:	401a      	ands	r2, r3
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018472:	4619      	mov	r1, r3
 8018474:	4814      	ldr	r0, [pc, #80]	@ (80184c8 <xPhyCheckLinkStatus+0x158>)
 8018476:	f00a f9a5 	bl	80227c4 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 801847a:	2301      	movs	r3, #1
 801847c:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801847e:	69bb      	ldr	r3, [r7, #24]
 8018480:	3301      	adds	r3, #1
 8018482:	61bb      	str	r3, [r7, #24]
 8018484:	69fb      	ldr	r3, [r7, #28]
 8018486:	005b      	lsls	r3, r3, #1
 8018488:	61fb      	str	r3, [r7, #28]
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801848e:	69ba      	ldr	r2, [r7, #24]
 8018490:	429a      	cmp	r2, r3
 8018492:	dbb4      	blt.n	80183fe <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	331c      	adds	r3, #28
 8018498:	4618      	mov	r0, r3
 801849a:	f7ec ffcd 	bl	8005438 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80184a2:	69fb      	ldr	r3, [r7, #28]
 80184a4:	085b      	lsrs	r3, r3, #1
 80184a6:	4013      	ands	r3, r2
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d004      	beq.n	80184b6 <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80184b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80184b4:	e003      	b.n	80184be <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80184bc:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 80184be:	697b      	ldr	r3, [r7, #20]
}
 80184c0:	4618      	mov	r0, r3
 80184c2:	3720      	adds	r7, #32
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bd80      	pop	{r7, pc}
 80184c8:	08027c7c 	.word	0x08027c7c

080184cc <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 80184cc:	b480      	push	{r7}
 80184ce:	b085      	sub	sp, #20
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 80184d4:	2300      	movs	r3, #0
 80184d6:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 80184d8:	2300      	movs	r3, #0
 80184da:	60bb      	str	r3, [r7, #8]
 80184dc:	e013      	b.n	8018506 <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 80184de:	2201      	movs	r2, #1
 80184e0:	68bb      	ldr	r3, [r7, #8]
 80184e2:	fa02 f303 	lsl.w	r3, r2, r3
 80184e6:	461a      	mov	r2, r3
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	4013      	ands	r3, r2
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d007      	beq.n	8018500 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 80184f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80184f4:	68bb      	ldr	r3, [r7, #8]
 80184f6:	fa22 f303 	lsr.w	r3, r2, r3
 80184fa:	68fa      	ldr	r2, [r7, #12]
 80184fc:	4313      	orrs	r3, r2
 80184fe:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 8018500:	68bb      	ldr	r3, [r7, #8]
 8018502:	3301      	adds	r3, #1
 8018504:	60bb      	str	r3, [r7, #8]
 8018506:	68bb      	ldr	r3, [r7, #8]
 8018508:	2b1f      	cmp	r3, #31
 801850a:	dde8      	ble.n	80184de <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 801850c:	68fb      	ldr	r3, [r7, #12]
}
 801850e:	4618      	mov	r0, r3
 8018510:	3714      	adds	r7, #20
 8018512:	46bd      	mov	sp, r7
 8018514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018518:	4770      	bx	lr
	...

0801851c <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 801851c:	b590      	push	{r4, r7, lr}
 801851e:	b087      	sub	sp, #28
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 8018524:	f04f 33ff 	mov.w	r3, #4294967295
 8018528:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 801852a:	2300      	movs	r3, #0
 801852c:	613b      	str	r3, [r7, #16]
 801852e:	e024      	b.n	801857a <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 8018530:	693b      	ldr	r3, [r7, #16]
 8018532:	687a      	ldr	r2, [r7, #4]
 8018534:	4413      	add	r3, r2
 8018536:	781b      	ldrb	r3, [r3, #0]
 8018538:	461a      	mov	r2, r3
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	4053      	eors	r3, r2
 801853e:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8018540:	2300      	movs	r3, #0
 8018542:	617b      	str	r3, [r7, #20]
 8018544:	e013      	b.n	801856e <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	f003 0301 	and.w	r3, r3, #1
 801854c:	2b00      	cmp	r3, #0
 801854e:	d008      	beq.n	8018562 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	085c      	lsrs	r4, r3, #1
 8018554:	480e      	ldr	r0, [pc, #56]	@ (8018590 <prvComputeCRC32_MAC+0x74>)
 8018556:	f7ff ffb9 	bl	80184cc <prvRevBits32>
 801855a:	4603      	mov	r3, r0
 801855c:	4063      	eors	r3, r4
 801855e:	60fb      	str	r3, [r7, #12]
 8018560:	e002      	b.n	8018568 <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	085b      	lsrs	r3, r3, #1
 8018566:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8018568:	697b      	ldr	r3, [r7, #20]
 801856a:	3301      	adds	r3, #1
 801856c:	617b      	str	r3, [r7, #20]
 801856e:	697b      	ldr	r3, [r7, #20]
 8018570:	2b07      	cmp	r3, #7
 8018572:	dde8      	ble.n	8018546 <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8018574:	693b      	ldr	r3, [r7, #16]
 8018576:	3301      	adds	r3, #1
 8018578:	613b      	str	r3, [r7, #16]
 801857a:	693b      	ldr	r3, [r7, #16]
 801857c:	2b05      	cmp	r3, #5
 801857e:	ddd7      	ble.n	8018530 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	43db      	mvns	r3, r3
 8018584:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 8018586:	68fb      	ldr	r3, [r7, #12]
}
 8018588:	4618      	mov	r0, r3
 801858a:	371c      	adds	r7, #28
 801858c:	46bd      	mov	sp, r7
 801858e:	bd90      	pop	{r4, r7, pc}
 8018590:	04c11db7 	.word	0x04c11db7

08018594 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8018594:	b580      	push	{r7, lr}
 8018596:	b084      	sub	sp, #16
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 801859c:	6878      	ldr	r0, [r7, #4]
 801859e:	f7ff ffbd 	bl	801851c <prvComputeCRC32_MAC>
 80185a2:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 80185a4:	68f8      	ldr	r0, [r7, #12]
 80185a6:	f7ff ff91 	bl	80184cc <prvRevBits32>
 80185aa:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 80185ac:	68bb      	ldr	r3, [r7, #8]
 80185ae:	0e9b      	lsrs	r3, r3, #26
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	3710      	adds	r7, #16
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}

080185b8 <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b084      	sub	sp, #16
 80185bc:	af00      	add	r7, sp, #0
 80185be:	6078      	str	r0, [r7, #4]
 80185c0:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 80185c2:	6838      	ldr	r0, [r7, #0]
 80185c4:	f7ff ffe6 	bl	8018594 <prvComputeEthernet_MACHash>
 80185c8:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	2b1f      	cmp	r3, #31
 80185ce:	d80c      	bhi.n	80185ea <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	691a      	ldr	r2, [r3, #16]
 80185d6:	2101      	movs	r1, #1
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	fa01 f303 	lsl.w	r3, r1, r3
 80185de:	4619      	mov	r1, r3
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	430a      	orrs	r2, r1
 80185e6:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 80185e8:	e00d      	b.n	8018606 <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	695a      	ldr	r2, [r3, #20]
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	f003 031f 	and.w	r3, r3, #31
 80185f6:	2101      	movs	r1, #1
 80185f8:	fa01 f303 	lsl.w	r3, r1, r3
 80185fc:	4619      	mov	r1, r3
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	430a      	orrs	r2, r1
 8018604:	615a      	str	r2, [r3, #20]
}
 8018606:	bf00      	nop
 8018608:	3710      	adds	r7, #16
 801860a:	46bd      	mov	sp, r7
 801860c:	bd80      	pop	{r7, pc}

0801860e <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 801860e:	b580      	push	{r7, lr}
 8018610:	b086      	sub	sp, #24
 8018612:	af00      	add	r7, sp, #0
 8018614:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 8018616:	230a      	movs	r3, #10
 8018618:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 801861a:	2300      	movs	r3, #0
 801861c:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 801861e:	6939      	ldr	r1, [r7, #16]
 8018620:	6878      	ldr	r0, [r7, #4]
 8018622:	f7ff f9bf 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 8018626:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d002      	beq.n	8018634 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018632:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 8018634:	697b      	ldr	r3, [r7, #20]
}
 8018636:	4618      	mov	r0, r3
 8018638:	3718      	adds	r7, #24
 801863a:	46bd      	mov	sp, r7
 801863c:	bd80      	pop	{r7, pc}
	...

08018640 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b08e      	sub	sp, #56	@ 0x38
 8018644:	af02      	add	r7, sp, #8
 8018646:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8018648:	2300      	movs	r3, #0
 801864a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 801864c:	2300      	movs	r3, #0
 801864e:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 8018650:	4b8d      	ldr	r3, [pc, #564]	@ (8018888 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	2b00      	cmp	r3, #0
 8018656:	f040 8104 	bne.w	8018862 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 801865a:	4a8c      	ldr	r2, [pc, #560]	@ (801888c <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8018660:	6878      	ldr	r0, [r7, #4]
 8018662:	f7f5 fa71 	bl	800db48 <FreeRTOS_FirstEndPoint>
 8018666:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 8018668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801866a:	2b00      	cmp	r3, #0
 801866c:	d104      	bne.n	8018678 <xSTM32H_NetworkInterfaceInitialise+0x38>
 801866e:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8018672:	4887      	ldr	r0, [pc, #540]	@ (8018890 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8018674:	f7e9 f9c8 	bl	8001a08 <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 8018678:	4b86      	ldr	r3, [pc, #536]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801867a:	4a87      	ldr	r2, [pc, #540]	@ (8018898 <xSTM32H_NetworkInterfaceInitialise+0x258>)
 801867c:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 801867e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018680:	33e8      	adds	r3, #232	@ 0xe8
 8018682:	4a84      	ldr	r2, [pc, #528]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018684:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8018686:	4b83      	ldr	r3, [pc, #524]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018688:	2201      	movs	r2, #1
 801868a:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 801868c:	4b81      	ldr	r3, [pc, #516]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801868e:	4a83      	ldr	r2, [pc, #524]	@ (801889c <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8018690:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8018692:	4b80      	ldr	r3, [pc, #512]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018694:	4a82      	ldr	r2, [pc, #520]	@ (80188a0 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8018696:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8018698:	4b7e      	ldr	r3, [pc, #504]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801869a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 801869e:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 80186a0:	2260      	movs	r2, #96	@ 0x60
 80186a2:	2100      	movs	r1, #0
 80186a4:	487d      	ldr	r0, [pc, #500]	@ (801889c <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 80186a6:	f00a fbb6 	bl	8022e16 <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 80186aa:	2260      	movs	r2, #96	@ 0x60
 80186ac:	2100      	movs	r1, #0
 80186ae:	487c      	ldr	r0, [pc, #496]	@ (80188a0 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 80186b0:	f00a fbb1 	bl	8022e16 <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 80186b4:	4877      	ldr	r0, [pc, #476]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80186b6:	f000 fc71 	bl	8018f9c <HAL_ETH_Init>
 80186ba:	4603      	mov	r3, r0
 80186bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 80186c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	f040 80c9 	bne.w	801885c <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 80186ca:	4b72      	ldr	r3, [pc, #456]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	6899      	ldr	r1, [r3, #8]
 80186d0:	4b70      	ldr	r3, [pc, #448]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80186d2:	681a      	ldr	r2, [r3, #0]
 80186d4:	f240 4316 	movw	r3, #1046	@ 0x416
 80186d8:	430b      	orrs	r3, r1
 80186da:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 80186dc:	2234      	movs	r2, #52	@ 0x34
 80186de:	2100      	movs	r1, #0
 80186e0:	4870      	ldr	r0, [pc, #448]	@ (80188a4 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80186e2:	f00a fb98 	bl	8022e16 <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 80186e6:	4b6f      	ldr	r3, [pc, #444]	@ (80188a4 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80186e8:	2220      	movs	r2, #32
 80186ea:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 80186ec:	4b6d      	ldr	r3, [pc, #436]	@ (80188a4 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	f043 0301 	orr.w	r3, r3, #1
 80186f4:	4a6b      	ldr	r2, [pc, #428]	@ (80188a4 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80186f6:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80186f8:	4b6a      	ldr	r3, [pc, #424]	@ (80188a4 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80186fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80186fe:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8018700:	4b68      	ldr	r3, [pc, #416]	@ (80188a4 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018702:	2200      	movs	r2, #0
 8018704:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 8018706:	2104      	movs	r1, #4
 8018708:	2004      	movs	r0, #4
 801870a:	f7eb fa41 	bl	8003b90 <xQueueCreateCountingSemaphore>
 801870e:	4603      	mov	r3, r0
 8018710:	4a65      	ldr	r2, [pc, #404]	@ (80188a8 <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8018712:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 8018714:	4b64      	ldr	r3, [pc, #400]	@ (80188a8 <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d104      	bne.n	8018726 <xSTM32H_NetworkInterfaceInitialise+0xe6>
 801871c:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8018720:	485b      	ldr	r0, [pc, #364]	@ (8018890 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8018722:	f7e9 f971 	bl	8001a08 <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 8018726:	2001      	movs	r0, #1
 8018728:	f7eb fa19 	bl	8003b5e <xQueueCreateMutex>
 801872c:	4603      	mov	r3, r0
 801872e:	4a5f      	ldr	r2, [pc, #380]	@ (80188ac <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8018730:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 8018732:	4b5e      	ldr	r3, [pc, #376]	@ (80188ac <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d104      	bne.n	8018744 <xSTM32H_NetworkInterfaceInitialise+0x104>
 801873a:	f240 117f 	movw	r1, #383	@ 0x17f
 801873e:	4854      	ldr	r0, [pc, #336]	@ (8018890 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8018740:	f7e9 f962 	bl	8001a08 <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8018744:	2300      	movs	r3, #0
 8018746:	627b      	str	r3, [r7, #36]	@ 0x24
 8018748:	e015      	b.n	8018776 <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 801874a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 801874e:	f7ff ff5e 	bl	801860e <pucGetRXBuffer>
 8018752:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 8018754:	69fb      	ldr	r3, [r7, #28]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d104      	bne.n	8018764 <xSTM32H_NetworkInterfaceInitialise+0x124>
 801875a:	f240 1189 	movw	r1, #393	@ 0x189
 801875e:	484c      	ldr	r0, [pc, #304]	@ (8018890 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8018760:	f7e9 f952 	bl	8001a08 <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 8018764:	2300      	movs	r3, #0
 8018766:	69fa      	ldr	r2, [r7, #28]
 8018768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801876a:	484a      	ldr	r0, [pc, #296]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801876c:	f000 fd02 	bl	8019174 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8018770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018772:	3301      	adds	r3, #1
 8018774:	627b      	str	r3, [r7, #36]	@ 0x24
 8018776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018778:	2b03      	cmp	r3, #3
 801877a:	d9e6      	bls.n	801874a <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 801877c:	494c      	ldr	r1, [pc, #304]	@ (80188b0 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 801877e:	4845      	ldr	r0, [pc, #276]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018780:	f7ff ff1a 	bl	80185b8 <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8018784:	494b      	ldr	r1, [pc, #300]	@ (80188b4 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 8018786:	4843      	ldr	r0, [pc, #268]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018788:	f7ff ff16 	bl	80185b8 <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 801878c:	e03a      	b.n	8018804 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 801878e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018790:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8018794:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018798:	b2db      	uxtb	r3, r3
 801879a:	2b00      	cmp	r3, #0
 801879c:	d002      	beq.n	80187a4 <xSTM32H_NetworkInterfaceInitialise+0x164>
 801879e:	2b01      	cmp	r3, #1
 80187a0:	d00d      	beq.n	80187be <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 80187a2:	e028      	b.n	80187f6 <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 80187a4:	4b3b      	ldr	r3, [pc, #236]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80187a6:	685a      	ldr	r2, [r3, #4]
 80187a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187aa:	33e8      	adds	r3, #232	@ 0xe8
 80187ac:	429a      	cmp	r2, r3
 80187ae:	d021      	beq.n	80187f4 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 80187b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187b2:	33e8      	adds	r3, #232	@ 0xe8
 80187b4:	4619      	mov	r1, r3
 80187b6:	4837      	ldr	r0, [pc, #220]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80187b8:	f7ff fefe 	bl	80185b8 <prvSetMAC_HashFilter>
                                break;
 80187bc:	e01a      	b.n	80187f4 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 80187be:	4a3e      	ldr	r2, [pc, #248]	@ (80188b8 <xSTM32H_NetworkInterfaceInitialise+0x278>)
 80187c0:	f107 0314 	add.w	r3, r7, #20
 80187c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187c8:	6018      	str	r0, [r3, #0]
 80187ca:	3304      	adds	r3, #4
 80187cc:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 80187ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80187d4:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 80187d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187d8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80187dc:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 80187de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187e0:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80187e4:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80187e6:	f107 0314 	add.w	r3, r7, #20
 80187ea:	4619      	mov	r1, r3
 80187ec:	4829      	ldr	r0, [pc, #164]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80187ee:	f7ff fee3 	bl	80185b8 <prvSetMAC_HashFilter>
                               break;
 80187f2:	e000      	b.n	80187f6 <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 80187f4:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 80187f6:	4b25      	ldr	r3, [pc, #148]	@ (801888c <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7f5 f9c5 	bl	800db8c <FreeRTOS_NextEndPoint>
 8018802:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 8018804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018806:	2b00      	cmp	r3, #0
 8018808:	d1c1      	bne.n	801878e <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 801880a:	4a2c      	ldr	r2, [pc, #176]	@ (80188bc <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 801880c:	f107 030c 	add.w	r3, r7, #12
 8018810:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018814:	6018      	str	r0, [r3, #0]
 8018816:	3304      	adds	r3, #4
 8018818:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 801881a:	f107 030c 	add.w	r3, r7, #12
 801881e:	4619      	mov	r1, r3
 8018820:	481c      	ldr	r0, [pc, #112]	@ (8018894 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018822:	f7ff fec9 	bl	80185b8 <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 8018826:	f000 f911 	bl	8018a4c <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 801882a:	2001      	movs	r0, #1
 801882c:	f000 f926 	bl	8018a7c <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8018830:	4b23      	ldr	r3, [pc, #140]	@ (80188c0 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 8018832:	9301      	str	r3, [sp, #4]
 8018834:	2305      	movs	r3, #5
 8018836:	9300      	str	r3, [sp, #0]
 8018838:	2300      	movs	r3, #0
 801883a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801883e:	4921      	ldr	r1, [pc, #132]	@ (80188c4 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 8018840:	4821      	ldr	r0, [pc, #132]	@ (80188c8 <xSTM32H_NetworkInterfaceInitialise+0x288>)
 8018842:	f7eb fea7 	bl	8004594 <xTaskCreate>
 8018846:	4603      	mov	r3, r0
 8018848:	2b01      	cmp	r3, #1
 801884a:	d103      	bne.n	8018854 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 801884c:	4b0e      	ldr	r3, [pc, #56]	@ (8018888 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 801884e:	2201      	movs	r2, #1
 8018850:	701a      	strb	r2, [r3, #0]
 8018852:	e006      	b.n	8018862 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 8018854:	4b0c      	ldr	r3, [pc, #48]	@ (8018888 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8018856:	2202      	movs	r2, #2
 8018858:	701a      	strb	r2, [r3, #0]
 801885a:	e002      	b.n	8018862 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 801885c:	4b0a      	ldr	r3, [pc, #40]	@ (8018888 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 801885e:	2202      	movs	r2, #2
 8018860:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 8018862:	4b09      	ldr	r3, [pc, #36]	@ (8018888 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8018864:	781b      	ldrb	r3, [r3, #0]
 8018866:	2b01      	cmp	r3, #1
 8018868:	d108      	bne.n	801887c <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 801886a:	4b18      	ldr	r3, [pc, #96]	@ (80188cc <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 801886c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801886e:	2b00      	cmp	r3, #0
 8018870:	d004      	beq.n	801887c <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 8018872:	2301      	movs	r3, #1
 8018874:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 8018876:	4816      	ldr	r0, [pc, #88]	@ (80188d0 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 8018878:	f009 ffa4 	bl	80227c4 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 801887c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801887e:	4618      	mov	r0, r3
 8018880:	3730      	adds	r7, #48	@ 0x30
 8018882:	46bd      	mov	sp, r7
 8018884:	bd80      	pop	{r7, pc}
 8018886:	bf00      	nop
 8018888:	20002470 	.word	0x20002470
 801888c:	20002524 	.word	0x20002524
 8018890:	08027ca4 	.word	0x08027ca4
 8018894:	2000247c 	.word	0x2000247c
 8018898:	40028000 	.word	0x40028000
 801889c:	24040060 	.word	0x24040060
 80188a0:	24040000 	.word	0x24040000
 80188a4:	200024f0 	.word	0x200024f0
 80188a8:	20002474 	.word	0x20002474
 80188ac:	20002478 	.word	0x20002478
 80188b0:	08027f3c 	.word	0x08027f3c
 80188b4:	08027f44 	.word	0x08027f44
 80188b8:	08027d1c 	.word	0x08027d1c
 80188bc:	08027d24 	.word	0x08027d24
 80188c0:	20002528 	.word	0x20002528
 80188c4:	08027cf8 	.word	0x08027cf8
 80188c8:	08018e31 	.word	0x08018e31
 80188cc:	2000252c 	.word	0x2000252c
 80188d0:	08027d04 	.word	0x08027d04

080188d4 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 80188d4:	b480      	push	{r7}
 80188d6:	b085      	sub	sp, #20
 80188d8:	af00      	add	r7, sp, #0
 80188da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 80188dc:	4b07      	ldr	r3, [pc, #28]	@ (80188fc <xSTM32H_GetPhyLinkStatus+0x28>)
 80188de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d002      	beq.n	80188ea <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 80188e4:	2301      	movs	r3, #1
 80188e6:	60fb      	str	r3, [r7, #12]
 80188e8:	e001      	b.n	80188ee <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 80188ea:	2300      	movs	r3, #0
 80188ec:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80188ee:	68fb      	ldr	r3, [r7, #12]
}
 80188f0:	4618      	mov	r0, r3
 80188f2:	3714      	adds	r7, #20
 80188f4:	46bd      	mov	sp, r7
 80188f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fa:	4770      	bx	lr
 80188fc:	2000252c 	.word	0x2000252c

08018900 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b082      	sub	sp, #8
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
 8018908:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	4a10      	ldr	r2, [pc, #64]	@ (8018950 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 801890e:	2111      	movs	r1, #17
 8018910:	4810      	ldr	r0, [pc, #64]	@ (8018954 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8018912:	f00a ff83 	bl	802381c <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 8018916:	2228      	movs	r2, #40	@ 0x28
 8018918:	2100      	movs	r1, #0
 801891a:	6838      	ldr	r0, [r7, #0]
 801891c:	f00a fa7b 	bl	8022e16 <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 8018920:	683b      	ldr	r3, [r7, #0]
 8018922:	4a0c      	ldr	r2, [pc, #48]	@ (8018954 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8018924:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 8018926:	687a      	ldr	r2, [r7, #4]
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	4a0a      	ldr	r2, [pc, #40]	@ (8018958 <pxSTM32H_FillInterfaceDescriptor+0x58>)
 8018930:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 8018932:	683b      	ldr	r3, [r7, #0]
 8018934:	4a09      	ldr	r2, [pc, #36]	@ (801895c <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 8018936:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 8018938:	683b      	ldr	r3, [r7, #0]
 801893a:	4a09      	ldr	r2, [pc, #36]	@ (8018960 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 801893c:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 801893e:	6838      	ldr	r0, [r7, #0]
 8018940:	f7f5 f82e 	bl	800d9a0 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 8018944:	683b      	ldr	r3, [r7, #0]
}
 8018946:	4618      	mov	r0, r3
 8018948:	3708      	adds	r7, #8
 801894a:	46bd      	mov	sp, r7
 801894c:	bd80      	pop	{r7, pc}
 801894e:	bf00      	nop
 8018950:	08027d2c 	.word	0x08027d2c
 8018954:	2000256c 	.word	0x2000256c
 8018958:	08018641 	.word	0x08018641
 801895c:	08018965 	.word	0x08018965
 8018960:	080188d5 	.word	0x080188d5

08018964 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b08a      	sub	sp, #40	@ 0x28
 8018968:	af00      	add	r7, sp, #0
 801896a:	60f8      	str	r0, [r7, #12]
 801896c:	60b9      	str	r1, [r7, #8]
 801896e:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8018970:	2300      	movs	r3, #0
 8018972:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 8018974:	2364      	movs	r3, #100	@ 0x64
 8018976:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 8018978:	68f8      	ldr	r0, [r7, #12]
 801897a:	f7ff ffab 	bl	80188d4 <xSTM32H_GetPhyLinkStatus>
 801897e:	4603      	mov	r3, r0
 8018980:	2b01      	cmp	r3, #1
 8018982:	d14c      	bne.n	8018a1e <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 8018984:	68bb      	ldr	r3, [r7, #8]
 8018986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018988:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d104      	bne.n	801899a <xSTM32H_NetworkInterfaceOutput+0x36>
 8018990:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8018994:	4827      	ldr	r0, [pc, #156]	@ (8018a34 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 8018996:	f7e9 f837 	bl	8001a08 <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 801899a:	69fb      	ldr	r3, [r7, #28]
 801899c:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 801899e:	68bb      	ldr	r3, [r7, #8]
 80189a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 80189a2:	617b      	str	r3, [r7, #20]
 80189a4:	2300      	movs	r3, #0
 80189a6:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 80189a8:	68bb      	ldr	r3, [r7, #8]
 80189aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189ac:	4a22      	ldr	r2, [pc, #136]	@ (8018a38 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 80189ae:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 80189b0:	4a21      	ldr	r2, [pc, #132]	@ (8018a38 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 80189b2:	f107 0310 	add.w	r3, r7, #16
 80189b6:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 80189b8:	4b20      	ldr	r3, [pc, #128]	@ (8018a3c <xSTM32H_NetworkInterfaceOutput+0xd8>)
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	6a39      	ldr	r1, [r7, #32]
 80189be:	4618      	mov	r0, r3
 80189c0:	f7eb fac8 	bl	8003f54 <xQueueSemaphoreTake>
 80189c4:	4603      	mov	r3, r0
 80189c6:	2b01      	cmp	r3, #1
 80189c8:	d003      	beq.n	80189d2 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 80189ca:	481d      	ldr	r0, [pc, #116]	@ (8018a40 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 80189cc:	f009 fefa 	bl	80227c4 <lUDPLoggingPrintf>
 80189d0:	e025      	b.n	8018a1e <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 80189d2:	f3bf 8f4f 	dsb	sy
}
 80189d6:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 80189d8:	4b1a      	ldr	r3, [pc, #104]	@ (8018a44 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	6a39      	ldr	r1, [r7, #32]
 80189de:	4618      	mov	r0, r3
 80189e0:	f7eb fab8 	bl	8003f54 <xQueueSemaphoreTake>
 80189e4:	4603      	mov	r3, r0
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d019      	beq.n	8018a1e <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 80189ea:	2300      	movs	r3, #0
 80189ec:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 80189ee:	4912      	ldr	r1, [pc, #72]	@ (8018a38 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 80189f0:	4815      	ldr	r0, [pc, #84]	@ (8018a48 <xSTM32H_NetworkInterfaceOutput+0xe4>)
 80189f2:	f000 fcef 	bl	80193d4 <HAL_ETH_Transmit_IT>
 80189f6:	4603      	mov	r3, r0
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d102      	bne.n	8018a02 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 80189fc:	2301      	movs	r3, #1
 80189fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8018a00:	e006      	b.n	8018a10 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8018a02:	4b0e      	ldr	r3, [pc, #56]	@ (8018a3c <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8018a04:	6818      	ldr	r0, [r3, #0]
 8018a06:	2300      	movs	r3, #0
 8018a08:	2200      	movs	r2, #0
 8018a0a:	2100      	movs	r1, #0
 8018a0c:	f7eb f8ea 	bl	8003be4 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 8018a10:	4b0c      	ldr	r3, [pc, #48]	@ (8018a44 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8018a12:	6818      	ldr	r0, [r3, #0]
 8018a14:	2300      	movs	r3, #0
 8018a16:	2200      	movs	r2, #0
 8018a18:	2100      	movs	r1, #0
 8018a1a:	f7eb f8e3 	bl	8003be4 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d002      	beq.n	8018a2a <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 8018a24:	68b8      	ldr	r0, [r7, #8]
 8018a26:	f7ff f825 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 8018a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	3728      	adds	r7, #40	@ 0x28
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}
 8018a34:	08027ca4 	.word	0x08027ca4
 8018a38:	200024f0 	.word	0x200024f0
 8018a3c:	20002474 	.word	0x20002474
 8018a40:	08027d34 	.word	0x08027d34
 8018a44:	20002478 	.word	0x20002478
 8018a48:	2000247c 	.word	0x2000247c

08018a4c <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 8018a50:	4a06      	ldr	r2, [pc, #24]	@ (8018a6c <prvMACBProbePhy+0x20>)
 8018a52:	4907      	ldr	r1, [pc, #28]	@ (8018a70 <prvMACBProbePhy+0x24>)
 8018a54:	4807      	ldr	r0, [pc, #28]	@ (8018a74 <prvMACBProbePhy+0x28>)
 8018a56:	f7ff f8c5 	bl	8017be4 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 8018a5a:	4806      	ldr	r0, [pc, #24]	@ (8018a74 <prvMACBProbePhy+0x28>)
 8018a5c:	f7ff f8d8 	bl	8017c10 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 8018a60:	4905      	ldr	r1, [pc, #20]	@ (8018a78 <prvMACBProbePhy+0x2c>)
 8018a62:	4804      	ldr	r0, [pc, #16]	@ (8018a74 <prvMACBProbePhy+0x28>)
 8018a64:	f7ff f9d2 	bl	8017e0c <xPhyConfigure>
}
 8018a68:	bf00      	nop
 8018a6a:	bd80      	pop	{r7, pc}
 8018a6c:	08018c6d 	.word	0x08018c6d
 8018a70:	08018c35 	.word	0x08018c35
 8018a74:	2000252c 	.word	0x2000252c
 8018a78:	0802803c 	.word	0x0802803c

08018a7c <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b09e      	sub	sp, #120	@ 0x78
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 8018a84:	2300      	movs	r3, #0
 8018a86:	677b      	str	r3, [r7, #116]	@ 0x74
 8018a88:	2300      	movs	r3, #0
 8018a8a:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8018a8c:	4b25      	ldr	r3, [pc, #148]	@ (8018b24 <prvEthernetUpdateConfig+0xa8>)
 8018a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a90:	687a      	ldr	r2, [r7, #4]
 8018a92:	4619      	mov	r1, r3
 8018a94:	4824      	ldr	r0, [pc, #144]	@ (8018b28 <prvEthernetUpdateConfig+0xac>)
 8018a96:	f009 fe95 	bl	80227c4 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d103      	bne.n	8018aa8 <prvEthernetUpdateConfig+0x2c>
 8018aa0:	4b20      	ldr	r3, [pc, #128]	@ (8018b24 <prvEthernetUpdateConfig+0xa8>)
 8018aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d035      	beq.n	8018b14 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 8018aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8018b24 <prvEthernetUpdateConfig+0xa8>)
 8018aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018aac:	2201      	movs	r2, #1
 8018aae:	fa02 f303 	lsl.w	r3, r2, r3
 8018ab2:	3b01      	subs	r3, #1
 8018ab4:	4619      	mov	r1, r3
 8018ab6:	481b      	ldr	r0, [pc, #108]	@ (8018b24 <prvEthernetUpdateConfig+0xa8>)
 8018ab8:	f7ff faae 	bl	8018018 <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8018abc:	4b19      	ldr	r3, [pc, #100]	@ (8018b24 <prvEthernetUpdateConfig+0xa8>)
 8018abe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8018ac2:	2b02      	cmp	r3, #2
 8018ac4:	d103      	bne.n	8018ace <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 8018ac6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018aca:	673b      	str	r3, [r7, #112]	@ 0x70
 8018acc:	e001      	b.n	8018ad2 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8018ace:	2300      	movs	r3, #0
 8018ad0:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8018ad2:	4b14      	ldr	r3, [pc, #80]	@ (8018b24 <prvEthernetUpdateConfig+0xa8>)
 8018ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8018ad8:	2b01      	cmp	r3, #1
 8018ada:	d102      	bne.n	8018ae2 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8018adc:	2300      	movs	r3, #0
 8018ade:	677b      	str	r3, [r7, #116]	@ 0x74
 8018ae0:	e002      	b.n	8018ae8 <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8018ae2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018ae6:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8018ae8:	f107 030c 	add.w	r3, r7, #12
 8018aec:	4619      	mov	r1, r3
 8018aee:	480f      	ldr	r0, [pc, #60]	@ (8018b2c <prvEthernetUpdateConfig+0xb0>)
 8018af0:	f000 ffcc 	bl	8019a8c <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8018af4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018af6:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 8018af8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018afa:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8018afc:	f107 030c 	add.w	r3, r7, #12
 8018b00:	4619      	mov	r1, r3
 8018b02:	480a      	ldr	r0, [pc, #40]	@ (8018b2c <prvEthernetUpdateConfig+0xb0>)
 8018b04:	f001 f996 	bl	8019e34 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 8018b08:	2301      	movs	r3, #1
 8018b0a:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8018b0c:	4807      	ldr	r0, [pc, #28]	@ (8018b2c <prvEthernetUpdateConfig+0xb0>)
 8018b0e:	f000 fb64 	bl	80191da <HAL_ETH_Start_IT>
 8018b12:	e003      	b.n	8018b1c <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018b14:	4805      	ldr	r0, [pc, #20]	@ (8018b2c <prvEthernetUpdateConfig+0xb0>)
 8018b16:	f000 fbe5 	bl	80192e4 <HAL_ETH_Stop_IT>
    }
}
 8018b1a:	bf00      	nop
 8018b1c:	bf00      	nop
 8018b1e:	3778      	adds	r7, #120	@ 0x78
 8018b20:	46bd      	mov	sp, r7
 8018b22:	bd80      	pop	{r7, pc}
 8018b24:	2000252c 	.word	0x2000252c
 8018b28:	08027d6c 	.word	0x08027d6c
 8018b2c:	2000247c 	.word	0x2000247c

08018b30 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b08c      	sub	sp, #48	@ 0x30
 8018b34:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 8018b36:	2300      	movs	r3, #0
 8018b38:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8018b3e:	f107 0308 	add.w	r3, r7, #8
 8018b42:	4619      	mov	r1, r3
 8018b44:	4838      	ldr	r0, [pc, #224]	@ (8018c28 <prvNetworkInterfaceInput+0xf8>)
 8018b46:	f000 fd19 	bl	801957c <HAL_ETH_GetRxData>
 8018b4a:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 8018b4c:	69fb      	ldr	r3, [r7, #28]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d101      	bne.n	8018b56 <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 8018b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b54:	e064      	b.n	8018c20 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 8018b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b58:	3301      	adds	r3, #1
 8018b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 8018b5c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8018b60:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 8018b62:	68bb      	ldr	r3, [r7, #8]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d004      	beq.n	8018b72 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 8018b68:	68bb      	ldr	r3, [r7, #8]
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	f7f1 ff8d 	bl	800aa8a <pxPacketBuffer_to_NetworkBuffer>
 8018b70:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 8018b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d102      	bne.n	8018b7e <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 8018b78:	482c      	ldr	r0, [pc, #176]	@ (8018c2c <prvNetworkInterfaceInput+0xfc>)
 8018b7a:	f009 fe23 	bl	80227c4 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8018b7e:	2100      	movs	r1, #0
 8018b80:	69b8      	ldr	r0, [r7, #24]
 8018b82:	f7fe ff0f 	bl	80179a4 <pxGetNetworkBufferWithDescriptor>
 8018b86:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 8018b88:	697b      	ldr	r3, [r7, #20]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d102      	bne.n	8018b94 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 8018b8e:	2300      	movs	r3, #0
 8018b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018b92:	e005      	b.n	8018ba0 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 8018b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d002      	beq.n	8018ba0 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 8018b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b9c:	69fa      	ldr	r2, [r7, #28]
 8018b9e:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 8018ba4:	697b      	ldr	r3, [r7, #20]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d002      	beq.n	8018bb0 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 8018baa:	697b      	ldr	r3, [r7, #20]
 8018bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bae:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8018bb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018bb2:	481d      	ldr	r0, [pc, #116]	@ (8018c28 <prvNetworkInterfaceInput+0xf8>)
 8018bb4:	f000 fd2a 	bl	801960c <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 8018bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d0bd      	beq.n	8018b3a <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8018bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f7f1 f8c6 	bl	8009d58 <eConsiderFrameForProcessing>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	2b01      	cmp	r3, #1
 8018bd0:	d002      	beq.n	8018bd8 <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8018bd2:	2301      	movs	r3, #1
 8018bd4:	623b      	str	r3, [r7, #32]
 8018bd6:	e01c      	b.n	8018c12 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 8018bd8:	2301      	movs	r3, #1
 8018bda:	703b      	strb	r3, [r7, #0]
 8018bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bde:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8018be0:	4b13      	ldr	r3, [pc, #76]	@ (8018c30 <prvNetworkInterfaceInput+0x100>)
 8018be2:	681a      	ldr	r2, [r3, #0]
 8018be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018be6:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 8018be8:	4b11      	ldr	r3, [pc, #68]	@ (8018c30 <prvNetworkInterfaceInput+0x100>)
 8018bea:	681a      	ldr	r2, [r3, #0]
 8018bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bf0:	4619      	mov	r1, r3
 8018bf2:	4610      	mov	r0, r2
 8018bf4:	f7f5 fa78 	bl	800e0e8 <FreeRTOS_MatchingEndpoint>
 8018bf8:	4602      	mov	r2, r0
 8018bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bfc:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8018bfe:	463b      	mov	r3, r7
 8018c00:	2100      	movs	r1, #0
 8018c02:	4618      	mov	r0, r3
 8018c04:	f7f1 f854 	bl	8009cb0 <xSendEventStructToIPTask>
 8018c08:	4603      	mov	r3, r0
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d101      	bne.n	8018c12 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8018c0e:	2301      	movs	r3, #1
 8018c10:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8018c12:	6a3b      	ldr	r3, [r7, #32]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d090      	beq.n	8018b3a <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 8018c18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c1a:	f7fe ff2b 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
    {
 8018c1e:	e78c      	b.n	8018b3a <prvNetworkInterfaceInput+0xa>
}
 8018c20:	4618      	mov	r0, r3
 8018c22:	3730      	adds	r7, #48	@ 0x30
 8018c24:	46bd      	mov	sp, r7
 8018c26:	bd80      	pop	{r7, pc}
 8018c28:	2000247c 	.word	0x2000247c
 8018c2c:	08027da0 	.word	0x08027da0
 8018c30:	20002524 	.word	0x20002524

08018c34 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b086      	sub	sp, #24
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	60f8      	str	r0, [r7, #12]
 8018c3c:	60b9      	str	r1, [r7, #8]
 8018c3e:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018c40:	f04f 33ff 	mov.w	r3, #4294967295
 8018c44:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	68ba      	ldr	r2, [r7, #8]
 8018c4a:	68f9      	ldr	r1, [r7, #12]
 8018c4c:	4806      	ldr	r0, [pc, #24]	@ (8018c68 <ETH_PHY_IO_ReadReg+0x34>)
 8018c4e:	f000 fe75 	bl	801993c <HAL_ETH_ReadPHYRegister>
 8018c52:	4603      	mov	r3, r0
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d101      	bne.n	8018c5c <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 8018c58:	2300      	movs	r3, #0
 8018c5a:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018c5c:	697b      	ldr	r3, [r7, #20]
}
 8018c5e:	4618      	mov	r0, r3
 8018c60:	3718      	adds	r7, #24
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bd80      	pop	{r7, pc}
 8018c66:	bf00      	nop
 8018c68:	2000247c 	.word	0x2000247c

08018c6c <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b086      	sub	sp, #24
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	60f8      	str	r0, [r7, #12]
 8018c74:	60b9      	str	r1, [r7, #8]
 8018c76:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018c78:	f04f 33ff 	mov.w	r3, #4294967295
 8018c7c:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	68ba      	ldr	r2, [r7, #8]
 8018c82:	68f9      	ldr	r1, [r7, #12]
 8018c84:	4806      	ldr	r0, [pc, #24]	@ (8018ca0 <ETH_PHY_IO_WriteReg+0x34>)
 8018c86:	f000 fead 	bl	80199e4 <HAL_ETH_WritePHYRegister>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d101      	bne.n	8018c94 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 8018c90:	2300      	movs	r3, #0
 8018c92:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018c94:	697b      	ldr	r3, [r7, #20]
}
 8018c96:	4618      	mov	r0, r3
 8018c98:	3718      	adds	r7, #24
 8018c9a:	46bd      	mov	sp, r7
 8018c9c:	bd80      	pop	{r7, pc}
 8018c9e:	bf00      	nop
 8018ca0:	2000247c 	.word	0x2000247c

08018ca4 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 8018ca8:	4802      	ldr	r0, [pc, #8]	@ (8018cb4 <ETH_IRQHandler+0x10>)
 8018caa:	f000 fd27 	bl	80196fc <HAL_ETH_IRQHandler>
}
 8018cae:	bf00      	nop
 8018cb0:	bd80      	pop	{r7, pc}
 8018cb2:	bf00      	nop
 8018cb4:	2000247c 	.word	0x2000247c

08018cb8 <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b084      	sub	sp, #16
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 8018cc4:	4b10      	ldr	r3, [pc, #64]	@ (8018d08 <prvSetFlagsAndNotify+0x50>)
 8018cc6:	681a      	ldr	r2, [r3, #0]
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	4313      	orrs	r3, r2
 8018ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8018d08 <prvSetFlagsAndNotify+0x50>)
 8018cce:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8018cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8018d0c <prvSetFlagsAndNotify+0x54>)
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d012      	beq.n	8018cfe <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8018cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8018d0c <prvSetFlagsAndNotify+0x54>)
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	f107 020c 	add.w	r2, r7, #12
 8018ce0:	2100      	movs	r1, #0
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	f7ed fab4 	bl	8006250 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d007      	beq.n	8018cfe <prvSetFlagsAndNotify+0x46>
 8018cee:	4b08      	ldr	r3, [pc, #32]	@ (8018d10 <prvSetFlagsAndNotify+0x58>)
 8018cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018cf4:	601a      	str	r2, [r3, #0]
 8018cf6:	f3bf 8f4f 	dsb	sy
 8018cfa:	f3bf 8f6f 	isb	sy
    }
}
 8018cfe:	bf00      	nop
 8018d00:	3710      	adds	r7, #16
 8018d02:	46bd      	mov	sp, r7
 8018d04:	bd80      	pop	{r7, pc}
 8018d06:	bf00      	nop
 8018d08:	2000246c 	.word	0x2000246c
 8018d0c:	20002528 	.word	0x20002528
 8018d10:	e000ed04 	.word	0xe000ed04

08018d14 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b082      	sub	sp, #8
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8018d1c:	2002      	movs	r0, #2
 8018d1e:	f7ff ffcb 	bl	8018cb8 <prvSetFlagsAndNotify>
}
 8018d22:	bf00      	nop
 8018d24:	3708      	adds	r7, #8
 8018d26:	46bd      	mov	sp, r7
 8018d28:	bd80      	pop	{r7, pc}

08018d2a <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018d2a:	b580      	push	{r7, lr}
 8018d2c:	b082      	sub	sp, #8
 8018d2e:	af00      	add	r7, sp, #0
 8018d30:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8018d32:	2001      	movs	r0, #1
 8018d34:	f7ff ffc0 	bl	8018cb8 <prvSetFlagsAndNotify>
}
 8018d38:	bf00      	nop
 8018d3a:	3708      	adds	r7, #8
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd80      	pop	{r7, pc}

08018d40 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b082      	sub	sp, #8
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 8018d48:	2004      	movs	r0, #4
 8018d4a:	f7ff ffb5 	bl	8018cb8 <prvSetFlagsAndNotify>
}
 8018d4e:	bf00      	nop
 8018d50:	3708      	adds	r7, #8
 8018d52:	46bd      	mov	sp, r7
 8018d54:	bd80      	pop	{r7, pc}
	...

08018d58 <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 8018d58:	b480      	push	{r7}
 8018d5a:	b085      	sub	sp, #20
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8018d60:	4b15      	ldr	r3, [pc, #84]	@ (8018db8 <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8018d62:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018d64:	2300      	movs	r3, #0
 8018d66:	60bb      	str	r3, [r7, #8]
 8018d68:	e01c      	b.n	8018da4 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 8018d6a:	68ba      	ldr	r2, [r7, #8]
 8018d6c:	4613      	mov	r3, r2
 8018d6e:	00db      	lsls	r3, r3, #3
 8018d70:	1a9b      	subs	r3, r3, r2
 8018d72:	00db      	lsls	r3, r3, #3
 8018d74:	461a      	mov	r2, r3
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	4413      	add	r3, r2
 8018d7a:	68fa      	ldr	r2, [r7, #12]
 8018d7c:	320a      	adds	r2, #10
 8018d7e:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 8018d80:	68ba      	ldr	r2, [r7, #8]
 8018d82:	4613      	mov	r3, r2
 8018d84:	00db      	lsls	r3, r3, #3
 8018d86:	1a9b      	subs	r3, r3, r2
 8018d88:	00db      	lsls	r3, r3, #3
 8018d8a:	461a      	mov	r2, r3
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	4413      	add	r3, r2
 8018d90:	461a      	mov	r2, r3
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8018d9c:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018d9e:	68bb      	ldr	r3, [r7, #8]
 8018da0:	3301      	adds	r3, #1
 8018da2:	60bb      	str	r3, [r7, #8]
 8018da4:	68bb      	ldr	r3, [r7, #8]
 8018da6:	2b3f      	cmp	r3, #63	@ 0x3f
 8018da8:	d9df      	bls.n	8018d6a <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 8018daa:	bf00      	nop
 8018dac:	bf00      	nop
 8018dae:	3714      	adds	r7, #20
 8018db0:	46bd      	mov	sp, r7
 8018db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db6:	4770      	bx	lr
 8018db8:	240400c0 	.word	0x240400c0

08018dbc <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	b082      	sub	sp, #8
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	6078      	str	r0, [r7, #4]
 8018dc4:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 8018dc6:	f7ed fcfb 	bl	80067c0 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	681a      	ldr	r2, [r3, #0]
 8018dce:	683b      	ldr	r3, [r7, #0]
 8018dd0:	43db      	mvns	r3, r3
 8018dd2:	401a      	ands	r2, r3
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 8018dd8:	f7ed fd1e 	bl	8006818 <vPortExitCritical>
}
 8018ddc:	bf00      	nop
 8018dde:	3708      	adds	r7, #8
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}

08018de4 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8018de4:	b480      	push	{r7}
 8018de6:	b087      	sub	sp, #28
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8018dec:	2300      	movs	r3, #0
 8018dee:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	3330      	adds	r3, #48	@ 0x30
 8018df4:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018df6:	2300      	movs	r3, #0
 8018df8:	617b      	str	r3, [r7, #20]
 8018dfa:	e00e      	b.n	8018e1a <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	697a      	ldr	r2, [r7, #20]
 8018e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8018e04:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 8018e06:	68bb      	ldr	r3, [r7, #8]
 8018e08:	68db      	ldr	r3, [r3, #12]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	da02      	bge.n	8018e14 <uxGetOwnCount+0x30>
            {
                xCount++;
 8018e0e:	693b      	ldr	r3, [r7, #16]
 8018e10:	3301      	adds	r3, #1
 8018e12:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018e14:	697b      	ldr	r3, [r7, #20]
 8018e16:	3301      	adds	r3, #1
 8018e18:	617b      	str	r3, [r7, #20]
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	2b03      	cmp	r3, #3
 8018e1e:	d9ed      	bls.n	8018dfc <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8018e20:	693b      	ldr	r3, [r7, #16]
    }
 8018e22:	4618      	mov	r0, r3
 8018e24:	371c      	adds	r7, #28
 8018e26:	46bd      	mov	sp, r7
 8018e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2c:	4770      	bx	lr
	...

08018e30 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b088      	sub	sp, #32
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 8018e38:	2364      	movs	r3, #100	@ 0x64
 8018e3a:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8018e40:	2304      	movs	r3, #4
 8018e42:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8018e44:	2300      	movs	r3, #0
 8018e46:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 8018e48:	f7f1 ffb8 	bl	800adbc <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8018e4c:	4b43      	ldr	r3, [pc, #268]	@ (8018f5c <prvEMACHandlerTask+0x12c>)
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	4618      	mov	r0, r3
 8018e52:	f7eb f96d 	bl	8004130 <uxQueueMessagesWaiting>
 8018e56:	4603      	mov	r3, r0
 8018e58:	f1c3 0304 	rsb	r3, r3, #4
 8018e5c:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8018e5e:	69fa      	ldr	r2, [r7, #28]
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	429a      	cmp	r2, r3
 8018e64:	d206      	bcs.n	8018e74 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 8018e6a:	2204      	movs	r2, #4
 8018e6c:	69f9      	ldr	r1, [r7, #28]
 8018e6e:	483c      	ldr	r0, [pc, #240]	@ (8018f60 <prvEMACHandlerTask+0x130>)
 8018e70:	f009 fca8 	bl	80227c4 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8018e74:	483b      	ldr	r0, [pc, #236]	@ (8018f64 <prvEMACHandlerTask+0x134>)
 8018e76:	f7ff ffb5 	bl	8018de4 <uxGetOwnCount>
 8018e7a:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 8018e7c:	69ba      	ldr	r2, [r7, #24]
 8018e7e:	68bb      	ldr	r3, [r7, #8]
 8018e80:	429a      	cmp	r2, r3
 8018e82:	d906      	bls.n	8018e92 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 8018e84:	68bb      	ldr	r3, [r7, #8]
 8018e86:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 8018e88:	2204      	movs	r2, #4
 8018e8a:	69b9      	ldr	r1, [r7, #24]
 8018e8c:	4836      	ldr	r0, [pc, #216]	@ (8018f68 <prvEMACHandlerTask+0x138>)
 8018e8e:	f009 fc99 	bl	80227c4 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8018e92:	693a      	ldr	r2, [r7, #16]
 8018e94:	2100      	movs	r1, #0
 8018e96:	2000      	movs	r0, #0
 8018e98:	f7ec fe6a 	bl	8005b70 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8018e9c:	4b33      	ldr	r3, [pc, #204]	@ (8018f6c <prvEMACHandlerTask+0x13c>)
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	f003 0301 	and.w	r3, r3, #1
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d006      	beq.n	8018eb6 <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 8018ea8:	2101      	movs	r1, #1
 8018eaa:	4830      	ldr	r0, [pc, #192]	@ (8018f6c <prvEMACHandlerTask+0x13c>)
 8018eac:	f7ff ff86 	bl	8018dbc <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8018eb0:	f7ff fe3e 	bl	8018b30 <prvNetworkInterfaceInput>
 8018eb4:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 8018eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8018f6c <prvEMACHandlerTask+0x13c>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	f003 0302 	and.w	r3, r3, #2
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d017      	beq.n	8018ef2 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8018ec2:	2102      	movs	r1, #2
 8018ec4:	4829      	ldr	r0, [pc, #164]	@ (8018f6c <prvEMACHandlerTask+0x13c>)
 8018ec6:	f7ff ff79 	bl	8018dbc <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 8018eca:	4b29      	ldr	r3, [pc, #164]	@ (8018f70 <prvEMACHandlerTask+0x140>)
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	f242 7110 	movw	r1, #10000	@ 0x2710
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	f7eb f83e 	bl	8003f54 <xQueueSemaphoreTake>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d009      	beq.n	8018ef2 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018ede:	4821      	ldr	r0, [pc, #132]	@ (8018f64 <prvEMACHandlerTask+0x134>)
 8018ee0:	f001 fb04 	bl	801a4ec <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8018ee4:	4b22      	ldr	r3, [pc, #136]	@ (8018f70 <prvEMACHandlerTask+0x140>)
 8018ee6:	6818      	ldr	r0, [r3, #0]
 8018ee8:	2300      	movs	r3, #0
 8018eea:	2200      	movs	r2, #0
 8018eec:	2100      	movs	r1, #0
 8018eee:	f7ea fe79 	bl	8003be4 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8018ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8018f6c <prvEMACHandlerTask+0x13c>)
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	f003 0304 	and.w	r3, r3, #4
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d00f      	beq.n	8018f1e <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8018efe:	2104      	movs	r1, #4
 8018f00:	481a      	ldr	r0, [pc, #104]	@ (8018f6c <prvEMACHandlerTask+0x13c>)
 8018f02:	f7ff ff5b 	bl	8018dbc <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 8018f06:	4b17      	ldr	r3, [pc, #92]	@ (8018f64 <prvEMACHandlerTask+0x134>)
 8018f08:	2210      	movs	r2, #16
 8018f0a:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8018f0c:	4815      	ldr	r0, [pc, #84]	@ (8018f64 <prvEMACHandlerTask+0x134>)
 8018f0e:	f000 f964 	bl	80191da <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8018f12:	f7ff fe0d 	bl	8018b30 <prvNetworkInterfaceInput>
 8018f16:	4602      	mov	r2, r0
 8018f18:	697b      	ldr	r3, [r7, #20]
 8018f1a:	4413      	add	r3, r2
 8018f1c:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 8018f1e:	6979      	ldr	r1, [r7, #20]
 8018f20:	4814      	ldr	r0, [pc, #80]	@ (8018f74 <prvEMACHandlerTask+0x144>)
 8018f22:	f7ff fa25 	bl	8018370 <xPhyCheckLinkStatus>
 8018f26:	4603      	mov	r3, r0
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d08b      	beq.n	8018e44 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8018f2c:	4b12      	ldr	r3, [pc, #72]	@ (8018f78 <prvEMACHandlerTask+0x148>)
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	4618      	mov	r0, r3
 8018f32:	f7ff fccf 	bl	80188d4 <xSTM32H_GetPhyLinkStatus>
 8018f36:	4603      	mov	r3, r0
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d10b      	bne.n	8018f54 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018f3c:	4809      	ldr	r0, [pc, #36]	@ (8018f64 <prvEMACHandlerTask+0x134>)
 8018f3e:	f000 f9d1 	bl	80192e4 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018f42:	2260      	movs	r2, #96	@ 0x60
 8018f44:	2100      	movs	r1, #0
 8018f46:	480d      	ldr	r0, [pc, #52]	@ (8018f7c <prvEMACHandlerTask+0x14c>)
 8018f48:	f009 ff65 	bl	8022e16 <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018f4c:	4805      	ldr	r0, [pc, #20]	@ (8018f64 <prvEMACHandlerTask+0x134>)
 8018f4e:	f001 facd 	bl	801a4ec <ETH_Clear_Tx_Descriptors>
 8018f52:	e777      	b.n	8018e44 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8018f54:	2000      	movs	r0, #0
 8018f56:	f7ff fd91 	bl	8018a7c <prvEthernetUpdateConfig>
    {
 8018f5a:	e773      	b.n	8018e44 <prvEMACHandlerTask+0x14>
 8018f5c:	20002474 	.word	0x20002474
 8018f60:	08027dc4 	.word	0x08027dc4
 8018f64:	2000247c 	.word	0x2000247c
 8018f68:	08027ddc 	.word	0x08027ddc
 8018f6c:	2000246c 	.word	0x2000246c
 8018f70:	20002478 	.word	0x20002478
 8018f74:	2000252c 	.word	0x2000252c
 8018f78:	20002524 	.word	0x20002524
 8018f7c:	24040060 	.word	0x24040060

08018f80 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8018f80:	b480      	push	{r7}
 8018f82:	b083      	sub	sp, #12
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
 8018f88:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	683a      	ldr	r2, [r7, #0]
 8018f8e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 8018f90:	bf00      	nop
 8018f92:	370c      	adds	r7, #12
 8018f94:	46bd      	mov	sp, r7
 8018f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f9a:	4770      	bx	lr

08018f9c <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	b084      	sub	sp, #16
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d101      	bne.n	8018fae <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 8018faa:	2301      	movs	r3, #1
 8018fac:	e0d4      	b.n	8019158 <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d102      	bne.n	8018fbc <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 8018fb6:	6878      	ldr	r0, [r7, #4]
 8018fb8:	f7e9 fa46 	bl	8002448 <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	2223      	movs	r2, #35	@ 0x23
 8018fc0:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018fc2:	4b67      	ldr	r3, [pc, #412]	@ (8019160 <HAL_ETH_Init+0x1c4>)
 8018fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8018fc8:	4a65      	ldr	r2, [pc, #404]	@ (8019160 <HAL_ETH_Init+0x1c4>)
 8018fca:	f043 0302 	orr.w	r3, r3, #2
 8018fce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8018fd2:	4b63      	ldr	r3, [pc, #396]	@ (8019160 <HAL_ETH_Init+0x1c4>)
 8018fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8018fd8:	f003 0302 	and.w	r3, r3, #2
 8018fdc:	60bb      	str	r3, [r7, #8]
 8018fde:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	7a1b      	ldrb	r3, [r3, #8]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d103      	bne.n	8018ff0 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 8018fe8:	2000      	movs	r0, #0
 8018fea:	f001 fc17 	bl	801a81c <HAL_SYSCFG_ETHInterfaceSelect>
 8018fee:	e003      	b.n	8018ff8 <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8018ff0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018ff4:	f001 fc12 	bl	801a81c <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	687a      	ldr	r2, [r7, #4]
 8019004:	6812      	ldr	r2, [r2, #0]
 8019006:	f043 0301 	orr.w	r3, r3, #1
 801900a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801900e:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 8019010:	f001 fbc8 	bl	801a7a4 <HAL_GetTick>
 8019014:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 8019016:	e010      	b.n	801903a <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 8019018:	f001 fbc4 	bl	801a7a4 <HAL_GetTick>
 801901c:	4602      	mov	r2, r0
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	1ad3      	subs	r3, r2, r3
 8019022:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8019026:	d908      	bls.n	801903a <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	2204      	movs	r2, #4
 801902c:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 801902e:	21e0      	movs	r1, #224	@ 0xe0
 8019030:	6878      	ldr	r0, [r7, #4]
 8019032:	f7ff ffa5 	bl	8018f80 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 8019036:	2301      	movs	r3, #1
 8019038:	e08e      	b.n	8019158 <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	f003 0301 	and.w	r3, r3, #1
 8019048:	2b00      	cmp	r3, #0
 801904a:	d1e5      	bne.n	8019018 <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	f001 f94b 	bl	801a2e8 <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8019052:	f004 ff49 	bl	801dee8 <HAL_RCC_GetHCLKFreq>
 8019056:	4603      	mov	r3, r0
 8019058:	4a42      	ldr	r2, [pc, #264]	@ (8019164 <HAL_ETH_Init+0x1c8>)
 801905a:	fba2 2303 	umull	r2, r3, r2, r3
 801905e:	0c9a      	lsrs	r2, r3, #18
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	3a01      	subs	r2, #1
 8019066:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 801906a:	6878      	ldr	r0, [r7, #4]
 801906c:	f001 f89e 	bl	801a1ac <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019078:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801907c:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8019080:	687a      	ldr	r2, [r7, #4]
 8019082:	6812      	ldr	r2, [r2, #0]
 8019084:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8019088:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801908c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	695b      	ldr	r3, [r3, #20]
 8019094:	f003 0303 	and.w	r3, r3, #3
 8019098:	2b00      	cmp	r3, #0
 801909a:	d008      	beq.n	80190ae <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	2201      	movs	r2, #1
 80190a0:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 80190a2:	21e0      	movs	r1, #224	@ 0xe0
 80190a4:	6878      	ldr	r0, [r7, #4]
 80190a6:	f7ff ff6b 	bl	8018f80 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 80190aa:	2301      	movs	r3, #1
 80190ac:	e054      	b.n	8019158 <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80190b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80190ba:	4b2b      	ldr	r3, [pc, #172]	@ (8019168 <HAL_ETH_Init+0x1cc>)
 80190bc:	4013      	ands	r3, r2
 80190be:	687a      	ldr	r2, [r7, #4]
 80190c0:	6952      	ldr	r2, [r2, #20]
 80190c2:	0051      	lsls	r1, r2, #1
 80190c4:	687a      	ldr	r2, [r7, #4]
 80190c6:	6812      	ldr	r2, [r2, #0]
 80190c8:	430b      	orrs	r3, r1
 80190ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80190ce:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 80190d2:	6878      	ldr	r0, [r7, #4]
 80190d4:	f001 f960 	bl	801a398 <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 80190d8:	6878      	ldr	r0, [r7, #4]
 80190da:	f001 f9a9 	bl	801a430 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	685b      	ldr	r3, [r3, #4]
 80190e2:	3305      	adds	r3, #5
 80190e4:	781b      	ldrb	r3, [r3, #0]
 80190e6:	021a      	lsls	r2, r3, #8
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	685b      	ldr	r3, [r3, #4]
 80190ec:	3304      	adds	r3, #4
 80190ee:	781b      	ldrb	r3, [r3, #0]
 80190f0:	4619      	mov	r1, r3
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	430a      	orrs	r2, r1
 80190f8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	685b      	ldr	r3, [r3, #4]
 8019100:	3303      	adds	r3, #3
 8019102:	781b      	ldrb	r3, [r3, #0]
 8019104:	061a      	lsls	r2, r3, #24
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	685b      	ldr	r3, [r3, #4]
 801910a:	3302      	adds	r3, #2
 801910c:	781b      	ldrb	r3, [r3, #0]
 801910e:	041b      	lsls	r3, r3, #16
 8019110:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	685b      	ldr	r3, [r3, #4]
 8019116:	3301      	adds	r3, #1
 8019118:	781b      	ldrb	r3, [r3, #0]
 801911a:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 801911c:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	685b      	ldr	r3, [r3, #4]
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 801912a:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 801912c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	2200      	movs	r2, #0
 8019134:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	2210      	movs	r2, #16
 801913a:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	2210      	movs	r2, #16
 8019140:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	4a09      	ldr	r2, [pc, #36]	@ (801916c <HAL_ETH_Init+0x1d0>)
 8019148:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	4a07      	ldr	r2, [pc, #28]	@ (8019170 <HAL_ETH_Init+0x1d4>)
 8019152:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 8019156:	2300      	movs	r3, #0
        }
 8019158:	4618      	mov	r0, r3
 801915a:	3710      	adds	r7, #16
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}
 8019160:	58024400 	.word	0x58024400
 8019164:	431bde83 	.word	0x431bde83
 8019168:	ffff8001 	.word	0xffff8001
 801916c:	0c020060 	.word	0x0c020060
 8019170:	0c20c000 	.word	0x0c20c000

08019174 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8019174:	b480      	push	{r7}
 8019176:	b087      	sub	sp, #28
 8019178:	af00      	add	r7, sp, #0
 801917a:	60f8      	str	r0, [r7, #12]
 801917c:	60b9      	str	r1, [r7, #8]
 801917e:	607a      	str	r2, [r7, #4]
 8019180:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	68ba      	ldr	r2, [r7, #8]
 8019186:	320c      	adds	r2, #12
 8019188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801918c:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d002      	beq.n	801919a <HAL_ETH_DescAssignMemory+0x26>
 8019194:	68bb      	ldr	r3, [r7, #8]
 8019196:	2b03      	cmp	r3, #3
 8019198:	d904      	bls.n	80191a4 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	2201      	movs	r2, #1
 801919e:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 80191a0:	2301      	movs	r3, #1
 80191a2:	e014      	b.n	80191ce <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 80191a4:	687a      	ldr	r2, [r7, #4]
 80191a6:	697b      	ldr	r3, [r7, #20]
 80191a8:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 80191aa:	687a      	ldr	r2, [r7, #4]
 80191ac:	697b      	ldr	r3, [r7, #20]
 80191ae:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 80191b0:	697b      	ldr	r3, [r7, #20]
 80191b2:	68db      	ldr	r3, [r3, #12]
 80191b4:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80191b8:	697b      	ldr	r3, [r7, #20]
 80191ba:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 80191bc:	697b      	ldr	r3, [r7, #20]
 80191be:	68db      	ldr	r3, [r3, #12]
 80191c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80191c4:	697b      	ldr	r3, [r7, #20]
 80191c6:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 80191cc:	2300      	movs	r3, #0
        }
 80191ce:	4618      	mov	r0, r3
 80191d0:	371c      	adds	r7, #28
 80191d2:	46bd      	mov	sp, r7
 80191d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d8:	4770      	bx	lr

080191da <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 80191da:	b480      	push	{r7}
 80191dc:	b085      	sub	sp, #20
 80191de:	af00      	add	r7, sp, #0
 80191e0:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80191e6:	2b10      	cmp	r3, #16
 80191e8:	d175      	bne.n	80192d6 <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	2223      	movs	r2, #35	@ 0x23
 80191ee:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 80191f0:	2300      	movs	r3, #0
 80191f2:	60fb      	str	r3, [r7, #12]
 80191f4:	e00e      	b.n	8019214 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	68fa      	ldr	r2, [r7, #12]
 80191fa:	320c      	adds	r2, #12
 80191fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019200:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8019202:	68bb      	ldr	r3, [r7, #8]
 8019204:	68db      	ldr	r3, [r3, #12]
 8019206:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801920a:	68bb      	ldr	r3, [r7, #8]
 801920c:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	3301      	adds	r3, #1
 8019212:	60fb      	str	r3, [r7, #12]
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	2b03      	cmp	r3, #3
 8019218:	d9ed      	bls.n	80191f6 <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	2201      	movs	r2, #1
 801921e:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	681a      	ldr	r2, [r3, #0]
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	f042 0202 	orr.w	r2, r2, #2
 801922e:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	681a      	ldr	r2, [r3, #0]
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	f042 0201 	orr.w	r2, r2, #1
 801923e:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	f042 0201 	orr.w	r2, r2, #1
 8019250:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801925c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8019260:	687a      	ldr	r2, [r7, #4]
 8019262:	6812      	ldr	r2, [r2, #0]
 8019264:	f043 0301 	orr.w	r3, r3, #1
 8019268:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801926c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019278:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801927c:	687a      	ldr	r2, [r7, #4]
 801927e:	6812      	ldr	r2, [r2, #0]
 8019280:	f043 0301 	orr.w	r3, r3, #1
 8019284:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019288:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019294:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019298:	687a      	ldr	r2, [r7, #4]
 801929a:	6812      	ldr	r2, [r2, #0]
 801929c:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80192a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192a4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80192b0:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681a      	ldr	r2, [r3, #0]
 80192b8:	f24d 0341 	movw	r3, #53313	@ 0xd041
 80192bc:	430b      	orrs	r3, r1
 80192be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192c2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	2210      	movs	r2, #16
 80192ca:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	2222      	movs	r2, #34	@ 0x22
 80192d0:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 80192d2:	2300      	movs	r3, #0
 80192d4:	e000      	b.n	80192d8 <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 80192d6:	2301      	movs	r3, #1
            }
        }
 80192d8:	4618      	mov	r0, r3
 80192da:	3714      	adds	r7, #20
 80192dc:	46bd      	mov	sp, r7
 80192de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e2:	4770      	bx	lr

080192e4 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 80192e4:	b480      	push	{r7}
 80192e6:	b085      	sub	sp, #20
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d066      	beq.n	80193c2 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	2223      	movs	r2, #35	@ 0x23
 80192f8:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019302:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	681a      	ldr	r2, [r3, #0]
 801930a:	4b31      	ldr	r3, [pc, #196]	@ (80193d0 <HAL_ETH_Stop_IT+0xec>)
 801930c:	400b      	ands	r3, r1
 801930e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019312:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801931e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8019322:	687a      	ldr	r2, [r7, #4]
 8019324:	6812      	ldr	r2, [r2, #0]
 8019326:	f023 0301 	bic.w	r3, r3, #1
 801932a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801932e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801933a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801933e:	687a      	ldr	r2, [r7, #4]
 8019340:	6812      	ldr	r2, [r2, #0]
 8019342:	f023 0301 	bic.w	r3, r3, #1
 8019346:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801934a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	681a      	ldr	r2, [r3, #0]
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	f022 0201 	bic.w	r2, r2, #1
 801935c:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	f042 0201 	orr.w	r2, r2, #1
 801936e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	681a      	ldr	r2, [r3, #0]
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	f022 0202 	bic.w	r2, r2, #2
 8019380:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8019382:	2300      	movs	r3, #0
 8019384:	60fb      	str	r3, [r7, #12]
 8019386:	e00e      	b.n	80193a6 <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	68fa      	ldr	r2, [r7, #12]
 801938c:	320c      	adds	r2, #12
 801938e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019392:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8019394:	68bb      	ldr	r3, [r7, #8]
 8019396:	68db      	ldr	r3, [r3, #12]
 8019398:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801939c:	68bb      	ldr	r3, [r7, #8]
 801939e:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	3301      	adds	r3, #1
 80193a4:	60fb      	str	r3, [r7, #12]
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	2b03      	cmp	r3, #3
 80193aa:	d9ed      	bls.n	8019388 <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	2200      	movs	r2, #0
 80193b0:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	2210      	movs	r2, #16
 80193b6:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	2210      	movs	r2, #16
 80193bc:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 80193be:	2300      	movs	r3, #0
 80193c0:	e000      	b.n	80193c4 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 80193c2:	2301      	movs	r3, #1
            }
        }
 80193c4:	4618      	mov	r0, r3
 80193c6:	3714      	adds	r7, #20
 80193c8:	46bd      	mov	sp, r7
 80193ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ce:	4770      	bx	lr
 80193d0:	ffff2fbe 	.word	0xffff2fbe

080193d4 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b082      	sub	sp, #8
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
 80193dc:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 80193de:	683b      	ldr	r3, [r7, #0]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d107      	bne.n	80193f4 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80193e8:	f043 0201 	orr.w	r2, r3, #1
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 80193f0:	2301      	movs	r3, #1
 80193f2:	e039      	b.n	8019468 <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80193f8:	2b10      	cmp	r3, #16
 80193fa:	d134      	bne.n	8019466 <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 80193fc:	2201      	movs	r2, #1
 80193fe:	6839      	ldr	r1, [r7, #0]
 8019400:	6878      	ldr	r0, [r7, #4]
 8019402:	f001 f8c1 	bl	801a588 <ETH_Prepare_Tx_Descriptors>
 8019406:	4603      	mov	r3, r0
 8019408:	2b00      	cmp	r3, #0
 801940a:	d007      	beq.n	801941c <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019410:	f043 0202 	orr.w	r2, r3, #2
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 8019418:	2301      	movs	r3, #1
 801941a:	e025      	b.n	8019468 <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019420:	1c5a      	adds	r2, r3, #1
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	629a      	str	r2, [r3, #40]	@ 0x28
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801942a:	2b03      	cmp	r3, #3
 801942c:	d904      	bls.n	8019438 <HAL_ETH_Transmit_IT+0x64>
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019432:	1f1a      	subs	r2, r3, #4
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	681a      	ldr	r2, [r3, #0]
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	3106      	adds	r1, #6
 8019444:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019448:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801944c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 8019450:	f3bf 8f4f 	dsb	sy
}
 8019454:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801945e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 8019462:	2300      	movs	r3, #0
 8019464:	e000      	b.n	8019468 <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 8019466:	2301      	movs	r3, #1
            }
        }
 8019468:	4618      	mov	r0, r3
 801946a:	3708      	adds	r7, #8
 801946c:	46bd      	mov	sp, r7
 801946e:	bd80      	pop	{r7, pc}

08019470 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8019470:	b580      	push	{r7, lr}
 8019472:	b08a      	sub	sp, #40	@ 0x28
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	3330      	adds	r3, #48	@ 0x30
 801947c:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 801947e:	69bb      	ldr	r3, [r7, #24]
 8019480:	691b      	ldr	r3, [r3, #16]
 8019482:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019484:	69bb      	ldr	r3, [r7, #24]
 8019486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801948c:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 801948e:	2300      	movs	r3, #0
 8019490:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8019492:	2300      	movs	r3, #0
 8019494:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 8019496:	2300      	movs	r3, #0
 8019498:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801949a:	e055      	b.n	8019548 <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 801949c:	697b      	ldr	r3, [r7, #20]
 801949e:	68db      	ldr	r3, [r3, #12]
 80194a0:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 80194a2:	6a3b      	ldr	r3, [r7, #32]
 80194a4:	3301      	adds	r3, #1
 80194a6:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d006      	beq.n	80194c0 <HAL_ETH_IsRxDataAvailable+0x50>
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d001      	beq.n	80194c0 <HAL_ETH_IsRxDataAvailable+0x50>
 80194bc:	2301      	movs	r3, #1
 80194be:	e000      	b.n	80194c2 <HAL_ETH_IsRxDataAvailable+0x52>
 80194c0:	2300      	movs	r3, #0
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d104      	bne.n	80194d0 <HAL_ETH_IsRxDataAvailable+0x60>
 80194c6:	f240 4195 	movw	r1, #1173	@ 0x495
 80194ca:	482b      	ldr	r0, [pc, #172]	@ (8019578 <HAL_ETH_IsRxDataAvailable+0x108>)
 80194cc:	f7e8 fa9c 	bl	8001a08 <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d036      	beq.n	8019548 <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 80194da:	693b      	ldr	r3, [r7, #16]
 80194dc:	3301      	adds	r3, #1
 80194de:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 80194e0:	693b      	ldr	r3, [r7, #16]
 80194e2:	2b01      	cmp	r3, #1
 80194e4:	d101      	bne.n	80194ea <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 80194e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194e8:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 80194ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194ec:	3301      	adds	r3, #1
 80194ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80194f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194f2:	2b03      	cmp	r3, #3
 80194f4:	d902      	bls.n	80194fc <HAL_ETH_IsRxDataAvailable+0x8c>
 80194f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194f8:	3b04      	subs	r3, #4
 80194fa:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80194fc:	69bb      	ldr	r3, [r7, #24]
 80194fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019504:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	68db      	ldr	r3, [r3, #12]
 801950a:	2b00      	cmp	r3, #0
 801950c:	db11      	blt.n	8019532 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 801950e:	697b      	ldr	r3, [r7, #20]
 8019510:	68db      	ldr	r3, [r3, #12]
 8019512:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8019516:	2b00      	cmp	r3, #0
 8019518:	d00b      	beq.n	8019532 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 801951a:	69bb      	ldr	r3, [r7, #24]
 801951c:	2201      	movs	r2, #1
 801951e:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8019520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019522:	3301      	adds	r3, #1
 8019524:	627b      	str	r3, [r7, #36]	@ 0x24
 8019526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019528:	2b03      	cmp	r3, #3
 801952a:	d902      	bls.n	8019532 <HAL_ETH_IsRxDataAvailable+0xc2>
 801952c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801952e:	3b04      	subs	r3, #4
 8019530:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 8019532:	69bb      	ldr	r3, [r7, #24]
 8019534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019536:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 8019538:	69bb      	ldr	r3, [r7, #24]
 801953a:	69fa      	ldr	r2, [r7, #28]
 801953c:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 801953e:	69bb      	ldr	r3, [r7, #24]
 8019540:	693a      	ldr	r2, [r7, #16]
 8019542:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 8019544:	2301      	movs	r3, #1
 8019546:	e012      	b.n	801956e <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8019548:	697b      	ldr	r3, [r7, #20]
 801954a:	68db      	ldr	r3, [r3, #12]
 801954c:	2b00      	cmp	r3, #0
 801954e:	db02      	blt.n	8019556 <HAL_ETH_IsRxDataAvailable+0xe6>
 8019550:	6a3b      	ldr	r3, [r7, #32]
 8019552:	2b03      	cmp	r3, #3
 8019554:	d9a2      	bls.n	801949c <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 8019556:	693b      	ldr	r3, [r7, #16]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d004      	beq.n	8019566 <HAL_ETH_IsRxDataAvailable+0xf6>
 801955c:	f240 41db 	movw	r1, #1243	@ 0x4db
 8019560:	4805      	ldr	r0, [pc, #20]	@ (8019578 <HAL_ETH_IsRxDataAvailable+0x108>)
 8019562:	f7e8 fa51 	bl	8001a08 <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 8019566:	69bb      	ldr	r3, [r7, #24]
 8019568:	2200      	movs	r2, #0
 801956a:	619a      	str	r2, [r3, #24]

            return 0;
 801956c:	2300      	movs	r3, #0
        }
 801956e:	4618      	mov	r0, r3
 8019570:	3728      	adds	r7, #40	@ 0x28
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}
 8019576:	bf00      	nop
 8019578:	08027df4 	.word	0x08027df4

0801957c <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 801957c:	b580      	push	{r7, lr}
 801957e:	b086      	sub	sp, #24
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
 8019584:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	3330      	adds	r3, #48	@ 0x30
 801958a:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d104      	bne.n	801959c <HAL_ETH_GetRxData+0x20>
 8019592:	f240 511f 	movw	r1, #1311	@ 0x51f
 8019596:	481c      	ldr	r0, [pc, #112]	@ (8019608 <HAL_ETH_GetRxData+0x8c>)
 8019598:	f7e8 fa36 	bl	8001a08 <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 801959c:	6878      	ldr	r0, [r7, #4]
 801959e:	f7ff ff67 	bl	8019470 <HAL_ETH_IsRxDataAvailable>
 80195a2:	4603      	mov	r3, r0
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d101      	bne.n	80195ac <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 80195a8:	2300      	movs	r3, #0
 80195aa:	e028      	b.n	80195fe <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 80195ac:	697b      	ldr	r3, [r7, #20]
 80195ae:	695b      	ldr	r3, [r3, #20]
 80195b0:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80195b2:	697b      	ldr	r3, [r7, #20]
 80195b4:	693a      	ldr	r2, [r7, #16]
 80195b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80195ba:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 80195bc:	697b      	ldr	r3, [r7, #20]
 80195be:	699b      	ldr	r3, [r3, #24]
 80195c0:	2b01      	cmp	r3, #1
 80195c2:	d004      	beq.n	80195ce <HAL_ETH_GetRxData+0x52>
 80195c4:	f240 512a 	movw	r1, #1322	@ 0x52a
 80195c8:	480f      	ldr	r0, [pc, #60]	@ (8019608 <HAL_ETH_GetRxData+0x8c>)
 80195ca:	f7e8 fa1d 	bl	8001a08 <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	68db      	ldr	r3, [r3, #12]
 80195d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80195d6:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	691b      	ldr	r3, [r3, #16]
 80195dc:	461a      	mov	r2, r3
 80195de:	683b      	ldr	r3, [r7, #0]
 80195e0:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 80195e2:	683b      	ldr	r3, [r7, #0]
 80195e4:	68ba      	ldr	r2, [r7, #8]
 80195e6:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	695b      	ldr	r3, [r3, #20]
 80195ec:	68ba      	ldr	r2, [r7, #8]
 80195ee:	429a      	cmp	r2, r3
 80195f0:	d904      	bls.n	80195fc <HAL_ETH_GetRxData+0x80>
 80195f2:	f240 5133 	movw	r1, #1331	@ 0x533
 80195f6:	4804      	ldr	r0, [pc, #16]	@ (8019608 <HAL_ETH_GetRxData+0x8c>)
 80195f8:	f7e8 fa06 	bl	8001a08 <vAssertCalled>

            return packet_length;
 80195fc:	68bb      	ldr	r3, [r7, #8]
        }
 80195fe:	4618      	mov	r0, r3
 8019600:	3718      	adds	r7, #24
 8019602:	46bd      	mov	sp, r7
 8019604:	bd80      	pop	{r7, pc}
 8019606:	bf00      	nop
 8019608:	08027df4 	.word	0x08027df4

0801960c <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 801960c:	b480      	push	{r7}
 801960e:	b08b      	sub	sp, #44	@ 0x2c
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
 8019614:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	3330      	adds	r3, #48	@ 0x30
 801961a:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	695b      	ldr	r3, [r3, #20]
 8019620:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801962a:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	699b      	ldr	r3, [r3, #24]
 8019630:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	699b      	ldr	r3, [r3, #24]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d101      	bne.n	801963e <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 801963a:	2301      	movs	r3, #1
 801963c:	e057      	b.n	80196ee <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	69db      	ldr	r3, [r3, #28]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d002      	beq.n	801964c <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 8019646:	69fb      	ldr	r3, [r7, #28]
 8019648:	3301      	adds	r3, #1
 801964a:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 801964c:	2300      	movs	r3, #0
 801964e:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 8019650:	683b      	ldr	r3, [r7, #0]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d005      	beq.n	8019662 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 8019656:	683b      	ldr	r3, [r7, #0]
 8019658:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 801965a:	683a      	ldr	r2, [r7, #0]
 801965c:	6a3b      	ldr	r3, [r7, #32]
 801965e:	611a      	str	r2, [r3, #16]
 8019660:	e002      	b.n	8019668 <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8019662:	6a3b      	ldr	r3, [r7, #32]
 8019664:	691b      	ldr	r3, [r3, #16]
 8019666:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 8019668:	693a      	ldr	r2, [r7, #16]
 801966a:	6a3b      	ldr	r3, [r7, #32]
 801966c:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 801966e:	6a3b      	ldr	r3, [r7, #32]
 8019670:	68db      	ldr	r3, [r3, #12]
 8019672:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8019674:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8019678:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	6a1b      	ldr	r3, [r3, #32]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d003      	beq.n	801968a <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8019682:	697b      	ldr	r3, [r7, #20]
 8019684:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8019688:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 801968a:	697b      	ldr	r3, [r7, #20]
 801968c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019690:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8019692:	6a3b      	ldr	r3, [r7, #32]
 8019694:	697a      	ldr	r2, [r7, #20]
 8019696:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8019698:	f3bf 8f4f 	dsb	sy
}
 801969c:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 801969e:	6a3b      	ldr	r3, [r7, #32]
 80196a0:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 80196a2:	69fb      	ldr	r3, [r7, #28]
 80196a4:	3b01      	subs	r3, #1
 80196a6:	69ba      	ldr	r2, [r7, #24]
 80196a8:	429a      	cmp	r2, r3
 80196aa:	d211      	bcs.n	80196d0 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 80196ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196ae:	3301      	adds	r3, #1
 80196b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80196b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196b4:	2b03      	cmp	r3, #3
 80196b6:	d902      	bls.n	80196be <HAL_ETH_BuildRxDescriptors+0xb2>
 80196b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196ba:	3b04      	subs	r3, #4
 80196bc:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80196c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80196c6:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 80196c8:	69bb      	ldr	r3, [r7, #24]
 80196ca:	3301      	adds	r3, #1
 80196cc:	61bb      	str	r3, [r7, #24]
            {
 80196ce:	e7bf      	b.n	8019650 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 80196d0:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	681a      	ldr	r2, [r3, #0]
 80196d6:	6a3b      	ldr	r3, [r7, #32]
 80196d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80196dc:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	2200      	movs	r2, #0
 80196e4:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	2200      	movs	r2, #0
 80196ea:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 80196ec:	2300      	movs	r3, #0
        }
 80196ee:	4618      	mov	r0, r3
 80196f0:	372c      	adds	r7, #44	@ 0x2c
 80196f2:	46bd      	mov	sp, r7
 80196f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f8:	4770      	bx	lr
	...

080196fc <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b082      	sub	sp, #8
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801970c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019714:	2b40      	cmp	r3, #64	@ 0x40
 8019716:	d115      	bne.n	8019744 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019720:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019728:	2b40      	cmp	r3, #64	@ 0x40
 801972a:	d10b      	bne.n	8019744 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 801972c:	6878      	ldr	r0, [r7, #4]
 801972e:	f7ff fafc 	bl	8018d2a <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801973a:	461a      	mov	r2, r3
 801973c:	f248 0340 	movw	r3, #32832	@ 0x8040
 8019740:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801974c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019750:	f003 0301 	and.w	r3, r3, #1
 8019754:	2b01      	cmp	r3, #1
 8019756:	d115      	bne.n	8019784 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019760:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019764:	f003 0301 	and.w	r3, r3, #1
 8019768:	2b01      	cmp	r3, #1
 801976a:	d10b      	bne.n	8019784 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 801976c:	6878      	ldr	r0, [r7, #4]
 801976e:	f7ff fad1 	bl	8018d14 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801977a:	461a      	mov	r2, r3
 801977c:	f248 0301 	movw	r3, #32769	@ 0x8001
 8019780:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801978c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019794:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019798:	d14f      	bne.n	801983a <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197a2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80197a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80197aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80197ae:	d144      	bne.n	801983a <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80197b4:	f043 0208 	orr.w	r2, r3, #8
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197c4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80197c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80197cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80197d0:	d11d      	bne.n	801980e <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197da:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80197de:	f241 1302 	movw	r3, #4354	@ 0x1102
 80197e2:	4013      	ands	r3, r2
 80197e4:	687a      	ldr	r2, [r7, #4]
 80197e6:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80197f4:	687a      	ldr	r2, [r7, #4]
 80197f6:	6812      	ldr	r2, [r2, #0]
 80197f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80197fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019800:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 8019804:	21e0      	movs	r1, #224	@ 0xe0
 8019806:	6878      	ldr	r0, [r7, #4]
 8019808:	f7ff fbba 	bl	8018f80 <set_error_state>
 801980c:	e012      	b.n	8019834 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019816:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801981a:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801982a:	461a      	mov	r2, r3
 801982c:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8019830:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 8019834:	6878      	ldr	r0, [r7, #4]
 8019836:	f7ff fa83 	bl	8018d40 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019842:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8019846:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801984a:	d10f      	bne.n	801986c <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8019858:	21e0      	movs	r1, #224	@ 0xe0
 801985a:	6878      	ldr	r0, [r7, #4]
 801985c:	f7ff fb90 	bl	8018f80 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 8019860:	6878      	ldr	r0, [r7, #4]
 8019862:	f000 f843 	bl	80198ec <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	2200      	movs	r2, #0
 801986a:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019874:	f003 0310 	and.w	r3, r3, #16
 8019878:	2b10      	cmp	r3, #16
 801987a:	d10d      	bne.n	8019898 <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019884:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 801988c:	6878      	ldr	r0, [r7, #4]
 801988e:	f000 f837 	bl	8019900 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	2200      	movs	r2, #0
 8019896:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80198a0:	f003 0320 	and.w	r3, r3, #32
 80198a4:	2b20      	cmp	r3, #32
 80198a6:	d10d      	bne.n	80198c4 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80198b0:	f003 020f 	and.w	r2, r3, #15
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 80198b8:	6878      	ldr	r0, [r7, #4]
 80198ba:	f000 f82b 	bl	8019914 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	2200      	movs	r2, #0
 80198c2:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 80198c4:	4b08      	ldr	r3, [pc, #32]	@ (80198e8 <HAL_ETH_IRQHandler+0x1ec>)
 80198c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80198c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d006      	beq.n	80198de <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 80198d0:	4b05      	ldr	r3, [pc, #20]	@ (80198e8 <HAL_ETH_IRQHandler+0x1ec>)
 80198d2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80198d6:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	f000 f825 	bl	8019928 <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 80198de:	bf00      	nop
 80198e0:	3708      	adds	r7, #8
 80198e2:	46bd      	mov	sp, r7
 80198e4:	bd80      	pop	{r7, pc}
 80198e6:	bf00      	nop
 80198e8:	58000080 	.word	0x58000080

080198ec <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 80198ec:	b480      	push	{r7}
 80198ee:	b083      	sub	sp, #12
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 80198f4:	bf00      	nop
 80198f6:	370c      	adds	r7, #12
 80198f8:	46bd      	mov	sp, r7
 80198fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198fe:	4770      	bx	lr

08019900 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8019900:	b480      	push	{r7}
 8019902:	b083      	sub	sp, #12
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 8019908:	bf00      	nop
 801990a:	370c      	adds	r7, #12
 801990c:	46bd      	mov	sp, r7
 801990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019912:	4770      	bx	lr

08019914 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 8019914:	b480      	push	{r7}
 8019916:	b083      	sub	sp, #12
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 801991c:	bf00      	nop
 801991e:	370c      	adds	r7, #12
 8019920:	46bd      	mov	sp, r7
 8019922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019926:	4770      	bx	lr

08019928 <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 8019928:	b480      	push	{r7}
 801992a:	b083      	sub	sp, #12
 801992c:	af00      	add	r7, sp, #0
 801992e:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8019930:	bf00      	nop
 8019932:	370c      	adds	r7, #12
 8019934:	46bd      	mov	sp, r7
 8019936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993a:	4770      	bx	lr

0801993c <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 801993c:	b580      	push	{r7, lr}
 801993e:	b086      	sub	sp, #24
 8019940:	af00      	add	r7, sp, #0
 8019942:	60f8      	str	r0, [r7, #12]
 8019944:	60b9      	str	r1, [r7, #8]
 8019946:	607a      	str	r2, [r7, #4]
 8019948:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019952:	f003 0301 	and.w	r3, r3, #1
 8019956:	2b00      	cmp	r3, #0
 8019958:	d001      	beq.n	801995e <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 801995a:	2301      	movs	r3, #1
 801995c:	e03e      	b.n	80199dc <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019966:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8019968:	697b      	ldr	r3, [r7, #20]
 801996a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 801996e:	68bb      	ldr	r3, [r7, #8]
 8019970:	055b      	lsls	r3, r3, #21
 8019972:	4313      	orrs	r3, r2
 8019974:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8019976:	697b      	ldr	r3, [r7, #20]
 8019978:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	041b      	lsls	r3, r3, #16
 8019980:	4313      	orrs	r3, r2
 8019982:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8019984:	697b      	ldr	r3, [r7, #20]
 8019986:	f043 030c 	orr.w	r3, r3, #12
 801998a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 801998c:	697b      	ldr	r3, [r7, #20]
 801998e:	f043 0301 	orr.w	r3, r3, #1
 8019992:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	697a      	ldr	r2, [r7, #20]
 801999a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 801999e:	f000 ff01 	bl	801a7a4 <HAL_GetTick>
 80199a2:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80199a4:	e009      	b.n	80199ba <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 80199a6:	f000 fefd 	bl	801a7a4 <HAL_GetTick>
 80199aa:	4602      	mov	r2, r0
 80199ac:	693b      	ldr	r3, [r7, #16]
 80199ae:	1ad3      	subs	r3, r2, r3
 80199b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80199b4:	d901      	bls.n	80199ba <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 80199b6:	2301      	movs	r3, #1
 80199b8:	e010      	b.n	80199dc <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80199c2:	f003 0301 	and.w	r3, r3, #1
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d1ed      	bne.n	80199a6 <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80199d2:	b29b      	uxth	r3, r3
 80199d4:	461a      	mov	r2, r3
 80199d6:	683b      	ldr	r3, [r7, #0]
 80199d8:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 80199da:	2300      	movs	r3, #0
        }
 80199dc:	4618      	mov	r0, r3
 80199de:	3718      	adds	r7, #24
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bd80      	pop	{r7, pc}

080199e4 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b086      	sub	sp, #24
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	60f8      	str	r0, [r7, #12]
 80199ec:	60b9      	str	r1, [r7, #8]
 80199ee:	607a      	str	r2, [r7, #4]
 80199f0:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80199fa:	f003 0301 	and.w	r3, r3, #1
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d001      	beq.n	8019a06 <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8019a02:	2301      	movs	r3, #1
 8019a04:	e03c      	b.n	8019a80 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019a0e:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8019a10:	697b      	ldr	r3, [r7, #20]
 8019a12:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8019a16:	68bb      	ldr	r3, [r7, #8]
 8019a18:	055b      	lsls	r3, r3, #21
 8019a1a:	4313      	orrs	r3, r2
 8019a1c:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8019a1e:	697b      	ldr	r3, [r7, #20]
 8019a20:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	041b      	lsls	r3, r3, #16
 8019a28:	4313      	orrs	r3, r2
 8019a2a:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8019a2c:	697b      	ldr	r3, [r7, #20]
 8019a2e:	f023 030c 	bic.w	r3, r3, #12
 8019a32:	f043 0304 	orr.w	r3, r3, #4
 8019a36:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8019a38:	697b      	ldr	r3, [r7, #20]
 8019a3a:	f043 0301 	orr.w	r3, r3, #1
 8019a3e:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	b29a      	uxth	r2, r3
 8019a44:	4b10      	ldr	r3, [pc, #64]	@ (8019a88 <HAL_ETH_WritePHYRegister+0xa4>)
 8019a46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 8019a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8019a88 <HAL_ETH_WritePHYRegister+0xa4>)
 8019a4c:	697b      	ldr	r3, [r7, #20]
 8019a4e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8019a52:	f000 fea7 	bl	801a7a4 <HAL_GetTick>
 8019a56:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019a58:	e009      	b.n	8019a6e <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8019a5a:	f000 fea3 	bl	801a7a4 <HAL_GetTick>
 8019a5e:	4602      	mov	r2, r0
 8019a60:	693b      	ldr	r3, [r7, #16]
 8019a62:	1ad3      	subs	r3, r2, r3
 8019a64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019a68:	d901      	bls.n	8019a6e <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 8019a6a:	2301      	movs	r3, #1
 8019a6c:	e008      	b.n	8019a80 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019a76:	f003 0301 	and.w	r3, r3, #1
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d1ed      	bne.n	8019a5a <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 8019a7e:	2300      	movs	r3, #0
        }
 8019a80:	4618      	mov	r0, r3
 8019a82:	3718      	adds	r7, #24
 8019a84:	46bd      	mov	sp, r7
 8019a86:	bd80      	pop	{r7, pc}
 8019a88:	40028000 	.word	0x40028000

08019a8c <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019a8c:	b480      	push	{r7}
 8019a8e:	b083      	sub	sp, #12
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	6078      	str	r0, [r7, #4]
 8019a94:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019a96:	683b      	ldr	r3, [r7, #0]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d101      	bne.n	8019aa0 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019a9c:	2301      	movs	r3, #1
 8019a9e:	e1c3      	b.n	8019e28 <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	f003 020c 	and.w	r2, r3, #12
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	f003 0310 	and.w	r3, r3, #16
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	bf14      	ite	ne
 8019abc:	2301      	movne	r3, #1
 8019abe:	2300      	moveq	r3, #0
 8019ac0:	b2db      	uxtb	r3, r3
 8019ac2:	461a      	mov	r2, r3
 8019ac4:	683b      	ldr	r3, [r7, #0]
 8019ac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019ad4:	683b      	ldr	r3, [r7, #0]
 8019ad6:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	bf0c      	ite	eq
 8019ae6:	2301      	moveq	r3, #1
 8019ae8:	2300      	movne	r3, #0
 8019aea:	b2db      	uxtb	r3, r3
 8019aec:	461a      	mov	r2, r3
 8019aee:	683b      	ldr	r3, [r7, #0]
 8019af0:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	bf14      	ite	ne
 8019b02:	2301      	movne	r3, #1
 8019b04:	2300      	moveq	r3, #0
 8019b06:	b2db      	uxtb	r3, r3
 8019b08:	461a      	mov	r2, r3
 8019b0a:	683b      	ldr	r3, [r7, #0]
 8019b0c:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	bf0c      	ite	eq
 8019b1c:	2301      	moveq	r3, #1
 8019b1e:	2300      	movne	r3, #0
 8019b20:	b2db      	uxtb	r3, r3
 8019b22:	461a      	mov	r2, r3
 8019b24:	683b      	ldr	r3, [r7, #0]
 8019b26:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	bf14      	ite	ne
 8019b36:	2301      	movne	r3, #1
 8019b38:	2300      	moveq	r3, #0
 8019b3a:	b2db      	uxtb	r3, r3
 8019b3c:	461a      	mov	r2, r3
 8019b3e:	683b      	ldr	r3, [r7, #0]
 8019b40:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	bf14      	ite	ne
 8019b50:	2301      	movne	r3, #1
 8019b52:	2300      	moveq	r3, #0
 8019b54:	b2db      	uxtb	r3, r3
 8019b56:	461a      	mov	r2, r3
 8019b58:	683b      	ldr	r3, [r7, #0]
 8019b5a:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8019b66:	683b      	ldr	r3, [r7, #0]
 8019b68:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8019b74:	683b      	ldr	r3, [r7, #0]
 8019b76:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	bf14      	ite	ne
 8019b86:	2301      	movne	r3, #1
 8019b88:	2300      	moveq	r3, #0
 8019b8a:	b2db      	uxtb	r3, r3
 8019b8c:	461a      	mov	r2, r3
 8019b8e:	683b      	ldr	r3, [r7, #0]
 8019b90:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	bf0c      	ite	eq
 8019ba0:	2301      	moveq	r3, #1
 8019ba2:	2300      	movne	r3, #0
 8019ba4:	b2db      	uxtb	r3, r3
 8019ba6:	461a      	mov	r2, r3
 8019ba8:	683b      	ldr	r3, [r7, #0]
 8019baa:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	bf0c      	ite	eq
 8019bba:	2301      	moveq	r3, #1
 8019bbc:	2300      	movne	r3, #0
 8019bbe:	b2db      	uxtb	r3, r3
 8019bc0:	461a      	mov	r2, r3
 8019bc2:	683b      	ldr	r3, [r7, #0]
 8019bc4:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	bf14      	ite	ne
 8019bd4:	2301      	movne	r3, #1
 8019bd6:	2300      	moveq	r3, #0
 8019bd8:	b2db      	uxtb	r3, r3
 8019bda:	461a      	mov	r2, r3
 8019bdc:	683b      	ldr	r3, [r7, #0]
 8019bde:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	bf14      	ite	ne
 8019bee:	2301      	movne	r3, #1
 8019bf0:	2300      	moveq	r3, #0
 8019bf2:	b2db      	uxtb	r3, r3
 8019bf4:	461a      	mov	r2, r3
 8019bf6:	683b      	ldr	r3, [r7, #0]
 8019bf8:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	bf14      	ite	ne
 8019c08:	2301      	movne	r3, #1
 8019c0a:	2300      	moveq	r3, #0
 8019c0c:	b2db      	uxtb	r3, r3
 8019c0e:	461a      	mov	r2, r3
 8019c10:	683b      	ldr	r3, [r7, #0]
 8019c12:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	bf14      	ite	ne
 8019c22:	2301      	movne	r3, #1
 8019c24:	2300      	moveq	r3, #0
 8019c26:	b2db      	uxtb	r3, r3
 8019c28:	461a      	mov	r2, r3
 8019c2a:	683b      	ldr	r3, [r7, #0]
 8019c2c:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	bf14      	ite	ne
 8019c4a:	2301      	movne	r3, #1
 8019c4c:	2300      	moveq	r3, #0
 8019c4e:	b2db      	uxtb	r3, r3
 8019c50:	461a      	mov	r2, r3
 8019c52:	683b      	ldr	r3, [r7, #0]
 8019c54:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8019c60:	683b      	ldr	r3, [r7, #0]
 8019c62:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	685b      	ldr	r3, [r3, #4]
 8019c6a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8019c6e:	683b      	ldr	r3, [r7, #0]
 8019c70:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	685b      	ldr	r3, [r3, #4]
 8019c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	bf0c      	ite	eq
 8019c80:	2301      	moveq	r3, #1
 8019c82:	2300      	movne	r3, #0
 8019c84:	b2db      	uxtb	r3, r3
 8019c86:	461a      	mov	r2, r3
 8019c88:	683b      	ldr	r3, [r7, #0]
 8019c8a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	685b      	ldr	r3, [r3, #4]
 8019c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	bf14      	ite	ne
 8019c9c:	2301      	movne	r3, #1
 8019c9e:	2300      	moveq	r3, #0
 8019ca0:	b2db      	uxtb	r3, r3
 8019ca2:	461a      	mov	r2, r3
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	685b      	ldr	r3, [r3, #4]
 8019cb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	bf14      	ite	ne
 8019cb8:	2301      	movne	r3, #1
 8019cba:	2300      	moveq	r3, #0
 8019cbc:	b2db      	uxtb	r3, r3
 8019cbe:	461a      	mov	r2, r3
 8019cc0:	683b      	ldr	r3, [r7, #0]
 8019cc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	685b      	ldr	r3, [r3, #4]
 8019ccc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	bf14      	ite	ne
 8019cd4:	2301      	movne	r3, #1
 8019cd6:	2300      	moveq	r3, #0
 8019cd8:	b2db      	uxtb	r3, r3
 8019cda:	461a      	mov	r2, r3
 8019cdc:	683b      	ldr	r3, [r7, #0]
 8019cde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	685b      	ldr	r3, [r3, #4]
 8019ce8:	0e5b      	lsrs	r3, r3, #25
 8019cea:	f003 021f 	and.w	r2, r3, #31
 8019cee:	683b      	ldr	r3, [r7, #0]
 8019cf0:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	68db      	ldr	r3, [r3, #12]
 8019cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	bf14      	ite	ne
 8019d00:	2301      	movne	r3, #1
 8019d02:	2300      	moveq	r3, #0
 8019d04:	b2db      	uxtb	r3, r3
 8019d06:	461a      	mov	r2, r3
 8019d08:	683b      	ldr	r3, [r7, #0]
 8019d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	68db      	ldr	r3, [r3, #12]
 8019d14:	f003 020f 	and.w	r2, r3, #15
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d22:	f003 0302 	and.w	r3, r3, #2
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	bf14      	ite	ne
 8019d2a:	2301      	movne	r3, #1
 8019d2c:	2300      	moveq	r3, #0
 8019d2e:	b2db      	uxtb	r3, r3
 8019d30:	461a      	mov	r2, r3
 8019d32:	683b      	ldr	r3, [r7, #0]
 8019d34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	bf0c      	ite	eq
 8019d46:	2301      	moveq	r3, #1
 8019d48:	2300      	movne	r3, #0
 8019d4a:	b2db      	uxtb	r3, r3
 8019d4c:	461a      	mov	r2, r3
 8019d4e:	683b      	ldr	r3, [r7, #0]
 8019d50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d5a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8019d5e:	683b      	ldr	r3, [r7, #0]
 8019d60:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d68:	0c1b      	lsrs	r3, r3, #16
 8019d6a:	b29a      	uxth	r2, r3
 8019d6c:	683b      	ldr	r3, [r7, #0]
 8019d6e:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019d78:	f003 0301 	and.w	r3, r3, #1
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	bf14      	ite	ne
 8019d80:	2301      	movne	r3, #1
 8019d82:	2300      	moveq	r3, #0
 8019d84:	b2db      	uxtb	r3, r3
 8019d86:	461a      	mov	r2, r3
 8019d88:	683b      	ldr	r3, [r7, #0]
 8019d8a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019d96:	f003 0302 	and.w	r3, r3, #2
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	bf14      	ite	ne
 8019d9e:	2301      	movne	r3, #1
 8019da0:	2300      	moveq	r3, #0
 8019da2:	b2db      	uxtb	r3, r3
 8019da4:	461a      	mov	r2, r3
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019db4:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019dc4:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8019dc8:	683b      	ldr	r3, [r7, #0]
 8019dca:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019dd4:	f003 0308 	and.w	r3, r3, #8
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	bf14      	ite	ne
 8019ddc:	2301      	movne	r3, #1
 8019dde:	2300      	moveq	r3, #0
 8019de0:	b2db      	uxtb	r3, r3
 8019de2:	461a      	mov	r2, r3
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019df2:	f003 0310 	and.w	r3, r3, #16
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	bf14      	ite	ne
 8019dfa:	2301      	movne	r3, #1
 8019dfc:	2300      	moveq	r3, #0
 8019dfe:	b2db      	uxtb	r3, r3
 8019e00:	461a      	mov	r2, r3
 8019e02:	683b      	ldr	r3, [r7, #0]
 8019e04:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	bf0c      	ite	eq
 8019e18:	2301      	moveq	r3, #1
 8019e1a:	2300      	movne	r3, #0
 8019e1c:	b2db      	uxtb	r3, r3
 8019e1e:	461a      	mov	r2, r3
 8019e20:	683b      	ldr	r3, [r7, #0]
 8019e22:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 8019e26:	2300      	movs	r3, #0
        }
 8019e28:	4618      	mov	r0, r3
 8019e2a:	370c      	adds	r7, #12
 8019e2c:	46bd      	mov	sp, r7
 8019e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e32:	4770      	bx	lr

08019e34 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019e34:	b580      	push	{r7, lr}
 8019e36:	b082      	sub	sp, #8
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	6078      	str	r0, [r7, #4]
 8019e3c:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019e3e:	683b      	ldr	r3, [r7, #0]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d101      	bne.n	8019e48 <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019e44:	2301      	movs	r3, #1
 8019e46:	e00a      	b.n	8019e5e <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019e4c:	2b10      	cmp	r3, #16
 8019e4e:	d105      	bne.n	8019e5c <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8019e50:	6839      	ldr	r1, [r7, #0]
 8019e52:	6878      	ldr	r0, [r7, #4]
 8019e54:	f000 f808 	bl	8019e68 <ETH_SetMACConfig>

                return HAL_OK;
 8019e58:	2300      	movs	r3, #0
 8019e5a:	e000      	b.n	8019e5e <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8019e5c:	2301      	movs	r3, #1
            }
        }
 8019e5e:	4618      	mov	r0, r3
 8019e60:	3708      	adds	r7, #8
 8019e62:	46bd      	mov	sp, r7
 8019e64:	bd80      	pop	{r7, pc}
	...

08019e68 <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 8019e68:	b480      	push	{r7}
 8019e6a:	b085      	sub	sp, #20
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	6078      	str	r0, [r7, #4]
 8019e70:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 8019e72:	683b      	ldr	r3, [r7, #0]
 8019e74:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 8019e76:	683b      	ldr	r3, [r7, #0]
 8019e78:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 8019e7a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8019e7c:	683b      	ldr	r3, [r7, #0]
 8019e7e:	791b      	ldrb	r3, [r3, #4]
 8019e80:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 8019e82:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019e84:	683b      	ldr	r3, [r7, #0]
 8019e86:	7b1b      	ldrb	r3, [r3, #12]
 8019e88:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8019e8a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8019e8c:	683b      	ldr	r3, [r7, #0]
 8019e8e:	7b5b      	ldrb	r3, [r3, #13]
 8019e90:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019e92:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019e94:	683b      	ldr	r3, [r7, #0]
 8019e96:	7b9b      	ldrb	r3, [r3, #14]
 8019e98:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8019e9a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019e9c:	683b      	ldr	r3, [r7, #0]
 8019e9e:	7bdb      	ldrb	r3, [r3, #15]
 8019ea0:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019ea2:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8019ea4:	683a      	ldr	r2, [r7, #0]
 8019ea6:	7c12      	ldrb	r2, [r2, #16]
 8019ea8:	2a00      	cmp	r2, #0
 8019eaa:	d102      	bne.n	8019eb2 <ETH_SetMACConfig+0x4a>
 8019eac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8019eb0:	e000      	b.n	8019eb4 <ETH_SetMACConfig+0x4c>
 8019eb2:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019eb4:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8019eb6:	683a      	ldr	r2, [r7, #0]
 8019eb8:	7c52      	ldrb	r2, [r2, #17]
 8019eba:	2a00      	cmp	r2, #0
 8019ebc:	d102      	bne.n	8019ec4 <ETH_SetMACConfig+0x5c>
 8019ebe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8019ec2:	e000      	b.n	8019ec6 <ETH_SetMACConfig+0x5e>
 8019ec4:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8019ec6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8019ec8:	683b      	ldr	r3, [r7, #0]
 8019eca:	7c9b      	ldrb	r3, [r3, #18]
 8019ecc:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8019ece:	431a      	orrs	r2, r3
                          macconf->Speed |
 8019ed0:	683b      	ldr	r3, [r7, #0]
 8019ed2:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8019ed4:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 8019ed6:	683b      	ldr	r3, [r7, #0]
 8019ed8:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 8019eda:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8019edc:	683b      	ldr	r3, [r7, #0]
 8019ede:	7f1b      	ldrb	r3, [r3, #28]
 8019ee0:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 8019ee2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019ee4:	683b      	ldr	r3, [r7, #0]
 8019ee6:	7f5b      	ldrb	r3, [r3, #29]
 8019ee8:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8019eea:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019eec:	683a      	ldr	r2, [r7, #0]
 8019eee:	7f92      	ldrb	r2, [r2, #30]
 8019ef0:	2a00      	cmp	r2, #0
 8019ef2:	d102      	bne.n	8019efa <ETH_SetMACConfig+0x92>
 8019ef4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019ef8:	e000      	b.n	8019efc <ETH_SetMACConfig+0x94>
 8019efa:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019efc:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8019efe:	683b      	ldr	r3, [r7, #0]
 8019f00:	7fdb      	ldrb	r3, [r3, #31]
 8019f02:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019f04:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8019f06:	683a      	ldr	r2, [r7, #0]
 8019f08:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019f0c:	2a00      	cmp	r2, #0
 8019f0e:	d102      	bne.n	8019f16 <ETH_SetMACConfig+0xae>
 8019f10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019f14:	e000      	b.n	8019f18 <ETH_SetMACConfig+0xb0>
 8019f16:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8019f18:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8019f1a:	683b      	ldr	r3, [r7, #0]
 8019f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8019f1e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8019f20:	683b      	ldr	r3, [r7, #0]
 8019f22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019f26:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 8019f28:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 8019f2a:	683b      	ldr	r3, [r7, #0]
 8019f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8019f2e:	4313      	orrs	r3, r2
 8019f30:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	681a      	ldr	r2, [r3, #0]
 8019f38:	4b56      	ldr	r3, [pc, #344]	@ (801a094 <ETH_SetMACConfig+0x22c>)
 8019f3a:	4013      	ands	r3, r2
 8019f3c:	687a      	ldr	r2, [r7, #4]
 8019f3e:	6812      	ldr	r2, [r2, #0]
 8019f40:	68f9      	ldr	r1, [r7, #12]
 8019f42:	430b      	orrs	r3, r1
 8019f44:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019f46:	683b      	ldr	r3, [r7, #0]
 8019f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f4a:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019f4c:	683b      	ldr	r3, [r7, #0]
 8019f4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019f52:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019f54:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8019f56:	683b      	ldr	r3, [r7, #0]
 8019f58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019f5c:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019f5e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019f60:	683b      	ldr	r3, [r7, #0]
 8019f62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019f66:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8019f68:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 8019f6a:	683a      	ldr	r2, [r7, #0]
 8019f6c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8019f70:	2a00      	cmp	r2, #0
 8019f72:	d102      	bne.n	8019f7a <ETH_SetMACConfig+0x112>
 8019f74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8019f78:	e000      	b.n	8019f7c <ETH_SetMACConfig+0x114>
 8019f7a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019f7c:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 8019f7e:	683b      	ldr	r3, [r7, #0]
 8019f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019f82:	4313      	orrs	r3, r2
 8019f84:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	685a      	ldr	r2, [r3, #4]
 8019f8c:	4b42      	ldr	r3, [pc, #264]	@ (801a098 <ETH_SetMACConfig+0x230>)
 8019f8e:	4013      	ands	r3, r2
 8019f90:	687a      	ldr	r2, [r7, #4]
 8019f92:	6812      	ldr	r2, [r2, #0]
 8019f94:	68f9      	ldr	r1, [r7, #12]
 8019f96:	430b      	orrs	r3, r1
 8019f98:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 8019f9a:	683b      	ldr	r3, [r7, #0]
 8019f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019fa0:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 8019fa2:	683b      	ldr	r3, [r7, #0]
 8019fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 8019fa6:	4313      	orrs	r3, r2
 8019fa8:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	68da      	ldr	r2, [r3, #12]
 8019fb0:	4b3a      	ldr	r3, [pc, #232]	@ (801a09c <ETH_SetMACConfig+0x234>)
 8019fb2:	4013      	ands	r3, r2
 8019fb4:	687a      	ldr	r2, [r7, #4]
 8019fb6:	6812      	ldr	r2, [r2, #0]
 8019fb8:	68f9      	ldr	r1, [r7, #12]
 8019fba:	430b      	orrs	r3, r1
 8019fbc:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8019fc4:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 8019fc6:	683b      	ldr	r3, [r7, #0]
 8019fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019fca:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 8019fcc:	683a      	ldr	r2, [r7, #0]
 8019fce:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8019fd2:	2a00      	cmp	r2, #0
 8019fd4:	d101      	bne.n	8019fda <ETH_SetMACConfig+0x172>
 8019fd6:	2280      	movs	r2, #128	@ 0x80
 8019fd8:	e000      	b.n	8019fdc <ETH_SetMACConfig+0x174>
 8019fda:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 8019fdc:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019fe2:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019fe4:	4313      	orrs	r3, r2
 8019fe6:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019fee:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8019ff2:	4013      	ands	r3, r2
 8019ff4:	687a      	ldr	r2, [r7, #4]
 8019ff6:	6812      	ldr	r2, [r2, #0]
 8019ff8:	68f9      	ldr	r1, [r7, #12]
 8019ffa:	430b      	orrs	r3, r1
 8019ffc:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019ffe:	683b      	ldr	r3, [r7, #0]
 801a000:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a004:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 801a006:	683b      	ldr	r3, [r7, #0]
 801a008:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801a00c:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 801a00e:	4313      	orrs	r3, r2
 801a010:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a01a:	f023 0103 	bic.w	r1, r3, #3
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	68fa      	ldr	r2, [r7, #12]
 801a024:	430a      	orrs	r2, r1
 801a026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 801a032:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801a036:	683b      	ldr	r3, [r7, #0]
 801a038:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	430a      	orrs	r2, r1
 801a040:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801a048:	683a      	ldr	r2, [r7, #0]
 801a04a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 801a04e:	2a00      	cmp	r2, #0
 801a050:	d101      	bne.n	801a056 <ETH_SetMACConfig+0x1ee>
 801a052:	2240      	movs	r2, #64	@ 0x40
 801a054:	e000      	b.n	801a058 <ETH_SetMACConfig+0x1f0>
 801a056:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 801a058:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 801a05a:	683b      	ldr	r3, [r7, #0]
 801a05c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 801a060:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801a062:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 801a064:	683b      	ldr	r3, [r7, #0]
 801a066:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801a06a:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 801a06c:	4313      	orrs	r3, r2
 801a06e:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801a078:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	68fa      	ldr	r2, [r7, #12]
 801a082:	430a      	orrs	r2, r1
 801a084:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 801a088:	bf00      	nop
 801a08a:	3714      	adds	r7, #20
 801a08c:	46bd      	mov	sp, r7
 801a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a092:	4770      	bx	lr
 801a094:	00048083 	.word	0x00048083
 801a098:	c0f88000 	.word	0xc0f88000
 801a09c:	fffffef0 	.word	0xfffffef0

0801a0a0 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 801a0a0:	b480      	push	{r7}
 801a0a2:	b085      	sub	sp, #20
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
 801a0a8:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a0b2:	681a      	ldr	r2, [r3, #0]
 801a0b4:	4b38      	ldr	r3, [pc, #224]	@ (801a198 <ETH_SetDMAConfig+0xf8>)
 801a0b6:	4013      	ands	r3, r2
 801a0b8:	683a      	ldr	r2, [r7, #0]
 801a0ba:	6811      	ldr	r1, [r2, #0]
 801a0bc:	687a      	ldr	r2, [r7, #4]
 801a0be:	6812      	ldr	r2, [r2, #0]
 801a0c0:	430b      	orrs	r3, r1
 801a0c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a0c6:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a0c8:	683b      	ldr	r3, [r7, #0]
 801a0ca:	791b      	ldrb	r3, [r3, #4]
 801a0cc:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 801a0ce:	683b      	ldr	r3, [r7, #0]
 801a0d0:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a0d2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 801a0d4:	683b      	ldr	r3, [r7, #0]
 801a0d6:	7b1b      	ldrb	r3, [r3, #12]
 801a0d8:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a0da:	4313      	orrs	r3, r2
 801a0dc:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a0e6:	685a      	ldr	r2, [r3, #4]
 801a0e8:	4b2c      	ldr	r3, [pc, #176]	@ (801a19c <ETH_SetDMAConfig+0xfc>)
 801a0ea:	4013      	ands	r3, r2
 801a0ec:	687a      	ldr	r2, [r7, #4]
 801a0ee:	6812      	ldr	r2, [r2, #0]
 801a0f0:	68f9      	ldr	r1, [r7, #12]
 801a0f2:	430b      	orrs	r3, r1
 801a0f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a0f8:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 801a0fa:	683b      	ldr	r3, [r7, #0]
 801a0fc:	7b5b      	ldrb	r3, [r3, #13]
 801a0fe:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 801a100:	683b      	ldr	r3, [r7, #0]
 801a102:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 801a104:	4313      	orrs	r3, r2
 801a106:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a110:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801a114:	4b22      	ldr	r3, [pc, #136]	@ (801a1a0 <ETH_SetDMAConfig+0x100>)
 801a116:	4013      	ands	r3, r2
 801a118:	687a      	ldr	r2, [r7, #4]
 801a11a:	6812      	ldr	r2, [r2, #0]
 801a11c:	68f9      	ldr	r1, [r7, #12]
 801a11e:	430b      	orrs	r3, r1
 801a120:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a124:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a128:	683b      	ldr	r3, [r7, #0]
 801a12a:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 801a12c:	683b      	ldr	r3, [r7, #0]
 801a12e:	7d1b      	ldrb	r3, [r3, #20]
 801a130:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a132:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 801a134:	683b      	ldr	r3, [r7, #0]
 801a136:	7f5b      	ldrb	r3, [r3, #29]
 801a138:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a13a:	4313      	orrs	r3, r2
 801a13c:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a146:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801a14a:	4b16      	ldr	r3, [pc, #88]	@ (801a1a4 <ETH_SetDMAConfig+0x104>)
 801a14c:	4013      	ands	r3, r2
 801a14e:	687a      	ldr	r2, [r7, #4]
 801a150:	6812      	ldr	r2, [r2, #0]
 801a152:	68f9      	ldr	r1, [r7, #12]
 801a154:	430b      	orrs	r3, r1
 801a156:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a15a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801a15e:	683b      	ldr	r3, [r7, #0]
 801a160:	7f1b      	ldrb	r3, [r3, #28]
 801a162:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 801a164:	683b      	ldr	r3, [r7, #0]
 801a166:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801a168:	4313      	orrs	r3, r2
 801a16a:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a174:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801a178:	4b0b      	ldr	r3, [pc, #44]	@ (801a1a8 <ETH_SetDMAConfig+0x108>)
 801a17a:	4013      	ands	r3, r2
 801a17c:	687a      	ldr	r2, [r7, #4]
 801a17e:	6812      	ldr	r2, [r2, #0]
 801a180:	68f9      	ldr	r1, [r7, #12]
 801a182:	430b      	orrs	r3, r1
 801a184:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a188:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 801a18c:	bf00      	nop
 801a18e:	3714      	adds	r7, #20
 801a190:	46bd      	mov	sp, r7
 801a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a196:	4770      	bx	lr
 801a198:	ffff87fd 	.word	0xffff87fd
 801a19c:	ffff2ffe 	.word	0xffff2ffe
 801a1a0:	fffec000 	.word	0xfffec000
 801a1a4:	ffc0efef 	.word	0xffc0efef
 801a1a8:	7fc0ffff 	.word	0x7fc0ffff

0801a1ac <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b0a4      	sub	sp, #144	@ 0x90
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 801a1b4:	2301      	movs	r3, #1
 801a1b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 801a1be:	2300      	movs	r3, #0
 801a1c0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 801a1ca:	2301      	movs	r3, #1
 801a1cc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 801a1d0:	2301      	movs	r3, #1
 801a1d2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 801a1d6:	2301      	movs	r3, #1
 801a1d8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 801a1dc:	2300      	movs	r3, #0
 801a1de:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 801a1e2:	2301      	movs	r3, #1
 801a1e4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801a1e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801a1ec:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 801a1fe:	2300      	movs	r3, #0
 801a200:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 801a204:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 801a208:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801a20a:	2300      	movs	r3, #0
 801a20c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 801a210:	2300      	movs	r3, #0
 801a212:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 801a214:	2301      	movs	r3, #1
 801a216:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 801a21a:	2300      	movs	r3, #0
 801a21c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 801a220:	2300      	movs	r3, #0
 801a222:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801a226:	2300      	movs	r3, #0
 801a228:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 801a22a:	2300      	movs	r3, #0
 801a22c:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 801a22e:	2300      	movs	r3, #0
 801a230:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 801a232:	2300      	movs	r3, #0
 801a234:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 801a238:	2300      	movs	r3, #0
 801a23a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 801a23e:	2301      	movs	r3, #1
 801a240:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 801a244:	2320      	movs	r3, #32
 801a246:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 801a24a:	2301      	movs	r3, #1
 801a24c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 801a250:	2300      	movs	r3, #0
 801a252:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801a256:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801a25a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 801a25c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a260:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 801a262:	2300      	movs	r3, #0
 801a264:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801a268:	2302      	movs	r3, #2
 801a26a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 801a26e:	2300      	movs	r3, #0
 801a270:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801a274:	2300      	movs	r3, #0
 801a276:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801a27a:	2300      	movs	r3, #0
 801a27c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 801a280:	2301      	movs	r3, #1
 801a282:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 801a286:	2300      	movs	r3, #0
 801a288:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 801a28a:	2301      	movs	r3, #1
 801a28c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 801a290:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a294:	4619      	mov	r1, r3
 801a296:	6878      	ldr	r0, [r7, #4]
 801a298:	f7ff fde6 	bl	8019e68 <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801a29c:	2301      	movs	r3, #1
 801a29e:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801a2a0:	2301      	movs	r3, #1
 801a2a2:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 801a2a8:	2300      	movs	r3, #0
 801a2aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801a2b6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a2ba:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 801a2bc:	2300      	movs	r3, #0
 801a2be:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801a2c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a2c4:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 801a2cc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801a2d0:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 801a2d2:	f107 0308 	add.w	r3, r7, #8
 801a2d6:	4619      	mov	r1, r3
 801a2d8:	6878      	ldr	r0, [r7, #4]
 801a2da:	f7ff fee1 	bl	801a0a0 <ETH_SetDMAConfig>
        }
 801a2de:	bf00      	nop
 801a2e0:	3790      	adds	r7, #144	@ 0x90
 801a2e2:	46bd      	mov	sp, r7
 801a2e4:	bd80      	pop	{r7, pc}
	...

0801a2e8 <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b084      	sub	sp, #16
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801a2f8:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801a300:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 801a302:	f003 fdf1 	bl	801dee8 <HAL_RCC_GetHCLKFreq>
 801a306:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 801a308:	68bb      	ldr	r3, [r7, #8]
 801a30a:	4a1e      	ldr	r2, [pc, #120]	@ (801a384 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 801a30c:	4293      	cmp	r3, r2
 801a30e:	d908      	bls.n	801a322 <ETH_MAC_MDIO_ClkConfig+0x3a>
 801a310:	68bb      	ldr	r3, [r7, #8]
 801a312:	4a1d      	ldr	r2, [pc, #116]	@ (801a388 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801a314:	4293      	cmp	r3, r2
 801a316:	d804      	bhi.n	801a322 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801a31e:	60fb      	str	r3, [r7, #12]
 801a320:	e027      	b.n	801a372 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 801a322:	68bb      	ldr	r3, [r7, #8]
 801a324:	4a18      	ldr	r2, [pc, #96]	@ (801a388 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801a326:	4293      	cmp	r3, r2
 801a328:	d908      	bls.n	801a33c <ETH_MAC_MDIO_ClkConfig+0x54>
 801a32a:	68bb      	ldr	r3, [r7, #8]
 801a32c:	4a17      	ldr	r2, [pc, #92]	@ (801a38c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 801a32e:	4293      	cmp	r3, r2
 801a330:	d204      	bcs.n	801a33c <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801a338:	60fb      	str	r3, [r7, #12]
 801a33a:	e01a      	b.n	801a372 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 801a33c:	68bb      	ldr	r3, [r7, #8]
 801a33e:	4a13      	ldr	r2, [pc, #76]	@ (801a38c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 801a340:	4293      	cmp	r3, r2
 801a342:	d303      	bcc.n	801a34c <ETH_MAC_MDIO_ClkConfig+0x64>
 801a344:	68bb      	ldr	r3, [r7, #8]
 801a346:	4a12      	ldr	r2, [pc, #72]	@ (801a390 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801a348:	4293      	cmp	r3, r2
 801a34a:	d911      	bls.n	801a370 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 801a34c:	68bb      	ldr	r3, [r7, #8]
 801a34e:	4a10      	ldr	r2, [pc, #64]	@ (801a390 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801a350:	4293      	cmp	r3, r2
 801a352:	d908      	bls.n	801a366 <ETH_MAC_MDIO_ClkConfig+0x7e>
 801a354:	68bb      	ldr	r3, [r7, #8]
 801a356:	4a0f      	ldr	r2, [pc, #60]	@ (801a394 <ETH_MAC_MDIO_ClkConfig+0xac>)
 801a358:	4293      	cmp	r3, r2
 801a35a:	d804      	bhi.n	801a366 <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a362:	60fb      	str	r3, [r7, #12]
 801a364:	e005      	b.n	801a372 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801a36c:	60fb      	str	r3, [r7, #12]
 801a36e:	e000      	b.n	801a372 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 801a370:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	68fa      	ldr	r2, [r7, #12]
 801a378:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 801a37c:	bf00      	nop
 801a37e:	3710      	adds	r7, #16
 801a380:	46bd      	mov	sp, r7
 801a382:	bd80      	pop	{r7, pc}
 801a384:	01312cff 	.word	0x01312cff
 801a388:	02160ebf 	.word	0x02160ebf
 801a38c:	03938700 	.word	0x03938700
 801a390:	05f5e0ff 	.word	0x05f5e0ff
 801a394:	08f0d17f 	.word	0x08f0d17f

0801a398 <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 801a398:	b480      	push	{r7}
 801a39a:	b085      	sub	sp, #20
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	60fb      	str	r3, [r7, #12]
 801a3a4:	e01d      	b.n	801a3e2 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	68d9      	ldr	r1, [r3, #12]
 801a3aa:	68fa      	ldr	r2, [r7, #12]
 801a3ac:	4613      	mov	r3, r2
 801a3ae:	005b      	lsls	r3, r3, #1
 801a3b0:	4413      	add	r3, r2
 801a3b2:	00db      	lsls	r3, r3, #3
 801a3b4:	440b      	add	r3, r1
 801a3b6:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 801a3b8:	68bb      	ldr	r3, [r7, #8]
 801a3ba:	2200      	movs	r2, #0
 801a3bc:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 801a3be:	68bb      	ldr	r3, [r7, #8]
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 801a3c4:	68bb      	ldr	r3, [r7, #8]
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 801a3ca:	68bb      	ldr	r3, [r7, #8]
 801a3cc:	2200      	movs	r2, #0
 801a3ce:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 801a3d0:	68b9      	ldr	r1, [r7, #8]
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	68fa      	ldr	r2, [r7, #12]
 801a3d6:	3206      	adds	r2, #6
 801a3d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	3301      	adds	r3, #1
 801a3e0:	60fb      	str	r3, [r7, #12]
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	2b03      	cmp	r3, #3
 801a3e6:	d9de      	bls.n	801a3a6 <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	2200      	movs	r2, #0
 801a3ec:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	2200      	movs	r2, #0
 801a3f2:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a3fc:	461a      	mov	r2, r3
 801a3fe:	2303      	movs	r3, #3
 801a400:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	68da      	ldr	r2, [r3, #12]
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a410:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	68da      	ldr	r2, [r3, #12]
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a420:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 801a424:	bf00      	nop
 801a426:	3714      	adds	r7, #20
 801a428:	46bd      	mov	sp, r7
 801a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a42e:	4770      	bx	lr

0801a430 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 801a430:	b480      	push	{r7}
 801a432:	b085      	sub	sp, #20
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801a438:	2300      	movs	r3, #0
 801a43a:	60fb      	str	r3, [r7, #12]
 801a43c:	e023      	b.n	801a486 <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	6919      	ldr	r1, [r3, #16]
 801a442:	68fa      	ldr	r2, [r7, #12]
 801a444:	4613      	mov	r3, r2
 801a446:	005b      	lsls	r3, r3, #1
 801a448:	4413      	add	r3, r2
 801a44a:	00db      	lsls	r3, r3, #3
 801a44c:	440b      	add	r3, r1
 801a44e:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 801a450:	68bb      	ldr	r3, [r7, #8]
 801a452:	2200      	movs	r2, #0
 801a454:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 801a456:	68bb      	ldr	r3, [r7, #8]
 801a458:	2200      	movs	r2, #0
 801a45a:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 801a45c:	68bb      	ldr	r3, [r7, #8]
 801a45e:	2200      	movs	r2, #0
 801a460:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 801a462:	68bb      	ldr	r3, [r7, #8]
 801a464:	2200      	movs	r2, #0
 801a466:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 801a468:	68bb      	ldr	r3, [r7, #8]
 801a46a:	2200      	movs	r2, #0
 801a46c:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 801a46e:	68bb      	ldr	r3, [r7, #8]
 801a470:	2200      	movs	r2, #0
 801a472:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 801a474:	68b9      	ldr	r1, [r7, #8]
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	68fa      	ldr	r2, [r7, #12]
 801a47a:	320c      	adds	r2, #12
 801a47c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	3301      	adds	r3, #1
 801a484:	60fb      	str	r3, [r7, #12]
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	2b03      	cmp	r3, #3
 801a48a:	d9d8      	bls.n	801a43e <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	2200      	movs	r2, #0
 801a490:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	2200      	movs	r2, #0
 801a496:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	2200      	movs	r2, #0
 801a49c:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	2200      	movs	r2, #0
 801a4a2:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	2200      	movs	r2, #0
 801a4a8:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a4b2:	461a      	mov	r2, r3
 801a4b4:	2303      	movs	r3, #3
 801a4b6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	691a      	ldr	r2, [r3, #16]
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a4c6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	691b      	ldr	r3, [r3, #16]
 801a4ce:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a4da:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 801a4de:	bf00      	nop
 801a4e0:	3714      	adds	r7, #20
 801a4e2:	46bd      	mov	sp, r7
 801a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e8:	4770      	bx	lr
	...

0801a4ec <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 801a4ec:	b580      	push	{r7, lr}
 801a4ee:	b086      	sub	sp, #24
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a4f8:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801a4fa:	e032      	b.n	801a562 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	697a      	ldr	r2, [r7, #20]
 801a500:	3206      	adds	r2, #6
 801a502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a506:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 801a508:	693b      	ldr	r3, [r7, #16]
 801a50a:	68db      	ldr	r3, [r3, #12]
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	db31      	blt.n	801a574 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 801a510:	693b      	ldr	r3, [r7, #16]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d02d      	beq.n	801a578 <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 801a51c:	68f8      	ldr	r0, [r7, #12]
 801a51e:	f7f0 fab4 	bl	800aa8a <pxPacketBuffer_to_NetworkBuffer>
 801a522:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 801a524:	68bb      	ldr	r3, [r7, #8]
 801a526:	2b00      	cmp	r3, #0
 801a528:	d002      	beq.n	801a530 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801a52a:	68b8      	ldr	r0, [r7, #8]
 801a52c:	f7fd faa2 	bl	8017a74 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 801a530:	693b      	ldr	r3, [r7, #16]
 801a532:	2200      	movs	r2, #0
 801a534:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 801a536:	697b      	ldr	r3, [r7, #20]
 801a538:	3301      	adds	r3, #1
 801a53a:	617b      	str	r3, [r7, #20]
 801a53c:	697b      	ldr	r3, [r7, #20]
 801a53e:	2b03      	cmp	r3, #3
 801a540:	d902      	bls.n	801a548 <ETH_Clear_Tx_Descriptors+0x5c>
 801a542:	697b      	ldr	r3, [r7, #20]
 801a544:	3b04      	subs	r3, #4
 801a546:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	697a      	ldr	r2, [r7, #20]
 801a54c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 801a54e:	f3bf 8f4f 	dsb	sy
}
 801a552:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 801a554:	4b0b      	ldr	r3, [pc, #44]	@ (801a584 <ETH_Clear_Tx_Descriptors+0x98>)
 801a556:	6818      	ldr	r0, [r3, #0]
 801a558:	2300      	movs	r3, #0
 801a55a:	2200      	movs	r2, #0
 801a55c:	2100      	movs	r1, #0
 801a55e:	f7e9 fb41 	bl	8003be4 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801a562:	4b08      	ldr	r3, [pc, #32]	@ (801a584 <ETH_Clear_Tx_Descriptors+0x98>)
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	4618      	mov	r0, r3
 801a568:	f7e9 fde2 	bl	8004130 <uxQueueMessagesWaiting>
 801a56c:	4603      	mov	r3, r0
 801a56e:	2b04      	cmp	r3, #4
 801a570:	d1c4      	bne.n	801a4fc <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 801a572:	e002      	b.n	801a57a <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 801a574:	bf00      	nop
 801a576:	e000      	b.n	801a57a <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 801a578:	bf00      	nop
        }
 801a57a:	bf00      	nop
 801a57c:	3718      	adds	r7, #24
 801a57e:	46bd      	mov	sp, r7
 801a580:	bd80      	pop	{r7, pc}
 801a582:	bf00      	nop
 801a584:	20002474 	.word	0x20002474

0801a588 <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 801a588:	b480      	push	{r7}
 801a58a:	b08b      	sub	sp, #44	@ 0x2c
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	60f8      	str	r0, [r7, #12]
 801a590:	60b9      	str	r1, [r7, #8]
 801a592:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	3318      	adds	r3, #24
 801a598:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801a59a:	6a3b      	ldr	r3, [r7, #32]
 801a59c:	691b      	ldr	r3, [r3, #16]
 801a59e:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 801a5a0:	6a3b      	ldr	r3, [r7, #32]
 801a5a2:	69fa      	ldr	r2, [r7, #28]
 801a5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a5a8:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 801a5aa:	68bb      	ldr	r3, [r7, #8]
 801a5ac:	689b      	ldr	r3, [r3, #8]
 801a5ae:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 801a5b0:	697b      	ldr	r3, [r7, #20]
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 801a5b6:	69bb      	ldr	r3, [r7, #24]
 801a5b8:	68db      	ldr	r3, [r3, #12]
 801a5ba:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 801a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	da01      	bge.n	801a5c6 <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 801a5c2:	2302      	movs	r3, #2
 801a5c4:	e05c      	b.n	801a680 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 801a5c6:	697b      	ldr	r3, [r7, #20]
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	461a      	mov	r2, r3
 801a5cc:	69bb      	ldr	r3, [r7, #24]
 801a5ce:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 801a5d0:	69bb      	ldr	r3, [r7, #24]
 801a5d2:	689a      	ldr	r2, [r3, #8]
 801a5d4:	4b2d      	ldr	r3, [pc, #180]	@ (801a68c <ETH_Prepare_Tx_Descriptors+0x104>)
 801a5d6:	4013      	ands	r3, r2
 801a5d8:	697a      	ldr	r2, [r7, #20]
 801a5da:	6852      	ldr	r2, [r2, #4]
 801a5dc:	431a      	orrs	r2, r3
 801a5de:	69bb      	ldr	r3, [r7, #24]
 801a5e0:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 801a5e2:	69bb      	ldr	r3, [r7, #24]
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 801a5e8:	69bb      	ldr	r3, [r7, #24]
 801a5ea:	689a      	ldr	r2, [r3, #8]
 801a5ec:	4b28      	ldr	r3, [pc, #160]	@ (801a690 <ETH_Prepare_Tx_Descriptors+0x108>)
 801a5ee:	4013      	ands	r3, r2
 801a5f0:	69ba      	ldr	r2, [r7, #24]
 801a5f2:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 801a5f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a5f6:	4b27      	ldr	r3, [pc, #156]	@ (801a694 <ETH_Prepare_Tx_Descriptors+0x10c>)
 801a5f8:	4013      	ands	r3, r2
 801a5fa:	68ba      	ldr	r2, [r7, #8]
 801a5fc:	6852      	ldr	r2, [r2, #4]
 801a5fe:	4313      	orrs	r3, r2
 801a600:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 801a602:	68bb      	ldr	r3, [r7, #8]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	f003 0301 	and.w	r3, r3, #1
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d006      	beq.n	801a61c <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 801a60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a610:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801a614:	68bb      	ldr	r3, [r7, #8]
 801a616:	695b      	ldr	r3, [r3, #20]
 801a618:	4313      	orrs	r3, r2
 801a61a:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 801a61c:	68bb      	ldr	r3, [r7, #8]
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	f003 0320 	and.w	r3, r3, #32
 801a624:	2b00      	cmp	r3, #0
 801a626:	d006      	beq.n	801a636 <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 801a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a62a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801a62e:	68bb      	ldr	r3, [r7, #8]
 801a630:	691b      	ldr	r3, [r3, #16]
 801a632:	4313      	orrs	r3, r2
 801a634:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 801a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a638:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 801a63c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 801a63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a640:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801a644:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 801a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a648:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a64c:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	2b00      	cmp	r3, #0
 801a652:	d006      	beq.n	801a662 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 801a654:	69bb      	ldr	r3, [r7, #24]
 801a656:	689b      	ldr	r3, [r3, #8]
 801a658:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801a65c:	69bb      	ldr	r3, [r7, #24]
 801a65e:	609a      	str	r2, [r3, #8]
 801a660:	e005      	b.n	801a66e <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 801a662:	69bb      	ldr	r3, [r7, #24]
 801a664:	689b      	ldr	r3, [r3, #8]
 801a666:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a66a:	69bb      	ldr	r3, [r7, #24]
 801a66c:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 801a66e:	69bb      	ldr	r3, [r7, #24]
 801a670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a672:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 801a674:	69bb      	ldr	r3, [r7, #24]
 801a676:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801a678:	f3bf 8f4f 	dsb	sy
}
 801a67c:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 801a67e:	2300      	movs	r3, #0
        }
 801a680:	4618      	mov	r0, r3
 801a682:	372c      	adds	r7, #44	@ 0x2c
 801a684:	46bd      	mov	sp, r7
 801a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a68a:	4770      	bx	lr
 801a68c:	ffffc000 	.word	0xffffc000
 801a690:	c000ffff 	.word	0xc000ffff
 801a694:	ffff8000 	.word	0xffff8000

0801a698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a698:	b580      	push	{r7, lr}
 801a69a:	b082      	sub	sp, #8
 801a69c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a69e:	2003      	movs	r0, #3
 801a6a0:	f000 f9a0 	bl	801a9e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801a6a4:	f003 faa6 	bl	801dbf4 <HAL_RCC_GetSysClockFreq>
 801a6a8:	4602      	mov	r2, r0
 801a6aa:	4b15      	ldr	r3, [pc, #84]	@ (801a700 <HAL_Init+0x68>)
 801a6ac:	699b      	ldr	r3, [r3, #24]
 801a6ae:	0a1b      	lsrs	r3, r3, #8
 801a6b0:	f003 030f 	and.w	r3, r3, #15
 801a6b4:	4913      	ldr	r1, [pc, #76]	@ (801a704 <HAL_Init+0x6c>)
 801a6b6:	5ccb      	ldrb	r3, [r1, r3]
 801a6b8:	f003 031f 	and.w	r3, r3, #31
 801a6bc:	fa22 f303 	lsr.w	r3, r2, r3
 801a6c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801a6c2:	4b0f      	ldr	r3, [pc, #60]	@ (801a700 <HAL_Init+0x68>)
 801a6c4:	699b      	ldr	r3, [r3, #24]
 801a6c6:	f003 030f 	and.w	r3, r3, #15
 801a6ca:	4a0e      	ldr	r2, [pc, #56]	@ (801a704 <HAL_Init+0x6c>)
 801a6cc:	5cd3      	ldrb	r3, [r2, r3]
 801a6ce:	f003 031f 	and.w	r3, r3, #31
 801a6d2:	687a      	ldr	r2, [r7, #4]
 801a6d4:	fa22 f303 	lsr.w	r3, r2, r3
 801a6d8:	4a0b      	ldr	r2, [pc, #44]	@ (801a708 <HAL_Init+0x70>)
 801a6da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801a6dc:	4a0b      	ldr	r2, [pc, #44]	@ (801a70c <HAL_Init+0x74>)
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801a6e2:	200f      	movs	r0, #15
 801a6e4:	f000 f814 	bl	801a710 <HAL_InitTick>
 801a6e8:	4603      	mov	r3, r0
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d001      	beq.n	801a6f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801a6ee:	2301      	movs	r3, #1
 801a6f0:	e002      	b.n	801a6f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801a6f2:	f7e7 fe8f 	bl	8002414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801a6f6:	2300      	movs	r3, #0
}
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	3708      	adds	r7, #8
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	bd80      	pop	{r7, pc}
 801a700:	58024400 	.word	0x58024400
 801a704:	08027f04 	.word	0x08027f04
 801a708:	20000004 	.word	0x20000004
 801a70c:	20000000 	.word	0x20000000

0801a710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b082      	sub	sp, #8
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801a718:	4b15      	ldr	r3, [pc, #84]	@ (801a770 <HAL_InitTick+0x60>)
 801a71a:	781b      	ldrb	r3, [r3, #0]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d101      	bne.n	801a724 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801a720:	2301      	movs	r3, #1
 801a722:	e021      	b.n	801a768 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801a724:	4b13      	ldr	r3, [pc, #76]	@ (801a774 <HAL_InitTick+0x64>)
 801a726:	681a      	ldr	r2, [r3, #0]
 801a728:	4b11      	ldr	r3, [pc, #68]	@ (801a770 <HAL_InitTick+0x60>)
 801a72a:	781b      	ldrb	r3, [r3, #0]
 801a72c:	4619      	mov	r1, r3
 801a72e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801a732:	fbb3 f3f1 	udiv	r3, r3, r1
 801a736:	fbb2 f3f3 	udiv	r3, r2, r3
 801a73a:	4618      	mov	r0, r3
 801a73c:	f000 f985 	bl	801aa4a <HAL_SYSTICK_Config>
 801a740:	4603      	mov	r3, r0
 801a742:	2b00      	cmp	r3, #0
 801a744:	d001      	beq.n	801a74a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801a746:	2301      	movs	r3, #1
 801a748:	e00e      	b.n	801a768 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	2b0f      	cmp	r3, #15
 801a74e:	d80a      	bhi.n	801a766 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801a750:	2200      	movs	r2, #0
 801a752:	6879      	ldr	r1, [r7, #4]
 801a754:	f04f 30ff 	mov.w	r0, #4294967295
 801a758:	f000 f94f 	bl	801a9fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801a75c:	4a06      	ldr	r2, [pc, #24]	@ (801a778 <HAL_InitTick+0x68>)
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801a762:	2300      	movs	r3, #0
 801a764:	e000      	b.n	801a768 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801a766:	2301      	movs	r3, #1
}
 801a768:	4618      	mov	r0, r3
 801a76a:	3708      	adds	r7, #8
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bd80      	pop	{r7, pc}
 801a770:	20000024 	.word	0x20000024
 801a774:	20000000 	.word	0x20000000
 801a778:	20000020 	.word	0x20000020

0801a77c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801a77c:	b480      	push	{r7}
 801a77e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801a780:	4b06      	ldr	r3, [pc, #24]	@ (801a79c <HAL_IncTick+0x20>)
 801a782:	781b      	ldrb	r3, [r3, #0]
 801a784:	461a      	mov	r2, r3
 801a786:	4b06      	ldr	r3, [pc, #24]	@ (801a7a0 <HAL_IncTick+0x24>)
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	4413      	add	r3, r2
 801a78c:	4a04      	ldr	r2, [pc, #16]	@ (801a7a0 <HAL_IncTick+0x24>)
 801a78e:	6013      	str	r3, [r2, #0]
}
 801a790:	bf00      	nop
 801a792:	46bd      	mov	sp, r7
 801a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a798:	4770      	bx	lr
 801a79a:	bf00      	nop
 801a79c:	20000024 	.word	0x20000024
 801a7a0:	20002580 	.word	0x20002580

0801a7a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801a7a4:	b480      	push	{r7}
 801a7a6:	af00      	add	r7, sp, #0
  return uwTick;
 801a7a8:	4b03      	ldr	r3, [pc, #12]	@ (801a7b8 <HAL_GetTick+0x14>)
 801a7aa:	681b      	ldr	r3, [r3, #0]
}
 801a7ac:	4618      	mov	r0, r3
 801a7ae:	46bd      	mov	sp, r7
 801a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b4:	4770      	bx	lr
 801a7b6:	bf00      	nop
 801a7b8:	20002580 	.word	0x20002580

0801a7bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801a7bc:	b580      	push	{r7, lr}
 801a7be:	b084      	sub	sp, #16
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801a7c4:	f7ff ffee 	bl	801a7a4 <HAL_GetTick>
 801a7c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801a7ce:	68fb      	ldr	r3, [r7, #12]
 801a7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7d4:	d005      	beq.n	801a7e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801a7d6:	4b0a      	ldr	r3, [pc, #40]	@ (801a800 <HAL_Delay+0x44>)
 801a7d8:	781b      	ldrb	r3, [r3, #0]
 801a7da:	461a      	mov	r2, r3
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	4413      	add	r3, r2
 801a7e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801a7e2:	bf00      	nop
 801a7e4:	f7ff ffde 	bl	801a7a4 <HAL_GetTick>
 801a7e8:	4602      	mov	r2, r0
 801a7ea:	68bb      	ldr	r3, [r7, #8]
 801a7ec:	1ad3      	subs	r3, r2, r3
 801a7ee:	68fa      	ldr	r2, [r7, #12]
 801a7f0:	429a      	cmp	r2, r3
 801a7f2:	d8f7      	bhi.n	801a7e4 <HAL_Delay+0x28>
  {
  }
}
 801a7f4:	bf00      	nop
 801a7f6:	bf00      	nop
 801a7f8:	3710      	adds	r7, #16
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	bd80      	pop	{r7, pc}
 801a7fe:	bf00      	nop
 801a800:	20000024 	.word	0x20000024

0801a804 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801a804:	b480      	push	{r7}
 801a806:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801a808:	4b03      	ldr	r3, [pc, #12]	@ (801a818 <HAL_GetREVID+0x14>)
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	0c1b      	lsrs	r3, r3, #16
}
 801a80e:	4618      	mov	r0, r3
 801a810:	46bd      	mov	sp, r7
 801a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a816:	4770      	bx	lr
 801a818:	5c001000 	.word	0x5c001000

0801a81c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 801a81c:	b480      	push	{r7}
 801a81e:	b083      	sub	sp, #12
 801a820:	af00      	add	r7, sp, #0
 801a822:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 801a824:	4b06      	ldr	r3, [pc, #24]	@ (801a840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a826:	685b      	ldr	r3, [r3, #4]
 801a828:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 801a82c:	4904      	ldr	r1, [pc, #16]	@ (801a840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	4313      	orrs	r3, r2
 801a832:	604b      	str	r3, [r1, #4]
}
 801a834:	bf00      	nop
 801a836:	370c      	adds	r7, #12
 801a838:	46bd      	mov	sp, r7
 801a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a83e:	4770      	bx	lr
 801a840:	58000400 	.word	0x58000400

0801a844 <__NVIC_SetPriorityGrouping>:
{
 801a844:	b480      	push	{r7}
 801a846:	b085      	sub	sp, #20
 801a848:	af00      	add	r7, sp, #0
 801a84a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	f003 0307 	and.w	r3, r3, #7
 801a852:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a854:	4b0b      	ldr	r3, [pc, #44]	@ (801a884 <__NVIC_SetPriorityGrouping+0x40>)
 801a856:	68db      	ldr	r3, [r3, #12]
 801a858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a85a:	68ba      	ldr	r2, [r7, #8]
 801a85c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801a860:	4013      	ands	r3, r2
 801a862:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a868:	68bb      	ldr	r3, [r7, #8]
 801a86a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801a86c:	4b06      	ldr	r3, [pc, #24]	@ (801a888 <__NVIC_SetPriorityGrouping+0x44>)
 801a86e:	4313      	orrs	r3, r2
 801a870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a872:	4a04      	ldr	r2, [pc, #16]	@ (801a884 <__NVIC_SetPriorityGrouping+0x40>)
 801a874:	68bb      	ldr	r3, [r7, #8]
 801a876:	60d3      	str	r3, [r2, #12]
}
 801a878:	bf00      	nop
 801a87a:	3714      	adds	r7, #20
 801a87c:	46bd      	mov	sp, r7
 801a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a882:	4770      	bx	lr
 801a884:	e000ed00 	.word	0xe000ed00
 801a888:	05fa0000 	.word	0x05fa0000

0801a88c <__NVIC_GetPriorityGrouping>:
{
 801a88c:	b480      	push	{r7}
 801a88e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a890:	4b04      	ldr	r3, [pc, #16]	@ (801a8a4 <__NVIC_GetPriorityGrouping+0x18>)
 801a892:	68db      	ldr	r3, [r3, #12]
 801a894:	0a1b      	lsrs	r3, r3, #8
 801a896:	f003 0307 	and.w	r3, r3, #7
}
 801a89a:	4618      	mov	r0, r3
 801a89c:	46bd      	mov	sp, r7
 801a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a2:	4770      	bx	lr
 801a8a4:	e000ed00 	.word	0xe000ed00

0801a8a8 <__NVIC_EnableIRQ>:
{
 801a8a8:	b480      	push	{r7}
 801a8aa:	b083      	sub	sp, #12
 801a8ac:	af00      	add	r7, sp, #0
 801a8ae:	4603      	mov	r3, r0
 801a8b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a8b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	db0b      	blt.n	801a8d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a8ba:	88fb      	ldrh	r3, [r7, #6]
 801a8bc:	f003 021f 	and.w	r2, r3, #31
 801a8c0:	4907      	ldr	r1, [pc, #28]	@ (801a8e0 <__NVIC_EnableIRQ+0x38>)
 801a8c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a8c6:	095b      	lsrs	r3, r3, #5
 801a8c8:	2001      	movs	r0, #1
 801a8ca:	fa00 f202 	lsl.w	r2, r0, r2
 801a8ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a8d2:	bf00      	nop
 801a8d4:	370c      	adds	r7, #12
 801a8d6:	46bd      	mov	sp, r7
 801a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8dc:	4770      	bx	lr
 801a8de:	bf00      	nop
 801a8e0:	e000e100 	.word	0xe000e100

0801a8e4 <__NVIC_SetPriority>:
{
 801a8e4:	b480      	push	{r7}
 801a8e6:	b083      	sub	sp, #12
 801a8e8:	af00      	add	r7, sp, #0
 801a8ea:	4603      	mov	r3, r0
 801a8ec:	6039      	str	r1, [r7, #0]
 801a8ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a8f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	db0a      	blt.n	801a90e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a8f8:	683b      	ldr	r3, [r7, #0]
 801a8fa:	b2da      	uxtb	r2, r3
 801a8fc:	490c      	ldr	r1, [pc, #48]	@ (801a930 <__NVIC_SetPriority+0x4c>)
 801a8fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a902:	0112      	lsls	r2, r2, #4
 801a904:	b2d2      	uxtb	r2, r2
 801a906:	440b      	add	r3, r1
 801a908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a90c:	e00a      	b.n	801a924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	b2da      	uxtb	r2, r3
 801a912:	4908      	ldr	r1, [pc, #32]	@ (801a934 <__NVIC_SetPriority+0x50>)
 801a914:	88fb      	ldrh	r3, [r7, #6]
 801a916:	f003 030f 	and.w	r3, r3, #15
 801a91a:	3b04      	subs	r3, #4
 801a91c:	0112      	lsls	r2, r2, #4
 801a91e:	b2d2      	uxtb	r2, r2
 801a920:	440b      	add	r3, r1
 801a922:	761a      	strb	r2, [r3, #24]
}
 801a924:	bf00      	nop
 801a926:	370c      	adds	r7, #12
 801a928:	46bd      	mov	sp, r7
 801a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a92e:	4770      	bx	lr
 801a930:	e000e100 	.word	0xe000e100
 801a934:	e000ed00 	.word	0xe000ed00

0801a938 <NVIC_EncodePriority>:
{
 801a938:	b480      	push	{r7}
 801a93a:	b089      	sub	sp, #36	@ 0x24
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	60f8      	str	r0, [r7, #12]
 801a940:	60b9      	str	r1, [r7, #8]
 801a942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	f003 0307 	and.w	r3, r3, #7
 801a94a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a94c:	69fb      	ldr	r3, [r7, #28]
 801a94e:	f1c3 0307 	rsb	r3, r3, #7
 801a952:	2b04      	cmp	r3, #4
 801a954:	bf28      	it	cs
 801a956:	2304      	movcs	r3, #4
 801a958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a95a:	69fb      	ldr	r3, [r7, #28]
 801a95c:	3304      	adds	r3, #4
 801a95e:	2b06      	cmp	r3, #6
 801a960:	d902      	bls.n	801a968 <NVIC_EncodePriority+0x30>
 801a962:	69fb      	ldr	r3, [r7, #28]
 801a964:	3b03      	subs	r3, #3
 801a966:	e000      	b.n	801a96a <NVIC_EncodePriority+0x32>
 801a968:	2300      	movs	r3, #0
 801a96a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a96c:	f04f 32ff 	mov.w	r2, #4294967295
 801a970:	69bb      	ldr	r3, [r7, #24]
 801a972:	fa02 f303 	lsl.w	r3, r2, r3
 801a976:	43da      	mvns	r2, r3
 801a978:	68bb      	ldr	r3, [r7, #8]
 801a97a:	401a      	ands	r2, r3
 801a97c:	697b      	ldr	r3, [r7, #20]
 801a97e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a980:	f04f 31ff 	mov.w	r1, #4294967295
 801a984:	697b      	ldr	r3, [r7, #20]
 801a986:	fa01 f303 	lsl.w	r3, r1, r3
 801a98a:	43d9      	mvns	r1, r3
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a990:	4313      	orrs	r3, r2
}
 801a992:	4618      	mov	r0, r3
 801a994:	3724      	adds	r7, #36	@ 0x24
 801a996:	46bd      	mov	sp, r7
 801a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a99c:	4770      	bx	lr
	...

0801a9a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b082      	sub	sp, #8
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	3b01      	subs	r3, #1
 801a9ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a9b0:	d301      	bcc.n	801a9b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801a9b2:	2301      	movs	r3, #1
 801a9b4:	e00f      	b.n	801a9d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801a9b6:	4a0a      	ldr	r2, [pc, #40]	@ (801a9e0 <SysTick_Config+0x40>)
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	3b01      	subs	r3, #1
 801a9bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801a9be:	210f      	movs	r1, #15
 801a9c0:	f04f 30ff 	mov.w	r0, #4294967295
 801a9c4:	f7ff ff8e 	bl	801a8e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801a9c8:	4b05      	ldr	r3, [pc, #20]	@ (801a9e0 <SysTick_Config+0x40>)
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801a9ce:	4b04      	ldr	r3, [pc, #16]	@ (801a9e0 <SysTick_Config+0x40>)
 801a9d0:	2207      	movs	r2, #7
 801a9d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801a9d4:	2300      	movs	r3, #0
}
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	3708      	adds	r7, #8
 801a9da:	46bd      	mov	sp, r7
 801a9dc:	bd80      	pop	{r7, pc}
 801a9de:	bf00      	nop
 801a9e0:	e000e010 	.word	0xe000e010

0801a9e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b082      	sub	sp, #8
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a9ec:	6878      	ldr	r0, [r7, #4]
 801a9ee:	f7ff ff29 	bl	801a844 <__NVIC_SetPriorityGrouping>
}
 801a9f2:	bf00      	nop
 801a9f4:	3708      	adds	r7, #8
 801a9f6:	46bd      	mov	sp, r7
 801a9f8:	bd80      	pop	{r7, pc}

0801a9fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801a9fa:	b580      	push	{r7, lr}
 801a9fc:	b086      	sub	sp, #24
 801a9fe:	af00      	add	r7, sp, #0
 801aa00:	4603      	mov	r3, r0
 801aa02:	60b9      	str	r1, [r7, #8]
 801aa04:	607a      	str	r2, [r7, #4]
 801aa06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801aa08:	f7ff ff40 	bl	801a88c <__NVIC_GetPriorityGrouping>
 801aa0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801aa0e:	687a      	ldr	r2, [r7, #4]
 801aa10:	68b9      	ldr	r1, [r7, #8]
 801aa12:	6978      	ldr	r0, [r7, #20]
 801aa14:	f7ff ff90 	bl	801a938 <NVIC_EncodePriority>
 801aa18:	4602      	mov	r2, r0
 801aa1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801aa1e:	4611      	mov	r1, r2
 801aa20:	4618      	mov	r0, r3
 801aa22:	f7ff ff5f 	bl	801a8e4 <__NVIC_SetPriority>
}
 801aa26:	bf00      	nop
 801aa28:	3718      	adds	r7, #24
 801aa2a:	46bd      	mov	sp, r7
 801aa2c:	bd80      	pop	{r7, pc}

0801aa2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801aa2e:	b580      	push	{r7, lr}
 801aa30:	b082      	sub	sp, #8
 801aa32:	af00      	add	r7, sp, #0
 801aa34:	4603      	mov	r3, r0
 801aa36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801aa38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	f7ff ff33 	bl	801a8a8 <__NVIC_EnableIRQ>
}
 801aa42:	bf00      	nop
 801aa44:	3708      	adds	r7, #8
 801aa46:	46bd      	mov	sp, r7
 801aa48:	bd80      	pop	{r7, pc}

0801aa4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801aa4a:	b580      	push	{r7, lr}
 801aa4c:	b082      	sub	sp, #8
 801aa4e:	af00      	add	r7, sp, #0
 801aa50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801aa52:	6878      	ldr	r0, [r7, #4]
 801aa54:	f7ff ffa4 	bl	801a9a0 <SysTick_Config>
 801aa58:	4603      	mov	r3, r0
}
 801aa5a:	4618      	mov	r0, r3
 801aa5c:	3708      	adds	r7, #8
 801aa5e:	46bd      	mov	sp, r7
 801aa60:	bd80      	pop	{r7, pc}
	...

0801aa64 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801aa64:	b480      	push	{r7}
 801aa66:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801aa68:	f3bf 8f5f 	dmb	sy
}
 801aa6c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801aa6e:	4b07      	ldr	r3, [pc, #28]	@ (801aa8c <HAL_MPU_Disable+0x28>)
 801aa70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa72:	4a06      	ldr	r2, [pc, #24]	@ (801aa8c <HAL_MPU_Disable+0x28>)
 801aa74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801aa78:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801aa7a:	4b05      	ldr	r3, [pc, #20]	@ (801aa90 <HAL_MPU_Disable+0x2c>)
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	605a      	str	r2, [r3, #4]
}
 801aa80:	bf00      	nop
 801aa82:	46bd      	mov	sp, r7
 801aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa88:	4770      	bx	lr
 801aa8a:	bf00      	nop
 801aa8c:	e000ed00 	.word	0xe000ed00
 801aa90:	e000ed90 	.word	0xe000ed90

0801aa94 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801aa94:	b480      	push	{r7}
 801aa96:	b083      	sub	sp, #12
 801aa98:	af00      	add	r7, sp, #0
 801aa9a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801aa9c:	4a0b      	ldr	r2, [pc, #44]	@ (801aacc <HAL_MPU_Enable+0x38>)
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	f043 0301 	orr.w	r3, r3, #1
 801aaa4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801aaa6:	4b0a      	ldr	r3, [pc, #40]	@ (801aad0 <HAL_MPU_Enable+0x3c>)
 801aaa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aaaa:	4a09      	ldr	r2, [pc, #36]	@ (801aad0 <HAL_MPU_Enable+0x3c>)
 801aaac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801aab0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801aab2:	f3bf 8f4f 	dsb	sy
}
 801aab6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801aab8:	f3bf 8f6f 	isb	sy
}
 801aabc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801aabe:	bf00      	nop
 801aac0:	370c      	adds	r7, #12
 801aac2:	46bd      	mov	sp, r7
 801aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac8:	4770      	bx	lr
 801aaca:	bf00      	nop
 801aacc:	e000ed90 	.word	0xe000ed90
 801aad0:	e000ed00 	.word	0xe000ed00

0801aad4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801aad4:	b480      	push	{r7}
 801aad6:	b083      	sub	sp, #12
 801aad8:	af00      	add	r7, sp, #0
 801aada:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	785a      	ldrb	r2, [r3, #1]
 801aae0:	4b1b      	ldr	r3, [pc, #108]	@ (801ab50 <HAL_MPU_ConfigRegion+0x7c>)
 801aae2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801aae4:	4b1a      	ldr	r3, [pc, #104]	@ (801ab50 <HAL_MPU_ConfigRegion+0x7c>)
 801aae6:	691b      	ldr	r3, [r3, #16]
 801aae8:	4a19      	ldr	r2, [pc, #100]	@ (801ab50 <HAL_MPU_ConfigRegion+0x7c>)
 801aaea:	f023 0301 	bic.w	r3, r3, #1
 801aaee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801aaf0:	4a17      	ldr	r2, [pc, #92]	@ (801ab50 <HAL_MPU_ConfigRegion+0x7c>)
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	685b      	ldr	r3, [r3, #4]
 801aaf6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	7b1b      	ldrb	r3, [r3, #12]
 801aafc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	7adb      	ldrb	r3, [r3, #11]
 801ab02:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801ab04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	7a9b      	ldrb	r3, [r3, #10]
 801ab0a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801ab0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	7b5b      	ldrb	r3, [r3, #13]
 801ab12:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801ab14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	7b9b      	ldrb	r3, [r3, #14]
 801ab1a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801ab1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	7bdb      	ldrb	r3, [r3, #15]
 801ab22:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801ab24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	7a5b      	ldrb	r3, [r3, #9]
 801ab2a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801ab2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	7a1b      	ldrb	r3, [r3, #8]
 801ab32:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801ab34:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801ab36:	687a      	ldr	r2, [r7, #4]
 801ab38:	7812      	ldrb	r2, [r2, #0]
 801ab3a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801ab3c:	4a04      	ldr	r2, [pc, #16]	@ (801ab50 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801ab3e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801ab40:	6113      	str	r3, [r2, #16]
}
 801ab42:	bf00      	nop
 801ab44:	370c      	adds	r7, #12
 801ab46:	46bd      	mov	sp, r7
 801ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab4c:	4770      	bx	lr
 801ab4e:	bf00      	nop
 801ab50:	e000ed90 	.word	0xe000ed90

0801ab54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b086      	sub	sp, #24
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801ab5c:	f7ff fe22 	bl	801a7a4 <HAL_GetTick>
 801ab60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d101      	bne.n	801ab6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801ab68:	2301      	movs	r3, #1
 801ab6a:	e316      	b.n	801b19a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	4a66      	ldr	r2, [pc, #408]	@ (801ad0c <HAL_DMA_Init+0x1b8>)
 801ab72:	4293      	cmp	r3, r2
 801ab74:	d04a      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	4a65      	ldr	r2, [pc, #404]	@ (801ad10 <HAL_DMA_Init+0x1bc>)
 801ab7c:	4293      	cmp	r3, r2
 801ab7e:	d045      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	4a63      	ldr	r2, [pc, #396]	@ (801ad14 <HAL_DMA_Init+0x1c0>)
 801ab86:	4293      	cmp	r3, r2
 801ab88:	d040      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	4a62      	ldr	r2, [pc, #392]	@ (801ad18 <HAL_DMA_Init+0x1c4>)
 801ab90:	4293      	cmp	r3, r2
 801ab92:	d03b      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	4a60      	ldr	r2, [pc, #384]	@ (801ad1c <HAL_DMA_Init+0x1c8>)
 801ab9a:	4293      	cmp	r3, r2
 801ab9c:	d036      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	4a5f      	ldr	r2, [pc, #380]	@ (801ad20 <HAL_DMA_Init+0x1cc>)
 801aba4:	4293      	cmp	r3, r2
 801aba6:	d031      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	4a5d      	ldr	r2, [pc, #372]	@ (801ad24 <HAL_DMA_Init+0x1d0>)
 801abae:	4293      	cmp	r3, r2
 801abb0:	d02c      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	4a5c      	ldr	r2, [pc, #368]	@ (801ad28 <HAL_DMA_Init+0x1d4>)
 801abb8:	4293      	cmp	r3, r2
 801abba:	d027      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	4a5a      	ldr	r2, [pc, #360]	@ (801ad2c <HAL_DMA_Init+0x1d8>)
 801abc2:	4293      	cmp	r3, r2
 801abc4:	d022      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	4a59      	ldr	r2, [pc, #356]	@ (801ad30 <HAL_DMA_Init+0x1dc>)
 801abcc:	4293      	cmp	r3, r2
 801abce:	d01d      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	4a57      	ldr	r2, [pc, #348]	@ (801ad34 <HAL_DMA_Init+0x1e0>)
 801abd6:	4293      	cmp	r3, r2
 801abd8:	d018      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	4a56      	ldr	r2, [pc, #344]	@ (801ad38 <HAL_DMA_Init+0x1e4>)
 801abe0:	4293      	cmp	r3, r2
 801abe2:	d013      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	4a54      	ldr	r2, [pc, #336]	@ (801ad3c <HAL_DMA_Init+0x1e8>)
 801abea:	4293      	cmp	r3, r2
 801abec:	d00e      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	4a53      	ldr	r2, [pc, #332]	@ (801ad40 <HAL_DMA_Init+0x1ec>)
 801abf4:	4293      	cmp	r3, r2
 801abf6:	d009      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	4a51      	ldr	r2, [pc, #324]	@ (801ad44 <HAL_DMA_Init+0x1f0>)
 801abfe:	4293      	cmp	r3, r2
 801ac00:	d004      	beq.n	801ac0c <HAL_DMA_Init+0xb8>
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	4a50      	ldr	r2, [pc, #320]	@ (801ad48 <HAL_DMA_Init+0x1f4>)
 801ac08:	4293      	cmp	r3, r2
 801ac0a:	d101      	bne.n	801ac10 <HAL_DMA_Init+0xbc>
 801ac0c:	2301      	movs	r3, #1
 801ac0e:	e000      	b.n	801ac12 <HAL_DMA_Init+0xbe>
 801ac10:	2300      	movs	r3, #0
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	f000 813b 	beq.w	801ae8e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	2202      	movs	r2, #2
 801ac1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	2200      	movs	r2, #0
 801ac24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	4a37      	ldr	r2, [pc, #220]	@ (801ad0c <HAL_DMA_Init+0x1b8>)
 801ac2e:	4293      	cmp	r3, r2
 801ac30:	d04a      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	4a36      	ldr	r2, [pc, #216]	@ (801ad10 <HAL_DMA_Init+0x1bc>)
 801ac38:	4293      	cmp	r3, r2
 801ac3a:	d045      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	4a34      	ldr	r2, [pc, #208]	@ (801ad14 <HAL_DMA_Init+0x1c0>)
 801ac42:	4293      	cmp	r3, r2
 801ac44:	d040      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	4a33      	ldr	r2, [pc, #204]	@ (801ad18 <HAL_DMA_Init+0x1c4>)
 801ac4c:	4293      	cmp	r3, r2
 801ac4e:	d03b      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	4a31      	ldr	r2, [pc, #196]	@ (801ad1c <HAL_DMA_Init+0x1c8>)
 801ac56:	4293      	cmp	r3, r2
 801ac58:	d036      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	4a30      	ldr	r2, [pc, #192]	@ (801ad20 <HAL_DMA_Init+0x1cc>)
 801ac60:	4293      	cmp	r3, r2
 801ac62:	d031      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	4a2e      	ldr	r2, [pc, #184]	@ (801ad24 <HAL_DMA_Init+0x1d0>)
 801ac6a:	4293      	cmp	r3, r2
 801ac6c:	d02c      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	4a2d      	ldr	r2, [pc, #180]	@ (801ad28 <HAL_DMA_Init+0x1d4>)
 801ac74:	4293      	cmp	r3, r2
 801ac76:	d027      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	4a2b      	ldr	r2, [pc, #172]	@ (801ad2c <HAL_DMA_Init+0x1d8>)
 801ac7e:	4293      	cmp	r3, r2
 801ac80:	d022      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	4a2a      	ldr	r2, [pc, #168]	@ (801ad30 <HAL_DMA_Init+0x1dc>)
 801ac88:	4293      	cmp	r3, r2
 801ac8a:	d01d      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	4a28      	ldr	r2, [pc, #160]	@ (801ad34 <HAL_DMA_Init+0x1e0>)
 801ac92:	4293      	cmp	r3, r2
 801ac94:	d018      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	4a27      	ldr	r2, [pc, #156]	@ (801ad38 <HAL_DMA_Init+0x1e4>)
 801ac9c:	4293      	cmp	r3, r2
 801ac9e:	d013      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	4a25      	ldr	r2, [pc, #148]	@ (801ad3c <HAL_DMA_Init+0x1e8>)
 801aca6:	4293      	cmp	r3, r2
 801aca8:	d00e      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	4a24      	ldr	r2, [pc, #144]	@ (801ad40 <HAL_DMA_Init+0x1ec>)
 801acb0:	4293      	cmp	r3, r2
 801acb2:	d009      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	4a22      	ldr	r2, [pc, #136]	@ (801ad44 <HAL_DMA_Init+0x1f0>)
 801acba:	4293      	cmp	r3, r2
 801acbc:	d004      	beq.n	801acc8 <HAL_DMA_Init+0x174>
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	4a21      	ldr	r2, [pc, #132]	@ (801ad48 <HAL_DMA_Init+0x1f4>)
 801acc4:	4293      	cmp	r3, r2
 801acc6:	d108      	bne.n	801acda <HAL_DMA_Init+0x186>
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	681a      	ldr	r2, [r3, #0]
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	f022 0201 	bic.w	r2, r2, #1
 801acd6:	601a      	str	r2, [r3, #0]
 801acd8:	e007      	b.n	801acea <HAL_DMA_Init+0x196>
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	681a      	ldr	r2, [r3, #0]
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	f022 0201 	bic.w	r2, r2, #1
 801ace8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801acea:	e02f      	b.n	801ad4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801acec:	f7ff fd5a 	bl	801a7a4 <HAL_GetTick>
 801acf0:	4602      	mov	r2, r0
 801acf2:	693b      	ldr	r3, [r7, #16]
 801acf4:	1ad3      	subs	r3, r2, r3
 801acf6:	2b05      	cmp	r3, #5
 801acf8:	d928      	bls.n	801ad4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	2220      	movs	r2, #32
 801acfe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	2203      	movs	r2, #3
 801ad04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801ad08:	2301      	movs	r3, #1
 801ad0a:	e246      	b.n	801b19a <HAL_DMA_Init+0x646>
 801ad0c:	40020010 	.word	0x40020010
 801ad10:	40020028 	.word	0x40020028
 801ad14:	40020040 	.word	0x40020040
 801ad18:	40020058 	.word	0x40020058
 801ad1c:	40020070 	.word	0x40020070
 801ad20:	40020088 	.word	0x40020088
 801ad24:	400200a0 	.word	0x400200a0
 801ad28:	400200b8 	.word	0x400200b8
 801ad2c:	40020410 	.word	0x40020410
 801ad30:	40020428 	.word	0x40020428
 801ad34:	40020440 	.word	0x40020440
 801ad38:	40020458 	.word	0x40020458
 801ad3c:	40020470 	.word	0x40020470
 801ad40:	40020488 	.word	0x40020488
 801ad44:	400204a0 	.word	0x400204a0
 801ad48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	f003 0301 	and.w	r3, r3, #1
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d1c8      	bne.n	801acec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801ad62:	697a      	ldr	r2, [r7, #20]
 801ad64:	4b83      	ldr	r3, [pc, #524]	@ (801af74 <HAL_DMA_Init+0x420>)
 801ad66:	4013      	ands	r3, r2
 801ad68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801ad72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	691b      	ldr	r3, [r3, #16]
 801ad78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801ad7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	699b      	ldr	r3, [r3, #24]
 801ad84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801ad8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	6a1b      	ldr	r3, [r3, #32]
 801ad90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801ad92:	697a      	ldr	r2, [r7, #20]
 801ad94:	4313      	orrs	r3, r2
 801ad96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad9c:	2b04      	cmp	r3, #4
 801ad9e:	d107      	bne.n	801adb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ada8:	4313      	orrs	r3, r2
 801adaa:	697a      	ldr	r2, [r7, #20]
 801adac:	4313      	orrs	r3, r2
 801adae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801adb0:	4b71      	ldr	r3, [pc, #452]	@ (801af78 <HAL_DMA_Init+0x424>)
 801adb2:	681a      	ldr	r2, [r3, #0]
 801adb4:	4b71      	ldr	r3, [pc, #452]	@ (801af7c <HAL_DMA_Init+0x428>)
 801adb6:	4013      	ands	r3, r2
 801adb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801adbc:	d328      	bcc.n	801ae10 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	685b      	ldr	r3, [r3, #4]
 801adc2:	2b28      	cmp	r3, #40	@ 0x28
 801adc4:	d903      	bls.n	801adce <HAL_DMA_Init+0x27a>
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	685b      	ldr	r3, [r3, #4]
 801adca:	2b2e      	cmp	r3, #46	@ 0x2e
 801adcc:	d917      	bls.n	801adfe <HAL_DMA_Init+0x2aa>
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	685b      	ldr	r3, [r3, #4]
 801add2:	2b3e      	cmp	r3, #62	@ 0x3e
 801add4:	d903      	bls.n	801adde <HAL_DMA_Init+0x28a>
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	685b      	ldr	r3, [r3, #4]
 801adda:	2b42      	cmp	r3, #66	@ 0x42
 801addc:	d90f      	bls.n	801adfe <HAL_DMA_Init+0x2aa>
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	685b      	ldr	r3, [r3, #4]
 801ade2:	2b46      	cmp	r3, #70	@ 0x46
 801ade4:	d903      	bls.n	801adee <HAL_DMA_Init+0x29a>
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	685b      	ldr	r3, [r3, #4]
 801adea:	2b48      	cmp	r3, #72	@ 0x48
 801adec:	d907      	bls.n	801adfe <HAL_DMA_Init+0x2aa>
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	685b      	ldr	r3, [r3, #4]
 801adf2:	2b4e      	cmp	r3, #78	@ 0x4e
 801adf4:	d905      	bls.n	801ae02 <HAL_DMA_Init+0x2ae>
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	685b      	ldr	r3, [r3, #4]
 801adfa:	2b52      	cmp	r3, #82	@ 0x52
 801adfc:	d801      	bhi.n	801ae02 <HAL_DMA_Init+0x2ae>
 801adfe:	2301      	movs	r3, #1
 801ae00:	e000      	b.n	801ae04 <HAL_DMA_Init+0x2b0>
 801ae02:	2300      	movs	r3, #0
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d003      	beq.n	801ae10 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801ae08:	697b      	ldr	r3, [r7, #20]
 801ae0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ae0e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	697a      	ldr	r2, [r7, #20]
 801ae16:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	695b      	ldr	r3, [r3, #20]
 801ae1e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801ae20:	697b      	ldr	r3, [r7, #20]
 801ae22:	f023 0307 	bic.w	r3, r3, #7
 801ae26:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ae2c:	697a      	ldr	r2, [r7, #20]
 801ae2e:	4313      	orrs	r3, r2
 801ae30:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ae36:	2b04      	cmp	r3, #4
 801ae38:	d117      	bne.n	801ae6a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae3e:	697a      	ldr	r2, [r7, #20]
 801ae40:	4313      	orrs	r3, r2
 801ae42:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d00e      	beq.n	801ae6a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801ae4c:	6878      	ldr	r0, [r7, #4]
 801ae4e:	f001 fbff 	bl	801c650 <DMA_CheckFifoParam>
 801ae52:	4603      	mov	r3, r0
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d008      	beq.n	801ae6a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	2240      	movs	r2, #64	@ 0x40
 801ae5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	2201      	movs	r2, #1
 801ae62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801ae66:	2301      	movs	r3, #1
 801ae68:	e197      	b.n	801b19a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	697a      	ldr	r2, [r7, #20]
 801ae70:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801ae72:	6878      	ldr	r0, [r7, #4]
 801ae74:	f001 fb3a 	bl	801c4ec <DMA_CalcBaseAndBitshift>
 801ae78:	4603      	mov	r3, r0
 801ae7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ae80:	f003 031f 	and.w	r3, r3, #31
 801ae84:	223f      	movs	r2, #63	@ 0x3f
 801ae86:	409a      	lsls	r2, r3
 801ae88:	68bb      	ldr	r3, [r7, #8]
 801ae8a:	609a      	str	r2, [r3, #8]
 801ae8c:	e0cd      	b.n	801b02a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	4a3b      	ldr	r2, [pc, #236]	@ (801af80 <HAL_DMA_Init+0x42c>)
 801ae94:	4293      	cmp	r3, r2
 801ae96:	d022      	beq.n	801aede <HAL_DMA_Init+0x38a>
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	4a39      	ldr	r2, [pc, #228]	@ (801af84 <HAL_DMA_Init+0x430>)
 801ae9e:	4293      	cmp	r3, r2
 801aea0:	d01d      	beq.n	801aede <HAL_DMA_Init+0x38a>
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	4a38      	ldr	r2, [pc, #224]	@ (801af88 <HAL_DMA_Init+0x434>)
 801aea8:	4293      	cmp	r3, r2
 801aeaa:	d018      	beq.n	801aede <HAL_DMA_Init+0x38a>
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	4a36      	ldr	r2, [pc, #216]	@ (801af8c <HAL_DMA_Init+0x438>)
 801aeb2:	4293      	cmp	r3, r2
 801aeb4:	d013      	beq.n	801aede <HAL_DMA_Init+0x38a>
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	4a35      	ldr	r2, [pc, #212]	@ (801af90 <HAL_DMA_Init+0x43c>)
 801aebc:	4293      	cmp	r3, r2
 801aebe:	d00e      	beq.n	801aede <HAL_DMA_Init+0x38a>
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	4a33      	ldr	r2, [pc, #204]	@ (801af94 <HAL_DMA_Init+0x440>)
 801aec6:	4293      	cmp	r3, r2
 801aec8:	d009      	beq.n	801aede <HAL_DMA_Init+0x38a>
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	4a32      	ldr	r2, [pc, #200]	@ (801af98 <HAL_DMA_Init+0x444>)
 801aed0:	4293      	cmp	r3, r2
 801aed2:	d004      	beq.n	801aede <HAL_DMA_Init+0x38a>
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	4a30      	ldr	r2, [pc, #192]	@ (801af9c <HAL_DMA_Init+0x448>)
 801aeda:	4293      	cmp	r3, r2
 801aedc:	d101      	bne.n	801aee2 <HAL_DMA_Init+0x38e>
 801aede:	2301      	movs	r3, #1
 801aee0:	e000      	b.n	801aee4 <HAL_DMA_Init+0x390>
 801aee2:	2300      	movs	r3, #0
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	f000 8097 	beq.w	801b018 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	4a24      	ldr	r2, [pc, #144]	@ (801af80 <HAL_DMA_Init+0x42c>)
 801aef0:	4293      	cmp	r3, r2
 801aef2:	d021      	beq.n	801af38 <HAL_DMA_Init+0x3e4>
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	4a22      	ldr	r2, [pc, #136]	@ (801af84 <HAL_DMA_Init+0x430>)
 801aefa:	4293      	cmp	r3, r2
 801aefc:	d01c      	beq.n	801af38 <HAL_DMA_Init+0x3e4>
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	4a21      	ldr	r2, [pc, #132]	@ (801af88 <HAL_DMA_Init+0x434>)
 801af04:	4293      	cmp	r3, r2
 801af06:	d017      	beq.n	801af38 <HAL_DMA_Init+0x3e4>
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	4a1f      	ldr	r2, [pc, #124]	@ (801af8c <HAL_DMA_Init+0x438>)
 801af0e:	4293      	cmp	r3, r2
 801af10:	d012      	beq.n	801af38 <HAL_DMA_Init+0x3e4>
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	4a1e      	ldr	r2, [pc, #120]	@ (801af90 <HAL_DMA_Init+0x43c>)
 801af18:	4293      	cmp	r3, r2
 801af1a:	d00d      	beq.n	801af38 <HAL_DMA_Init+0x3e4>
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	4a1c      	ldr	r2, [pc, #112]	@ (801af94 <HAL_DMA_Init+0x440>)
 801af22:	4293      	cmp	r3, r2
 801af24:	d008      	beq.n	801af38 <HAL_DMA_Init+0x3e4>
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	4a1b      	ldr	r2, [pc, #108]	@ (801af98 <HAL_DMA_Init+0x444>)
 801af2c:	4293      	cmp	r3, r2
 801af2e:	d003      	beq.n	801af38 <HAL_DMA_Init+0x3e4>
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	4a19      	ldr	r2, [pc, #100]	@ (801af9c <HAL_DMA_Init+0x448>)
 801af36:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	2202      	movs	r2, #2
 801af3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	2200      	movs	r2, #0
 801af44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801af50:	697a      	ldr	r2, [r7, #20]
 801af52:	4b13      	ldr	r3, [pc, #76]	@ (801afa0 <HAL_DMA_Init+0x44c>)
 801af54:	4013      	ands	r3, r2
 801af56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	689b      	ldr	r3, [r3, #8]
 801af5c:	2b40      	cmp	r3, #64	@ 0x40
 801af5e:	d021      	beq.n	801afa4 <HAL_DMA_Init+0x450>
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	689b      	ldr	r3, [r3, #8]
 801af64:	2b80      	cmp	r3, #128	@ 0x80
 801af66:	d102      	bne.n	801af6e <HAL_DMA_Init+0x41a>
 801af68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801af6c:	e01b      	b.n	801afa6 <HAL_DMA_Init+0x452>
 801af6e:	2300      	movs	r3, #0
 801af70:	e019      	b.n	801afa6 <HAL_DMA_Init+0x452>
 801af72:	bf00      	nop
 801af74:	fe10803f 	.word	0xfe10803f
 801af78:	5c001000 	.word	0x5c001000
 801af7c:	ffff0000 	.word	0xffff0000
 801af80:	58025408 	.word	0x58025408
 801af84:	5802541c 	.word	0x5802541c
 801af88:	58025430 	.word	0x58025430
 801af8c:	58025444 	.word	0x58025444
 801af90:	58025458 	.word	0x58025458
 801af94:	5802546c 	.word	0x5802546c
 801af98:	58025480 	.word	0x58025480
 801af9c:	58025494 	.word	0x58025494
 801afa0:	fffe000f 	.word	0xfffe000f
 801afa4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801afa6:	687a      	ldr	r2, [r7, #4]
 801afa8:	68d2      	ldr	r2, [r2, #12]
 801afaa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801afac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	691b      	ldr	r3, [r3, #16]
 801afb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801afb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	695b      	ldr	r3, [r3, #20]
 801afba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801afbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	699b      	ldr	r3, [r3, #24]
 801afc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801afc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	69db      	ldr	r3, [r3, #28]
 801afca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801afcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	6a1b      	ldr	r3, [r3, #32]
 801afd2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801afd4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801afd6:	697a      	ldr	r2, [r7, #20]
 801afd8:	4313      	orrs	r3, r2
 801afda:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	697a      	ldr	r2, [r7, #20]
 801afe2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	461a      	mov	r2, r3
 801afea:	4b6e      	ldr	r3, [pc, #440]	@ (801b1a4 <HAL_DMA_Init+0x650>)
 801afec:	4413      	add	r3, r2
 801afee:	4a6e      	ldr	r2, [pc, #440]	@ (801b1a8 <HAL_DMA_Init+0x654>)
 801aff0:	fba2 2303 	umull	r2, r3, r2, r3
 801aff4:	091b      	lsrs	r3, r3, #4
 801aff6:	009a      	lsls	r2, r3, #2
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801affc:	6878      	ldr	r0, [r7, #4]
 801affe:	f001 fa75 	bl	801c4ec <DMA_CalcBaseAndBitshift>
 801b002:	4603      	mov	r3, r0
 801b004:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b00a:	f003 031f 	and.w	r3, r3, #31
 801b00e:	2201      	movs	r2, #1
 801b010:	409a      	lsls	r2, r3
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	605a      	str	r2, [r3, #4]
 801b016:	e008      	b.n	801b02a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	2240      	movs	r2, #64	@ 0x40
 801b01c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	2203      	movs	r2, #3
 801b022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801b026:	2301      	movs	r3, #1
 801b028:	e0b7      	b.n	801b19a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	4a5f      	ldr	r2, [pc, #380]	@ (801b1ac <HAL_DMA_Init+0x658>)
 801b030:	4293      	cmp	r3, r2
 801b032:	d072      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	4a5d      	ldr	r2, [pc, #372]	@ (801b1b0 <HAL_DMA_Init+0x65c>)
 801b03a:	4293      	cmp	r3, r2
 801b03c:	d06d      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	4a5c      	ldr	r2, [pc, #368]	@ (801b1b4 <HAL_DMA_Init+0x660>)
 801b044:	4293      	cmp	r3, r2
 801b046:	d068      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	4a5a      	ldr	r2, [pc, #360]	@ (801b1b8 <HAL_DMA_Init+0x664>)
 801b04e:	4293      	cmp	r3, r2
 801b050:	d063      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	4a59      	ldr	r2, [pc, #356]	@ (801b1bc <HAL_DMA_Init+0x668>)
 801b058:	4293      	cmp	r3, r2
 801b05a:	d05e      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	4a57      	ldr	r2, [pc, #348]	@ (801b1c0 <HAL_DMA_Init+0x66c>)
 801b062:	4293      	cmp	r3, r2
 801b064:	d059      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	4a56      	ldr	r2, [pc, #344]	@ (801b1c4 <HAL_DMA_Init+0x670>)
 801b06c:	4293      	cmp	r3, r2
 801b06e:	d054      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	4a54      	ldr	r2, [pc, #336]	@ (801b1c8 <HAL_DMA_Init+0x674>)
 801b076:	4293      	cmp	r3, r2
 801b078:	d04f      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	4a53      	ldr	r2, [pc, #332]	@ (801b1cc <HAL_DMA_Init+0x678>)
 801b080:	4293      	cmp	r3, r2
 801b082:	d04a      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	4a51      	ldr	r2, [pc, #324]	@ (801b1d0 <HAL_DMA_Init+0x67c>)
 801b08a:	4293      	cmp	r3, r2
 801b08c:	d045      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	4a50      	ldr	r2, [pc, #320]	@ (801b1d4 <HAL_DMA_Init+0x680>)
 801b094:	4293      	cmp	r3, r2
 801b096:	d040      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	4a4e      	ldr	r2, [pc, #312]	@ (801b1d8 <HAL_DMA_Init+0x684>)
 801b09e:	4293      	cmp	r3, r2
 801b0a0:	d03b      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	4a4d      	ldr	r2, [pc, #308]	@ (801b1dc <HAL_DMA_Init+0x688>)
 801b0a8:	4293      	cmp	r3, r2
 801b0aa:	d036      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	4a4b      	ldr	r2, [pc, #300]	@ (801b1e0 <HAL_DMA_Init+0x68c>)
 801b0b2:	4293      	cmp	r3, r2
 801b0b4:	d031      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	4a4a      	ldr	r2, [pc, #296]	@ (801b1e4 <HAL_DMA_Init+0x690>)
 801b0bc:	4293      	cmp	r3, r2
 801b0be:	d02c      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	4a48      	ldr	r2, [pc, #288]	@ (801b1e8 <HAL_DMA_Init+0x694>)
 801b0c6:	4293      	cmp	r3, r2
 801b0c8:	d027      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	4a47      	ldr	r2, [pc, #284]	@ (801b1ec <HAL_DMA_Init+0x698>)
 801b0d0:	4293      	cmp	r3, r2
 801b0d2:	d022      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	4a45      	ldr	r2, [pc, #276]	@ (801b1f0 <HAL_DMA_Init+0x69c>)
 801b0da:	4293      	cmp	r3, r2
 801b0dc:	d01d      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	4a44      	ldr	r2, [pc, #272]	@ (801b1f4 <HAL_DMA_Init+0x6a0>)
 801b0e4:	4293      	cmp	r3, r2
 801b0e6:	d018      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	4a42      	ldr	r2, [pc, #264]	@ (801b1f8 <HAL_DMA_Init+0x6a4>)
 801b0ee:	4293      	cmp	r3, r2
 801b0f0:	d013      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	4a41      	ldr	r2, [pc, #260]	@ (801b1fc <HAL_DMA_Init+0x6a8>)
 801b0f8:	4293      	cmp	r3, r2
 801b0fa:	d00e      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	4a3f      	ldr	r2, [pc, #252]	@ (801b200 <HAL_DMA_Init+0x6ac>)
 801b102:	4293      	cmp	r3, r2
 801b104:	d009      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	4a3e      	ldr	r2, [pc, #248]	@ (801b204 <HAL_DMA_Init+0x6b0>)
 801b10c:	4293      	cmp	r3, r2
 801b10e:	d004      	beq.n	801b11a <HAL_DMA_Init+0x5c6>
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	4a3c      	ldr	r2, [pc, #240]	@ (801b208 <HAL_DMA_Init+0x6b4>)
 801b116:	4293      	cmp	r3, r2
 801b118:	d101      	bne.n	801b11e <HAL_DMA_Init+0x5ca>
 801b11a:	2301      	movs	r3, #1
 801b11c:	e000      	b.n	801b120 <HAL_DMA_Init+0x5cc>
 801b11e:	2300      	movs	r3, #0
 801b120:	2b00      	cmp	r3, #0
 801b122:	d032      	beq.n	801b18a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801b124:	6878      	ldr	r0, [r7, #4]
 801b126:	f001 fb0f 	bl	801c748 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	689b      	ldr	r3, [r3, #8]
 801b12e:	2b80      	cmp	r3, #128	@ 0x80
 801b130:	d102      	bne.n	801b138 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	2200      	movs	r2, #0
 801b136:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	685a      	ldr	r2, [r3, #4]
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b140:	b2d2      	uxtb	r2, r2
 801b142:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b148:	687a      	ldr	r2, [r7, #4]
 801b14a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801b14c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	685b      	ldr	r3, [r3, #4]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d010      	beq.n	801b178 <HAL_DMA_Init+0x624>
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	685b      	ldr	r3, [r3, #4]
 801b15a:	2b08      	cmp	r3, #8
 801b15c:	d80c      	bhi.n	801b178 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801b15e:	6878      	ldr	r0, [r7, #4]
 801b160:	f001 fb8c 	bl	801c87c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b168:	2200      	movs	r2, #0
 801b16a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b170:	687a      	ldr	r2, [r7, #4]
 801b172:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b174:	605a      	str	r2, [r3, #4]
 801b176:	e008      	b.n	801b18a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	2200      	movs	r2, #0
 801b17c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	2200      	movs	r2, #0
 801b182:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	2200      	movs	r2, #0
 801b188:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	2200      	movs	r2, #0
 801b18e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	2201      	movs	r2, #1
 801b194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801b198:	2300      	movs	r3, #0
}
 801b19a:	4618      	mov	r0, r3
 801b19c:	3718      	adds	r7, #24
 801b19e:	46bd      	mov	sp, r7
 801b1a0:	bd80      	pop	{r7, pc}
 801b1a2:	bf00      	nop
 801b1a4:	a7fdabf8 	.word	0xa7fdabf8
 801b1a8:	cccccccd 	.word	0xcccccccd
 801b1ac:	40020010 	.word	0x40020010
 801b1b0:	40020028 	.word	0x40020028
 801b1b4:	40020040 	.word	0x40020040
 801b1b8:	40020058 	.word	0x40020058
 801b1bc:	40020070 	.word	0x40020070
 801b1c0:	40020088 	.word	0x40020088
 801b1c4:	400200a0 	.word	0x400200a0
 801b1c8:	400200b8 	.word	0x400200b8
 801b1cc:	40020410 	.word	0x40020410
 801b1d0:	40020428 	.word	0x40020428
 801b1d4:	40020440 	.word	0x40020440
 801b1d8:	40020458 	.word	0x40020458
 801b1dc:	40020470 	.word	0x40020470
 801b1e0:	40020488 	.word	0x40020488
 801b1e4:	400204a0 	.word	0x400204a0
 801b1e8:	400204b8 	.word	0x400204b8
 801b1ec:	58025408 	.word	0x58025408
 801b1f0:	5802541c 	.word	0x5802541c
 801b1f4:	58025430 	.word	0x58025430
 801b1f8:	58025444 	.word	0x58025444
 801b1fc:	58025458 	.word	0x58025458
 801b200:	5802546c 	.word	0x5802546c
 801b204:	58025480 	.word	0x58025480
 801b208:	58025494 	.word	0x58025494

0801b20c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801b20c:	b580      	push	{r7, lr}
 801b20e:	b084      	sub	sp, #16
 801b210:	af00      	add	r7, sp, #0
 801b212:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d101      	bne.n	801b21e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801b21a:	2301      	movs	r3, #1
 801b21c:	e237      	b.n	801b68e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801b224:	b2db      	uxtb	r3, r3
 801b226:	2b02      	cmp	r3, #2
 801b228:	d004      	beq.n	801b234 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	2280      	movs	r2, #128	@ 0x80
 801b22e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801b230:	2301      	movs	r3, #1
 801b232:	e22c      	b.n	801b68e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	4a5c      	ldr	r2, [pc, #368]	@ (801b3ac <HAL_DMA_Abort_IT+0x1a0>)
 801b23a:	4293      	cmp	r3, r2
 801b23c:	d04a      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	4a5b      	ldr	r2, [pc, #364]	@ (801b3b0 <HAL_DMA_Abort_IT+0x1a4>)
 801b244:	4293      	cmp	r3, r2
 801b246:	d045      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	4a59      	ldr	r2, [pc, #356]	@ (801b3b4 <HAL_DMA_Abort_IT+0x1a8>)
 801b24e:	4293      	cmp	r3, r2
 801b250:	d040      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	4a58      	ldr	r2, [pc, #352]	@ (801b3b8 <HAL_DMA_Abort_IT+0x1ac>)
 801b258:	4293      	cmp	r3, r2
 801b25a:	d03b      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	4a56      	ldr	r2, [pc, #344]	@ (801b3bc <HAL_DMA_Abort_IT+0x1b0>)
 801b262:	4293      	cmp	r3, r2
 801b264:	d036      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	681b      	ldr	r3, [r3, #0]
 801b26a:	4a55      	ldr	r2, [pc, #340]	@ (801b3c0 <HAL_DMA_Abort_IT+0x1b4>)
 801b26c:	4293      	cmp	r3, r2
 801b26e:	d031      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	4a53      	ldr	r2, [pc, #332]	@ (801b3c4 <HAL_DMA_Abort_IT+0x1b8>)
 801b276:	4293      	cmp	r3, r2
 801b278:	d02c      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	4a52      	ldr	r2, [pc, #328]	@ (801b3c8 <HAL_DMA_Abort_IT+0x1bc>)
 801b280:	4293      	cmp	r3, r2
 801b282:	d027      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	4a50      	ldr	r2, [pc, #320]	@ (801b3cc <HAL_DMA_Abort_IT+0x1c0>)
 801b28a:	4293      	cmp	r3, r2
 801b28c:	d022      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	4a4f      	ldr	r2, [pc, #316]	@ (801b3d0 <HAL_DMA_Abort_IT+0x1c4>)
 801b294:	4293      	cmp	r3, r2
 801b296:	d01d      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	4a4d      	ldr	r2, [pc, #308]	@ (801b3d4 <HAL_DMA_Abort_IT+0x1c8>)
 801b29e:	4293      	cmp	r3, r2
 801b2a0:	d018      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	4a4c      	ldr	r2, [pc, #304]	@ (801b3d8 <HAL_DMA_Abort_IT+0x1cc>)
 801b2a8:	4293      	cmp	r3, r2
 801b2aa:	d013      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	4a4a      	ldr	r2, [pc, #296]	@ (801b3dc <HAL_DMA_Abort_IT+0x1d0>)
 801b2b2:	4293      	cmp	r3, r2
 801b2b4:	d00e      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	4a49      	ldr	r2, [pc, #292]	@ (801b3e0 <HAL_DMA_Abort_IT+0x1d4>)
 801b2bc:	4293      	cmp	r3, r2
 801b2be:	d009      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	4a47      	ldr	r2, [pc, #284]	@ (801b3e4 <HAL_DMA_Abort_IT+0x1d8>)
 801b2c6:	4293      	cmp	r3, r2
 801b2c8:	d004      	beq.n	801b2d4 <HAL_DMA_Abort_IT+0xc8>
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	681b      	ldr	r3, [r3, #0]
 801b2ce:	4a46      	ldr	r2, [pc, #280]	@ (801b3e8 <HAL_DMA_Abort_IT+0x1dc>)
 801b2d0:	4293      	cmp	r3, r2
 801b2d2:	d101      	bne.n	801b2d8 <HAL_DMA_Abort_IT+0xcc>
 801b2d4:	2301      	movs	r3, #1
 801b2d6:	e000      	b.n	801b2da <HAL_DMA_Abort_IT+0xce>
 801b2d8:	2300      	movs	r3, #0
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	f000 8086 	beq.w	801b3ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	2204      	movs	r2, #4
 801b2e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	4a2f      	ldr	r2, [pc, #188]	@ (801b3ac <HAL_DMA_Abort_IT+0x1a0>)
 801b2ee:	4293      	cmp	r3, r2
 801b2f0:	d04a      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	4a2e      	ldr	r2, [pc, #184]	@ (801b3b0 <HAL_DMA_Abort_IT+0x1a4>)
 801b2f8:	4293      	cmp	r3, r2
 801b2fa:	d045      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	4a2c      	ldr	r2, [pc, #176]	@ (801b3b4 <HAL_DMA_Abort_IT+0x1a8>)
 801b302:	4293      	cmp	r3, r2
 801b304:	d040      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	4a2b      	ldr	r2, [pc, #172]	@ (801b3b8 <HAL_DMA_Abort_IT+0x1ac>)
 801b30c:	4293      	cmp	r3, r2
 801b30e:	d03b      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	4a29      	ldr	r2, [pc, #164]	@ (801b3bc <HAL_DMA_Abort_IT+0x1b0>)
 801b316:	4293      	cmp	r3, r2
 801b318:	d036      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	4a28      	ldr	r2, [pc, #160]	@ (801b3c0 <HAL_DMA_Abort_IT+0x1b4>)
 801b320:	4293      	cmp	r3, r2
 801b322:	d031      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	4a26      	ldr	r2, [pc, #152]	@ (801b3c4 <HAL_DMA_Abort_IT+0x1b8>)
 801b32a:	4293      	cmp	r3, r2
 801b32c:	d02c      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	4a25      	ldr	r2, [pc, #148]	@ (801b3c8 <HAL_DMA_Abort_IT+0x1bc>)
 801b334:	4293      	cmp	r3, r2
 801b336:	d027      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	4a23      	ldr	r2, [pc, #140]	@ (801b3cc <HAL_DMA_Abort_IT+0x1c0>)
 801b33e:	4293      	cmp	r3, r2
 801b340:	d022      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	4a22      	ldr	r2, [pc, #136]	@ (801b3d0 <HAL_DMA_Abort_IT+0x1c4>)
 801b348:	4293      	cmp	r3, r2
 801b34a:	d01d      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	4a20      	ldr	r2, [pc, #128]	@ (801b3d4 <HAL_DMA_Abort_IT+0x1c8>)
 801b352:	4293      	cmp	r3, r2
 801b354:	d018      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	4a1f      	ldr	r2, [pc, #124]	@ (801b3d8 <HAL_DMA_Abort_IT+0x1cc>)
 801b35c:	4293      	cmp	r3, r2
 801b35e:	d013      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	4a1d      	ldr	r2, [pc, #116]	@ (801b3dc <HAL_DMA_Abort_IT+0x1d0>)
 801b366:	4293      	cmp	r3, r2
 801b368:	d00e      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	4a1c      	ldr	r2, [pc, #112]	@ (801b3e0 <HAL_DMA_Abort_IT+0x1d4>)
 801b370:	4293      	cmp	r3, r2
 801b372:	d009      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	4a1a      	ldr	r2, [pc, #104]	@ (801b3e4 <HAL_DMA_Abort_IT+0x1d8>)
 801b37a:	4293      	cmp	r3, r2
 801b37c:	d004      	beq.n	801b388 <HAL_DMA_Abort_IT+0x17c>
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	4a19      	ldr	r2, [pc, #100]	@ (801b3e8 <HAL_DMA_Abort_IT+0x1dc>)
 801b384:	4293      	cmp	r3, r2
 801b386:	d108      	bne.n	801b39a <HAL_DMA_Abort_IT+0x18e>
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	681a      	ldr	r2, [r3, #0]
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	f022 0201 	bic.w	r2, r2, #1
 801b396:	601a      	str	r2, [r3, #0]
 801b398:	e178      	b.n	801b68c <HAL_DMA_Abort_IT+0x480>
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	681a      	ldr	r2, [r3, #0]
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	f022 0201 	bic.w	r2, r2, #1
 801b3a8:	601a      	str	r2, [r3, #0]
 801b3aa:	e16f      	b.n	801b68c <HAL_DMA_Abort_IT+0x480>
 801b3ac:	40020010 	.word	0x40020010
 801b3b0:	40020028 	.word	0x40020028
 801b3b4:	40020040 	.word	0x40020040
 801b3b8:	40020058 	.word	0x40020058
 801b3bc:	40020070 	.word	0x40020070
 801b3c0:	40020088 	.word	0x40020088
 801b3c4:	400200a0 	.word	0x400200a0
 801b3c8:	400200b8 	.word	0x400200b8
 801b3cc:	40020410 	.word	0x40020410
 801b3d0:	40020428 	.word	0x40020428
 801b3d4:	40020440 	.word	0x40020440
 801b3d8:	40020458 	.word	0x40020458
 801b3dc:	40020470 	.word	0x40020470
 801b3e0:	40020488 	.word	0x40020488
 801b3e4:	400204a0 	.word	0x400204a0
 801b3e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	681a      	ldr	r2, [r3, #0]
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	f022 020e 	bic.w	r2, r2, #14
 801b3fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	4a6c      	ldr	r2, [pc, #432]	@ (801b5b4 <HAL_DMA_Abort_IT+0x3a8>)
 801b402:	4293      	cmp	r3, r2
 801b404:	d04a      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	4a6b      	ldr	r2, [pc, #428]	@ (801b5b8 <HAL_DMA_Abort_IT+0x3ac>)
 801b40c:	4293      	cmp	r3, r2
 801b40e:	d045      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	4a69      	ldr	r2, [pc, #420]	@ (801b5bc <HAL_DMA_Abort_IT+0x3b0>)
 801b416:	4293      	cmp	r3, r2
 801b418:	d040      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	4a68      	ldr	r2, [pc, #416]	@ (801b5c0 <HAL_DMA_Abort_IT+0x3b4>)
 801b420:	4293      	cmp	r3, r2
 801b422:	d03b      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	4a66      	ldr	r2, [pc, #408]	@ (801b5c4 <HAL_DMA_Abort_IT+0x3b8>)
 801b42a:	4293      	cmp	r3, r2
 801b42c:	d036      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	4a65      	ldr	r2, [pc, #404]	@ (801b5c8 <HAL_DMA_Abort_IT+0x3bc>)
 801b434:	4293      	cmp	r3, r2
 801b436:	d031      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	4a63      	ldr	r2, [pc, #396]	@ (801b5cc <HAL_DMA_Abort_IT+0x3c0>)
 801b43e:	4293      	cmp	r3, r2
 801b440:	d02c      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	4a62      	ldr	r2, [pc, #392]	@ (801b5d0 <HAL_DMA_Abort_IT+0x3c4>)
 801b448:	4293      	cmp	r3, r2
 801b44a:	d027      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	4a60      	ldr	r2, [pc, #384]	@ (801b5d4 <HAL_DMA_Abort_IT+0x3c8>)
 801b452:	4293      	cmp	r3, r2
 801b454:	d022      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	4a5f      	ldr	r2, [pc, #380]	@ (801b5d8 <HAL_DMA_Abort_IT+0x3cc>)
 801b45c:	4293      	cmp	r3, r2
 801b45e:	d01d      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	4a5d      	ldr	r2, [pc, #372]	@ (801b5dc <HAL_DMA_Abort_IT+0x3d0>)
 801b466:	4293      	cmp	r3, r2
 801b468:	d018      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	4a5c      	ldr	r2, [pc, #368]	@ (801b5e0 <HAL_DMA_Abort_IT+0x3d4>)
 801b470:	4293      	cmp	r3, r2
 801b472:	d013      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	4a5a      	ldr	r2, [pc, #360]	@ (801b5e4 <HAL_DMA_Abort_IT+0x3d8>)
 801b47a:	4293      	cmp	r3, r2
 801b47c:	d00e      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	4a59      	ldr	r2, [pc, #356]	@ (801b5e8 <HAL_DMA_Abort_IT+0x3dc>)
 801b484:	4293      	cmp	r3, r2
 801b486:	d009      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	4a57      	ldr	r2, [pc, #348]	@ (801b5ec <HAL_DMA_Abort_IT+0x3e0>)
 801b48e:	4293      	cmp	r3, r2
 801b490:	d004      	beq.n	801b49c <HAL_DMA_Abort_IT+0x290>
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	4a56      	ldr	r2, [pc, #344]	@ (801b5f0 <HAL_DMA_Abort_IT+0x3e4>)
 801b498:	4293      	cmp	r3, r2
 801b49a:	d108      	bne.n	801b4ae <HAL_DMA_Abort_IT+0x2a2>
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	681a      	ldr	r2, [r3, #0]
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	f022 0201 	bic.w	r2, r2, #1
 801b4aa:	601a      	str	r2, [r3, #0]
 801b4ac:	e007      	b.n	801b4be <HAL_DMA_Abort_IT+0x2b2>
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	681a      	ldr	r2, [r3, #0]
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	f022 0201 	bic.w	r2, r2, #1
 801b4bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	4a3c      	ldr	r2, [pc, #240]	@ (801b5b4 <HAL_DMA_Abort_IT+0x3a8>)
 801b4c4:	4293      	cmp	r3, r2
 801b4c6:	d072      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	4a3a      	ldr	r2, [pc, #232]	@ (801b5b8 <HAL_DMA_Abort_IT+0x3ac>)
 801b4ce:	4293      	cmp	r3, r2
 801b4d0:	d06d      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	4a39      	ldr	r2, [pc, #228]	@ (801b5bc <HAL_DMA_Abort_IT+0x3b0>)
 801b4d8:	4293      	cmp	r3, r2
 801b4da:	d068      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	4a37      	ldr	r2, [pc, #220]	@ (801b5c0 <HAL_DMA_Abort_IT+0x3b4>)
 801b4e2:	4293      	cmp	r3, r2
 801b4e4:	d063      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	4a36      	ldr	r2, [pc, #216]	@ (801b5c4 <HAL_DMA_Abort_IT+0x3b8>)
 801b4ec:	4293      	cmp	r3, r2
 801b4ee:	d05e      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	4a34      	ldr	r2, [pc, #208]	@ (801b5c8 <HAL_DMA_Abort_IT+0x3bc>)
 801b4f6:	4293      	cmp	r3, r2
 801b4f8:	d059      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	4a33      	ldr	r2, [pc, #204]	@ (801b5cc <HAL_DMA_Abort_IT+0x3c0>)
 801b500:	4293      	cmp	r3, r2
 801b502:	d054      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	4a31      	ldr	r2, [pc, #196]	@ (801b5d0 <HAL_DMA_Abort_IT+0x3c4>)
 801b50a:	4293      	cmp	r3, r2
 801b50c:	d04f      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	4a30      	ldr	r2, [pc, #192]	@ (801b5d4 <HAL_DMA_Abort_IT+0x3c8>)
 801b514:	4293      	cmp	r3, r2
 801b516:	d04a      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	4a2e      	ldr	r2, [pc, #184]	@ (801b5d8 <HAL_DMA_Abort_IT+0x3cc>)
 801b51e:	4293      	cmp	r3, r2
 801b520:	d045      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	4a2d      	ldr	r2, [pc, #180]	@ (801b5dc <HAL_DMA_Abort_IT+0x3d0>)
 801b528:	4293      	cmp	r3, r2
 801b52a:	d040      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	4a2b      	ldr	r2, [pc, #172]	@ (801b5e0 <HAL_DMA_Abort_IT+0x3d4>)
 801b532:	4293      	cmp	r3, r2
 801b534:	d03b      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	4a2a      	ldr	r2, [pc, #168]	@ (801b5e4 <HAL_DMA_Abort_IT+0x3d8>)
 801b53c:	4293      	cmp	r3, r2
 801b53e:	d036      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	4a28      	ldr	r2, [pc, #160]	@ (801b5e8 <HAL_DMA_Abort_IT+0x3dc>)
 801b546:	4293      	cmp	r3, r2
 801b548:	d031      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	4a27      	ldr	r2, [pc, #156]	@ (801b5ec <HAL_DMA_Abort_IT+0x3e0>)
 801b550:	4293      	cmp	r3, r2
 801b552:	d02c      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	4a25      	ldr	r2, [pc, #148]	@ (801b5f0 <HAL_DMA_Abort_IT+0x3e4>)
 801b55a:	4293      	cmp	r3, r2
 801b55c:	d027      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	681b      	ldr	r3, [r3, #0]
 801b562:	4a24      	ldr	r2, [pc, #144]	@ (801b5f4 <HAL_DMA_Abort_IT+0x3e8>)
 801b564:	4293      	cmp	r3, r2
 801b566:	d022      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	4a22      	ldr	r2, [pc, #136]	@ (801b5f8 <HAL_DMA_Abort_IT+0x3ec>)
 801b56e:	4293      	cmp	r3, r2
 801b570:	d01d      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	4a21      	ldr	r2, [pc, #132]	@ (801b5fc <HAL_DMA_Abort_IT+0x3f0>)
 801b578:	4293      	cmp	r3, r2
 801b57a:	d018      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	4a1f      	ldr	r2, [pc, #124]	@ (801b600 <HAL_DMA_Abort_IT+0x3f4>)
 801b582:	4293      	cmp	r3, r2
 801b584:	d013      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	4a1e      	ldr	r2, [pc, #120]	@ (801b604 <HAL_DMA_Abort_IT+0x3f8>)
 801b58c:	4293      	cmp	r3, r2
 801b58e:	d00e      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	4a1c      	ldr	r2, [pc, #112]	@ (801b608 <HAL_DMA_Abort_IT+0x3fc>)
 801b596:	4293      	cmp	r3, r2
 801b598:	d009      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	4a1b      	ldr	r2, [pc, #108]	@ (801b60c <HAL_DMA_Abort_IT+0x400>)
 801b5a0:	4293      	cmp	r3, r2
 801b5a2:	d004      	beq.n	801b5ae <HAL_DMA_Abort_IT+0x3a2>
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	4a19      	ldr	r2, [pc, #100]	@ (801b610 <HAL_DMA_Abort_IT+0x404>)
 801b5aa:	4293      	cmp	r3, r2
 801b5ac:	d132      	bne.n	801b614 <HAL_DMA_Abort_IT+0x408>
 801b5ae:	2301      	movs	r3, #1
 801b5b0:	e031      	b.n	801b616 <HAL_DMA_Abort_IT+0x40a>
 801b5b2:	bf00      	nop
 801b5b4:	40020010 	.word	0x40020010
 801b5b8:	40020028 	.word	0x40020028
 801b5bc:	40020040 	.word	0x40020040
 801b5c0:	40020058 	.word	0x40020058
 801b5c4:	40020070 	.word	0x40020070
 801b5c8:	40020088 	.word	0x40020088
 801b5cc:	400200a0 	.word	0x400200a0
 801b5d0:	400200b8 	.word	0x400200b8
 801b5d4:	40020410 	.word	0x40020410
 801b5d8:	40020428 	.word	0x40020428
 801b5dc:	40020440 	.word	0x40020440
 801b5e0:	40020458 	.word	0x40020458
 801b5e4:	40020470 	.word	0x40020470
 801b5e8:	40020488 	.word	0x40020488
 801b5ec:	400204a0 	.word	0x400204a0
 801b5f0:	400204b8 	.word	0x400204b8
 801b5f4:	58025408 	.word	0x58025408
 801b5f8:	5802541c 	.word	0x5802541c
 801b5fc:	58025430 	.word	0x58025430
 801b600:	58025444 	.word	0x58025444
 801b604:	58025458 	.word	0x58025458
 801b608:	5802546c 	.word	0x5802546c
 801b60c:	58025480 	.word	0x58025480
 801b610:	58025494 	.word	0x58025494
 801b614:	2300      	movs	r3, #0
 801b616:	2b00      	cmp	r3, #0
 801b618:	d028      	beq.n	801b66c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b61e:	681a      	ldr	r2, [r3, #0]
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b628:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b62e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b634:	f003 031f 	and.w	r3, r3, #31
 801b638:	2201      	movs	r2, #1
 801b63a:	409a      	lsls	r2, r3
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b644:	687a      	ldr	r2, [r7, #4]
 801b646:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801b648:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d00c      	beq.n	801b66c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b656:	681a      	ldr	r2, [r3, #0]
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b65c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b660:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b666:	687a      	ldr	r2, [r7, #4]
 801b668:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b66a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	2201      	movs	r2, #1
 801b670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	2200      	movs	r2, #0
 801b678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b680:	2b00      	cmp	r3, #0
 801b682:	d003      	beq.n	801b68c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b688:	6878      	ldr	r0, [r7, #4]
 801b68a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801b68c:	2300      	movs	r3, #0
}
 801b68e:	4618      	mov	r0, r3
 801b690:	3710      	adds	r7, #16
 801b692:	46bd      	mov	sp, r7
 801b694:	bd80      	pop	{r7, pc}
 801b696:	bf00      	nop

0801b698 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b698:	b580      	push	{r7, lr}
 801b69a:	b08a      	sub	sp, #40	@ 0x28
 801b69c:	af00      	add	r7, sp, #0
 801b69e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801b6a0:	2300      	movs	r3, #0
 801b6a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801b6a4:	4b67      	ldr	r3, [pc, #412]	@ (801b844 <HAL_DMA_IRQHandler+0x1ac>)
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	4a67      	ldr	r2, [pc, #412]	@ (801b848 <HAL_DMA_IRQHandler+0x1b0>)
 801b6aa:	fba2 2303 	umull	r2, r3, r2, r3
 801b6ae:	0a9b      	lsrs	r3, r3, #10
 801b6b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b6b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b6bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801b6be:	6a3b      	ldr	r3, [r7, #32]
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801b6c4:	69fb      	ldr	r3, [r7, #28]
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	4a5f      	ldr	r2, [pc, #380]	@ (801b84c <HAL_DMA_IRQHandler+0x1b4>)
 801b6d0:	4293      	cmp	r3, r2
 801b6d2:	d04a      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	4a5d      	ldr	r2, [pc, #372]	@ (801b850 <HAL_DMA_IRQHandler+0x1b8>)
 801b6da:	4293      	cmp	r3, r2
 801b6dc:	d045      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	4a5c      	ldr	r2, [pc, #368]	@ (801b854 <HAL_DMA_IRQHandler+0x1bc>)
 801b6e4:	4293      	cmp	r3, r2
 801b6e6:	d040      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	4a5a      	ldr	r2, [pc, #360]	@ (801b858 <HAL_DMA_IRQHandler+0x1c0>)
 801b6ee:	4293      	cmp	r3, r2
 801b6f0:	d03b      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	4a59      	ldr	r2, [pc, #356]	@ (801b85c <HAL_DMA_IRQHandler+0x1c4>)
 801b6f8:	4293      	cmp	r3, r2
 801b6fa:	d036      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	681b      	ldr	r3, [r3, #0]
 801b700:	4a57      	ldr	r2, [pc, #348]	@ (801b860 <HAL_DMA_IRQHandler+0x1c8>)
 801b702:	4293      	cmp	r3, r2
 801b704:	d031      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	4a56      	ldr	r2, [pc, #344]	@ (801b864 <HAL_DMA_IRQHandler+0x1cc>)
 801b70c:	4293      	cmp	r3, r2
 801b70e:	d02c      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	4a54      	ldr	r2, [pc, #336]	@ (801b868 <HAL_DMA_IRQHandler+0x1d0>)
 801b716:	4293      	cmp	r3, r2
 801b718:	d027      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	4a53      	ldr	r2, [pc, #332]	@ (801b86c <HAL_DMA_IRQHandler+0x1d4>)
 801b720:	4293      	cmp	r3, r2
 801b722:	d022      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	681b      	ldr	r3, [r3, #0]
 801b728:	4a51      	ldr	r2, [pc, #324]	@ (801b870 <HAL_DMA_IRQHandler+0x1d8>)
 801b72a:	4293      	cmp	r3, r2
 801b72c:	d01d      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	4a50      	ldr	r2, [pc, #320]	@ (801b874 <HAL_DMA_IRQHandler+0x1dc>)
 801b734:	4293      	cmp	r3, r2
 801b736:	d018      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	4a4e      	ldr	r2, [pc, #312]	@ (801b878 <HAL_DMA_IRQHandler+0x1e0>)
 801b73e:	4293      	cmp	r3, r2
 801b740:	d013      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	4a4d      	ldr	r2, [pc, #308]	@ (801b87c <HAL_DMA_IRQHandler+0x1e4>)
 801b748:	4293      	cmp	r3, r2
 801b74a:	d00e      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	4a4b      	ldr	r2, [pc, #300]	@ (801b880 <HAL_DMA_IRQHandler+0x1e8>)
 801b752:	4293      	cmp	r3, r2
 801b754:	d009      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	4a4a      	ldr	r2, [pc, #296]	@ (801b884 <HAL_DMA_IRQHandler+0x1ec>)
 801b75c:	4293      	cmp	r3, r2
 801b75e:	d004      	beq.n	801b76a <HAL_DMA_IRQHandler+0xd2>
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	4a48      	ldr	r2, [pc, #288]	@ (801b888 <HAL_DMA_IRQHandler+0x1f0>)
 801b766:	4293      	cmp	r3, r2
 801b768:	d101      	bne.n	801b76e <HAL_DMA_IRQHandler+0xd6>
 801b76a:	2301      	movs	r3, #1
 801b76c:	e000      	b.n	801b770 <HAL_DMA_IRQHandler+0xd8>
 801b76e:	2300      	movs	r3, #0
 801b770:	2b00      	cmp	r3, #0
 801b772:	f000 842b 	beq.w	801bfcc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b77a:	f003 031f 	and.w	r3, r3, #31
 801b77e:	2208      	movs	r2, #8
 801b780:	409a      	lsls	r2, r3
 801b782:	69bb      	ldr	r3, [r7, #24]
 801b784:	4013      	ands	r3, r2
 801b786:	2b00      	cmp	r3, #0
 801b788:	f000 80a2 	beq.w	801b8d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	4a2e      	ldr	r2, [pc, #184]	@ (801b84c <HAL_DMA_IRQHandler+0x1b4>)
 801b792:	4293      	cmp	r3, r2
 801b794:	d04a      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	4a2d      	ldr	r2, [pc, #180]	@ (801b850 <HAL_DMA_IRQHandler+0x1b8>)
 801b79c:	4293      	cmp	r3, r2
 801b79e:	d045      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	4a2b      	ldr	r2, [pc, #172]	@ (801b854 <HAL_DMA_IRQHandler+0x1bc>)
 801b7a6:	4293      	cmp	r3, r2
 801b7a8:	d040      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	4a2a      	ldr	r2, [pc, #168]	@ (801b858 <HAL_DMA_IRQHandler+0x1c0>)
 801b7b0:	4293      	cmp	r3, r2
 801b7b2:	d03b      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	4a28      	ldr	r2, [pc, #160]	@ (801b85c <HAL_DMA_IRQHandler+0x1c4>)
 801b7ba:	4293      	cmp	r3, r2
 801b7bc:	d036      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	4a27      	ldr	r2, [pc, #156]	@ (801b860 <HAL_DMA_IRQHandler+0x1c8>)
 801b7c4:	4293      	cmp	r3, r2
 801b7c6:	d031      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	4a25      	ldr	r2, [pc, #148]	@ (801b864 <HAL_DMA_IRQHandler+0x1cc>)
 801b7ce:	4293      	cmp	r3, r2
 801b7d0:	d02c      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	681b      	ldr	r3, [r3, #0]
 801b7d6:	4a24      	ldr	r2, [pc, #144]	@ (801b868 <HAL_DMA_IRQHandler+0x1d0>)
 801b7d8:	4293      	cmp	r3, r2
 801b7da:	d027      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	4a22      	ldr	r2, [pc, #136]	@ (801b86c <HAL_DMA_IRQHandler+0x1d4>)
 801b7e2:	4293      	cmp	r3, r2
 801b7e4:	d022      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	4a21      	ldr	r2, [pc, #132]	@ (801b870 <HAL_DMA_IRQHandler+0x1d8>)
 801b7ec:	4293      	cmp	r3, r2
 801b7ee:	d01d      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	4a1f      	ldr	r2, [pc, #124]	@ (801b874 <HAL_DMA_IRQHandler+0x1dc>)
 801b7f6:	4293      	cmp	r3, r2
 801b7f8:	d018      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	4a1e      	ldr	r2, [pc, #120]	@ (801b878 <HAL_DMA_IRQHandler+0x1e0>)
 801b800:	4293      	cmp	r3, r2
 801b802:	d013      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	4a1c      	ldr	r2, [pc, #112]	@ (801b87c <HAL_DMA_IRQHandler+0x1e4>)
 801b80a:	4293      	cmp	r3, r2
 801b80c:	d00e      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	4a1b      	ldr	r2, [pc, #108]	@ (801b880 <HAL_DMA_IRQHandler+0x1e8>)
 801b814:	4293      	cmp	r3, r2
 801b816:	d009      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	4a19      	ldr	r2, [pc, #100]	@ (801b884 <HAL_DMA_IRQHandler+0x1ec>)
 801b81e:	4293      	cmp	r3, r2
 801b820:	d004      	beq.n	801b82c <HAL_DMA_IRQHandler+0x194>
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	4a18      	ldr	r2, [pc, #96]	@ (801b888 <HAL_DMA_IRQHandler+0x1f0>)
 801b828:	4293      	cmp	r3, r2
 801b82a:	d12f      	bne.n	801b88c <HAL_DMA_IRQHandler+0x1f4>
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	f003 0304 	and.w	r3, r3, #4
 801b836:	2b00      	cmp	r3, #0
 801b838:	bf14      	ite	ne
 801b83a:	2301      	movne	r3, #1
 801b83c:	2300      	moveq	r3, #0
 801b83e:	b2db      	uxtb	r3, r3
 801b840:	e02e      	b.n	801b8a0 <HAL_DMA_IRQHandler+0x208>
 801b842:	bf00      	nop
 801b844:	20000000 	.word	0x20000000
 801b848:	1b4e81b5 	.word	0x1b4e81b5
 801b84c:	40020010 	.word	0x40020010
 801b850:	40020028 	.word	0x40020028
 801b854:	40020040 	.word	0x40020040
 801b858:	40020058 	.word	0x40020058
 801b85c:	40020070 	.word	0x40020070
 801b860:	40020088 	.word	0x40020088
 801b864:	400200a0 	.word	0x400200a0
 801b868:	400200b8 	.word	0x400200b8
 801b86c:	40020410 	.word	0x40020410
 801b870:	40020428 	.word	0x40020428
 801b874:	40020440 	.word	0x40020440
 801b878:	40020458 	.word	0x40020458
 801b87c:	40020470 	.word	0x40020470
 801b880:	40020488 	.word	0x40020488
 801b884:	400204a0 	.word	0x400204a0
 801b888:	400204b8 	.word	0x400204b8
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	681b      	ldr	r3, [r3, #0]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	f003 0308 	and.w	r3, r3, #8
 801b896:	2b00      	cmp	r3, #0
 801b898:	bf14      	ite	ne
 801b89a:	2301      	movne	r3, #1
 801b89c:	2300      	moveq	r3, #0
 801b89e:	b2db      	uxtb	r3, r3
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d015      	beq.n	801b8d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	681a      	ldr	r2, [r3, #0]
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	f022 0204 	bic.w	r2, r2, #4
 801b8b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b8b8:	f003 031f 	and.w	r3, r3, #31
 801b8bc:	2208      	movs	r2, #8
 801b8be:	409a      	lsls	r2, r3
 801b8c0:	6a3b      	ldr	r3, [r7, #32]
 801b8c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b8c8:	f043 0201 	orr.w	r2, r3, #1
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b8d4:	f003 031f 	and.w	r3, r3, #31
 801b8d8:	69ba      	ldr	r2, [r7, #24]
 801b8da:	fa22 f303 	lsr.w	r3, r2, r3
 801b8de:	f003 0301 	and.w	r3, r3, #1
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d06e      	beq.n	801b9c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	4a69      	ldr	r2, [pc, #420]	@ (801ba90 <HAL_DMA_IRQHandler+0x3f8>)
 801b8ec:	4293      	cmp	r3, r2
 801b8ee:	d04a      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	4a67      	ldr	r2, [pc, #412]	@ (801ba94 <HAL_DMA_IRQHandler+0x3fc>)
 801b8f6:	4293      	cmp	r3, r2
 801b8f8:	d045      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	4a66      	ldr	r2, [pc, #408]	@ (801ba98 <HAL_DMA_IRQHandler+0x400>)
 801b900:	4293      	cmp	r3, r2
 801b902:	d040      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	4a64      	ldr	r2, [pc, #400]	@ (801ba9c <HAL_DMA_IRQHandler+0x404>)
 801b90a:	4293      	cmp	r3, r2
 801b90c:	d03b      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	4a63      	ldr	r2, [pc, #396]	@ (801baa0 <HAL_DMA_IRQHandler+0x408>)
 801b914:	4293      	cmp	r3, r2
 801b916:	d036      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	4a61      	ldr	r2, [pc, #388]	@ (801baa4 <HAL_DMA_IRQHandler+0x40c>)
 801b91e:	4293      	cmp	r3, r2
 801b920:	d031      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	4a60      	ldr	r2, [pc, #384]	@ (801baa8 <HAL_DMA_IRQHandler+0x410>)
 801b928:	4293      	cmp	r3, r2
 801b92a:	d02c      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	4a5e      	ldr	r2, [pc, #376]	@ (801baac <HAL_DMA_IRQHandler+0x414>)
 801b932:	4293      	cmp	r3, r2
 801b934:	d027      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	4a5d      	ldr	r2, [pc, #372]	@ (801bab0 <HAL_DMA_IRQHandler+0x418>)
 801b93c:	4293      	cmp	r3, r2
 801b93e:	d022      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	4a5b      	ldr	r2, [pc, #364]	@ (801bab4 <HAL_DMA_IRQHandler+0x41c>)
 801b946:	4293      	cmp	r3, r2
 801b948:	d01d      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	4a5a      	ldr	r2, [pc, #360]	@ (801bab8 <HAL_DMA_IRQHandler+0x420>)
 801b950:	4293      	cmp	r3, r2
 801b952:	d018      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	4a58      	ldr	r2, [pc, #352]	@ (801babc <HAL_DMA_IRQHandler+0x424>)
 801b95a:	4293      	cmp	r3, r2
 801b95c:	d013      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	4a57      	ldr	r2, [pc, #348]	@ (801bac0 <HAL_DMA_IRQHandler+0x428>)
 801b964:	4293      	cmp	r3, r2
 801b966:	d00e      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	4a55      	ldr	r2, [pc, #340]	@ (801bac4 <HAL_DMA_IRQHandler+0x42c>)
 801b96e:	4293      	cmp	r3, r2
 801b970:	d009      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	4a54      	ldr	r2, [pc, #336]	@ (801bac8 <HAL_DMA_IRQHandler+0x430>)
 801b978:	4293      	cmp	r3, r2
 801b97a:	d004      	beq.n	801b986 <HAL_DMA_IRQHandler+0x2ee>
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	4a52      	ldr	r2, [pc, #328]	@ (801bacc <HAL_DMA_IRQHandler+0x434>)
 801b982:	4293      	cmp	r3, r2
 801b984:	d10a      	bne.n	801b99c <HAL_DMA_IRQHandler+0x304>
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	695b      	ldr	r3, [r3, #20]
 801b98c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b990:	2b00      	cmp	r3, #0
 801b992:	bf14      	ite	ne
 801b994:	2301      	movne	r3, #1
 801b996:	2300      	moveq	r3, #0
 801b998:	b2db      	uxtb	r3, r3
 801b99a:	e003      	b.n	801b9a4 <HAL_DMA_IRQHandler+0x30c>
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d00d      	beq.n	801b9c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b9ac:	f003 031f 	and.w	r3, r3, #31
 801b9b0:	2201      	movs	r2, #1
 801b9b2:	409a      	lsls	r2, r3
 801b9b4:	6a3b      	ldr	r3, [r7, #32]
 801b9b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b9bc:	f043 0202 	orr.w	r2, r3, #2
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b9c8:	f003 031f 	and.w	r3, r3, #31
 801b9cc:	2204      	movs	r2, #4
 801b9ce:	409a      	lsls	r2, r3
 801b9d0:	69bb      	ldr	r3, [r7, #24]
 801b9d2:	4013      	ands	r3, r2
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	f000 808f 	beq.w	801baf8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	4a2c      	ldr	r2, [pc, #176]	@ (801ba90 <HAL_DMA_IRQHandler+0x3f8>)
 801b9e0:	4293      	cmp	r3, r2
 801b9e2:	d04a      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	4a2a      	ldr	r2, [pc, #168]	@ (801ba94 <HAL_DMA_IRQHandler+0x3fc>)
 801b9ea:	4293      	cmp	r3, r2
 801b9ec:	d045      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	4a29      	ldr	r2, [pc, #164]	@ (801ba98 <HAL_DMA_IRQHandler+0x400>)
 801b9f4:	4293      	cmp	r3, r2
 801b9f6:	d040      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	4a27      	ldr	r2, [pc, #156]	@ (801ba9c <HAL_DMA_IRQHandler+0x404>)
 801b9fe:	4293      	cmp	r3, r2
 801ba00:	d03b      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	4a26      	ldr	r2, [pc, #152]	@ (801baa0 <HAL_DMA_IRQHandler+0x408>)
 801ba08:	4293      	cmp	r3, r2
 801ba0a:	d036      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	4a24      	ldr	r2, [pc, #144]	@ (801baa4 <HAL_DMA_IRQHandler+0x40c>)
 801ba12:	4293      	cmp	r3, r2
 801ba14:	d031      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	4a23      	ldr	r2, [pc, #140]	@ (801baa8 <HAL_DMA_IRQHandler+0x410>)
 801ba1c:	4293      	cmp	r3, r2
 801ba1e:	d02c      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	4a21      	ldr	r2, [pc, #132]	@ (801baac <HAL_DMA_IRQHandler+0x414>)
 801ba26:	4293      	cmp	r3, r2
 801ba28:	d027      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	4a20      	ldr	r2, [pc, #128]	@ (801bab0 <HAL_DMA_IRQHandler+0x418>)
 801ba30:	4293      	cmp	r3, r2
 801ba32:	d022      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	4a1e      	ldr	r2, [pc, #120]	@ (801bab4 <HAL_DMA_IRQHandler+0x41c>)
 801ba3a:	4293      	cmp	r3, r2
 801ba3c:	d01d      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	4a1d      	ldr	r2, [pc, #116]	@ (801bab8 <HAL_DMA_IRQHandler+0x420>)
 801ba44:	4293      	cmp	r3, r2
 801ba46:	d018      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	4a1b      	ldr	r2, [pc, #108]	@ (801babc <HAL_DMA_IRQHandler+0x424>)
 801ba4e:	4293      	cmp	r3, r2
 801ba50:	d013      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	4a1a      	ldr	r2, [pc, #104]	@ (801bac0 <HAL_DMA_IRQHandler+0x428>)
 801ba58:	4293      	cmp	r3, r2
 801ba5a:	d00e      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	4a18      	ldr	r2, [pc, #96]	@ (801bac4 <HAL_DMA_IRQHandler+0x42c>)
 801ba62:	4293      	cmp	r3, r2
 801ba64:	d009      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	681b      	ldr	r3, [r3, #0]
 801ba6a:	4a17      	ldr	r2, [pc, #92]	@ (801bac8 <HAL_DMA_IRQHandler+0x430>)
 801ba6c:	4293      	cmp	r3, r2
 801ba6e:	d004      	beq.n	801ba7a <HAL_DMA_IRQHandler+0x3e2>
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	4a15      	ldr	r2, [pc, #84]	@ (801bacc <HAL_DMA_IRQHandler+0x434>)
 801ba76:	4293      	cmp	r3, r2
 801ba78:	d12a      	bne.n	801bad0 <HAL_DMA_IRQHandler+0x438>
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	681b      	ldr	r3, [r3, #0]
 801ba80:	f003 0302 	and.w	r3, r3, #2
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	bf14      	ite	ne
 801ba88:	2301      	movne	r3, #1
 801ba8a:	2300      	moveq	r3, #0
 801ba8c:	b2db      	uxtb	r3, r3
 801ba8e:	e023      	b.n	801bad8 <HAL_DMA_IRQHandler+0x440>
 801ba90:	40020010 	.word	0x40020010
 801ba94:	40020028 	.word	0x40020028
 801ba98:	40020040 	.word	0x40020040
 801ba9c:	40020058 	.word	0x40020058
 801baa0:	40020070 	.word	0x40020070
 801baa4:	40020088 	.word	0x40020088
 801baa8:	400200a0 	.word	0x400200a0
 801baac:	400200b8 	.word	0x400200b8
 801bab0:	40020410 	.word	0x40020410
 801bab4:	40020428 	.word	0x40020428
 801bab8:	40020440 	.word	0x40020440
 801babc:	40020458 	.word	0x40020458
 801bac0:	40020470 	.word	0x40020470
 801bac4:	40020488 	.word	0x40020488
 801bac8:	400204a0 	.word	0x400204a0
 801bacc:	400204b8 	.word	0x400204b8
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	681b      	ldr	r3, [r3, #0]
 801bad6:	2300      	movs	r3, #0
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d00d      	beq.n	801baf8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bae0:	f003 031f 	and.w	r3, r3, #31
 801bae4:	2204      	movs	r2, #4
 801bae6:	409a      	lsls	r2, r3
 801bae8:	6a3b      	ldr	r3, [r7, #32]
 801baea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801baf0:	f043 0204 	orr.w	r2, r3, #4
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bafc:	f003 031f 	and.w	r3, r3, #31
 801bb00:	2210      	movs	r2, #16
 801bb02:	409a      	lsls	r2, r3
 801bb04:	69bb      	ldr	r3, [r7, #24]
 801bb06:	4013      	ands	r3, r2
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	f000 80a6 	beq.w	801bc5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	4a85      	ldr	r2, [pc, #532]	@ (801bd28 <HAL_DMA_IRQHandler+0x690>)
 801bb14:	4293      	cmp	r3, r2
 801bb16:	d04a      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	4a83      	ldr	r2, [pc, #524]	@ (801bd2c <HAL_DMA_IRQHandler+0x694>)
 801bb1e:	4293      	cmp	r3, r2
 801bb20:	d045      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	4a82      	ldr	r2, [pc, #520]	@ (801bd30 <HAL_DMA_IRQHandler+0x698>)
 801bb28:	4293      	cmp	r3, r2
 801bb2a:	d040      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	4a80      	ldr	r2, [pc, #512]	@ (801bd34 <HAL_DMA_IRQHandler+0x69c>)
 801bb32:	4293      	cmp	r3, r2
 801bb34:	d03b      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	4a7f      	ldr	r2, [pc, #508]	@ (801bd38 <HAL_DMA_IRQHandler+0x6a0>)
 801bb3c:	4293      	cmp	r3, r2
 801bb3e:	d036      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	4a7d      	ldr	r2, [pc, #500]	@ (801bd3c <HAL_DMA_IRQHandler+0x6a4>)
 801bb46:	4293      	cmp	r3, r2
 801bb48:	d031      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	4a7c      	ldr	r2, [pc, #496]	@ (801bd40 <HAL_DMA_IRQHandler+0x6a8>)
 801bb50:	4293      	cmp	r3, r2
 801bb52:	d02c      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	4a7a      	ldr	r2, [pc, #488]	@ (801bd44 <HAL_DMA_IRQHandler+0x6ac>)
 801bb5a:	4293      	cmp	r3, r2
 801bb5c:	d027      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	4a79      	ldr	r2, [pc, #484]	@ (801bd48 <HAL_DMA_IRQHandler+0x6b0>)
 801bb64:	4293      	cmp	r3, r2
 801bb66:	d022      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	4a77      	ldr	r2, [pc, #476]	@ (801bd4c <HAL_DMA_IRQHandler+0x6b4>)
 801bb6e:	4293      	cmp	r3, r2
 801bb70:	d01d      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	4a76      	ldr	r2, [pc, #472]	@ (801bd50 <HAL_DMA_IRQHandler+0x6b8>)
 801bb78:	4293      	cmp	r3, r2
 801bb7a:	d018      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	4a74      	ldr	r2, [pc, #464]	@ (801bd54 <HAL_DMA_IRQHandler+0x6bc>)
 801bb82:	4293      	cmp	r3, r2
 801bb84:	d013      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	4a73      	ldr	r2, [pc, #460]	@ (801bd58 <HAL_DMA_IRQHandler+0x6c0>)
 801bb8c:	4293      	cmp	r3, r2
 801bb8e:	d00e      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	4a71      	ldr	r2, [pc, #452]	@ (801bd5c <HAL_DMA_IRQHandler+0x6c4>)
 801bb96:	4293      	cmp	r3, r2
 801bb98:	d009      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	4a70      	ldr	r2, [pc, #448]	@ (801bd60 <HAL_DMA_IRQHandler+0x6c8>)
 801bba0:	4293      	cmp	r3, r2
 801bba2:	d004      	beq.n	801bbae <HAL_DMA_IRQHandler+0x516>
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	4a6e      	ldr	r2, [pc, #440]	@ (801bd64 <HAL_DMA_IRQHandler+0x6cc>)
 801bbaa:	4293      	cmp	r3, r2
 801bbac:	d10a      	bne.n	801bbc4 <HAL_DMA_IRQHandler+0x52c>
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	f003 0308 	and.w	r3, r3, #8
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	bf14      	ite	ne
 801bbbc:	2301      	movne	r3, #1
 801bbbe:	2300      	moveq	r3, #0
 801bbc0:	b2db      	uxtb	r3, r3
 801bbc2:	e009      	b.n	801bbd8 <HAL_DMA_IRQHandler+0x540>
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	681b      	ldr	r3, [r3, #0]
 801bbca:	f003 0304 	and.w	r3, r3, #4
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	bf14      	ite	ne
 801bbd2:	2301      	movne	r3, #1
 801bbd4:	2300      	moveq	r3, #0
 801bbd6:	b2db      	uxtb	r3, r3
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d03e      	beq.n	801bc5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bbe0:	f003 031f 	and.w	r3, r3, #31
 801bbe4:	2210      	movs	r2, #16
 801bbe6:	409a      	lsls	r2, r3
 801bbe8:	6a3b      	ldr	r3, [r7, #32]
 801bbea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	681b      	ldr	r3, [r3, #0]
 801bbf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d018      	beq.n	801bc2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d108      	bne.n	801bc1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d024      	beq.n	801bc5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bc14:	6878      	ldr	r0, [r7, #4]
 801bc16:	4798      	blx	r3
 801bc18:	e01f      	b.n	801bc5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d01b      	beq.n	801bc5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bc26:	6878      	ldr	r0, [r7, #4]
 801bc28:	4798      	blx	r3
 801bc2a:	e016      	b.n	801bc5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d107      	bne.n	801bc4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	681a      	ldr	r2, [r3, #0]
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	f022 0208 	bic.w	r2, r2, #8
 801bc48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d003      	beq.n	801bc5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bc56:	6878      	ldr	r0, [r7, #4]
 801bc58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bc5e:	f003 031f 	and.w	r3, r3, #31
 801bc62:	2220      	movs	r2, #32
 801bc64:	409a      	lsls	r2, r3
 801bc66:	69bb      	ldr	r3, [r7, #24]
 801bc68:	4013      	ands	r3, r2
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	f000 8110 	beq.w	801be90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	681b      	ldr	r3, [r3, #0]
 801bc74:	4a2c      	ldr	r2, [pc, #176]	@ (801bd28 <HAL_DMA_IRQHandler+0x690>)
 801bc76:	4293      	cmp	r3, r2
 801bc78:	d04a      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	4a2b      	ldr	r2, [pc, #172]	@ (801bd2c <HAL_DMA_IRQHandler+0x694>)
 801bc80:	4293      	cmp	r3, r2
 801bc82:	d045      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	4a29      	ldr	r2, [pc, #164]	@ (801bd30 <HAL_DMA_IRQHandler+0x698>)
 801bc8a:	4293      	cmp	r3, r2
 801bc8c:	d040      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	4a28      	ldr	r2, [pc, #160]	@ (801bd34 <HAL_DMA_IRQHandler+0x69c>)
 801bc94:	4293      	cmp	r3, r2
 801bc96:	d03b      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	4a26      	ldr	r2, [pc, #152]	@ (801bd38 <HAL_DMA_IRQHandler+0x6a0>)
 801bc9e:	4293      	cmp	r3, r2
 801bca0:	d036      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	4a25      	ldr	r2, [pc, #148]	@ (801bd3c <HAL_DMA_IRQHandler+0x6a4>)
 801bca8:	4293      	cmp	r3, r2
 801bcaa:	d031      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	4a23      	ldr	r2, [pc, #140]	@ (801bd40 <HAL_DMA_IRQHandler+0x6a8>)
 801bcb2:	4293      	cmp	r3, r2
 801bcb4:	d02c      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	4a22      	ldr	r2, [pc, #136]	@ (801bd44 <HAL_DMA_IRQHandler+0x6ac>)
 801bcbc:	4293      	cmp	r3, r2
 801bcbe:	d027      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	4a20      	ldr	r2, [pc, #128]	@ (801bd48 <HAL_DMA_IRQHandler+0x6b0>)
 801bcc6:	4293      	cmp	r3, r2
 801bcc8:	d022      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	4a1f      	ldr	r2, [pc, #124]	@ (801bd4c <HAL_DMA_IRQHandler+0x6b4>)
 801bcd0:	4293      	cmp	r3, r2
 801bcd2:	d01d      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	4a1d      	ldr	r2, [pc, #116]	@ (801bd50 <HAL_DMA_IRQHandler+0x6b8>)
 801bcda:	4293      	cmp	r3, r2
 801bcdc:	d018      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	681b      	ldr	r3, [r3, #0]
 801bce2:	4a1c      	ldr	r2, [pc, #112]	@ (801bd54 <HAL_DMA_IRQHandler+0x6bc>)
 801bce4:	4293      	cmp	r3, r2
 801bce6:	d013      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	4a1a      	ldr	r2, [pc, #104]	@ (801bd58 <HAL_DMA_IRQHandler+0x6c0>)
 801bcee:	4293      	cmp	r3, r2
 801bcf0:	d00e      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	4a19      	ldr	r2, [pc, #100]	@ (801bd5c <HAL_DMA_IRQHandler+0x6c4>)
 801bcf8:	4293      	cmp	r3, r2
 801bcfa:	d009      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	4a17      	ldr	r2, [pc, #92]	@ (801bd60 <HAL_DMA_IRQHandler+0x6c8>)
 801bd02:	4293      	cmp	r3, r2
 801bd04:	d004      	beq.n	801bd10 <HAL_DMA_IRQHandler+0x678>
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	4a16      	ldr	r2, [pc, #88]	@ (801bd64 <HAL_DMA_IRQHandler+0x6cc>)
 801bd0c:	4293      	cmp	r3, r2
 801bd0e:	d12b      	bne.n	801bd68 <HAL_DMA_IRQHandler+0x6d0>
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	f003 0310 	and.w	r3, r3, #16
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	bf14      	ite	ne
 801bd1e:	2301      	movne	r3, #1
 801bd20:	2300      	moveq	r3, #0
 801bd22:	b2db      	uxtb	r3, r3
 801bd24:	e02a      	b.n	801bd7c <HAL_DMA_IRQHandler+0x6e4>
 801bd26:	bf00      	nop
 801bd28:	40020010 	.word	0x40020010
 801bd2c:	40020028 	.word	0x40020028
 801bd30:	40020040 	.word	0x40020040
 801bd34:	40020058 	.word	0x40020058
 801bd38:	40020070 	.word	0x40020070
 801bd3c:	40020088 	.word	0x40020088
 801bd40:	400200a0 	.word	0x400200a0
 801bd44:	400200b8 	.word	0x400200b8
 801bd48:	40020410 	.word	0x40020410
 801bd4c:	40020428 	.word	0x40020428
 801bd50:	40020440 	.word	0x40020440
 801bd54:	40020458 	.word	0x40020458
 801bd58:	40020470 	.word	0x40020470
 801bd5c:	40020488 	.word	0x40020488
 801bd60:	400204a0 	.word	0x400204a0
 801bd64:	400204b8 	.word	0x400204b8
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	f003 0302 	and.w	r3, r3, #2
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	bf14      	ite	ne
 801bd76:	2301      	movne	r3, #1
 801bd78:	2300      	moveq	r3, #0
 801bd7a:	b2db      	uxtb	r3, r3
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	f000 8087 	beq.w	801be90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bd86:	f003 031f 	and.w	r3, r3, #31
 801bd8a:	2220      	movs	r2, #32
 801bd8c:	409a      	lsls	r2, r3
 801bd8e:	6a3b      	ldr	r3, [r7, #32]
 801bd90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801bd98:	b2db      	uxtb	r3, r3
 801bd9a:	2b04      	cmp	r3, #4
 801bd9c:	d139      	bne.n	801be12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	681a      	ldr	r2, [r3, #0]
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	f022 0216 	bic.w	r2, r2, #22
 801bdac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	695a      	ldr	r2, [r3, #20]
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	681b      	ldr	r3, [r3, #0]
 801bdb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801bdbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d103      	bne.n	801bdce <HAL_DMA_IRQHandler+0x736>
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d007      	beq.n	801bdde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	681a      	ldr	r2, [r3, #0]
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	f022 0208 	bic.w	r2, r2, #8
 801bddc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bde2:	f003 031f 	and.w	r3, r3, #31
 801bde6:	223f      	movs	r2, #63	@ 0x3f
 801bde8:	409a      	lsls	r2, r3
 801bdea:	6a3b      	ldr	r3, [r7, #32]
 801bdec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	2201      	movs	r2, #1
 801bdf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	2200      	movs	r2, #0
 801bdfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801be02:	2b00      	cmp	r3, #0
 801be04:	f000 834a 	beq.w	801c49c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801be0c:	6878      	ldr	r0, [r7, #4]
 801be0e:	4798      	blx	r3
          }
          return;
 801be10:	e344      	b.n	801c49c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d018      	beq.n	801be52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d108      	bne.n	801be40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801be32:	2b00      	cmp	r3, #0
 801be34:	d02c      	beq.n	801be90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801be3a:	6878      	ldr	r0, [r7, #4]
 801be3c:	4798      	blx	r3
 801be3e:	e027      	b.n	801be90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be44:	2b00      	cmp	r3, #0
 801be46:	d023      	beq.n	801be90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be4c:	6878      	ldr	r0, [r7, #4]
 801be4e:	4798      	blx	r3
 801be50:	e01e      	b.n	801be90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d10f      	bne.n	801be80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	681a      	ldr	r2, [r3, #0]
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	f022 0210 	bic.w	r2, r2, #16
 801be6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	2201      	movs	r2, #1
 801be74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	2200      	movs	r2, #0
 801be7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be84:	2b00      	cmp	r3, #0
 801be86:	d003      	beq.n	801be90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be8c:	6878      	ldr	r0, [r7, #4]
 801be8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801be94:	2b00      	cmp	r3, #0
 801be96:	f000 8306 	beq.w	801c4a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801be9e:	f003 0301 	and.w	r3, r3, #1
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	f000 8088 	beq.w	801bfb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	2204      	movs	r2, #4
 801beac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	4a7a      	ldr	r2, [pc, #488]	@ (801c0a0 <HAL_DMA_IRQHandler+0xa08>)
 801beb6:	4293      	cmp	r3, r2
 801beb8:	d04a      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	4a79      	ldr	r2, [pc, #484]	@ (801c0a4 <HAL_DMA_IRQHandler+0xa0c>)
 801bec0:	4293      	cmp	r3, r2
 801bec2:	d045      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	4a77      	ldr	r2, [pc, #476]	@ (801c0a8 <HAL_DMA_IRQHandler+0xa10>)
 801beca:	4293      	cmp	r3, r2
 801becc:	d040      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	4a76      	ldr	r2, [pc, #472]	@ (801c0ac <HAL_DMA_IRQHandler+0xa14>)
 801bed4:	4293      	cmp	r3, r2
 801bed6:	d03b      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	4a74      	ldr	r2, [pc, #464]	@ (801c0b0 <HAL_DMA_IRQHandler+0xa18>)
 801bede:	4293      	cmp	r3, r2
 801bee0:	d036      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	4a73      	ldr	r2, [pc, #460]	@ (801c0b4 <HAL_DMA_IRQHandler+0xa1c>)
 801bee8:	4293      	cmp	r3, r2
 801beea:	d031      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	4a71      	ldr	r2, [pc, #452]	@ (801c0b8 <HAL_DMA_IRQHandler+0xa20>)
 801bef2:	4293      	cmp	r3, r2
 801bef4:	d02c      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	4a70      	ldr	r2, [pc, #448]	@ (801c0bc <HAL_DMA_IRQHandler+0xa24>)
 801befc:	4293      	cmp	r3, r2
 801befe:	d027      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	4a6e      	ldr	r2, [pc, #440]	@ (801c0c0 <HAL_DMA_IRQHandler+0xa28>)
 801bf06:	4293      	cmp	r3, r2
 801bf08:	d022      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	4a6d      	ldr	r2, [pc, #436]	@ (801c0c4 <HAL_DMA_IRQHandler+0xa2c>)
 801bf10:	4293      	cmp	r3, r2
 801bf12:	d01d      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	4a6b      	ldr	r2, [pc, #428]	@ (801c0c8 <HAL_DMA_IRQHandler+0xa30>)
 801bf1a:	4293      	cmp	r3, r2
 801bf1c:	d018      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	4a6a      	ldr	r2, [pc, #424]	@ (801c0cc <HAL_DMA_IRQHandler+0xa34>)
 801bf24:	4293      	cmp	r3, r2
 801bf26:	d013      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	4a68      	ldr	r2, [pc, #416]	@ (801c0d0 <HAL_DMA_IRQHandler+0xa38>)
 801bf2e:	4293      	cmp	r3, r2
 801bf30:	d00e      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	4a67      	ldr	r2, [pc, #412]	@ (801c0d4 <HAL_DMA_IRQHandler+0xa3c>)
 801bf38:	4293      	cmp	r3, r2
 801bf3a:	d009      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	4a65      	ldr	r2, [pc, #404]	@ (801c0d8 <HAL_DMA_IRQHandler+0xa40>)
 801bf42:	4293      	cmp	r3, r2
 801bf44:	d004      	beq.n	801bf50 <HAL_DMA_IRQHandler+0x8b8>
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	4a64      	ldr	r2, [pc, #400]	@ (801c0dc <HAL_DMA_IRQHandler+0xa44>)
 801bf4c:	4293      	cmp	r3, r2
 801bf4e:	d108      	bne.n	801bf62 <HAL_DMA_IRQHandler+0x8ca>
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	681a      	ldr	r2, [r3, #0]
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	f022 0201 	bic.w	r2, r2, #1
 801bf5e:	601a      	str	r2, [r3, #0]
 801bf60:	e007      	b.n	801bf72 <HAL_DMA_IRQHandler+0x8da>
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	681b      	ldr	r3, [r3, #0]
 801bf66:	681a      	ldr	r2, [r3, #0]
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	f022 0201 	bic.w	r2, r2, #1
 801bf70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	3301      	adds	r3, #1
 801bf76:	60fb      	str	r3, [r7, #12]
 801bf78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf7a:	429a      	cmp	r2, r3
 801bf7c:	d307      	bcc.n	801bf8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	f003 0301 	and.w	r3, r3, #1
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d1f2      	bne.n	801bf72 <HAL_DMA_IRQHandler+0x8da>
 801bf8c:	e000      	b.n	801bf90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801bf8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	f003 0301 	and.w	r3, r3, #1
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d004      	beq.n	801bfa8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	2203      	movs	r2, #3
 801bfa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801bfa6:	e003      	b.n	801bfb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	2201      	movs	r2, #1
 801bfac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	2200      	movs	r2, #0
 801bfb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	f000 8272 	beq.w	801c4a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfc6:	6878      	ldr	r0, [r7, #4]
 801bfc8:	4798      	blx	r3
 801bfca:	e26c      	b.n	801c4a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	4a43      	ldr	r2, [pc, #268]	@ (801c0e0 <HAL_DMA_IRQHandler+0xa48>)
 801bfd2:	4293      	cmp	r3, r2
 801bfd4:	d022      	beq.n	801c01c <HAL_DMA_IRQHandler+0x984>
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	4a42      	ldr	r2, [pc, #264]	@ (801c0e4 <HAL_DMA_IRQHandler+0xa4c>)
 801bfdc:	4293      	cmp	r3, r2
 801bfde:	d01d      	beq.n	801c01c <HAL_DMA_IRQHandler+0x984>
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	4a40      	ldr	r2, [pc, #256]	@ (801c0e8 <HAL_DMA_IRQHandler+0xa50>)
 801bfe6:	4293      	cmp	r3, r2
 801bfe8:	d018      	beq.n	801c01c <HAL_DMA_IRQHandler+0x984>
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	4a3f      	ldr	r2, [pc, #252]	@ (801c0ec <HAL_DMA_IRQHandler+0xa54>)
 801bff0:	4293      	cmp	r3, r2
 801bff2:	d013      	beq.n	801c01c <HAL_DMA_IRQHandler+0x984>
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	4a3d      	ldr	r2, [pc, #244]	@ (801c0f0 <HAL_DMA_IRQHandler+0xa58>)
 801bffa:	4293      	cmp	r3, r2
 801bffc:	d00e      	beq.n	801c01c <HAL_DMA_IRQHandler+0x984>
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	4a3c      	ldr	r2, [pc, #240]	@ (801c0f4 <HAL_DMA_IRQHandler+0xa5c>)
 801c004:	4293      	cmp	r3, r2
 801c006:	d009      	beq.n	801c01c <HAL_DMA_IRQHandler+0x984>
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	681b      	ldr	r3, [r3, #0]
 801c00c:	4a3a      	ldr	r2, [pc, #232]	@ (801c0f8 <HAL_DMA_IRQHandler+0xa60>)
 801c00e:	4293      	cmp	r3, r2
 801c010:	d004      	beq.n	801c01c <HAL_DMA_IRQHandler+0x984>
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	4a39      	ldr	r2, [pc, #228]	@ (801c0fc <HAL_DMA_IRQHandler+0xa64>)
 801c018:	4293      	cmp	r3, r2
 801c01a:	d101      	bne.n	801c020 <HAL_DMA_IRQHandler+0x988>
 801c01c:	2301      	movs	r3, #1
 801c01e:	e000      	b.n	801c022 <HAL_DMA_IRQHandler+0x98a>
 801c020:	2300      	movs	r3, #0
 801c022:	2b00      	cmp	r3, #0
 801c024:	f000 823f 	beq.w	801c4a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c034:	f003 031f 	and.w	r3, r3, #31
 801c038:	2204      	movs	r2, #4
 801c03a:	409a      	lsls	r2, r3
 801c03c:	697b      	ldr	r3, [r7, #20]
 801c03e:	4013      	ands	r3, r2
 801c040:	2b00      	cmp	r3, #0
 801c042:	f000 80cd 	beq.w	801c1e0 <HAL_DMA_IRQHandler+0xb48>
 801c046:	693b      	ldr	r3, [r7, #16]
 801c048:	f003 0304 	and.w	r3, r3, #4
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	f000 80c7 	beq.w	801c1e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c056:	f003 031f 	and.w	r3, r3, #31
 801c05a:	2204      	movs	r2, #4
 801c05c:	409a      	lsls	r2, r3
 801c05e:	69fb      	ldr	r3, [r7, #28]
 801c060:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c062:	693b      	ldr	r3, [r7, #16]
 801c064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d049      	beq.n	801c100 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801c06c:	693b      	ldr	r3, [r7, #16]
 801c06e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c072:	2b00      	cmp	r3, #0
 801c074:	d109      	bne.n	801c08a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	f000 8210 	beq.w	801c4a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c084:	6878      	ldr	r0, [r7, #4]
 801c086:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c088:	e20a      	b.n	801c4a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c08e:	2b00      	cmp	r3, #0
 801c090:	f000 8206 	beq.w	801c4a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c098:	6878      	ldr	r0, [r7, #4]
 801c09a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c09c:	e200      	b.n	801c4a0 <HAL_DMA_IRQHandler+0xe08>
 801c09e:	bf00      	nop
 801c0a0:	40020010 	.word	0x40020010
 801c0a4:	40020028 	.word	0x40020028
 801c0a8:	40020040 	.word	0x40020040
 801c0ac:	40020058 	.word	0x40020058
 801c0b0:	40020070 	.word	0x40020070
 801c0b4:	40020088 	.word	0x40020088
 801c0b8:	400200a0 	.word	0x400200a0
 801c0bc:	400200b8 	.word	0x400200b8
 801c0c0:	40020410 	.word	0x40020410
 801c0c4:	40020428 	.word	0x40020428
 801c0c8:	40020440 	.word	0x40020440
 801c0cc:	40020458 	.word	0x40020458
 801c0d0:	40020470 	.word	0x40020470
 801c0d4:	40020488 	.word	0x40020488
 801c0d8:	400204a0 	.word	0x400204a0
 801c0dc:	400204b8 	.word	0x400204b8
 801c0e0:	58025408 	.word	0x58025408
 801c0e4:	5802541c 	.word	0x5802541c
 801c0e8:	58025430 	.word	0x58025430
 801c0ec:	58025444 	.word	0x58025444
 801c0f0:	58025458 	.word	0x58025458
 801c0f4:	5802546c 	.word	0x5802546c
 801c0f8:	58025480 	.word	0x58025480
 801c0fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801c100:	693b      	ldr	r3, [r7, #16]
 801c102:	f003 0320 	and.w	r3, r3, #32
 801c106:	2b00      	cmp	r3, #0
 801c108:	d160      	bne.n	801c1cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	4a7f      	ldr	r2, [pc, #508]	@ (801c30c <HAL_DMA_IRQHandler+0xc74>)
 801c110:	4293      	cmp	r3, r2
 801c112:	d04a      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	4a7d      	ldr	r2, [pc, #500]	@ (801c310 <HAL_DMA_IRQHandler+0xc78>)
 801c11a:	4293      	cmp	r3, r2
 801c11c:	d045      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	4a7c      	ldr	r2, [pc, #496]	@ (801c314 <HAL_DMA_IRQHandler+0xc7c>)
 801c124:	4293      	cmp	r3, r2
 801c126:	d040      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	4a7a      	ldr	r2, [pc, #488]	@ (801c318 <HAL_DMA_IRQHandler+0xc80>)
 801c12e:	4293      	cmp	r3, r2
 801c130:	d03b      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	4a79      	ldr	r2, [pc, #484]	@ (801c31c <HAL_DMA_IRQHandler+0xc84>)
 801c138:	4293      	cmp	r3, r2
 801c13a:	d036      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	4a77      	ldr	r2, [pc, #476]	@ (801c320 <HAL_DMA_IRQHandler+0xc88>)
 801c142:	4293      	cmp	r3, r2
 801c144:	d031      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	4a76      	ldr	r2, [pc, #472]	@ (801c324 <HAL_DMA_IRQHandler+0xc8c>)
 801c14c:	4293      	cmp	r3, r2
 801c14e:	d02c      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	4a74      	ldr	r2, [pc, #464]	@ (801c328 <HAL_DMA_IRQHandler+0xc90>)
 801c156:	4293      	cmp	r3, r2
 801c158:	d027      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	4a73      	ldr	r2, [pc, #460]	@ (801c32c <HAL_DMA_IRQHandler+0xc94>)
 801c160:	4293      	cmp	r3, r2
 801c162:	d022      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	4a71      	ldr	r2, [pc, #452]	@ (801c330 <HAL_DMA_IRQHandler+0xc98>)
 801c16a:	4293      	cmp	r3, r2
 801c16c:	d01d      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	4a70      	ldr	r2, [pc, #448]	@ (801c334 <HAL_DMA_IRQHandler+0xc9c>)
 801c174:	4293      	cmp	r3, r2
 801c176:	d018      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	4a6e      	ldr	r2, [pc, #440]	@ (801c338 <HAL_DMA_IRQHandler+0xca0>)
 801c17e:	4293      	cmp	r3, r2
 801c180:	d013      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	4a6d      	ldr	r2, [pc, #436]	@ (801c33c <HAL_DMA_IRQHandler+0xca4>)
 801c188:	4293      	cmp	r3, r2
 801c18a:	d00e      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	4a6b      	ldr	r2, [pc, #428]	@ (801c340 <HAL_DMA_IRQHandler+0xca8>)
 801c192:	4293      	cmp	r3, r2
 801c194:	d009      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	4a6a      	ldr	r2, [pc, #424]	@ (801c344 <HAL_DMA_IRQHandler+0xcac>)
 801c19c:	4293      	cmp	r3, r2
 801c19e:	d004      	beq.n	801c1aa <HAL_DMA_IRQHandler+0xb12>
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	4a68      	ldr	r2, [pc, #416]	@ (801c348 <HAL_DMA_IRQHandler+0xcb0>)
 801c1a6:	4293      	cmp	r3, r2
 801c1a8:	d108      	bne.n	801c1bc <HAL_DMA_IRQHandler+0xb24>
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	681a      	ldr	r2, [r3, #0]
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	f022 0208 	bic.w	r2, r2, #8
 801c1b8:	601a      	str	r2, [r3, #0]
 801c1ba:	e007      	b.n	801c1cc <HAL_DMA_IRQHandler+0xb34>
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	681a      	ldr	r2, [r3, #0]
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	f022 0204 	bic.w	r2, r2, #4
 801c1ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	f000 8165 	beq.w	801c4a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c1da:	6878      	ldr	r0, [r7, #4]
 801c1dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c1de:	e15f      	b.n	801c4a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c1e4:	f003 031f 	and.w	r3, r3, #31
 801c1e8:	2202      	movs	r2, #2
 801c1ea:	409a      	lsls	r2, r3
 801c1ec:	697b      	ldr	r3, [r7, #20]
 801c1ee:	4013      	ands	r3, r2
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	f000 80c5 	beq.w	801c380 <HAL_DMA_IRQHandler+0xce8>
 801c1f6:	693b      	ldr	r3, [r7, #16]
 801c1f8:	f003 0302 	and.w	r3, r3, #2
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	f000 80bf 	beq.w	801c380 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c206:	f003 031f 	and.w	r3, r3, #31
 801c20a:	2202      	movs	r2, #2
 801c20c:	409a      	lsls	r2, r3
 801c20e:	69fb      	ldr	r3, [r7, #28]
 801c210:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c212:	693b      	ldr	r3, [r7, #16]
 801c214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d018      	beq.n	801c24e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801c21c:	693b      	ldr	r3, [r7, #16]
 801c21e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c222:	2b00      	cmp	r3, #0
 801c224:	d109      	bne.n	801c23a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	f000 813a 	beq.w	801c4a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c234:	6878      	ldr	r0, [r7, #4]
 801c236:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c238:	e134      	b.n	801c4a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c23e:	2b00      	cmp	r3, #0
 801c240:	f000 8130 	beq.w	801c4a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c248:	6878      	ldr	r0, [r7, #4]
 801c24a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c24c:	e12a      	b.n	801c4a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801c24e:	693b      	ldr	r3, [r7, #16]
 801c250:	f003 0320 	and.w	r3, r3, #32
 801c254:	2b00      	cmp	r3, #0
 801c256:	f040 8089 	bne.w	801c36c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	4a2b      	ldr	r2, [pc, #172]	@ (801c30c <HAL_DMA_IRQHandler+0xc74>)
 801c260:	4293      	cmp	r3, r2
 801c262:	d04a      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	4a29      	ldr	r2, [pc, #164]	@ (801c310 <HAL_DMA_IRQHandler+0xc78>)
 801c26a:	4293      	cmp	r3, r2
 801c26c:	d045      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	4a28      	ldr	r2, [pc, #160]	@ (801c314 <HAL_DMA_IRQHandler+0xc7c>)
 801c274:	4293      	cmp	r3, r2
 801c276:	d040      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	4a26      	ldr	r2, [pc, #152]	@ (801c318 <HAL_DMA_IRQHandler+0xc80>)
 801c27e:	4293      	cmp	r3, r2
 801c280:	d03b      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	4a25      	ldr	r2, [pc, #148]	@ (801c31c <HAL_DMA_IRQHandler+0xc84>)
 801c288:	4293      	cmp	r3, r2
 801c28a:	d036      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	4a23      	ldr	r2, [pc, #140]	@ (801c320 <HAL_DMA_IRQHandler+0xc88>)
 801c292:	4293      	cmp	r3, r2
 801c294:	d031      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	4a22      	ldr	r2, [pc, #136]	@ (801c324 <HAL_DMA_IRQHandler+0xc8c>)
 801c29c:	4293      	cmp	r3, r2
 801c29e:	d02c      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	681b      	ldr	r3, [r3, #0]
 801c2a4:	4a20      	ldr	r2, [pc, #128]	@ (801c328 <HAL_DMA_IRQHandler+0xc90>)
 801c2a6:	4293      	cmp	r3, r2
 801c2a8:	d027      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	4a1f      	ldr	r2, [pc, #124]	@ (801c32c <HAL_DMA_IRQHandler+0xc94>)
 801c2b0:	4293      	cmp	r3, r2
 801c2b2:	d022      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	4a1d      	ldr	r2, [pc, #116]	@ (801c330 <HAL_DMA_IRQHandler+0xc98>)
 801c2ba:	4293      	cmp	r3, r2
 801c2bc:	d01d      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	4a1c      	ldr	r2, [pc, #112]	@ (801c334 <HAL_DMA_IRQHandler+0xc9c>)
 801c2c4:	4293      	cmp	r3, r2
 801c2c6:	d018      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	4a1a      	ldr	r2, [pc, #104]	@ (801c338 <HAL_DMA_IRQHandler+0xca0>)
 801c2ce:	4293      	cmp	r3, r2
 801c2d0:	d013      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	4a19      	ldr	r2, [pc, #100]	@ (801c33c <HAL_DMA_IRQHandler+0xca4>)
 801c2d8:	4293      	cmp	r3, r2
 801c2da:	d00e      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	4a17      	ldr	r2, [pc, #92]	@ (801c340 <HAL_DMA_IRQHandler+0xca8>)
 801c2e2:	4293      	cmp	r3, r2
 801c2e4:	d009      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	4a16      	ldr	r2, [pc, #88]	@ (801c344 <HAL_DMA_IRQHandler+0xcac>)
 801c2ec:	4293      	cmp	r3, r2
 801c2ee:	d004      	beq.n	801c2fa <HAL_DMA_IRQHandler+0xc62>
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	4a14      	ldr	r2, [pc, #80]	@ (801c348 <HAL_DMA_IRQHandler+0xcb0>)
 801c2f6:	4293      	cmp	r3, r2
 801c2f8:	d128      	bne.n	801c34c <HAL_DMA_IRQHandler+0xcb4>
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	681a      	ldr	r2, [r3, #0]
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	f022 0214 	bic.w	r2, r2, #20
 801c308:	601a      	str	r2, [r3, #0]
 801c30a:	e027      	b.n	801c35c <HAL_DMA_IRQHandler+0xcc4>
 801c30c:	40020010 	.word	0x40020010
 801c310:	40020028 	.word	0x40020028
 801c314:	40020040 	.word	0x40020040
 801c318:	40020058 	.word	0x40020058
 801c31c:	40020070 	.word	0x40020070
 801c320:	40020088 	.word	0x40020088
 801c324:	400200a0 	.word	0x400200a0
 801c328:	400200b8 	.word	0x400200b8
 801c32c:	40020410 	.word	0x40020410
 801c330:	40020428 	.word	0x40020428
 801c334:	40020440 	.word	0x40020440
 801c338:	40020458 	.word	0x40020458
 801c33c:	40020470 	.word	0x40020470
 801c340:	40020488 	.word	0x40020488
 801c344:	400204a0 	.word	0x400204a0
 801c348:	400204b8 	.word	0x400204b8
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	681b      	ldr	r3, [r3, #0]
 801c350:	681a      	ldr	r2, [r3, #0]
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	f022 020a 	bic.w	r2, r2, #10
 801c35a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	2201      	movs	r2, #1
 801c360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	2200      	movs	r2, #0
 801c368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c370:	2b00      	cmp	r3, #0
 801c372:	f000 8097 	beq.w	801c4a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c37a:	6878      	ldr	r0, [r7, #4]
 801c37c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c37e:	e091      	b.n	801c4a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c384:	f003 031f 	and.w	r3, r3, #31
 801c388:	2208      	movs	r2, #8
 801c38a:	409a      	lsls	r2, r3
 801c38c:	697b      	ldr	r3, [r7, #20]
 801c38e:	4013      	ands	r3, r2
 801c390:	2b00      	cmp	r3, #0
 801c392:	f000 8088 	beq.w	801c4a6 <HAL_DMA_IRQHandler+0xe0e>
 801c396:	693b      	ldr	r3, [r7, #16]
 801c398:	f003 0308 	and.w	r3, r3, #8
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	f000 8082 	beq.w	801c4a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	4a41      	ldr	r2, [pc, #260]	@ (801c4ac <HAL_DMA_IRQHandler+0xe14>)
 801c3a8:	4293      	cmp	r3, r2
 801c3aa:	d04a      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	4a3f      	ldr	r2, [pc, #252]	@ (801c4b0 <HAL_DMA_IRQHandler+0xe18>)
 801c3b2:	4293      	cmp	r3, r2
 801c3b4:	d045      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	4a3e      	ldr	r2, [pc, #248]	@ (801c4b4 <HAL_DMA_IRQHandler+0xe1c>)
 801c3bc:	4293      	cmp	r3, r2
 801c3be:	d040      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	4a3c      	ldr	r2, [pc, #240]	@ (801c4b8 <HAL_DMA_IRQHandler+0xe20>)
 801c3c6:	4293      	cmp	r3, r2
 801c3c8:	d03b      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	681b      	ldr	r3, [r3, #0]
 801c3ce:	4a3b      	ldr	r2, [pc, #236]	@ (801c4bc <HAL_DMA_IRQHandler+0xe24>)
 801c3d0:	4293      	cmp	r3, r2
 801c3d2:	d036      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	681b      	ldr	r3, [r3, #0]
 801c3d8:	4a39      	ldr	r2, [pc, #228]	@ (801c4c0 <HAL_DMA_IRQHandler+0xe28>)
 801c3da:	4293      	cmp	r3, r2
 801c3dc:	d031      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	4a38      	ldr	r2, [pc, #224]	@ (801c4c4 <HAL_DMA_IRQHandler+0xe2c>)
 801c3e4:	4293      	cmp	r3, r2
 801c3e6:	d02c      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	4a36      	ldr	r2, [pc, #216]	@ (801c4c8 <HAL_DMA_IRQHandler+0xe30>)
 801c3ee:	4293      	cmp	r3, r2
 801c3f0:	d027      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	4a35      	ldr	r2, [pc, #212]	@ (801c4cc <HAL_DMA_IRQHandler+0xe34>)
 801c3f8:	4293      	cmp	r3, r2
 801c3fa:	d022      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	4a33      	ldr	r2, [pc, #204]	@ (801c4d0 <HAL_DMA_IRQHandler+0xe38>)
 801c402:	4293      	cmp	r3, r2
 801c404:	d01d      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	4a32      	ldr	r2, [pc, #200]	@ (801c4d4 <HAL_DMA_IRQHandler+0xe3c>)
 801c40c:	4293      	cmp	r3, r2
 801c40e:	d018      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	4a30      	ldr	r2, [pc, #192]	@ (801c4d8 <HAL_DMA_IRQHandler+0xe40>)
 801c416:	4293      	cmp	r3, r2
 801c418:	d013      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	681b      	ldr	r3, [r3, #0]
 801c41e:	4a2f      	ldr	r2, [pc, #188]	@ (801c4dc <HAL_DMA_IRQHandler+0xe44>)
 801c420:	4293      	cmp	r3, r2
 801c422:	d00e      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	4a2d      	ldr	r2, [pc, #180]	@ (801c4e0 <HAL_DMA_IRQHandler+0xe48>)
 801c42a:	4293      	cmp	r3, r2
 801c42c:	d009      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	4a2c      	ldr	r2, [pc, #176]	@ (801c4e4 <HAL_DMA_IRQHandler+0xe4c>)
 801c434:	4293      	cmp	r3, r2
 801c436:	d004      	beq.n	801c442 <HAL_DMA_IRQHandler+0xdaa>
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	4a2a      	ldr	r2, [pc, #168]	@ (801c4e8 <HAL_DMA_IRQHandler+0xe50>)
 801c43e:	4293      	cmp	r3, r2
 801c440:	d108      	bne.n	801c454 <HAL_DMA_IRQHandler+0xdbc>
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	681a      	ldr	r2, [r3, #0]
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	f022 021c 	bic.w	r2, r2, #28
 801c450:	601a      	str	r2, [r3, #0]
 801c452:	e007      	b.n	801c464 <HAL_DMA_IRQHandler+0xdcc>
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	681a      	ldr	r2, [r3, #0]
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	f022 020e 	bic.w	r2, r2, #14
 801c462:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c468:	f003 031f 	and.w	r3, r3, #31
 801c46c:	2201      	movs	r2, #1
 801c46e:	409a      	lsls	r2, r3
 801c470:	69fb      	ldr	r3, [r7, #28]
 801c472:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	2201      	movs	r2, #1
 801c478:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	2201      	movs	r2, #1
 801c47e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	2200      	movs	r2, #0
 801c486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d009      	beq.n	801c4a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c496:	6878      	ldr	r0, [r7, #4]
 801c498:	4798      	blx	r3
 801c49a:	e004      	b.n	801c4a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 801c49c:	bf00      	nop
 801c49e:	e002      	b.n	801c4a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c4a0:	bf00      	nop
 801c4a2:	e000      	b.n	801c4a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c4a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801c4a6:	3728      	adds	r7, #40	@ 0x28
 801c4a8:	46bd      	mov	sp, r7
 801c4aa:	bd80      	pop	{r7, pc}
 801c4ac:	40020010 	.word	0x40020010
 801c4b0:	40020028 	.word	0x40020028
 801c4b4:	40020040 	.word	0x40020040
 801c4b8:	40020058 	.word	0x40020058
 801c4bc:	40020070 	.word	0x40020070
 801c4c0:	40020088 	.word	0x40020088
 801c4c4:	400200a0 	.word	0x400200a0
 801c4c8:	400200b8 	.word	0x400200b8
 801c4cc:	40020410 	.word	0x40020410
 801c4d0:	40020428 	.word	0x40020428
 801c4d4:	40020440 	.word	0x40020440
 801c4d8:	40020458 	.word	0x40020458
 801c4dc:	40020470 	.word	0x40020470
 801c4e0:	40020488 	.word	0x40020488
 801c4e4:	400204a0 	.word	0x400204a0
 801c4e8:	400204b8 	.word	0x400204b8

0801c4ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801c4ec:	b480      	push	{r7}
 801c4ee:	b085      	sub	sp, #20
 801c4f0:	af00      	add	r7, sp, #0
 801c4f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	4a42      	ldr	r2, [pc, #264]	@ (801c604 <DMA_CalcBaseAndBitshift+0x118>)
 801c4fa:	4293      	cmp	r3, r2
 801c4fc:	d04a      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	4a41      	ldr	r2, [pc, #260]	@ (801c608 <DMA_CalcBaseAndBitshift+0x11c>)
 801c504:	4293      	cmp	r3, r2
 801c506:	d045      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	4a3f      	ldr	r2, [pc, #252]	@ (801c60c <DMA_CalcBaseAndBitshift+0x120>)
 801c50e:	4293      	cmp	r3, r2
 801c510:	d040      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	4a3e      	ldr	r2, [pc, #248]	@ (801c610 <DMA_CalcBaseAndBitshift+0x124>)
 801c518:	4293      	cmp	r3, r2
 801c51a:	d03b      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	4a3c      	ldr	r2, [pc, #240]	@ (801c614 <DMA_CalcBaseAndBitshift+0x128>)
 801c522:	4293      	cmp	r3, r2
 801c524:	d036      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	4a3b      	ldr	r2, [pc, #236]	@ (801c618 <DMA_CalcBaseAndBitshift+0x12c>)
 801c52c:	4293      	cmp	r3, r2
 801c52e:	d031      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	4a39      	ldr	r2, [pc, #228]	@ (801c61c <DMA_CalcBaseAndBitshift+0x130>)
 801c536:	4293      	cmp	r3, r2
 801c538:	d02c      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	4a38      	ldr	r2, [pc, #224]	@ (801c620 <DMA_CalcBaseAndBitshift+0x134>)
 801c540:	4293      	cmp	r3, r2
 801c542:	d027      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	4a36      	ldr	r2, [pc, #216]	@ (801c624 <DMA_CalcBaseAndBitshift+0x138>)
 801c54a:	4293      	cmp	r3, r2
 801c54c:	d022      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	4a35      	ldr	r2, [pc, #212]	@ (801c628 <DMA_CalcBaseAndBitshift+0x13c>)
 801c554:	4293      	cmp	r3, r2
 801c556:	d01d      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	4a33      	ldr	r2, [pc, #204]	@ (801c62c <DMA_CalcBaseAndBitshift+0x140>)
 801c55e:	4293      	cmp	r3, r2
 801c560:	d018      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	4a32      	ldr	r2, [pc, #200]	@ (801c630 <DMA_CalcBaseAndBitshift+0x144>)
 801c568:	4293      	cmp	r3, r2
 801c56a:	d013      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	4a30      	ldr	r2, [pc, #192]	@ (801c634 <DMA_CalcBaseAndBitshift+0x148>)
 801c572:	4293      	cmp	r3, r2
 801c574:	d00e      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	4a2f      	ldr	r2, [pc, #188]	@ (801c638 <DMA_CalcBaseAndBitshift+0x14c>)
 801c57c:	4293      	cmp	r3, r2
 801c57e:	d009      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	4a2d      	ldr	r2, [pc, #180]	@ (801c63c <DMA_CalcBaseAndBitshift+0x150>)
 801c586:	4293      	cmp	r3, r2
 801c588:	d004      	beq.n	801c594 <DMA_CalcBaseAndBitshift+0xa8>
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	4a2c      	ldr	r2, [pc, #176]	@ (801c640 <DMA_CalcBaseAndBitshift+0x154>)
 801c590:	4293      	cmp	r3, r2
 801c592:	d101      	bne.n	801c598 <DMA_CalcBaseAndBitshift+0xac>
 801c594:	2301      	movs	r3, #1
 801c596:	e000      	b.n	801c59a <DMA_CalcBaseAndBitshift+0xae>
 801c598:	2300      	movs	r3, #0
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d024      	beq.n	801c5e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	b2db      	uxtb	r3, r3
 801c5a4:	3b10      	subs	r3, #16
 801c5a6:	4a27      	ldr	r2, [pc, #156]	@ (801c644 <DMA_CalcBaseAndBitshift+0x158>)
 801c5a8:	fba2 2303 	umull	r2, r3, r2, r3
 801c5ac:	091b      	lsrs	r3, r3, #4
 801c5ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	f003 0307 	and.w	r3, r3, #7
 801c5b6:	4a24      	ldr	r2, [pc, #144]	@ (801c648 <DMA_CalcBaseAndBitshift+0x15c>)
 801c5b8:	5cd3      	ldrb	r3, [r2, r3]
 801c5ba:	461a      	mov	r2, r3
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	2b03      	cmp	r3, #3
 801c5c4:	d908      	bls.n	801c5d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	461a      	mov	r2, r3
 801c5cc:	4b1f      	ldr	r3, [pc, #124]	@ (801c64c <DMA_CalcBaseAndBitshift+0x160>)
 801c5ce:	4013      	ands	r3, r2
 801c5d0:	1d1a      	adds	r2, r3, #4
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	659a      	str	r2, [r3, #88]	@ 0x58
 801c5d6:	e00d      	b.n	801c5f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	461a      	mov	r2, r3
 801c5de:	4b1b      	ldr	r3, [pc, #108]	@ (801c64c <DMA_CalcBaseAndBitshift+0x160>)
 801c5e0:	4013      	ands	r3, r2
 801c5e2:	687a      	ldr	r2, [r7, #4]
 801c5e4:	6593      	str	r3, [r2, #88]	@ 0x58
 801c5e6:	e005      	b.n	801c5f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801c5f8:	4618      	mov	r0, r3
 801c5fa:	3714      	adds	r7, #20
 801c5fc:	46bd      	mov	sp, r7
 801c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c602:	4770      	bx	lr
 801c604:	40020010 	.word	0x40020010
 801c608:	40020028 	.word	0x40020028
 801c60c:	40020040 	.word	0x40020040
 801c610:	40020058 	.word	0x40020058
 801c614:	40020070 	.word	0x40020070
 801c618:	40020088 	.word	0x40020088
 801c61c:	400200a0 	.word	0x400200a0
 801c620:	400200b8 	.word	0x400200b8
 801c624:	40020410 	.word	0x40020410
 801c628:	40020428 	.word	0x40020428
 801c62c:	40020440 	.word	0x40020440
 801c630:	40020458 	.word	0x40020458
 801c634:	40020470 	.word	0x40020470
 801c638:	40020488 	.word	0x40020488
 801c63c:	400204a0 	.word	0x400204a0
 801c640:	400204b8 	.word	0x400204b8
 801c644:	aaaaaaab 	.word	0xaaaaaaab
 801c648:	08028040 	.word	0x08028040
 801c64c:	fffffc00 	.word	0xfffffc00

0801c650 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801c650:	b480      	push	{r7}
 801c652:	b085      	sub	sp, #20
 801c654:	af00      	add	r7, sp, #0
 801c656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c658:	2300      	movs	r3, #0
 801c65a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	699b      	ldr	r3, [r3, #24]
 801c660:	2b00      	cmp	r3, #0
 801c662:	d120      	bne.n	801c6a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c668:	2b03      	cmp	r3, #3
 801c66a:	d858      	bhi.n	801c71e <DMA_CheckFifoParam+0xce>
 801c66c:	a201      	add	r2, pc, #4	@ (adr r2, 801c674 <DMA_CheckFifoParam+0x24>)
 801c66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c672:	bf00      	nop
 801c674:	0801c685 	.word	0x0801c685
 801c678:	0801c697 	.word	0x0801c697
 801c67c:	0801c685 	.word	0x0801c685
 801c680:	0801c71f 	.word	0x0801c71f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c688:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d048      	beq.n	801c722 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801c690:	2301      	movs	r3, #1
 801c692:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c694:	e045      	b.n	801c722 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c69a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c69e:	d142      	bne.n	801c726 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801c6a0:	2301      	movs	r3, #1
 801c6a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c6a4:	e03f      	b.n	801c726 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	699b      	ldr	r3, [r3, #24]
 801c6aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c6ae:	d123      	bne.n	801c6f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c6b4:	2b03      	cmp	r3, #3
 801c6b6:	d838      	bhi.n	801c72a <DMA_CheckFifoParam+0xda>
 801c6b8:	a201      	add	r2, pc, #4	@ (adr r2, 801c6c0 <DMA_CheckFifoParam+0x70>)
 801c6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6be:	bf00      	nop
 801c6c0:	0801c6d1 	.word	0x0801c6d1
 801c6c4:	0801c6d7 	.word	0x0801c6d7
 801c6c8:	0801c6d1 	.word	0x0801c6d1
 801c6cc:	0801c6e9 	.word	0x0801c6e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801c6d0:	2301      	movs	r3, #1
 801c6d2:	73fb      	strb	r3, [r7, #15]
        break;
 801c6d4:	e030      	b.n	801c738 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c6da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d025      	beq.n	801c72e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801c6e2:	2301      	movs	r3, #1
 801c6e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c6e6:	e022      	b.n	801c72e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c6ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c6f0:	d11f      	bne.n	801c732 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801c6f2:	2301      	movs	r3, #1
 801c6f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c6f6:	e01c      	b.n	801c732 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c6fc:	2b02      	cmp	r3, #2
 801c6fe:	d902      	bls.n	801c706 <DMA_CheckFifoParam+0xb6>
 801c700:	2b03      	cmp	r3, #3
 801c702:	d003      	beq.n	801c70c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801c704:	e018      	b.n	801c738 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801c706:	2301      	movs	r3, #1
 801c708:	73fb      	strb	r3, [r7, #15]
        break;
 801c70a:	e015      	b.n	801c738 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c710:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c714:	2b00      	cmp	r3, #0
 801c716:	d00e      	beq.n	801c736 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801c718:	2301      	movs	r3, #1
 801c71a:	73fb      	strb	r3, [r7, #15]
    break;
 801c71c:	e00b      	b.n	801c736 <DMA_CheckFifoParam+0xe6>
        break;
 801c71e:	bf00      	nop
 801c720:	e00a      	b.n	801c738 <DMA_CheckFifoParam+0xe8>
        break;
 801c722:	bf00      	nop
 801c724:	e008      	b.n	801c738 <DMA_CheckFifoParam+0xe8>
        break;
 801c726:	bf00      	nop
 801c728:	e006      	b.n	801c738 <DMA_CheckFifoParam+0xe8>
        break;
 801c72a:	bf00      	nop
 801c72c:	e004      	b.n	801c738 <DMA_CheckFifoParam+0xe8>
        break;
 801c72e:	bf00      	nop
 801c730:	e002      	b.n	801c738 <DMA_CheckFifoParam+0xe8>
        break;
 801c732:	bf00      	nop
 801c734:	e000      	b.n	801c738 <DMA_CheckFifoParam+0xe8>
    break;
 801c736:	bf00      	nop
    }
  }

  return status;
 801c738:	7bfb      	ldrb	r3, [r7, #15]
}
 801c73a:	4618      	mov	r0, r3
 801c73c:	3714      	adds	r7, #20
 801c73e:	46bd      	mov	sp, r7
 801c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c744:	4770      	bx	lr
 801c746:	bf00      	nop

0801c748 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c748:	b480      	push	{r7}
 801c74a:	b085      	sub	sp, #20
 801c74c:	af00      	add	r7, sp, #0
 801c74e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	4a38      	ldr	r2, [pc, #224]	@ (801c83c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801c75c:	4293      	cmp	r3, r2
 801c75e:	d022      	beq.n	801c7a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	4a36      	ldr	r2, [pc, #216]	@ (801c840 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801c766:	4293      	cmp	r3, r2
 801c768:	d01d      	beq.n	801c7a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	4a35      	ldr	r2, [pc, #212]	@ (801c844 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801c770:	4293      	cmp	r3, r2
 801c772:	d018      	beq.n	801c7a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	4a33      	ldr	r2, [pc, #204]	@ (801c848 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801c77a:	4293      	cmp	r3, r2
 801c77c:	d013      	beq.n	801c7a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	681b      	ldr	r3, [r3, #0]
 801c782:	4a32      	ldr	r2, [pc, #200]	@ (801c84c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801c784:	4293      	cmp	r3, r2
 801c786:	d00e      	beq.n	801c7a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	681b      	ldr	r3, [r3, #0]
 801c78c:	4a30      	ldr	r2, [pc, #192]	@ (801c850 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801c78e:	4293      	cmp	r3, r2
 801c790:	d009      	beq.n	801c7a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	4a2f      	ldr	r2, [pc, #188]	@ (801c854 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801c798:	4293      	cmp	r3, r2
 801c79a:	d004      	beq.n	801c7a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	4a2d      	ldr	r2, [pc, #180]	@ (801c858 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801c7a2:	4293      	cmp	r3, r2
 801c7a4:	d101      	bne.n	801c7aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801c7a6:	2301      	movs	r3, #1
 801c7a8:	e000      	b.n	801c7ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801c7aa:	2300      	movs	r3, #0
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d01a      	beq.n	801c7e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	681b      	ldr	r3, [r3, #0]
 801c7b4:	b2db      	uxtb	r3, r3
 801c7b6:	3b08      	subs	r3, #8
 801c7b8:	4a28      	ldr	r2, [pc, #160]	@ (801c85c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801c7ba:	fba2 2303 	umull	r2, r3, r2, r3
 801c7be:	091b      	lsrs	r3, r3, #4
 801c7c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801c7c2:	68fa      	ldr	r2, [r7, #12]
 801c7c4:	4b26      	ldr	r3, [pc, #152]	@ (801c860 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801c7c6:	4413      	add	r3, r2
 801c7c8:	009b      	lsls	r3, r3, #2
 801c7ca:	461a      	mov	r2, r3
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	4a24      	ldr	r2, [pc, #144]	@ (801c864 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801c7d4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	f003 031f 	and.w	r3, r3, #31
 801c7dc:	2201      	movs	r2, #1
 801c7de:	409a      	lsls	r2, r3
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801c7e4:	e024      	b.n	801c830 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	b2db      	uxtb	r3, r3
 801c7ec:	3b10      	subs	r3, #16
 801c7ee:	4a1e      	ldr	r2, [pc, #120]	@ (801c868 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801c7f0:	fba2 2303 	umull	r2, r3, r2, r3
 801c7f4:	091b      	lsrs	r3, r3, #4
 801c7f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801c7f8:	68bb      	ldr	r3, [r7, #8]
 801c7fa:	4a1c      	ldr	r2, [pc, #112]	@ (801c86c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801c7fc:	4293      	cmp	r3, r2
 801c7fe:	d806      	bhi.n	801c80e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801c800:	68bb      	ldr	r3, [r7, #8]
 801c802:	4a1b      	ldr	r2, [pc, #108]	@ (801c870 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801c804:	4293      	cmp	r3, r2
 801c806:	d902      	bls.n	801c80e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	3308      	adds	r3, #8
 801c80c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801c80e:	68fa      	ldr	r2, [r7, #12]
 801c810:	4b18      	ldr	r3, [pc, #96]	@ (801c874 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801c812:	4413      	add	r3, r2
 801c814:	009b      	lsls	r3, r3, #2
 801c816:	461a      	mov	r2, r3
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	4a16      	ldr	r2, [pc, #88]	@ (801c878 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801c820:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	f003 031f 	and.w	r3, r3, #31
 801c828:	2201      	movs	r2, #1
 801c82a:	409a      	lsls	r2, r3
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801c830:	bf00      	nop
 801c832:	3714      	adds	r7, #20
 801c834:	46bd      	mov	sp, r7
 801c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c83a:	4770      	bx	lr
 801c83c:	58025408 	.word	0x58025408
 801c840:	5802541c 	.word	0x5802541c
 801c844:	58025430 	.word	0x58025430
 801c848:	58025444 	.word	0x58025444
 801c84c:	58025458 	.word	0x58025458
 801c850:	5802546c 	.word	0x5802546c
 801c854:	58025480 	.word	0x58025480
 801c858:	58025494 	.word	0x58025494
 801c85c:	cccccccd 	.word	0xcccccccd
 801c860:	16009600 	.word	0x16009600
 801c864:	58025880 	.word	0x58025880
 801c868:	aaaaaaab 	.word	0xaaaaaaab
 801c86c:	400204b8 	.word	0x400204b8
 801c870:	4002040f 	.word	0x4002040f
 801c874:	10008200 	.word	0x10008200
 801c878:	40020880 	.word	0x40020880

0801c87c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c87c:	b480      	push	{r7}
 801c87e:	b085      	sub	sp, #20
 801c880:	af00      	add	r7, sp, #0
 801c882:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	685b      	ldr	r3, [r3, #4]
 801c888:	b2db      	uxtb	r3, r3
 801c88a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d04a      	beq.n	801c928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	2b08      	cmp	r3, #8
 801c896:	d847      	bhi.n	801c928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	4a25      	ldr	r2, [pc, #148]	@ (801c934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801c89e:	4293      	cmp	r3, r2
 801c8a0:	d022      	beq.n	801c8e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	4a24      	ldr	r2, [pc, #144]	@ (801c938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801c8a8:	4293      	cmp	r3, r2
 801c8aa:	d01d      	beq.n	801c8e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	4a22      	ldr	r2, [pc, #136]	@ (801c93c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801c8b2:	4293      	cmp	r3, r2
 801c8b4:	d018      	beq.n	801c8e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	4a21      	ldr	r2, [pc, #132]	@ (801c940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801c8bc:	4293      	cmp	r3, r2
 801c8be:	d013      	beq.n	801c8e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	4a1f      	ldr	r2, [pc, #124]	@ (801c944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801c8c6:	4293      	cmp	r3, r2
 801c8c8:	d00e      	beq.n	801c8e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	4a1e      	ldr	r2, [pc, #120]	@ (801c948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801c8d0:	4293      	cmp	r3, r2
 801c8d2:	d009      	beq.n	801c8e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	4a1c      	ldr	r2, [pc, #112]	@ (801c94c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801c8da:	4293      	cmp	r3, r2
 801c8dc:	d004      	beq.n	801c8e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	4a1b      	ldr	r2, [pc, #108]	@ (801c950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801c8e4:	4293      	cmp	r3, r2
 801c8e6:	d101      	bne.n	801c8ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801c8e8:	2301      	movs	r3, #1
 801c8ea:	e000      	b.n	801c8ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d00a      	beq.n	801c908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801c8f2:	68fa      	ldr	r2, [r7, #12]
 801c8f4:	4b17      	ldr	r3, [pc, #92]	@ (801c954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801c8f6:	4413      	add	r3, r2
 801c8f8:	009b      	lsls	r3, r3, #2
 801c8fa:	461a      	mov	r2, r3
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	4a15      	ldr	r2, [pc, #84]	@ (801c958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801c904:	671a      	str	r2, [r3, #112]	@ 0x70
 801c906:	e009      	b.n	801c91c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801c908:	68fa      	ldr	r2, [r7, #12]
 801c90a:	4b14      	ldr	r3, [pc, #80]	@ (801c95c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801c90c:	4413      	add	r3, r2
 801c90e:	009b      	lsls	r3, r3, #2
 801c910:	461a      	mov	r2, r3
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	4a11      	ldr	r2, [pc, #68]	@ (801c960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801c91a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	3b01      	subs	r3, #1
 801c920:	2201      	movs	r2, #1
 801c922:	409a      	lsls	r2, r3
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801c928:	bf00      	nop
 801c92a:	3714      	adds	r7, #20
 801c92c:	46bd      	mov	sp, r7
 801c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c932:	4770      	bx	lr
 801c934:	58025408 	.word	0x58025408
 801c938:	5802541c 	.word	0x5802541c
 801c93c:	58025430 	.word	0x58025430
 801c940:	58025444 	.word	0x58025444
 801c944:	58025458 	.word	0x58025458
 801c948:	5802546c 	.word	0x5802546c
 801c94c:	58025480 	.word	0x58025480
 801c950:	58025494 	.word	0x58025494
 801c954:	1600963f 	.word	0x1600963f
 801c958:	58025940 	.word	0x58025940
 801c95c:	1000823f 	.word	0x1000823f
 801c960:	40020940 	.word	0x40020940

0801c964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c964:	b480      	push	{r7}
 801c966:	b089      	sub	sp, #36	@ 0x24
 801c968:	af00      	add	r7, sp, #0
 801c96a:	6078      	str	r0, [r7, #4]
 801c96c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801c96e:	2300      	movs	r3, #0
 801c970:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801c972:	4b89      	ldr	r3, [pc, #548]	@ (801cb98 <HAL_GPIO_Init+0x234>)
 801c974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c976:	e194      	b.n	801cca2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801c978:	683b      	ldr	r3, [r7, #0]
 801c97a:	681a      	ldr	r2, [r3, #0]
 801c97c:	2101      	movs	r1, #1
 801c97e:	69fb      	ldr	r3, [r7, #28]
 801c980:	fa01 f303 	lsl.w	r3, r1, r3
 801c984:	4013      	ands	r3, r2
 801c986:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801c988:	693b      	ldr	r3, [r7, #16]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	f000 8186 	beq.w	801cc9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c990:	683b      	ldr	r3, [r7, #0]
 801c992:	685b      	ldr	r3, [r3, #4]
 801c994:	f003 0303 	and.w	r3, r3, #3
 801c998:	2b01      	cmp	r3, #1
 801c99a:	d005      	beq.n	801c9a8 <HAL_GPIO_Init+0x44>
 801c99c:	683b      	ldr	r3, [r7, #0]
 801c99e:	685b      	ldr	r3, [r3, #4]
 801c9a0:	f003 0303 	and.w	r3, r3, #3
 801c9a4:	2b02      	cmp	r3, #2
 801c9a6:	d130      	bne.n	801ca0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	689b      	ldr	r3, [r3, #8]
 801c9ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801c9ae:	69fb      	ldr	r3, [r7, #28]
 801c9b0:	005b      	lsls	r3, r3, #1
 801c9b2:	2203      	movs	r2, #3
 801c9b4:	fa02 f303 	lsl.w	r3, r2, r3
 801c9b8:	43db      	mvns	r3, r3
 801c9ba:	69ba      	ldr	r2, [r7, #24]
 801c9bc:	4013      	ands	r3, r2
 801c9be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c9c0:	683b      	ldr	r3, [r7, #0]
 801c9c2:	68da      	ldr	r2, [r3, #12]
 801c9c4:	69fb      	ldr	r3, [r7, #28]
 801c9c6:	005b      	lsls	r3, r3, #1
 801c9c8:	fa02 f303 	lsl.w	r3, r2, r3
 801c9cc:	69ba      	ldr	r2, [r7, #24]
 801c9ce:	4313      	orrs	r3, r2
 801c9d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	69ba      	ldr	r2, [r7, #24]
 801c9d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	685b      	ldr	r3, [r3, #4]
 801c9dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c9de:	2201      	movs	r2, #1
 801c9e0:	69fb      	ldr	r3, [r7, #28]
 801c9e2:	fa02 f303 	lsl.w	r3, r2, r3
 801c9e6:	43db      	mvns	r3, r3
 801c9e8:	69ba      	ldr	r2, [r7, #24]
 801c9ea:	4013      	ands	r3, r2
 801c9ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c9ee:	683b      	ldr	r3, [r7, #0]
 801c9f0:	685b      	ldr	r3, [r3, #4]
 801c9f2:	091b      	lsrs	r3, r3, #4
 801c9f4:	f003 0201 	and.w	r2, r3, #1
 801c9f8:	69fb      	ldr	r3, [r7, #28]
 801c9fa:	fa02 f303 	lsl.w	r3, r2, r3
 801c9fe:	69ba      	ldr	r2, [r7, #24]
 801ca00:	4313      	orrs	r3, r2
 801ca02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	69ba      	ldr	r2, [r7, #24]
 801ca08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801ca0a:	683b      	ldr	r3, [r7, #0]
 801ca0c:	685b      	ldr	r3, [r3, #4]
 801ca0e:	f003 0303 	and.w	r3, r3, #3
 801ca12:	2b03      	cmp	r3, #3
 801ca14:	d017      	beq.n	801ca46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	68db      	ldr	r3, [r3, #12]
 801ca1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801ca1c:	69fb      	ldr	r3, [r7, #28]
 801ca1e:	005b      	lsls	r3, r3, #1
 801ca20:	2203      	movs	r2, #3
 801ca22:	fa02 f303 	lsl.w	r3, r2, r3
 801ca26:	43db      	mvns	r3, r3
 801ca28:	69ba      	ldr	r2, [r7, #24]
 801ca2a:	4013      	ands	r3, r2
 801ca2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801ca2e:	683b      	ldr	r3, [r7, #0]
 801ca30:	689a      	ldr	r2, [r3, #8]
 801ca32:	69fb      	ldr	r3, [r7, #28]
 801ca34:	005b      	lsls	r3, r3, #1
 801ca36:	fa02 f303 	lsl.w	r3, r2, r3
 801ca3a:	69ba      	ldr	r2, [r7, #24]
 801ca3c:	4313      	orrs	r3, r2
 801ca3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	69ba      	ldr	r2, [r7, #24]
 801ca44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801ca46:	683b      	ldr	r3, [r7, #0]
 801ca48:	685b      	ldr	r3, [r3, #4]
 801ca4a:	f003 0303 	and.w	r3, r3, #3
 801ca4e:	2b02      	cmp	r3, #2
 801ca50:	d123      	bne.n	801ca9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801ca52:	69fb      	ldr	r3, [r7, #28]
 801ca54:	08da      	lsrs	r2, r3, #3
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	3208      	adds	r2, #8
 801ca5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801ca60:	69fb      	ldr	r3, [r7, #28]
 801ca62:	f003 0307 	and.w	r3, r3, #7
 801ca66:	009b      	lsls	r3, r3, #2
 801ca68:	220f      	movs	r2, #15
 801ca6a:	fa02 f303 	lsl.w	r3, r2, r3
 801ca6e:	43db      	mvns	r3, r3
 801ca70:	69ba      	ldr	r2, [r7, #24]
 801ca72:	4013      	ands	r3, r2
 801ca74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801ca76:	683b      	ldr	r3, [r7, #0]
 801ca78:	691a      	ldr	r2, [r3, #16]
 801ca7a:	69fb      	ldr	r3, [r7, #28]
 801ca7c:	f003 0307 	and.w	r3, r3, #7
 801ca80:	009b      	lsls	r3, r3, #2
 801ca82:	fa02 f303 	lsl.w	r3, r2, r3
 801ca86:	69ba      	ldr	r2, [r7, #24]
 801ca88:	4313      	orrs	r3, r2
 801ca8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801ca8c:	69fb      	ldr	r3, [r7, #28]
 801ca8e:	08da      	lsrs	r2, r3, #3
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	3208      	adds	r2, #8
 801ca94:	69b9      	ldr	r1, [r7, #24]
 801ca96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801caa0:	69fb      	ldr	r3, [r7, #28]
 801caa2:	005b      	lsls	r3, r3, #1
 801caa4:	2203      	movs	r2, #3
 801caa6:	fa02 f303 	lsl.w	r3, r2, r3
 801caaa:	43db      	mvns	r3, r3
 801caac:	69ba      	ldr	r2, [r7, #24]
 801caae:	4013      	ands	r3, r2
 801cab0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801cab2:	683b      	ldr	r3, [r7, #0]
 801cab4:	685b      	ldr	r3, [r3, #4]
 801cab6:	f003 0203 	and.w	r2, r3, #3
 801caba:	69fb      	ldr	r3, [r7, #28]
 801cabc:	005b      	lsls	r3, r3, #1
 801cabe:	fa02 f303 	lsl.w	r3, r2, r3
 801cac2:	69ba      	ldr	r2, [r7, #24]
 801cac4:	4313      	orrs	r3, r2
 801cac6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	69ba      	ldr	r2, [r7, #24]
 801cacc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801cace:	683b      	ldr	r3, [r7, #0]
 801cad0:	685b      	ldr	r3, [r3, #4]
 801cad2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	f000 80e0 	beq.w	801cc9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801cadc:	4b2f      	ldr	r3, [pc, #188]	@ (801cb9c <HAL_GPIO_Init+0x238>)
 801cade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801cae2:	4a2e      	ldr	r2, [pc, #184]	@ (801cb9c <HAL_GPIO_Init+0x238>)
 801cae4:	f043 0302 	orr.w	r3, r3, #2
 801cae8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801caec:	4b2b      	ldr	r3, [pc, #172]	@ (801cb9c <HAL_GPIO_Init+0x238>)
 801caee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801caf2:	f003 0302 	and.w	r3, r3, #2
 801caf6:	60fb      	str	r3, [r7, #12]
 801caf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801cafa:	4a29      	ldr	r2, [pc, #164]	@ (801cba0 <HAL_GPIO_Init+0x23c>)
 801cafc:	69fb      	ldr	r3, [r7, #28]
 801cafe:	089b      	lsrs	r3, r3, #2
 801cb00:	3302      	adds	r3, #2
 801cb02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cb06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801cb08:	69fb      	ldr	r3, [r7, #28]
 801cb0a:	f003 0303 	and.w	r3, r3, #3
 801cb0e:	009b      	lsls	r3, r3, #2
 801cb10:	220f      	movs	r2, #15
 801cb12:	fa02 f303 	lsl.w	r3, r2, r3
 801cb16:	43db      	mvns	r3, r3
 801cb18:	69ba      	ldr	r2, [r7, #24]
 801cb1a:	4013      	ands	r3, r2
 801cb1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	4a20      	ldr	r2, [pc, #128]	@ (801cba4 <HAL_GPIO_Init+0x240>)
 801cb22:	4293      	cmp	r3, r2
 801cb24:	d052      	beq.n	801cbcc <HAL_GPIO_Init+0x268>
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	4a1f      	ldr	r2, [pc, #124]	@ (801cba8 <HAL_GPIO_Init+0x244>)
 801cb2a:	4293      	cmp	r3, r2
 801cb2c:	d031      	beq.n	801cb92 <HAL_GPIO_Init+0x22e>
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	4a1e      	ldr	r2, [pc, #120]	@ (801cbac <HAL_GPIO_Init+0x248>)
 801cb32:	4293      	cmp	r3, r2
 801cb34:	d02b      	beq.n	801cb8e <HAL_GPIO_Init+0x22a>
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	4a1d      	ldr	r2, [pc, #116]	@ (801cbb0 <HAL_GPIO_Init+0x24c>)
 801cb3a:	4293      	cmp	r3, r2
 801cb3c:	d025      	beq.n	801cb8a <HAL_GPIO_Init+0x226>
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	4a1c      	ldr	r2, [pc, #112]	@ (801cbb4 <HAL_GPIO_Init+0x250>)
 801cb42:	4293      	cmp	r3, r2
 801cb44:	d01f      	beq.n	801cb86 <HAL_GPIO_Init+0x222>
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	4a1b      	ldr	r2, [pc, #108]	@ (801cbb8 <HAL_GPIO_Init+0x254>)
 801cb4a:	4293      	cmp	r3, r2
 801cb4c:	d019      	beq.n	801cb82 <HAL_GPIO_Init+0x21e>
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	4a1a      	ldr	r2, [pc, #104]	@ (801cbbc <HAL_GPIO_Init+0x258>)
 801cb52:	4293      	cmp	r3, r2
 801cb54:	d013      	beq.n	801cb7e <HAL_GPIO_Init+0x21a>
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	4a19      	ldr	r2, [pc, #100]	@ (801cbc0 <HAL_GPIO_Init+0x25c>)
 801cb5a:	4293      	cmp	r3, r2
 801cb5c:	d00d      	beq.n	801cb7a <HAL_GPIO_Init+0x216>
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	4a18      	ldr	r2, [pc, #96]	@ (801cbc4 <HAL_GPIO_Init+0x260>)
 801cb62:	4293      	cmp	r3, r2
 801cb64:	d007      	beq.n	801cb76 <HAL_GPIO_Init+0x212>
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	4a17      	ldr	r2, [pc, #92]	@ (801cbc8 <HAL_GPIO_Init+0x264>)
 801cb6a:	4293      	cmp	r3, r2
 801cb6c:	d101      	bne.n	801cb72 <HAL_GPIO_Init+0x20e>
 801cb6e:	2309      	movs	r3, #9
 801cb70:	e02d      	b.n	801cbce <HAL_GPIO_Init+0x26a>
 801cb72:	230a      	movs	r3, #10
 801cb74:	e02b      	b.n	801cbce <HAL_GPIO_Init+0x26a>
 801cb76:	2308      	movs	r3, #8
 801cb78:	e029      	b.n	801cbce <HAL_GPIO_Init+0x26a>
 801cb7a:	2307      	movs	r3, #7
 801cb7c:	e027      	b.n	801cbce <HAL_GPIO_Init+0x26a>
 801cb7e:	2306      	movs	r3, #6
 801cb80:	e025      	b.n	801cbce <HAL_GPIO_Init+0x26a>
 801cb82:	2305      	movs	r3, #5
 801cb84:	e023      	b.n	801cbce <HAL_GPIO_Init+0x26a>
 801cb86:	2304      	movs	r3, #4
 801cb88:	e021      	b.n	801cbce <HAL_GPIO_Init+0x26a>
 801cb8a:	2303      	movs	r3, #3
 801cb8c:	e01f      	b.n	801cbce <HAL_GPIO_Init+0x26a>
 801cb8e:	2302      	movs	r3, #2
 801cb90:	e01d      	b.n	801cbce <HAL_GPIO_Init+0x26a>
 801cb92:	2301      	movs	r3, #1
 801cb94:	e01b      	b.n	801cbce <HAL_GPIO_Init+0x26a>
 801cb96:	bf00      	nop
 801cb98:	58000080 	.word	0x58000080
 801cb9c:	58024400 	.word	0x58024400
 801cba0:	58000400 	.word	0x58000400
 801cba4:	58020000 	.word	0x58020000
 801cba8:	58020400 	.word	0x58020400
 801cbac:	58020800 	.word	0x58020800
 801cbb0:	58020c00 	.word	0x58020c00
 801cbb4:	58021000 	.word	0x58021000
 801cbb8:	58021400 	.word	0x58021400
 801cbbc:	58021800 	.word	0x58021800
 801cbc0:	58021c00 	.word	0x58021c00
 801cbc4:	58022000 	.word	0x58022000
 801cbc8:	58022400 	.word	0x58022400
 801cbcc:	2300      	movs	r3, #0
 801cbce:	69fa      	ldr	r2, [r7, #28]
 801cbd0:	f002 0203 	and.w	r2, r2, #3
 801cbd4:	0092      	lsls	r2, r2, #2
 801cbd6:	4093      	lsls	r3, r2
 801cbd8:	69ba      	ldr	r2, [r7, #24]
 801cbda:	4313      	orrs	r3, r2
 801cbdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801cbde:	4938      	ldr	r1, [pc, #224]	@ (801ccc0 <HAL_GPIO_Init+0x35c>)
 801cbe0:	69fb      	ldr	r3, [r7, #28]
 801cbe2:	089b      	lsrs	r3, r3, #2
 801cbe4:	3302      	adds	r3, #2
 801cbe6:	69ba      	ldr	r2, [r7, #24]
 801cbe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801cbec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cbf4:	693b      	ldr	r3, [r7, #16]
 801cbf6:	43db      	mvns	r3, r3
 801cbf8:	69ba      	ldr	r2, [r7, #24]
 801cbfa:	4013      	ands	r3, r2
 801cbfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801cbfe:	683b      	ldr	r3, [r7, #0]
 801cc00:	685b      	ldr	r3, [r3, #4]
 801cc02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d003      	beq.n	801cc12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801cc0a:	69ba      	ldr	r2, [r7, #24]
 801cc0c:	693b      	ldr	r3, [r7, #16]
 801cc0e:	4313      	orrs	r3, r2
 801cc10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801cc12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801cc16:	69bb      	ldr	r3, [r7, #24]
 801cc18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801cc1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cc1e:	685b      	ldr	r3, [r3, #4]
 801cc20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cc22:	693b      	ldr	r3, [r7, #16]
 801cc24:	43db      	mvns	r3, r3
 801cc26:	69ba      	ldr	r2, [r7, #24]
 801cc28:	4013      	ands	r3, r2
 801cc2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801cc2c:	683b      	ldr	r3, [r7, #0]
 801cc2e:	685b      	ldr	r3, [r3, #4]
 801cc30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d003      	beq.n	801cc40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801cc38:	69ba      	ldr	r2, [r7, #24]
 801cc3a:	693b      	ldr	r3, [r7, #16]
 801cc3c:	4313      	orrs	r3, r2
 801cc3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801cc40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801cc44:	69bb      	ldr	r3, [r7, #24]
 801cc46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801cc48:	697b      	ldr	r3, [r7, #20]
 801cc4a:	685b      	ldr	r3, [r3, #4]
 801cc4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cc4e:	693b      	ldr	r3, [r7, #16]
 801cc50:	43db      	mvns	r3, r3
 801cc52:	69ba      	ldr	r2, [r7, #24]
 801cc54:	4013      	ands	r3, r2
 801cc56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801cc58:	683b      	ldr	r3, [r7, #0]
 801cc5a:	685b      	ldr	r3, [r3, #4]
 801cc5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d003      	beq.n	801cc6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801cc64:	69ba      	ldr	r2, [r7, #24]
 801cc66:	693b      	ldr	r3, [r7, #16]
 801cc68:	4313      	orrs	r3, r2
 801cc6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801cc6c:	697b      	ldr	r3, [r7, #20]
 801cc6e:	69ba      	ldr	r2, [r7, #24]
 801cc70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801cc72:	697b      	ldr	r3, [r7, #20]
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cc78:	693b      	ldr	r3, [r7, #16]
 801cc7a:	43db      	mvns	r3, r3
 801cc7c:	69ba      	ldr	r2, [r7, #24]
 801cc7e:	4013      	ands	r3, r2
 801cc80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801cc82:	683b      	ldr	r3, [r7, #0]
 801cc84:	685b      	ldr	r3, [r3, #4]
 801cc86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	d003      	beq.n	801cc96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801cc8e:	69ba      	ldr	r2, [r7, #24]
 801cc90:	693b      	ldr	r3, [r7, #16]
 801cc92:	4313      	orrs	r3, r2
 801cc94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801cc96:	697b      	ldr	r3, [r7, #20]
 801cc98:	69ba      	ldr	r2, [r7, #24]
 801cc9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801cc9c:	69fb      	ldr	r3, [r7, #28]
 801cc9e:	3301      	adds	r3, #1
 801cca0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801cca2:	683b      	ldr	r3, [r7, #0]
 801cca4:	681a      	ldr	r2, [r3, #0]
 801cca6:	69fb      	ldr	r3, [r7, #28]
 801cca8:	fa22 f303 	lsr.w	r3, r2, r3
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	f47f ae63 	bne.w	801c978 <HAL_GPIO_Init+0x14>
  }
}
 801ccb2:	bf00      	nop
 801ccb4:	bf00      	nop
 801ccb6:	3724      	adds	r7, #36	@ 0x24
 801ccb8:	46bd      	mov	sp, r7
 801ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccbe:	4770      	bx	lr
 801ccc0:	58000400 	.word	0x58000400

0801ccc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ccc4:	b480      	push	{r7}
 801ccc6:	b083      	sub	sp, #12
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	6078      	str	r0, [r7, #4]
 801cccc:	460b      	mov	r3, r1
 801ccce:	807b      	strh	r3, [r7, #2]
 801ccd0:	4613      	mov	r3, r2
 801ccd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ccd4:	787b      	ldrb	r3, [r7, #1]
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d003      	beq.n	801cce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ccda:	887a      	ldrh	r2, [r7, #2]
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801cce0:	e003      	b.n	801ccea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801cce2:	887b      	ldrh	r3, [r7, #2]
 801cce4:	041a      	lsls	r2, r3, #16
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	619a      	str	r2, [r3, #24]
}
 801ccea:	bf00      	nop
 801ccec:	370c      	adds	r7, #12
 801ccee:	46bd      	mov	sp, r7
 801ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccf4:	4770      	bx	lr
	...

0801ccf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801ccf8:	b580      	push	{r7, lr}
 801ccfa:	b082      	sub	sp, #8
 801ccfc:	af00      	add	r7, sp, #0
 801ccfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	d101      	bne.n	801cd0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801cd06:	2301      	movs	r3, #1
 801cd08:	e08b      	b.n	801ce22 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801cd10:	b2db      	uxtb	r3, r3
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d106      	bne.n	801cd24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	2200      	movs	r2, #0
 801cd1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801cd1e:	6878      	ldr	r0, [r7, #4]
 801cd20:	f7e5 fc6e 	bl	8002600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	2224      	movs	r2, #36	@ 0x24
 801cd28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	681a      	ldr	r2, [r3, #0]
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	f022 0201 	bic.w	r2, r2, #1
 801cd3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	685a      	ldr	r2, [r3, #4]
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801cd48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	689a      	ldr	r2, [r3, #8]
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	681b      	ldr	r3, [r3, #0]
 801cd54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801cd58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	68db      	ldr	r3, [r3, #12]
 801cd5e:	2b01      	cmp	r3, #1
 801cd60:	d107      	bne.n	801cd72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	689a      	ldr	r2, [r3, #8]
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	681b      	ldr	r3, [r3, #0]
 801cd6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801cd6e:	609a      	str	r2, [r3, #8]
 801cd70:	e006      	b.n	801cd80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	689a      	ldr	r2, [r3, #8]
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	681b      	ldr	r3, [r3, #0]
 801cd7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801cd7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	68db      	ldr	r3, [r3, #12]
 801cd84:	2b02      	cmp	r3, #2
 801cd86:	d108      	bne.n	801cd9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	681b      	ldr	r3, [r3, #0]
 801cd8c:	685a      	ldr	r2, [r3, #4]
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801cd96:	605a      	str	r2, [r3, #4]
 801cd98:	e007      	b.n	801cdaa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	685a      	ldr	r2, [r3, #4]
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	681b      	ldr	r3, [r3, #0]
 801cda4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801cda8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	681b      	ldr	r3, [r3, #0]
 801cdae:	6859      	ldr	r1, [r3, #4]
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	681a      	ldr	r2, [r3, #0]
 801cdb4:	4b1d      	ldr	r3, [pc, #116]	@ (801ce2c <HAL_I2C_Init+0x134>)
 801cdb6:	430b      	orrs	r3, r1
 801cdb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	68da      	ldr	r2, [r3, #12]
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801cdc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	691a      	ldr	r2, [r3, #16]
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	695b      	ldr	r3, [r3, #20]
 801cdd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	699b      	ldr	r3, [r3, #24]
 801cdda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	430a      	orrs	r2, r1
 801cde2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	69d9      	ldr	r1, [r3, #28]
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	6a1a      	ldr	r2, [r3, #32]
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	430a      	orrs	r2, r1
 801cdf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	681a      	ldr	r2, [r3, #0]
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	f042 0201 	orr.w	r2, r2, #1
 801ce02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	2200      	movs	r2, #0
 801ce08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	2220      	movs	r2, #32
 801ce0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	2200      	movs	r2, #0
 801ce16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	2200      	movs	r2, #0
 801ce1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801ce20:	2300      	movs	r3, #0
}
 801ce22:	4618      	mov	r0, r3
 801ce24:	3708      	adds	r7, #8
 801ce26:	46bd      	mov	sp, r7
 801ce28:	bd80      	pop	{r7, pc}
 801ce2a:	bf00      	nop
 801ce2c:	02008000 	.word	0x02008000

0801ce30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801ce30:	b480      	push	{r7}
 801ce32:	b083      	sub	sp, #12
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	6078      	str	r0, [r7, #4]
 801ce38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801ce40:	b2db      	uxtb	r3, r3
 801ce42:	2b20      	cmp	r3, #32
 801ce44:	d138      	bne.n	801ceb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801ce4c:	2b01      	cmp	r3, #1
 801ce4e:	d101      	bne.n	801ce54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801ce50:	2302      	movs	r3, #2
 801ce52:	e032      	b.n	801ceba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	2201      	movs	r2, #1
 801ce58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	2224      	movs	r2, #36	@ 0x24
 801ce60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	681a      	ldr	r2, [r3, #0]
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	681b      	ldr	r3, [r3, #0]
 801ce6e:	f022 0201 	bic.w	r2, r2, #1
 801ce72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	681a      	ldr	r2, [r3, #0]
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801ce82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	6819      	ldr	r1, [r3, #0]
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	683a      	ldr	r2, [r7, #0]
 801ce90:	430a      	orrs	r2, r1
 801ce92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	681a      	ldr	r2, [r3, #0]
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	f042 0201 	orr.w	r2, r2, #1
 801cea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	2220      	movs	r2, #32
 801cea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	2200      	movs	r2, #0
 801ceb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	e000      	b.n	801ceba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801ceb8:	2302      	movs	r3, #2
  }
}
 801ceba:	4618      	mov	r0, r3
 801cebc:	370c      	adds	r7, #12
 801cebe:	46bd      	mov	sp, r7
 801cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cec4:	4770      	bx	lr

0801cec6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801cec6:	b480      	push	{r7}
 801cec8:	b085      	sub	sp, #20
 801ceca:	af00      	add	r7, sp, #0
 801cecc:	6078      	str	r0, [r7, #4]
 801cece:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801ced6:	b2db      	uxtb	r3, r3
 801ced8:	2b20      	cmp	r3, #32
 801ceda:	d139      	bne.n	801cf50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801cee2:	2b01      	cmp	r3, #1
 801cee4:	d101      	bne.n	801ceea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801cee6:	2302      	movs	r3, #2
 801cee8:	e033      	b.n	801cf52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	2201      	movs	r2, #1
 801ceee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	2224      	movs	r2, #36	@ 0x24
 801cef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	681a      	ldr	r2, [r3, #0]
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	f022 0201 	bic.w	r2, r2, #1
 801cf08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	681b      	ldr	r3, [r3, #0]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801cf18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801cf1a:	683b      	ldr	r3, [r7, #0]
 801cf1c:	021b      	lsls	r3, r3, #8
 801cf1e:	68fa      	ldr	r2, [r7, #12]
 801cf20:	4313      	orrs	r3, r2
 801cf22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	68fa      	ldr	r2, [r7, #12]
 801cf2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	681a      	ldr	r2, [r3, #0]
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	f042 0201 	orr.w	r2, r2, #1
 801cf3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	2220      	movs	r2, #32
 801cf40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	2200      	movs	r2, #0
 801cf48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801cf4c:	2300      	movs	r3, #0
 801cf4e:	e000      	b.n	801cf52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801cf50:	2302      	movs	r3, #2
  }
}
 801cf52:	4618      	mov	r0, r3
 801cf54:	3714      	adds	r7, #20
 801cf56:	46bd      	mov	sp, r7
 801cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf5c:	4770      	bx	lr
	...

0801cf60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b084      	sub	sp, #16
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801cf68:	4b19      	ldr	r3, [pc, #100]	@ (801cfd0 <HAL_PWREx_ConfigSupply+0x70>)
 801cf6a:	68db      	ldr	r3, [r3, #12]
 801cf6c:	f003 0304 	and.w	r3, r3, #4
 801cf70:	2b04      	cmp	r3, #4
 801cf72:	d00a      	beq.n	801cf8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801cf74:	4b16      	ldr	r3, [pc, #88]	@ (801cfd0 <HAL_PWREx_ConfigSupply+0x70>)
 801cf76:	68db      	ldr	r3, [r3, #12]
 801cf78:	f003 0307 	and.w	r3, r3, #7
 801cf7c:	687a      	ldr	r2, [r7, #4]
 801cf7e:	429a      	cmp	r2, r3
 801cf80:	d001      	beq.n	801cf86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801cf82:	2301      	movs	r3, #1
 801cf84:	e01f      	b.n	801cfc6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801cf86:	2300      	movs	r3, #0
 801cf88:	e01d      	b.n	801cfc6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801cf8a:	4b11      	ldr	r3, [pc, #68]	@ (801cfd0 <HAL_PWREx_ConfigSupply+0x70>)
 801cf8c:	68db      	ldr	r3, [r3, #12]
 801cf8e:	f023 0207 	bic.w	r2, r3, #7
 801cf92:	490f      	ldr	r1, [pc, #60]	@ (801cfd0 <HAL_PWREx_ConfigSupply+0x70>)
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	4313      	orrs	r3, r2
 801cf98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801cf9a:	f7fd fc03 	bl	801a7a4 <HAL_GetTick>
 801cf9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801cfa0:	e009      	b.n	801cfb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801cfa2:	f7fd fbff 	bl	801a7a4 <HAL_GetTick>
 801cfa6:	4602      	mov	r2, r0
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	1ad3      	subs	r3, r2, r3
 801cfac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801cfb0:	d901      	bls.n	801cfb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801cfb2:	2301      	movs	r3, #1
 801cfb4:	e007      	b.n	801cfc6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801cfb6:	4b06      	ldr	r3, [pc, #24]	@ (801cfd0 <HAL_PWREx_ConfigSupply+0x70>)
 801cfb8:	685b      	ldr	r3, [r3, #4]
 801cfba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801cfbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801cfc2:	d1ee      	bne.n	801cfa2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801cfc4:	2300      	movs	r3, #0
}
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	3710      	adds	r7, #16
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	bd80      	pop	{r7, pc}
 801cfce:	bf00      	nop
 801cfd0:	58024800 	.word	0x58024800

0801cfd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801cfd4:	b580      	push	{r7, lr}
 801cfd6:	b08c      	sub	sp, #48	@ 0x30
 801cfd8:	af00      	add	r7, sp, #0
 801cfda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d102      	bne.n	801cfe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801cfe2:	2301      	movs	r3, #1
 801cfe4:	f000 bc48 	b.w	801d878 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	f003 0301 	and.w	r3, r3, #1
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	f000 8088 	beq.w	801d106 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cff6:	4b99      	ldr	r3, [pc, #612]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801cff8:	691b      	ldr	r3, [r3, #16]
 801cffa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801d000:	4b96      	ldr	r3, [pc, #600]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d004:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801d006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d008:	2b10      	cmp	r3, #16
 801d00a:	d007      	beq.n	801d01c <HAL_RCC_OscConfig+0x48>
 801d00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d00e:	2b18      	cmp	r3, #24
 801d010:	d111      	bne.n	801d036 <HAL_RCC_OscConfig+0x62>
 801d012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d014:	f003 0303 	and.w	r3, r3, #3
 801d018:	2b02      	cmp	r3, #2
 801d01a:	d10c      	bne.n	801d036 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d01c:	4b8f      	ldr	r3, [pc, #572]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d01e:	681b      	ldr	r3, [r3, #0]
 801d020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d024:	2b00      	cmp	r3, #0
 801d026:	d06d      	beq.n	801d104 <HAL_RCC_OscConfig+0x130>
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	685b      	ldr	r3, [r3, #4]
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d169      	bne.n	801d104 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801d030:	2301      	movs	r3, #1
 801d032:	f000 bc21 	b.w	801d878 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	685b      	ldr	r3, [r3, #4]
 801d03a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d03e:	d106      	bne.n	801d04e <HAL_RCC_OscConfig+0x7a>
 801d040:	4b86      	ldr	r3, [pc, #536]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	4a85      	ldr	r2, [pc, #532]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d04a:	6013      	str	r3, [r2, #0]
 801d04c:	e02e      	b.n	801d0ac <HAL_RCC_OscConfig+0xd8>
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	685b      	ldr	r3, [r3, #4]
 801d052:	2b00      	cmp	r3, #0
 801d054:	d10c      	bne.n	801d070 <HAL_RCC_OscConfig+0x9c>
 801d056:	4b81      	ldr	r3, [pc, #516]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d058:	681b      	ldr	r3, [r3, #0]
 801d05a:	4a80      	ldr	r2, [pc, #512]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d05c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d060:	6013      	str	r3, [r2, #0]
 801d062:	4b7e      	ldr	r3, [pc, #504]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	4a7d      	ldr	r2, [pc, #500]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d068:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d06c:	6013      	str	r3, [r2, #0]
 801d06e:	e01d      	b.n	801d0ac <HAL_RCC_OscConfig+0xd8>
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	685b      	ldr	r3, [r3, #4]
 801d074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d078:	d10c      	bne.n	801d094 <HAL_RCC_OscConfig+0xc0>
 801d07a:	4b78      	ldr	r3, [pc, #480]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d07c:	681b      	ldr	r3, [r3, #0]
 801d07e:	4a77      	ldr	r2, [pc, #476]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d084:	6013      	str	r3, [r2, #0]
 801d086:	4b75      	ldr	r3, [pc, #468]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	4a74      	ldr	r2, [pc, #464]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d08c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d090:	6013      	str	r3, [r2, #0]
 801d092:	e00b      	b.n	801d0ac <HAL_RCC_OscConfig+0xd8>
 801d094:	4b71      	ldr	r3, [pc, #452]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	4a70      	ldr	r2, [pc, #448]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d09a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d09e:	6013      	str	r3, [r2, #0]
 801d0a0:	4b6e      	ldr	r3, [pc, #440]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	4a6d      	ldr	r2, [pc, #436]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d0a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d0aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	685b      	ldr	r3, [r3, #4]
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	d013      	beq.n	801d0dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d0b4:	f7fd fb76 	bl	801a7a4 <HAL_GetTick>
 801d0b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d0ba:	e008      	b.n	801d0ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d0bc:	f7fd fb72 	bl	801a7a4 <HAL_GetTick>
 801d0c0:	4602      	mov	r2, r0
 801d0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0c4:	1ad3      	subs	r3, r2, r3
 801d0c6:	2b64      	cmp	r3, #100	@ 0x64
 801d0c8:	d901      	bls.n	801d0ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801d0ca:	2303      	movs	r3, #3
 801d0cc:	e3d4      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d0ce:	4b63      	ldr	r3, [pc, #396]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d0f0      	beq.n	801d0bc <HAL_RCC_OscConfig+0xe8>
 801d0da:	e014      	b.n	801d106 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d0dc:	f7fd fb62 	bl	801a7a4 <HAL_GetTick>
 801d0e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801d0e2:	e008      	b.n	801d0f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d0e4:	f7fd fb5e 	bl	801a7a4 <HAL_GetTick>
 801d0e8:	4602      	mov	r2, r0
 801d0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0ec:	1ad3      	subs	r3, r2, r3
 801d0ee:	2b64      	cmp	r3, #100	@ 0x64
 801d0f0:	d901      	bls.n	801d0f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801d0f2:	2303      	movs	r3, #3
 801d0f4:	e3c0      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801d0f6:	4b59      	ldr	r3, [pc, #356]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d1f0      	bne.n	801d0e4 <HAL_RCC_OscConfig+0x110>
 801d102:	e000      	b.n	801d106 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	f003 0302 	and.w	r3, r3, #2
 801d10e:	2b00      	cmp	r3, #0
 801d110:	f000 80ca 	beq.w	801d2a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d114:	4b51      	ldr	r3, [pc, #324]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d116:	691b      	ldr	r3, [r3, #16]
 801d118:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d11c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801d11e:	4b4f      	ldr	r3, [pc, #316]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d122:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801d124:	6a3b      	ldr	r3, [r7, #32]
 801d126:	2b00      	cmp	r3, #0
 801d128:	d007      	beq.n	801d13a <HAL_RCC_OscConfig+0x166>
 801d12a:	6a3b      	ldr	r3, [r7, #32]
 801d12c:	2b18      	cmp	r3, #24
 801d12e:	d156      	bne.n	801d1de <HAL_RCC_OscConfig+0x20a>
 801d130:	69fb      	ldr	r3, [r7, #28]
 801d132:	f003 0303 	and.w	r3, r3, #3
 801d136:	2b00      	cmp	r3, #0
 801d138:	d151      	bne.n	801d1de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d13a:	4b48      	ldr	r3, [pc, #288]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	f003 0304 	and.w	r3, r3, #4
 801d142:	2b00      	cmp	r3, #0
 801d144:	d005      	beq.n	801d152 <HAL_RCC_OscConfig+0x17e>
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	68db      	ldr	r3, [r3, #12]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d101      	bne.n	801d152 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801d14e:	2301      	movs	r3, #1
 801d150:	e392      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801d152:	4b42      	ldr	r3, [pc, #264]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d154:	681b      	ldr	r3, [r3, #0]
 801d156:	f023 0219 	bic.w	r2, r3, #25
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	68db      	ldr	r3, [r3, #12]
 801d15e:	493f      	ldr	r1, [pc, #252]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d160:	4313      	orrs	r3, r2
 801d162:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d164:	f7fd fb1e 	bl	801a7a4 <HAL_GetTick>
 801d168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d16a:	e008      	b.n	801d17e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d16c:	f7fd fb1a 	bl	801a7a4 <HAL_GetTick>
 801d170:	4602      	mov	r2, r0
 801d172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d174:	1ad3      	subs	r3, r2, r3
 801d176:	2b02      	cmp	r3, #2
 801d178:	d901      	bls.n	801d17e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801d17a:	2303      	movs	r3, #3
 801d17c:	e37c      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d17e:	4b37      	ldr	r3, [pc, #220]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	f003 0304 	and.w	r3, r3, #4
 801d186:	2b00      	cmp	r3, #0
 801d188:	d0f0      	beq.n	801d16c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d18a:	f7fd fb3b 	bl	801a804 <HAL_GetREVID>
 801d18e:	4603      	mov	r3, r0
 801d190:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d194:	4293      	cmp	r3, r2
 801d196:	d817      	bhi.n	801d1c8 <HAL_RCC_OscConfig+0x1f4>
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	691b      	ldr	r3, [r3, #16]
 801d19c:	2b40      	cmp	r3, #64	@ 0x40
 801d19e:	d108      	bne.n	801d1b2 <HAL_RCC_OscConfig+0x1de>
 801d1a0:	4b2e      	ldr	r3, [pc, #184]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d1a2:	685b      	ldr	r3, [r3, #4]
 801d1a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801d1a8:	4a2c      	ldr	r2, [pc, #176]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d1aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d1ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d1b0:	e07a      	b.n	801d2a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d1b2:	4b2a      	ldr	r3, [pc, #168]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d1b4:	685b      	ldr	r3, [r3, #4]
 801d1b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	691b      	ldr	r3, [r3, #16]
 801d1be:	031b      	lsls	r3, r3, #12
 801d1c0:	4926      	ldr	r1, [pc, #152]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d1c2:	4313      	orrs	r3, r2
 801d1c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d1c6:	e06f      	b.n	801d2a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d1c8:	4b24      	ldr	r3, [pc, #144]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d1ca:	685b      	ldr	r3, [r3, #4]
 801d1cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	691b      	ldr	r3, [r3, #16]
 801d1d4:	061b      	lsls	r3, r3, #24
 801d1d6:	4921      	ldr	r1, [pc, #132]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d1d8:	4313      	orrs	r3, r2
 801d1da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d1dc:	e064      	b.n	801d2a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	68db      	ldr	r3, [r3, #12]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d047      	beq.n	801d276 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801d1e6:	4b1d      	ldr	r3, [pc, #116]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	f023 0219 	bic.w	r2, r3, #25
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	68db      	ldr	r3, [r3, #12]
 801d1f2:	491a      	ldr	r1, [pc, #104]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d1f4:	4313      	orrs	r3, r2
 801d1f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d1f8:	f7fd fad4 	bl	801a7a4 <HAL_GetTick>
 801d1fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d1fe:	e008      	b.n	801d212 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d200:	f7fd fad0 	bl	801a7a4 <HAL_GetTick>
 801d204:	4602      	mov	r2, r0
 801d206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d208:	1ad3      	subs	r3, r2, r3
 801d20a:	2b02      	cmp	r3, #2
 801d20c:	d901      	bls.n	801d212 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801d20e:	2303      	movs	r3, #3
 801d210:	e332      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d212:	4b12      	ldr	r3, [pc, #72]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	f003 0304 	and.w	r3, r3, #4
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d0f0      	beq.n	801d200 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d21e:	f7fd faf1 	bl	801a804 <HAL_GetREVID>
 801d222:	4603      	mov	r3, r0
 801d224:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d228:	4293      	cmp	r3, r2
 801d22a:	d819      	bhi.n	801d260 <HAL_RCC_OscConfig+0x28c>
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	691b      	ldr	r3, [r3, #16]
 801d230:	2b40      	cmp	r3, #64	@ 0x40
 801d232:	d108      	bne.n	801d246 <HAL_RCC_OscConfig+0x272>
 801d234:	4b09      	ldr	r3, [pc, #36]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d236:	685b      	ldr	r3, [r3, #4]
 801d238:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801d23c:	4a07      	ldr	r2, [pc, #28]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d23e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d242:	6053      	str	r3, [r2, #4]
 801d244:	e030      	b.n	801d2a8 <HAL_RCC_OscConfig+0x2d4>
 801d246:	4b05      	ldr	r3, [pc, #20]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d248:	685b      	ldr	r3, [r3, #4]
 801d24a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	691b      	ldr	r3, [r3, #16]
 801d252:	031b      	lsls	r3, r3, #12
 801d254:	4901      	ldr	r1, [pc, #4]	@ (801d25c <HAL_RCC_OscConfig+0x288>)
 801d256:	4313      	orrs	r3, r2
 801d258:	604b      	str	r3, [r1, #4]
 801d25a:	e025      	b.n	801d2a8 <HAL_RCC_OscConfig+0x2d4>
 801d25c:	58024400 	.word	0x58024400
 801d260:	4b9a      	ldr	r3, [pc, #616]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d262:	685b      	ldr	r3, [r3, #4]
 801d264:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	691b      	ldr	r3, [r3, #16]
 801d26c:	061b      	lsls	r3, r3, #24
 801d26e:	4997      	ldr	r1, [pc, #604]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d270:	4313      	orrs	r3, r2
 801d272:	604b      	str	r3, [r1, #4]
 801d274:	e018      	b.n	801d2a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801d276:	4b95      	ldr	r3, [pc, #596]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	4a94      	ldr	r2, [pc, #592]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d27c:	f023 0301 	bic.w	r3, r3, #1
 801d280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d282:	f7fd fa8f 	bl	801a7a4 <HAL_GetTick>
 801d286:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801d288:	e008      	b.n	801d29c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d28a:	f7fd fa8b 	bl	801a7a4 <HAL_GetTick>
 801d28e:	4602      	mov	r2, r0
 801d290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d292:	1ad3      	subs	r3, r2, r3
 801d294:	2b02      	cmp	r3, #2
 801d296:	d901      	bls.n	801d29c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801d298:	2303      	movs	r3, #3
 801d29a:	e2ed      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801d29c:	4b8b      	ldr	r3, [pc, #556]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	f003 0304 	and.w	r3, r3, #4
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	d1f0      	bne.n	801d28a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	f003 0310 	and.w	r3, r3, #16
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	f000 80a9 	beq.w	801d408 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d2b6:	4b85      	ldr	r3, [pc, #532]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d2b8:	691b      	ldr	r3, [r3, #16]
 801d2ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d2be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801d2c0:	4b82      	ldr	r3, [pc, #520]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801d2c6:	69bb      	ldr	r3, [r7, #24]
 801d2c8:	2b08      	cmp	r3, #8
 801d2ca:	d007      	beq.n	801d2dc <HAL_RCC_OscConfig+0x308>
 801d2cc:	69bb      	ldr	r3, [r7, #24]
 801d2ce:	2b18      	cmp	r3, #24
 801d2d0:	d13a      	bne.n	801d348 <HAL_RCC_OscConfig+0x374>
 801d2d2:	697b      	ldr	r3, [r7, #20]
 801d2d4:	f003 0303 	and.w	r3, r3, #3
 801d2d8:	2b01      	cmp	r3, #1
 801d2da:	d135      	bne.n	801d348 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d2dc:	4b7b      	ldr	r3, [pc, #492]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	d005      	beq.n	801d2f4 <HAL_RCC_OscConfig+0x320>
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	69db      	ldr	r3, [r3, #28]
 801d2ec:	2b80      	cmp	r3, #128	@ 0x80
 801d2ee:	d001      	beq.n	801d2f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801d2f0:	2301      	movs	r3, #1
 801d2f2:	e2c1      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d2f4:	f7fd fa86 	bl	801a804 <HAL_GetREVID>
 801d2f8:	4603      	mov	r3, r0
 801d2fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d2fe:	4293      	cmp	r3, r2
 801d300:	d817      	bhi.n	801d332 <HAL_RCC_OscConfig+0x35e>
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	6a1b      	ldr	r3, [r3, #32]
 801d306:	2b20      	cmp	r3, #32
 801d308:	d108      	bne.n	801d31c <HAL_RCC_OscConfig+0x348>
 801d30a:	4b70      	ldr	r3, [pc, #448]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d30c:	685b      	ldr	r3, [r3, #4]
 801d30e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801d312:	4a6e      	ldr	r2, [pc, #440]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d314:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d318:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d31a:	e075      	b.n	801d408 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d31c:	4b6b      	ldr	r3, [pc, #428]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d31e:	685b      	ldr	r3, [r3, #4]
 801d320:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801d324:	687b      	ldr	r3, [r7, #4]
 801d326:	6a1b      	ldr	r3, [r3, #32]
 801d328:	069b      	lsls	r3, r3, #26
 801d32a:	4968      	ldr	r1, [pc, #416]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d32c:	4313      	orrs	r3, r2
 801d32e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d330:	e06a      	b.n	801d408 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d332:	4b66      	ldr	r3, [pc, #408]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d334:	68db      	ldr	r3, [r3, #12]
 801d336:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	6a1b      	ldr	r3, [r3, #32]
 801d33e:	061b      	lsls	r3, r3, #24
 801d340:	4962      	ldr	r1, [pc, #392]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d342:	4313      	orrs	r3, r2
 801d344:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d346:	e05f      	b.n	801d408 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	69db      	ldr	r3, [r3, #28]
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d042      	beq.n	801d3d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801d350:	4b5e      	ldr	r3, [pc, #376]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	4a5d      	ldr	r2, [pc, #372]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d35a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d35c:	f7fd fa22 	bl	801a7a4 <HAL_GetTick>
 801d360:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d362:	e008      	b.n	801d376 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801d364:	f7fd fa1e 	bl	801a7a4 <HAL_GetTick>
 801d368:	4602      	mov	r2, r0
 801d36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d36c:	1ad3      	subs	r3, r2, r3
 801d36e:	2b02      	cmp	r3, #2
 801d370:	d901      	bls.n	801d376 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801d372:	2303      	movs	r3, #3
 801d374:	e280      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d376:	4b55      	ldr	r3, [pc, #340]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d0f0      	beq.n	801d364 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d382:	f7fd fa3f 	bl	801a804 <HAL_GetREVID>
 801d386:	4603      	mov	r3, r0
 801d388:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d38c:	4293      	cmp	r3, r2
 801d38e:	d817      	bhi.n	801d3c0 <HAL_RCC_OscConfig+0x3ec>
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	6a1b      	ldr	r3, [r3, #32]
 801d394:	2b20      	cmp	r3, #32
 801d396:	d108      	bne.n	801d3aa <HAL_RCC_OscConfig+0x3d6>
 801d398:	4b4c      	ldr	r3, [pc, #304]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d39a:	685b      	ldr	r3, [r3, #4]
 801d39c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801d3a0:	4a4a      	ldr	r2, [pc, #296]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d3a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d3a6:	6053      	str	r3, [r2, #4]
 801d3a8:	e02e      	b.n	801d408 <HAL_RCC_OscConfig+0x434>
 801d3aa:	4b48      	ldr	r3, [pc, #288]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d3ac:	685b      	ldr	r3, [r3, #4]
 801d3ae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	6a1b      	ldr	r3, [r3, #32]
 801d3b6:	069b      	lsls	r3, r3, #26
 801d3b8:	4944      	ldr	r1, [pc, #272]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d3ba:	4313      	orrs	r3, r2
 801d3bc:	604b      	str	r3, [r1, #4]
 801d3be:	e023      	b.n	801d408 <HAL_RCC_OscConfig+0x434>
 801d3c0:	4b42      	ldr	r3, [pc, #264]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d3c2:	68db      	ldr	r3, [r3, #12]
 801d3c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	6a1b      	ldr	r3, [r3, #32]
 801d3cc:	061b      	lsls	r3, r3, #24
 801d3ce:	493f      	ldr	r1, [pc, #252]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d3d0:	4313      	orrs	r3, r2
 801d3d2:	60cb      	str	r3, [r1, #12]
 801d3d4:	e018      	b.n	801d408 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801d3d6:	4b3d      	ldr	r3, [pc, #244]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	4a3c      	ldr	r2, [pc, #240]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d3dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d3e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d3e2:	f7fd f9df 	bl	801a7a4 <HAL_GetTick>
 801d3e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801d3e8:	e008      	b.n	801d3fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801d3ea:	f7fd f9db 	bl	801a7a4 <HAL_GetTick>
 801d3ee:	4602      	mov	r2, r0
 801d3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3f2:	1ad3      	subs	r3, r2, r3
 801d3f4:	2b02      	cmp	r3, #2
 801d3f6:	d901      	bls.n	801d3fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801d3f8:	2303      	movs	r3, #3
 801d3fa:	e23d      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801d3fc:	4b33      	ldr	r3, [pc, #204]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d404:	2b00      	cmp	r3, #0
 801d406:	d1f0      	bne.n	801d3ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	f003 0308 	and.w	r3, r3, #8
 801d410:	2b00      	cmp	r3, #0
 801d412:	d036      	beq.n	801d482 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	695b      	ldr	r3, [r3, #20]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d019      	beq.n	801d450 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801d41c:	4b2b      	ldr	r3, [pc, #172]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d41e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d420:	4a2a      	ldr	r2, [pc, #168]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d422:	f043 0301 	orr.w	r3, r3, #1
 801d426:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d428:	f7fd f9bc 	bl	801a7a4 <HAL_GetTick>
 801d42c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801d42e:	e008      	b.n	801d442 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d430:	f7fd f9b8 	bl	801a7a4 <HAL_GetTick>
 801d434:	4602      	mov	r2, r0
 801d436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d438:	1ad3      	subs	r3, r2, r3
 801d43a:	2b02      	cmp	r3, #2
 801d43c:	d901      	bls.n	801d442 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801d43e:	2303      	movs	r3, #3
 801d440:	e21a      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801d442:	4b22      	ldr	r3, [pc, #136]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d446:	f003 0302 	and.w	r3, r3, #2
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d0f0      	beq.n	801d430 <HAL_RCC_OscConfig+0x45c>
 801d44e:	e018      	b.n	801d482 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801d450:	4b1e      	ldr	r3, [pc, #120]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d454:	4a1d      	ldr	r2, [pc, #116]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d456:	f023 0301 	bic.w	r3, r3, #1
 801d45a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d45c:	f7fd f9a2 	bl	801a7a4 <HAL_GetTick>
 801d460:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801d462:	e008      	b.n	801d476 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d464:	f7fd f99e 	bl	801a7a4 <HAL_GetTick>
 801d468:	4602      	mov	r2, r0
 801d46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d46c:	1ad3      	subs	r3, r2, r3
 801d46e:	2b02      	cmp	r3, #2
 801d470:	d901      	bls.n	801d476 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801d472:	2303      	movs	r3, #3
 801d474:	e200      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801d476:	4b15      	ldr	r3, [pc, #84]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d47a:	f003 0302 	and.w	r3, r3, #2
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d1f0      	bne.n	801d464 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801d482:	687b      	ldr	r3, [r7, #4]
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	f003 0320 	and.w	r3, r3, #32
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d039      	beq.n	801d502 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	699b      	ldr	r3, [r3, #24]
 801d492:	2b00      	cmp	r3, #0
 801d494:	d01c      	beq.n	801d4d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801d496:	4b0d      	ldr	r3, [pc, #52]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	4a0c      	ldr	r2, [pc, #48]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d49c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801d4a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d4a2:	f7fd f97f 	bl	801a7a4 <HAL_GetTick>
 801d4a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d4a8:	e008      	b.n	801d4bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d4aa:	f7fd f97b 	bl	801a7a4 <HAL_GetTick>
 801d4ae:	4602      	mov	r2, r0
 801d4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4b2:	1ad3      	subs	r3, r2, r3
 801d4b4:	2b02      	cmp	r3, #2
 801d4b6:	d901      	bls.n	801d4bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801d4b8:	2303      	movs	r3, #3
 801d4ba:	e1dd      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d4bc:	4b03      	ldr	r3, [pc, #12]	@ (801d4cc <HAL_RCC_OscConfig+0x4f8>)
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	d0f0      	beq.n	801d4aa <HAL_RCC_OscConfig+0x4d6>
 801d4c8:	e01b      	b.n	801d502 <HAL_RCC_OscConfig+0x52e>
 801d4ca:	bf00      	nop
 801d4cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801d4d0:	4b9b      	ldr	r3, [pc, #620]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	4a9a      	ldr	r2, [pc, #616]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d4d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d4da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d4dc:	f7fd f962 	bl	801a7a4 <HAL_GetTick>
 801d4e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d4e2:	e008      	b.n	801d4f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d4e4:	f7fd f95e 	bl	801a7a4 <HAL_GetTick>
 801d4e8:	4602      	mov	r2, r0
 801d4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4ec:	1ad3      	subs	r3, r2, r3
 801d4ee:	2b02      	cmp	r3, #2
 801d4f0:	d901      	bls.n	801d4f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801d4f2:	2303      	movs	r3, #3
 801d4f4:	e1c0      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d4f6:	4b92      	ldr	r3, [pc, #584]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	d1f0      	bne.n	801d4e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	f003 0304 	and.w	r3, r3, #4
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	f000 8081 	beq.w	801d612 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801d510:	4b8c      	ldr	r3, [pc, #560]	@ (801d744 <HAL_RCC_OscConfig+0x770>)
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	4a8b      	ldr	r2, [pc, #556]	@ (801d744 <HAL_RCC_OscConfig+0x770>)
 801d516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d51a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d51c:	f7fd f942 	bl	801a7a4 <HAL_GetTick>
 801d520:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d522:	e008      	b.n	801d536 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d524:	f7fd f93e 	bl	801a7a4 <HAL_GetTick>
 801d528:	4602      	mov	r2, r0
 801d52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d52c:	1ad3      	subs	r3, r2, r3
 801d52e:	2b64      	cmp	r3, #100	@ 0x64
 801d530:	d901      	bls.n	801d536 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801d532:	2303      	movs	r3, #3
 801d534:	e1a0      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d536:	4b83      	ldr	r3, [pc, #524]	@ (801d744 <HAL_RCC_OscConfig+0x770>)
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d0f0      	beq.n	801d524 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	689b      	ldr	r3, [r3, #8]
 801d546:	2b01      	cmp	r3, #1
 801d548:	d106      	bne.n	801d558 <HAL_RCC_OscConfig+0x584>
 801d54a:	4b7d      	ldr	r3, [pc, #500]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d54c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d54e:	4a7c      	ldr	r2, [pc, #496]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d550:	f043 0301 	orr.w	r3, r3, #1
 801d554:	6713      	str	r3, [r2, #112]	@ 0x70
 801d556:	e02d      	b.n	801d5b4 <HAL_RCC_OscConfig+0x5e0>
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	689b      	ldr	r3, [r3, #8]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d10c      	bne.n	801d57a <HAL_RCC_OscConfig+0x5a6>
 801d560:	4b77      	ldr	r3, [pc, #476]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d564:	4a76      	ldr	r2, [pc, #472]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d566:	f023 0301 	bic.w	r3, r3, #1
 801d56a:	6713      	str	r3, [r2, #112]	@ 0x70
 801d56c:	4b74      	ldr	r3, [pc, #464]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d56e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d570:	4a73      	ldr	r2, [pc, #460]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d572:	f023 0304 	bic.w	r3, r3, #4
 801d576:	6713      	str	r3, [r2, #112]	@ 0x70
 801d578:	e01c      	b.n	801d5b4 <HAL_RCC_OscConfig+0x5e0>
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	689b      	ldr	r3, [r3, #8]
 801d57e:	2b05      	cmp	r3, #5
 801d580:	d10c      	bne.n	801d59c <HAL_RCC_OscConfig+0x5c8>
 801d582:	4b6f      	ldr	r3, [pc, #444]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d586:	4a6e      	ldr	r2, [pc, #440]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d588:	f043 0304 	orr.w	r3, r3, #4
 801d58c:	6713      	str	r3, [r2, #112]	@ 0x70
 801d58e:	4b6c      	ldr	r3, [pc, #432]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d592:	4a6b      	ldr	r2, [pc, #428]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d594:	f043 0301 	orr.w	r3, r3, #1
 801d598:	6713      	str	r3, [r2, #112]	@ 0x70
 801d59a:	e00b      	b.n	801d5b4 <HAL_RCC_OscConfig+0x5e0>
 801d59c:	4b68      	ldr	r3, [pc, #416]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d59e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d5a0:	4a67      	ldr	r2, [pc, #412]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d5a2:	f023 0301 	bic.w	r3, r3, #1
 801d5a6:	6713      	str	r3, [r2, #112]	@ 0x70
 801d5a8:	4b65      	ldr	r3, [pc, #404]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d5aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d5ac:	4a64      	ldr	r2, [pc, #400]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d5ae:	f023 0304 	bic.w	r3, r3, #4
 801d5b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	689b      	ldr	r3, [r3, #8]
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	d015      	beq.n	801d5e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d5bc:	f7fd f8f2 	bl	801a7a4 <HAL_GetTick>
 801d5c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d5c2:	e00a      	b.n	801d5da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d5c4:	f7fd f8ee 	bl	801a7a4 <HAL_GetTick>
 801d5c8:	4602      	mov	r2, r0
 801d5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5cc:	1ad3      	subs	r3, r2, r3
 801d5ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d5d2:	4293      	cmp	r3, r2
 801d5d4:	d901      	bls.n	801d5da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801d5d6:	2303      	movs	r3, #3
 801d5d8:	e14e      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d5da:	4b59      	ldr	r3, [pc, #356]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d5dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d5de:	f003 0302 	and.w	r3, r3, #2
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d0ee      	beq.n	801d5c4 <HAL_RCC_OscConfig+0x5f0>
 801d5e6:	e014      	b.n	801d612 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d5e8:	f7fd f8dc 	bl	801a7a4 <HAL_GetTick>
 801d5ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d5ee:	e00a      	b.n	801d606 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d5f0:	f7fd f8d8 	bl	801a7a4 <HAL_GetTick>
 801d5f4:	4602      	mov	r2, r0
 801d5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5f8:	1ad3      	subs	r3, r2, r3
 801d5fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d5fe:	4293      	cmp	r3, r2
 801d600:	d901      	bls.n	801d606 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801d602:	2303      	movs	r3, #3
 801d604:	e138      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d606:	4b4e      	ldr	r3, [pc, #312]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d60a:	f003 0302 	and.w	r3, r3, #2
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d1ee      	bne.n	801d5f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d616:	2b00      	cmp	r3, #0
 801d618:	f000 812d 	beq.w	801d876 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801d61c:	4b48      	ldr	r3, [pc, #288]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d61e:	691b      	ldr	r3, [r3, #16]
 801d620:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d624:	2b18      	cmp	r3, #24
 801d626:	f000 80bd 	beq.w	801d7a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d62e:	2b02      	cmp	r3, #2
 801d630:	f040 809e 	bne.w	801d770 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d634:	4b42      	ldr	r3, [pc, #264]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	4a41      	ldr	r2, [pc, #260]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d63a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d63e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d640:	f7fd f8b0 	bl	801a7a4 <HAL_GetTick>
 801d644:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d646:	e008      	b.n	801d65a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d648:	f7fd f8ac 	bl	801a7a4 <HAL_GetTick>
 801d64c:	4602      	mov	r2, r0
 801d64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d650:	1ad3      	subs	r3, r2, r3
 801d652:	2b02      	cmp	r3, #2
 801d654:	d901      	bls.n	801d65a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801d656:	2303      	movs	r3, #3
 801d658:	e10e      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d65a:	4b39      	ldr	r3, [pc, #228]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d662:	2b00      	cmp	r3, #0
 801d664:	d1f0      	bne.n	801d648 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d666:	4b36      	ldr	r3, [pc, #216]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d668:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d66a:	4b37      	ldr	r3, [pc, #220]	@ (801d748 <HAL_RCC_OscConfig+0x774>)
 801d66c:	4013      	ands	r3, r2
 801d66e:	687a      	ldr	r2, [r7, #4]
 801d670:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801d672:	687a      	ldr	r2, [r7, #4]
 801d674:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801d676:	0112      	lsls	r2, r2, #4
 801d678:	430a      	orrs	r2, r1
 801d67a:	4931      	ldr	r1, [pc, #196]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d67c:	4313      	orrs	r3, r2
 801d67e:	628b      	str	r3, [r1, #40]	@ 0x28
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d684:	3b01      	subs	r3, #1
 801d686:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d68e:	3b01      	subs	r3, #1
 801d690:	025b      	lsls	r3, r3, #9
 801d692:	b29b      	uxth	r3, r3
 801d694:	431a      	orrs	r2, r3
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d69a:	3b01      	subs	r3, #1
 801d69c:	041b      	lsls	r3, r3, #16
 801d69e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801d6a2:	431a      	orrs	r2, r3
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d6a8:	3b01      	subs	r3, #1
 801d6aa:	061b      	lsls	r3, r3, #24
 801d6ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801d6b0:	4923      	ldr	r1, [pc, #140]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d6b2:	4313      	orrs	r3, r2
 801d6b4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801d6b6:	4b22      	ldr	r3, [pc, #136]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6ba:	4a21      	ldr	r2, [pc, #132]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d6bc:	f023 0301 	bic.w	r3, r3, #1
 801d6c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d6c2:	4b1f      	ldr	r3, [pc, #124]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d6c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d6c6:	4b21      	ldr	r3, [pc, #132]	@ (801d74c <HAL_RCC_OscConfig+0x778>)
 801d6c8:	4013      	ands	r3, r2
 801d6ca:	687a      	ldr	r2, [r7, #4]
 801d6cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d6ce:	00d2      	lsls	r2, r2, #3
 801d6d0:	491b      	ldr	r1, [pc, #108]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d6d2:	4313      	orrs	r3, r2
 801d6d4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801d6d6:	4b1a      	ldr	r3, [pc, #104]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6da:	f023 020c 	bic.w	r2, r3, #12
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d6e2:	4917      	ldr	r1, [pc, #92]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d6e4:	4313      	orrs	r3, r2
 801d6e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801d6e8:	4b15      	ldr	r3, [pc, #84]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d6ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6ec:	f023 0202 	bic.w	r2, r3, #2
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d6f4:	4912      	ldr	r1, [pc, #72]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d6f6:	4313      	orrs	r3, r2
 801d6f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801d6fa:	4b11      	ldr	r3, [pc, #68]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6fe:	4a10      	ldr	r2, [pc, #64]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d704:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d706:	4b0e      	ldr	r3, [pc, #56]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d70a:	4a0d      	ldr	r2, [pc, #52]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d70c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d710:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801d712:	4b0b      	ldr	r3, [pc, #44]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d716:	4a0a      	ldr	r2, [pc, #40]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d71c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801d71e:	4b08      	ldr	r3, [pc, #32]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d722:	4a07      	ldr	r2, [pc, #28]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d724:	f043 0301 	orr.w	r3, r3, #1
 801d728:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d72a:	4b05      	ldr	r3, [pc, #20]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d72c:	681b      	ldr	r3, [r3, #0]
 801d72e:	4a04      	ldr	r2, [pc, #16]	@ (801d740 <HAL_RCC_OscConfig+0x76c>)
 801d730:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d736:	f7fd f835 	bl	801a7a4 <HAL_GetTick>
 801d73a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d73c:	e011      	b.n	801d762 <HAL_RCC_OscConfig+0x78e>
 801d73e:	bf00      	nop
 801d740:	58024400 	.word	0x58024400
 801d744:	58024800 	.word	0x58024800
 801d748:	fffffc0c 	.word	0xfffffc0c
 801d74c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d750:	f7fd f828 	bl	801a7a4 <HAL_GetTick>
 801d754:	4602      	mov	r2, r0
 801d756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d758:	1ad3      	subs	r3, r2, r3
 801d75a:	2b02      	cmp	r3, #2
 801d75c:	d901      	bls.n	801d762 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801d75e:	2303      	movs	r3, #3
 801d760:	e08a      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d762:	4b47      	ldr	r3, [pc, #284]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d764:	681b      	ldr	r3, [r3, #0]
 801d766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d0f0      	beq.n	801d750 <HAL_RCC_OscConfig+0x77c>
 801d76e:	e082      	b.n	801d876 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d770:	4b43      	ldr	r3, [pc, #268]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	4a42      	ldr	r2, [pc, #264]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d77a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d77c:	f7fd f812 	bl	801a7a4 <HAL_GetTick>
 801d780:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d782:	e008      	b.n	801d796 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d784:	f7fd f80e 	bl	801a7a4 <HAL_GetTick>
 801d788:	4602      	mov	r2, r0
 801d78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d78c:	1ad3      	subs	r3, r2, r3
 801d78e:	2b02      	cmp	r3, #2
 801d790:	d901      	bls.n	801d796 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801d792:	2303      	movs	r3, #3
 801d794:	e070      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d796:	4b3a      	ldr	r3, [pc, #232]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d798:	681b      	ldr	r3, [r3, #0]
 801d79a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d1f0      	bne.n	801d784 <HAL_RCC_OscConfig+0x7b0>
 801d7a2:	e068      	b.n	801d876 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801d7a4:	4b36      	ldr	r3, [pc, #216]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d7a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d7a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801d7aa:	4b35      	ldr	r3, [pc, #212]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d7ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d7ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d7b4:	2b01      	cmp	r3, #1
 801d7b6:	d031      	beq.n	801d81c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d7b8:	693b      	ldr	r3, [r7, #16]
 801d7ba:	f003 0203 	and.w	r2, r3, #3
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d7c2:	429a      	cmp	r2, r3
 801d7c4:	d12a      	bne.n	801d81c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d7c6:	693b      	ldr	r3, [r7, #16]
 801d7c8:	091b      	lsrs	r3, r3, #4
 801d7ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d7d2:	429a      	cmp	r2, r3
 801d7d4:	d122      	bne.n	801d81c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d7e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d7e2:	429a      	cmp	r2, r3
 801d7e4:	d11a      	bne.n	801d81c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d7e6:	68fb      	ldr	r3, [r7, #12]
 801d7e8:	0a5b      	lsrs	r3, r3, #9
 801d7ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d7f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d7f4:	429a      	cmp	r2, r3
 801d7f6:	d111      	bne.n	801d81c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	0c1b      	lsrs	r3, r3, #16
 801d7fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d804:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d806:	429a      	cmp	r2, r3
 801d808:	d108      	bne.n	801d81c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801d80a:	68fb      	ldr	r3, [r7, #12]
 801d80c:	0e1b      	lsrs	r3, r3, #24
 801d80e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d816:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d818:	429a      	cmp	r2, r3
 801d81a:	d001      	beq.n	801d820 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801d81c:	2301      	movs	r3, #1
 801d81e:	e02b      	b.n	801d878 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801d820:	4b17      	ldr	r3, [pc, #92]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d824:	08db      	lsrs	r3, r3, #3
 801d826:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d82a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d830:	693a      	ldr	r2, [r7, #16]
 801d832:	429a      	cmp	r2, r3
 801d834:	d01f      	beq.n	801d876 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801d836:	4b12      	ldr	r3, [pc, #72]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d83a:	4a11      	ldr	r2, [pc, #68]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d83c:	f023 0301 	bic.w	r3, r3, #1
 801d840:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801d842:	f7fc ffaf 	bl	801a7a4 <HAL_GetTick>
 801d846:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801d848:	bf00      	nop
 801d84a:	f7fc ffab 	bl	801a7a4 <HAL_GetTick>
 801d84e:	4602      	mov	r2, r0
 801d850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d852:	4293      	cmp	r3, r2
 801d854:	d0f9      	beq.n	801d84a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d856:	4b0a      	ldr	r3, [pc, #40]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d85a:	4b0a      	ldr	r3, [pc, #40]	@ (801d884 <HAL_RCC_OscConfig+0x8b0>)
 801d85c:	4013      	ands	r3, r2
 801d85e:	687a      	ldr	r2, [r7, #4]
 801d860:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d862:	00d2      	lsls	r2, r2, #3
 801d864:	4906      	ldr	r1, [pc, #24]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d866:	4313      	orrs	r3, r2
 801d868:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801d86a:	4b05      	ldr	r3, [pc, #20]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d86e:	4a04      	ldr	r2, [pc, #16]	@ (801d880 <HAL_RCC_OscConfig+0x8ac>)
 801d870:	f043 0301 	orr.w	r3, r3, #1
 801d874:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801d876:	2300      	movs	r3, #0
}
 801d878:	4618      	mov	r0, r3
 801d87a:	3730      	adds	r7, #48	@ 0x30
 801d87c:	46bd      	mov	sp, r7
 801d87e:	bd80      	pop	{r7, pc}
 801d880:	58024400 	.word	0x58024400
 801d884:	ffff0007 	.word	0xffff0007

0801d888 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d888:	b580      	push	{r7, lr}
 801d88a:	b086      	sub	sp, #24
 801d88c:	af00      	add	r7, sp, #0
 801d88e:	6078      	str	r0, [r7, #4]
 801d890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	2b00      	cmp	r3, #0
 801d896:	d101      	bne.n	801d89c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801d898:	2301      	movs	r3, #1
 801d89a:	e19c      	b.n	801dbd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d89c:	4b8a      	ldr	r3, [pc, #552]	@ (801dac8 <HAL_RCC_ClockConfig+0x240>)
 801d89e:	681b      	ldr	r3, [r3, #0]
 801d8a0:	f003 030f 	and.w	r3, r3, #15
 801d8a4:	683a      	ldr	r2, [r7, #0]
 801d8a6:	429a      	cmp	r2, r3
 801d8a8:	d910      	bls.n	801d8cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d8aa:	4b87      	ldr	r3, [pc, #540]	@ (801dac8 <HAL_RCC_ClockConfig+0x240>)
 801d8ac:	681b      	ldr	r3, [r3, #0]
 801d8ae:	f023 020f 	bic.w	r2, r3, #15
 801d8b2:	4985      	ldr	r1, [pc, #532]	@ (801dac8 <HAL_RCC_ClockConfig+0x240>)
 801d8b4:	683b      	ldr	r3, [r7, #0]
 801d8b6:	4313      	orrs	r3, r2
 801d8b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d8ba:	4b83      	ldr	r3, [pc, #524]	@ (801dac8 <HAL_RCC_ClockConfig+0x240>)
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	f003 030f 	and.w	r3, r3, #15
 801d8c2:	683a      	ldr	r2, [r7, #0]
 801d8c4:	429a      	cmp	r2, r3
 801d8c6:	d001      	beq.n	801d8cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801d8c8:	2301      	movs	r3, #1
 801d8ca:	e184      	b.n	801dbd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	681b      	ldr	r3, [r3, #0]
 801d8d0:	f003 0304 	and.w	r3, r3, #4
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d010      	beq.n	801d8fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	691a      	ldr	r2, [r3, #16]
 801d8dc:	4b7b      	ldr	r3, [pc, #492]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d8de:	699b      	ldr	r3, [r3, #24]
 801d8e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d8e4:	429a      	cmp	r2, r3
 801d8e6:	d908      	bls.n	801d8fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d8e8:	4b78      	ldr	r3, [pc, #480]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d8ea:	699b      	ldr	r3, [r3, #24]
 801d8ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	691b      	ldr	r3, [r3, #16]
 801d8f4:	4975      	ldr	r1, [pc, #468]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d8f6:	4313      	orrs	r3, r2
 801d8f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	f003 0308 	and.w	r3, r3, #8
 801d902:	2b00      	cmp	r3, #0
 801d904:	d010      	beq.n	801d928 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	695a      	ldr	r2, [r3, #20]
 801d90a:	4b70      	ldr	r3, [pc, #448]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d90c:	69db      	ldr	r3, [r3, #28]
 801d90e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d912:	429a      	cmp	r2, r3
 801d914:	d908      	bls.n	801d928 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d916:	4b6d      	ldr	r3, [pc, #436]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d918:	69db      	ldr	r3, [r3, #28]
 801d91a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	695b      	ldr	r3, [r3, #20]
 801d922:	496a      	ldr	r1, [pc, #424]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d924:	4313      	orrs	r3, r2
 801d926:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	f003 0310 	and.w	r3, r3, #16
 801d930:	2b00      	cmp	r3, #0
 801d932:	d010      	beq.n	801d956 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	699a      	ldr	r2, [r3, #24]
 801d938:	4b64      	ldr	r3, [pc, #400]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d93a:	69db      	ldr	r3, [r3, #28]
 801d93c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d940:	429a      	cmp	r2, r3
 801d942:	d908      	bls.n	801d956 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d944:	4b61      	ldr	r3, [pc, #388]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d946:	69db      	ldr	r3, [r3, #28]
 801d948:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	699b      	ldr	r3, [r3, #24]
 801d950:	495e      	ldr	r1, [pc, #376]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d952:	4313      	orrs	r3, r2
 801d954:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	681b      	ldr	r3, [r3, #0]
 801d95a:	f003 0320 	and.w	r3, r3, #32
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d010      	beq.n	801d984 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	69da      	ldr	r2, [r3, #28]
 801d966:	4b59      	ldr	r3, [pc, #356]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d968:	6a1b      	ldr	r3, [r3, #32]
 801d96a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d96e:	429a      	cmp	r2, r3
 801d970:	d908      	bls.n	801d984 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d972:	4b56      	ldr	r3, [pc, #344]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d974:	6a1b      	ldr	r3, [r3, #32]
 801d976:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	69db      	ldr	r3, [r3, #28]
 801d97e:	4953      	ldr	r1, [pc, #332]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d980:	4313      	orrs	r3, r2
 801d982:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	f003 0302 	and.w	r3, r3, #2
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	d010      	beq.n	801d9b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	68da      	ldr	r2, [r3, #12]
 801d994:	4b4d      	ldr	r3, [pc, #308]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d996:	699b      	ldr	r3, [r3, #24]
 801d998:	f003 030f 	and.w	r3, r3, #15
 801d99c:	429a      	cmp	r2, r3
 801d99e:	d908      	bls.n	801d9b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d9a0:	4b4a      	ldr	r3, [pc, #296]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d9a2:	699b      	ldr	r3, [r3, #24]
 801d9a4:	f023 020f 	bic.w	r2, r3, #15
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	68db      	ldr	r3, [r3, #12]
 801d9ac:	4947      	ldr	r1, [pc, #284]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d9ae:	4313      	orrs	r3, r2
 801d9b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	681b      	ldr	r3, [r3, #0]
 801d9b6:	f003 0301 	and.w	r3, r3, #1
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d055      	beq.n	801da6a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801d9be:	4b43      	ldr	r3, [pc, #268]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d9c0:	699b      	ldr	r3, [r3, #24]
 801d9c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	689b      	ldr	r3, [r3, #8]
 801d9ca:	4940      	ldr	r1, [pc, #256]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d9cc:	4313      	orrs	r3, r2
 801d9ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	685b      	ldr	r3, [r3, #4]
 801d9d4:	2b02      	cmp	r3, #2
 801d9d6:	d107      	bne.n	801d9e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d9d8:	4b3c      	ldr	r3, [pc, #240]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d121      	bne.n	801da28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d9e4:	2301      	movs	r3, #1
 801d9e6:	e0f6      	b.n	801dbd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	685b      	ldr	r3, [r3, #4]
 801d9ec:	2b03      	cmp	r3, #3
 801d9ee:	d107      	bne.n	801da00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d9f0:	4b36      	ldr	r3, [pc, #216]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d9f8:	2b00      	cmp	r3, #0
 801d9fa:	d115      	bne.n	801da28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d9fc:	2301      	movs	r3, #1
 801d9fe:	e0ea      	b.n	801dbd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	685b      	ldr	r3, [r3, #4]
 801da04:	2b01      	cmp	r3, #1
 801da06:	d107      	bne.n	801da18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801da08:	4b30      	ldr	r3, [pc, #192]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801da10:	2b00      	cmp	r3, #0
 801da12:	d109      	bne.n	801da28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801da14:	2301      	movs	r3, #1
 801da16:	e0de      	b.n	801dbd6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801da18:	4b2c      	ldr	r3, [pc, #176]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	f003 0304 	and.w	r3, r3, #4
 801da20:	2b00      	cmp	r3, #0
 801da22:	d101      	bne.n	801da28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801da24:	2301      	movs	r3, #1
 801da26:	e0d6      	b.n	801dbd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801da28:	4b28      	ldr	r3, [pc, #160]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801da2a:	691b      	ldr	r3, [r3, #16]
 801da2c:	f023 0207 	bic.w	r2, r3, #7
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	685b      	ldr	r3, [r3, #4]
 801da34:	4925      	ldr	r1, [pc, #148]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801da36:	4313      	orrs	r3, r2
 801da38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801da3a:	f7fc feb3 	bl	801a7a4 <HAL_GetTick>
 801da3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801da40:	e00a      	b.n	801da58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801da42:	f7fc feaf 	bl	801a7a4 <HAL_GetTick>
 801da46:	4602      	mov	r2, r0
 801da48:	697b      	ldr	r3, [r7, #20]
 801da4a:	1ad3      	subs	r3, r2, r3
 801da4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 801da50:	4293      	cmp	r3, r2
 801da52:	d901      	bls.n	801da58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801da54:	2303      	movs	r3, #3
 801da56:	e0be      	b.n	801dbd6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801da58:	4b1c      	ldr	r3, [pc, #112]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801da5a:	691b      	ldr	r3, [r3, #16]
 801da5c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	685b      	ldr	r3, [r3, #4]
 801da64:	00db      	lsls	r3, r3, #3
 801da66:	429a      	cmp	r2, r3
 801da68:	d1eb      	bne.n	801da42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	681b      	ldr	r3, [r3, #0]
 801da6e:	f003 0302 	and.w	r3, r3, #2
 801da72:	2b00      	cmp	r3, #0
 801da74:	d010      	beq.n	801da98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	68da      	ldr	r2, [r3, #12]
 801da7a:	4b14      	ldr	r3, [pc, #80]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801da7c:	699b      	ldr	r3, [r3, #24]
 801da7e:	f003 030f 	and.w	r3, r3, #15
 801da82:	429a      	cmp	r2, r3
 801da84:	d208      	bcs.n	801da98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801da86:	4b11      	ldr	r3, [pc, #68]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801da88:	699b      	ldr	r3, [r3, #24]
 801da8a:	f023 020f 	bic.w	r2, r3, #15
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	68db      	ldr	r3, [r3, #12]
 801da92:	490e      	ldr	r1, [pc, #56]	@ (801dacc <HAL_RCC_ClockConfig+0x244>)
 801da94:	4313      	orrs	r3, r2
 801da96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801da98:	4b0b      	ldr	r3, [pc, #44]	@ (801dac8 <HAL_RCC_ClockConfig+0x240>)
 801da9a:	681b      	ldr	r3, [r3, #0]
 801da9c:	f003 030f 	and.w	r3, r3, #15
 801daa0:	683a      	ldr	r2, [r7, #0]
 801daa2:	429a      	cmp	r2, r3
 801daa4:	d214      	bcs.n	801dad0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801daa6:	4b08      	ldr	r3, [pc, #32]	@ (801dac8 <HAL_RCC_ClockConfig+0x240>)
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	f023 020f 	bic.w	r2, r3, #15
 801daae:	4906      	ldr	r1, [pc, #24]	@ (801dac8 <HAL_RCC_ClockConfig+0x240>)
 801dab0:	683b      	ldr	r3, [r7, #0]
 801dab2:	4313      	orrs	r3, r2
 801dab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801dab6:	4b04      	ldr	r3, [pc, #16]	@ (801dac8 <HAL_RCC_ClockConfig+0x240>)
 801dab8:	681b      	ldr	r3, [r3, #0]
 801daba:	f003 030f 	and.w	r3, r3, #15
 801dabe:	683a      	ldr	r2, [r7, #0]
 801dac0:	429a      	cmp	r2, r3
 801dac2:	d005      	beq.n	801dad0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801dac4:	2301      	movs	r3, #1
 801dac6:	e086      	b.n	801dbd6 <HAL_RCC_ClockConfig+0x34e>
 801dac8:	52002000 	.word	0x52002000
 801dacc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	f003 0304 	and.w	r3, r3, #4
 801dad8:	2b00      	cmp	r3, #0
 801dada:	d010      	beq.n	801dafe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	691a      	ldr	r2, [r3, #16]
 801dae0:	4b3f      	ldr	r3, [pc, #252]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801dae2:	699b      	ldr	r3, [r3, #24]
 801dae4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801dae8:	429a      	cmp	r2, r3
 801daea:	d208      	bcs.n	801dafe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801daec:	4b3c      	ldr	r3, [pc, #240]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801daee:	699b      	ldr	r3, [r3, #24]
 801daf0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	691b      	ldr	r3, [r3, #16]
 801daf8:	4939      	ldr	r1, [pc, #228]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801dafa:	4313      	orrs	r3, r2
 801dafc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	f003 0308 	and.w	r3, r3, #8
 801db06:	2b00      	cmp	r3, #0
 801db08:	d010      	beq.n	801db2c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	695a      	ldr	r2, [r3, #20]
 801db0e:	4b34      	ldr	r3, [pc, #208]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801db10:	69db      	ldr	r3, [r3, #28]
 801db12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801db16:	429a      	cmp	r2, r3
 801db18:	d208      	bcs.n	801db2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801db1a:	4b31      	ldr	r3, [pc, #196]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801db1c:	69db      	ldr	r3, [r3, #28]
 801db1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	695b      	ldr	r3, [r3, #20]
 801db26:	492e      	ldr	r1, [pc, #184]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801db28:	4313      	orrs	r3, r2
 801db2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	681b      	ldr	r3, [r3, #0]
 801db30:	f003 0310 	and.w	r3, r3, #16
 801db34:	2b00      	cmp	r3, #0
 801db36:	d010      	beq.n	801db5a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	699a      	ldr	r2, [r3, #24]
 801db3c:	4b28      	ldr	r3, [pc, #160]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801db3e:	69db      	ldr	r3, [r3, #28]
 801db40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801db44:	429a      	cmp	r2, r3
 801db46:	d208      	bcs.n	801db5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801db48:	4b25      	ldr	r3, [pc, #148]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801db4a:	69db      	ldr	r3, [r3, #28]
 801db4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	699b      	ldr	r3, [r3, #24]
 801db54:	4922      	ldr	r1, [pc, #136]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801db56:	4313      	orrs	r3, r2
 801db58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	f003 0320 	and.w	r3, r3, #32
 801db62:	2b00      	cmp	r3, #0
 801db64:	d010      	beq.n	801db88 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	69da      	ldr	r2, [r3, #28]
 801db6a:	4b1d      	ldr	r3, [pc, #116]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801db6c:	6a1b      	ldr	r3, [r3, #32]
 801db6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801db72:	429a      	cmp	r2, r3
 801db74:	d208      	bcs.n	801db88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801db76:	4b1a      	ldr	r3, [pc, #104]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801db78:	6a1b      	ldr	r3, [r3, #32]
 801db7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	69db      	ldr	r3, [r3, #28]
 801db82:	4917      	ldr	r1, [pc, #92]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801db84:	4313      	orrs	r3, r2
 801db86:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801db88:	f000 f834 	bl	801dbf4 <HAL_RCC_GetSysClockFreq>
 801db8c:	4602      	mov	r2, r0
 801db8e:	4b14      	ldr	r3, [pc, #80]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801db90:	699b      	ldr	r3, [r3, #24]
 801db92:	0a1b      	lsrs	r3, r3, #8
 801db94:	f003 030f 	and.w	r3, r3, #15
 801db98:	4912      	ldr	r1, [pc, #72]	@ (801dbe4 <HAL_RCC_ClockConfig+0x35c>)
 801db9a:	5ccb      	ldrb	r3, [r1, r3]
 801db9c:	f003 031f 	and.w	r3, r3, #31
 801dba0:	fa22 f303 	lsr.w	r3, r2, r3
 801dba4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801dba6:	4b0e      	ldr	r3, [pc, #56]	@ (801dbe0 <HAL_RCC_ClockConfig+0x358>)
 801dba8:	699b      	ldr	r3, [r3, #24]
 801dbaa:	f003 030f 	and.w	r3, r3, #15
 801dbae:	4a0d      	ldr	r2, [pc, #52]	@ (801dbe4 <HAL_RCC_ClockConfig+0x35c>)
 801dbb0:	5cd3      	ldrb	r3, [r2, r3]
 801dbb2:	f003 031f 	and.w	r3, r3, #31
 801dbb6:	693a      	ldr	r2, [r7, #16]
 801dbb8:	fa22 f303 	lsr.w	r3, r2, r3
 801dbbc:	4a0a      	ldr	r2, [pc, #40]	@ (801dbe8 <HAL_RCC_ClockConfig+0x360>)
 801dbbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801dbc0:	4a0a      	ldr	r2, [pc, #40]	@ (801dbec <HAL_RCC_ClockConfig+0x364>)
 801dbc2:	693b      	ldr	r3, [r7, #16]
 801dbc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801dbc6:	4b0a      	ldr	r3, [pc, #40]	@ (801dbf0 <HAL_RCC_ClockConfig+0x368>)
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	4618      	mov	r0, r3
 801dbcc:	f7fc fda0 	bl	801a710 <HAL_InitTick>
 801dbd0:	4603      	mov	r3, r0
 801dbd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801dbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 801dbd6:	4618      	mov	r0, r3
 801dbd8:	3718      	adds	r7, #24
 801dbda:	46bd      	mov	sp, r7
 801dbdc:	bd80      	pop	{r7, pc}
 801dbde:	bf00      	nop
 801dbe0:	58024400 	.word	0x58024400
 801dbe4:	08027f04 	.word	0x08027f04
 801dbe8:	20000004 	.word	0x20000004
 801dbec:	20000000 	.word	0x20000000
 801dbf0:	20000020 	.word	0x20000020

0801dbf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801dbf4:	b480      	push	{r7}
 801dbf6:	b089      	sub	sp, #36	@ 0x24
 801dbf8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801dbfa:	4bb3      	ldr	r3, [pc, #716]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dbfc:	691b      	ldr	r3, [r3, #16]
 801dbfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801dc02:	2b18      	cmp	r3, #24
 801dc04:	f200 8155 	bhi.w	801deb2 <HAL_RCC_GetSysClockFreq+0x2be>
 801dc08:	a201      	add	r2, pc, #4	@ (adr r2, 801dc10 <HAL_RCC_GetSysClockFreq+0x1c>)
 801dc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc0e:	bf00      	nop
 801dc10:	0801dc75 	.word	0x0801dc75
 801dc14:	0801deb3 	.word	0x0801deb3
 801dc18:	0801deb3 	.word	0x0801deb3
 801dc1c:	0801deb3 	.word	0x0801deb3
 801dc20:	0801deb3 	.word	0x0801deb3
 801dc24:	0801deb3 	.word	0x0801deb3
 801dc28:	0801deb3 	.word	0x0801deb3
 801dc2c:	0801deb3 	.word	0x0801deb3
 801dc30:	0801dc9b 	.word	0x0801dc9b
 801dc34:	0801deb3 	.word	0x0801deb3
 801dc38:	0801deb3 	.word	0x0801deb3
 801dc3c:	0801deb3 	.word	0x0801deb3
 801dc40:	0801deb3 	.word	0x0801deb3
 801dc44:	0801deb3 	.word	0x0801deb3
 801dc48:	0801deb3 	.word	0x0801deb3
 801dc4c:	0801deb3 	.word	0x0801deb3
 801dc50:	0801dca1 	.word	0x0801dca1
 801dc54:	0801deb3 	.word	0x0801deb3
 801dc58:	0801deb3 	.word	0x0801deb3
 801dc5c:	0801deb3 	.word	0x0801deb3
 801dc60:	0801deb3 	.word	0x0801deb3
 801dc64:	0801deb3 	.word	0x0801deb3
 801dc68:	0801deb3 	.word	0x0801deb3
 801dc6c:	0801deb3 	.word	0x0801deb3
 801dc70:	0801dca7 	.word	0x0801dca7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dc74:	4b94      	ldr	r3, [pc, #592]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	f003 0320 	and.w	r3, r3, #32
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	d009      	beq.n	801dc94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dc80:	4b91      	ldr	r3, [pc, #580]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	08db      	lsrs	r3, r3, #3
 801dc86:	f003 0303 	and.w	r3, r3, #3
 801dc8a:	4a90      	ldr	r2, [pc, #576]	@ (801decc <HAL_RCC_GetSysClockFreq+0x2d8>)
 801dc8c:	fa22 f303 	lsr.w	r3, r2, r3
 801dc90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801dc92:	e111      	b.n	801deb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801dc94:	4b8d      	ldr	r3, [pc, #564]	@ (801decc <HAL_RCC_GetSysClockFreq+0x2d8>)
 801dc96:	61bb      	str	r3, [r7, #24]
      break;
 801dc98:	e10e      	b.n	801deb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801dc9a:	4b8d      	ldr	r3, [pc, #564]	@ (801ded0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801dc9c:	61bb      	str	r3, [r7, #24]
      break;
 801dc9e:	e10b      	b.n	801deb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801dca0:	4b8c      	ldr	r3, [pc, #560]	@ (801ded4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801dca2:	61bb      	str	r3, [r7, #24]
      break;
 801dca4:	e108      	b.n	801deb8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dca6:	4b88      	ldr	r3, [pc, #544]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dcaa:	f003 0303 	and.w	r3, r3, #3
 801dcae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801dcb0:	4b85      	ldr	r3, [pc, #532]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dcb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dcb4:	091b      	lsrs	r3, r3, #4
 801dcb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dcba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801dcbc:	4b82      	ldr	r3, [pc, #520]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dcbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dcc0:	f003 0301 	and.w	r3, r3, #1
 801dcc4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801dcc6:	4b80      	ldr	r3, [pc, #512]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dcc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801dcca:	08db      	lsrs	r3, r3, #3
 801dccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dcd0:	68fa      	ldr	r2, [r7, #12]
 801dcd2:	fb02 f303 	mul.w	r3, r2, r3
 801dcd6:	ee07 3a90 	vmov	s15, r3
 801dcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcde:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801dce2:	693b      	ldr	r3, [r7, #16]
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	f000 80e1 	beq.w	801deac <HAL_RCC_GetSysClockFreq+0x2b8>
 801dcea:	697b      	ldr	r3, [r7, #20]
 801dcec:	2b02      	cmp	r3, #2
 801dcee:	f000 8083 	beq.w	801ddf8 <HAL_RCC_GetSysClockFreq+0x204>
 801dcf2:	697b      	ldr	r3, [r7, #20]
 801dcf4:	2b02      	cmp	r3, #2
 801dcf6:	f200 80a1 	bhi.w	801de3c <HAL_RCC_GetSysClockFreq+0x248>
 801dcfa:	697b      	ldr	r3, [r7, #20]
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	d003      	beq.n	801dd08 <HAL_RCC_GetSysClockFreq+0x114>
 801dd00:	697b      	ldr	r3, [r7, #20]
 801dd02:	2b01      	cmp	r3, #1
 801dd04:	d056      	beq.n	801ddb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 801dd06:	e099      	b.n	801de3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dd08:	4b6f      	ldr	r3, [pc, #444]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dd0a:	681b      	ldr	r3, [r3, #0]
 801dd0c:	f003 0320 	and.w	r3, r3, #32
 801dd10:	2b00      	cmp	r3, #0
 801dd12:	d02d      	beq.n	801dd70 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dd14:	4b6c      	ldr	r3, [pc, #432]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dd16:	681b      	ldr	r3, [r3, #0]
 801dd18:	08db      	lsrs	r3, r3, #3
 801dd1a:	f003 0303 	and.w	r3, r3, #3
 801dd1e:	4a6b      	ldr	r2, [pc, #428]	@ (801decc <HAL_RCC_GetSysClockFreq+0x2d8>)
 801dd20:	fa22 f303 	lsr.w	r3, r2, r3
 801dd24:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	ee07 3a90 	vmov	s15, r3
 801dd2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd30:	693b      	ldr	r3, [r7, #16]
 801dd32:	ee07 3a90 	vmov	s15, r3
 801dd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd3e:	4b62      	ldr	r3, [pc, #392]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dd40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd46:	ee07 3a90 	vmov	s15, r3
 801dd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd4e:	ed97 6a02 	vldr	s12, [r7, #8]
 801dd52:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801ded8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd6a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801dd6e:	e087      	b.n	801de80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dd70:	693b      	ldr	r3, [r7, #16]
 801dd72:	ee07 3a90 	vmov	s15, r3
 801dd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd7a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801dedc <HAL_RCC_GetSysClockFreq+0x2e8>
 801dd7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd82:	4b51      	ldr	r3, [pc, #324]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dd84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd8a:	ee07 3a90 	vmov	s15, r3
 801dd8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd92:	ed97 6a02 	vldr	s12, [r7, #8]
 801dd96:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801ded8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dd9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dda2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dda6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ddaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ddae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801ddb2:	e065      	b.n	801de80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ddb4:	693b      	ldr	r3, [r7, #16]
 801ddb6:	ee07 3a90 	vmov	s15, r3
 801ddba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddbe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801dee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801ddc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ddc6:	4b40      	ldr	r3, [pc, #256]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ddc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ddca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ddce:	ee07 3a90 	vmov	s15, r3
 801ddd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ddd6:	ed97 6a02 	vldr	s12, [r7, #8]
 801ddda:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801ded8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801ddde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dde2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dde6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ddea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ddee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ddf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801ddf6:	e043      	b.n	801de80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ddf8:	693b      	ldr	r3, [r7, #16]
 801ddfa:	ee07 3a90 	vmov	s15, r3
 801ddfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de02:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801dee4 <HAL_RCC_GetSysClockFreq+0x2f0>
 801de06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de0a:	4b2f      	ldr	r3, [pc, #188]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801de0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de12:	ee07 3a90 	vmov	s15, r3
 801de16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de1a:	ed97 6a02 	vldr	s12, [r7, #8]
 801de1e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801ded8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801de22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de32:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801de3a:	e021      	b.n	801de80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801de3c:	693b      	ldr	r3, [r7, #16]
 801de3e:	ee07 3a90 	vmov	s15, r3
 801de42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de46:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801dee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801de4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de4e:	4b1e      	ldr	r3, [pc, #120]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801de52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de56:	ee07 3a90 	vmov	s15, r3
 801de5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de5e:	ed97 6a02 	vldr	s12, [r7, #8]
 801de62:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801ded8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801de66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de76:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801de7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801de80:	4b11      	ldr	r3, [pc, #68]	@ (801dec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801de84:	0a5b      	lsrs	r3, r3, #9
 801de86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801de8a:	3301      	adds	r3, #1
 801de8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801de8e:	683b      	ldr	r3, [r7, #0]
 801de90:	ee07 3a90 	vmov	s15, r3
 801de94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801de98:	edd7 6a07 	vldr	s13, [r7, #28]
 801de9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dea4:	ee17 3a90 	vmov	r3, s15
 801dea8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801deaa:	e005      	b.n	801deb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801deac:	2300      	movs	r3, #0
 801deae:	61bb      	str	r3, [r7, #24]
      break;
 801deb0:	e002      	b.n	801deb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801deb2:	4b07      	ldr	r3, [pc, #28]	@ (801ded0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801deb4:	61bb      	str	r3, [r7, #24]
      break;
 801deb6:	bf00      	nop
  }

  return sysclockfreq;
 801deb8:	69bb      	ldr	r3, [r7, #24]
}
 801deba:	4618      	mov	r0, r3
 801debc:	3724      	adds	r7, #36	@ 0x24
 801debe:	46bd      	mov	sp, r7
 801dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dec4:	4770      	bx	lr
 801dec6:	bf00      	nop
 801dec8:	58024400 	.word	0x58024400
 801decc:	03d09000 	.word	0x03d09000
 801ded0:	003d0900 	.word	0x003d0900
 801ded4:	017d7840 	.word	0x017d7840
 801ded8:	46000000 	.word	0x46000000
 801dedc:	4c742400 	.word	0x4c742400
 801dee0:	4a742400 	.word	0x4a742400
 801dee4:	4bbebc20 	.word	0x4bbebc20

0801dee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801dee8:	b580      	push	{r7, lr}
 801deea:	b082      	sub	sp, #8
 801deec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801deee:	f7ff fe81 	bl	801dbf4 <HAL_RCC_GetSysClockFreq>
 801def2:	4602      	mov	r2, r0
 801def4:	4b10      	ldr	r3, [pc, #64]	@ (801df38 <HAL_RCC_GetHCLKFreq+0x50>)
 801def6:	699b      	ldr	r3, [r3, #24]
 801def8:	0a1b      	lsrs	r3, r3, #8
 801defa:	f003 030f 	and.w	r3, r3, #15
 801defe:	490f      	ldr	r1, [pc, #60]	@ (801df3c <HAL_RCC_GetHCLKFreq+0x54>)
 801df00:	5ccb      	ldrb	r3, [r1, r3]
 801df02:	f003 031f 	and.w	r3, r3, #31
 801df06:	fa22 f303 	lsr.w	r3, r2, r3
 801df0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801df0c:	4b0a      	ldr	r3, [pc, #40]	@ (801df38 <HAL_RCC_GetHCLKFreq+0x50>)
 801df0e:	699b      	ldr	r3, [r3, #24]
 801df10:	f003 030f 	and.w	r3, r3, #15
 801df14:	4a09      	ldr	r2, [pc, #36]	@ (801df3c <HAL_RCC_GetHCLKFreq+0x54>)
 801df16:	5cd3      	ldrb	r3, [r2, r3]
 801df18:	f003 031f 	and.w	r3, r3, #31
 801df1c:	687a      	ldr	r2, [r7, #4]
 801df1e:	fa22 f303 	lsr.w	r3, r2, r3
 801df22:	4a07      	ldr	r2, [pc, #28]	@ (801df40 <HAL_RCC_GetHCLKFreq+0x58>)
 801df24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801df26:	4a07      	ldr	r2, [pc, #28]	@ (801df44 <HAL_RCC_GetHCLKFreq+0x5c>)
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801df2c:	4b04      	ldr	r3, [pc, #16]	@ (801df40 <HAL_RCC_GetHCLKFreq+0x58>)
 801df2e:	681b      	ldr	r3, [r3, #0]
}
 801df30:	4618      	mov	r0, r3
 801df32:	3708      	adds	r7, #8
 801df34:	46bd      	mov	sp, r7
 801df36:	bd80      	pop	{r7, pc}
 801df38:	58024400 	.word	0x58024400
 801df3c:	08027f04 	.word	0x08027f04
 801df40:	20000004 	.word	0x20000004
 801df44:	20000000 	.word	0x20000000

0801df48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801df48:	b580      	push	{r7, lr}
 801df4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801df4c:	f7ff ffcc 	bl	801dee8 <HAL_RCC_GetHCLKFreq>
 801df50:	4602      	mov	r2, r0
 801df52:	4b06      	ldr	r3, [pc, #24]	@ (801df6c <HAL_RCC_GetPCLK1Freq+0x24>)
 801df54:	69db      	ldr	r3, [r3, #28]
 801df56:	091b      	lsrs	r3, r3, #4
 801df58:	f003 0307 	and.w	r3, r3, #7
 801df5c:	4904      	ldr	r1, [pc, #16]	@ (801df70 <HAL_RCC_GetPCLK1Freq+0x28>)
 801df5e:	5ccb      	ldrb	r3, [r1, r3]
 801df60:	f003 031f 	and.w	r3, r3, #31
 801df64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801df68:	4618      	mov	r0, r3
 801df6a:	bd80      	pop	{r7, pc}
 801df6c:	58024400 	.word	0x58024400
 801df70:	08027f04 	.word	0x08027f04

0801df74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801df74:	b580      	push	{r7, lr}
 801df76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801df78:	f7ff ffb6 	bl	801dee8 <HAL_RCC_GetHCLKFreq>
 801df7c:	4602      	mov	r2, r0
 801df7e:	4b06      	ldr	r3, [pc, #24]	@ (801df98 <HAL_RCC_GetPCLK2Freq+0x24>)
 801df80:	69db      	ldr	r3, [r3, #28]
 801df82:	0a1b      	lsrs	r3, r3, #8
 801df84:	f003 0307 	and.w	r3, r3, #7
 801df88:	4904      	ldr	r1, [pc, #16]	@ (801df9c <HAL_RCC_GetPCLK2Freq+0x28>)
 801df8a:	5ccb      	ldrb	r3, [r1, r3]
 801df8c:	f003 031f 	and.w	r3, r3, #31
 801df90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801df94:	4618      	mov	r0, r3
 801df96:	bd80      	pop	{r7, pc}
 801df98:	58024400 	.word	0x58024400
 801df9c:	08027f04 	.word	0x08027f04

0801dfa0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801dfa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801dfa4:	b0ca      	sub	sp, #296	@ 0x128
 801dfa6:	af00      	add	r7, sp, #0
 801dfa8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801dfac:	2300      	movs	r3, #0
 801dfae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801dfb2:	2300      	movs	r3, #0
 801dfb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801dfb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfc0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801dfc4:	2500      	movs	r5, #0
 801dfc6:	ea54 0305 	orrs.w	r3, r4, r5
 801dfca:	d049      	beq.n	801e060 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801dfcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dfd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801dfd6:	d02f      	beq.n	801e038 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801dfd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801dfdc:	d828      	bhi.n	801e030 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801dfde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801dfe2:	d01a      	beq.n	801e01a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801dfe4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801dfe8:	d822      	bhi.n	801e030 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d003      	beq.n	801dff6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801dfee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801dff2:	d007      	beq.n	801e004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801dff4:	e01c      	b.n	801e030 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dff6:	4bb8      	ldr	r3, [pc, #736]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dffa:	4ab7      	ldr	r2, [pc, #732]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e000:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801e002:	e01a      	b.n	801e03a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e008:	3308      	adds	r3, #8
 801e00a:	2102      	movs	r1, #2
 801e00c:	4618      	mov	r0, r3
 801e00e:	f001 fc8f 	bl	801f930 <RCCEx_PLL2_Config>
 801e012:	4603      	mov	r3, r0
 801e014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801e018:	e00f      	b.n	801e03a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e01e:	3328      	adds	r3, #40	@ 0x28
 801e020:	2102      	movs	r1, #2
 801e022:	4618      	mov	r0, r3
 801e024:	f001 fd36 	bl	801fa94 <RCCEx_PLL3_Config>
 801e028:	4603      	mov	r3, r0
 801e02a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801e02e:	e004      	b.n	801e03a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e030:	2301      	movs	r3, #1
 801e032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e036:	e000      	b.n	801e03a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801e038:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e03a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d10a      	bne.n	801e058 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801e042:	4ba5      	ldr	r3, [pc, #660]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e046:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e04e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e050:	4aa1      	ldr	r2, [pc, #644]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e052:	430b      	orrs	r3, r1
 801e054:	6513      	str	r3, [r2, #80]	@ 0x50
 801e056:	e003      	b.n	801e060 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e05c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801e060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e064:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e068:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801e06c:	f04f 0900 	mov.w	r9, #0
 801e070:	ea58 0309 	orrs.w	r3, r8, r9
 801e074:	d047      	beq.n	801e106 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801e076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e07a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e07c:	2b04      	cmp	r3, #4
 801e07e:	d82a      	bhi.n	801e0d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801e080:	a201      	add	r2, pc, #4	@ (adr r2, 801e088 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801e082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e086:	bf00      	nop
 801e088:	0801e09d 	.word	0x0801e09d
 801e08c:	0801e0ab 	.word	0x0801e0ab
 801e090:	0801e0c1 	.word	0x0801e0c1
 801e094:	0801e0df 	.word	0x0801e0df
 801e098:	0801e0df 	.word	0x0801e0df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e09c:	4b8e      	ldr	r3, [pc, #568]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e0a0:	4a8d      	ldr	r2, [pc, #564]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e0a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e0a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e0a8:	e01a      	b.n	801e0e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0ae:	3308      	adds	r3, #8
 801e0b0:	2100      	movs	r1, #0
 801e0b2:	4618      	mov	r0, r3
 801e0b4:	f001 fc3c 	bl	801f930 <RCCEx_PLL2_Config>
 801e0b8:	4603      	mov	r3, r0
 801e0ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e0be:	e00f      	b.n	801e0e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0c4:	3328      	adds	r3, #40	@ 0x28
 801e0c6:	2100      	movs	r1, #0
 801e0c8:	4618      	mov	r0, r3
 801e0ca:	f001 fce3 	bl	801fa94 <RCCEx_PLL3_Config>
 801e0ce:	4603      	mov	r3, r0
 801e0d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e0d4:	e004      	b.n	801e0e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e0d6:	2301      	movs	r3, #1
 801e0d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e0dc:	e000      	b.n	801e0e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801e0de:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e0e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	d10a      	bne.n	801e0fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801e0e8:	4b7b      	ldr	r3, [pc, #492]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e0ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e0ec:	f023 0107 	bic.w	r1, r3, #7
 801e0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e0f6:	4a78      	ldr	r2, [pc, #480]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e0f8:	430b      	orrs	r3, r1
 801e0fa:	6513      	str	r3, [r2, #80]	@ 0x50
 801e0fc:	e003      	b.n	801e106 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e102:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801e106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e10e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801e112:	f04f 0b00 	mov.w	fp, #0
 801e116:	ea5a 030b 	orrs.w	r3, sl, fp
 801e11a:	d04c      	beq.n	801e1b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801e11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e126:	d030      	beq.n	801e18a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801e128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e12c:	d829      	bhi.n	801e182 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e12e:	2bc0      	cmp	r3, #192	@ 0xc0
 801e130:	d02d      	beq.n	801e18e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801e132:	2bc0      	cmp	r3, #192	@ 0xc0
 801e134:	d825      	bhi.n	801e182 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e136:	2b80      	cmp	r3, #128	@ 0x80
 801e138:	d018      	beq.n	801e16c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801e13a:	2b80      	cmp	r3, #128	@ 0x80
 801e13c:	d821      	bhi.n	801e182 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d002      	beq.n	801e148 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801e142:	2b40      	cmp	r3, #64	@ 0x40
 801e144:	d007      	beq.n	801e156 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801e146:	e01c      	b.n	801e182 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e148:	4b63      	ldr	r3, [pc, #396]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e14c:	4a62      	ldr	r2, [pc, #392]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e14e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e154:	e01c      	b.n	801e190 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e15a:	3308      	adds	r3, #8
 801e15c:	2100      	movs	r1, #0
 801e15e:	4618      	mov	r0, r3
 801e160:	f001 fbe6 	bl	801f930 <RCCEx_PLL2_Config>
 801e164:	4603      	mov	r3, r0
 801e166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e16a:	e011      	b.n	801e190 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e170:	3328      	adds	r3, #40	@ 0x28
 801e172:	2100      	movs	r1, #0
 801e174:	4618      	mov	r0, r3
 801e176:	f001 fc8d 	bl	801fa94 <RCCEx_PLL3_Config>
 801e17a:	4603      	mov	r3, r0
 801e17c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e180:	e006      	b.n	801e190 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e182:	2301      	movs	r3, #1
 801e184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e188:	e002      	b.n	801e190 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801e18a:	bf00      	nop
 801e18c:	e000      	b.n	801e190 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801e18e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e194:	2b00      	cmp	r3, #0
 801e196:	d10a      	bne.n	801e1ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801e198:	4b4f      	ldr	r3, [pc, #316]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e19a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e19c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801e1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e1a6:	4a4c      	ldr	r2, [pc, #304]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e1a8:	430b      	orrs	r3, r1
 801e1aa:	6513      	str	r3, [r2, #80]	@ 0x50
 801e1ac:	e003      	b.n	801e1b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801e1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801e1c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801e1c6:	2300      	movs	r3, #0
 801e1c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801e1cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801e1d0:	460b      	mov	r3, r1
 801e1d2:	4313      	orrs	r3, r2
 801e1d4:	d053      	beq.n	801e27e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801e1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801e1de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e1e2:	d035      	beq.n	801e250 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801e1e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e1e8:	d82e      	bhi.n	801e248 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e1ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e1ee:	d031      	beq.n	801e254 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801e1f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e1f4:	d828      	bhi.n	801e248 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e1f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e1fa:	d01a      	beq.n	801e232 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801e1fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e200:	d822      	bhi.n	801e248 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e202:	2b00      	cmp	r3, #0
 801e204:	d003      	beq.n	801e20e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801e206:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e20a:	d007      	beq.n	801e21c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801e20c:	e01c      	b.n	801e248 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e20e:	4b32      	ldr	r3, [pc, #200]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e212:	4a31      	ldr	r2, [pc, #196]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e21a:	e01c      	b.n	801e256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e220:	3308      	adds	r3, #8
 801e222:	2100      	movs	r1, #0
 801e224:	4618      	mov	r0, r3
 801e226:	f001 fb83 	bl	801f930 <RCCEx_PLL2_Config>
 801e22a:	4603      	mov	r3, r0
 801e22c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801e230:	e011      	b.n	801e256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e236:	3328      	adds	r3, #40	@ 0x28
 801e238:	2100      	movs	r1, #0
 801e23a:	4618      	mov	r0, r3
 801e23c:	f001 fc2a 	bl	801fa94 <RCCEx_PLL3_Config>
 801e240:	4603      	mov	r3, r0
 801e242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e246:	e006      	b.n	801e256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801e248:	2301      	movs	r3, #1
 801e24a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e24e:	e002      	b.n	801e256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801e250:	bf00      	nop
 801e252:	e000      	b.n	801e256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801e254:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d10b      	bne.n	801e276 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801e25e:	4b1e      	ldr	r3, [pc, #120]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e262:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801e266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e26a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801e26e:	4a1a      	ldr	r2, [pc, #104]	@ (801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e270:	430b      	orrs	r3, r1
 801e272:	6593      	str	r3, [r2, #88]	@ 0x58
 801e274:	e003      	b.n	801e27e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e27a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801e27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e286:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801e28a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801e28e:	2300      	movs	r3, #0
 801e290:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801e294:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801e298:	460b      	mov	r3, r1
 801e29a:	4313      	orrs	r3, r2
 801e29c:	d056      	beq.n	801e34c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801e29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801e2a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e2aa:	d038      	beq.n	801e31e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801e2ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e2b0:	d831      	bhi.n	801e316 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e2b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e2b6:	d034      	beq.n	801e322 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801e2b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e2bc:	d82b      	bhi.n	801e316 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e2be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e2c2:	d01d      	beq.n	801e300 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801e2c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e2c8:	d825      	bhi.n	801e316 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d006      	beq.n	801e2dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801e2ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e2d2:	d00a      	beq.n	801e2ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801e2d4:	e01f      	b.n	801e316 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e2d6:	bf00      	nop
 801e2d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e2dc:	4ba2      	ldr	r3, [pc, #648]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e2e0:	4aa1      	ldr	r2, [pc, #644]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e2e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e2e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e2e8:	e01c      	b.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2ee:	3308      	adds	r3, #8
 801e2f0:	2100      	movs	r1, #0
 801e2f2:	4618      	mov	r0, r3
 801e2f4:	f001 fb1c 	bl	801f930 <RCCEx_PLL2_Config>
 801e2f8:	4603      	mov	r3, r0
 801e2fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801e2fe:	e011      	b.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e304:	3328      	adds	r3, #40	@ 0x28
 801e306:	2100      	movs	r1, #0
 801e308:	4618      	mov	r0, r3
 801e30a:	f001 fbc3 	bl	801fa94 <RCCEx_PLL3_Config>
 801e30e:	4603      	mov	r3, r0
 801e310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e314:	e006      	b.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801e316:	2301      	movs	r3, #1
 801e318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e31c:	e002      	b.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801e31e:	bf00      	nop
 801e320:	e000      	b.n	801e324 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801e322:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d10b      	bne.n	801e344 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801e32c:	4b8e      	ldr	r3, [pc, #568]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e32e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e330:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801e334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e338:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801e33c:	4a8a      	ldr	r2, [pc, #552]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e33e:	430b      	orrs	r3, r1
 801e340:	6593      	str	r3, [r2, #88]	@ 0x58
 801e342:	e003      	b.n	801e34c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801e34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e354:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801e358:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801e35c:	2300      	movs	r3, #0
 801e35e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801e362:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801e366:	460b      	mov	r3, r1
 801e368:	4313      	orrs	r3, r2
 801e36a:	d03a      	beq.n	801e3e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801e36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e372:	2b30      	cmp	r3, #48	@ 0x30
 801e374:	d01f      	beq.n	801e3b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801e376:	2b30      	cmp	r3, #48	@ 0x30
 801e378:	d819      	bhi.n	801e3ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801e37a:	2b20      	cmp	r3, #32
 801e37c:	d00c      	beq.n	801e398 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801e37e:	2b20      	cmp	r3, #32
 801e380:	d815      	bhi.n	801e3ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801e382:	2b00      	cmp	r3, #0
 801e384:	d019      	beq.n	801e3ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801e386:	2b10      	cmp	r3, #16
 801e388:	d111      	bne.n	801e3ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e38a:	4b77      	ldr	r3, [pc, #476]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e38e:	4a76      	ldr	r2, [pc, #472]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e394:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801e396:	e011      	b.n	801e3bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e39c:	3308      	adds	r3, #8
 801e39e:	2102      	movs	r1, #2
 801e3a0:	4618      	mov	r0, r3
 801e3a2:	f001 fac5 	bl	801f930 <RCCEx_PLL2_Config>
 801e3a6:	4603      	mov	r3, r0
 801e3a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801e3ac:	e006      	b.n	801e3bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e3ae:	2301      	movs	r3, #1
 801e3b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e3b4:	e002      	b.n	801e3bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801e3b6:	bf00      	nop
 801e3b8:	e000      	b.n	801e3bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801e3ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e3bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	d10a      	bne.n	801e3da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801e3c4:	4b68      	ldr	r3, [pc, #416]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e3c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e3c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801e3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e3d2:	4a65      	ldr	r2, [pc, #404]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e3d4:	430b      	orrs	r3, r1
 801e3d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e3d8:	e003      	b.n	801e3e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e3da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801e3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801e3ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801e3f2:	2300      	movs	r3, #0
 801e3f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801e3f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801e3fc:	460b      	mov	r3, r1
 801e3fe:	4313      	orrs	r3, r2
 801e400:	d051      	beq.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801e402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e408:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e40c:	d035      	beq.n	801e47a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801e40e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e412:	d82e      	bhi.n	801e472 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e414:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e418:	d031      	beq.n	801e47e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801e41a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e41e:	d828      	bhi.n	801e472 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e424:	d01a      	beq.n	801e45c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801e426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e42a:	d822      	bhi.n	801e472 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	d003      	beq.n	801e438 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801e430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e434:	d007      	beq.n	801e446 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801e436:	e01c      	b.n	801e472 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e438:	4b4b      	ldr	r3, [pc, #300]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e43c:	4a4a      	ldr	r2, [pc, #296]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e43e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e444:	e01c      	b.n	801e480 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e44a:	3308      	adds	r3, #8
 801e44c:	2100      	movs	r1, #0
 801e44e:	4618      	mov	r0, r3
 801e450:	f001 fa6e 	bl	801f930 <RCCEx_PLL2_Config>
 801e454:	4603      	mov	r3, r0
 801e456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e45a:	e011      	b.n	801e480 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e460:	3328      	adds	r3, #40	@ 0x28
 801e462:	2100      	movs	r1, #0
 801e464:	4618      	mov	r0, r3
 801e466:	f001 fb15 	bl	801fa94 <RCCEx_PLL3_Config>
 801e46a:	4603      	mov	r3, r0
 801e46c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e470:	e006      	b.n	801e480 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e472:	2301      	movs	r3, #1
 801e474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e478:	e002      	b.n	801e480 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801e47a:	bf00      	nop
 801e47c:	e000      	b.n	801e480 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801e47e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e484:	2b00      	cmp	r3, #0
 801e486:	d10a      	bne.n	801e49e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801e488:	4b37      	ldr	r3, [pc, #220]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e48a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e48c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801e490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e496:	4a34      	ldr	r2, [pc, #208]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e498:	430b      	orrs	r3, r1
 801e49a:	6513      	str	r3, [r2, #80]	@ 0x50
 801e49c:	e003      	b.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e49e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801e4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801e4b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801e4b6:	2300      	movs	r3, #0
 801e4b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801e4bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801e4c0:	460b      	mov	r3, r1
 801e4c2:	4313      	orrs	r3, r2
 801e4c4:	d056      	beq.n	801e574 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801e4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e4cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e4d0:	d033      	beq.n	801e53a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801e4d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e4d6:	d82c      	bhi.n	801e532 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e4d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e4dc:	d02f      	beq.n	801e53e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801e4de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e4e2:	d826      	bhi.n	801e532 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e4e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e4e8:	d02b      	beq.n	801e542 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801e4ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e4ee:	d820      	bhi.n	801e532 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e4f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e4f4:	d012      	beq.n	801e51c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801e4f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e4fa:	d81a      	bhi.n	801e532 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	d022      	beq.n	801e546 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801e500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e504:	d115      	bne.n	801e532 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e50a:	3308      	adds	r3, #8
 801e50c:	2101      	movs	r1, #1
 801e50e:	4618      	mov	r0, r3
 801e510:	f001 fa0e 	bl	801f930 <RCCEx_PLL2_Config>
 801e514:	4603      	mov	r3, r0
 801e516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e51a:	e015      	b.n	801e548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e520:	3328      	adds	r3, #40	@ 0x28
 801e522:	2101      	movs	r1, #1
 801e524:	4618      	mov	r0, r3
 801e526:	f001 fab5 	bl	801fa94 <RCCEx_PLL3_Config>
 801e52a:	4603      	mov	r3, r0
 801e52c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e530:	e00a      	b.n	801e548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e532:	2301      	movs	r3, #1
 801e534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e538:	e006      	b.n	801e548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e53a:	bf00      	nop
 801e53c:	e004      	b.n	801e548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e53e:	bf00      	nop
 801e540:	e002      	b.n	801e548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e542:	bf00      	nop
 801e544:	e000      	b.n	801e548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e546:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	d10d      	bne.n	801e56c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801e550:	4b05      	ldr	r3, [pc, #20]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e554:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801e558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e55c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e55e:	4a02      	ldr	r2, [pc, #8]	@ (801e568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e560:	430b      	orrs	r3, r1
 801e562:	6513      	str	r3, [r2, #80]	@ 0x50
 801e564:	e006      	b.n	801e574 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801e566:	bf00      	nop
 801e568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e56c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e570:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801e574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e57c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801e580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801e584:	2300      	movs	r3, #0
 801e586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801e58a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801e58e:	460b      	mov	r3, r1
 801e590:	4313      	orrs	r3, r2
 801e592:	d055      	beq.n	801e640 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801e594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e59c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e5a0:	d033      	beq.n	801e60a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801e5a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e5a6:	d82c      	bhi.n	801e602 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e5a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e5ac:	d02f      	beq.n	801e60e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801e5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e5b2:	d826      	bhi.n	801e602 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e5b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e5b8:	d02b      	beq.n	801e612 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801e5ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e5be:	d820      	bhi.n	801e602 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e5c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e5c4:	d012      	beq.n	801e5ec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801e5c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e5ca:	d81a      	bhi.n	801e602 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d022      	beq.n	801e616 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801e5d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e5d4:	d115      	bne.n	801e602 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5da:	3308      	adds	r3, #8
 801e5dc:	2101      	movs	r1, #1
 801e5de:	4618      	mov	r0, r3
 801e5e0:	f001 f9a6 	bl	801f930 <RCCEx_PLL2_Config>
 801e5e4:	4603      	mov	r3, r0
 801e5e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e5ea:	e015      	b.n	801e618 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5f0:	3328      	adds	r3, #40	@ 0x28
 801e5f2:	2101      	movs	r1, #1
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	f001 fa4d 	bl	801fa94 <RCCEx_PLL3_Config>
 801e5fa:	4603      	mov	r3, r0
 801e5fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e600:	e00a      	b.n	801e618 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801e602:	2301      	movs	r3, #1
 801e604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e608:	e006      	b.n	801e618 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e60a:	bf00      	nop
 801e60c:	e004      	b.n	801e618 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e60e:	bf00      	nop
 801e610:	e002      	b.n	801e618 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e612:	bf00      	nop
 801e614:	e000      	b.n	801e618 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e616:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d10b      	bne.n	801e638 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801e620:	4ba3      	ldr	r3, [pc, #652]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e624:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e62c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e630:	4a9f      	ldr	r2, [pc, #636]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e632:	430b      	orrs	r3, r1
 801e634:	6593      	str	r3, [r2, #88]	@ 0x58
 801e636:	e003      	b.n	801e640 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e63c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801e640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e644:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e648:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801e64c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801e650:	2300      	movs	r3, #0
 801e652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801e656:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801e65a:	460b      	mov	r3, r1
 801e65c:	4313      	orrs	r3, r2
 801e65e:	d037      	beq.n	801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801e660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e66a:	d00e      	beq.n	801e68a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801e66c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e670:	d816      	bhi.n	801e6a0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801e672:	2b00      	cmp	r3, #0
 801e674:	d018      	beq.n	801e6a8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801e676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e67a:	d111      	bne.n	801e6a0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e67c:	4b8c      	ldr	r3, [pc, #560]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e67e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e680:	4a8b      	ldr	r2, [pc, #556]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e688:	e00f      	b.n	801e6aa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e68e:	3308      	adds	r3, #8
 801e690:	2101      	movs	r1, #1
 801e692:	4618      	mov	r0, r3
 801e694:	f001 f94c 	bl	801f930 <RCCEx_PLL2_Config>
 801e698:	4603      	mov	r3, r0
 801e69a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e69e:	e004      	b.n	801e6aa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e6a0:	2301      	movs	r3, #1
 801e6a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e6a6:	e000      	b.n	801e6aa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801e6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	d10a      	bne.n	801e6c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801e6b2:	4b7f      	ldr	r3, [pc, #508]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e6b6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e6c0:	4a7b      	ldr	r2, [pc, #492]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6c2:	430b      	orrs	r3, r1
 801e6c4:	6513      	str	r3, [r2, #80]	@ 0x50
 801e6c6:	e003      	b.n	801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e6c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801e6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6d8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801e6dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801e6e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801e6ea:	460b      	mov	r3, r1
 801e6ec:	4313      	orrs	r3, r2
 801e6ee:	d039      	beq.n	801e764 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801e6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e6f6:	2b03      	cmp	r3, #3
 801e6f8:	d81c      	bhi.n	801e734 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801e6fa:	a201      	add	r2, pc, #4	@ (adr r2, 801e700 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801e6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e700:	0801e73d 	.word	0x0801e73d
 801e704:	0801e711 	.word	0x0801e711
 801e708:	0801e71f 	.word	0x0801e71f
 801e70c:	0801e73d 	.word	0x0801e73d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e710:	4b67      	ldr	r3, [pc, #412]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e714:	4a66      	ldr	r2, [pc, #408]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e71a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e71c:	e00f      	b.n	801e73e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e722:	3308      	adds	r3, #8
 801e724:	2102      	movs	r1, #2
 801e726:	4618      	mov	r0, r3
 801e728:	f001 f902 	bl	801f930 <RCCEx_PLL2_Config>
 801e72c:	4603      	mov	r3, r0
 801e72e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e732:	e004      	b.n	801e73e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e734:	2301      	movs	r3, #1
 801e736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e73a:	e000      	b.n	801e73e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801e73c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e73e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e742:	2b00      	cmp	r3, #0
 801e744:	d10a      	bne.n	801e75c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801e746:	4b5a      	ldr	r3, [pc, #360]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e74a:	f023 0103 	bic.w	r1, r3, #3
 801e74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e754:	4a56      	ldr	r2, [pc, #344]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e756:	430b      	orrs	r3, r1
 801e758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e75a:	e003      	b.n	801e764 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e75c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801e764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e76c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801e770:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801e774:	2300      	movs	r3, #0
 801e776:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801e77a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801e77e:	460b      	mov	r3, r1
 801e780:	4313      	orrs	r3, r2
 801e782:	f000 809f 	beq.w	801e8c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801e786:	4b4b      	ldr	r3, [pc, #300]	@ (801e8b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e788:	681b      	ldr	r3, [r3, #0]
 801e78a:	4a4a      	ldr	r2, [pc, #296]	@ (801e8b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e78c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e790:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801e792:	f7fc f807 	bl	801a7a4 <HAL_GetTick>
 801e796:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e79a:	e00b      	b.n	801e7b4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801e79c:	f7fc f802 	bl	801a7a4 <HAL_GetTick>
 801e7a0:	4602      	mov	r2, r0
 801e7a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e7a6:	1ad3      	subs	r3, r2, r3
 801e7a8:	2b64      	cmp	r3, #100	@ 0x64
 801e7aa:	d903      	bls.n	801e7b4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801e7ac:	2303      	movs	r3, #3
 801e7ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e7b2:	e005      	b.n	801e7c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e7b4:	4b3f      	ldr	r3, [pc, #252]	@ (801e8b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d0ed      	beq.n	801e79c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801e7c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	d179      	bne.n	801e8bc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801e7c8:	4b39      	ldr	r3, [pc, #228]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801e7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e7d4:	4053      	eors	r3, r2
 801e7d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d015      	beq.n	801e80a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801e7de:	4b34      	ldr	r3, [pc, #208]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801e7e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801e7ea:	4b31      	ldr	r3, [pc, #196]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7ee:	4a30      	ldr	r2, [pc, #192]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e7f4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801e7f6:	4b2e      	ldr	r3, [pc, #184]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7fa:	4a2d      	ldr	r2, [pc, #180]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e800:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801e802:	4a2b      	ldr	r2, [pc, #172]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e804:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801e808:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801e80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e80e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e816:	d118      	bne.n	801e84a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e818:	f7fb ffc4 	bl	801a7a4 <HAL_GetTick>
 801e81c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e820:	e00d      	b.n	801e83e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801e822:	f7fb ffbf 	bl	801a7a4 <HAL_GetTick>
 801e826:	4602      	mov	r2, r0
 801e828:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e82c:	1ad2      	subs	r2, r2, r3
 801e82e:	f241 3388 	movw	r3, #5000	@ 0x1388
 801e832:	429a      	cmp	r2, r3
 801e834:	d903      	bls.n	801e83e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801e836:	2303      	movs	r3, #3
 801e838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801e83c:	e005      	b.n	801e84a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e83e:	4b1c      	ldr	r3, [pc, #112]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e842:	f003 0302 	and.w	r3, r3, #2
 801e846:	2b00      	cmp	r3, #0
 801e848:	d0eb      	beq.n	801e822 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801e84a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e84e:	2b00      	cmp	r3, #0
 801e850:	d129      	bne.n	801e8a6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801e852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e856:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e85a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e85e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e862:	d10e      	bne.n	801e882 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801e864:	4b12      	ldr	r3, [pc, #72]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e866:	691b      	ldr	r3, [r3, #16]
 801e868:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801e86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e870:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e874:	091a      	lsrs	r2, r3, #4
 801e876:	4b10      	ldr	r3, [pc, #64]	@ (801e8b8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801e878:	4013      	ands	r3, r2
 801e87a:	4a0d      	ldr	r2, [pc, #52]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e87c:	430b      	orrs	r3, r1
 801e87e:	6113      	str	r3, [r2, #16]
 801e880:	e005      	b.n	801e88e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801e882:	4b0b      	ldr	r3, [pc, #44]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e884:	691b      	ldr	r3, [r3, #16]
 801e886:	4a0a      	ldr	r2, [pc, #40]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e888:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e88c:	6113      	str	r3, [r2, #16]
 801e88e:	4b08      	ldr	r3, [pc, #32]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e890:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801e892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e896:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e89a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e89e:	4a04      	ldr	r2, [pc, #16]	@ (801e8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e8a0:	430b      	orrs	r3, r1
 801e8a2:	6713      	str	r3, [r2, #112]	@ 0x70
 801e8a4:	e00e      	b.n	801e8c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801e8a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e8aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e8ae:	e009      	b.n	801e8c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801e8b0:	58024400 	.word	0x58024400
 801e8b4:	58024800 	.word	0x58024800
 801e8b8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e8bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e8c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801e8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8cc:	f002 0301 	and.w	r3, r2, #1
 801e8d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801e8d4:	2300      	movs	r3, #0
 801e8d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801e8da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801e8de:	460b      	mov	r3, r1
 801e8e0:	4313      	orrs	r3, r2
 801e8e2:	f000 8089 	beq.w	801e9f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801e8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e8ec:	2b28      	cmp	r3, #40	@ 0x28
 801e8ee:	d86b      	bhi.n	801e9c8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801e8f0:	a201      	add	r2, pc, #4	@ (adr r2, 801e8f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801e8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e8f6:	bf00      	nop
 801e8f8:	0801e9d1 	.word	0x0801e9d1
 801e8fc:	0801e9c9 	.word	0x0801e9c9
 801e900:	0801e9c9 	.word	0x0801e9c9
 801e904:	0801e9c9 	.word	0x0801e9c9
 801e908:	0801e9c9 	.word	0x0801e9c9
 801e90c:	0801e9c9 	.word	0x0801e9c9
 801e910:	0801e9c9 	.word	0x0801e9c9
 801e914:	0801e9c9 	.word	0x0801e9c9
 801e918:	0801e99d 	.word	0x0801e99d
 801e91c:	0801e9c9 	.word	0x0801e9c9
 801e920:	0801e9c9 	.word	0x0801e9c9
 801e924:	0801e9c9 	.word	0x0801e9c9
 801e928:	0801e9c9 	.word	0x0801e9c9
 801e92c:	0801e9c9 	.word	0x0801e9c9
 801e930:	0801e9c9 	.word	0x0801e9c9
 801e934:	0801e9c9 	.word	0x0801e9c9
 801e938:	0801e9b3 	.word	0x0801e9b3
 801e93c:	0801e9c9 	.word	0x0801e9c9
 801e940:	0801e9c9 	.word	0x0801e9c9
 801e944:	0801e9c9 	.word	0x0801e9c9
 801e948:	0801e9c9 	.word	0x0801e9c9
 801e94c:	0801e9c9 	.word	0x0801e9c9
 801e950:	0801e9c9 	.word	0x0801e9c9
 801e954:	0801e9c9 	.word	0x0801e9c9
 801e958:	0801e9d1 	.word	0x0801e9d1
 801e95c:	0801e9c9 	.word	0x0801e9c9
 801e960:	0801e9c9 	.word	0x0801e9c9
 801e964:	0801e9c9 	.word	0x0801e9c9
 801e968:	0801e9c9 	.word	0x0801e9c9
 801e96c:	0801e9c9 	.word	0x0801e9c9
 801e970:	0801e9c9 	.word	0x0801e9c9
 801e974:	0801e9c9 	.word	0x0801e9c9
 801e978:	0801e9d1 	.word	0x0801e9d1
 801e97c:	0801e9c9 	.word	0x0801e9c9
 801e980:	0801e9c9 	.word	0x0801e9c9
 801e984:	0801e9c9 	.word	0x0801e9c9
 801e988:	0801e9c9 	.word	0x0801e9c9
 801e98c:	0801e9c9 	.word	0x0801e9c9
 801e990:	0801e9c9 	.word	0x0801e9c9
 801e994:	0801e9c9 	.word	0x0801e9c9
 801e998:	0801e9d1 	.word	0x0801e9d1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9a0:	3308      	adds	r3, #8
 801e9a2:	2101      	movs	r1, #1
 801e9a4:	4618      	mov	r0, r3
 801e9a6:	f000 ffc3 	bl	801f930 <RCCEx_PLL2_Config>
 801e9aa:	4603      	mov	r3, r0
 801e9ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e9b0:	e00f      	b.n	801e9d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9b6:	3328      	adds	r3, #40	@ 0x28
 801e9b8:	2101      	movs	r1, #1
 801e9ba:	4618      	mov	r0, r3
 801e9bc:	f001 f86a 	bl	801fa94 <RCCEx_PLL3_Config>
 801e9c0:	4603      	mov	r3, r0
 801e9c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e9c6:	e004      	b.n	801e9d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e9c8:	2301      	movs	r3, #1
 801e9ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e9ce:	e000      	b.n	801e9d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801e9d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e9d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	d10a      	bne.n	801e9f0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801e9da:	4bbf      	ldr	r3, [pc, #764]	@ (801ecd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e9dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e9de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801e9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e9e8:	4abb      	ldr	r2, [pc, #748]	@ (801ecd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e9ea:	430b      	orrs	r3, r1
 801e9ec:	6553      	str	r3, [r2, #84]	@ 0x54
 801e9ee:	e003      	b.n	801e9f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e9f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e9f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801e9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea00:	f002 0302 	and.w	r3, r2, #2
 801ea04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801ea08:	2300      	movs	r3, #0
 801ea0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801ea0e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801ea12:	460b      	mov	r3, r1
 801ea14:	4313      	orrs	r3, r2
 801ea16:	d041      	beq.n	801ea9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801ea18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ea1e:	2b05      	cmp	r3, #5
 801ea20:	d824      	bhi.n	801ea6c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801ea22:	a201      	add	r2, pc, #4	@ (adr r2, 801ea28 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801ea24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ea28:	0801ea75 	.word	0x0801ea75
 801ea2c:	0801ea41 	.word	0x0801ea41
 801ea30:	0801ea57 	.word	0x0801ea57
 801ea34:	0801ea75 	.word	0x0801ea75
 801ea38:	0801ea75 	.word	0x0801ea75
 801ea3c:	0801ea75 	.word	0x0801ea75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ea40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea44:	3308      	adds	r3, #8
 801ea46:	2101      	movs	r1, #1
 801ea48:	4618      	mov	r0, r3
 801ea4a:	f000 ff71 	bl	801f930 <RCCEx_PLL2_Config>
 801ea4e:	4603      	mov	r3, r0
 801ea50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801ea54:	e00f      	b.n	801ea76 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ea56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea5a:	3328      	adds	r3, #40	@ 0x28
 801ea5c:	2101      	movs	r1, #1
 801ea5e:	4618      	mov	r0, r3
 801ea60:	f001 f818 	bl	801fa94 <RCCEx_PLL3_Config>
 801ea64:	4603      	mov	r3, r0
 801ea66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801ea6a:	e004      	b.n	801ea76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ea6c:	2301      	movs	r3, #1
 801ea6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ea72:	e000      	b.n	801ea76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801ea74:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ea76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	d10a      	bne.n	801ea94 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801ea7e:	4b96      	ldr	r3, [pc, #600]	@ (801ecd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ea80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ea82:	f023 0107 	bic.w	r1, r3, #7
 801ea86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ea8c:	4a92      	ldr	r2, [pc, #584]	@ (801ecd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ea8e:	430b      	orrs	r3, r1
 801ea90:	6553      	str	r3, [r2, #84]	@ 0x54
 801ea92:	e003      	b.n	801ea9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ea94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801ea9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa4:	f002 0304 	and.w	r3, r2, #4
 801eaa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801eaac:	2300      	movs	r3, #0
 801eaae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801eab2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801eab6:	460b      	mov	r3, r1
 801eab8:	4313      	orrs	r3, r2
 801eaba:	d044      	beq.n	801eb46 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801eabc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801eac4:	2b05      	cmp	r3, #5
 801eac6:	d825      	bhi.n	801eb14 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801eac8:	a201      	add	r2, pc, #4	@ (adr r2, 801ead0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801eaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eace:	bf00      	nop
 801ead0:	0801eb1d 	.word	0x0801eb1d
 801ead4:	0801eae9 	.word	0x0801eae9
 801ead8:	0801eaff 	.word	0x0801eaff
 801eadc:	0801eb1d 	.word	0x0801eb1d
 801eae0:	0801eb1d 	.word	0x0801eb1d
 801eae4:	0801eb1d 	.word	0x0801eb1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801eae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eaec:	3308      	adds	r3, #8
 801eaee:	2101      	movs	r1, #1
 801eaf0:	4618      	mov	r0, r3
 801eaf2:	f000 ff1d 	bl	801f930 <RCCEx_PLL2_Config>
 801eaf6:	4603      	mov	r3, r0
 801eaf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801eafc:	e00f      	b.n	801eb1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801eafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb02:	3328      	adds	r3, #40	@ 0x28
 801eb04:	2101      	movs	r1, #1
 801eb06:	4618      	mov	r0, r3
 801eb08:	f000 ffc4 	bl	801fa94 <RCCEx_PLL3_Config>
 801eb0c:	4603      	mov	r3, r0
 801eb0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801eb12:	e004      	b.n	801eb1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eb14:	2301      	movs	r3, #1
 801eb16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eb1a:	e000      	b.n	801eb1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801eb1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801eb1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	d10b      	bne.n	801eb3e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801eb26:	4b6c      	ldr	r3, [pc, #432]	@ (801ecd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eb28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801eb2a:	f023 0107 	bic.w	r1, r3, #7
 801eb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801eb36:	4a68      	ldr	r2, [pc, #416]	@ (801ecd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eb38:	430b      	orrs	r3, r1
 801eb3a:	6593      	str	r3, [r2, #88]	@ 0x58
 801eb3c:	e003      	b.n	801eb46 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eb3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801eb46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb4e:	f002 0320 	and.w	r3, r2, #32
 801eb52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801eb56:	2300      	movs	r3, #0
 801eb58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801eb5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801eb60:	460b      	mov	r3, r1
 801eb62:	4313      	orrs	r3, r2
 801eb64:	d055      	beq.n	801ec12 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801eb66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801eb6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801eb72:	d033      	beq.n	801ebdc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801eb74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801eb78:	d82c      	bhi.n	801ebd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801eb7e:	d02f      	beq.n	801ebe0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801eb80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801eb84:	d826      	bhi.n	801ebd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801eb8a:	d02b      	beq.n	801ebe4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801eb8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801eb90:	d820      	bhi.n	801ebd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801eb96:	d012      	beq.n	801ebbe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801eb98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801eb9c:	d81a      	bhi.n	801ebd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb9e:	2b00      	cmp	r3, #0
 801eba0:	d022      	beq.n	801ebe8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801eba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801eba6:	d115      	bne.n	801ebd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801eba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebac:	3308      	adds	r3, #8
 801ebae:	2100      	movs	r1, #0
 801ebb0:	4618      	mov	r0, r3
 801ebb2:	f000 febd 	bl	801f930 <RCCEx_PLL2_Config>
 801ebb6:	4603      	mov	r3, r0
 801ebb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801ebbc:	e015      	b.n	801ebea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ebbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebc2:	3328      	adds	r3, #40	@ 0x28
 801ebc4:	2102      	movs	r1, #2
 801ebc6:	4618      	mov	r0, r3
 801ebc8:	f000 ff64 	bl	801fa94 <RCCEx_PLL3_Config>
 801ebcc:	4603      	mov	r3, r0
 801ebce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801ebd2:	e00a      	b.n	801ebea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ebd4:	2301      	movs	r3, #1
 801ebd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ebda:	e006      	b.n	801ebea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ebdc:	bf00      	nop
 801ebde:	e004      	b.n	801ebea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ebe0:	bf00      	nop
 801ebe2:	e002      	b.n	801ebea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ebe4:	bf00      	nop
 801ebe6:	e000      	b.n	801ebea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ebe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ebea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d10b      	bne.n	801ec0a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ebf2:	4b39      	ldr	r3, [pc, #228]	@ (801ecd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ebf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ebf6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801ebfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ec02:	4a35      	ldr	r2, [pc, #212]	@ (801ecd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ec04:	430b      	orrs	r3, r1
 801ec06:	6553      	str	r3, [r2, #84]	@ 0x54
 801ec08:	e003      	b.n	801ec12 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ec0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801ec12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec1a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801ec1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801ec22:	2300      	movs	r3, #0
 801ec24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801ec28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801ec2c:	460b      	mov	r3, r1
 801ec2e:	4313      	orrs	r3, r2
 801ec30:	d058      	beq.n	801ece4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801ec32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ec3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801ec3e:	d033      	beq.n	801eca8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801ec40:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801ec44:	d82c      	bhi.n	801eca0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ec46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ec4a:	d02f      	beq.n	801ecac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801ec4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ec50:	d826      	bhi.n	801eca0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ec52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801ec56:	d02b      	beq.n	801ecb0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801ec58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801ec5c:	d820      	bhi.n	801eca0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ec5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ec62:	d012      	beq.n	801ec8a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801ec64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ec68:	d81a      	bhi.n	801eca0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d022      	beq.n	801ecb4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801ec6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ec72:	d115      	bne.n	801eca0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ec74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec78:	3308      	adds	r3, #8
 801ec7a:	2100      	movs	r1, #0
 801ec7c:	4618      	mov	r0, r3
 801ec7e:	f000 fe57 	bl	801f930 <RCCEx_PLL2_Config>
 801ec82:	4603      	mov	r3, r0
 801ec84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ec88:	e015      	b.n	801ecb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ec8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec8e:	3328      	adds	r3, #40	@ 0x28
 801ec90:	2102      	movs	r1, #2
 801ec92:	4618      	mov	r0, r3
 801ec94:	f000 fefe 	bl	801fa94 <RCCEx_PLL3_Config>
 801ec98:	4603      	mov	r3, r0
 801ec9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ec9e:	e00a      	b.n	801ecb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eca0:	2301      	movs	r3, #1
 801eca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eca6:	e006      	b.n	801ecb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801eca8:	bf00      	nop
 801ecaa:	e004      	b.n	801ecb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ecac:	bf00      	nop
 801ecae:	e002      	b.n	801ecb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ecb0:	bf00      	nop
 801ecb2:	e000      	b.n	801ecb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ecb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ecb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ecba:	2b00      	cmp	r3, #0
 801ecbc:	d10e      	bne.n	801ecdc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801ecbe:	4b06      	ldr	r3, [pc, #24]	@ (801ecd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ecc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ecc2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801ecc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ecce:	4a02      	ldr	r2, [pc, #8]	@ (801ecd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ecd0:	430b      	orrs	r3, r1
 801ecd2:	6593      	str	r3, [r2, #88]	@ 0x58
 801ecd4:	e006      	b.n	801ece4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801ecd6:	bf00      	nop
 801ecd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ecdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ece0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801ece4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ece8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801ecf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801ecf4:	2300      	movs	r3, #0
 801ecf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801ecfa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801ecfe:	460b      	mov	r3, r1
 801ed00:	4313      	orrs	r3, r2
 801ed02:	d055      	beq.n	801edb0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801ed04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801ed0c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801ed10:	d033      	beq.n	801ed7a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801ed12:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801ed16:	d82c      	bhi.n	801ed72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ed18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ed1c:	d02f      	beq.n	801ed7e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801ed1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ed22:	d826      	bhi.n	801ed72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ed24:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801ed28:	d02b      	beq.n	801ed82 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801ed2a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801ed2e:	d820      	bhi.n	801ed72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ed30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ed34:	d012      	beq.n	801ed5c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801ed36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ed3a:	d81a      	bhi.n	801ed72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	d022      	beq.n	801ed86 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801ed40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ed44:	d115      	bne.n	801ed72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ed46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed4a:	3308      	adds	r3, #8
 801ed4c:	2100      	movs	r1, #0
 801ed4e:	4618      	mov	r0, r3
 801ed50:	f000 fdee 	bl	801f930 <RCCEx_PLL2_Config>
 801ed54:	4603      	mov	r3, r0
 801ed56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ed5a:	e015      	b.n	801ed88 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ed5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed60:	3328      	adds	r3, #40	@ 0x28
 801ed62:	2102      	movs	r1, #2
 801ed64:	4618      	mov	r0, r3
 801ed66:	f000 fe95 	bl	801fa94 <RCCEx_PLL3_Config>
 801ed6a:	4603      	mov	r3, r0
 801ed6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ed70:	e00a      	b.n	801ed88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ed72:	2301      	movs	r3, #1
 801ed74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ed78:	e006      	b.n	801ed88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed7a:	bf00      	nop
 801ed7c:	e004      	b.n	801ed88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed7e:	bf00      	nop
 801ed80:	e002      	b.n	801ed88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed82:	bf00      	nop
 801ed84:	e000      	b.n	801ed88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed86:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ed88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d10b      	bne.n	801eda8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801ed90:	4ba1      	ldr	r3, [pc, #644]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ed92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ed94:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801ed98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801eda0:	4a9d      	ldr	r2, [pc, #628]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eda2:	430b      	orrs	r3, r1
 801eda4:	6593      	str	r3, [r2, #88]	@ 0x58
 801eda6:	e003      	b.n	801edb0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eda8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801edac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801edb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edb8:	f002 0308 	and.w	r3, r2, #8
 801edbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801edc0:	2300      	movs	r3, #0
 801edc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801edc6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801edca:	460b      	mov	r3, r1
 801edcc:	4313      	orrs	r3, r2
 801edce:	d01e      	beq.n	801ee0e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801edd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801edd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801eddc:	d10c      	bne.n	801edf8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801edde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ede2:	3328      	adds	r3, #40	@ 0x28
 801ede4:	2102      	movs	r1, #2
 801ede6:	4618      	mov	r0, r3
 801ede8:	f000 fe54 	bl	801fa94 <RCCEx_PLL3_Config>
 801edec:	4603      	mov	r3, r0
 801edee:	2b00      	cmp	r3, #0
 801edf0:	d002      	beq.n	801edf8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801edf2:	2301      	movs	r3, #1
 801edf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801edf8:	4b87      	ldr	r3, [pc, #540]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801edfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801edfc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801ee00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ee08:	4a83      	ldr	r2, [pc, #524]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee0a:	430b      	orrs	r3, r1
 801ee0c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801ee0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee16:	f002 0310 	and.w	r3, r2, #16
 801ee1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801ee1e:	2300      	movs	r3, #0
 801ee20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801ee24:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801ee28:	460b      	mov	r3, r1
 801ee2a:	4313      	orrs	r3, r2
 801ee2c:	d01e      	beq.n	801ee6c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801ee2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ee36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ee3a:	d10c      	bne.n	801ee56 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ee3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee40:	3328      	adds	r3, #40	@ 0x28
 801ee42:	2102      	movs	r1, #2
 801ee44:	4618      	mov	r0, r3
 801ee46:	f000 fe25 	bl	801fa94 <RCCEx_PLL3_Config>
 801ee4a:	4603      	mov	r3, r0
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	d002      	beq.n	801ee56 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801ee50:	2301      	movs	r3, #1
 801ee52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801ee56:	4b70      	ldr	r3, [pc, #448]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ee5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801ee5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ee66:	4a6c      	ldr	r2, [pc, #432]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee68:	430b      	orrs	r3, r1
 801ee6a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801ee6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee74:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801ee78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801ee7c:	2300      	movs	r3, #0
 801ee7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ee82:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801ee86:	460b      	mov	r3, r1
 801ee88:	4313      	orrs	r3, r2
 801ee8a:	d03e      	beq.n	801ef0a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801ee8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801ee94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ee98:	d022      	beq.n	801eee0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801ee9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ee9e:	d81b      	bhi.n	801eed8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801eea0:	2b00      	cmp	r3, #0
 801eea2:	d003      	beq.n	801eeac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801eea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eea8:	d00b      	beq.n	801eec2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801eeaa:	e015      	b.n	801eed8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801eeac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eeb0:	3308      	adds	r3, #8
 801eeb2:	2100      	movs	r1, #0
 801eeb4:	4618      	mov	r0, r3
 801eeb6:	f000 fd3b 	bl	801f930 <RCCEx_PLL2_Config>
 801eeba:	4603      	mov	r3, r0
 801eebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801eec0:	e00f      	b.n	801eee2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801eec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eec6:	3328      	adds	r3, #40	@ 0x28
 801eec8:	2102      	movs	r1, #2
 801eeca:	4618      	mov	r0, r3
 801eecc:	f000 fde2 	bl	801fa94 <RCCEx_PLL3_Config>
 801eed0:	4603      	mov	r3, r0
 801eed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801eed6:	e004      	b.n	801eee2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eed8:	2301      	movs	r3, #1
 801eeda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eede:	e000      	b.n	801eee2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801eee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801eee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eee6:	2b00      	cmp	r3, #0
 801eee8:	d10b      	bne.n	801ef02 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801eeea:	4b4b      	ldr	r3, [pc, #300]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eeec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801eeee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801eef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eef6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801eefa:	4a47      	ldr	r2, [pc, #284]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eefc:	430b      	orrs	r3, r1
 801eefe:	6593      	str	r3, [r2, #88]	@ 0x58
 801ef00:	e003      	b.n	801ef0a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ef02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801ef0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef12:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801ef16:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ef18:	2300      	movs	r3, #0
 801ef1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ef1c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801ef20:	460b      	mov	r3, r1
 801ef22:	4313      	orrs	r3, r2
 801ef24:	d03b      	beq.n	801ef9e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801ef26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ef2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801ef32:	d01f      	beq.n	801ef74 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801ef34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801ef38:	d818      	bhi.n	801ef6c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801ef3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801ef3e:	d003      	beq.n	801ef48 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801ef40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801ef44:	d007      	beq.n	801ef56 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801ef46:	e011      	b.n	801ef6c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ef48:	4b33      	ldr	r3, [pc, #204]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef4c:	4a32      	ldr	r2, [pc, #200]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ef52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801ef54:	e00f      	b.n	801ef76 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ef56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef5a:	3328      	adds	r3, #40	@ 0x28
 801ef5c:	2101      	movs	r1, #1
 801ef5e:	4618      	mov	r0, r3
 801ef60:	f000 fd98 	bl	801fa94 <RCCEx_PLL3_Config>
 801ef64:	4603      	mov	r3, r0
 801ef66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801ef6a:	e004      	b.n	801ef76 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ef6c:	2301      	movs	r3, #1
 801ef6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ef72:	e000      	b.n	801ef76 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801ef74:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ef76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d10b      	bne.n	801ef96 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801ef7e:	4b26      	ldr	r3, [pc, #152]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ef82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801ef86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ef8e:	4a22      	ldr	r2, [pc, #136]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef90:	430b      	orrs	r3, r1
 801ef92:	6553      	str	r3, [r2, #84]	@ 0x54
 801ef94:	e003      	b.n	801ef9e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ef96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801ef9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efa6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801efaa:	673b      	str	r3, [r7, #112]	@ 0x70
 801efac:	2300      	movs	r3, #0
 801efae:	677b      	str	r3, [r7, #116]	@ 0x74
 801efb0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801efb4:	460b      	mov	r3, r1
 801efb6:	4313      	orrs	r3, r2
 801efb8:	d034      	beq.n	801f024 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801efba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	d003      	beq.n	801efcc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801efc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801efc8:	d007      	beq.n	801efda <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801efca:	e011      	b.n	801eff0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801efcc:	4b12      	ldr	r3, [pc, #72]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801efce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efd0:	4a11      	ldr	r2, [pc, #68]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801efd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801efd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801efd8:	e00e      	b.n	801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801efda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efde:	3308      	adds	r3, #8
 801efe0:	2102      	movs	r1, #2
 801efe2:	4618      	mov	r0, r3
 801efe4:	f000 fca4 	bl	801f930 <RCCEx_PLL2_Config>
 801efe8:	4603      	mov	r3, r0
 801efea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801efee:	e003      	b.n	801eff8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801eff0:	2301      	movs	r3, #1
 801eff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801eff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801effc:	2b00      	cmp	r3, #0
 801effe:	d10d      	bne.n	801f01c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801f000:	4b05      	ldr	r3, [pc, #20]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f004:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801f008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f00c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f00e:	4a02      	ldr	r2, [pc, #8]	@ (801f018 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f010:	430b      	orrs	r3, r1
 801f012:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801f014:	e006      	b.n	801f024 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801f016:	bf00      	nop
 801f018:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f01c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f020:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801f024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f02c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801f030:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f032:	2300      	movs	r3, #0
 801f034:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801f036:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801f03a:	460b      	mov	r3, r1
 801f03c:	4313      	orrs	r3, r2
 801f03e:	d00c      	beq.n	801f05a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801f040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f044:	3328      	adds	r3, #40	@ 0x28
 801f046:	2102      	movs	r1, #2
 801f048:	4618      	mov	r0, r3
 801f04a:	f000 fd23 	bl	801fa94 <RCCEx_PLL3_Config>
 801f04e:	4603      	mov	r3, r0
 801f050:	2b00      	cmp	r3, #0
 801f052:	d002      	beq.n	801f05a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801f054:	2301      	movs	r3, #1
 801f056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801f05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f062:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801f066:	663b      	str	r3, [r7, #96]	@ 0x60
 801f068:	2300      	movs	r3, #0
 801f06a:	667b      	str	r3, [r7, #100]	@ 0x64
 801f06c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801f070:	460b      	mov	r3, r1
 801f072:	4313      	orrs	r3, r2
 801f074:	d038      	beq.n	801f0e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801f076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f07e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801f082:	d018      	beq.n	801f0b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801f084:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801f088:	d811      	bhi.n	801f0ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801f08a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f08e:	d014      	beq.n	801f0ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801f090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f094:	d80b      	bhi.n	801f0ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801f096:	2b00      	cmp	r3, #0
 801f098:	d011      	beq.n	801f0be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801f09a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801f09e:	d106      	bne.n	801f0ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f0a0:	4bc3      	ldr	r3, [pc, #780]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0a4:	4ac2      	ldr	r2, [pc, #776]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f0aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801f0ac:	e008      	b.n	801f0c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801f0ae:	2301      	movs	r3, #1
 801f0b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801f0b4:	e004      	b.n	801f0c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f0b6:	bf00      	nop
 801f0b8:	e002      	b.n	801f0c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f0ba:	bf00      	nop
 801f0bc:	e000      	b.n	801f0c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f0be:	bf00      	nop
    }

    if (ret == HAL_OK)
 801f0c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	d10b      	bne.n	801f0e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801f0c8:	4bb9      	ldr	r3, [pc, #740]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f0cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801f0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f0d8:	4ab5      	ldr	r2, [pc, #724]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0da:	430b      	orrs	r3, r1
 801f0dc:	6553      	str	r3, [r2, #84]	@ 0x54
 801f0de:	e003      	b.n	801f0e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f0e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f0e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801f0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801f0f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f0f6:	2300      	movs	r3, #0
 801f0f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f0fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801f0fe:	460b      	mov	r3, r1
 801f100:	4313      	orrs	r3, r2
 801f102:	d009      	beq.n	801f118 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801f104:	4baa      	ldr	r3, [pc, #680]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f108:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f112:	4aa7      	ldr	r2, [pc, #668]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f114:	430b      	orrs	r3, r1
 801f116:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801f118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f120:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801f124:	653b      	str	r3, [r7, #80]	@ 0x50
 801f126:	2300      	movs	r3, #0
 801f128:	657b      	str	r3, [r7, #84]	@ 0x54
 801f12a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801f12e:	460b      	mov	r3, r1
 801f130:	4313      	orrs	r3, r2
 801f132:	d00a      	beq.n	801f14a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801f134:	4b9e      	ldr	r3, [pc, #632]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f136:	691b      	ldr	r3, [r3, #16]
 801f138:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801f13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f140:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801f144:	4a9a      	ldr	r2, [pc, #616]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f146:	430b      	orrs	r3, r1
 801f148:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801f14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f152:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801f156:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f158:	2300      	movs	r3, #0
 801f15a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f15c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801f160:	460b      	mov	r3, r1
 801f162:	4313      	orrs	r3, r2
 801f164:	d009      	beq.n	801f17a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801f166:	4b92      	ldr	r3, [pc, #584]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f16a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801f16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f174:	4a8e      	ldr	r2, [pc, #568]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f176:	430b      	orrs	r3, r1
 801f178:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801f17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f182:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801f186:	643b      	str	r3, [r7, #64]	@ 0x40
 801f188:	2300      	movs	r3, #0
 801f18a:	647b      	str	r3, [r7, #68]	@ 0x44
 801f18c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801f190:	460b      	mov	r3, r1
 801f192:	4313      	orrs	r3, r2
 801f194:	d00e      	beq.n	801f1b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801f196:	4b86      	ldr	r3, [pc, #536]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f198:	691b      	ldr	r3, [r3, #16]
 801f19a:	4a85      	ldr	r2, [pc, #532]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f19c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801f1a0:	6113      	str	r3, [r2, #16]
 801f1a2:	4b83      	ldr	r3, [pc, #524]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f1a4:	6919      	ldr	r1, [r3, #16]
 801f1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801f1ae:	4a80      	ldr	r2, [pc, #512]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f1b0:	430b      	orrs	r3, r1
 801f1b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801f1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801f1c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f1c2:	2300      	movs	r3, #0
 801f1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f1c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801f1ca:	460b      	mov	r3, r1
 801f1cc:	4313      	orrs	r3, r2
 801f1ce:	d009      	beq.n	801f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801f1d0:	4b77      	ldr	r3, [pc, #476]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f1d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f1d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801f1d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f1de:	4a74      	ldr	r2, [pc, #464]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f1e0:	430b      	orrs	r3, r1
 801f1e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801f1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801f1f0:	633b      	str	r3, [r7, #48]	@ 0x30
 801f1f2:	2300      	movs	r3, #0
 801f1f4:	637b      	str	r3, [r7, #52]	@ 0x34
 801f1f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801f1fa:	460b      	mov	r3, r1
 801f1fc:	4313      	orrs	r3, r2
 801f1fe:	d00a      	beq.n	801f216 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801f200:	4b6b      	ldr	r3, [pc, #428]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f204:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801f208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f20c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801f210:	4a67      	ldr	r2, [pc, #412]	@ (801f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f212:	430b      	orrs	r3, r1
 801f214:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801f216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f21e:	2100      	movs	r1, #0
 801f220:	62b9      	str	r1, [r7, #40]	@ 0x28
 801f222:	f003 0301 	and.w	r3, r3, #1
 801f226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f228:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801f22c:	460b      	mov	r3, r1
 801f22e:	4313      	orrs	r3, r2
 801f230:	d011      	beq.n	801f256 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801f232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f236:	3308      	adds	r3, #8
 801f238:	2100      	movs	r1, #0
 801f23a:	4618      	mov	r0, r3
 801f23c:	f000 fb78 	bl	801f930 <RCCEx_PLL2_Config>
 801f240:	4603      	mov	r3, r0
 801f242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	d003      	beq.n	801f256 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f24e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f252:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801f256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f25e:	2100      	movs	r1, #0
 801f260:	6239      	str	r1, [r7, #32]
 801f262:	f003 0302 	and.w	r3, r3, #2
 801f266:	627b      	str	r3, [r7, #36]	@ 0x24
 801f268:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801f26c:	460b      	mov	r3, r1
 801f26e:	4313      	orrs	r3, r2
 801f270:	d011      	beq.n	801f296 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801f272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f276:	3308      	adds	r3, #8
 801f278:	2101      	movs	r1, #1
 801f27a:	4618      	mov	r0, r3
 801f27c:	f000 fb58 	bl	801f930 <RCCEx_PLL2_Config>
 801f280:	4603      	mov	r3, r0
 801f282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	d003      	beq.n	801f296 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f28e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f292:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801f296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f29e:	2100      	movs	r1, #0
 801f2a0:	61b9      	str	r1, [r7, #24]
 801f2a2:	f003 0304 	and.w	r3, r3, #4
 801f2a6:	61fb      	str	r3, [r7, #28]
 801f2a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801f2ac:	460b      	mov	r3, r1
 801f2ae:	4313      	orrs	r3, r2
 801f2b0:	d011      	beq.n	801f2d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801f2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2b6:	3308      	adds	r3, #8
 801f2b8:	2102      	movs	r1, #2
 801f2ba:	4618      	mov	r0, r3
 801f2bc:	f000 fb38 	bl	801f930 <RCCEx_PLL2_Config>
 801f2c0:	4603      	mov	r3, r0
 801f2c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f2c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	d003      	beq.n	801f2d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f2ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f2d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801f2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2de:	2100      	movs	r1, #0
 801f2e0:	6139      	str	r1, [r7, #16]
 801f2e2:	f003 0308 	and.w	r3, r3, #8
 801f2e6:	617b      	str	r3, [r7, #20]
 801f2e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801f2ec:	460b      	mov	r3, r1
 801f2ee:	4313      	orrs	r3, r2
 801f2f0:	d011      	beq.n	801f316 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801f2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2f6:	3328      	adds	r3, #40	@ 0x28
 801f2f8:	2100      	movs	r1, #0
 801f2fa:	4618      	mov	r0, r3
 801f2fc:	f000 fbca 	bl	801fa94 <RCCEx_PLL3_Config>
 801f300:	4603      	mov	r3, r0
 801f302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801f306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	d003      	beq.n	801f316 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f30e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801f316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f31e:	2100      	movs	r1, #0
 801f320:	60b9      	str	r1, [r7, #8]
 801f322:	f003 0310 	and.w	r3, r3, #16
 801f326:	60fb      	str	r3, [r7, #12]
 801f328:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801f32c:	460b      	mov	r3, r1
 801f32e:	4313      	orrs	r3, r2
 801f330:	d011      	beq.n	801f356 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801f332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f336:	3328      	adds	r3, #40	@ 0x28
 801f338:	2101      	movs	r1, #1
 801f33a:	4618      	mov	r0, r3
 801f33c:	f000 fbaa 	bl	801fa94 <RCCEx_PLL3_Config>
 801f340:	4603      	mov	r3, r0
 801f342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d003      	beq.n	801f356 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f34e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801f356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f35e:	2100      	movs	r1, #0
 801f360:	6039      	str	r1, [r7, #0]
 801f362:	f003 0320 	and.w	r3, r3, #32
 801f366:	607b      	str	r3, [r7, #4]
 801f368:	e9d7 1200 	ldrd	r1, r2, [r7]
 801f36c:	460b      	mov	r3, r1
 801f36e:	4313      	orrs	r3, r2
 801f370:	d011      	beq.n	801f396 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801f372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f376:	3328      	adds	r3, #40	@ 0x28
 801f378:	2102      	movs	r1, #2
 801f37a:	4618      	mov	r0, r3
 801f37c:	f000 fb8a 	bl	801fa94 <RCCEx_PLL3_Config>
 801f380:	4603      	mov	r3, r0
 801f382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f38a:	2b00      	cmp	r3, #0
 801f38c:	d003      	beq.n	801f396 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f38e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f392:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801f396:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f39a:	2b00      	cmp	r3, #0
 801f39c:	d101      	bne.n	801f3a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801f39e:	2300      	movs	r3, #0
 801f3a0:	e000      	b.n	801f3a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801f3a2:	2301      	movs	r3, #1
}
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801f3aa:	46bd      	mov	sp, r7
 801f3ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f3b0:	58024400 	.word	0x58024400

0801f3b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801f3b4:	b580      	push	{r7, lr}
 801f3b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801f3b8:	f7fe fd96 	bl	801dee8 <HAL_RCC_GetHCLKFreq>
 801f3bc:	4602      	mov	r2, r0
 801f3be:	4b06      	ldr	r3, [pc, #24]	@ (801f3d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801f3c0:	6a1b      	ldr	r3, [r3, #32]
 801f3c2:	091b      	lsrs	r3, r3, #4
 801f3c4:	f003 0307 	and.w	r3, r3, #7
 801f3c8:	4904      	ldr	r1, [pc, #16]	@ (801f3dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801f3ca:	5ccb      	ldrb	r3, [r1, r3]
 801f3cc:	f003 031f 	and.w	r3, r3, #31
 801f3d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	bd80      	pop	{r7, pc}
 801f3d8:	58024400 	.word	0x58024400
 801f3dc:	08027f04 	.word	0x08027f04

0801f3e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801f3e0:	b480      	push	{r7}
 801f3e2:	b089      	sub	sp, #36	@ 0x24
 801f3e4:	af00      	add	r7, sp, #0
 801f3e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f3e8:	4ba1      	ldr	r3, [pc, #644]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f3ec:	f003 0303 	and.w	r3, r3, #3
 801f3f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801f3f2:	4b9f      	ldr	r3, [pc, #636]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f3f6:	0b1b      	lsrs	r3, r3, #12
 801f3f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f3fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801f3fe:	4b9c      	ldr	r3, [pc, #624]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f402:	091b      	lsrs	r3, r3, #4
 801f404:	f003 0301 	and.w	r3, r3, #1
 801f408:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801f40a:	4b99      	ldr	r3, [pc, #612]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f40c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f40e:	08db      	lsrs	r3, r3, #3
 801f410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f414:	693a      	ldr	r2, [r7, #16]
 801f416:	fb02 f303 	mul.w	r3, r2, r3
 801f41a:	ee07 3a90 	vmov	s15, r3
 801f41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f422:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801f426:	697b      	ldr	r3, [r7, #20]
 801f428:	2b00      	cmp	r3, #0
 801f42a:	f000 8111 	beq.w	801f650 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801f42e:	69bb      	ldr	r3, [r7, #24]
 801f430:	2b02      	cmp	r3, #2
 801f432:	f000 8083 	beq.w	801f53c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801f436:	69bb      	ldr	r3, [r7, #24]
 801f438:	2b02      	cmp	r3, #2
 801f43a:	f200 80a1 	bhi.w	801f580 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801f43e:	69bb      	ldr	r3, [r7, #24]
 801f440:	2b00      	cmp	r3, #0
 801f442:	d003      	beq.n	801f44c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801f444:	69bb      	ldr	r3, [r7, #24]
 801f446:	2b01      	cmp	r3, #1
 801f448:	d056      	beq.n	801f4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801f44a:	e099      	b.n	801f580 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f44c:	4b88      	ldr	r3, [pc, #544]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f44e:	681b      	ldr	r3, [r3, #0]
 801f450:	f003 0320 	and.w	r3, r3, #32
 801f454:	2b00      	cmp	r3, #0
 801f456:	d02d      	beq.n	801f4b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f458:	4b85      	ldr	r3, [pc, #532]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	08db      	lsrs	r3, r3, #3
 801f45e:	f003 0303 	and.w	r3, r3, #3
 801f462:	4a84      	ldr	r2, [pc, #528]	@ (801f674 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801f464:	fa22 f303 	lsr.w	r3, r2, r3
 801f468:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f46a:	68bb      	ldr	r3, [r7, #8]
 801f46c:	ee07 3a90 	vmov	s15, r3
 801f470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f474:	697b      	ldr	r3, [r7, #20]
 801f476:	ee07 3a90 	vmov	s15, r3
 801f47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f47e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f482:	4b7b      	ldr	r3, [pc, #492]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f48a:	ee07 3a90 	vmov	s15, r3
 801f48e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f492:	ed97 6a03 	vldr	s12, [r7, #12]
 801f496:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f49a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f49e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f4a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f4a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f4ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f4b2:	e087      	b.n	801f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f4b4:	697b      	ldr	r3, [r7, #20]
 801f4b6:	ee07 3a90 	vmov	s15, r3
 801f4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f4be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f67c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801f4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f4c6:	4b6a      	ldr	r3, [pc, #424]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f4c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f4ce:	ee07 3a90 	vmov	s15, r3
 801f4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f4d6:	ed97 6a03 	vldr	s12, [r7, #12]
 801f4da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f4e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f4f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f4f6:	e065      	b.n	801f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f4f8:	697b      	ldr	r3, [r7, #20]
 801f4fa:	ee07 3a90 	vmov	s15, r3
 801f4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f502:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f50a:	4b59      	ldr	r3, [pc, #356]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f50c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f512:	ee07 3a90 	vmov	s15, r3
 801f516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f51a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f51e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f52a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f532:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f53a:	e043      	b.n	801f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f53c:	697b      	ldr	r3, [r7, #20]
 801f53e:	ee07 3a90 	vmov	s15, r3
 801f542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f546:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801f54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f54e:	4b48      	ldr	r3, [pc, #288]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f556:	ee07 3a90 	vmov	s15, r3
 801f55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f55e:	ed97 6a03 	vldr	s12, [r7, #12]
 801f562:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f56e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f576:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f57a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f57e:	e021      	b.n	801f5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f580:	697b      	ldr	r3, [r7, #20]
 801f582:	ee07 3a90 	vmov	s15, r3
 801f586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f58a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f592:	4b37      	ldr	r3, [pc, #220]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f59a:	ee07 3a90 	vmov	s15, r3
 801f59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f5a2:	ed97 6a03 	vldr	s12, [r7, #12]
 801f5a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f5b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f5be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f5c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801f5c4:	4b2a      	ldr	r3, [pc, #168]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f5c8:	0a5b      	lsrs	r3, r3, #9
 801f5ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f5ce:	ee07 3a90 	vmov	s15, r3
 801f5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f5d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f5da:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f5de:	edd7 6a07 	vldr	s13, [r7, #28]
 801f5e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f5e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f5ea:	ee17 2a90 	vmov	r2, s15
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801f5f2:	4b1f      	ldr	r3, [pc, #124]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f5f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f5f6:	0c1b      	lsrs	r3, r3, #16
 801f5f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f5fc:	ee07 3a90 	vmov	s15, r3
 801f600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f604:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f608:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f60c:	edd7 6a07 	vldr	s13, [r7, #28]
 801f610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f618:	ee17 2a90 	vmov	r2, s15
 801f61c:	687b      	ldr	r3, [r7, #4]
 801f61e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801f620:	4b13      	ldr	r3, [pc, #76]	@ (801f670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f624:	0e1b      	lsrs	r3, r3, #24
 801f626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f62a:	ee07 3a90 	vmov	s15, r3
 801f62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f636:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f63a:	edd7 6a07 	vldr	s13, [r7, #28]
 801f63e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f646:	ee17 2a90 	vmov	r2, s15
 801f64a:	687b      	ldr	r3, [r7, #4]
 801f64c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801f64e:	e008      	b.n	801f662 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801f650:	687b      	ldr	r3, [r7, #4]
 801f652:	2200      	movs	r2, #0
 801f654:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801f656:	687b      	ldr	r3, [r7, #4]
 801f658:	2200      	movs	r2, #0
 801f65a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801f65c:	687b      	ldr	r3, [r7, #4]
 801f65e:	2200      	movs	r2, #0
 801f660:	609a      	str	r2, [r3, #8]
}
 801f662:	bf00      	nop
 801f664:	3724      	adds	r7, #36	@ 0x24
 801f666:	46bd      	mov	sp, r7
 801f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f66c:	4770      	bx	lr
 801f66e:	bf00      	nop
 801f670:	58024400 	.word	0x58024400
 801f674:	03d09000 	.word	0x03d09000
 801f678:	46000000 	.word	0x46000000
 801f67c:	4c742400 	.word	0x4c742400
 801f680:	4a742400 	.word	0x4a742400
 801f684:	4bbebc20 	.word	0x4bbebc20

0801f688 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801f688:	b480      	push	{r7}
 801f68a:	b089      	sub	sp, #36	@ 0x24
 801f68c:	af00      	add	r7, sp, #0
 801f68e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f690:	4ba1      	ldr	r3, [pc, #644]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f694:	f003 0303 	and.w	r3, r3, #3
 801f698:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801f69a:	4b9f      	ldr	r3, [pc, #636]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f69e:	0d1b      	lsrs	r3, r3, #20
 801f6a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f6a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801f6a6:	4b9c      	ldr	r3, [pc, #624]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f6aa:	0a1b      	lsrs	r3, r3, #8
 801f6ac:	f003 0301 	and.w	r3, r3, #1
 801f6b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801f6b2:	4b99      	ldr	r3, [pc, #612]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f6b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f6b6:	08db      	lsrs	r3, r3, #3
 801f6b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f6bc:	693a      	ldr	r2, [r7, #16]
 801f6be:	fb02 f303 	mul.w	r3, r2, r3
 801f6c2:	ee07 3a90 	vmov	s15, r3
 801f6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801f6ce:	697b      	ldr	r3, [r7, #20]
 801f6d0:	2b00      	cmp	r3, #0
 801f6d2:	f000 8111 	beq.w	801f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801f6d6:	69bb      	ldr	r3, [r7, #24]
 801f6d8:	2b02      	cmp	r3, #2
 801f6da:	f000 8083 	beq.w	801f7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801f6de:	69bb      	ldr	r3, [r7, #24]
 801f6e0:	2b02      	cmp	r3, #2
 801f6e2:	f200 80a1 	bhi.w	801f828 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801f6e6:	69bb      	ldr	r3, [r7, #24]
 801f6e8:	2b00      	cmp	r3, #0
 801f6ea:	d003      	beq.n	801f6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801f6ec:	69bb      	ldr	r3, [r7, #24]
 801f6ee:	2b01      	cmp	r3, #1
 801f6f0:	d056      	beq.n	801f7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801f6f2:	e099      	b.n	801f828 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f6f4:	4b88      	ldr	r3, [pc, #544]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f6f6:	681b      	ldr	r3, [r3, #0]
 801f6f8:	f003 0320 	and.w	r3, r3, #32
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	d02d      	beq.n	801f75c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f700:	4b85      	ldr	r3, [pc, #532]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f702:	681b      	ldr	r3, [r3, #0]
 801f704:	08db      	lsrs	r3, r3, #3
 801f706:	f003 0303 	and.w	r3, r3, #3
 801f70a:	4a84      	ldr	r2, [pc, #528]	@ (801f91c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801f70c:	fa22 f303 	lsr.w	r3, r2, r3
 801f710:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f712:	68bb      	ldr	r3, [r7, #8]
 801f714:	ee07 3a90 	vmov	s15, r3
 801f718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f71c:	697b      	ldr	r3, [r7, #20]
 801f71e:	ee07 3a90 	vmov	s15, r3
 801f722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f72a:	4b7b      	ldr	r3, [pc, #492]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f72c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f732:	ee07 3a90 	vmov	s15, r3
 801f736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f73a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f73e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f74a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f74e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f752:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f756:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f75a:	e087      	b.n	801f86c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f75c:	697b      	ldr	r3, [r7, #20]
 801f75e:	ee07 3a90 	vmov	s15, r3
 801f762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f766:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f924 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801f76a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f76e:	4b6a      	ldr	r3, [pc, #424]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f776:	ee07 3a90 	vmov	s15, r3
 801f77a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f77e:	ed97 6a03 	vldr	s12, [r7, #12]
 801f782:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f78a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f78e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f796:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f79a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f79e:	e065      	b.n	801f86c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f7a0:	697b      	ldr	r3, [r7, #20]
 801f7a2:	ee07 3a90 	vmov	s15, r3
 801f7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f928 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f7b2:	4b59      	ldr	r3, [pc, #356]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f7b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f7ba:	ee07 3a90 	vmov	s15, r3
 801f7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f7c2:	ed97 6a03 	vldr	s12, [r7, #12]
 801f7c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f7d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f7de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f7e2:	e043      	b.n	801f86c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f7e4:	697b      	ldr	r3, [r7, #20]
 801f7e6:	ee07 3a90 	vmov	s15, r3
 801f7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f92c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801f7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f7f6:	4b48      	ldr	r3, [pc, #288]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f7f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f7fe:	ee07 3a90 	vmov	s15, r3
 801f802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f806:	ed97 6a03 	vldr	s12, [r7, #12]
 801f80a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f826:	e021      	b.n	801f86c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f828:	697b      	ldr	r3, [r7, #20]
 801f82a:	ee07 3a90 	vmov	s15, r3
 801f82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f832:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f928 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f83a:	4b37      	ldr	r3, [pc, #220]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f83c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f842:	ee07 3a90 	vmov	s15, r3
 801f846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f84a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f84e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f85a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f862:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f86a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801f86c:	4b2a      	ldr	r3, [pc, #168]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f86e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f870:	0a5b      	lsrs	r3, r3, #9
 801f872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f876:	ee07 3a90 	vmov	s15, r3
 801f87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f87e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f882:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f886:	edd7 6a07 	vldr	s13, [r7, #28]
 801f88a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f88e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f892:	ee17 2a90 	vmov	r2, s15
 801f896:	687b      	ldr	r3, [r7, #4]
 801f898:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801f89a:	4b1f      	ldr	r3, [pc, #124]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f89e:	0c1b      	lsrs	r3, r3, #16
 801f8a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f8a4:	ee07 3a90 	vmov	s15, r3
 801f8a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f8ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f8b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f8b4:	edd7 6a07 	vldr	s13, [r7, #28]
 801f8b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f8bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f8c0:	ee17 2a90 	vmov	r2, s15
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801f8c8:	4b13      	ldr	r3, [pc, #76]	@ (801f918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f8cc:	0e1b      	lsrs	r3, r3, #24
 801f8ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f8d2:	ee07 3a90 	vmov	s15, r3
 801f8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f8da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f8de:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f8e2:	edd7 6a07 	vldr	s13, [r7, #28]
 801f8e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f8ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f8ee:	ee17 2a90 	vmov	r2, s15
 801f8f2:	687b      	ldr	r3, [r7, #4]
 801f8f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801f8f6:	e008      	b.n	801f90a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801f8f8:	687b      	ldr	r3, [r7, #4]
 801f8fa:	2200      	movs	r2, #0
 801f8fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801f8fe:	687b      	ldr	r3, [r7, #4]
 801f900:	2200      	movs	r2, #0
 801f902:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	2200      	movs	r2, #0
 801f908:	609a      	str	r2, [r3, #8]
}
 801f90a:	bf00      	nop
 801f90c:	3724      	adds	r7, #36	@ 0x24
 801f90e:	46bd      	mov	sp, r7
 801f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f914:	4770      	bx	lr
 801f916:	bf00      	nop
 801f918:	58024400 	.word	0x58024400
 801f91c:	03d09000 	.word	0x03d09000
 801f920:	46000000 	.word	0x46000000
 801f924:	4c742400 	.word	0x4c742400
 801f928:	4a742400 	.word	0x4a742400
 801f92c:	4bbebc20 	.word	0x4bbebc20

0801f930 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801f930:	b580      	push	{r7, lr}
 801f932:	b084      	sub	sp, #16
 801f934:	af00      	add	r7, sp, #0
 801f936:	6078      	str	r0, [r7, #4]
 801f938:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f93a:	2300      	movs	r3, #0
 801f93c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f93e:	4b53      	ldr	r3, [pc, #332]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f942:	f003 0303 	and.w	r3, r3, #3
 801f946:	2b03      	cmp	r3, #3
 801f948:	d101      	bne.n	801f94e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801f94a:	2301      	movs	r3, #1
 801f94c:	e099      	b.n	801fa82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801f94e:	4b4f      	ldr	r3, [pc, #316]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f950:	681b      	ldr	r3, [r3, #0]
 801f952:	4a4e      	ldr	r2, [pc, #312]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f954:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801f958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f95a:	f7fa ff23 	bl	801a7a4 <HAL_GetTick>
 801f95e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f960:	e008      	b.n	801f974 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f962:	f7fa ff1f 	bl	801a7a4 <HAL_GetTick>
 801f966:	4602      	mov	r2, r0
 801f968:	68bb      	ldr	r3, [r7, #8]
 801f96a:	1ad3      	subs	r3, r2, r3
 801f96c:	2b02      	cmp	r3, #2
 801f96e:	d901      	bls.n	801f974 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f970:	2303      	movs	r3, #3
 801f972:	e086      	b.n	801fa82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f974:	4b45      	ldr	r3, [pc, #276]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f976:	681b      	ldr	r3, [r3, #0]
 801f978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	d1f0      	bne.n	801f962 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801f980:	4b42      	ldr	r3, [pc, #264]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f984:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801f988:	687b      	ldr	r3, [r7, #4]
 801f98a:	681b      	ldr	r3, [r3, #0]
 801f98c:	031b      	lsls	r3, r3, #12
 801f98e:	493f      	ldr	r1, [pc, #252]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f990:	4313      	orrs	r3, r2
 801f992:	628b      	str	r3, [r1, #40]	@ 0x28
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	685b      	ldr	r3, [r3, #4]
 801f998:	3b01      	subs	r3, #1
 801f99a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	689b      	ldr	r3, [r3, #8]
 801f9a2:	3b01      	subs	r3, #1
 801f9a4:	025b      	lsls	r3, r3, #9
 801f9a6:	b29b      	uxth	r3, r3
 801f9a8:	431a      	orrs	r2, r3
 801f9aa:	687b      	ldr	r3, [r7, #4]
 801f9ac:	68db      	ldr	r3, [r3, #12]
 801f9ae:	3b01      	subs	r3, #1
 801f9b0:	041b      	lsls	r3, r3, #16
 801f9b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f9b6:	431a      	orrs	r2, r3
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	691b      	ldr	r3, [r3, #16]
 801f9bc:	3b01      	subs	r3, #1
 801f9be:	061b      	lsls	r3, r3, #24
 801f9c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f9c4:	4931      	ldr	r1, [pc, #196]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f9c6:	4313      	orrs	r3, r2
 801f9c8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801f9ca:	4b30      	ldr	r3, [pc, #192]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	695b      	ldr	r3, [r3, #20]
 801f9d6:	492d      	ldr	r1, [pc, #180]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f9d8:	4313      	orrs	r3, r2
 801f9da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801f9dc:	4b2b      	ldr	r3, [pc, #172]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9e0:	f023 0220 	bic.w	r2, r3, #32
 801f9e4:	687b      	ldr	r3, [r7, #4]
 801f9e6:	699b      	ldr	r3, [r3, #24]
 801f9e8:	4928      	ldr	r1, [pc, #160]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f9ea:	4313      	orrs	r3, r2
 801f9ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801f9ee:	4b27      	ldr	r3, [pc, #156]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9f2:	4a26      	ldr	r2, [pc, #152]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f9f4:	f023 0310 	bic.w	r3, r3, #16
 801f9f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801f9fa:	4b24      	ldr	r3, [pc, #144]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801f9fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f9fe:	4b24      	ldr	r3, [pc, #144]	@ (801fa90 <RCCEx_PLL2_Config+0x160>)
 801fa00:	4013      	ands	r3, r2
 801fa02:	687a      	ldr	r2, [r7, #4]
 801fa04:	69d2      	ldr	r2, [r2, #28]
 801fa06:	00d2      	lsls	r2, r2, #3
 801fa08:	4920      	ldr	r1, [pc, #128]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa0a:	4313      	orrs	r3, r2
 801fa0c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801fa0e:	4b1f      	ldr	r3, [pc, #124]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa12:	4a1e      	ldr	r2, [pc, #120]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa14:	f043 0310 	orr.w	r3, r3, #16
 801fa18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801fa1a:	683b      	ldr	r3, [r7, #0]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d106      	bne.n	801fa2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801fa20:	4b1a      	ldr	r3, [pc, #104]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa24:	4a19      	ldr	r2, [pc, #100]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801fa2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fa2c:	e00f      	b.n	801fa4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801fa2e:	683b      	ldr	r3, [r7, #0]
 801fa30:	2b01      	cmp	r3, #1
 801fa32:	d106      	bne.n	801fa42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801fa34:	4b15      	ldr	r3, [pc, #84]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa38:	4a14      	ldr	r2, [pc, #80]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fa3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fa40:	e005      	b.n	801fa4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801fa42:	4b12      	ldr	r3, [pc, #72]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa46:	4a11      	ldr	r2, [pc, #68]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801fa4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801fa4e:	4b0f      	ldr	r3, [pc, #60]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa50:	681b      	ldr	r3, [r3, #0]
 801fa52:	4a0e      	ldr	r2, [pc, #56]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801fa58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fa5a:	f7fa fea3 	bl	801a7a4 <HAL_GetTick>
 801fa5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801fa60:	e008      	b.n	801fa74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801fa62:	f7fa fe9f 	bl	801a7a4 <HAL_GetTick>
 801fa66:	4602      	mov	r2, r0
 801fa68:	68bb      	ldr	r3, [r7, #8]
 801fa6a:	1ad3      	subs	r3, r2, r3
 801fa6c:	2b02      	cmp	r3, #2
 801fa6e:	d901      	bls.n	801fa74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801fa70:	2303      	movs	r3, #3
 801fa72:	e006      	b.n	801fa82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801fa74:	4b05      	ldr	r3, [pc, #20]	@ (801fa8c <RCCEx_PLL2_Config+0x15c>)
 801fa76:	681b      	ldr	r3, [r3, #0]
 801fa78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801fa7c:	2b00      	cmp	r3, #0
 801fa7e:	d0f0      	beq.n	801fa62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801fa80:	7bfb      	ldrb	r3, [r7, #15]
}
 801fa82:	4618      	mov	r0, r3
 801fa84:	3710      	adds	r7, #16
 801fa86:	46bd      	mov	sp, r7
 801fa88:	bd80      	pop	{r7, pc}
 801fa8a:	bf00      	nop
 801fa8c:	58024400 	.word	0x58024400
 801fa90:	ffff0007 	.word	0xffff0007

0801fa94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801fa94:	b580      	push	{r7, lr}
 801fa96:	b084      	sub	sp, #16
 801fa98:	af00      	add	r7, sp, #0
 801fa9a:	6078      	str	r0, [r7, #4]
 801fa9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801fa9e:	2300      	movs	r3, #0
 801faa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801faa2:	4b53      	ldr	r3, [pc, #332]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801faa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801faa6:	f003 0303 	and.w	r3, r3, #3
 801faaa:	2b03      	cmp	r3, #3
 801faac:	d101      	bne.n	801fab2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801faae:	2301      	movs	r3, #1
 801fab0:	e099      	b.n	801fbe6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801fab2:	4b4f      	ldr	r3, [pc, #316]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fab4:	681b      	ldr	r3, [r3, #0]
 801fab6:	4a4e      	ldr	r2, [pc, #312]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801fabc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fabe:	f7fa fe71 	bl	801a7a4 <HAL_GetTick>
 801fac2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801fac4:	e008      	b.n	801fad8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801fac6:	f7fa fe6d 	bl	801a7a4 <HAL_GetTick>
 801faca:	4602      	mov	r2, r0
 801facc:	68bb      	ldr	r3, [r7, #8]
 801face:	1ad3      	subs	r3, r2, r3
 801fad0:	2b02      	cmp	r3, #2
 801fad2:	d901      	bls.n	801fad8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801fad4:	2303      	movs	r3, #3
 801fad6:	e086      	b.n	801fbe6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801fad8:	4b45      	ldr	r3, [pc, #276]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fada:	681b      	ldr	r3, [r3, #0]
 801fadc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801fae0:	2b00      	cmp	r3, #0
 801fae2:	d1f0      	bne.n	801fac6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801fae4:	4b42      	ldr	r3, [pc, #264]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fae8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	681b      	ldr	r3, [r3, #0]
 801faf0:	051b      	lsls	r3, r3, #20
 801faf2:	493f      	ldr	r1, [pc, #252]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801faf4:	4313      	orrs	r3, r2
 801faf6:	628b      	str	r3, [r1, #40]	@ 0x28
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	685b      	ldr	r3, [r3, #4]
 801fafc:	3b01      	subs	r3, #1
 801fafe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	689b      	ldr	r3, [r3, #8]
 801fb06:	3b01      	subs	r3, #1
 801fb08:	025b      	lsls	r3, r3, #9
 801fb0a:	b29b      	uxth	r3, r3
 801fb0c:	431a      	orrs	r2, r3
 801fb0e:	687b      	ldr	r3, [r7, #4]
 801fb10:	68db      	ldr	r3, [r3, #12]
 801fb12:	3b01      	subs	r3, #1
 801fb14:	041b      	lsls	r3, r3, #16
 801fb16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801fb1a:	431a      	orrs	r2, r3
 801fb1c:	687b      	ldr	r3, [r7, #4]
 801fb1e:	691b      	ldr	r3, [r3, #16]
 801fb20:	3b01      	subs	r3, #1
 801fb22:	061b      	lsls	r3, r3, #24
 801fb24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801fb28:	4931      	ldr	r1, [pc, #196]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb2a:	4313      	orrs	r3, r2
 801fb2c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801fb2e:	4b30      	ldr	r3, [pc, #192]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	695b      	ldr	r3, [r3, #20]
 801fb3a:	492d      	ldr	r1, [pc, #180]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb3c:	4313      	orrs	r3, r2
 801fb3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801fb40:	4b2b      	ldr	r3, [pc, #172]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb44:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	699b      	ldr	r3, [r3, #24]
 801fb4c:	4928      	ldr	r1, [pc, #160]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb4e:	4313      	orrs	r3, r2
 801fb50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801fb52:	4b27      	ldr	r3, [pc, #156]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb56:	4a26      	ldr	r2, [pc, #152]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801fb5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801fb5e:	4b24      	ldr	r3, [pc, #144]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801fb62:	4b24      	ldr	r3, [pc, #144]	@ (801fbf4 <RCCEx_PLL3_Config+0x160>)
 801fb64:	4013      	ands	r3, r2
 801fb66:	687a      	ldr	r2, [r7, #4]
 801fb68:	69d2      	ldr	r2, [r2, #28]
 801fb6a:	00d2      	lsls	r2, r2, #3
 801fb6c:	4920      	ldr	r1, [pc, #128]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb6e:	4313      	orrs	r3, r2
 801fb70:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801fb72:	4b1f      	ldr	r3, [pc, #124]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb76:	4a1e      	ldr	r2, [pc, #120]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801fb7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801fb7e:	683b      	ldr	r3, [r7, #0]
 801fb80:	2b00      	cmp	r3, #0
 801fb82:	d106      	bne.n	801fb92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801fb84:	4b1a      	ldr	r3, [pc, #104]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb88:	4a19      	ldr	r2, [pc, #100]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801fb8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fb90:	e00f      	b.n	801fbb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801fb92:	683b      	ldr	r3, [r7, #0]
 801fb94:	2b01      	cmp	r3, #1
 801fb96:	d106      	bne.n	801fba6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801fb98:	4b15      	ldr	r3, [pc, #84]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb9c:	4a14      	ldr	r2, [pc, #80]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fb9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801fba2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fba4:	e005      	b.n	801fbb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801fba6:	4b12      	ldr	r3, [pc, #72]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fbaa:	4a11      	ldr	r2, [pc, #68]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fbac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801fbb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801fbb2:	4b0f      	ldr	r3, [pc, #60]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fbb4:	681b      	ldr	r3, [r3, #0]
 801fbb6:	4a0e      	ldr	r2, [pc, #56]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fbb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801fbbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fbbe:	f7fa fdf1 	bl	801a7a4 <HAL_GetTick>
 801fbc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fbc4:	e008      	b.n	801fbd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801fbc6:	f7fa fded 	bl	801a7a4 <HAL_GetTick>
 801fbca:	4602      	mov	r2, r0
 801fbcc:	68bb      	ldr	r3, [r7, #8]
 801fbce:	1ad3      	subs	r3, r2, r3
 801fbd0:	2b02      	cmp	r3, #2
 801fbd2:	d901      	bls.n	801fbd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801fbd4:	2303      	movs	r3, #3
 801fbd6:	e006      	b.n	801fbe6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fbd8:	4b05      	ldr	r3, [pc, #20]	@ (801fbf0 <RCCEx_PLL3_Config+0x15c>)
 801fbda:	681b      	ldr	r3, [r3, #0]
 801fbdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	d0f0      	beq.n	801fbc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801fbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 801fbe6:	4618      	mov	r0, r3
 801fbe8:	3710      	adds	r7, #16
 801fbea:	46bd      	mov	sp, r7
 801fbec:	bd80      	pop	{r7, pc}
 801fbee:	bf00      	nop
 801fbf0:	58024400 	.word	0x58024400
 801fbf4:	ffff0007 	.word	0xffff0007

0801fbf8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801fbf8:	b580      	push	{r7, lr}
 801fbfa:	b084      	sub	sp, #16
 801fbfc:	af00      	add	r7, sp, #0
 801fbfe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801fc00:	687b      	ldr	r3, [r7, #4]
 801fc02:	2b00      	cmp	r3, #0
 801fc04:	d101      	bne.n	801fc0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801fc06:	2301      	movs	r3, #1
 801fc08:	e10f      	b.n	801fe2a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	2200      	movs	r2, #0
 801fc0e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	4a87      	ldr	r2, [pc, #540]	@ (801fe34 <HAL_SPI_Init+0x23c>)
 801fc16:	4293      	cmp	r3, r2
 801fc18:	d00f      	beq.n	801fc3a <HAL_SPI_Init+0x42>
 801fc1a:	687b      	ldr	r3, [r7, #4]
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	4a86      	ldr	r2, [pc, #536]	@ (801fe38 <HAL_SPI_Init+0x240>)
 801fc20:	4293      	cmp	r3, r2
 801fc22:	d00a      	beq.n	801fc3a <HAL_SPI_Init+0x42>
 801fc24:	687b      	ldr	r3, [r7, #4]
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	4a84      	ldr	r2, [pc, #528]	@ (801fe3c <HAL_SPI_Init+0x244>)
 801fc2a:	4293      	cmp	r3, r2
 801fc2c:	d005      	beq.n	801fc3a <HAL_SPI_Init+0x42>
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	68db      	ldr	r3, [r3, #12]
 801fc32:	2b0f      	cmp	r3, #15
 801fc34:	d901      	bls.n	801fc3a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801fc36:	2301      	movs	r3, #1
 801fc38:	e0f7      	b.n	801fe2a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801fc3a:	6878      	ldr	r0, [r7, #4]
 801fc3c:	f000 fbba 	bl	80203b4 <SPI_GetPacketSize>
 801fc40:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	681b      	ldr	r3, [r3, #0]
 801fc46:	4a7b      	ldr	r2, [pc, #492]	@ (801fe34 <HAL_SPI_Init+0x23c>)
 801fc48:	4293      	cmp	r3, r2
 801fc4a:	d00c      	beq.n	801fc66 <HAL_SPI_Init+0x6e>
 801fc4c:	687b      	ldr	r3, [r7, #4]
 801fc4e:	681b      	ldr	r3, [r3, #0]
 801fc50:	4a79      	ldr	r2, [pc, #484]	@ (801fe38 <HAL_SPI_Init+0x240>)
 801fc52:	4293      	cmp	r3, r2
 801fc54:	d007      	beq.n	801fc66 <HAL_SPI_Init+0x6e>
 801fc56:	687b      	ldr	r3, [r7, #4]
 801fc58:	681b      	ldr	r3, [r3, #0]
 801fc5a:	4a78      	ldr	r2, [pc, #480]	@ (801fe3c <HAL_SPI_Init+0x244>)
 801fc5c:	4293      	cmp	r3, r2
 801fc5e:	d002      	beq.n	801fc66 <HAL_SPI_Init+0x6e>
 801fc60:	68fb      	ldr	r3, [r7, #12]
 801fc62:	2b08      	cmp	r3, #8
 801fc64:	d811      	bhi.n	801fc8a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801fc6a:	4a72      	ldr	r2, [pc, #456]	@ (801fe34 <HAL_SPI_Init+0x23c>)
 801fc6c:	4293      	cmp	r3, r2
 801fc6e:	d009      	beq.n	801fc84 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801fc70:	687b      	ldr	r3, [r7, #4]
 801fc72:	681b      	ldr	r3, [r3, #0]
 801fc74:	4a70      	ldr	r2, [pc, #448]	@ (801fe38 <HAL_SPI_Init+0x240>)
 801fc76:	4293      	cmp	r3, r2
 801fc78:	d004      	beq.n	801fc84 <HAL_SPI_Init+0x8c>
 801fc7a:	687b      	ldr	r3, [r7, #4]
 801fc7c:	681b      	ldr	r3, [r3, #0]
 801fc7e:	4a6f      	ldr	r2, [pc, #444]	@ (801fe3c <HAL_SPI_Init+0x244>)
 801fc80:	4293      	cmp	r3, r2
 801fc82:	d104      	bne.n	801fc8e <HAL_SPI_Init+0x96>
 801fc84:	68fb      	ldr	r3, [r7, #12]
 801fc86:	2b10      	cmp	r3, #16
 801fc88:	d901      	bls.n	801fc8e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801fc8a:	2301      	movs	r3, #1
 801fc8c:	e0cd      	b.n	801fe2a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801fc8e:	687b      	ldr	r3, [r7, #4]
 801fc90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fc94:	b2db      	uxtb	r3, r3
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	d106      	bne.n	801fca8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	2200      	movs	r2, #0
 801fc9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801fca2:	6878      	ldr	r0, [r7, #4]
 801fca4:	f7e2 fd16 	bl	80026d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	2202      	movs	r2, #2
 801fcac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801fcb0:	687b      	ldr	r3, [r7, #4]
 801fcb2:	681b      	ldr	r3, [r3, #0]
 801fcb4:	681a      	ldr	r2, [r3, #0]
 801fcb6:	687b      	ldr	r3, [r7, #4]
 801fcb8:	681b      	ldr	r3, [r3, #0]
 801fcba:	f022 0201 	bic.w	r2, r2, #1
 801fcbe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	681b      	ldr	r3, [r3, #0]
 801fcc4:	689b      	ldr	r3, [r3, #8]
 801fcc6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801fcca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	699b      	ldr	r3, [r3, #24]
 801fcd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fcd4:	d119      	bne.n	801fd0a <HAL_SPI_Init+0x112>
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	685b      	ldr	r3, [r3, #4]
 801fcda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fcde:	d103      	bne.n	801fce8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801fce4:	2b00      	cmp	r3, #0
 801fce6:	d008      	beq.n	801fcfa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801fce8:	687b      	ldr	r3, [r7, #4]
 801fcea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801fcec:	2b00      	cmp	r3, #0
 801fcee:	d10c      	bne.n	801fd0a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801fcf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801fcf8:	d107      	bne.n	801fd0a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801fcfa:	687b      	ldr	r3, [r7, #4]
 801fcfc:	681b      	ldr	r3, [r3, #0]
 801fcfe:	681a      	ldr	r2, [r3, #0]
 801fd00:	687b      	ldr	r3, [r7, #4]
 801fd02:	681b      	ldr	r3, [r3, #0]
 801fd04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801fd08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801fd0a:	687b      	ldr	r3, [r7, #4]
 801fd0c:	685b      	ldr	r3, [r3, #4]
 801fd0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d00f      	beq.n	801fd36 <HAL_SPI_Init+0x13e>
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	68db      	ldr	r3, [r3, #12]
 801fd1a:	2b06      	cmp	r3, #6
 801fd1c:	d90b      	bls.n	801fd36 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801fd1e:	687b      	ldr	r3, [r7, #4]
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801fd28:	687b      	ldr	r3, [r7, #4]
 801fd2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	430a      	orrs	r2, r1
 801fd32:	601a      	str	r2, [r3, #0]
 801fd34:	e007      	b.n	801fd46 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801fd36:	687b      	ldr	r3, [r7, #4]
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	681a      	ldr	r2, [r3, #0]
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801fd44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	69da      	ldr	r2, [r3, #28]
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd4e:	431a      	orrs	r2, r3
 801fd50:	68bb      	ldr	r3, [r7, #8]
 801fd52:	431a      	orrs	r2, r3
 801fd54:	687b      	ldr	r3, [r7, #4]
 801fd56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fd58:	ea42 0103 	orr.w	r1, r2, r3
 801fd5c:	687b      	ldr	r3, [r7, #4]
 801fd5e:	68da      	ldr	r2, [r3, #12]
 801fd60:	687b      	ldr	r3, [r7, #4]
 801fd62:	681b      	ldr	r3, [r3, #0]
 801fd64:	430a      	orrs	r2, r1
 801fd66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801fd68:	687b      	ldr	r3, [r7, #4]
 801fd6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fd70:	431a      	orrs	r2, r3
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fd76:	431a      	orrs	r2, r3
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	699b      	ldr	r3, [r3, #24]
 801fd7c:	431a      	orrs	r2, r3
 801fd7e:	687b      	ldr	r3, [r7, #4]
 801fd80:	691b      	ldr	r3, [r3, #16]
 801fd82:	431a      	orrs	r2, r3
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	695b      	ldr	r3, [r3, #20]
 801fd88:	431a      	orrs	r2, r3
 801fd8a:	687b      	ldr	r3, [r7, #4]
 801fd8c:	6a1b      	ldr	r3, [r3, #32]
 801fd8e:	431a      	orrs	r2, r3
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	685b      	ldr	r3, [r3, #4]
 801fd94:	431a      	orrs	r2, r3
 801fd96:	687b      	ldr	r3, [r7, #4]
 801fd98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fd9a:	431a      	orrs	r2, r3
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	689b      	ldr	r3, [r3, #8]
 801fda0:	431a      	orrs	r2, r3
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801fda6:	ea42 0103 	orr.w	r1, r2, r3
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	681b      	ldr	r3, [r3, #0]
 801fdb2:	430a      	orrs	r2, r1
 801fdb4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	685b      	ldr	r3, [r3, #4]
 801fdba:	2b00      	cmp	r3, #0
 801fdbc:	d113      	bne.n	801fde6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801fdbe:	687b      	ldr	r3, [r7, #4]
 801fdc0:	681b      	ldr	r3, [r3, #0]
 801fdc2:	689b      	ldr	r3, [r3, #8]
 801fdc4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	681b      	ldr	r3, [r3, #0]
 801fdcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fdd0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	681b      	ldr	r3, [r3, #0]
 801fdd6:	689b      	ldr	r3, [r3, #8]
 801fdd8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	681b      	ldr	r3, [r3, #0]
 801fde0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801fde4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	681b      	ldr	r3, [r3, #0]
 801fdea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	f022 0201 	bic.w	r2, r2, #1
 801fdf4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	685b      	ldr	r3, [r3, #4]
 801fdfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d00a      	beq.n	801fe18 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	68db      	ldr	r3, [r3, #12]
 801fe08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	681b      	ldr	r3, [r3, #0]
 801fe14:	430a      	orrs	r2, r1
 801fe16:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	2200      	movs	r2, #0
 801fe1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801fe20:	687b      	ldr	r3, [r7, #4]
 801fe22:	2201      	movs	r2, #1
 801fe24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801fe28:	2300      	movs	r3, #0
}
 801fe2a:	4618      	mov	r0, r3
 801fe2c:	3710      	adds	r7, #16
 801fe2e:	46bd      	mov	sp, r7
 801fe30:	bd80      	pop	{r7, pc}
 801fe32:	bf00      	nop
 801fe34:	40013000 	.word	0x40013000
 801fe38:	40003800 	.word	0x40003800
 801fe3c:	40003c00 	.word	0x40003c00

0801fe40 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801fe40:	b580      	push	{r7, lr}
 801fe42:	b08a      	sub	sp, #40	@ 0x28
 801fe44:	af00      	add	r7, sp, #0
 801fe46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	681b      	ldr	r3, [r3, #0]
 801fe4c:	691b      	ldr	r3, [r3, #16]
 801fe4e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	681b      	ldr	r3, [r3, #0]
 801fe54:	695b      	ldr	r3, [r3, #20]
 801fe56:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801fe58:	6a3a      	ldr	r2, [r7, #32]
 801fe5a:	69fb      	ldr	r3, [r7, #28]
 801fe5c:	4013      	ands	r3, r2
 801fe5e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	681b      	ldr	r3, [r3, #0]
 801fe64:	689b      	ldr	r3, [r3, #8]
 801fe66:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801fe68:	2300      	movs	r3, #0
 801fe6a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fe72:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801fe74:	687b      	ldr	r3, [r7, #4]
 801fe76:	681b      	ldr	r3, [r3, #0]
 801fe78:	3330      	adds	r3, #48	@ 0x30
 801fe7a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801fe7c:	69fb      	ldr	r3, [r7, #28]
 801fe7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801fe82:	2b00      	cmp	r3, #0
 801fe84:	d010      	beq.n	801fea8 <HAL_SPI_IRQHandler+0x68>
 801fe86:	6a3b      	ldr	r3, [r7, #32]
 801fe88:	f003 0308 	and.w	r3, r3, #8
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	d00b      	beq.n	801fea8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801fe90:	687b      	ldr	r3, [r7, #4]
 801fe92:	681b      	ldr	r3, [r3, #0]
 801fe94:	699a      	ldr	r2, [r3, #24]
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	681b      	ldr	r3, [r3, #0]
 801fe9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fe9e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801fea0:	6878      	ldr	r0, [r7, #4]
 801fea2:	f000 f9c3 	bl	802022c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801fea6:	e192      	b.n	80201ce <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801fea8:	69bb      	ldr	r3, [r7, #24]
 801feaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801feae:	2b00      	cmp	r3, #0
 801feb0:	d113      	bne.n	801feda <HAL_SPI_IRQHandler+0x9a>
 801feb2:	69bb      	ldr	r3, [r7, #24]
 801feb4:	f003 0320 	and.w	r3, r3, #32
 801feb8:	2b00      	cmp	r3, #0
 801feba:	d10e      	bne.n	801feda <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801febc:	69bb      	ldr	r3, [r7, #24]
 801febe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801fec2:	2b00      	cmp	r3, #0
 801fec4:	d009      	beq.n	801feda <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801fec6:	687b      	ldr	r3, [r7, #4]
 801fec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801feca:	6878      	ldr	r0, [r7, #4]
 801fecc:	4798      	blx	r3
    hspi->RxISR(hspi);
 801fece:	687b      	ldr	r3, [r7, #4]
 801fed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fed2:	6878      	ldr	r0, [r7, #4]
 801fed4:	4798      	blx	r3
    handled = 1UL;
 801fed6:	2301      	movs	r3, #1
 801fed8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801feda:	69bb      	ldr	r3, [r7, #24]
 801fedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fee0:	2b00      	cmp	r3, #0
 801fee2:	d10f      	bne.n	801ff04 <HAL_SPI_IRQHandler+0xc4>
 801fee4:	69bb      	ldr	r3, [r7, #24]
 801fee6:	f003 0301 	and.w	r3, r3, #1
 801feea:	2b00      	cmp	r3, #0
 801feec:	d00a      	beq.n	801ff04 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801feee:	69bb      	ldr	r3, [r7, #24]
 801fef0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	d105      	bne.n	801ff04 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fefc:	6878      	ldr	r0, [r7, #4]
 801fefe:	4798      	blx	r3
    handled = 1UL;
 801ff00:	2301      	movs	r3, #1
 801ff02:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801ff04:	69bb      	ldr	r3, [r7, #24]
 801ff06:	f003 0320 	and.w	r3, r3, #32
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d10f      	bne.n	801ff2e <HAL_SPI_IRQHandler+0xee>
 801ff0e:	69bb      	ldr	r3, [r7, #24]
 801ff10:	f003 0302 	and.w	r3, r3, #2
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	d00a      	beq.n	801ff2e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801ff18:	69bb      	ldr	r3, [r7, #24]
 801ff1a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d105      	bne.n	801ff2e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ff26:	6878      	ldr	r0, [r7, #4]
 801ff28:	4798      	blx	r3
    handled = 1UL;
 801ff2a:	2301      	movs	r3, #1
 801ff2c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801ff2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff30:	2b00      	cmp	r3, #0
 801ff32:	f040 8147 	bne.w	80201c4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801ff36:	69bb      	ldr	r3, [r7, #24]
 801ff38:	f003 0308 	and.w	r3, r3, #8
 801ff3c:	2b00      	cmp	r3, #0
 801ff3e:	f000 808b 	beq.w	8020058 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	681b      	ldr	r3, [r3, #0]
 801ff46:	699a      	ldr	r2, [r3, #24]
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	f042 0208 	orr.w	r2, r2, #8
 801ff50:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	699a      	ldr	r2, [r3, #24]
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	f042 0210 	orr.w	r2, r2, #16
 801ff60:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	681b      	ldr	r3, [r3, #0]
 801ff66:	699a      	ldr	r2, [r3, #24]
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	681b      	ldr	r3, [r3, #0]
 801ff6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801ff70:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801ff72:	687b      	ldr	r3, [r7, #4]
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	691a      	ldr	r2, [r3, #16]
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	681b      	ldr	r3, [r3, #0]
 801ff7c:	f022 0208 	bic.w	r2, r2, #8
 801ff80:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801ff82:	687b      	ldr	r3, [r7, #4]
 801ff84:	681b      	ldr	r3, [r3, #0]
 801ff86:	689b      	ldr	r3, [r3, #8]
 801ff88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	d13d      	bne.n	802000c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801ff90:	e036      	b.n	8020000 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801ff92:	687b      	ldr	r3, [r7, #4]
 801ff94:	68db      	ldr	r3, [r3, #12]
 801ff96:	2b0f      	cmp	r3, #15
 801ff98:	d90b      	bls.n	801ffb2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	681a      	ldr	r2, [r3, #0]
 801ff9e:	687b      	ldr	r3, [r7, #4]
 801ffa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffa2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801ffa4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801ffa6:	687b      	ldr	r3, [r7, #4]
 801ffa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffaa:	1d1a      	adds	r2, r3, #4
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	665a      	str	r2, [r3, #100]	@ 0x64
 801ffb0:	e01d      	b.n	801ffee <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ffb2:	687b      	ldr	r3, [r7, #4]
 801ffb4:	68db      	ldr	r3, [r3, #12]
 801ffb6:	2b07      	cmp	r3, #7
 801ffb8:	d90b      	bls.n	801ffd2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffbe:	68fa      	ldr	r2, [r7, #12]
 801ffc0:	8812      	ldrh	r2, [r2, #0]
 801ffc2:	b292      	uxth	r2, r2
 801ffc4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffca:	1c9a      	adds	r2, r3, #2
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	665a      	str	r2, [r3, #100]	@ 0x64
 801ffd0:	e00d      	b.n	801ffee <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	681b      	ldr	r3, [r3, #0]
 801ffd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffde:	7812      	ldrb	r2, [r2, #0]
 801ffe0:	b2d2      	uxtb	r2, r2
 801ffe2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801ffe4:	687b      	ldr	r3, [r7, #4]
 801ffe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffe8:	1c5a      	adds	r2, r3, #1
 801ffea:	687b      	ldr	r3, [r7, #4]
 801ffec:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801ffee:	687b      	ldr	r3, [r7, #4]
 801fff0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801fff4:	b29b      	uxth	r3, r3
 801fff6:	3b01      	subs	r3, #1
 801fff8:	b29a      	uxth	r2, r3
 801fffa:	687b      	ldr	r3, [r7, #4]
 801fffc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8020000:	687b      	ldr	r3, [r7, #4]
 8020002:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8020006:	b29b      	uxth	r3, r3
 8020008:	2b00      	cmp	r3, #0
 802000a:	d1c2      	bne.n	801ff92 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 802000c:	6878      	ldr	r0, [r7, #4]
 802000e:	f000 f931 	bl	8020274 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	2201      	movs	r2, #1
 8020016:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802001a:	687b      	ldr	r3, [r7, #4]
 802001c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020020:	2b00      	cmp	r3, #0
 8020022:	d003      	beq.n	802002c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8020024:	6878      	ldr	r0, [r7, #4]
 8020026:	f000 f8f7 	bl	8020218 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 802002a:	e0d0      	b.n	80201ce <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 802002c:	7cfb      	ldrb	r3, [r7, #19]
 802002e:	2b05      	cmp	r3, #5
 8020030:	d103      	bne.n	802003a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8020032:	6878      	ldr	r0, [r7, #4]
 8020034:	f000 f8e6 	bl	8020204 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8020038:	e0c6      	b.n	80201c8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 802003a:	7cfb      	ldrb	r3, [r7, #19]
 802003c:	2b04      	cmp	r3, #4
 802003e:	d103      	bne.n	8020048 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8020040:	6878      	ldr	r0, [r7, #4]
 8020042:	f000 f8d5 	bl	80201f0 <HAL_SPI_RxCpltCallback>
    return;
 8020046:	e0bf      	b.n	80201c8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8020048:	7cfb      	ldrb	r3, [r7, #19]
 802004a:	2b03      	cmp	r3, #3
 802004c:	f040 80bc 	bne.w	80201c8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8020050:	6878      	ldr	r0, [r7, #4]
 8020052:	f000 f8c3 	bl	80201dc <HAL_SPI_TxCpltCallback>
    return;
 8020056:	e0b7      	b.n	80201c8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8020058:	69bb      	ldr	r3, [r7, #24]
 802005a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 802005e:	2b00      	cmp	r3, #0
 8020060:	f000 80b5 	beq.w	80201ce <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8020064:	69bb      	ldr	r3, [r7, #24]
 8020066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802006a:	2b00      	cmp	r3, #0
 802006c:	d00f      	beq.n	802008e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802006e:	687b      	ldr	r3, [r7, #4]
 8020070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020074:	f043 0204 	orr.w	r2, r3, #4
 8020078:	687b      	ldr	r3, [r7, #4]
 802007a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802007e:	687b      	ldr	r3, [r7, #4]
 8020080:	681b      	ldr	r3, [r3, #0]
 8020082:	699a      	ldr	r2, [r3, #24]
 8020084:	687b      	ldr	r3, [r7, #4]
 8020086:	681b      	ldr	r3, [r3, #0]
 8020088:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802008c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 802008e:	69bb      	ldr	r3, [r7, #24]
 8020090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8020094:	2b00      	cmp	r3, #0
 8020096:	d00f      	beq.n	80200b8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802009e:	f043 0201 	orr.w	r2, r3, #1
 80200a2:	687b      	ldr	r3, [r7, #4]
 80200a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80200a8:	687b      	ldr	r3, [r7, #4]
 80200aa:	681b      	ldr	r3, [r3, #0]
 80200ac:	699a      	ldr	r2, [r3, #24]
 80200ae:	687b      	ldr	r3, [r7, #4]
 80200b0:	681b      	ldr	r3, [r3, #0]
 80200b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80200b6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80200b8:	69bb      	ldr	r3, [r7, #24]
 80200ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80200be:	2b00      	cmp	r3, #0
 80200c0:	d00f      	beq.n	80200e2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80200c2:	687b      	ldr	r3, [r7, #4]
 80200c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80200c8:	f043 0208 	orr.w	r2, r3, #8
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80200d2:	687b      	ldr	r3, [r7, #4]
 80200d4:	681b      	ldr	r3, [r3, #0]
 80200d6:	699a      	ldr	r2, [r3, #24]
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80200e0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80200e2:	69bb      	ldr	r3, [r7, #24]
 80200e4:	f003 0320 	and.w	r3, r3, #32
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d00f      	beq.n	802010c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80200f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80200fc:	687b      	ldr	r3, [r7, #4]
 80200fe:	681b      	ldr	r3, [r3, #0]
 8020100:	699a      	ldr	r2, [r3, #24]
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	f042 0220 	orr.w	r2, r2, #32
 802010a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020112:	2b00      	cmp	r3, #0
 8020114:	d05a      	beq.n	80201cc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8020116:	687b      	ldr	r3, [r7, #4]
 8020118:	681b      	ldr	r3, [r3, #0]
 802011a:	681a      	ldr	r2, [r3, #0]
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	681b      	ldr	r3, [r3, #0]
 8020120:	f022 0201 	bic.w	r2, r2, #1
 8020124:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	6919      	ldr	r1, [r3, #16]
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	681a      	ldr	r2, [r3, #0]
 8020130:	4b28      	ldr	r3, [pc, #160]	@ (80201d4 <HAL_SPI_IRQHandler+0x394>)
 8020132:	400b      	ands	r3, r1
 8020134:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8020136:	697b      	ldr	r3, [r7, #20]
 8020138:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 802013c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8020140:	d138      	bne.n	80201b4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	681b      	ldr	r3, [r3, #0]
 8020146:	689a      	ldr	r2, [r3, #8]
 8020148:	687b      	ldr	r3, [r7, #4]
 802014a:	681b      	ldr	r3, [r3, #0]
 802014c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8020150:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8020156:	2b00      	cmp	r3, #0
 8020158:	d013      	beq.n	8020182 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 802015e:	4a1e      	ldr	r2, [pc, #120]	@ (80201d8 <HAL_SPI_IRQHandler+0x398>)
 8020160:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8020166:	4618      	mov	r0, r3
 8020168:	f7fb f850 	bl	801b20c <HAL_DMA_Abort_IT>
 802016c:	4603      	mov	r3, r0
 802016e:	2b00      	cmp	r3, #0
 8020170:	d007      	beq.n	8020182 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020178:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 802017c:	687b      	ldr	r3, [r7, #4]
 802017e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8020182:	687b      	ldr	r3, [r7, #4]
 8020184:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020186:	2b00      	cmp	r3, #0
 8020188:	d020      	beq.n	80201cc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802018a:	687b      	ldr	r3, [r7, #4]
 802018c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 802018e:	4a12      	ldr	r2, [pc, #72]	@ (80201d8 <HAL_SPI_IRQHandler+0x398>)
 8020190:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020196:	4618      	mov	r0, r3
 8020198:	f7fb f838 	bl	801b20c <HAL_DMA_Abort_IT>
 802019c:	4603      	mov	r3, r0
 802019e:	2b00      	cmp	r3, #0
 80201a0:	d014      	beq.n	80201cc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80201a2:	687b      	ldr	r3, [r7, #4]
 80201a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80201a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80201ac:	687b      	ldr	r3, [r7, #4]
 80201ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80201b2:	e00b      	b.n	80201cc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	2201      	movs	r2, #1
 80201b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80201bc:	6878      	ldr	r0, [r7, #4]
 80201be:	f000 f82b 	bl	8020218 <HAL_SPI_ErrorCallback>
    return;
 80201c2:	e003      	b.n	80201cc <HAL_SPI_IRQHandler+0x38c>
    return;
 80201c4:	bf00      	nop
 80201c6:	e002      	b.n	80201ce <HAL_SPI_IRQHandler+0x38e>
    return;
 80201c8:	bf00      	nop
 80201ca:	e000      	b.n	80201ce <HAL_SPI_IRQHandler+0x38e>
    return;
 80201cc:	bf00      	nop
  }
}
 80201ce:	3728      	adds	r7, #40	@ 0x28
 80201d0:	46bd      	mov	sp, r7
 80201d2:	bd80      	pop	{r7, pc}
 80201d4:	fffffc94 	.word	0xfffffc94
 80201d8:	08020241 	.word	0x08020241

080201dc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80201dc:	b480      	push	{r7}
 80201de:	b083      	sub	sp, #12
 80201e0:	af00      	add	r7, sp, #0
 80201e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80201e4:	bf00      	nop
 80201e6:	370c      	adds	r7, #12
 80201e8:	46bd      	mov	sp, r7
 80201ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201ee:	4770      	bx	lr

080201f0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80201f0:	b480      	push	{r7}
 80201f2:	b083      	sub	sp, #12
 80201f4:	af00      	add	r7, sp, #0
 80201f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80201f8:	bf00      	nop
 80201fa:	370c      	adds	r7, #12
 80201fc:	46bd      	mov	sp, r7
 80201fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020202:	4770      	bx	lr

08020204 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8020204:	b480      	push	{r7}
 8020206:	b083      	sub	sp, #12
 8020208:	af00      	add	r7, sp, #0
 802020a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 802020c:	bf00      	nop
 802020e:	370c      	adds	r7, #12
 8020210:	46bd      	mov	sp, r7
 8020212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020216:	4770      	bx	lr

08020218 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8020218:	b480      	push	{r7}
 802021a:	b083      	sub	sp, #12
 802021c:	af00      	add	r7, sp, #0
 802021e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8020220:	bf00      	nop
 8020222:	370c      	adds	r7, #12
 8020224:	46bd      	mov	sp, r7
 8020226:	f85d 7b04 	ldr.w	r7, [sp], #4
 802022a:	4770      	bx	lr

0802022c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 802022c:	b480      	push	{r7}
 802022e:	b083      	sub	sp, #12
 8020230:	af00      	add	r7, sp, #0
 8020232:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8020234:	bf00      	nop
 8020236:	370c      	adds	r7, #12
 8020238:	46bd      	mov	sp, r7
 802023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802023e:	4770      	bx	lr

08020240 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8020240:	b580      	push	{r7, lr}
 8020242:	b084      	sub	sp, #16
 8020244:	af00      	add	r7, sp, #0
 8020246:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8020248:	687b      	ldr	r3, [r7, #4]
 802024a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802024c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 802024e:	68fb      	ldr	r3, [r7, #12]
 8020250:	2200      	movs	r2, #0
 8020252:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8020256:	68fb      	ldr	r3, [r7, #12]
 8020258:	2200      	movs	r2, #0
 802025a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 802025e:	68fb      	ldr	r3, [r7, #12]
 8020260:	2201      	movs	r2, #1
 8020262:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8020266:	68f8      	ldr	r0, [r7, #12]
 8020268:	f7ff ffd6 	bl	8020218 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802026c:	bf00      	nop
 802026e:	3710      	adds	r7, #16
 8020270:	46bd      	mov	sp, r7
 8020272:	bd80      	pop	{r7, pc}

08020274 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8020274:	b480      	push	{r7}
 8020276:	b085      	sub	sp, #20
 8020278:	af00      	add	r7, sp, #0
 802027a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	681b      	ldr	r3, [r3, #0]
 8020280:	695b      	ldr	r3, [r3, #20]
 8020282:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	681b      	ldr	r3, [r3, #0]
 8020288:	699a      	ldr	r2, [r3, #24]
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	681b      	ldr	r3, [r3, #0]
 802028e:	f042 0208 	orr.w	r2, r2, #8
 8020292:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	681b      	ldr	r3, [r3, #0]
 8020298:	699a      	ldr	r2, [r3, #24]
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	681b      	ldr	r3, [r3, #0]
 802029e:	f042 0210 	orr.w	r2, r2, #16
 80202a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	681a      	ldr	r2, [r3, #0]
 80202aa:	687b      	ldr	r3, [r7, #4]
 80202ac:	681b      	ldr	r3, [r3, #0]
 80202ae:	f022 0201 	bic.w	r2, r2, #1
 80202b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80202b4:	687b      	ldr	r3, [r7, #4]
 80202b6:	681b      	ldr	r3, [r3, #0]
 80202b8:	6919      	ldr	r1, [r3, #16]
 80202ba:	687b      	ldr	r3, [r7, #4]
 80202bc:	681a      	ldr	r2, [r3, #0]
 80202be:	4b3c      	ldr	r3, [pc, #240]	@ (80203b0 <SPI_CloseTransfer+0x13c>)
 80202c0:	400b      	ands	r3, r1
 80202c2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	681b      	ldr	r3, [r3, #0]
 80202c8:	689a      	ldr	r2, [r3, #8]
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	681b      	ldr	r3, [r3, #0]
 80202ce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80202d2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80202da:	b2db      	uxtb	r3, r3
 80202dc:	2b04      	cmp	r3, #4
 80202de:	d014      	beq.n	802030a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80202e0:	68fb      	ldr	r3, [r7, #12]
 80202e2:	f003 0320 	and.w	r3, r3, #32
 80202e6:	2b00      	cmp	r3, #0
 80202e8:	d00f      	beq.n	802030a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80202f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80202f4:	687b      	ldr	r3, [r7, #4]
 80202f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80202fa:	687b      	ldr	r3, [r7, #4]
 80202fc:	681b      	ldr	r3, [r3, #0]
 80202fe:	699a      	ldr	r2, [r3, #24]
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	681b      	ldr	r3, [r3, #0]
 8020304:	f042 0220 	orr.w	r2, r2, #32
 8020308:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802030a:	687b      	ldr	r3, [r7, #4]
 802030c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8020310:	b2db      	uxtb	r3, r3
 8020312:	2b03      	cmp	r3, #3
 8020314:	d014      	beq.n	8020340 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802031c:	2b00      	cmp	r3, #0
 802031e:	d00f      	beq.n	8020340 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020326:	f043 0204 	orr.w	r2, r3, #4
 802032a:	687b      	ldr	r3, [r7, #4]
 802032c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	699a      	ldr	r2, [r3, #24]
 8020336:	687b      	ldr	r3, [r7, #4]
 8020338:	681b      	ldr	r3, [r3, #0]
 802033a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802033e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8020340:	68fb      	ldr	r3, [r7, #12]
 8020342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8020346:	2b00      	cmp	r3, #0
 8020348:	d00f      	beq.n	802036a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020350:	f043 0201 	orr.w	r2, r3, #1
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802035a:	687b      	ldr	r3, [r7, #4]
 802035c:	681b      	ldr	r3, [r3, #0]
 802035e:	699a      	ldr	r2, [r3, #24]
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	681b      	ldr	r3, [r3, #0]
 8020364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8020368:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 802036a:	68fb      	ldr	r3, [r7, #12]
 802036c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020370:	2b00      	cmp	r3, #0
 8020372:	d00f      	beq.n	8020394 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802037a:	f043 0208 	orr.w	r2, r3, #8
 802037e:	687b      	ldr	r3, [r7, #4]
 8020380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	681b      	ldr	r3, [r3, #0]
 8020388:	699a      	ldr	r2, [r3, #24]
 802038a:	687b      	ldr	r3, [r7, #4]
 802038c:	681b      	ldr	r3, [r3, #0]
 802038e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8020392:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8020394:	687b      	ldr	r3, [r7, #4]
 8020396:	2200      	movs	r2, #0
 8020398:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	2200      	movs	r2, #0
 80203a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80203a4:	bf00      	nop
 80203a6:	3714      	adds	r7, #20
 80203a8:	46bd      	mov	sp, r7
 80203aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203ae:	4770      	bx	lr
 80203b0:	fffffc90 	.word	0xfffffc90

080203b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80203b4:	b480      	push	{r7}
 80203b6:	b085      	sub	sp, #20
 80203b8:	af00      	add	r7, sp, #0
 80203ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80203bc:	687b      	ldr	r3, [r7, #4]
 80203be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80203c0:	095b      	lsrs	r3, r3, #5
 80203c2:	3301      	adds	r3, #1
 80203c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	68db      	ldr	r3, [r3, #12]
 80203ca:	3301      	adds	r3, #1
 80203cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80203ce:	68bb      	ldr	r3, [r7, #8]
 80203d0:	3307      	adds	r3, #7
 80203d2:	08db      	lsrs	r3, r3, #3
 80203d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80203d6:	68bb      	ldr	r3, [r7, #8]
 80203d8:	68fa      	ldr	r2, [r7, #12]
 80203da:	fb02 f303 	mul.w	r3, r2, r3
}
 80203de:	4618      	mov	r0, r3
 80203e0:	3714      	adds	r7, #20
 80203e2:	46bd      	mov	sp, r7
 80203e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203e8:	4770      	bx	lr

080203ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80203ea:	b580      	push	{r7, lr}
 80203ec:	b082      	sub	sp, #8
 80203ee:	af00      	add	r7, sp, #0
 80203f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	d101      	bne.n	80203fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80203f8:	2301      	movs	r3, #1
 80203fa:	e049      	b.n	8020490 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8020402:	b2db      	uxtb	r3, r3
 8020404:	2b00      	cmp	r3, #0
 8020406:	d106      	bne.n	8020416 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	2200      	movs	r2, #0
 802040c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8020410:	6878      	ldr	r0, [r7, #4]
 8020412:	f7e2 fb2b 	bl	8002a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020416:	687b      	ldr	r3, [r7, #4]
 8020418:	2202      	movs	r2, #2
 802041a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802041e:	687b      	ldr	r3, [r7, #4]
 8020420:	681a      	ldr	r2, [r3, #0]
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	3304      	adds	r3, #4
 8020426:	4619      	mov	r1, r3
 8020428:	4610      	mov	r0, r2
 802042a:	f000 fb1b 	bl	8020a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	2201      	movs	r2, #1
 8020432:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020436:	687b      	ldr	r3, [r7, #4]
 8020438:	2201      	movs	r2, #1
 802043a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 802043e:	687b      	ldr	r3, [r7, #4]
 8020440:	2201      	movs	r2, #1
 8020442:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	2201      	movs	r2, #1
 802044a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 802044e:	687b      	ldr	r3, [r7, #4]
 8020450:	2201      	movs	r2, #1
 8020452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	2201      	movs	r2, #1
 802045a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	2201      	movs	r2, #1
 8020462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	2201      	movs	r2, #1
 802046a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	2201      	movs	r2, #1
 8020472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	2201      	movs	r2, #1
 802047a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	2201      	movs	r2, #1
 8020482:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020486:	687b      	ldr	r3, [r7, #4]
 8020488:	2201      	movs	r2, #1
 802048a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 802048e:	2300      	movs	r3, #0
}
 8020490:	4618      	mov	r0, r3
 8020492:	3708      	adds	r7, #8
 8020494:	46bd      	mov	sp, r7
 8020496:	bd80      	pop	{r7, pc}

08020498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8020498:	b480      	push	{r7}
 802049a:	b085      	sub	sp, #20
 802049c:	af00      	add	r7, sp, #0
 802049e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80204a6:	b2db      	uxtb	r3, r3
 80204a8:	2b01      	cmp	r3, #1
 80204aa:	d001      	beq.n	80204b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80204ac:	2301      	movs	r3, #1
 80204ae:	e054      	b.n	802055a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	2202      	movs	r2, #2
 80204b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80204b8:	687b      	ldr	r3, [r7, #4]
 80204ba:	681b      	ldr	r3, [r3, #0]
 80204bc:	68da      	ldr	r2, [r3, #12]
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	681b      	ldr	r3, [r3, #0]
 80204c2:	f042 0201 	orr.w	r2, r2, #1
 80204c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	681b      	ldr	r3, [r3, #0]
 80204cc:	4a26      	ldr	r2, [pc, #152]	@ (8020568 <HAL_TIM_Base_Start_IT+0xd0>)
 80204ce:	4293      	cmp	r3, r2
 80204d0:	d022      	beq.n	8020518 <HAL_TIM_Base_Start_IT+0x80>
 80204d2:	687b      	ldr	r3, [r7, #4]
 80204d4:	681b      	ldr	r3, [r3, #0]
 80204d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80204da:	d01d      	beq.n	8020518 <HAL_TIM_Base_Start_IT+0x80>
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	681b      	ldr	r3, [r3, #0]
 80204e0:	4a22      	ldr	r2, [pc, #136]	@ (802056c <HAL_TIM_Base_Start_IT+0xd4>)
 80204e2:	4293      	cmp	r3, r2
 80204e4:	d018      	beq.n	8020518 <HAL_TIM_Base_Start_IT+0x80>
 80204e6:	687b      	ldr	r3, [r7, #4]
 80204e8:	681b      	ldr	r3, [r3, #0]
 80204ea:	4a21      	ldr	r2, [pc, #132]	@ (8020570 <HAL_TIM_Base_Start_IT+0xd8>)
 80204ec:	4293      	cmp	r3, r2
 80204ee:	d013      	beq.n	8020518 <HAL_TIM_Base_Start_IT+0x80>
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	681b      	ldr	r3, [r3, #0]
 80204f4:	4a1f      	ldr	r2, [pc, #124]	@ (8020574 <HAL_TIM_Base_Start_IT+0xdc>)
 80204f6:	4293      	cmp	r3, r2
 80204f8:	d00e      	beq.n	8020518 <HAL_TIM_Base_Start_IT+0x80>
 80204fa:	687b      	ldr	r3, [r7, #4]
 80204fc:	681b      	ldr	r3, [r3, #0]
 80204fe:	4a1e      	ldr	r2, [pc, #120]	@ (8020578 <HAL_TIM_Base_Start_IT+0xe0>)
 8020500:	4293      	cmp	r3, r2
 8020502:	d009      	beq.n	8020518 <HAL_TIM_Base_Start_IT+0x80>
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	681b      	ldr	r3, [r3, #0]
 8020508:	4a1c      	ldr	r2, [pc, #112]	@ (802057c <HAL_TIM_Base_Start_IT+0xe4>)
 802050a:	4293      	cmp	r3, r2
 802050c:	d004      	beq.n	8020518 <HAL_TIM_Base_Start_IT+0x80>
 802050e:	687b      	ldr	r3, [r7, #4]
 8020510:	681b      	ldr	r3, [r3, #0]
 8020512:	4a1b      	ldr	r2, [pc, #108]	@ (8020580 <HAL_TIM_Base_Start_IT+0xe8>)
 8020514:	4293      	cmp	r3, r2
 8020516:	d115      	bne.n	8020544 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	681b      	ldr	r3, [r3, #0]
 802051c:	689a      	ldr	r2, [r3, #8]
 802051e:	4b19      	ldr	r3, [pc, #100]	@ (8020584 <HAL_TIM_Base_Start_IT+0xec>)
 8020520:	4013      	ands	r3, r2
 8020522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020524:	68fb      	ldr	r3, [r7, #12]
 8020526:	2b06      	cmp	r3, #6
 8020528:	d015      	beq.n	8020556 <HAL_TIM_Base_Start_IT+0xbe>
 802052a:	68fb      	ldr	r3, [r7, #12]
 802052c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020530:	d011      	beq.n	8020556 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8020532:	687b      	ldr	r3, [r7, #4]
 8020534:	681b      	ldr	r3, [r3, #0]
 8020536:	681a      	ldr	r2, [r3, #0]
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	681b      	ldr	r3, [r3, #0]
 802053c:	f042 0201 	orr.w	r2, r2, #1
 8020540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020542:	e008      	b.n	8020556 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	681b      	ldr	r3, [r3, #0]
 8020548:	681a      	ldr	r2, [r3, #0]
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	681b      	ldr	r3, [r3, #0]
 802054e:	f042 0201 	orr.w	r2, r2, #1
 8020552:	601a      	str	r2, [r3, #0]
 8020554:	e000      	b.n	8020558 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8020558:	2300      	movs	r3, #0
}
 802055a:	4618      	mov	r0, r3
 802055c:	3714      	adds	r7, #20
 802055e:	46bd      	mov	sp, r7
 8020560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020564:	4770      	bx	lr
 8020566:	bf00      	nop
 8020568:	40010000 	.word	0x40010000
 802056c:	40000400 	.word	0x40000400
 8020570:	40000800 	.word	0x40000800
 8020574:	40000c00 	.word	0x40000c00
 8020578:	40010400 	.word	0x40010400
 802057c:	40001800 	.word	0x40001800
 8020580:	40014000 	.word	0x40014000
 8020584:	00010007 	.word	0x00010007

08020588 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8020588:	b580      	push	{r7, lr}
 802058a:	b082      	sub	sp, #8
 802058c:	af00      	add	r7, sp, #0
 802058e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020590:	687b      	ldr	r3, [r7, #4]
 8020592:	2b00      	cmp	r3, #0
 8020594:	d101      	bne.n	802059a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8020596:	2301      	movs	r3, #1
 8020598:	e049      	b.n	802062e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80205a0:	b2db      	uxtb	r3, r3
 80205a2:	2b00      	cmp	r3, #0
 80205a4:	d106      	bne.n	80205b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80205a6:	687b      	ldr	r3, [r7, #4]
 80205a8:	2200      	movs	r2, #0
 80205aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80205ae:	6878      	ldr	r0, [r7, #4]
 80205b0:	f000 f841 	bl	8020636 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80205b4:	687b      	ldr	r3, [r7, #4]
 80205b6:	2202      	movs	r2, #2
 80205b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	681a      	ldr	r2, [r3, #0]
 80205c0:	687b      	ldr	r3, [r7, #4]
 80205c2:	3304      	adds	r3, #4
 80205c4:	4619      	mov	r1, r3
 80205c6:	4610      	mov	r0, r2
 80205c8:	f000 fa4c 	bl	8020a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	2201      	movs	r2, #1
 80205d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	2201      	movs	r2, #1
 80205d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80205dc:	687b      	ldr	r3, [r7, #4]
 80205de:	2201      	movs	r2, #1
 80205e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80205e4:	687b      	ldr	r3, [r7, #4]
 80205e6:	2201      	movs	r2, #1
 80205e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	2201      	movs	r2, #1
 80205f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80205f4:	687b      	ldr	r3, [r7, #4]
 80205f6:	2201      	movs	r2, #1
 80205f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80205fc:	687b      	ldr	r3, [r7, #4]
 80205fe:	2201      	movs	r2, #1
 8020600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020604:	687b      	ldr	r3, [r7, #4]
 8020606:	2201      	movs	r2, #1
 8020608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 802060c:	687b      	ldr	r3, [r7, #4]
 802060e:	2201      	movs	r2, #1
 8020610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	2201      	movs	r2, #1
 8020618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	2201      	movs	r2, #1
 8020620:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	2201      	movs	r2, #1
 8020628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 802062c:	2300      	movs	r3, #0
}
 802062e:	4618      	mov	r0, r3
 8020630:	3708      	adds	r7, #8
 8020632:	46bd      	mov	sp, r7
 8020634:	bd80      	pop	{r7, pc}

08020636 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8020636:	b480      	push	{r7}
 8020638:	b083      	sub	sp, #12
 802063a:	af00      	add	r7, sp, #0
 802063c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 802063e:	bf00      	nop
 8020640:	370c      	adds	r7, #12
 8020642:	46bd      	mov	sp, r7
 8020644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020648:	4770      	bx	lr
	...

0802064c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802064c:	b580      	push	{r7, lr}
 802064e:	b086      	sub	sp, #24
 8020650:	af00      	add	r7, sp, #0
 8020652:	60f8      	str	r0, [r7, #12]
 8020654:	60b9      	str	r1, [r7, #8]
 8020656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8020658:	2300      	movs	r3, #0
 802065a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 802065c:	68fb      	ldr	r3, [r7, #12]
 802065e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8020662:	2b01      	cmp	r3, #1
 8020664:	d101      	bne.n	802066a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8020666:	2302      	movs	r3, #2
 8020668:	e0ff      	b.n	802086a <HAL_TIM_PWM_ConfigChannel+0x21e>
 802066a:	68fb      	ldr	r3, [r7, #12]
 802066c:	2201      	movs	r2, #1
 802066e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8020672:	687b      	ldr	r3, [r7, #4]
 8020674:	2b14      	cmp	r3, #20
 8020676:	f200 80f0 	bhi.w	802085a <HAL_TIM_PWM_ConfigChannel+0x20e>
 802067a:	a201      	add	r2, pc, #4	@ (adr r2, 8020680 <HAL_TIM_PWM_ConfigChannel+0x34>)
 802067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020680:	080206d5 	.word	0x080206d5
 8020684:	0802085b 	.word	0x0802085b
 8020688:	0802085b 	.word	0x0802085b
 802068c:	0802085b 	.word	0x0802085b
 8020690:	08020715 	.word	0x08020715
 8020694:	0802085b 	.word	0x0802085b
 8020698:	0802085b 	.word	0x0802085b
 802069c:	0802085b 	.word	0x0802085b
 80206a0:	08020757 	.word	0x08020757
 80206a4:	0802085b 	.word	0x0802085b
 80206a8:	0802085b 	.word	0x0802085b
 80206ac:	0802085b 	.word	0x0802085b
 80206b0:	08020797 	.word	0x08020797
 80206b4:	0802085b 	.word	0x0802085b
 80206b8:	0802085b 	.word	0x0802085b
 80206bc:	0802085b 	.word	0x0802085b
 80206c0:	080207d9 	.word	0x080207d9
 80206c4:	0802085b 	.word	0x0802085b
 80206c8:	0802085b 	.word	0x0802085b
 80206cc:	0802085b 	.word	0x0802085b
 80206d0:	08020819 	.word	0x08020819
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80206d4:	68fb      	ldr	r3, [r7, #12]
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	68b9      	ldr	r1, [r7, #8]
 80206da:	4618      	mov	r0, r3
 80206dc:	f000 fa68 	bl	8020bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80206e0:	68fb      	ldr	r3, [r7, #12]
 80206e2:	681b      	ldr	r3, [r3, #0]
 80206e4:	699a      	ldr	r2, [r3, #24]
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	681b      	ldr	r3, [r3, #0]
 80206ea:	f042 0208 	orr.w	r2, r2, #8
 80206ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80206f0:	68fb      	ldr	r3, [r7, #12]
 80206f2:	681b      	ldr	r3, [r3, #0]
 80206f4:	699a      	ldr	r2, [r3, #24]
 80206f6:	68fb      	ldr	r3, [r7, #12]
 80206f8:	681b      	ldr	r3, [r3, #0]
 80206fa:	f022 0204 	bic.w	r2, r2, #4
 80206fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020700:	68fb      	ldr	r3, [r7, #12]
 8020702:	681b      	ldr	r3, [r3, #0]
 8020704:	6999      	ldr	r1, [r3, #24]
 8020706:	68bb      	ldr	r3, [r7, #8]
 8020708:	691a      	ldr	r2, [r3, #16]
 802070a:	68fb      	ldr	r3, [r7, #12]
 802070c:	681b      	ldr	r3, [r3, #0]
 802070e:	430a      	orrs	r2, r1
 8020710:	619a      	str	r2, [r3, #24]
      break;
 8020712:	e0a5      	b.n	8020860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8020714:	68fb      	ldr	r3, [r7, #12]
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	68b9      	ldr	r1, [r7, #8]
 802071a:	4618      	mov	r0, r3
 802071c:	f000 fad8 	bl	8020cd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8020720:	68fb      	ldr	r3, [r7, #12]
 8020722:	681b      	ldr	r3, [r3, #0]
 8020724:	699a      	ldr	r2, [r3, #24]
 8020726:	68fb      	ldr	r3, [r7, #12]
 8020728:	681b      	ldr	r3, [r3, #0]
 802072a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 802072e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8020730:	68fb      	ldr	r3, [r7, #12]
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	699a      	ldr	r2, [r3, #24]
 8020736:	68fb      	ldr	r3, [r7, #12]
 8020738:	681b      	ldr	r3, [r3, #0]
 802073a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802073e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8020740:	68fb      	ldr	r3, [r7, #12]
 8020742:	681b      	ldr	r3, [r3, #0]
 8020744:	6999      	ldr	r1, [r3, #24]
 8020746:	68bb      	ldr	r3, [r7, #8]
 8020748:	691b      	ldr	r3, [r3, #16]
 802074a:	021a      	lsls	r2, r3, #8
 802074c:	68fb      	ldr	r3, [r7, #12]
 802074e:	681b      	ldr	r3, [r3, #0]
 8020750:	430a      	orrs	r2, r1
 8020752:	619a      	str	r2, [r3, #24]
      break;
 8020754:	e084      	b.n	8020860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8020756:	68fb      	ldr	r3, [r7, #12]
 8020758:	681b      	ldr	r3, [r3, #0]
 802075a:	68b9      	ldr	r1, [r7, #8]
 802075c:	4618      	mov	r0, r3
 802075e:	f000 fb41 	bl	8020de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8020762:	68fb      	ldr	r3, [r7, #12]
 8020764:	681b      	ldr	r3, [r3, #0]
 8020766:	69da      	ldr	r2, [r3, #28]
 8020768:	68fb      	ldr	r3, [r7, #12]
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	f042 0208 	orr.w	r2, r2, #8
 8020770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8020772:	68fb      	ldr	r3, [r7, #12]
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	69da      	ldr	r2, [r3, #28]
 8020778:	68fb      	ldr	r3, [r7, #12]
 802077a:	681b      	ldr	r3, [r3, #0]
 802077c:	f022 0204 	bic.w	r2, r2, #4
 8020780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020782:	68fb      	ldr	r3, [r7, #12]
 8020784:	681b      	ldr	r3, [r3, #0]
 8020786:	69d9      	ldr	r1, [r3, #28]
 8020788:	68bb      	ldr	r3, [r7, #8]
 802078a:	691a      	ldr	r2, [r3, #16]
 802078c:	68fb      	ldr	r3, [r7, #12]
 802078e:	681b      	ldr	r3, [r3, #0]
 8020790:	430a      	orrs	r2, r1
 8020792:	61da      	str	r2, [r3, #28]
      break;
 8020794:	e064      	b.n	8020860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8020796:	68fb      	ldr	r3, [r7, #12]
 8020798:	681b      	ldr	r3, [r3, #0]
 802079a:	68b9      	ldr	r1, [r7, #8]
 802079c:	4618      	mov	r0, r3
 802079e:	f000 fba9 	bl	8020ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80207a2:	68fb      	ldr	r3, [r7, #12]
 80207a4:	681b      	ldr	r3, [r3, #0]
 80207a6:	69da      	ldr	r2, [r3, #28]
 80207a8:	68fb      	ldr	r3, [r7, #12]
 80207aa:	681b      	ldr	r3, [r3, #0]
 80207ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80207b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80207b2:	68fb      	ldr	r3, [r7, #12]
 80207b4:	681b      	ldr	r3, [r3, #0]
 80207b6:	69da      	ldr	r2, [r3, #28]
 80207b8:	68fb      	ldr	r3, [r7, #12]
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80207c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80207c2:	68fb      	ldr	r3, [r7, #12]
 80207c4:	681b      	ldr	r3, [r3, #0]
 80207c6:	69d9      	ldr	r1, [r3, #28]
 80207c8:	68bb      	ldr	r3, [r7, #8]
 80207ca:	691b      	ldr	r3, [r3, #16]
 80207cc:	021a      	lsls	r2, r3, #8
 80207ce:	68fb      	ldr	r3, [r7, #12]
 80207d0:	681b      	ldr	r3, [r3, #0]
 80207d2:	430a      	orrs	r2, r1
 80207d4:	61da      	str	r2, [r3, #28]
      break;
 80207d6:	e043      	b.n	8020860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80207d8:	68fb      	ldr	r3, [r7, #12]
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	68b9      	ldr	r1, [r7, #8]
 80207de:	4618      	mov	r0, r3
 80207e0:	f000 fbf2 	bl	8020fc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80207e4:	68fb      	ldr	r3, [r7, #12]
 80207e6:	681b      	ldr	r3, [r3, #0]
 80207e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80207ea:	68fb      	ldr	r3, [r7, #12]
 80207ec:	681b      	ldr	r3, [r3, #0]
 80207ee:	f042 0208 	orr.w	r2, r2, #8
 80207f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80207f4:	68fb      	ldr	r3, [r7, #12]
 80207f6:	681b      	ldr	r3, [r3, #0]
 80207f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80207fa:	68fb      	ldr	r3, [r7, #12]
 80207fc:	681b      	ldr	r3, [r3, #0]
 80207fe:	f022 0204 	bic.w	r2, r2, #4
 8020802:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8020804:	68fb      	ldr	r3, [r7, #12]
 8020806:	681b      	ldr	r3, [r3, #0]
 8020808:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 802080a:	68bb      	ldr	r3, [r7, #8]
 802080c:	691a      	ldr	r2, [r3, #16]
 802080e:	68fb      	ldr	r3, [r7, #12]
 8020810:	681b      	ldr	r3, [r3, #0]
 8020812:	430a      	orrs	r2, r1
 8020814:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8020816:	e023      	b.n	8020860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8020818:	68fb      	ldr	r3, [r7, #12]
 802081a:	681b      	ldr	r3, [r3, #0]
 802081c:	68b9      	ldr	r1, [r7, #8]
 802081e:	4618      	mov	r0, r3
 8020820:	f000 fc36 	bl	8021090 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8020824:	68fb      	ldr	r3, [r7, #12]
 8020826:	681b      	ldr	r3, [r3, #0]
 8020828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802082a:	68fb      	ldr	r3, [r7, #12]
 802082c:	681b      	ldr	r3, [r3, #0]
 802082e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8020832:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8020834:	68fb      	ldr	r3, [r7, #12]
 8020836:	681b      	ldr	r3, [r3, #0]
 8020838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802083a:	68fb      	ldr	r3, [r7, #12]
 802083c:	681b      	ldr	r3, [r3, #0]
 802083e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8020842:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	681b      	ldr	r3, [r3, #0]
 8020848:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 802084a:	68bb      	ldr	r3, [r7, #8]
 802084c:	691b      	ldr	r3, [r3, #16]
 802084e:	021a      	lsls	r2, r3, #8
 8020850:	68fb      	ldr	r3, [r7, #12]
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	430a      	orrs	r2, r1
 8020856:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8020858:	e002      	b.n	8020860 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 802085a:	2301      	movs	r3, #1
 802085c:	75fb      	strb	r3, [r7, #23]
      break;
 802085e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8020860:	68fb      	ldr	r3, [r7, #12]
 8020862:	2200      	movs	r2, #0
 8020864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8020868:	7dfb      	ldrb	r3, [r7, #23]
}
 802086a:	4618      	mov	r0, r3
 802086c:	3718      	adds	r7, #24
 802086e:	46bd      	mov	sp, r7
 8020870:	bd80      	pop	{r7, pc}
 8020872:	bf00      	nop

08020874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8020874:	b580      	push	{r7, lr}
 8020876:	b084      	sub	sp, #16
 8020878:	af00      	add	r7, sp, #0
 802087a:	6078      	str	r0, [r7, #4]
 802087c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802087e:	2300      	movs	r3, #0
 8020880:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020882:	687b      	ldr	r3, [r7, #4]
 8020884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8020888:	2b01      	cmp	r3, #1
 802088a:	d101      	bne.n	8020890 <HAL_TIM_ConfigClockSource+0x1c>
 802088c:	2302      	movs	r3, #2
 802088e:	e0dc      	b.n	8020a4a <HAL_TIM_ConfigClockSource+0x1d6>
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	2201      	movs	r2, #1
 8020894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	2202      	movs	r2, #2
 802089c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	681b      	ldr	r3, [r3, #0]
 80208a4:	689b      	ldr	r3, [r3, #8]
 80208a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80208a8:	68ba      	ldr	r2, [r7, #8]
 80208aa:	4b6a      	ldr	r3, [pc, #424]	@ (8020a54 <HAL_TIM_ConfigClockSource+0x1e0>)
 80208ac:	4013      	ands	r3, r2
 80208ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80208b0:	68bb      	ldr	r3, [r7, #8]
 80208b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80208b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80208b8:	687b      	ldr	r3, [r7, #4]
 80208ba:	681b      	ldr	r3, [r3, #0]
 80208bc:	68ba      	ldr	r2, [r7, #8]
 80208be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80208c0:	683b      	ldr	r3, [r7, #0]
 80208c2:	681b      	ldr	r3, [r3, #0]
 80208c4:	4a64      	ldr	r2, [pc, #400]	@ (8020a58 <HAL_TIM_ConfigClockSource+0x1e4>)
 80208c6:	4293      	cmp	r3, r2
 80208c8:	f000 80a9 	beq.w	8020a1e <HAL_TIM_ConfigClockSource+0x1aa>
 80208cc:	4a62      	ldr	r2, [pc, #392]	@ (8020a58 <HAL_TIM_ConfigClockSource+0x1e4>)
 80208ce:	4293      	cmp	r3, r2
 80208d0:	f200 80ae 	bhi.w	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 80208d4:	4a61      	ldr	r2, [pc, #388]	@ (8020a5c <HAL_TIM_ConfigClockSource+0x1e8>)
 80208d6:	4293      	cmp	r3, r2
 80208d8:	f000 80a1 	beq.w	8020a1e <HAL_TIM_ConfigClockSource+0x1aa>
 80208dc:	4a5f      	ldr	r2, [pc, #380]	@ (8020a5c <HAL_TIM_ConfigClockSource+0x1e8>)
 80208de:	4293      	cmp	r3, r2
 80208e0:	f200 80a6 	bhi.w	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 80208e4:	4a5e      	ldr	r2, [pc, #376]	@ (8020a60 <HAL_TIM_ConfigClockSource+0x1ec>)
 80208e6:	4293      	cmp	r3, r2
 80208e8:	f000 8099 	beq.w	8020a1e <HAL_TIM_ConfigClockSource+0x1aa>
 80208ec:	4a5c      	ldr	r2, [pc, #368]	@ (8020a60 <HAL_TIM_ConfigClockSource+0x1ec>)
 80208ee:	4293      	cmp	r3, r2
 80208f0:	f200 809e 	bhi.w	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 80208f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80208f8:	f000 8091 	beq.w	8020a1e <HAL_TIM_ConfigClockSource+0x1aa>
 80208fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8020900:	f200 8096 	bhi.w	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 8020904:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020908:	f000 8089 	beq.w	8020a1e <HAL_TIM_ConfigClockSource+0x1aa>
 802090c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020910:	f200 808e 	bhi.w	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 8020914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020918:	d03e      	beq.n	8020998 <HAL_TIM_ConfigClockSource+0x124>
 802091a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802091e:	f200 8087 	bhi.w	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 8020922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020926:	f000 8086 	beq.w	8020a36 <HAL_TIM_ConfigClockSource+0x1c2>
 802092a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802092e:	d87f      	bhi.n	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 8020930:	2b70      	cmp	r3, #112	@ 0x70
 8020932:	d01a      	beq.n	802096a <HAL_TIM_ConfigClockSource+0xf6>
 8020934:	2b70      	cmp	r3, #112	@ 0x70
 8020936:	d87b      	bhi.n	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 8020938:	2b60      	cmp	r3, #96	@ 0x60
 802093a:	d050      	beq.n	80209de <HAL_TIM_ConfigClockSource+0x16a>
 802093c:	2b60      	cmp	r3, #96	@ 0x60
 802093e:	d877      	bhi.n	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 8020940:	2b50      	cmp	r3, #80	@ 0x50
 8020942:	d03c      	beq.n	80209be <HAL_TIM_ConfigClockSource+0x14a>
 8020944:	2b50      	cmp	r3, #80	@ 0x50
 8020946:	d873      	bhi.n	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 8020948:	2b40      	cmp	r3, #64	@ 0x40
 802094a:	d058      	beq.n	80209fe <HAL_TIM_ConfigClockSource+0x18a>
 802094c:	2b40      	cmp	r3, #64	@ 0x40
 802094e:	d86f      	bhi.n	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 8020950:	2b30      	cmp	r3, #48	@ 0x30
 8020952:	d064      	beq.n	8020a1e <HAL_TIM_ConfigClockSource+0x1aa>
 8020954:	2b30      	cmp	r3, #48	@ 0x30
 8020956:	d86b      	bhi.n	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 8020958:	2b20      	cmp	r3, #32
 802095a:	d060      	beq.n	8020a1e <HAL_TIM_ConfigClockSource+0x1aa>
 802095c:	2b20      	cmp	r3, #32
 802095e:	d867      	bhi.n	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
 8020960:	2b00      	cmp	r3, #0
 8020962:	d05c      	beq.n	8020a1e <HAL_TIM_ConfigClockSource+0x1aa>
 8020964:	2b10      	cmp	r3, #16
 8020966:	d05a      	beq.n	8020a1e <HAL_TIM_ConfigClockSource+0x1aa>
 8020968:	e062      	b.n	8020a30 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802096a:	687b      	ldr	r3, [r7, #4]
 802096c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 802096e:	683b      	ldr	r3, [r7, #0]
 8020970:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8020972:	683b      	ldr	r3, [r7, #0]
 8020974:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8020976:	683b      	ldr	r3, [r7, #0]
 8020978:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 802097a:	f000 fc6d 	bl	8021258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 802097e:	687b      	ldr	r3, [r7, #4]
 8020980:	681b      	ldr	r3, [r3, #0]
 8020982:	689b      	ldr	r3, [r3, #8]
 8020984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8020986:	68bb      	ldr	r3, [r7, #8]
 8020988:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 802098c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	681b      	ldr	r3, [r3, #0]
 8020992:	68ba      	ldr	r2, [r7, #8]
 8020994:	609a      	str	r2, [r3, #8]
      break;
 8020996:	e04f      	b.n	8020a38 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 802099c:	683b      	ldr	r3, [r7, #0]
 802099e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80209a0:	683b      	ldr	r3, [r7, #0]
 80209a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80209a4:	683b      	ldr	r3, [r7, #0]
 80209a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80209a8:	f000 fc56 	bl	8021258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80209ac:	687b      	ldr	r3, [r7, #4]
 80209ae:	681b      	ldr	r3, [r3, #0]
 80209b0:	689a      	ldr	r2, [r3, #8]
 80209b2:	687b      	ldr	r3, [r7, #4]
 80209b4:	681b      	ldr	r3, [r3, #0]
 80209b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80209ba:	609a      	str	r2, [r3, #8]
      break;
 80209bc:	e03c      	b.n	8020a38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80209c2:	683b      	ldr	r3, [r7, #0]
 80209c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80209c6:	683b      	ldr	r3, [r7, #0]
 80209c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80209ca:	461a      	mov	r2, r3
 80209cc:	f000 fbc6 	bl	802115c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80209d0:	687b      	ldr	r3, [r7, #4]
 80209d2:	681b      	ldr	r3, [r3, #0]
 80209d4:	2150      	movs	r1, #80	@ 0x50
 80209d6:	4618      	mov	r0, r3
 80209d8:	f000 fc20 	bl	802121c <TIM_ITRx_SetConfig>
      break;
 80209dc:	e02c      	b.n	8020a38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80209de:	687b      	ldr	r3, [r7, #4]
 80209e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80209e2:	683b      	ldr	r3, [r7, #0]
 80209e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80209e6:	683b      	ldr	r3, [r7, #0]
 80209e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80209ea:	461a      	mov	r2, r3
 80209ec:	f000 fbe5 	bl	80211ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80209f0:	687b      	ldr	r3, [r7, #4]
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	2160      	movs	r1, #96	@ 0x60
 80209f6:	4618      	mov	r0, r3
 80209f8:	f000 fc10 	bl	802121c <TIM_ITRx_SetConfig>
      break;
 80209fc:	e01c      	b.n	8020a38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020a02:	683b      	ldr	r3, [r7, #0]
 8020a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8020a06:	683b      	ldr	r3, [r7, #0]
 8020a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8020a0a:	461a      	mov	r2, r3
 8020a0c:	f000 fba6 	bl	802115c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8020a10:	687b      	ldr	r3, [r7, #4]
 8020a12:	681b      	ldr	r3, [r3, #0]
 8020a14:	2140      	movs	r1, #64	@ 0x40
 8020a16:	4618      	mov	r0, r3
 8020a18:	f000 fc00 	bl	802121c <TIM_ITRx_SetConfig>
      break;
 8020a1c:	e00c      	b.n	8020a38 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	681a      	ldr	r2, [r3, #0]
 8020a22:	683b      	ldr	r3, [r7, #0]
 8020a24:	681b      	ldr	r3, [r3, #0]
 8020a26:	4619      	mov	r1, r3
 8020a28:	4610      	mov	r0, r2
 8020a2a:	f000 fbf7 	bl	802121c <TIM_ITRx_SetConfig>
      break;
 8020a2e:	e003      	b.n	8020a38 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8020a30:	2301      	movs	r3, #1
 8020a32:	73fb      	strb	r3, [r7, #15]
      break;
 8020a34:	e000      	b.n	8020a38 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8020a36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8020a38:	687b      	ldr	r3, [r7, #4]
 8020a3a:	2201      	movs	r2, #1
 8020a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8020a40:	687b      	ldr	r3, [r7, #4]
 8020a42:	2200      	movs	r2, #0
 8020a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8020a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8020a4a:	4618      	mov	r0, r3
 8020a4c:	3710      	adds	r7, #16
 8020a4e:	46bd      	mov	sp, r7
 8020a50:	bd80      	pop	{r7, pc}
 8020a52:	bf00      	nop
 8020a54:	ffceff88 	.word	0xffceff88
 8020a58:	00100040 	.word	0x00100040
 8020a5c:	00100030 	.word	0x00100030
 8020a60:	00100020 	.word	0x00100020

08020a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8020a64:	b480      	push	{r7}
 8020a66:	b085      	sub	sp, #20
 8020a68:	af00      	add	r7, sp, #0
 8020a6a:	6078      	str	r0, [r7, #4]
 8020a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8020a6e:	687b      	ldr	r3, [r7, #4]
 8020a70:	681b      	ldr	r3, [r3, #0]
 8020a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020a74:	687b      	ldr	r3, [r7, #4]
 8020a76:	4a46      	ldr	r2, [pc, #280]	@ (8020b90 <TIM_Base_SetConfig+0x12c>)
 8020a78:	4293      	cmp	r3, r2
 8020a7a:	d013      	beq.n	8020aa4 <TIM_Base_SetConfig+0x40>
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020a82:	d00f      	beq.n	8020aa4 <TIM_Base_SetConfig+0x40>
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	4a43      	ldr	r2, [pc, #268]	@ (8020b94 <TIM_Base_SetConfig+0x130>)
 8020a88:	4293      	cmp	r3, r2
 8020a8a:	d00b      	beq.n	8020aa4 <TIM_Base_SetConfig+0x40>
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	4a42      	ldr	r2, [pc, #264]	@ (8020b98 <TIM_Base_SetConfig+0x134>)
 8020a90:	4293      	cmp	r3, r2
 8020a92:	d007      	beq.n	8020aa4 <TIM_Base_SetConfig+0x40>
 8020a94:	687b      	ldr	r3, [r7, #4]
 8020a96:	4a41      	ldr	r2, [pc, #260]	@ (8020b9c <TIM_Base_SetConfig+0x138>)
 8020a98:	4293      	cmp	r3, r2
 8020a9a:	d003      	beq.n	8020aa4 <TIM_Base_SetConfig+0x40>
 8020a9c:	687b      	ldr	r3, [r7, #4]
 8020a9e:	4a40      	ldr	r2, [pc, #256]	@ (8020ba0 <TIM_Base_SetConfig+0x13c>)
 8020aa0:	4293      	cmp	r3, r2
 8020aa2:	d108      	bne.n	8020ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020aa4:	68fb      	ldr	r3, [r7, #12]
 8020aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8020aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020aac:	683b      	ldr	r3, [r7, #0]
 8020aae:	685b      	ldr	r3, [r3, #4]
 8020ab0:	68fa      	ldr	r2, [r7, #12]
 8020ab2:	4313      	orrs	r3, r2
 8020ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8020ab6:	687b      	ldr	r3, [r7, #4]
 8020ab8:	4a35      	ldr	r2, [pc, #212]	@ (8020b90 <TIM_Base_SetConfig+0x12c>)
 8020aba:	4293      	cmp	r3, r2
 8020abc:	d01f      	beq.n	8020afe <TIM_Base_SetConfig+0x9a>
 8020abe:	687b      	ldr	r3, [r7, #4]
 8020ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020ac4:	d01b      	beq.n	8020afe <TIM_Base_SetConfig+0x9a>
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	4a32      	ldr	r2, [pc, #200]	@ (8020b94 <TIM_Base_SetConfig+0x130>)
 8020aca:	4293      	cmp	r3, r2
 8020acc:	d017      	beq.n	8020afe <TIM_Base_SetConfig+0x9a>
 8020ace:	687b      	ldr	r3, [r7, #4]
 8020ad0:	4a31      	ldr	r2, [pc, #196]	@ (8020b98 <TIM_Base_SetConfig+0x134>)
 8020ad2:	4293      	cmp	r3, r2
 8020ad4:	d013      	beq.n	8020afe <TIM_Base_SetConfig+0x9a>
 8020ad6:	687b      	ldr	r3, [r7, #4]
 8020ad8:	4a30      	ldr	r2, [pc, #192]	@ (8020b9c <TIM_Base_SetConfig+0x138>)
 8020ada:	4293      	cmp	r3, r2
 8020adc:	d00f      	beq.n	8020afe <TIM_Base_SetConfig+0x9a>
 8020ade:	687b      	ldr	r3, [r7, #4]
 8020ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8020ba0 <TIM_Base_SetConfig+0x13c>)
 8020ae2:	4293      	cmp	r3, r2
 8020ae4:	d00b      	beq.n	8020afe <TIM_Base_SetConfig+0x9a>
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8020ba4 <TIM_Base_SetConfig+0x140>)
 8020aea:	4293      	cmp	r3, r2
 8020aec:	d007      	beq.n	8020afe <TIM_Base_SetConfig+0x9a>
 8020aee:	687b      	ldr	r3, [r7, #4]
 8020af0:	4a2d      	ldr	r2, [pc, #180]	@ (8020ba8 <TIM_Base_SetConfig+0x144>)
 8020af2:	4293      	cmp	r3, r2
 8020af4:	d003      	beq.n	8020afe <TIM_Base_SetConfig+0x9a>
 8020af6:	687b      	ldr	r3, [r7, #4]
 8020af8:	4a2c      	ldr	r2, [pc, #176]	@ (8020bac <TIM_Base_SetConfig+0x148>)
 8020afa:	4293      	cmp	r3, r2
 8020afc:	d108      	bne.n	8020b10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8020afe:	68fb      	ldr	r3, [r7, #12]
 8020b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8020b06:	683b      	ldr	r3, [r7, #0]
 8020b08:	68db      	ldr	r3, [r3, #12]
 8020b0a:	68fa      	ldr	r2, [r7, #12]
 8020b0c:	4313      	orrs	r3, r2
 8020b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020b10:	68fb      	ldr	r3, [r7, #12]
 8020b12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8020b16:	683b      	ldr	r3, [r7, #0]
 8020b18:	695b      	ldr	r3, [r3, #20]
 8020b1a:	4313      	orrs	r3, r2
 8020b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8020b1e:	687b      	ldr	r3, [r7, #4]
 8020b20:	68fa      	ldr	r2, [r7, #12]
 8020b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020b24:	683b      	ldr	r3, [r7, #0]
 8020b26:	689a      	ldr	r2, [r3, #8]
 8020b28:	687b      	ldr	r3, [r7, #4]
 8020b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8020b2c:	683b      	ldr	r3, [r7, #0]
 8020b2e:	681a      	ldr	r2, [r3, #0]
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8020b34:	687b      	ldr	r3, [r7, #4]
 8020b36:	4a16      	ldr	r2, [pc, #88]	@ (8020b90 <TIM_Base_SetConfig+0x12c>)
 8020b38:	4293      	cmp	r3, r2
 8020b3a:	d00f      	beq.n	8020b5c <TIM_Base_SetConfig+0xf8>
 8020b3c:	687b      	ldr	r3, [r7, #4]
 8020b3e:	4a18      	ldr	r2, [pc, #96]	@ (8020ba0 <TIM_Base_SetConfig+0x13c>)
 8020b40:	4293      	cmp	r3, r2
 8020b42:	d00b      	beq.n	8020b5c <TIM_Base_SetConfig+0xf8>
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	4a17      	ldr	r2, [pc, #92]	@ (8020ba4 <TIM_Base_SetConfig+0x140>)
 8020b48:	4293      	cmp	r3, r2
 8020b4a:	d007      	beq.n	8020b5c <TIM_Base_SetConfig+0xf8>
 8020b4c:	687b      	ldr	r3, [r7, #4]
 8020b4e:	4a16      	ldr	r2, [pc, #88]	@ (8020ba8 <TIM_Base_SetConfig+0x144>)
 8020b50:	4293      	cmp	r3, r2
 8020b52:	d003      	beq.n	8020b5c <TIM_Base_SetConfig+0xf8>
 8020b54:	687b      	ldr	r3, [r7, #4]
 8020b56:	4a15      	ldr	r2, [pc, #84]	@ (8020bac <TIM_Base_SetConfig+0x148>)
 8020b58:	4293      	cmp	r3, r2
 8020b5a:	d103      	bne.n	8020b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020b5c:	683b      	ldr	r3, [r7, #0]
 8020b5e:	691a      	ldr	r2, [r3, #16]
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	2201      	movs	r2, #1
 8020b68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	691b      	ldr	r3, [r3, #16]
 8020b6e:	f003 0301 	and.w	r3, r3, #1
 8020b72:	2b01      	cmp	r3, #1
 8020b74:	d105      	bne.n	8020b82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	691b      	ldr	r3, [r3, #16]
 8020b7a:	f023 0201 	bic.w	r2, r3, #1
 8020b7e:	687b      	ldr	r3, [r7, #4]
 8020b80:	611a      	str	r2, [r3, #16]
  }
}
 8020b82:	bf00      	nop
 8020b84:	3714      	adds	r7, #20
 8020b86:	46bd      	mov	sp, r7
 8020b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b8c:	4770      	bx	lr
 8020b8e:	bf00      	nop
 8020b90:	40010000 	.word	0x40010000
 8020b94:	40000400 	.word	0x40000400
 8020b98:	40000800 	.word	0x40000800
 8020b9c:	40000c00 	.word	0x40000c00
 8020ba0:	40010400 	.word	0x40010400
 8020ba4:	40014000 	.word	0x40014000
 8020ba8:	40014400 	.word	0x40014400
 8020bac:	40014800 	.word	0x40014800

08020bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020bb0:	b480      	push	{r7}
 8020bb2:	b087      	sub	sp, #28
 8020bb4:	af00      	add	r7, sp, #0
 8020bb6:	6078      	str	r0, [r7, #4]
 8020bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	6a1b      	ldr	r3, [r3, #32]
 8020bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	6a1b      	ldr	r3, [r3, #32]
 8020bc4:	f023 0201 	bic.w	r2, r3, #1
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020bcc:	687b      	ldr	r3, [r7, #4]
 8020bce:	685b      	ldr	r3, [r3, #4]
 8020bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020bd2:	687b      	ldr	r3, [r7, #4]
 8020bd4:	699b      	ldr	r3, [r3, #24]
 8020bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020bd8:	68fa      	ldr	r2, [r7, #12]
 8020bda:	4b37      	ldr	r3, [pc, #220]	@ (8020cb8 <TIM_OC1_SetConfig+0x108>)
 8020bdc:	4013      	ands	r3, r2
 8020bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020be0:	68fb      	ldr	r3, [r7, #12]
 8020be2:	f023 0303 	bic.w	r3, r3, #3
 8020be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020be8:	683b      	ldr	r3, [r7, #0]
 8020bea:	681b      	ldr	r3, [r3, #0]
 8020bec:	68fa      	ldr	r2, [r7, #12]
 8020bee:	4313      	orrs	r3, r2
 8020bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020bf2:	697b      	ldr	r3, [r7, #20]
 8020bf4:	f023 0302 	bic.w	r3, r3, #2
 8020bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8020bfa:	683b      	ldr	r3, [r7, #0]
 8020bfc:	689b      	ldr	r3, [r3, #8]
 8020bfe:	697a      	ldr	r2, [r7, #20]
 8020c00:	4313      	orrs	r3, r2
 8020c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8020c04:	687b      	ldr	r3, [r7, #4]
 8020c06:	4a2d      	ldr	r2, [pc, #180]	@ (8020cbc <TIM_OC1_SetConfig+0x10c>)
 8020c08:	4293      	cmp	r3, r2
 8020c0a:	d00f      	beq.n	8020c2c <TIM_OC1_SetConfig+0x7c>
 8020c0c:	687b      	ldr	r3, [r7, #4]
 8020c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8020cc0 <TIM_OC1_SetConfig+0x110>)
 8020c10:	4293      	cmp	r3, r2
 8020c12:	d00b      	beq.n	8020c2c <TIM_OC1_SetConfig+0x7c>
 8020c14:	687b      	ldr	r3, [r7, #4]
 8020c16:	4a2b      	ldr	r2, [pc, #172]	@ (8020cc4 <TIM_OC1_SetConfig+0x114>)
 8020c18:	4293      	cmp	r3, r2
 8020c1a:	d007      	beq.n	8020c2c <TIM_OC1_SetConfig+0x7c>
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8020cc8 <TIM_OC1_SetConfig+0x118>)
 8020c20:	4293      	cmp	r3, r2
 8020c22:	d003      	beq.n	8020c2c <TIM_OC1_SetConfig+0x7c>
 8020c24:	687b      	ldr	r3, [r7, #4]
 8020c26:	4a29      	ldr	r2, [pc, #164]	@ (8020ccc <TIM_OC1_SetConfig+0x11c>)
 8020c28:	4293      	cmp	r3, r2
 8020c2a:	d10c      	bne.n	8020c46 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8020c2c:	697b      	ldr	r3, [r7, #20]
 8020c2e:	f023 0308 	bic.w	r3, r3, #8
 8020c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020c34:	683b      	ldr	r3, [r7, #0]
 8020c36:	68db      	ldr	r3, [r3, #12]
 8020c38:	697a      	ldr	r2, [r7, #20]
 8020c3a:	4313      	orrs	r3, r2
 8020c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8020c3e:	697b      	ldr	r3, [r7, #20]
 8020c40:	f023 0304 	bic.w	r3, r3, #4
 8020c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020c46:	687b      	ldr	r3, [r7, #4]
 8020c48:	4a1c      	ldr	r2, [pc, #112]	@ (8020cbc <TIM_OC1_SetConfig+0x10c>)
 8020c4a:	4293      	cmp	r3, r2
 8020c4c:	d00f      	beq.n	8020c6e <TIM_OC1_SetConfig+0xbe>
 8020c4e:	687b      	ldr	r3, [r7, #4]
 8020c50:	4a1b      	ldr	r2, [pc, #108]	@ (8020cc0 <TIM_OC1_SetConfig+0x110>)
 8020c52:	4293      	cmp	r3, r2
 8020c54:	d00b      	beq.n	8020c6e <TIM_OC1_SetConfig+0xbe>
 8020c56:	687b      	ldr	r3, [r7, #4]
 8020c58:	4a1a      	ldr	r2, [pc, #104]	@ (8020cc4 <TIM_OC1_SetConfig+0x114>)
 8020c5a:	4293      	cmp	r3, r2
 8020c5c:	d007      	beq.n	8020c6e <TIM_OC1_SetConfig+0xbe>
 8020c5e:	687b      	ldr	r3, [r7, #4]
 8020c60:	4a19      	ldr	r2, [pc, #100]	@ (8020cc8 <TIM_OC1_SetConfig+0x118>)
 8020c62:	4293      	cmp	r3, r2
 8020c64:	d003      	beq.n	8020c6e <TIM_OC1_SetConfig+0xbe>
 8020c66:	687b      	ldr	r3, [r7, #4]
 8020c68:	4a18      	ldr	r2, [pc, #96]	@ (8020ccc <TIM_OC1_SetConfig+0x11c>)
 8020c6a:	4293      	cmp	r3, r2
 8020c6c:	d111      	bne.n	8020c92 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020c6e:	693b      	ldr	r3, [r7, #16]
 8020c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8020c76:	693b      	ldr	r3, [r7, #16]
 8020c78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020c7e:	683b      	ldr	r3, [r7, #0]
 8020c80:	695b      	ldr	r3, [r3, #20]
 8020c82:	693a      	ldr	r2, [r7, #16]
 8020c84:	4313      	orrs	r3, r2
 8020c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020c88:	683b      	ldr	r3, [r7, #0]
 8020c8a:	699b      	ldr	r3, [r3, #24]
 8020c8c:	693a      	ldr	r2, [r7, #16]
 8020c8e:	4313      	orrs	r3, r2
 8020c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	693a      	ldr	r2, [r7, #16]
 8020c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020c98:	687b      	ldr	r3, [r7, #4]
 8020c9a:	68fa      	ldr	r2, [r7, #12]
 8020c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020c9e:	683b      	ldr	r3, [r7, #0]
 8020ca0:	685a      	ldr	r2, [r3, #4]
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	697a      	ldr	r2, [r7, #20]
 8020caa:	621a      	str	r2, [r3, #32]
}
 8020cac:	bf00      	nop
 8020cae:	371c      	adds	r7, #28
 8020cb0:	46bd      	mov	sp, r7
 8020cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cb6:	4770      	bx	lr
 8020cb8:	fffeff8f 	.word	0xfffeff8f
 8020cbc:	40010000 	.word	0x40010000
 8020cc0:	40010400 	.word	0x40010400
 8020cc4:	40014000 	.word	0x40014000
 8020cc8:	40014400 	.word	0x40014400
 8020ccc:	40014800 	.word	0x40014800

08020cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020cd0:	b480      	push	{r7}
 8020cd2:	b087      	sub	sp, #28
 8020cd4:	af00      	add	r7, sp, #0
 8020cd6:	6078      	str	r0, [r7, #4]
 8020cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020cda:	687b      	ldr	r3, [r7, #4]
 8020cdc:	6a1b      	ldr	r3, [r3, #32]
 8020cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020ce0:	687b      	ldr	r3, [r7, #4]
 8020ce2:	6a1b      	ldr	r3, [r3, #32]
 8020ce4:	f023 0210 	bic.w	r2, r3, #16
 8020ce8:	687b      	ldr	r3, [r7, #4]
 8020cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020cec:	687b      	ldr	r3, [r7, #4]
 8020cee:	685b      	ldr	r3, [r3, #4]
 8020cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	699b      	ldr	r3, [r3, #24]
 8020cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020cf8:	68fa      	ldr	r2, [r7, #12]
 8020cfa:	4b34      	ldr	r3, [pc, #208]	@ (8020dcc <TIM_OC2_SetConfig+0xfc>)
 8020cfc:	4013      	ands	r3, r2
 8020cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020d00:	68fb      	ldr	r3, [r7, #12]
 8020d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020d08:	683b      	ldr	r3, [r7, #0]
 8020d0a:	681b      	ldr	r3, [r3, #0]
 8020d0c:	021b      	lsls	r3, r3, #8
 8020d0e:	68fa      	ldr	r2, [r7, #12]
 8020d10:	4313      	orrs	r3, r2
 8020d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020d14:	697b      	ldr	r3, [r7, #20]
 8020d16:	f023 0320 	bic.w	r3, r3, #32
 8020d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020d1c:	683b      	ldr	r3, [r7, #0]
 8020d1e:	689b      	ldr	r3, [r3, #8]
 8020d20:	011b      	lsls	r3, r3, #4
 8020d22:	697a      	ldr	r2, [r7, #20]
 8020d24:	4313      	orrs	r3, r2
 8020d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020d28:	687b      	ldr	r3, [r7, #4]
 8020d2a:	4a29      	ldr	r2, [pc, #164]	@ (8020dd0 <TIM_OC2_SetConfig+0x100>)
 8020d2c:	4293      	cmp	r3, r2
 8020d2e:	d003      	beq.n	8020d38 <TIM_OC2_SetConfig+0x68>
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	4a28      	ldr	r2, [pc, #160]	@ (8020dd4 <TIM_OC2_SetConfig+0x104>)
 8020d34:	4293      	cmp	r3, r2
 8020d36:	d10d      	bne.n	8020d54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020d38:	697b      	ldr	r3, [r7, #20]
 8020d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020d40:	683b      	ldr	r3, [r7, #0]
 8020d42:	68db      	ldr	r3, [r3, #12]
 8020d44:	011b      	lsls	r3, r3, #4
 8020d46:	697a      	ldr	r2, [r7, #20]
 8020d48:	4313      	orrs	r3, r2
 8020d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020d4c:	697b      	ldr	r3, [r7, #20]
 8020d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020d52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020d54:	687b      	ldr	r3, [r7, #4]
 8020d56:	4a1e      	ldr	r2, [pc, #120]	@ (8020dd0 <TIM_OC2_SetConfig+0x100>)
 8020d58:	4293      	cmp	r3, r2
 8020d5a:	d00f      	beq.n	8020d7c <TIM_OC2_SetConfig+0xac>
 8020d5c:	687b      	ldr	r3, [r7, #4]
 8020d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8020dd4 <TIM_OC2_SetConfig+0x104>)
 8020d60:	4293      	cmp	r3, r2
 8020d62:	d00b      	beq.n	8020d7c <TIM_OC2_SetConfig+0xac>
 8020d64:	687b      	ldr	r3, [r7, #4]
 8020d66:	4a1c      	ldr	r2, [pc, #112]	@ (8020dd8 <TIM_OC2_SetConfig+0x108>)
 8020d68:	4293      	cmp	r3, r2
 8020d6a:	d007      	beq.n	8020d7c <TIM_OC2_SetConfig+0xac>
 8020d6c:	687b      	ldr	r3, [r7, #4]
 8020d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8020ddc <TIM_OC2_SetConfig+0x10c>)
 8020d70:	4293      	cmp	r3, r2
 8020d72:	d003      	beq.n	8020d7c <TIM_OC2_SetConfig+0xac>
 8020d74:	687b      	ldr	r3, [r7, #4]
 8020d76:	4a1a      	ldr	r2, [pc, #104]	@ (8020de0 <TIM_OC2_SetConfig+0x110>)
 8020d78:	4293      	cmp	r3, r2
 8020d7a:	d113      	bne.n	8020da4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020d7c:	693b      	ldr	r3, [r7, #16]
 8020d7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020d82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020d84:	693b      	ldr	r3, [r7, #16]
 8020d86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020d8c:	683b      	ldr	r3, [r7, #0]
 8020d8e:	695b      	ldr	r3, [r3, #20]
 8020d90:	009b      	lsls	r3, r3, #2
 8020d92:	693a      	ldr	r2, [r7, #16]
 8020d94:	4313      	orrs	r3, r2
 8020d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020d98:	683b      	ldr	r3, [r7, #0]
 8020d9a:	699b      	ldr	r3, [r3, #24]
 8020d9c:	009b      	lsls	r3, r3, #2
 8020d9e:	693a      	ldr	r2, [r7, #16]
 8020da0:	4313      	orrs	r3, r2
 8020da2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	693a      	ldr	r2, [r7, #16]
 8020da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020daa:	687b      	ldr	r3, [r7, #4]
 8020dac:	68fa      	ldr	r2, [r7, #12]
 8020dae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020db0:	683b      	ldr	r3, [r7, #0]
 8020db2:	685a      	ldr	r2, [r3, #4]
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020db8:	687b      	ldr	r3, [r7, #4]
 8020dba:	697a      	ldr	r2, [r7, #20]
 8020dbc:	621a      	str	r2, [r3, #32]
}
 8020dbe:	bf00      	nop
 8020dc0:	371c      	adds	r7, #28
 8020dc2:	46bd      	mov	sp, r7
 8020dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dc8:	4770      	bx	lr
 8020dca:	bf00      	nop
 8020dcc:	feff8fff 	.word	0xfeff8fff
 8020dd0:	40010000 	.word	0x40010000
 8020dd4:	40010400 	.word	0x40010400
 8020dd8:	40014000 	.word	0x40014000
 8020ddc:	40014400 	.word	0x40014400
 8020de0:	40014800 	.word	0x40014800

08020de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020de4:	b480      	push	{r7}
 8020de6:	b087      	sub	sp, #28
 8020de8:	af00      	add	r7, sp, #0
 8020dea:	6078      	str	r0, [r7, #4]
 8020dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	6a1b      	ldr	r3, [r3, #32]
 8020df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	6a1b      	ldr	r3, [r3, #32]
 8020df8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020e00:	687b      	ldr	r3, [r7, #4]
 8020e02:	685b      	ldr	r3, [r3, #4]
 8020e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	69db      	ldr	r3, [r3, #28]
 8020e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020e0c:	68fa      	ldr	r2, [r7, #12]
 8020e0e:	4b33      	ldr	r3, [pc, #204]	@ (8020edc <TIM_OC3_SetConfig+0xf8>)
 8020e10:	4013      	ands	r3, r2
 8020e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020e14:	68fb      	ldr	r3, [r7, #12]
 8020e16:	f023 0303 	bic.w	r3, r3, #3
 8020e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020e1c:	683b      	ldr	r3, [r7, #0]
 8020e1e:	681b      	ldr	r3, [r3, #0]
 8020e20:	68fa      	ldr	r2, [r7, #12]
 8020e22:	4313      	orrs	r3, r2
 8020e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020e26:	697b      	ldr	r3, [r7, #20]
 8020e28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020e2e:	683b      	ldr	r3, [r7, #0]
 8020e30:	689b      	ldr	r3, [r3, #8]
 8020e32:	021b      	lsls	r3, r3, #8
 8020e34:	697a      	ldr	r2, [r7, #20]
 8020e36:	4313      	orrs	r3, r2
 8020e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020e3a:	687b      	ldr	r3, [r7, #4]
 8020e3c:	4a28      	ldr	r2, [pc, #160]	@ (8020ee0 <TIM_OC3_SetConfig+0xfc>)
 8020e3e:	4293      	cmp	r3, r2
 8020e40:	d003      	beq.n	8020e4a <TIM_OC3_SetConfig+0x66>
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	4a27      	ldr	r2, [pc, #156]	@ (8020ee4 <TIM_OC3_SetConfig+0x100>)
 8020e46:	4293      	cmp	r3, r2
 8020e48:	d10d      	bne.n	8020e66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020e4a:	697b      	ldr	r3, [r7, #20]
 8020e4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020e52:	683b      	ldr	r3, [r7, #0]
 8020e54:	68db      	ldr	r3, [r3, #12]
 8020e56:	021b      	lsls	r3, r3, #8
 8020e58:	697a      	ldr	r2, [r7, #20]
 8020e5a:	4313      	orrs	r3, r2
 8020e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020e5e:	697b      	ldr	r3, [r7, #20]
 8020e60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	4a1d      	ldr	r2, [pc, #116]	@ (8020ee0 <TIM_OC3_SetConfig+0xfc>)
 8020e6a:	4293      	cmp	r3, r2
 8020e6c:	d00f      	beq.n	8020e8e <TIM_OC3_SetConfig+0xaa>
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	4a1c      	ldr	r2, [pc, #112]	@ (8020ee4 <TIM_OC3_SetConfig+0x100>)
 8020e72:	4293      	cmp	r3, r2
 8020e74:	d00b      	beq.n	8020e8e <TIM_OC3_SetConfig+0xaa>
 8020e76:	687b      	ldr	r3, [r7, #4]
 8020e78:	4a1b      	ldr	r2, [pc, #108]	@ (8020ee8 <TIM_OC3_SetConfig+0x104>)
 8020e7a:	4293      	cmp	r3, r2
 8020e7c:	d007      	beq.n	8020e8e <TIM_OC3_SetConfig+0xaa>
 8020e7e:	687b      	ldr	r3, [r7, #4]
 8020e80:	4a1a      	ldr	r2, [pc, #104]	@ (8020eec <TIM_OC3_SetConfig+0x108>)
 8020e82:	4293      	cmp	r3, r2
 8020e84:	d003      	beq.n	8020e8e <TIM_OC3_SetConfig+0xaa>
 8020e86:	687b      	ldr	r3, [r7, #4]
 8020e88:	4a19      	ldr	r2, [pc, #100]	@ (8020ef0 <TIM_OC3_SetConfig+0x10c>)
 8020e8a:	4293      	cmp	r3, r2
 8020e8c:	d113      	bne.n	8020eb6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020e8e:	693b      	ldr	r3, [r7, #16]
 8020e90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020e96:	693b      	ldr	r3, [r7, #16]
 8020e98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020e9e:	683b      	ldr	r3, [r7, #0]
 8020ea0:	695b      	ldr	r3, [r3, #20]
 8020ea2:	011b      	lsls	r3, r3, #4
 8020ea4:	693a      	ldr	r2, [r7, #16]
 8020ea6:	4313      	orrs	r3, r2
 8020ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020eaa:	683b      	ldr	r3, [r7, #0]
 8020eac:	699b      	ldr	r3, [r3, #24]
 8020eae:	011b      	lsls	r3, r3, #4
 8020eb0:	693a      	ldr	r2, [r7, #16]
 8020eb2:	4313      	orrs	r3, r2
 8020eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020eb6:	687b      	ldr	r3, [r7, #4]
 8020eb8:	693a      	ldr	r2, [r7, #16]
 8020eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020ebc:	687b      	ldr	r3, [r7, #4]
 8020ebe:	68fa      	ldr	r2, [r7, #12]
 8020ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020ec2:	683b      	ldr	r3, [r7, #0]
 8020ec4:	685a      	ldr	r2, [r3, #4]
 8020ec6:	687b      	ldr	r3, [r7, #4]
 8020ec8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020eca:	687b      	ldr	r3, [r7, #4]
 8020ecc:	697a      	ldr	r2, [r7, #20]
 8020ece:	621a      	str	r2, [r3, #32]
}
 8020ed0:	bf00      	nop
 8020ed2:	371c      	adds	r7, #28
 8020ed4:	46bd      	mov	sp, r7
 8020ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eda:	4770      	bx	lr
 8020edc:	fffeff8f 	.word	0xfffeff8f
 8020ee0:	40010000 	.word	0x40010000
 8020ee4:	40010400 	.word	0x40010400
 8020ee8:	40014000 	.word	0x40014000
 8020eec:	40014400 	.word	0x40014400
 8020ef0:	40014800 	.word	0x40014800

08020ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020ef4:	b480      	push	{r7}
 8020ef6:	b087      	sub	sp, #28
 8020ef8:	af00      	add	r7, sp, #0
 8020efa:	6078      	str	r0, [r7, #4]
 8020efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	6a1b      	ldr	r3, [r3, #32]
 8020f02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020f04:	687b      	ldr	r3, [r7, #4]
 8020f06:	6a1b      	ldr	r3, [r3, #32]
 8020f08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	685b      	ldr	r3, [r3, #4]
 8020f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020f16:	687b      	ldr	r3, [r7, #4]
 8020f18:	69db      	ldr	r3, [r3, #28]
 8020f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020f1c:	68fa      	ldr	r2, [r7, #12]
 8020f1e:	4b24      	ldr	r3, [pc, #144]	@ (8020fb0 <TIM_OC4_SetConfig+0xbc>)
 8020f20:	4013      	ands	r3, r2
 8020f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020f24:	68fb      	ldr	r3, [r7, #12]
 8020f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020f2c:	683b      	ldr	r3, [r7, #0]
 8020f2e:	681b      	ldr	r3, [r3, #0]
 8020f30:	021b      	lsls	r3, r3, #8
 8020f32:	68fa      	ldr	r2, [r7, #12]
 8020f34:	4313      	orrs	r3, r2
 8020f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020f38:	693b      	ldr	r3, [r7, #16]
 8020f3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020f40:	683b      	ldr	r3, [r7, #0]
 8020f42:	689b      	ldr	r3, [r3, #8]
 8020f44:	031b      	lsls	r3, r3, #12
 8020f46:	693a      	ldr	r2, [r7, #16]
 8020f48:	4313      	orrs	r3, r2
 8020f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020f4c:	687b      	ldr	r3, [r7, #4]
 8020f4e:	4a19      	ldr	r2, [pc, #100]	@ (8020fb4 <TIM_OC4_SetConfig+0xc0>)
 8020f50:	4293      	cmp	r3, r2
 8020f52:	d00f      	beq.n	8020f74 <TIM_OC4_SetConfig+0x80>
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	4a18      	ldr	r2, [pc, #96]	@ (8020fb8 <TIM_OC4_SetConfig+0xc4>)
 8020f58:	4293      	cmp	r3, r2
 8020f5a:	d00b      	beq.n	8020f74 <TIM_OC4_SetConfig+0x80>
 8020f5c:	687b      	ldr	r3, [r7, #4]
 8020f5e:	4a17      	ldr	r2, [pc, #92]	@ (8020fbc <TIM_OC4_SetConfig+0xc8>)
 8020f60:	4293      	cmp	r3, r2
 8020f62:	d007      	beq.n	8020f74 <TIM_OC4_SetConfig+0x80>
 8020f64:	687b      	ldr	r3, [r7, #4]
 8020f66:	4a16      	ldr	r2, [pc, #88]	@ (8020fc0 <TIM_OC4_SetConfig+0xcc>)
 8020f68:	4293      	cmp	r3, r2
 8020f6a:	d003      	beq.n	8020f74 <TIM_OC4_SetConfig+0x80>
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	4a15      	ldr	r2, [pc, #84]	@ (8020fc4 <TIM_OC4_SetConfig+0xd0>)
 8020f70:	4293      	cmp	r3, r2
 8020f72:	d109      	bne.n	8020f88 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020f74:	697b      	ldr	r3, [r7, #20]
 8020f76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8020f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020f7c:	683b      	ldr	r3, [r7, #0]
 8020f7e:	695b      	ldr	r3, [r3, #20]
 8020f80:	019b      	lsls	r3, r3, #6
 8020f82:	697a      	ldr	r2, [r7, #20]
 8020f84:	4313      	orrs	r3, r2
 8020f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	697a      	ldr	r2, [r7, #20]
 8020f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020f8e:	687b      	ldr	r3, [r7, #4]
 8020f90:	68fa      	ldr	r2, [r7, #12]
 8020f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020f94:	683b      	ldr	r3, [r7, #0]
 8020f96:	685a      	ldr	r2, [r3, #4]
 8020f98:	687b      	ldr	r3, [r7, #4]
 8020f9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	693a      	ldr	r2, [r7, #16]
 8020fa0:	621a      	str	r2, [r3, #32]
}
 8020fa2:	bf00      	nop
 8020fa4:	371c      	adds	r7, #28
 8020fa6:	46bd      	mov	sp, r7
 8020fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fac:	4770      	bx	lr
 8020fae:	bf00      	nop
 8020fb0:	feff8fff 	.word	0xfeff8fff
 8020fb4:	40010000 	.word	0x40010000
 8020fb8:	40010400 	.word	0x40010400
 8020fbc:	40014000 	.word	0x40014000
 8020fc0:	40014400 	.word	0x40014400
 8020fc4:	40014800 	.word	0x40014800

08020fc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020fc8:	b480      	push	{r7}
 8020fca:	b087      	sub	sp, #28
 8020fcc:	af00      	add	r7, sp, #0
 8020fce:	6078      	str	r0, [r7, #4]
 8020fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	6a1b      	ldr	r3, [r3, #32]
 8020fd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8020fd8:	687b      	ldr	r3, [r7, #4]
 8020fda:	6a1b      	ldr	r3, [r3, #32]
 8020fdc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8020fe0:	687b      	ldr	r3, [r7, #4]
 8020fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020fe4:	687b      	ldr	r3, [r7, #4]
 8020fe6:	685b      	ldr	r3, [r3, #4]
 8020fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8020ff0:	68fa      	ldr	r2, [r7, #12]
 8020ff2:	4b21      	ldr	r3, [pc, #132]	@ (8021078 <TIM_OC5_SetConfig+0xb0>)
 8020ff4:	4013      	ands	r3, r2
 8020ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020ff8:	683b      	ldr	r3, [r7, #0]
 8020ffa:	681b      	ldr	r3, [r3, #0]
 8020ffc:	68fa      	ldr	r2, [r7, #12]
 8020ffe:	4313      	orrs	r3, r2
 8021000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8021002:	693b      	ldr	r3, [r7, #16]
 8021004:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8021008:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 802100a:	683b      	ldr	r3, [r7, #0]
 802100c:	689b      	ldr	r3, [r3, #8]
 802100e:	041b      	lsls	r3, r3, #16
 8021010:	693a      	ldr	r2, [r7, #16]
 8021012:	4313      	orrs	r3, r2
 8021014:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	4a18      	ldr	r2, [pc, #96]	@ (802107c <TIM_OC5_SetConfig+0xb4>)
 802101a:	4293      	cmp	r3, r2
 802101c:	d00f      	beq.n	802103e <TIM_OC5_SetConfig+0x76>
 802101e:	687b      	ldr	r3, [r7, #4]
 8021020:	4a17      	ldr	r2, [pc, #92]	@ (8021080 <TIM_OC5_SetConfig+0xb8>)
 8021022:	4293      	cmp	r3, r2
 8021024:	d00b      	beq.n	802103e <TIM_OC5_SetConfig+0x76>
 8021026:	687b      	ldr	r3, [r7, #4]
 8021028:	4a16      	ldr	r2, [pc, #88]	@ (8021084 <TIM_OC5_SetConfig+0xbc>)
 802102a:	4293      	cmp	r3, r2
 802102c:	d007      	beq.n	802103e <TIM_OC5_SetConfig+0x76>
 802102e:	687b      	ldr	r3, [r7, #4]
 8021030:	4a15      	ldr	r2, [pc, #84]	@ (8021088 <TIM_OC5_SetConfig+0xc0>)
 8021032:	4293      	cmp	r3, r2
 8021034:	d003      	beq.n	802103e <TIM_OC5_SetConfig+0x76>
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	4a14      	ldr	r2, [pc, #80]	@ (802108c <TIM_OC5_SetConfig+0xc4>)
 802103a:	4293      	cmp	r3, r2
 802103c:	d109      	bne.n	8021052 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 802103e:	697b      	ldr	r3, [r7, #20]
 8021040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8021044:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8021046:	683b      	ldr	r3, [r7, #0]
 8021048:	695b      	ldr	r3, [r3, #20]
 802104a:	021b      	lsls	r3, r3, #8
 802104c:	697a      	ldr	r2, [r7, #20]
 802104e:	4313      	orrs	r3, r2
 8021050:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021052:	687b      	ldr	r3, [r7, #4]
 8021054:	697a      	ldr	r2, [r7, #20]
 8021056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8021058:	687b      	ldr	r3, [r7, #4]
 802105a:	68fa      	ldr	r2, [r7, #12]
 802105c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 802105e:	683b      	ldr	r3, [r7, #0]
 8021060:	685a      	ldr	r2, [r3, #4]
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	693a      	ldr	r2, [r7, #16]
 802106a:	621a      	str	r2, [r3, #32]
}
 802106c:	bf00      	nop
 802106e:	371c      	adds	r7, #28
 8021070:	46bd      	mov	sp, r7
 8021072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021076:	4770      	bx	lr
 8021078:	fffeff8f 	.word	0xfffeff8f
 802107c:	40010000 	.word	0x40010000
 8021080:	40010400 	.word	0x40010400
 8021084:	40014000 	.word	0x40014000
 8021088:	40014400 	.word	0x40014400
 802108c:	40014800 	.word	0x40014800

08021090 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8021090:	b480      	push	{r7}
 8021092:	b087      	sub	sp, #28
 8021094:	af00      	add	r7, sp, #0
 8021096:	6078      	str	r0, [r7, #4]
 8021098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802109a:	687b      	ldr	r3, [r7, #4]
 802109c:	6a1b      	ldr	r3, [r3, #32]
 802109e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	6a1b      	ldr	r3, [r3, #32]
 80210a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80210a8:	687b      	ldr	r3, [r7, #4]
 80210aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80210ac:	687b      	ldr	r3, [r7, #4]
 80210ae:	685b      	ldr	r3, [r3, #4]
 80210b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80210b2:	687b      	ldr	r3, [r7, #4]
 80210b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80210b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80210b8:	68fa      	ldr	r2, [r7, #12]
 80210ba:	4b22      	ldr	r3, [pc, #136]	@ (8021144 <TIM_OC6_SetConfig+0xb4>)
 80210bc:	4013      	ands	r3, r2
 80210be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80210c0:	683b      	ldr	r3, [r7, #0]
 80210c2:	681b      	ldr	r3, [r3, #0]
 80210c4:	021b      	lsls	r3, r3, #8
 80210c6:	68fa      	ldr	r2, [r7, #12]
 80210c8:	4313      	orrs	r3, r2
 80210ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80210cc:	693b      	ldr	r3, [r7, #16]
 80210ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80210d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80210d4:	683b      	ldr	r3, [r7, #0]
 80210d6:	689b      	ldr	r3, [r3, #8]
 80210d8:	051b      	lsls	r3, r3, #20
 80210da:	693a      	ldr	r2, [r7, #16]
 80210dc:	4313      	orrs	r3, r2
 80210de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	4a19      	ldr	r2, [pc, #100]	@ (8021148 <TIM_OC6_SetConfig+0xb8>)
 80210e4:	4293      	cmp	r3, r2
 80210e6:	d00f      	beq.n	8021108 <TIM_OC6_SetConfig+0x78>
 80210e8:	687b      	ldr	r3, [r7, #4]
 80210ea:	4a18      	ldr	r2, [pc, #96]	@ (802114c <TIM_OC6_SetConfig+0xbc>)
 80210ec:	4293      	cmp	r3, r2
 80210ee:	d00b      	beq.n	8021108 <TIM_OC6_SetConfig+0x78>
 80210f0:	687b      	ldr	r3, [r7, #4]
 80210f2:	4a17      	ldr	r2, [pc, #92]	@ (8021150 <TIM_OC6_SetConfig+0xc0>)
 80210f4:	4293      	cmp	r3, r2
 80210f6:	d007      	beq.n	8021108 <TIM_OC6_SetConfig+0x78>
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	4a16      	ldr	r2, [pc, #88]	@ (8021154 <TIM_OC6_SetConfig+0xc4>)
 80210fc:	4293      	cmp	r3, r2
 80210fe:	d003      	beq.n	8021108 <TIM_OC6_SetConfig+0x78>
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	4a15      	ldr	r2, [pc, #84]	@ (8021158 <TIM_OC6_SetConfig+0xc8>)
 8021104:	4293      	cmp	r3, r2
 8021106:	d109      	bne.n	802111c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8021108:	697b      	ldr	r3, [r7, #20]
 802110a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 802110e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8021110:	683b      	ldr	r3, [r7, #0]
 8021112:	695b      	ldr	r3, [r3, #20]
 8021114:	029b      	lsls	r3, r3, #10
 8021116:	697a      	ldr	r2, [r7, #20]
 8021118:	4313      	orrs	r3, r2
 802111a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802111c:	687b      	ldr	r3, [r7, #4]
 802111e:	697a      	ldr	r2, [r7, #20]
 8021120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8021122:	687b      	ldr	r3, [r7, #4]
 8021124:	68fa      	ldr	r2, [r7, #12]
 8021126:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8021128:	683b      	ldr	r3, [r7, #0]
 802112a:	685a      	ldr	r2, [r3, #4]
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021130:	687b      	ldr	r3, [r7, #4]
 8021132:	693a      	ldr	r2, [r7, #16]
 8021134:	621a      	str	r2, [r3, #32]
}
 8021136:	bf00      	nop
 8021138:	371c      	adds	r7, #28
 802113a:	46bd      	mov	sp, r7
 802113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021140:	4770      	bx	lr
 8021142:	bf00      	nop
 8021144:	feff8fff 	.word	0xfeff8fff
 8021148:	40010000 	.word	0x40010000
 802114c:	40010400 	.word	0x40010400
 8021150:	40014000 	.word	0x40014000
 8021154:	40014400 	.word	0x40014400
 8021158:	40014800 	.word	0x40014800

0802115c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802115c:	b480      	push	{r7}
 802115e:	b087      	sub	sp, #28
 8021160:	af00      	add	r7, sp, #0
 8021162:	60f8      	str	r0, [r7, #12]
 8021164:	60b9      	str	r1, [r7, #8]
 8021166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8021168:	68fb      	ldr	r3, [r7, #12]
 802116a:	6a1b      	ldr	r3, [r3, #32]
 802116c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802116e:	68fb      	ldr	r3, [r7, #12]
 8021170:	6a1b      	ldr	r3, [r3, #32]
 8021172:	f023 0201 	bic.w	r2, r3, #1
 8021176:	68fb      	ldr	r3, [r7, #12]
 8021178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802117a:	68fb      	ldr	r3, [r7, #12]
 802117c:	699b      	ldr	r3, [r3, #24]
 802117e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8021180:	693b      	ldr	r3, [r7, #16]
 8021182:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8021186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8021188:	687b      	ldr	r3, [r7, #4]
 802118a:	011b      	lsls	r3, r3, #4
 802118c:	693a      	ldr	r2, [r7, #16]
 802118e:	4313      	orrs	r3, r2
 8021190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8021192:	697b      	ldr	r3, [r7, #20]
 8021194:	f023 030a 	bic.w	r3, r3, #10
 8021198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802119a:	697a      	ldr	r2, [r7, #20]
 802119c:	68bb      	ldr	r3, [r7, #8]
 802119e:	4313      	orrs	r3, r2
 80211a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80211a2:	68fb      	ldr	r3, [r7, #12]
 80211a4:	693a      	ldr	r2, [r7, #16]
 80211a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80211a8:	68fb      	ldr	r3, [r7, #12]
 80211aa:	697a      	ldr	r2, [r7, #20]
 80211ac:	621a      	str	r2, [r3, #32]
}
 80211ae:	bf00      	nop
 80211b0:	371c      	adds	r7, #28
 80211b2:	46bd      	mov	sp, r7
 80211b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211b8:	4770      	bx	lr

080211ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80211ba:	b480      	push	{r7}
 80211bc:	b087      	sub	sp, #28
 80211be:	af00      	add	r7, sp, #0
 80211c0:	60f8      	str	r0, [r7, #12]
 80211c2:	60b9      	str	r1, [r7, #8]
 80211c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80211c6:	68fb      	ldr	r3, [r7, #12]
 80211c8:	6a1b      	ldr	r3, [r3, #32]
 80211ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80211cc:	68fb      	ldr	r3, [r7, #12]
 80211ce:	6a1b      	ldr	r3, [r3, #32]
 80211d0:	f023 0210 	bic.w	r2, r3, #16
 80211d4:	68fb      	ldr	r3, [r7, #12]
 80211d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80211d8:	68fb      	ldr	r3, [r7, #12]
 80211da:	699b      	ldr	r3, [r3, #24]
 80211dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80211de:	693b      	ldr	r3, [r7, #16]
 80211e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80211e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80211e6:	687b      	ldr	r3, [r7, #4]
 80211e8:	031b      	lsls	r3, r3, #12
 80211ea:	693a      	ldr	r2, [r7, #16]
 80211ec:	4313      	orrs	r3, r2
 80211ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80211f0:	697b      	ldr	r3, [r7, #20]
 80211f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80211f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80211f8:	68bb      	ldr	r3, [r7, #8]
 80211fa:	011b      	lsls	r3, r3, #4
 80211fc:	697a      	ldr	r2, [r7, #20]
 80211fe:	4313      	orrs	r3, r2
 8021200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8021202:	68fb      	ldr	r3, [r7, #12]
 8021204:	693a      	ldr	r2, [r7, #16]
 8021206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021208:	68fb      	ldr	r3, [r7, #12]
 802120a:	697a      	ldr	r2, [r7, #20]
 802120c:	621a      	str	r2, [r3, #32]
}
 802120e:	bf00      	nop
 8021210:	371c      	adds	r7, #28
 8021212:	46bd      	mov	sp, r7
 8021214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021218:	4770      	bx	lr
	...

0802121c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802121c:	b480      	push	{r7}
 802121e:	b085      	sub	sp, #20
 8021220:	af00      	add	r7, sp, #0
 8021222:	6078      	str	r0, [r7, #4]
 8021224:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8021226:	687b      	ldr	r3, [r7, #4]
 8021228:	689b      	ldr	r3, [r3, #8]
 802122a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802122c:	68fa      	ldr	r2, [r7, #12]
 802122e:	4b09      	ldr	r3, [pc, #36]	@ (8021254 <TIM_ITRx_SetConfig+0x38>)
 8021230:	4013      	ands	r3, r2
 8021232:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8021234:	683a      	ldr	r2, [r7, #0]
 8021236:	68fb      	ldr	r3, [r7, #12]
 8021238:	4313      	orrs	r3, r2
 802123a:	f043 0307 	orr.w	r3, r3, #7
 802123e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021240:	687b      	ldr	r3, [r7, #4]
 8021242:	68fa      	ldr	r2, [r7, #12]
 8021244:	609a      	str	r2, [r3, #8]
}
 8021246:	bf00      	nop
 8021248:	3714      	adds	r7, #20
 802124a:	46bd      	mov	sp, r7
 802124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021250:	4770      	bx	lr
 8021252:	bf00      	nop
 8021254:	ffcfff8f 	.word	0xffcfff8f

08021258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8021258:	b480      	push	{r7}
 802125a:	b087      	sub	sp, #28
 802125c:	af00      	add	r7, sp, #0
 802125e:	60f8      	str	r0, [r7, #12]
 8021260:	60b9      	str	r1, [r7, #8]
 8021262:	607a      	str	r2, [r7, #4]
 8021264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8021266:	68fb      	ldr	r3, [r7, #12]
 8021268:	689b      	ldr	r3, [r3, #8]
 802126a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802126c:	697b      	ldr	r3, [r7, #20]
 802126e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8021272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8021274:	683b      	ldr	r3, [r7, #0]
 8021276:	021a      	lsls	r2, r3, #8
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	431a      	orrs	r2, r3
 802127c:	68bb      	ldr	r3, [r7, #8]
 802127e:	4313      	orrs	r3, r2
 8021280:	697a      	ldr	r2, [r7, #20]
 8021282:	4313      	orrs	r3, r2
 8021284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021286:	68fb      	ldr	r3, [r7, #12]
 8021288:	697a      	ldr	r2, [r7, #20]
 802128a:	609a      	str	r2, [r3, #8]
}
 802128c:	bf00      	nop
 802128e:	371c      	adds	r7, #28
 8021290:	46bd      	mov	sp, r7
 8021292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021296:	4770      	bx	lr

08021298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8021298:	b480      	push	{r7}
 802129a:	b085      	sub	sp, #20
 802129c:	af00      	add	r7, sp, #0
 802129e:	6078      	str	r0, [r7, #4]
 80212a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80212a8:	2b01      	cmp	r3, #1
 80212aa:	d101      	bne.n	80212b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80212ac:	2302      	movs	r3, #2
 80212ae:	e06d      	b.n	802138c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	2201      	movs	r2, #1
 80212b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	2202      	movs	r2, #2
 80212bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	681b      	ldr	r3, [r3, #0]
 80212c4:	685b      	ldr	r3, [r3, #4]
 80212c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	681b      	ldr	r3, [r3, #0]
 80212cc:	689b      	ldr	r3, [r3, #8]
 80212ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	681b      	ldr	r3, [r3, #0]
 80212d4:	4a30      	ldr	r2, [pc, #192]	@ (8021398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80212d6:	4293      	cmp	r3, r2
 80212d8:	d004      	beq.n	80212e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80212da:	687b      	ldr	r3, [r7, #4]
 80212dc:	681b      	ldr	r3, [r3, #0]
 80212de:	4a2f      	ldr	r2, [pc, #188]	@ (802139c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80212e0:	4293      	cmp	r3, r2
 80212e2:	d108      	bne.n	80212f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80212e4:	68fb      	ldr	r3, [r7, #12]
 80212e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80212ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80212ec:	683b      	ldr	r3, [r7, #0]
 80212ee:	685b      	ldr	r3, [r3, #4]
 80212f0:	68fa      	ldr	r2, [r7, #12]
 80212f2:	4313      	orrs	r3, r2
 80212f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80212f6:	68fb      	ldr	r3, [r7, #12]
 80212f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80212fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80212fe:	683b      	ldr	r3, [r7, #0]
 8021300:	681b      	ldr	r3, [r3, #0]
 8021302:	68fa      	ldr	r2, [r7, #12]
 8021304:	4313      	orrs	r3, r2
 8021306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	681b      	ldr	r3, [r3, #0]
 802130c:	68fa      	ldr	r2, [r7, #12]
 802130e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021310:	687b      	ldr	r3, [r7, #4]
 8021312:	681b      	ldr	r3, [r3, #0]
 8021314:	4a20      	ldr	r2, [pc, #128]	@ (8021398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8021316:	4293      	cmp	r3, r2
 8021318:	d022      	beq.n	8021360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	681b      	ldr	r3, [r3, #0]
 802131e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8021322:	d01d      	beq.n	8021360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8021324:	687b      	ldr	r3, [r7, #4]
 8021326:	681b      	ldr	r3, [r3, #0]
 8021328:	4a1d      	ldr	r2, [pc, #116]	@ (80213a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802132a:	4293      	cmp	r3, r2
 802132c:	d018      	beq.n	8021360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	681b      	ldr	r3, [r3, #0]
 8021332:	4a1c      	ldr	r2, [pc, #112]	@ (80213a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8021334:	4293      	cmp	r3, r2
 8021336:	d013      	beq.n	8021360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8021338:	687b      	ldr	r3, [r7, #4]
 802133a:	681b      	ldr	r3, [r3, #0]
 802133c:	4a1a      	ldr	r2, [pc, #104]	@ (80213a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 802133e:	4293      	cmp	r3, r2
 8021340:	d00e      	beq.n	8021360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8021342:	687b      	ldr	r3, [r7, #4]
 8021344:	681b      	ldr	r3, [r3, #0]
 8021346:	4a15      	ldr	r2, [pc, #84]	@ (802139c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8021348:	4293      	cmp	r3, r2
 802134a:	d009      	beq.n	8021360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802134c:	687b      	ldr	r3, [r7, #4]
 802134e:	681b      	ldr	r3, [r3, #0]
 8021350:	4a16      	ldr	r2, [pc, #88]	@ (80213ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8021352:	4293      	cmp	r3, r2
 8021354:	d004      	beq.n	8021360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	681b      	ldr	r3, [r3, #0]
 802135a:	4a15      	ldr	r2, [pc, #84]	@ (80213b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 802135c:	4293      	cmp	r3, r2
 802135e:	d10c      	bne.n	802137a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8021360:	68bb      	ldr	r3, [r7, #8]
 8021362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8021366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8021368:	683b      	ldr	r3, [r7, #0]
 802136a:	689b      	ldr	r3, [r3, #8]
 802136c:	68ba      	ldr	r2, [r7, #8]
 802136e:	4313      	orrs	r3, r2
 8021370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	68ba      	ldr	r2, [r7, #8]
 8021378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802137a:	687b      	ldr	r3, [r7, #4]
 802137c:	2201      	movs	r2, #1
 802137e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8021382:	687b      	ldr	r3, [r7, #4]
 8021384:	2200      	movs	r2, #0
 8021386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 802138a:	2300      	movs	r3, #0
}
 802138c:	4618      	mov	r0, r3
 802138e:	3714      	adds	r7, #20
 8021390:	46bd      	mov	sp, r7
 8021392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021396:	4770      	bx	lr
 8021398:	40010000 	.word	0x40010000
 802139c:	40010400 	.word	0x40010400
 80213a0:	40000400 	.word	0x40000400
 80213a4:	40000800 	.word	0x40000800
 80213a8:	40000c00 	.word	0x40000c00
 80213ac:	40001800 	.word	0x40001800
 80213b0:	40014000 	.word	0x40014000

080213b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80213b4:	b580      	push	{r7, lr}
 80213b6:	b082      	sub	sp, #8
 80213b8:	af00      	add	r7, sp, #0
 80213ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80213bc:	687b      	ldr	r3, [r7, #4]
 80213be:	2b00      	cmp	r3, #0
 80213c0:	d101      	bne.n	80213c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80213c2:	2301      	movs	r3, #1
 80213c4:	e042      	b.n	802144c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	d106      	bne.n	80213de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80213d0:	687b      	ldr	r3, [r7, #4]
 80213d2:	2200      	movs	r2, #0
 80213d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80213d8:	6878      	ldr	r0, [r7, #4]
 80213da:	f7e1 fcff 	bl	8002ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80213de:	687b      	ldr	r3, [r7, #4]
 80213e0:	2224      	movs	r2, #36	@ 0x24
 80213e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80213e6:	687b      	ldr	r3, [r7, #4]
 80213e8:	681b      	ldr	r3, [r3, #0]
 80213ea:	681a      	ldr	r2, [r3, #0]
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	681b      	ldr	r3, [r3, #0]
 80213f0:	f022 0201 	bic.w	r2, r2, #1
 80213f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80213f6:	687b      	ldr	r3, [r7, #4]
 80213f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80213fa:	2b00      	cmp	r3, #0
 80213fc:	d002      	beq.n	8021404 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80213fe:	6878      	ldr	r0, [r7, #4]
 8021400:	f000 fd90 	bl	8021f24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8021404:	6878      	ldr	r0, [r7, #4]
 8021406:	f000 f825 	bl	8021454 <UART_SetConfig>
 802140a:	4603      	mov	r3, r0
 802140c:	2b01      	cmp	r3, #1
 802140e:	d101      	bne.n	8021414 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8021410:	2301      	movs	r3, #1
 8021412:	e01b      	b.n	802144c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021414:	687b      	ldr	r3, [r7, #4]
 8021416:	681b      	ldr	r3, [r3, #0]
 8021418:	685a      	ldr	r2, [r3, #4]
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	681b      	ldr	r3, [r3, #0]
 802141e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8021422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021424:	687b      	ldr	r3, [r7, #4]
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	689a      	ldr	r2, [r3, #8]
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	681b      	ldr	r3, [r3, #0]
 802142e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8021432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8021434:	687b      	ldr	r3, [r7, #4]
 8021436:	681b      	ldr	r3, [r3, #0]
 8021438:	681a      	ldr	r2, [r3, #0]
 802143a:	687b      	ldr	r3, [r7, #4]
 802143c:	681b      	ldr	r3, [r3, #0]
 802143e:	f042 0201 	orr.w	r2, r2, #1
 8021442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8021444:	6878      	ldr	r0, [r7, #4]
 8021446:	f000 fe0f 	bl	8022068 <UART_CheckIdleState>
 802144a:	4603      	mov	r3, r0
}
 802144c:	4618      	mov	r0, r3
 802144e:	3708      	adds	r7, #8
 8021450:	46bd      	mov	sp, r7
 8021452:	bd80      	pop	{r7, pc}

08021454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8021454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021458:	b092      	sub	sp, #72	@ 0x48
 802145a:	af00      	add	r7, sp, #0
 802145c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 802145e:	2300      	movs	r3, #0
 8021460:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8021464:	697b      	ldr	r3, [r7, #20]
 8021466:	689a      	ldr	r2, [r3, #8]
 8021468:	697b      	ldr	r3, [r7, #20]
 802146a:	691b      	ldr	r3, [r3, #16]
 802146c:	431a      	orrs	r2, r3
 802146e:	697b      	ldr	r3, [r7, #20]
 8021470:	695b      	ldr	r3, [r3, #20]
 8021472:	431a      	orrs	r2, r3
 8021474:	697b      	ldr	r3, [r7, #20]
 8021476:	69db      	ldr	r3, [r3, #28]
 8021478:	4313      	orrs	r3, r2
 802147a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802147c:	697b      	ldr	r3, [r7, #20]
 802147e:	681b      	ldr	r3, [r3, #0]
 8021480:	681a      	ldr	r2, [r3, #0]
 8021482:	4bbe      	ldr	r3, [pc, #760]	@ (802177c <UART_SetConfig+0x328>)
 8021484:	4013      	ands	r3, r2
 8021486:	697a      	ldr	r2, [r7, #20]
 8021488:	6812      	ldr	r2, [r2, #0]
 802148a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 802148c:	430b      	orrs	r3, r1
 802148e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021490:	697b      	ldr	r3, [r7, #20]
 8021492:	681b      	ldr	r3, [r3, #0]
 8021494:	685b      	ldr	r3, [r3, #4]
 8021496:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 802149a:	697b      	ldr	r3, [r7, #20]
 802149c:	68da      	ldr	r2, [r3, #12]
 802149e:	697b      	ldr	r3, [r7, #20]
 80214a0:	681b      	ldr	r3, [r3, #0]
 80214a2:	430a      	orrs	r2, r1
 80214a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80214a6:	697b      	ldr	r3, [r7, #20]
 80214a8:	699b      	ldr	r3, [r3, #24]
 80214aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80214ac:	697b      	ldr	r3, [r7, #20]
 80214ae:	681b      	ldr	r3, [r3, #0]
 80214b0:	4ab3      	ldr	r2, [pc, #716]	@ (8021780 <UART_SetConfig+0x32c>)
 80214b2:	4293      	cmp	r3, r2
 80214b4:	d004      	beq.n	80214c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80214b6:	697b      	ldr	r3, [r7, #20]
 80214b8:	6a1b      	ldr	r3, [r3, #32]
 80214ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80214bc:	4313      	orrs	r3, r2
 80214be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80214c0:	697b      	ldr	r3, [r7, #20]
 80214c2:	681b      	ldr	r3, [r3, #0]
 80214c4:	689a      	ldr	r2, [r3, #8]
 80214c6:	4baf      	ldr	r3, [pc, #700]	@ (8021784 <UART_SetConfig+0x330>)
 80214c8:	4013      	ands	r3, r2
 80214ca:	697a      	ldr	r2, [r7, #20]
 80214cc:	6812      	ldr	r2, [r2, #0]
 80214ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80214d0:	430b      	orrs	r3, r1
 80214d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80214d4:	697b      	ldr	r3, [r7, #20]
 80214d6:	681b      	ldr	r3, [r3, #0]
 80214d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80214da:	f023 010f 	bic.w	r1, r3, #15
 80214de:	697b      	ldr	r3, [r7, #20]
 80214e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80214e2:	697b      	ldr	r3, [r7, #20]
 80214e4:	681b      	ldr	r3, [r3, #0]
 80214e6:	430a      	orrs	r2, r1
 80214e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80214ea:	697b      	ldr	r3, [r7, #20]
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	4aa6      	ldr	r2, [pc, #664]	@ (8021788 <UART_SetConfig+0x334>)
 80214f0:	4293      	cmp	r3, r2
 80214f2:	d177      	bne.n	80215e4 <UART_SetConfig+0x190>
 80214f4:	4ba5      	ldr	r3, [pc, #660]	@ (802178c <UART_SetConfig+0x338>)
 80214f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80214f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80214fc:	2b28      	cmp	r3, #40	@ 0x28
 80214fe:	d86d      	bhi.n	80215dc <UART_SetConfig+0x188>
 8021500:	a201      	add	r2, pc, #4	@ (adr r2, 8021508 <UART_SetConfig+0xb4>)
 8021502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021506:	bf00      	nop
 8021508:	080215ad 	.word	0x080215ad
 802150c:	080215dd 	.word	0x080215dd
 8021510:	080215dd 	.word	0x080215dd
 8021514:	080215dd 	.word	0x080215dd
 8021518:	080215dd 	.word	0x080215dd
 802151c:	080215dd 	.word	0x080215dd
 8021520:	080215dd 	.word	0x080215dd
 8021524:	080215dd 	.word	0x080215dd
 8021528:	080215b5 	.word	0x080215b5
 802152c:	080215dd 	.word	0x080215dd
 8021530:	080215dd 	.word	0x080215dd
 8021534:	080215dd 	.word	0x080215dd
 8021538:	080215dd 	.word	0x080215dd
 802153c:	080215dd 	.word	0x080215dd
 8021540:	080215dd 	.word	0x080215dd
 8021544:	080215dd 	.word	0x080215dd
 8021548:	080215bd 	.word	0x080215bd
 802154c:	080215dd 	.word	0x080215dd
 8021550:	080215dd 	.word	0x080215dd
 8021554:	080215dd 	.word	0x080215dd
 8021558:	080215dd 	.word	0x080215dd
 802155c:	080215dd 	.word	0x080215dd
 8021560:	080215dd 	.word	0x080215dd
 8021564:	080215dd 	.word	0x080215dd
 8021568:	080215c5 	.word	0x080215c5
 802156c:	080215dd 	.word	0x080215dd
 8021570:	080215dd 	.word	0x080215dd
 8021574:	080215dd 	.word	0x080215dd
 8021578:	080215dd 	.word	0x080215dd
 802157c:	080215dd 	.word	0x080215dd
 8021580:	080215dd 	.word	0x080215dd
 8021584:	080215dd 	.word	0x080215dd
 8021588:	080215cd 	.word	0x080215cd
 802158c:	080215dd 	.word	0x080215dd
 8021590:	080215dd 	.word	0x080215dd
 8021594:	080215dd 	.word	0x080215dd
 8021598:	080215dd 	.word	0x080215dd
 802159c:	080215dd 	.word	0x080215dd
 80215a0:	080215dd 	.word	0x080215dd
 80215a4:	080215dd 	.word	0x080215dd
 80215a8:	080215d5 	.word	0x080215d5
 80215ac:	2301      	movs	r3, #1
 80215ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215b2:	e222      	b.n	80219fa <UART_SetConfig+0x5a6>
 80215b4:	2304      	movs	r3, #4
 80215b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215ba:	e21e      	b.n	80219fa <UART_SetConfig+0x5a6>
 80215bc:	2308      	movs	r3, #8
 80215be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215c2:	e21a      	b.n	80219fa <UART_SetConfig+0x5a6>
 80215c4:	2310      	movs	r3, #16
 80215c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215ca:	e216      	b.n	80219fa <UART_SetConfig+0x5a6>
 80215cc:	2320      	movs	r3, #32
 80215ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215d2:	e212      	b.n	80219fa <UART_SetConfig+0x5a6>
 80215d4:	2340      	movs	r3, #64	@ 0x40
 80215d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215da:	e20e      	b.n	80219fa <UART_SetConfig+0x5a6>
 80215dc:	2380      	movs	r3, #128	@ 0x80
 80215de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215e2:	e20a      	b.n	80219fa <UART_SetConfig+0x5a6>
 80215e4:	697b      	ldr	r3, [r7, #20]
 80215e6:	681b      	ldr	r3, [r3, #0]
 80215e8:	4a69      	ldr	r2, [pc, #420]	@ (8021790 <UART_SetConfig+0x33c>)
 80215ea:	4293      	cmp	r3, r2
 80215ec:	d130      	bne.n	8021650 <UART_SetConfig+0x1fc>
 80215ee:	4b67      	ldr	r3, [pc, #412]	@ (802178c <UART_SetConfig+0x338>)
 80215f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80215f2:	f003 0307 	and.w	r3, r3, #7
 80215f6:	2b05      	cmp	r3, #5
 80215f8:	d826      	bhi.n	8021648 <UART_SetConfig+0x1f4>
 80215fa:	a201      	add	r2, pc, #4	@ (adr r2, 8021600 <UART_SetConfig+0x1ac>)
 80215fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021600:	08021619 	.word	0x08021619
 8021604:	08021621 	.word	0x08021621
 8021608:	08021629 	.word	0x08021629
 802160c:	08021631 	.word	0x08021631
 8021610:	08021639 	.word	0x08021639
 8021614:	08021641 	.word	0x08021641
 8021618:	2300      	movs	r3, #0
 802161a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802161e:	e1ec      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021620:	2304      	movs	r3, #4
 8021622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021626:	e1e8      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021628:	2308      	movs	r3, #8
 802162a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802162e:	e1e4      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021630:	2310      	movs	r3, #16
 8021632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021636:	e1e0      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021638:	2320      	movs	r3, #32
 802163a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802163e:	e1dc      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021640:	2340      	movs	r3, #64	@ 0x40
 8021642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021646:	e1d8      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021648:	2380      	movs	r3, #128	@ 0x80
 802164a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802164e:	e1d4      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021650:	697b      	ldr	r3, [r7, #20]
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	4a4f      	ldr	r2, [pc, #316]	@ (8021794 <UART_SetConfig+0x340>)
 8021656:	4293      	cmp	r3, r2
 8021658:	d130      	bne.n	80216bc <UART_SetConfig+0x268>
 802165a:	4b4c      	ldr	r3, [pc, #304]	@ (802178c <UART_SetConfig+0x338>)
 802165c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802165e:	f003 0307 	and.w	r3, r3, #7
 8021662:	2b05      	cmp	r3, #5
 8021664:	d826      	bhi.n	80216b4 <UART_SetConfig+0x260>
 8021666:	a201      	add	r2, pc, #4	@ (adr r2, 802166c <UART_SetConfig+0x218>)
 8021668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802166c:	08021685 	.word	0x08021685
 8021670:	0802168d 	.word	0x0802168d
 8021674:	08021695 	.word	0x08021695
 8021678:	0802169d 	.word	0x0802169d
 802167c:	080216a5 	.word	0x080216a5
 8021680:	080216ad 	.word	0x080216ad
 8021684:	2300      	movs	r3, #0
 8021686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802168a:	e1b6      	b.n	80219fa <UART_SetConfig+0x5a6>
 802168c:	2304      	movs	r3, #4
 802168e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021692:	e1b2      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021694:	2308      	movs	r3, #8
 8021696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802169a:	e1ae      	b.n	80219fa <UART_SetConfig+0x5a6>
 802169c:	2310      	movs	r3, #16
 802169e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216a2:	e1aa      	b.n	80219fa <UART_SetConfig+0x5a6>
 80216a4:	2320      	movs	r3, #32
 80216a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216aa:	e1a6      	b.n	80219fa <UART_SetConfig+0x5a6>
 80216ac:	2340      	movs	r3, #64	@ 0x40
 80216ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216b2:	e1a2      	b.n	80219fa <UART_SetConfig+0x5a6>
 80216b4:	2380      	movs	r3, #128	@ 0x80
 80216b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216ba:	e19e      	b.n	80219fa <UART_SetConfig+0x5a6>
 80216bc:	697b      	ldr	r3, [r7, #20]
 80216be:	681b      	ldr	r3, [r3, #0]
 80216c0:	4a35      	ldr	r2, [pc, #212]	@ (8021798 <UART_SetConfig+0x344>)
 80216c2:	4293      	cmp	r3, r2
 80216c4:	d130      	bne.n	8021728 <UART_SetConfig+0x2d4>
 80216c6:	4b31      	ldr	r3, [pc, #196]	@ (802178c <UART_SetConfig+0x338>)
 80216c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80216ca:	f003 0307 	and.w	r3, r3, #7
 80216ce:	2b05      	cmp	r3, #5
 80216d0:	d826      	bhi.n	8021720 <UART_SetConfig+0x2cc>
 80216d2:	a201      	add	r2, pc, #4	@ (adr r2, 80216d8 <UART_SetConfig+0x284>)
 80216d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80216d8:	080216f1 	.word	0x080216f1
 80216dc:	080216f9 	.word	0x080216f9
 80216e0:	08021701 	.word	0x08021701
 80216e4:	08021709 	.word	0x08021709
 80216e8:	08021711 	.word	0x08021711
 80216ec:	08021719 	.word	0x08021719
 80216f0:	2300      	movs	r3, #0
 80216f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216f6:	e180      	b.n	80219fa <UART_SetConfig+0x5a6>
 80216f8:	2304      	movs	r3, #4
 80216fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216fe:	e17c      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021700:	2308      	movs	r3, #8
 8021702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021706:	e178      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021708:	2310      	movs	r3, #16
 802170a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802170e:	e174      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021710:	2320      	movs	r3, #32
 8021712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021716:	e170      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021718:	2340      	movs	r3, #64	@ 0x40
 802171a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802171e:	e16c      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021720:	2380      	movs	r3, #128	@ 0x80
 8021722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021726:	e168      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021728:	697b      	ldr	r3, [r7, #20]
 802172a:	681b      	ldr	r3, [r3, #0]
 802172c:	4a1b      	ldr	r2, [pc, #108]	@ (802179c <UART_SetConfig+0x348>)
 802172e:	4293      	cmp	r3, r2
 8021730:	d142      	bne.n	80217b8 <UART_SetConfig+0x364>
 8021732:	4b16      	ldr	r3, [pc, #88]	@ (802178c <UART_SetConfig+0x338>)
 8021734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021736:	f003 0307 	and.w	r3, r3, #7
 802173a:	2b05      	cmp	r3, #5
 802173c:	d838      	bhi.n	80217b0 <UART_SetConfig+0x35c>
 802173e:	a201      	add	r2, pc, #4	@ (adr r2, 8021744 <UART_SetConfig+0x2f0>)
 8021740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021744:	0802175d 	.word	0x0802175d
 8021748:	08021765 	.word	0x08021765
 802174c:	0802176d 	.word	0x0802176d
 8021750:	08021775 	.word	0x08021775
 8021754:	080217a1 	.word	0x080217a1
 8021758:	080217a9 	.word	0x080217a9
 802175c:	2300      	movs	r3, #0
 802175e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021762:	e14a      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021764:	2304      	movs	r3, #4
 8021766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802176a:	e146      	b.n	80219fa <UART_SetConfig+0x5a6>
 802176c:	2308      	movs	r3, #8
 802176e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021772:	e142      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021774:	2310      	movs	r3, #16
 8021776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802177a:	e13e      	b.n	80219fa <UART_SetConfig+0x5a6>
 802177c:	cfff69f3 	.word	0xcfff69f3
 8021780:	58000c00 	.word	0x58000c00
 8021784:	11fff4ff 	.word	0x11fff4ff
 8021788:	40011000 	.word	0x40011000
 802178c:	58024400 	.word	0x58024400
 8021790:	40004400 	.word	0x40004400
 8021794:	40004800 	.word	0x40004800
 8021798:	40004c00 	.word	0x40004c00
 802179c:	40005000 	.word	0x40005000
 80217a0:	2320      	movs	r3, #32
 80217a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80217a6:	e128      	b.n	80219fa <UART_SetConfig+0x5a6>
 80217a8:	2340      	movs	r3, #64	@ 0x40
 80217aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80217ae:	e124      	b.n	80219fa <UART_SetConfig+0x5a6>
 80217b0:	2380      	movs	r3, #128	@ 0x80
 80217b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80217b6:	e120      	b.n	80219fa <UART_SetConfig+0x5a6>
 80217b8:	697b      	ldr	r3, [r7, #20]
 80217ba:	681b      	ldr	r3, [r3, #0]
 80217bc:	4acb      	ldr	r2, [pc, #812]	@ (8021aec <UART_SetConfig+0x698>)
 80217be:	4293      	cmp	r3, r2
 80217c0:	d176      	bne.n	80218b0 <UART_SetConfig+0x45c>
 80217c2:	4bcb      	ldr	r3, [pc, #812]	@ (8021af0 <UART_SetConfig+0x69c>)
 80217c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80217c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80217ca:	2b28      	cmp	r3, #40	@ 0x28
 80217cc:	d86c      	bhi.n	80218a8 <UART_SetConfig+0x454>
 80217ce:	a201      	add	r2, pc, #4	@ (adr r2, 80217d4 <UART_SetConfig+0x380>)
 80217d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80217d4:	08021879 	.word	0x08021879
 80217d8:	080218a9 	.word	0x080218a9
 80217dc:	080218a9 	.word	0x080218a9
 80217e0:	080218a9 	.word	0x080218a9
 80217e4:	080218a9 	.word	0x080218a9
 80217e8:	080218a9 	.word	0x080218a9
 80217ec:	080218a9 	.word	0x080218a9
 80217f0:	080218a9 	.word	0x080218a9
 80217f4:	08021881 	.word	0x08021881
 80217f8:	080218a9 	.word	0x080218a9
 80217fc:	080218a9 	.word	0x080218a9
 8021800:	080218a9 	.word	0x080218a9
 8021804:	080218a9 	.word	0x080218a9
 8021808:	080218a9 	.word	0x080218a9
 802180c:	080218a9 	.word	0x080218a9
 8021810:	080218a9 	.word	0x080218a9
 8021814:	08021889 	.word	0x08021889
 8021818:	080218a9 	.word	0x080218a9
 802181c:	080218a9 	.word	0x080218a9
 8021820:	080218a9 	.word	0x080218a9
 8021824:	080218a9 	.word	0x080218a9
 8021828:	080218a9 	.word	0x080218a9
 802182c:	080218a9 	.word	0x080218a9
 8021830:	080218a9 	.word	0x080218a9
 8021834:	08021891 	.word	0x08021891
 8021838:	080218a9 	.word	0x080218a9
 802183c:	080218a9 	.word	0x080218a9
 8021840:	080218a9 	.word	0x080218a9
 8021844:	080218a9 	.word	0x080218a9
 8021848:	080218a9 	.word	0x080218a9
 802184c:	080218a9 	.word	0x080218a9
 8021850:	080218a9 	.word	0x080218a9
 8021854:	08021899 	.word	0x08021899
 8021858:	080218a9 	.word	0x080218a9
 802185c:	080218a9 	.word	0x080218a9
 8021860:	080218a9 	.word	0x080218a9
 8021864:	080218a9 	.word	0x080218a9
 8021868:	080218a9 	.word	0x080218a9
 802186c:	080218a9 	.word	0x080218a9
 8021870:	080218a9 	.word	0x080218a9
 8021874:	080218a1 	.word	0x080218a1
 8021878:	2301      	movs	r3, #1
 802187a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802187e:	e0bc      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021880:	2304      	movs	r3, #4
 8021882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021886:	e0b8      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021888:	2308      	movs	r3, #8
 802188a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802188e:	e0b4      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021890:	2310      	movs	r3, #16
 8021892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021896:	e0b0      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021898:	2320      	movs	r3, #32
 802189a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802189e:	e0ac      	b.n	80219fa <UART_SetConfig+0x5a6>
 80218a0:	2340      	movs	r3, #64	@ 0x40
 80218a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218a6:	e0a8      	b.n	80219fa <UART_SetConfig+0x5a6>
 80218a8:	2380      	movs	r3, #128	@ 0x80
 80218aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218ae:	e0a4      	b.n	80219fa <UART_SetConfig+0x5a6>
 80218b0:	697b      	ldr	r3, [r7, #20]
 80218b2:	681b      	ldr	r3, [r3, #0]
 80218b4:	4a8f      	ldr	r2, [pc, #572]	@ (8021af4 <UART_SetConfig+0x6a0>)
 80218b6:	4293      	cmp	r3, r2
 80218b8:	d130      	bne.n	802191c <UART_SetConfig+0x4c8>
 80218ba:	4b8d      	ldr	r3, [pc, #564]	@ (8021af0 <UART_SetConfig+0x69c>)
 80218bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80218be:	f003 0307 	and.w	r3, r3, #7
 80218c2:	2b05      	cmp	r3, #5
 80218c4:	d826      	bhi.n	8021914 <UART_SetConfig+0x4c0>
 80218c6:	a201      	add	r2, pc, #4	@ (adr r2, 80218cc <UART_SetConfig+0x478>)
 80218c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218cc:	080218e5 	.word	0x080218e5
 80218d0:	080218ed 	.word	0x080218ed
 80218d4:	080218f5 	.word	0x080218f5
 80218d8:	080218fd 	.word	0x080218fd
 80218dc:	08021905 	.word	0x08021905
 80218e0:	0802190d 	.word	0x0802190d
 80218e4:	2300      	movs	r3, #0
 80218e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218ea:	e086      	b.n	80219fa <UART_SetConfig+0x5a6>
 80218ec:	2304      	movs	r3, #4
 80218ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218f2:	e082      	b.n	80219fa <UART_SetConfig+0x5a6>
 80218f4:	2308      	movs	r3, #8
 80218f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218fa:	e07e      	b.n	80219fa <UART_SetConfig+0x5a6>
 80218fc:	2310      	movs	r3, #16
 80218fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021902:	e07a      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021904:	2320      	movs	r3, #32
 8021906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802190a:	e076      	b.n	80219fa <UART_SetConfig+0x5a6>
 802190c:	2340      	movs	r3, #64	@ 0x40
 802190e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021912:	e072      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021914:	2380      	movs	r3, #128	@ 0x80
 8021916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802191a:	e06e      	b.n	80219fa <UART_SetConfig+0x5a6>
 802191c:	697b      	ldr	r3, [r7, #20]
 802191e:	681b      	ldr	r3, [r3, #0]
 8021920:	4a75      	ldr	r2, [pc, #468]	@ (8021af8 <UART_SetConfig+0x6a4>)
 8021922:	4293      	cmp	r3, r2
 8021924:	d130      	bne.n	8021988 <UART_SetConfig+0x534>
 8021926:	4b72      	ldr	r3, [pc, #456]	@ (8021af0 <UART_SetConfig+0x69c>)
 8021928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802192a:	f003 0307 	and.w	r3, r3, #7
 802192e:	2b05      	cmp	r3, #5
 8021930:	d826      	bhi.n	8021980 <UART_SetConfig+0x52c>
 8021932:	a201      	add	r2, pc, #4	@ (adr r2, 8021938 <UART_SetConfig+0x4e4>)
 8021934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021938:	08021951 	.word	0x08021951
 802193c:	08021959 	.word	0x08021959
 8021940:	08021961 	.word	0x08021961
 8021944:	08021969 	.word	0x08021969
 8021948:	08021971 	.word	0x08021971
 802194c:	08021979 	.word	0x08021979
 8021950:	2300      	movs	r3, #0
 8021952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021956:	e050      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021958:	2304      	movs	r3, #4
 802195a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802195e:	e04c      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021960:	2308      	movs	r3, #8
 8021962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021966:	e048      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021968:	2310      	movs	r3, #16
 802196a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802196e:	e044      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021970:	2320      	movs	r3, #32
 8021972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021976:	e040      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021978:	2340      	movs	r3, #64	@ 0x40
 802197a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802197e:	e03c      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021980:	2380      	movs	r3, #128	@ 0x80
 8021982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021986:	e038      	b.n	80219fa <UART_SetConfig+0x5a6>
 8021988:	697b      	ldr	r3, [r7, #20]
 802198a:	681b      	ldr	r3, [r3, #0]
 802198c:	4a5b      	ldr	r2, [pc, #364]	@ (8021afc <UART_SetConfig+0x6a8>)
 802198e:	4293      	cmp	r3, r2
 8021990:	d130      	bne.n	80219f4 <UART_SetConfig+0x5a0>
 8021992:	4b57      	ldr	r3, [pc, #348]	@ (8021af0 <UART_SetConfig+0x69c>)
 8021994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021996:	f003 0307 	and.w	r3, r3, #7
 802199a:	2b05      	cmp	r3, #5
 802199c:	d826      	bhi.n	80219ec <UART_SetConfig+0x598>
 802199e:	a201      	add	r2, pc, #4	@ (adr r2, 80219a4 <UART_SetConfig+0x550>)
 80219a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80219a4:	080219bd 	.word	0x080219bd
 80219a8:	080219c5 	.word	0x080219c5
 80219ac:	080219cd 	.word	0x080219cd
 80219b0:	080219d5 	.word	0x080219d5
 80219b4:	080219dd 	.word	0x080219dd
 80219b8:	080219e5 	.word	0x080219e5
 80219bc:	2302      	movs	r3, #2
 80219be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219c2:	e01a      	b.n	80219fa <UART_SetConfig+0x5a6>
 80219c4:	2304      	movs	r3, #4
 80219c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219ca:	e016      	b.n	80219fa <UART_SetConfig+0x5a6>
 80219cc:	2308      	movs	r3, #8
 80219ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219d2:	e012      	b.n	80219fa <UART_SetConfig+0x5a6>
 80219d4:	2310      	movs	r3, #16
 80219d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219da:	e00e      	b.n	80219fa <UART_SetConfig+0x5a6>
 80219dc:	2320      	movs	r3, #32
 80219de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219e2:	e00a      	b.n	80219fa <UART_SetConfig+0x5a6>
 80219e4:	2340      	movs	r3, #64	@ 0x40
 80219e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219ea:	e006      	b.n	80219fa <UART_SetConfig+0x5a6>
 80219ec:	2380      	movs	r3, #128	@ 0x80
 80219ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219f2:	e002      	b.n	80219fa <UART_SetConfig+0x5a6>
 80219f4:	2380      	movs	r3, #128	@ 0x80
 80219f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80219fa:	697b      	ldr	r3, [r7, #20]
 80219fc:	681b      	ldr	r3, [r3, #0]
 80219fe:	4a3f      	ldr	r2, [pc, #252]	@ (8021afc <UART_SetConfig+0x6a8>)
 8021a00:	4293      	cmp	r3, r2
 8021a02:	f040 80f8 	bne.w	8021bf6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8021a06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021a0a:	2b20      	cmp	r3, #32
 8021a0c:	dc46      	bgt.n	8021a9c <UART_SetConfig+0x648>
 8021a0e:	2b02      	cmp	r3, #2
 8021a10:	f2c0 8082 	blt.w	8021b18 <UART_SetConfig+0x6c4>
 8021a14:	3b02      	subs	r3, #2
 8021a16:	2b1e      	cmp	r3, #30
 8021a18:	d87e      	bhi.n	8021b18 <UART_SetConfig+0x6c4>
 8021a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8021a20 <UART_SetConfig+0x5cc>)
 8021a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021a20:	08021aa3 	.word	0x08021aa3
 8021a24:	08021b19 	.word	0x08021b19
 8021a28:	08021aab 	.word	0x08021aab
 8021a2c:	08021b19 	.word	0x08021b19
 8021a30:	08021b19 	.word	0x08021b19
 8021a34:	08021b19 	.word	0x08021b19
 8021a38:	08021abb 	.word	0x08021abb
 8021a3c:	08021b19 	.word	0x08021b19
 8021a40:	08021b19 	.word	0x08021b19
 8021a44:	08021b19 	.word	0x08021b19
 8021a48:	08021b19 	.word	0x08021b19
 8021a4c:	08021b19 	.word	0x08021b19
 8021a50:	08021b19 	.word	0x08021b19
 8021a54:	08021b19 	.word	0x08021b19
 8021a58:	08021acb 	.word	0x08021acb
 8021a5c:	08021b19 	.word	0x08021b19
 8021a60:	08021b19 	.word	0x08021b19
 8021a64:	08021b19 	.word	0x08021b19
 8021a68:	08021b19 	.word	0x08021b19
 8021a6c:	08021b19 	.word	0x08021b19
 8021a70:	08021b19 	.word	0x08021b19
 8021a74:	08021b19 	.word	0x08021b19
 8021a78:	08021b19 	.word	0x08021b19
 8021a7c:	08021b19 	.word	0x08021b19
 8021a80:	08021b19 	.word	0x08021b19
 8021a84:	08021b19 	.word	0x08021b19
 8021a88:	08021b19 	.word	0x08021b19
 8021a8c:	08021b19 	.word	0x08021b19
 8021a90:	08021b19 	.word	0x08021b19
 8021a94:	08021b19 	.word	0x08021b19
 8021a98:	08021b0b 	.word	0x08021b0b
 8021a9c:	2b40      	cmp	r3, #64	@ 0x40
 8021a9e:	d037      	beq.n	8021b10 <UART_SetConfig+0x6bc>
 8021aa0:	e03a      	b.n	8021b18 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8021aa2:	f7fd fc87 	bl	801f3b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8021aa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021aa8:	e03c      	b.n	8021b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021aae:	4618      	mov	r0, r3
 8021ab0:	f7fd fc96 	bl	801f3e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021ab8:	e034      	b.n	8021b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021aba:	f107 0318 	add.w	r3, r7, #24
 8021abe:	4618      	mov	r0, r3
 8021ac0:	f7fd fde2 	bl	801f688 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021ac4:	69fb      	ldr	r3, [r7, #28]
 8021ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021ac8:	e02c      	b.n	8021b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021aca:	4b09      	ldr	r3, [pc, #36]	@ (8021af0 <UART_SetConfig+0x69c>)
 8021acc:	681b      	ldr	r3, [r3, #0]
 8021ace:	f003 0320 	and.w	r3, r3, #32
 8021ad2:	2b00      	cmp	r3, #0
 8021ad4:	d016      	beq.n	8021b04 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021ad6:	4b06      	ldr	r3, [pc, #24]	@ (8021af0 <UART_SetConfig+0x69c>)
 8021ad8:	681b      	ldr	r3, [r3, #0]
 8021ada:	08db      	lsrs	r3, r3, #3
 8021adc:	f003 0303 	and.w	r3, r3, #3
 8021ae0:	4a07      	ldr	r2, [pc, #28]	@ (8021b00 <UART_SetConfig+0x6ac>)
 8021ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8021ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021ae8:	e01c      	b.n	8021b24 <UART_SetConfig+0x6d0>
 8021aea:	bf00      	nop
 8021aec:	40011400 	.word	0x40011400
 8021af0:	58024400 	.word	0x58024400
 8021af4:	40007800 	.word	0x40007800
 8021af8:	40007c00 	.word	0x40007c00
 8021afc:	58000c00 	.word	0x58000c00
 8021b00:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8021b04:	4b9d      	ldr	r3, [pc, #628]	@ (8021d7c <UART_SetConfig+0x928>)
 8021b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021b08:	e00c      	b.n	8021b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021b0a:	4b9d      	ldr	r3, [pc, #628]	@ (8021d80 <UART_SetConfig+0x92c>)
 8021b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021b0e:	e009      	b.n	8021b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021b10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021b16:	e005      	b.n	8021b24 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8021b18:	2300      	movs	r3, #0
 8021b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021b1c:	2301      	movs	r3, #1
 8021b1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021b22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8021b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b26:	2b00      	cmp	r3, #0
 8021b28:	f000 81de 	beq.w	8021ee8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8021b2c:	697b      	ldr	r3, [r7, #20]
 8021b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021b30:	4a94      	ldr	r2, [pc, #592]	@ (8021d84 <UART_SetConfig+0x930>)
 8021b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021b36:	461a      	mov	r2, r3
 8021b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8021b3e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8021b40:	697b      	ldr	r3, [r7, #20]
 8021b42:	685a      	ldr	r2, [r3, #4]
 8021b44:	4613      	mov	r3, r2
 8021b46:	005b      	lsls	r3, r3, #1
 8021b48:	4413      	add	r3, r2
 8021b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021b4c:	429a      	cmp	r2, r3
 8021b4e:	d305      	bcc.n	8021b5c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8021b50:	697b      	ldr	r3, [r7, #20]
 8021b52:	685b      	ldr	r3, [r3, #4]
 8021b54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8021b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021b58:	429a      	cmp	r2, r3
 8021b5a:	d903      	bls.n	8021b64 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8021b5c:	2301      	movs	r3, #1
 8021b5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021b62:	e1c1      	b.n	8021ee8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b66:	2200      	movs	r2, #0
 8021b68:	60bb      	str	r3, [r7, #8]
 8021b6a:	60fa      	str	r2, [r7, #12]
 8021b6c:	697b      	ldr	r3, [r7, #20]
 8021b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021b70:	4a84      	ldr	r2, [pc, #528]	@ (8021d84 <UART_SetConfig+0x930>)
 8021b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021b76:	b29b      	uxth	r3, r3
 8021b78:	2200      	movs	r2, #0
 8021b7a:	603b      	str	r3, [r7, #0]
 8021b7c:	607a      	str	r2, [r7, #4]
 8021b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021b82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021b86:	f7de fc13 	bl	80003b0 <__aeabi_uldivmod>
 8021b8a:	4602      	mov	r2, r0
 8021b8c:	460b      	mov	r3, r1
 8021b8e:	4610      	mov	r0, r2
 8021b90:	4619      	mov	r1, r3
 8021b92:	f04f 0200 	mov.w	r2, #0
 8021b96:	f04f 0300 	mov.w	r3, #0
 8021b9a:	020b      	lsls	r3, r1, #8
 8021b9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8021ba0:	0202      	lsls	r2, r0, #8
 8021ba2:	6979      	ldr	r1, [r7, #20]
 8021ba4:	6849      	ldr	r1, [r1, #4]
 8021ba6:	0849      	lsrs	r1, r1, #1
 8021ba8:	2000      	movs	r0, #0
 8021baa:	460c      	mov	r4, r1
 8021bac:	4605      	mov	r5, r0
 8021bae:	eb12 0804 	adds.w	r8, r2, r4
 8021bb2:	eb43 0905 	adc.w	r9, r3, r5
 8021bb6:	697b      	ldr	r3, [r7, #20]
 8021bb8:	685b      	ldr	r3, [r3, #4]
 8021bba:	2200      	movs	r2, #0
 8021bbc:	469a      	mov	sl, r3
 8021bbe:	4693      	mov	fp, r2
 8021bc0:	4652      	mov	r2, sl
 8021bc2:	465b      	mov	r3, fp
 8021bc4:	4640      	mov	r0, r8
 8021bc6:	4649      	mov	r1, r9
 8021bc8:	f7de fbf2 	bl	80003b0 <__aeabi_uldivmod>
 8021bcc:	4602      	mov	r2, r0
 8021bce:	460b      	mov	r3, r1
 8021bd0:	4613      	mov	r3, r2
 8021bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8021bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8021bda:	d308      	bcc.n	8021bee <UART_SetConfig+0x79a>
 8021bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021be2:	d204      	bcs.n	8021bee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8021be4:	697b      	ldr	r3, [r7, #20]
 8021be6:	681b      	ldr	r3, [r3, #0]
 8021be8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8021bea:	60da      	str	r2, [r3, #12]
 8021bec:	e17c      	b.n	8021ee8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8021bee:	2301      	movs	r3, #1
 8021bf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021bf4:	e178      	b.n	8021ee8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021bf6:	697b      	ldr	r3, [r7, #20]
 8021bf8:	69db      	ldr	r3, [r3, #28]
 8021bfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021bfe:	f040 80c5 	bne.w	8021d8c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8021c02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021c06:	2b20      	cmp	r3, #32
 8021c08:	dc48      	bgt.n	8021c9c <UART_SetConfig+0x848>
 8021c0a:	2b00      	cmp	r3, #0
 8021c0c:	db7b      	blt.n	8021d06 <UART_SetConfig+0x8b2>
 8021c0e:	2b20      	cmp	r3, #32
 8021c10:	d879      	bhi.n	8021d06 <UART_SetConfig+0x8b2>
 8021c12:	a201      	add	r2, pc, #4	@ (adr r2, 8021c18 <UART_SetConfig+0x7c4>)
 8021c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c18:	08021ca3 	.word	0x08021ca3
 8021c1c:	08021cab 	.word	0x08021cab
 8021c20:	08021d07 	.word	0x08021d07
 8021c24:	08021d07 	.word	0x08021d07
 8021c28:	08021cb3 	.word	0x08021cb3
 8021c2c:	08021d07 	.word	0x08021d07
 8021c30:	08021d07 	.word	0x08021d07
 8021c34:	08021d07 	.word	0x08021d07
 8021c38:	08021cc3 	.word	0x08021cc3
 8021c3c:	08021d07 	.word	0x08021d07
 8021c40:	08021d07 	.word	0x08021d07
 8021c44:	08021d07 	.word	0x08021d07
 8021c48:	08021d07 	.word	0x08021d07
 8021c4c:	08021d07 	.word	0x08021d07
 8021c50:	08021d07 	.word	0x08021d07
 8021c54:	08021d07 	.word	0x08021d07
 8021c58:	08021cd3 	.word	0x08021cd3
 8021c5c:	08021d07 	.word	0x08021d07
 8021c60:	08021d07 	.word	0x08021d07
 8021c64:	08021d07 	.word	0x08021d07
 8021c68:	08021d07 	.word	0x08021d07
 8021c6c:	08021d07 	.word	0x08021d07
 8021c70:	08021d07 	.word	0x08021d07
 8021c74:	08021d07 	.word	0x08021d07
 8021c78:	08021d07 	.word	0x08021d07
 8021c7c:	08021d07 	.word	0x08021d07
 8021c80:	08021d07 	.word	0x08021d07
 8021c84:	08021d07 	.word	0x08021d07
 8021c88:	08021d07 	.word	0x08021d07
 8021c8c:	08021d07 	.word	0x08021d07
 8021c90:	08021d07 	.word	0x08021d07
 8021c94:	08021d07 	.word	0x08021d07
 8021c98:	08021cf9 	.word	0x08021cf9
 8021c9c:	2b40      	cmp	r3, #64	@ 0x40
 8021c9e:	d02e      	beq.n	8021cfe <UART_SetConfig+0x8aa>
 8021ca0:	e031      	b.n	8021d06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021ca2:	f7fc f951 	bl	801df48 <HAL_RCC_GetPCLK1Freq>
 8021ca6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021ca8:	e033      	b.n	8021d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021caa:	f7fc f963 	bl	801df74 <HAL_RCC_GetPCLK2Freq>
 8021cae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021cb0:	e02f      	b.n	8021d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021cb6:	4618      	mov	r0, r3
 8021cb8:	f7fd fb92 	bl	801f3e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021cc0:	e027      	b.n	8021d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021cc2:	f107 0318 	add.w	r3, r7, #24
 8021cc6:	4618      	mov	r0, r3
 8021cc8:	f7fd fcde 	bl	801f688 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021ccc:	69fb      	ldr	r3, [r7, #28]
 8021cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021cd0:	e01f      	b.n	8021d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8021d88 <UART_SetConfig+0x934>)
 8021cd4:	681b      	ldr	r3, [r3, #0]
 8021cd6:	f003 0320 	and.w	r3, r3, #32
 8021cda:	2b00      	cmp	r3, #0
 8021cdc:	d009      	beq.n	8021cf2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021cde:	4b2a      	ldr	r3, [pc, #168]	@ (8021d88 <UART_SetConfig+0x934>)
 8021ce0:	681b      	ldr	r3, [r3, #0]
 8021ce2:	08db      	lsrs	r3, r3, #3
 8021ce4:	f003 0303 	and.w	r3, r3, #3
 8021ce8:	4a24      	ldr	r2, [pc, #144]	@ (8021d7c <UART_SetConfig+0x928>)
 8021cea:	fa22 f303 	lsr.w	r3, r2, r3
 8021cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021cf0:	e00f      	b.n	8021d12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8021cf2:	4b22      	ldr	r3, [pc, #136]	@ (8021d7c <UART_SetConfig+0x928>)
 8021cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021cf6:	e00c      	b.n	8021d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021cf8:	4b21      	ldr	r3, [pc, #132]	@ (8021d80 <UART_SetConfig+0x92c>)
 8021cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021cfc:	e009      	b.n	8021d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021d04:	e005      	b.n	8021d12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8021d06:	2300      	movs	r3, #0
 8021d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021d0a:	2301      	movs	r3, #1
 8021d0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8021d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021d14:	2b00      	cmp	r3, #0
 8021d16:	f000 80e7 	beq.w	8021ee8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021d1a:	697b      	ldr	r3, [r7, #20]
 8021d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021d1e:	4a19      	ldr	r2, [pc, #100]	@ (8021d84 <UART_SetConfig+0x930>)
 8021d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021d24:	461a      	mov	r2, r3
 8021d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8021d2c:	005a      	lsls	r2, r3, #1
 8021d2e:	697b      	ldr	r3, [r7, #20]
 8021d30:	685b      	ldr	r3, [r3, #4]
 8021d32:	085b      	lsrs	r3, r3, #1
 8021d34:	441a      	add	r2, r3
 8021d36:	697b      	ldr	r3, [r7, #20]
 8021d38:	685b      	ldr	r3, [r3, #4]
 8021d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8021d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021d42:	2b0f      	cmp	r3, #15
 8021d44:	d916      	bls.n	8021d74 <UART_SetConfig+0x920>
 8021d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021d4c:	d212      	bcs.n	8021d74 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8021d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021d50:	b29b      	uxth	r3, r3
 8021d52:	f023 030f 	bic.w	r3, r3, #15
 8021d56:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8021d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021d5a:	085b      	lsrs	r3, r3, #1
 8021d5c:	b29b      	uxth	r3, r3
 8021d5e:	f003 0307 	and.w	r3, r3, #7
 8021d62:	b29a      	uxth	r2, r3
 8021d64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8021d66:	4313      	orrs	r3, r2
 8021d68:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8021d6a:	697b      	ldr	r3, [r7, #20]
 8021d6c:	681b      	ldr	r3, [r3, #0]
 8021d6e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8021d70:	60da      	str	r2, [r3, #12]
 8021d72:	e0b9      	b.n	8021ee8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021d74:	2301      	movs	r3, #1
 8021d76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021d7a:	e0b5      	b.n	8021ee8 <UART_SetConfig+0xa94>
 8021d7c:	03d09000 	.word	0x03d09000
 8021d80:	003d0900 	.word	0x003d0900
 8021d84:	08028048 	.word	0x08028048
 8021d88:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8021d8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021d90:	2b20      	cmp	r3, #32
 8021d92:	dc49      	bgt.n	8021e28 <UART_SetConfig+0x9d4>
 8021d94:	2b00      	cmp	r3, #0
 8021d96:	db7c      	blt.n	8021e92 <UART_SetConfig+0xa3e>
 8021d98:	2b20      	cmp	r3, #32
 8021d9a:	d87a      	bhi.n	8021e92 <UART_SetConfig+0xa3e>
 8021d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8021da4 <UART_SetConfig+0x950>)
 8021d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021da2:	bf00      	nop
 8021da4:	08021e2f 	.word	0x08021e2f
 8021da8:	08021e37 	.word	0x08021e37
 8021dac:	08021e93 	.word	0x08021e93
 8021db0:	08021e93 	.word	0x08021e93
 8021db4:	08021e3f 	.word	0x08021e3f
 8021db8:	08021e93 	.word	0x08021e93
 8021dbc:	08021e93 	.word	0x08021e93
 8021dc0:	08021e93 	.word	0x08021e93
 8021dc4:	08021e4f 	.word	0x08021e4f
 8021dc8:	08021e93 	.word	0x08021e93
 8021dcc:	08021e93 	.word	0x08021e93
 8021dd0:	08021e93 	.word	0x08021e93
 8021dd4:	08021e93 	.word	0x08021e93
 8021dd8:	08021e93 	.word	0x08021e93
 8021ddc:	08021e93 	.word	0x08021e93
 8021de0:	08021e93 	.word	0x08021e93
 8021de4:	08021e5f 	.word	0x08021e5f
 8021de8:	08021e93 	.word	0x08021e93
 8021dec:	08021e93 	.word	0x08021e93
 8021df0:	08021e93 	.word	0x08021e93
 8021df4:	08021e93 	.word	0x08021e93
 8021df8:	08021e93 	.word	0x08021e93
 8021dfc:	08021e93 	.word	0x08021e93
 8021e00:	08021e93 	.word	0x08021e93
 8021e04:	08021e93 	.word	0x08021e93
 8021e08:	08021e93 	.word	0x08021e93
 8021e0c:	08021e93 	.word	0x08021e93
 8021e10:	08021e93 	.word	0x08021e93
 8021e14:	08021e93 	.word	0x08021e93
 8021e18:	08021e93 	.word	0x08021e93
 8021e1c:	08021e93 	.word	0x08021e93
 8021e20:	08021e93 	.word	0x08021e93
 8021e24:	08021e85 	.word	0x08021e85
 8021e28:	2b40      	cmp	r3, #64	@ 0x40
 8021e2a:	d02e      	beq.n	8021e8a <UART_SetConfig+0xa36>
 8021e2c:	e031      	b.n	8021e92 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021e2e:	f7fc f88b 	bl	801df48 <HAL_RCC_GetPCLK1Freq>
 8021e32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021e34:	e033      	b.n	8021e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021e36:	f7fc f89d 	bl	801df74 <HAL_RCC_GetPCLK2Freq>
 8021e3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021e3c:	e02f      	b.n	8021e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021e42:	4618      	mov	r0, r3
 8021e44:	f7fd facc 	bl	801f3e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e4c:	e027      	b.n	8021e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021e4e:	f107 0318 	add.w	r3, r7, #24
 8021e52:	4618      	mov	r0, r3
 8021e54:	f7fd fc18 	bl	801f688 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021e58:	69fb      	ldr	r3, [r7, #28]
 8021e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e5c:	e01f      	b.n	8021e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8021f14 <UART_SetConfig+0xac0>)
 8021e60:	681b      	ldr	r3, [r3, #0]
 8021e62:	f003 0320 	and.w	r3, r3, #32
 8021e66:	2b00      	cmp	r3, #0
 8021e68:	d009      	beq.n	8021e7e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8021f14 <UART_SetConfig+0xac0>)
 8021e6c:	681b      	ldr	r3, [r3, #0]
 8021e6e:	08db      	lsrs	r3, r3, #3
 8021e70:	f003 0303 	and.w	r3, r3, #3
 8021e74:	4a28      	ldr	r2, [pc, #160]	@ (8021f18 <UART_SetConfig+0xac4>)
 8021e76:	fa22 f303 	lsr.w	r3, r2, r3
 8021e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021e7c:	e00f      	b.n	8021e9e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8021e7e:	4b26      	ldr	r3, [pc, #152]	@ (8021f18 <UART_SetConfig+0xac4>)
 8021e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e82:	e00c      	b.n	8021e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021e84:	4b25      	ldr	r3, [pc, #148]	@ (8021f1c <UART_SetConfig+0xac8>)
 8021e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e88:	e009      	b.n	8021e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e90:	e005      	b.n	8021e9e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8021e92:	2300      	movs	r3, #0
 8021e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021e96:	2301      	movs	r3, #1
 8021e98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021e9c:	bf00      	nop
    }

    if (pclk != 0U)
 8021e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021ea0:	2b00      	cmp	r3, #0
 8021ea2:	d021      	beq.n	8021ee8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021ea4:	697b      	ldr	r3, [r7, #20]
 8021ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8021f20 <UART_SetConfig+0xacc>)
 8021eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021eae:	461a      	mov	r2, r3
 8021eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021eb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8021eb6:	697b      	ldr	r3, [r7, #20]
 8021eb8:	685b      	ldr	r3, [r3, #4]
 8021eba:	085b      	lsrs	r3, r3, #1
 8021ebc:	441a      	add	r2, r3
 8021ebe:	697b      	ldr	r3, [r7, #20]
 8021ec0:	685b      	ldr	r3, [r3, #4]
 8021ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8021ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021eca:	2b0f      	cmp	r3, #15
 8021ecc:	d909      	bls.n	8021ee2 <UART_SetConfig+0xa8e>
 8021ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021ed4:	d205      	bcs.n	8021ee2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8021ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021ed8:	b29a      	uxth	r2, r3
 8021eda:	697b      	ldr	r3, [r7, #20]
 8021edc:	681b      	ldr	r3, [r3, #0]
 8021ede:	60da      	str	r2, [r3, #12]
 8021ee0:	e002      	b.n	8021ee8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021ee2:	2301      	movs	r3, #1
 8021ee4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8021ee8:	697b      	ldr	r3, [r7, #20]
 8021eea:	2201      	movs	r2, #1
 8021eec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8021ef0:	697b      	ldr	r3, [r7, #20]
 8021ef2:	2201      	movs	r2, #1
 8021ef4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8021ef8:	697b      	ldr	r3, [r7, #20]
 8021efa:	2200      	movs	r2, #0
 8021efc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8021efe:	697b      	ldr	r3, [r7, #20]
 8021f00:	2200      	movs	r2, #0
 8021f02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8021f04:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8021f08:	4618      	mov	r0, r3
 8021f0a:	3748      	adds	r7, #72	@ 0x48
 8021f0c:	46bd      	mov	sp, r7
 8021f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021f12:	bf00      	nop
 8021f14:	58024400 	.word	0x58024400
 8021f18:	03d09000 	.word	0x03d09000
 8021f1c:	003d0900 	.word	0x003d0900
 8021f20:	08028048 	.word	0x08028048

08021f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8021f24:	b480      	push	{r7}
 8021f26:	b083      	sub	sp, #12
 8021f28:	af00      	add	r7, sp, #0
 8021f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f30:	f003 0308 	and.w	r3, r3, #8
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	d00a      	beq.n	8021f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8021f38:	687b      	ldr	r3, [r7, #4]
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	685b      	ldr	r3, [r3, #4]
 8021f3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021f46:	687b      	ldr	r3, [r7, #4]
 8021f48:	681b      	ldr	r3, [r3, #0]
 8021f4a:	430a      	orrs	r2, r1
 8021f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021f4e:	687b      	ldr	r3, [r7, #4]
 8021f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f52:	f003 0301 	and.w	r3, r3, #1
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	d00a      	beq.n	8021f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	681b      	ldr	r3, [r3, #0]
 8021f5e:	685b      	ldr	r3, [r3, #4]
 8021f60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8021f64:	687b      	ldr	r3, [r7, #4]
 8021f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	681b      	ldr	r3, [r3, #0]
 8021f6c:	430a      	orrs	r2, r1
 8021f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8021f70:	687b      	ldr	r3, [r7, #4]
 8021f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f74:	f003 0302 	and.w	r3, r3, #2
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	d00a      	beq.n	8021f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8021f7c:	687b      	ldr	r3, [r7, #4]
 8021f7e:	681b      	ldr	r3, [r3, #0]
 8021f80:	685b      	ldr	r3, [r3, #4]
 8021f82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8021f8a:	687b      	ldr	r3, [r7, #4]
 8021f8c:	681b      	ldr	r3, [r3, #0]
 8021f8e:	430a      	orrs	r2, r1
 8021f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f96:	f003 0304 	and.w	r3, r3, #4
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d00a      	beq.n	8021fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	681b      	ldr	r3, [r3, #0]
 8021fa2:	685b      	ldr	r3, [r3, #4]
 8021fa4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8021fa8:	687b      	ldr	r3, [r7, #4]
 8021faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8021fac:	687b      	ldr	r3, [r7, #4]
 8021fae:	681b      	ldr	r3, [r3, #0]
 8021fb0:	430a      	orrs	r2, r1
 8021fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8021fb4:	687b      	ldr	r3, [r7, #4]
 8021fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021fb8:	f003 0310 	and.w	r3, r3, #16
 8021fbc:	2b00      	cmp	r3, #0
 8021fbe:	d00a      	beq.n	8021fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8021fc0:	687b      	ldr	r3, [r7, #4]
 8021fc2:	681b      	ldr	r3, [r3, #0]
 8021fc4:	689b      	ldr	r3, [r3, #8]
 8021fc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8021fce:	687b      	ldr	r3, [r7, #4]
 8021fd0:	681b      	ldr	r3, [r3, #0]
 8021fd2:	430a      	orrs	r2, r1
 8021fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021fda:	f003 0320 	and.w	r3, r3, #32
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d00a      	beq.n	8021ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	681b      	ldr	r3, [r3, #0]
 8021fe6:	689b      	ldr	r3, [r3, #8]
 8021fe8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8021fec:	687b      	ldr	r3, [r7, #4]
 8021fee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021ff0:	687b      	ldr	r3, [r7, #4]
 8021ff2:	681b      	ldr	r3, [r3, #0]
 8021ff4:	430a      	orrs	r2, r1
 8021ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8021ff8:	687b      	ldr	r3, [r7, #4]
 8021ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022000:	2b00      	cmp	r3, #0
 8022002:	d01a      	beq.n	802203a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8022004:	687b      	ldr	r3, [r7, #4]
 8022006:	681b      	ldr	r3, [r3, #0]
 8022008:	685b      	ldr	r3, [r3, #4]
 802200a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 802200e:	687b      	ldr	r3, [r7, #4]
 8022010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8022012:	687b      	ldr	r3, [r7, #4]
 8022014:	681b      	ldr	r3, [r3, #0]
 8022016:	430a      	orrs	r2, r1
 8022018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802201e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8022022:	d10a      	bne.n	802203a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	681b      	ldr	r3, [r3, #0]
 8022028:	685b      	ldr	r3, [r3, #4]
 802202a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 802202e:	687b      	ldr	r3, [r7, #4]
 8022030:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8022032:	687b      	ldr	r3, [r7, #4]
 8022034:	681b      	ldr	r3, [r3, #0]
 8022036:	430a      	orrs	r2, r1
 8022038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802203e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022042:	2b00      	cmp	r3, #0
 8022044:	d00a      	beq.n	802205c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8022046:	687b      	ldr	r3, [r7, #4]
 8022048:	681b      	ldr	r3, [r3, #0]
 802204a:	685b      	ldr	r3, [r3, #4]
 802204c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8022050:	687b      	ldr	r3, [r7, #4]
 8022052:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8022054:	687b      	ldr	r3, [r7, #4]
 8022056:	681b      	ldr	r3, [r3, #0]
 8022058:	430a      	orrs	r2, r1
 802205a:	605a      	str	r2, [r3, #4]
  }
}
 802205c:	bf00      	nop
 802205e:	370c      	adds	r7, #12
 8022060:	46bd      	mov	sp, r7
 8022062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022066:	4770      	bx	lr

08022068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8022068:	b580      	push	{r7, lr}
 802206a:	b098      	sub	sp, #96	@ 0x60
 802206c:	af02      	add	r7, sp, #8
 802206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022070:	687b      	ldr	r3, [r7, #4]
 8022072:	2200      	movs	r2, #0
 8022074:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8022078:	f7f8 fb94 	bl	801a7a4 <HAL_GetTick>
 802207c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	681b      	ldr	r3, [r3, #0]
 8022082:	681b      	ldr	r3, [r3, #0]
 8022084:	f003 0308 	and.w	r3, r3, #8
 8022088:	2b08      	cmp	r3, #8
 802208a:	d12f      	bne.n	80220ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802208c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8022090:	9300      	str	r3, [sp, #0]
 8022092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022094:	2200      	movs	r2, #0
 8022096:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 802209a:	6878      	ldr	r0, [r7, #4]
 802209c:	f000 f88e 	bl	80221bc <UART_WaitOnFlagUntilTimeout>
 80220a0:	4603      	mov	r3, r0
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	d022      	beq.n	80220ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80220a6:	687b      	ldr	r3, [r7, #4]
 80220a8:	681b      	ldr	r3, [r3, #0]
 80220aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80220ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80220ae:	e853 3f00 	ldrex	r3, [r3]
 80220b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80220b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80220b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80220ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80220bc:	687b      	ldr	r3, [r7, #4]
 80220be:	681b      	ldr	r3, [r3, #0]
 80220c0:	461a      	mov	r2, r3
 80220c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80220c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80220c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80220c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80220ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80220cc:	e841 2300 	strex	r3, r2, [r1]
 80220d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80220d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80220d4:	2b00      	cmp	r3, #0
 80220d6:	d1e6      	bne.n	80220a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	2220      	movs	r2, #32
 80220dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	2200      	movs	r2, #0
 80220e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80220e8:	2303      	movs	r3, #3
 80220ea:	e063      	b.n	80221b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80220ec:	687b      	ldr	r3, [r7, #4]
 80220ee:	681b      	ldr	r3, [r3, #0]
 80220f0:	681b      	ldr	r3, [r3, #0]
 80220f2:	f003 0304 	and.w	r3, r3, #4
 80220f6:	2b04      	cmp	r3, #4
 80220f8:	d149      	bne.n	802218e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80220fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80220fe:	9300      	str	r3, [sp, #0]
 8022100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022102:	2200      	movs	r2, #0
 8022104:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8022108:	6878      	ldr	r0, [r7, #4]
 802210a:	f000 f857 	bl	80221bc <UART_WaitOnFlagUntilTimeout>
 802210e:	4603      	mov	r3, r0
 8022110:	2b00      	cmp	r3, #0
 8022112:	d03c      	beq.n	802218e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8022114:	687b      	ldr	r3, [r7, #4]
 8022116:	681b      	ldr	r3, [r3, #0]
 8022118:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802211c:	e853 3f00 	ldrex	r3, [r3]
 8022120:	623b      	str	r3, [r7, #32]
   return(result);
 8022122:	6a3b      	ldr	r3, [r7, #32]
 8022124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8022128:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802212a:	687b      	ldr	r3, [r7, #4]
 802212c:	681b      	ldr	r3, [r3, #0]
 802212e:	461a      	mov	r2, r3
 8022130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022132:	633b      	str	r3, [r7, #48]	@ 0x30
 8022134:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802213a:	e841 2300 	strex	r3, r2, [r1]
 802213e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8022140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022142:	2b00      	cmp	r3, #0
 8022144:	d1e6      	bne.n	8022114 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022146:	687b      	ldr	r3, [r7, #4]
 8022148:	681b      	ldr	r3, [r3, #0]
 802214a:	3308      	adds	r3, #8
 802214c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802214e:	693b      	ldr	r3, [r7, #16]
 8022150:	e853 3f00 	ldrex	r3, [r3]
 8022154:	60fb      	str	r3, [r7, #12]
   return(result);
 8022156:	68fb      	ldr	r3, [r7, #12]
 8022158:	f023 0301 	bic.w	r3, r3, #1
 802215c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802215e:	687b      	ldr	r3, [r7, #4]
 8022160:	681b      	ldr	r3, [r3, #0]
 8022162:	3308      	adds	r3, #8
 8022164:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022166:	61fa      	str	r2, [r7, #28]
 8022168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802216a:	69b9      	ldr	r1, [r7, #24]
 802216c:	69fa      	ldr	r2, [r7, #28]
 802216e:	e841 2300 	strex	r3, r2, [r1]
 8022172:	617b      	str	r3, [r7, #20]
   return(result);
 8022174:	697b      	ldr	r3, [r7, #20]
 8022176:	2b00      	cmp	r3, #0
 8022178:	d1e5      	bne.n	8022146 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	2220      	movs	r2, #32
 802217e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8022182:	687b      	ldr	r3, [r7, #4]
 8022184:	2200      	movs	r2, #0
 8022186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802218a:	2303      	movs	r3, #3
 802218c:	e012      	b.n	80221b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	2220      	movs	r2, #32
 8022192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8022196:	687b      	ldr	r3, [r7, #4]
 8022198:	2220      	movs	r2, #32
 802219a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	2200      	movs	r2, #0
 80221a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	2200      	movs	r2, #0
 80221a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80221aa:	687b      	ldr	r3, [r7, #4]
 80221ac:	2200      	movs	r2, #0
 80221ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80221b2:	2300      	movs	r3, #0
}
 80221b4:	4618      	mov	r0, r3
 80221b6:	3758      	adds	r7, #88	@ 0x58
 80221b8:	46bd      	mov	sp, r7
 80221ba:	bd80      	pop	{r7, pc}

080221bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80221bc:	b580      	push	{r7, lr}
 80221be:	b084      	sub	sp, #16
 80221c0:	af00      	add	r7, sp, #0
 80221c2:	60f8      	str	r0, [r7, #12]
 80221c4:	60b9      	str	r1, [r7, #8]
 80221c6:	603b      	str	r3, [r7, #0]
 80221c8:	4613      	mov	r3, r2
 80221ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80221cc:	e04f      	b.n	802226e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80221ce:	69bb      	ldr	r3, [r7, #24]
 80221d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80221d4:	d04b      	beq.n	802226e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80221d6:	f7f8 fae5 	bl	801a7a4 <HAL_GetTick>
 80221da:	4602      	mov	r2, r0
 80221dc:	683b      	ldr	r3, [r7, #0]
 80221de:	1ad3      	subs	r3, r2, r3
 80221e0:	69ba      	ldr	r2, [r7, #24]
 80221e2:	429a      	cmp	r2, r3
 80221e4:	d302      	bcc.n	80221ec <UART_WaitOnFlagUntilTimeout+0x30>
 80221e6:	69bb      	ldr	r3, [r7, #24]
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	d101      	bne.n	80221f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80221ec:	2303      	movs	r3, #3
 80221ee:	e04e      	b.n	802228e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80221f0:	68fb      	ldr	r3, [r7, #12]
 80221f2:	681b      	ldr	r3, [r3, #0]
 80221f4:	681b      	ldr	r3, [r3, #0]
 80221f6:	f003 0304 	and.w	r3, r3, #4
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	d037      	beq.n	802226e <UART_WaitOnFlagUntilTimeout+0xb2>
 80221fe:	68bb      	ldr	r3, [r7, #8]
 8022200:	2b80      	cmp	r3, #128	@ 0x80
 8022202:	d034      	beq.n	802226e <UART_WaitOnFlagUntilTimeout+0xb2>
 8022204:	68bb      	ldr	r3, [r7, #8]
 8022206:	2b40      	cmp	r3, #64	@ 0x40
 8022208:	d031      	beq.n	802226e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802220a:	68fb      	ldr	r3, [r7, #12]
 802220c:	681b      	ldr	r3, [r3, #0]
 802220e:	69db      	ldr	r3, [r3, #28]
 8022210:	f003 0308 	and.w	r3, r3, #8
 8022214:	2b08      	cmp	r3, #8
 8022216:	d110      	bne.n	802223a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8022218:	68fb      	ldr	r3, [r7, #12]
 802221a:	681b      	ldr	r3, [r3, #0]
 802221c:	2208      	movs	r2, #8
 802221e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8022220:	68f8      	ldr	r0, [r7, #12]
 8022222:	f000 f839 	bl	8022298 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8022226:	68fb      	ldr	r3, [r7, #12]
 8022228:	2208      	movs	r2, #8
 802222a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802222e:	68fb      	ldr	r3, [r7, #12]
 8022230:	2200      	movs	r2, #0
 8022232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8022236:	2301      	movs	r3, #1
 8022238:	e029      	b.n	802228e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802223a:	68fb      	ldr	r3, [r7, #12]
 802223c:	681b      	ldr	r3, [r3, #0]
 802223e:	69db      	ldr	r3, [r3, #28]
 8022240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8022244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8022248:	d111      	bne.n	802226e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802224a:	68fb      	ldr	r3, [r7, #12]
 802224c:	681b      	ldr	r3, [r3, #0]
 802224e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8022252:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8022254:	68f8      	ldr	r0, [r7, #12]
 8022256:	f000 f81f 	bl	8022298 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802225a:	68fb      	ldr	r3, [r7, #12]
 802225c:	2220      	movs	r2, #32
 802225e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8022262:	68fb      	ldr	r3, [r7, #12]
 8022264:	2200      	movs	r2, #0
 8022266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 802226a:	2303      	movs	r3, #3
 802226c:	e00f      	b.n	802228e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802226e:	68fb      	ldr	r3, [r7, #12]
 8022270:	681b      	ldr	r3, [r3, #0]
 8022272:	69da      	ldr	r2, [r3, #28]
 8022274:	68bb      	ldr	r3, [r7, #8]
 8022276:	4013      	ands	r3, r2
 8022278:	68ba      	ldr	r2, [r7, #8]
 802227a:	429a      	cmp	r2, r3
 802227c:	bf0c      	ite	eq
 802227e:	2301      	moveq	r3, #1
 8022280:	2300      	movne	r3, #0
 8022282:	b2db      	uxtb	r3, r3
 8022284:	461a      	mov	r2, r3
 8022286:	79fb      	ldrb	r3, [r7, #7]
 8022288:	429a      	cmp	r2, r3
 802228a:	d0a0      	beq.n	80221ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802228c:	2300      	movs	r3, #0
}
 802228e:	4618      	mov	r0, r3
 8022290:	3710      	adds	r7, #16
 8022292:	46bd      	mov	sp, r7
 8022294:	bd80      	pop	{r7, pc}
	...

08022298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8022298:	b480      	push	{r7}
 802229a:	b095      	sub	sp, #84	@ 0x54
 802229c:	af00      	add	r7, sp, #0
 802229e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	681b      	ldr	r3, [r3, #0]
 80222a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80222a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80222a8:	e853 3f00 	ldrex	r3, [r3]
 80222ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80222ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80222b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80222b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80222b6:	687b      	ldr	r3, [r7, #4]
 80222b8:	681b      	ldr	r3, [r3, #0]
 80222ba:	461a      	mov	r2, r3
 80222bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80222be:	643b      	str	r3, [r7, #64]	@ 0x40
 80222c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80222c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80222c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80222c6:	e841 2300 	strex	r3, r2, [r1]
 80222ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80222cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80222ce:	2b00      	cmp	r3, #0
 80222d0:	d1e6      	bne.n	80222a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80222d2:	687b      	ldr	r3, [r7, #4]
 80222d4:	681b      	ldr	r3, [r3, #0]
 80222d6:	3308      	adds	r3, #8
 80222d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80222da:	6a3b      	ldr	r3, [r7, #32]
 80222dc:	e853 3f00 	ldrex	r3, [r3]
 80222e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80222e2:	69fa      	ldr	r2, [r7, #28]
 80222e4:	4b1e      	ldr	r3, [pc, #120]	@ (8022360 <UART_EndRxTransfer+0xc8>)
 80222e6:	4013      	ands	r3, r2
 80222e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80222ea:	687b      	ldr	r3, [r7, #4]
 80222ec:	681b      	ldr	r3, [r3, #0]
 80222ee:	3308      	adds	r3, #8
 80222f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80222f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80222f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80222f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80222f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80222fa:	e841 2300 	strex	r3, r2, [r1]
 80222fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8022300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022302:	2b00      	cmp	r3, #0
 8022304:	d1e5      	bne.n	80222d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022306:	687b      	ldr	r3, [r7, #4]
 8022308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802230a:	2b01      	cmp	r3, #1
 802230c:	d118      	bne.n	8022340 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802230e:	687b      	ldr	r3, [r7, #4]
 8022310:	681b      	ldr	r3, [r3, #0]
 8022312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022314:	68fb      	ldr	r3, [r7, #12]
 8022316:	e853 3f00 	ldrex	r3, [r3]
 802231a:	60bb      	str	r3, [r7, #8]
   return(result);
 802231c:	68bb      	ldr	r3, [r7, #8]
 802231e:	f023 0310 	bic.w	r3, r3, #16
 8022322:	647b      	str	r3, [r7, #68]	@ 0x44
 8022324:	687b      	ldr	r3, [r7, #4]
 8022326:	681b      	ldr	r3, [r3, #0]
 8022328:	461a      	mov	r2, r3
 802232a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802232c:	61bb      	str	r3, [r7, #24]
 802232e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022330:	6979      	ldr	r1, [r7, #20]
 8022332:	69ba      	ldr	r2, [r7, #24]
 8022334:	e841 2300 	strex	r3, r2, [r1]
 8022338:	613b      	str	r3, [r7, #16]
   return(result);
 802233a:	693b      	ldr	r3, [r7, #16]
 802233c:	2b00      	cmp	r3, #0
 802233e:	d1e6      	bne.n	802230e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8022340:	687b      	ldr	r3, [r7, #4]
 8022342:	2220      	movs	r2, #32
 8022344:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022348:	687b      	ldr	r3, [r7, #4]
 802234a:	2200      	movs	r2, #0
 802234c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 802234e:	687b      	ldr	r3, [r7, #4]
 8022350:	2200      	movs	r2, #0
 8022352:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8022354:	bf00      	nop
 8022356:	3754      	adds	r7, #84	@ 0x54
 8022358:	46bd      	mov	sp, r7
 802235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802235e:	4770      	bx	lr
 8022360:	effffffe 	.word	0xeffffffe

08022364 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8022364:	b480      	push	{r7}
 8022366:	b085      	sub	sp, #20
 8022368:	af00      	add	r7, sp, #0
 802236a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802236c:	687b      	ldr	r3, [r7, #4]
 802236e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8022372:	2b01      	cmp	r3, #1
 8022374:	d101      	bne.n	802237a <HAL_UARTEx_DisableFifoMode+0x16>
 8022376:	2302      	movs	r3, #2
 8022378:	e027      	b.n	80223ca <HAL_UARTEx_DisableFifoMode+0x66>
 802237a:	687b      	ldr	r3, [r7, #4]
 802237c:	2201      	movs	r2, #1
 802237e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022382:	687b      	ldr	r3, [r7, #4]
 8022384:	2224      	movs	r2, #36	@ 0x24
 8022386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	681b      	ldr	r3, [r3, #0]
 802238e:	681b      	ldr	r3, [r3, #0]
 8022390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022392:	687b      	ldr	r3, [r7, #4]
 8022394:	681b      	ldr	r3, [r3, #0]
 8022396:	681a      	ldr	r2, [r3, #0]
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	681b      	ldr	r3, [r3, #0]
 802239c:	f022 0201 	bic.w	r2, r2, #1
 80223a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80223a2:	68fb      	ldr	r3, [r7, #12]
 80223a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80223a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80223aa:	687b      	ldr	r3, [r7, #4]
 80223ac:	2200      	movs	r2, #0
 80223ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	681b      	ldr	r3, [r3, #0]
 80223b4:	68fa      	ldr	r2, [r7, #12]
 80223b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80223b8:	687b      	ldr	r3, [r7, #4]
 80223ba:	2220      	movs	r2, #32
 80223bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	2200      	movs	r2, #0
 80223c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80223c8:	2300      	movs	r3, #0
}
 80223ca:	4618      	mov	r0, r3
 80223cc:	3714      	adds	r7, #20
 80223ce:	46bd      	mov	sp, r7
 80223d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223d4:	4770      	bx	lr

080223d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80223d6:	b580      	push	{r7, lr}
 80223d8:	b084      	sub	sp, #16
 80223da:	af00      	add	r7, sp, #0
 80223dc:	6078      	str	r0, [r7, #4]
 80223de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80223e0:	687b      	ldr	r3, [r7, #4]
 80223e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80223e6:	2b01      	cmp	r3, #1
 80223e8:	d101      	bne.n	80223ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80223ea:	2302      	movs	r3, #2
 80223ec:	e02d      	b.n	802244a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80223ee:	687b      	ldr	r3, [r7, #4]
 80223f0:	2201      	movs	r2, #1
 80223f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	2224      	movs	r2, #36	@ 0x24
 80223fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	681b      	ldr	r3, [r3, #0]
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022406:	687b      	ldr	r3, [r7, #4]
 8022408:	681b      	ldr	r3, [r3, #0]
 802240a:	681a      	ldr	r2, [r3, #0]
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	681b      	ldr	r3, [r3, #0]
 8022410:	f022 0201 	bic.w	r2, r2, #1
 8022414:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8022416:	687b      	ldr	r3, [r7, #4]
 8022418:	681b      	ldr	r3, [r3, #0]
 802241a:	689b      	ldr	r3, [r3, #8]
 802241c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	681b      	ldr	r3, [r3, #0]
 8022424:	683a      	ldr	r2, [r7, #0]
 8022426:	430a      	orrs	r2, r1
 8022428:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802242a:	6878      	ldr	r0, [r7, #4]
 802242c:	f000 f850 	bl	80224d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022430:	687b      	ldr	r3, [r7, #4]
 8022432:	681b      	ldr	r3, [r3, #0]
 8022434:	68fa      	ldr	r2, [r7, #12]
 8022436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022438:	687b      	ldr	r3, [r7, #4]
 802243a:	2220      	movs	r2, #32
 802243c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022440:	687b      	ldr	r3, [r7, #4]
 8022442:	2200      	movs	r2, #0
 8022444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022448:	2300      	movs	r3, #0
}
 802244a:	4618      	mov	r0, r3
 802244c:	3710      	adds	r7, #16
 802244e:	46bd      	mov	sp, r7
 8022450:	bd80      	pop	{r7, pc}

08022452 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8022452:	b580      	push	{r7, lr}
 8022454:	b084      	sub	sp, #16
 8022456:	af00      	add	r7, sp, #0
 8022458:	6078      	str	r0, [r7, #4]
 802245a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8022462:	2b01      	cmp	r3, #1
 8022464:	d101      	bne.n	802246a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8022466:	2302      	movs	r3, #2
 8022468:	e02d      	b.n	80224c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	2201      	movs	r2, #1
 802246e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	2224      	movs	r2, #36	@ 0x24
 8022476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802247a:	687b      	ldr	r3, [r7, #4]
 802247c:	681b      	ldr	r3, [r3, #0]
 802247e:	681b      	ldr	r3, [r3, #0]
 8022480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	681b      	ldr	r3, [r3, #0]
 8022486:	681a      	ldr	r2, [r3, #0]
 8022488:	687b      	ldr	r3, [r7, #4]
 802248a:	681b      	ldr	r3, [r3, #0]
 802248c:	f022 0201 	bic.w	r2, r2, #1
 8022490:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8022492:	687b      	ldr	r3, [r7, #4]
 8022494:	681b      	ldr	r3, [r3, #0]
 8022496:	689b      	ldr	r3, [r3, #8]
 8022498:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	681b      	ldr	r3, [r3, #0]
 80224a0:	683a      	ldr	r2, [r7, #0]
 80224a2:	430a      	orrs	r2, r1
 80224a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80224a6:	6878      	ldr	r0, [r7, #4]
 80224a8:	f000 f812 	bl	80224d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80224ac:	687b      	ldr	r3, [r7, #4]
 80224ae:	681b      	ldr	r3, [r3, #0]
 80224b0:	68fa      	ldr	r2, [r7, #12]
 80224b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	2220      	movs	r2, #32
 80224b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80224bc:	687b      	ldr	r3, [r7, #4]
 80224be:	2200      	movs	r2, #0
 80224c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80224c4:	2300      	movs	r3, #0
}
 80224c6:	4618      	mov	r0, r3
 80224c8:	3710      	adds	r7, #16
 80224ca:	46bd      	mov	sp, r7
 80224cc:	bd80      	pop	{r7, pc}
	...

080224d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80224d0:	b480      	push	{r7}
 80224d2:	b085      	sub	sp, #20
 80224d4:	af00      	add	r7, sp, #0
 80224d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80224dc:	2b00      	cmp	r3, #0
 80224de:	d108      	bne.n	80224f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	2201      	movs	r2, #1
 80224e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	2201      	movs	r2, #1
 80224ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80224f0:	e031      	b.n	8022556 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80224f2:	2310      	movs	r3, #16
 80224f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80224f6:	2310      	movs	r3, #16
 80224f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80224fa:	687b      	ldr	r3, [r7, #4]
 80224fc:	681b      	ldr	r3, [r3, #0]
 80224fe:	689b      	ldr	r3, [r3, #8]
 8022500:	0e5b      	lsrs	r3, r3, #25
 8022502:	b2db      	uxtb	r3, r3
 8022504:	f003 0307 	and.w	r3, r3, #7
 8022508:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	681b      	ldr	r3, [r3, #0]
 802250e:	689b      	ldr	r3, [r3, #8]
 8022510:	0f5b      	lsrs	r3, r3, #29
 8022512:	b2db      	uxtb	r3, r3
 8022514:	f003 0307 	and.w	r3, r3, #7
 8022518:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802251a:	7bbb      	ldrb	r3, [r7, #14]
 802251c:	7b3a      	ldrb	r2, [r7, #12]
 802251e:	4911      	ldr	r1, [pc, #68]	@ (8022564 <UARTEx_SetNbDataToProcess+0x94>)
 8022520:	5c8a      	ldrb	r2, [r1, r2]
 8022522:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8022526:	7b3a      	ldrb	r2, [r7, #12]
 8022528:	490f      	ldr	r1, [pc, #60]	@ (8022568 <UARTEx_SetNbDataToProcess+0x98>)
 802252a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802252c:	fb93 f3f2 	sdiv	r3, r3, r2
 8022530:	b29a      	uxth	r2, r3
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8022538:	7bfb      	ldrb	r3, [r7, #15]
 802253a:	7b7a      	ldrb	r2, [r7, #13]
 802253c:	4909      	ldr	r1, [pc, #36]	@ (8022564 <UARTEx_SetNbDataToProcess+0x94>)
 802253e:	5c8a      	ldrb	r2, [r1, r2]
 8022540:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8022544:	7b7a      	ldrb	r2, [r7, #13]
 8022546:	4908      	ldr	r1, [pc, #32]	@ (8022568 <UARTEx_SetNbDataToProcess+0x98>)
 8022548:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802254a:	fb93 f3f2 	sdiv	r3, r3, r2
 802254e:	b29a      	uxth	r2, r3
 8022550:	687b      	ldr	r3, [r7, #4]
 8022552:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8022556:	bf00      	nop
 8022558:	3714      	adds	r7, #20
 802255a:	46bd      	mov	sp, r7
 802255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022560:	4770      	bx	lr
 8022562:	bf00      	nop
 8022564:	08028060 	.word	0x08028060
 8022568:	08028068 	.word	0x08028068

0802256c <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 802256c:	b580      	push	{r7, lr}
 802256e:	b082      	sub	sp, #8
 8022570:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 8022572:	4b15      	ldr	r3, [pc, #84]	@ (80225c8 <prvInitialiseLogging+0x5c>)
 8022574:	681b      	ldr	r3, [r3, #0]
 8022576:	2b00      	cmp	r3, #0
 8022578:	d120      	bne.n	80225bc <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802257a:	f7e3 f8bf 	bl	80056fc <xTaskGetSchedulerState>
 802257e:	4603      	mov	r3, r0
 8022580:	2b02      	cmp	r3, #2
 8022582:	d11b      	bne.n	80225bc <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8022584:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 8022588:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 802258a:	6878      	ldr	r0, [r7, #4]
 802258c:	f7e4 fa1a 	bl	80069c4 <pvPortMalloc>
 8022590:	4603      	mov	r3, r0
 8022592:	4a0e      	ldr	r2, [pc, #56]	@ (80225cc <prvInitialiseLogging+0x60>)
 8022594:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 8022596:	4b0d      	ldr	r3, [pc, #52]	@ (80225cc <prvInitialiseLogging+0x60>)
 8022598:	681b      	ldr	r3, [r3, #0]
 802259a:	2b00      	cmp	r3, #0
 802259c:	d00e      	beq.n	80225bc <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 802259e:	4b0b      	ldr	r3, [pc, #44]	@ (80225cc <prvInitialiseLogging+0x60>)
 80225a0:	681b      	ldr	r3, [r3, #0]
 80225a2:	687a      	ldr	r2, [r7, #4]
 80225a4:	2100      	movs	r1, #0
 80225a6:	4618      	mov	r0, r3
 80225a8:	f000 fc35 	bl	8022e16 <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 80225ac:	4b07      	ldr	r3, [pc, #28]	@ (80225cc <prvInitialiseLogging+0x60>)
 80225ae:	681b      	ldr	r3, [r3, #0]
 80225b0:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 80225b4:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 80225b6:	4b04      	ldr	r3, [pc, #16]	@ (80225c8 <prvInitialiseLogging+0x5c>)
 80225b8:	2201      	movs	r2, #1
 80225ba:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 80225bc:	4b02      	ldr	r3, [pc, #8]	@ (80225c8 <prvInitialiseLogging+0x5c>)
 80225be:	681b      	ldr	r3, [r3, #0]
}
 80225c0:	4618      	mov	r0, r3
 80225c2:	3708      	adds	r7, #8
 80225c4:	46bd      	mov	sp, r7
 80225c6:	bd80      	pop	{r7, pc}
 80225c8:	20002668 	.word	0x20002668
 80225cc:	20002658 	.word	0x20002658

080225d0 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 80225d0:	b580      	push	{r7, lr}
 80225d2:	b086      	sub	sp, #24
 80225d4:	af02      	add	r7, sp, #8
 80225d6:	6078      	str	r0, [r7, #4]
 80225d8:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 80225da:	2300      	movs	r3, #0
 80225dc:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 80225de:	4b24      	ldr	r3, [pc, #144]	@ (8022670 <prvGetMessageFromStreamBuffer+0xa0>)
 80225e0:	681b      	ldr	r3, [r3, #0]
 80225e2:	2b00      	cmp	r3, #0
 80225e4:	d03f      	beq.n	8022666 <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 80225e6:	4b22      	ldr	r3, [pc, #136]	@ (8022670 <prvGetMessageFromStreamBuffer+0xa0>)
 80225e8:	681b      	ldr	r3, [r3, #0]
 80225ea:	4618      	mov	r0, r3
 80225ec:	f7ee fe19 	bl	8011222 <uxStreamBufferGetSize>
 80225f0:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 80225f2:	68fb      	ldr	r3, [r7, #12]
 80225f4:	2b04      	cmp	r3, #4
 80225f6:	d936      	bls.n	8022666 <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 80225f8:	f7e2 fa62 	bl	8004ac0 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 80225fc:	4b1c      	ldr	r3, [pc, #112]	@ (8022670 <prvGetMessageFromStreamBuffer+0xa0>)
 80225fe:	6818      	ldr	r0, [r3, #0]
 8022600:	f107 0208 	add.w	r2, r7, #8
 8022604:	2300      	movs	r3, #0
 8022606:	9300      	str	r3, [sp, #0]
 8022608:	2304      	movs	r3, #4
 802260a:	2100      	movs	r1, #0
 802260c:	f7ee ff27 	bl	801145e <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 8022610:	68bb      	ldr	r3, [r7, #8]
 8022612:	683a      	ldr	r2, [r7, #0]
 8022614:	429a      	cmp	r2, r3
 8022616:	d216      	bcs.n	8022646 <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 8022618:	4b15      	ldr	r3, [pc, #84]	@ (8022670 <prvGetMessageFromStreamBuffer+0xa0>)
 802261a:	6818      	ldr	r0, [r3, #0]
 802261c:	68bb      	ldr	r3, [r7, #8]
 802261e:	2200      	movs	r2, #0
 8022620:	9200      	str	r2, [sp, #0]
 8022622:	4a14      	ldr	r2, [pc, #80]	@ (8022674 <prvGetMessageFromStreamBuffer+0xa4>)
 8022624:	2100      	movs	r1, #0
 8022626:	f7ee ff1a 	bl	801145e <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 802262a:	683a      	ldr	r2, [r7, #0]
 802262c:	4911      	ldr	r1, [pc, #68]	@ (8022674 <prvGetMessageFromStreamBuffer+0xa4>)
 802262e:	6878      	ldr	r0, [r7, #4]
 8022630:	f000 fae4 	bl	8022bfc <memcpy>
					xMessageLength = xBufferLength;
 8022634:	683b      	ldr	r3, [r7, #0]
 8022636:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 8022638:	683b      	ldr	r3, [r7, #0]
 802263a:	3b01      	subs	r3, #1
 802263c:	687a      	ldr	r2, [r7, #4]
 802263e:	4413      	add	r3, r2
 8022640:	2200      	movs	r2, #0
 8022642:	701a      	strb	r2, [r3, #0]
 8022644:	e00d      	b.n	8022662 <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 8022646:	4b0a      	ldr	r3, [pc, #40]	@ (8022670 <prvGetMessageFromStreamBuffer+0xa0>)
 8022648:	6818      	ldr	r0, [r3, #0]
 802264a:	68bb      	ldr	r3, [r7, #8]
 802264c:	2200      	movs	r2, #0
 802264e:	9200      	str	r2, [sp, #0]
 8022650:	687a      	ldr	r2, [r7, #4]
 8022652:	2100      	movs	r1, #0
 8022654:	f7ee ff03 	bl	801145e <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 8022658:	68bb      	ldr	r3, [r7, #8]
 802265a:	687a      	ldr	r2, [r7, #4]
 802265c:	4413      	add	r3, r2
 802265e:	2200      	movs	r2, #0
 8022660:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 8022662:	f7e2 fa3b 	bl	8004adc <xTaskResumeAll>
		}
	}

	return xMessageLength;
 8022666:	68bb      	ldr	r3, [r7, #8]
}
 8022668:	4618      	mov	r0, r3
 802266a:	3710      	adds	r7, #16
 802266c:	46bd      	mov	sp, r7
 802266e:	bd80      	pop	{r7, pc}
 8022670:	20002658 	.word	0x20002658
 8022674:	20002590 	.word	0x20002590

08022678 <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 8022678:	b580      	push	{r7, lr}
 802267a:	b08e      	sub	sp, #56	@ 0x38
 802267c:	af04      	add	r7, sp, #16
 802267e:	6078      	str	r0, [r7, #4]
 8022680:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 8022682:	4b49      	ldr	r3, [pc, #292]	@ (80227a8 <prvBufferFormattedString+0x130>)
 8022684:	681b      	ldr	r3, [r3, #0]
 8022686:	2b00      	cmp	r3, #0
 8022688:	d104      	bne.n	8022694 <prvBufferFormattedString+0x1c>
 802268a:	f44f 7199 	mov.w	r1, #306	@ 0x132
 802268e:	4847      	ldr	r0, [pc, #284]	@ (80227ac <prvBufferFormattedString+0x134>)
 8022690:	f7df f9ba 	bl	8001a08 <vAssertCalled>

	vTaskSuspendAll();
 8022694:	f7e2 fa14 	bl	8004ac0 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 8022698:	f000 fa2a 	bl	8022af0 <ullGetHighResolutionTime>
 802269c:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 80226a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80226a4:	4a42      	ldr	r2, [pc, #264]	@ (80227b0 <prvBufferFormattedString+0x138>)
 80226a6:	f04f 0300 	mov.w	r3, #0
 80226aa:	f7dd fe81 	bl	80003b0 <__aeabi_uldivmod>
 80226ae:	4602      	mov	r2, r0
 80226b0:	460b      	mov	r3, r1
 80226b2:	4613      	mov	r3, r2
 80226b4:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 80226b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80226ba:	4a3d      	ldr	r2, [pc, #244]	@ (80227b0 <prvBufferFormattedString+0x138>)
 80226bc:	f04f 0300 	mov.w	r3, #0
 80226c0:	f7dd fe76 	bl	80003b0 <__aeabi_uldivmod>
 80226c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 80226c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80226cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80226d0:	f04f 0300 	mov.w	r3, #0
 80226d4:	f7dd fe6c 	bl	80003b0 <__aeabi_uldivmod>
 80226d8:	4602      	mov	r2, r0
 80226da:	460b      	mov	r3, r1
 80226dc:	4613      	mov	r3, r2
 80226de:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 80226e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80226e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80226e8:	f04f 0300 	mov.w	r3, #0
 80226ec:	f7dd fe60 	bl	80003b0 <__aeabi_uldivmod>
 80226f0:	4613      	mov	r3, r2
 80226f2:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 80226f4:	2000      	movs	r0, #0
 80226f6:	f7e2 fb05 	bl	8004d04 <pcTaskGetName>
 80226fa:	4603      	mov	r3, r0
 80226fc:	9302      	str	r3, [sp, #8]
 80226fe:	697b      	ldr	r3, [r7, #20]
 8022700:	9301      	str	r3, [sp, #4]
 8022702:	69bb      	ldr	r3, [r7, #24]
 8022704:	9300      	str	r3, [sp, #0]
 8022706:	69fb      	ldr	r3, [r7, #28]
 8022708:	4a2a      	ldr	r2, [pc, #168]	@ (80227b4 <prvBufferFormattedString+0x13c>)
 802270a:	21c8      	movs	r1, #200	@ 0xc8
 802270c:	482a      	ldr	r0, [pc, #168]	@ (80227b8 <prvBufferFormattedString+0x140>)
 802270e:	f001 f885 	bl	802381c <snprintf>
 8022712:	4603      	mov	r3, r0
 8022714:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 8022716:	68fb      	ldr	r3, [r7, #12]
 8022718:	4a27      	ldr	r2, [pc, #156]	@ (80227b8 <prvBufferFormattedString+0x140>)
 802271a:	1898      	adds	r0, r3, r2
 802271c:	68fb      	ldr	r3, [r7, #12]
 802271e:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 8022722:	683b      	ldr	r3, [r7, #0]
 8022724:	687a      	ldr	r2, [r7, #4]
 8022726:	f001 f85d 	bl	80237e4 <vsnprintf>
 802272a:	4603      	mov	r3, r0
 802272c:	461a      	mov	r2, r3
 802272e:	68fb      	ldr	r3, [r7, #12]
 8022730:	4413      	add	r3, r2
 8022732:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 8022734:	4b1c      	ldr	r3, [pc, #112]	@ (80227a8 <prvBufferFormattedString+0x130>)
 8022736:	681b      	ldr	r3, [r3, #0]
 8022738:	4618      	mov	r0, r3
 802273a:	f7ee fd50 	bl	80111de <uxStreamBufferGetSpace>
 802273e:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 8022740:	68fb      	ldr	r3, [r7, #12]
 8022742:	3304      	adds	r3, #4
 8022744:	693a      	ldr	r2, [r7, #16]
 8022746:	429a      	cmp	r2, r3
 8022748:	d90e      	bls.n	8022768 <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 802274a:	4b17      	ldr	r3, [pc, #92]	@ (80227a8 <prvBufferFormattedString+0x130>)
 802274c:	6818      	ldr	r0, [r3, #0]
 802274e:	f107 020c 	add.w	r2, r7, #12
 8022752:	2304      	movs	r3, #4
 8022754:	2100      	movs	r1, #0
 8022756:	f7ee fe02 	bl	801135e <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 802275a:	4b13      	ldr	r3, [pc, #76]	@ (80227a8 <prvBufferFormattedString+0x130>)
 802275c:	6818      	ldr	r0, [r3, #0]
 802275e:	68fb      	ldr	r3, [r7, #12]
 8022760:	4a15      	ldr	r2, [pc, #84]	@ (80227b8 <prvBufferFormattedString+0x140>)
 8022762:	2100      	movs	r1, #0
 8022764:	f7ee fdfb 	bl	801135e <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 8022768:	f7e2 f9b8 	bl	8004adc <xTaskResumeAll>

	if( xLoggingTask == NULL )
 802276c:	4b13      	ldr	r3, [pc, #76]	@ (80227bc <prvBufferFormattedString+0x144>)
 802276e:	681b      	ldr	r3, [r3, #0]
 8022770:	2b00      	cmp	r3, #0
 8022772:	d10a      	bne.n	802278a <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 8022774:	68fb      	ldr	r3, [r7, #12]
 8022776:	4619      	mov	r1, r3
 8022778:	480f      	ldr	r0, [pc, #60]	@ (80227b8 <prvBufferFormattedString+0x140>)
 802277a:	f000 f85b 	bl	8022834 <vUDPLoggingHook>
		uxSkipCount++;
 802277e:	4b10      	ldr	r3, [pc, #64]	@ (80227c0 <prvBufferFormattedString+0x148>)
 8022780:	681b      	ldr	r3, [r3, #0]
 8022782:	3301      	adds	r3, #1
 8022784:	4a0e      	ldr	r2, [pc, #56]	@ (80227c0 <prvBufferFormattedString+0x148>)
 8022786:	6013      	str	r3, [r2, #0]
 8022788:	e008      	b.n	802279c <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 802278a:	4b0c      	ldr	r3, [pc, #48]	@ (80227bc <prvBufferFormattedString+0x144>)
 802278c:	6818      	ldr	r0, [r3, #0]
 802278e:	2300      	movs	r3, #0
 8022790:	9300      	str	r3, [sp, #0]
 8022792:	2302      	movs	r3, #2
 8022794:	2200      	movs	r2, #0
 8022796:	2100      	movs	r1, #0
 8022798:	f7e3 faf6 	bl	8005d88 <xTaskGenericNotify>
	}

	return xLength;
 802279c:	68fb      	ldr	r3, [r7, #12]
}
 802279e:	4618      	mov	r0, r3
 80227a0:	3728      	adds	r7, #40	@ 0x28
 80227a2:	46bd      	mov	sp, r7
 80227a4:	bd80      	pop	{r7, pc}
 80227a6:	bf00      	nop
 80227a8:	20002658 	.word	0x20002658
 80227ac:	08027e48 	.word	0x08027e48
 80227b0:	000f4240 	.word	0x000f4240
 80227b4:	08027e70 	.word	0x08027e70
 80227b8:	20002590 	.word	0x20002590
 80227bc:	2000265c 	.word	0x2000265c
 80227c0:	20002660 	.word	0x20002660

080227c4 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 80227c4:	b40f      	push	{r0, r1, r2, r3}
 80227c6:	b580      	push	{r7, lr}
 80227c8:	b082      	sub	sp, #8
 80227ca:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 80227cc:	f7ff fece 	bl	802256c <prvInitialiseLogging>
 80227d0:	4603      	mov	r3, r0
 80227d2:	2b00      	cmp	r3, #0
 80227d4:	d008      	beq.n	80227e8 <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 80227d6:	f107 0314 	add.w	r3, r7, #20
 80227da:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 80227dc:	6839      	ldr	r1, [r7, #0]
 80227de:	6938      	ldr	r0, [r7, #16]
 80227e0:	f7ff ff4a 	bl	8022678 <prvBufferFormattedString>
 80227e4:	6078      	str	r0, [r7, #4]
 80227e6:	e001      	b.n	80227ec <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 80227e8:	2300      	movs	r3, #0
 80227ea:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 80227ec:	687b      	ldr	r3, [r7, #4]
}
 80227ee:	4618      	mov	r0, r3
 80227f0:	3708      	adds	r7, #8
 80227f2:	46bd      	mov	sp, r7
 80227f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80227f8:	b004      	add	sp, #16
 80227fa:	4770      	bx	lr

080227fc <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 80227fc:	b580      	push	{r7, lr}
 80227fe:	b082      	sub	sp, #8
 8022800:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 8022802:	4b08      	ldr	r3, [pc, #32]	@ (8022824 <vUDPLoggingTaskCreate+0x28>)
 8022804:	9301      	str	r3, [sp, #4]
 8022806:	2302      	movs	r3, #2
 8022808:	9300      	str	r3, [sp, #0]
 802280a:	2300      	movs	r3, #0
 802280c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022810:	4905      	ldr	r1, [pc, #20]	@ (8022828 <vUDPLoggingTaskCreate+0x2c>)
 8022812:	4806      	ldr	r0, [pc, #24]	@ (802282c <vUDPLoggingTaskCreate+0x30>)
 8022814:	f7e1 febe 	bl	8004594 <xTaskCreate>
 8022818:	4603      	mov	r3, r0
 802281a:	4a05      	ldr	r2, [pc, #20]	@ (8022830 <vUDPLoggingTaskCreate+0x34>)
 802281c:	6013      	str	r3, [r2, #0]
}
 802281e:	bf00      	nop
 8022820:	46bd      	mov	sp, r7
 8022822:	bd80      	pop	{r7, pc}
 8022824:	2000265c 	.word	0x2000265c
 8022828:	08027e88 	.word	0x08027e88
 802282c:	0802284d 	.word	0x0802284d
 8022830:	20002664 	.word	0x20002664

08022834 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 8022834:	b480      	push	{r7}
 8022836:	b083      	sub	sp, #12
 8022838:	af00      	add	r7, sp, #0
 802283a:	6078      	str	r0, [r7, #4]
 802283c:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 802283e:	bf00      	nop
 8022840:	370c      	adds	r7, #12
 8022842:	46bd      	mov	sp, r7
 8022844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022848:	4770      	bx	lr
	...

0802284c <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 802284c:	b580      	push	{r7, lr}
 802284e:	b098      	sub	sp, #96	@ 0x60
 8022850:	af02      	add	r7, sp, #8
 8022852:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 8022854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8022858:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 802285a:	2000      	movs	r0, #0
 802285c:	f7eb f974 	bl	800db48 <FreeRTOS_FirstEndPoint>
 8022860:	6538      	str	r0, [r7, #80]	@ 0x50
 8022862:	e01c      	b.n	802289e <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 8022864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022866:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 802286a:	f003 0310 	and.w	r3, r3, #16
 802286e:	b2db      	uxtb	r3, r3
 8022870:	2b00      	cmp	r3, #0
 8022872:	d00f      	beq.n	8022894 <prvLoggingTask+0x48>
 8022874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022876:	2b00      	cmp	r3, #0
 8022878:	d009      	beq.n	802288e <prvLoggingTask+0x42>
 802287a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802287c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8022880:	f003 0304 	and.w	r3, r3, #4
 8022884:	b2db      	uxtb	r3, r3
 8022886:	2b00      	cmp	r3, #0
 8022888:	d101      	bne.n	802288e <prvLoggingTask+0x42>
 802288a:	2301      	movs	r3, #1
 802288c:	e000      	b.n	8022890 <prvLoggingTask+0x44>
 802288e:	2300      	movs	r3, #0
 8022890:	2b00      	cmp	r3, #0
 8022892:	d108      	bne.n	80228a6 <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8022894:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8022896:	2000      	movs	r0, #0
 8022898:	f7eb f978 	bl	800db8c <FreeRTOS_NextEndPoint>
 802289c:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 802289e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80228a0:	2b00      	cmp	r3, #0
 80228a2:	d1df      	bne.n	8022864 <prvLoggingTask+0x18>
 80228a4:	e000      	b.n	80228a8 <prvLoggingTask+0x5c>
				{
					break;
 80228a6:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 80228a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	d000      	beq.n	80228b0 <prvLoggingTask+0x64>
			{
				break;
 80228ae:	e004      	b.n	80228ba <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 80228b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80228b4:	f7e2 f84c 	bl	8004950 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80228b8:	e7cf      	b.n	802285a <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 80228ba:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80228bc:	f7e2 f848 	bl	8004950 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 80228c0:	2211      	movs	r2, #17
 80228c2:	2102      	movs	r1, #2
 80228c4:	2002      	movs	r0, #2
 80228c6:	f7eb febb 	bl	800e640 <FreeRTOS_socket>
 80228ca:	4603      	mov	r3, r0
 80228cc:	4a4c      	ldr	r2, [pc, #304]	@ (8022a00 <prvLoggingTask+0x1b4>)
 80228ce:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 80228d0:	4b4b      	ldr	r3, [pc, #300]	@ (8022a00 <prvLoggingTask+0x1b4>)
 80228d2:	681b      	ldr	r3, [r3, #0]
 80228d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80228d8:	d0ef      	beq.n	80228ba <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 80228da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80228dc:	2b00      	cmp	r3, #0
 80228de:	d104      	bne.n	80228ea <prvLoggingTask+0x9e>
 80228e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80228e4:	4847      	ldr	r0, [pc, #284]	@ (8022a04 <prvLoggingTask+0x1b8>)
 80228e6:	f7df f88f 	bl	8001a08 <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 80228ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80228ec:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80228f0:	2b00      	cmp	r3, #0
 80228f2:	d104      	bne.n	80228fe <prvLoggingTask+0xb2>
 80228f4:	f240 11df 	movw	r1, #479	@ 0x1df
 80228f8:	4842      	ldr	r0, [pc, #264]	@ (8022a04 <prvLoggingTask+0x1b8>)
 80228fa:	f7df f885 	bl	8001a08 <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 80228fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022900:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8022904:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 8022906:	f246 2309 	movw	r3, #25097	@ 0x6209
 802290a:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 802290c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802290e:	681b      	ldr	r3, [r3, #0]
 8022910:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 8022912:	4b3b      	ldr	r3, [pc, #236]	@ (8022a00 <prvLoggingTask+0x1b4>)
 8022914:	681b      	ldr	r3, [r3, #0]
 8022916:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 802291a:	2218      	movs	r2, #24
 802291c:	4618      	mov	r0, r3
 802291e:	f7ec f87f 	bl	800ea20 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 8022922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022924:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 8022926:	4b36      	ldr	r3, [pc, #216]	@ (8022a00 <prvLoggingTask+0x1b4>)
 8022928:	6818      	ldr	r0, [r3, #0]
 802292a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802292e:	2204      	movs	r2, #4
 8022930:	9200      	str	r2, [sp, #0]
 8022932:	2201      	movs	r2, #1
 8022934:	2100      	movs	r1, #0
 8022936:	f7ec fe3d 	bl	800f5b4 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 802293a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802293c:	2101      	movs	r1, #1
 802293e:	2000      	movs	r0, #0
 8022940:	f7e3 f916 	bl	8005b70 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 8022944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8022946:	691b      	ldr	r3, [r3, #16]
 8022948:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 802294a:	4798      	blx	r3
 802294c:	4603      	mov	r3, r0
 802294e:	2b00      	cmp	r3, #0
 8022950:	d0f3      	beq.n	802293a <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8022952:	2300      	movs	r3, #0
 8022954:	657b      	str	r3, [r7, #84]	@ 0x54
 8022956:	e04c      	b.n	80229f2 <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 8022958:	21c8      	movs	r1, #200	@ 0xc8
 802295a:	482b      	ldr	r0, [pc, #172]	@ (8022a08 <prvLoggingTask+0x1bc>)
 802295c:	f7ff fe38 	bl	80225d0 <prvGetMessageFromStreamBuffer>
 8022960:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 8022962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022964:	2b00      	cmp	r3, #0
 8022966:	d048      	beq.n	80229fa <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8022968:	2000      	movs	r0, #0
 802296a:	f7eb f8ed 	bl	800db48 <FreeRTOS_FirstEndPoint>
 802296e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8022970:	e02a      	b.n	80229c8 <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8022972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022974:	2b00      	cmp	r3, #0
 8022976:	d022      	beq.n	80229be <prvLoggingTask+0x172>
 8022978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802297a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 802297e:	f003 0304 	and.w	r3, r3, #4
 8022982:	b2db      	uxtb	r3, r3
 8022984:	2b00      	cmp	r3, #0
 8022986:	d11a      	bne.n	80229be <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 8022988:	2318      	movs	r3, #24
 802298a:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 802298c:	2302      	movs	r3, #2
 802298e:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8022990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022992:	681a      	ldr	r2, [r3, #0]
 8022994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022996:	685b      	ldr	r3, [r3, #4]
 8022998:	43db      	mvns	r3, r3
 802299a:	4313      	orrs	r3, r2
 802299c:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 802299e:	f246 3309 	movw	r3, #25353	@ 0x6309
 80229a2:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 80229a4:	4b16      	ldr	r3, [pc, #88]	@ (8022a00 <prvLoggingTask+0x1b4>)
 80229a6:	6818      	ldr	r0, [r3, #0]
 80229a8:	2318      	movs	r3, #24
 80229aa:	9301      	str	r3, [sp, #4]
 80229ac:	f107 030c 	add.w	r3, r7, #12
 80229b0:	9300      	str	r3, [sp, #0]
 80229b2:	2300      	movs	r3, #0
 80229b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80229b6:	4914      	ldr	r1, [pc, #80]	@ (8022a08 <prvLoggingTask+0x1bc>)
 80229b8:	f7eb ffc2 	bl	800e940 <FreeRTOS_sendto>
							}
							break;
 80229bc:	e007      	b.n	80229ce <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 80229be:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80229c0:	2000      	movs	r0, #0
 80229c2:	f7eb f8e3 	bl	800db8c <FreeRTOS_NextEndPoint>
 80229c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 80229c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	d1d1      	bne.n	8022972 <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 80229ce:	4b0f      	ldr	r3, [pc, #60]	@ (8022a0c <prvLoggingTask+0x1c0>)
 80229d0:	681b      	ldr	r3, [r3, #0]
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	d005      	beq.n	80229e2 <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 80229d6:	4b0d      	ldr	r3, [pc, #52]	@ (8022a0c <prvLoggingTask+0x1c0>)
 80229d8:	681b      	ldr	r3, [r3, #0]
 80229da:	3b01      	subs	r3, #1
 80229dc:	4a0b      	ldr	r2, [pc, #44]	@ (8022a0c <prvLoggingTask+0x1c0>)
 80229de:	6013      	str	r3, [r2, #0]
 80229e0:	e004      	b.n	80229ec <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 80229e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80229e4:	4619      	mov	r1, r3
 80229e6:	4808      	ldr	r0, [pc, #32]	@ (8022a08 <prvLoggingTask+0x1bc>)
 80229e8:	f7ff ff24 	bl	8022834 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 80229ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80229ee:	3301      	adds	r3, #1
 80229f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80229f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80229f4:	2b13      	cmp	r3, #19
 80229f6:	ddaf      	ble.n	8022958 <prvLoggingTask+0x10c>
 80229f8:	e79f      	b.n	802293a <prvLoggingTask+0xee>
					break;
 80229fa:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 80229fc:	e79d      	b.n	802293a <prvLoggingTask+0xee>
 80229fe:	bf00      	nop
 8022a00:	20000028 	.word	0x20000028
 8022a04:	08027e48 	.word	0x08027e48
 8022a08:	2000266c 	.word	0x2000266c
 8022a0c:	20002660 	.word	0x20002660

08022a10 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 8022a10:	b480      	push	{r7}
 8022a12:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 8022a14:	4b0c      	ldr	r3, [pc, #48]	@ (8022a48 <TIM2_IRQHandler+0x38>)
 8022a16:	681b      	ldr	r3, [r3, #0]
 8022a18:	691b      	ldr	r3, [r3, #16]
 8022a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8022a4c <TIM2_IRQHandler+0x3c>)
 8022a1c:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 8022a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8022a4c <TIM2_IRQHandler+0x3c>)
 8022a20:	681b      	ldr	r3, [r3, #0]
 8022a22:	f003 0301 	and.w	r3, r3, #1
 8022a26:	2b00      	cmp	r3, #0
 8022a28:	d009      	beq.n	8022a3e <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 8022a2a:	4b07      	ldr	r3, [pc, #28]	@ (8022a48 <TIM2_IRQHandler+0x38>)
 8022a2c:	681b      	ldr	r3, [r3, #0]
 8022a2e:	f06f 0201 	mvn.w	r2, #1
 8022a32:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 8022a34:	4b06      	ldr	r3, [pc, #24]	@ (8022a50 <TIM2_IRQHandler+0x40>)
 8022a36:	681b      	ldr	r3, [r3, #0]
 8022a38:	3301      	adds	r3, #1
 8022a3a:	4a05      	ldr	r2, [pc, #20]	@ (8022a50 <TIM2_IRQHandler+0x40>)
 8022a3c:	6013      	str	r3, [r2, #0]
	}
}
 8022a3e:	bf00      	nop
 8022a40:	46bd      	mov	sp, r7
 8022a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a46:	4770      	bx	lr
 8022a48:	20000444 	.word	0x20000444
 8022a4c:	20002738 	.word	0x20002738
 8022a50:	20002734 	.word	0x20002734

08022a54 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 8022a54:	b580      	push	{r7, lr}
 8022a56:	b082      	sub	sp, #8
 8022a58:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8022a5a:	4b20      	ldr	r3, [pc, #128]	@ (8022adc <vStartHighResolutionTimer+0x88>)
 8022a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8022a60:	4a1e      	ldr	r2, [pc, #120]	@ (8022adc <vStartHighResolutionTimer+0x88>)
 8022a62:	f043 0301 	orr.w	r3, r3, #1
 8022a66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8022a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8022adc <vStartHighResolutionTimer+0x88>)
 8022a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8022a70:	f003 0301 	and.w	r3, r3, #1
 8022a74:	607b      	str	r3, [r7, #4]
 8022a76:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 8022a78:	4b19      	ldr	r3, [pc, #100]	@ (8022ae0 <vStartHighResolutionTimer+0x8c>)
 8022a7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8022a7e:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8022a80:	23c8      	movs	r3, #200	@ 0xc8
 8022a82:	3b01      	subs	r3, #1
 8022a84:	4a16      	ldr	r2, [pc, #88]	@ (8022ae0 <vStartHighResolutionTimer+0x8c>)
 8022a86:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 8022a88:	4b15      	ldr	r3, [pc, #84]	@ (8022ae0 <vStartHighResolutionTimer+0x8c>)
 8022a8a:	2200      	movs	r2, #0
 8022a8c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8022a8e:	4b15      	ldr	r3, [pc, #84]	@ (8022ae4 <vStartHighResolutionTimer+0x90>)
 8022a90:	3b01      	subs	r3, #1
 8022a92:	4a13      	ldr	r2, [pc, #76]	@ (8022ae0 <vStartHighResolutionTimer+0x8c>)
 8022a94:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 8022a96:	4b12      	ldr	r3, [pc, #72]	@ (8022ae0 <vStartHighResolutionTimer+0x8c>)
 8022a98:	2200      	movs	r2, #0
 8022a9a:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8022a9c:	4b10      	ldr	r3, [pc, #64]	@ (8022ae0 <vStartHighResolutionTimer+0x8c>)
 8022a9e:	2200      	movs	r2, #0
 8022aa0:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8022aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8022ae0 <vStartHighResolutionTimer+0x8c>)
 8022aa4:	2201      	movs	r2, #1
 8022aa6:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8022aa8:	2200      	movs	r2, #0
 8022aaa:	2105      	movs	r1, #5
 8022aac:	201c      	movs	r0, #28
 8022aae:	f7f7 ffa4 	bl	801a9fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8022ab2:	201c      	movs	r0, #28
 8022ab4:	f7f7 ffbb 	bl	801aa2e <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8022ab8:	4809      	ldr	r0, [pc, #36]	@ (8022ae0 <vStartHighResolutionTimer+0x8c>)
 8022aba:	f7fd fc96 	bl	80203ea <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8022abe:	4808      	ldr	r0, [pc, #32]	@ (8022ae0 <vStartHighResolutionTimer+0x8c>)
 8022ac0:	f7fd fcea 	bl	8020498 <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 8022ac4:	4b06      	ldr	r3, [pc, #24]	@ (8022ae0 <vStartHighResolutionTimer+0x8c>)
 8022ac6:	681b      	ldr	r3, [r3, #0]
 8022ac8:	691b      	ldr	r3, [r3, #16]
 8022aca:	4a07      	ldr	r2, [pc, #28]	@ (8022ae8 <vStartHighResolutionTimer+0x94>)
 8022acc:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8022ace:	4b07      	ldr	r3, [pc, #28]	@ (8022aec <vStartHighResolutionTimer+0x98>)
 8022ad0:	2200      	movs	r2, #0
 8022ad2:	601a      	str	r2, [r3, #0]
}
 8022ad4:	bf00      	nop
 8022ad6:	3708      	adds	r7, #8
 8022ad8:	46bd      	mov	sp, r7
 8022ada:	bd80      	pop	{r7, pc}
 8022adc:	58024400 	.word	0x58024400
 8022ae0:	20000444 	.word	0x20000444
 8022ae4:	00989680 	.word	0x00989680
 8022ae8:	20002738 	.word	0x20002738
 8022aec:	20002734 	.word	0x20002734

08022af0 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8022af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022af4:	b08e      	sub	sp, #56	@ 0x38
 8022af6:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 8022af8:	493d      	ldr	r1, [pc, #244]	@ (8022bf0 <ullGetHighResolutionTime+0x100>)
 8022afa:	6809      	ldr	r1, [r1, #0]
 8022afc:	2900      	cmp	r1, #0
 8022afe:	d132      	bne.n	8022b66 <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8022b00:	f7e2 f8f0 	bl	8004ce4 <xTaskGetTickCount>
 8022b04:	4603      	mov	r3, r0
 8022b06:	2200      	movs	r2, #0
 8022b08:	469a      	mov	sl, r3
 8022b0a:	4693      	mov	fp, r2
 8022b0c:	4652      	mov	r2, sl
 8022b0e:	465b      	mov	r3, fp
 8022b10:	f04f 0000 	mov.w	r0, #0
 8022b14:	f04f 0100 	mov.w	r1, #0
 8022b18:	0159      	lsls	r1, r3, #5
 8022b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8022b1e:	0150      	lsls	r0, r2, #5
 8022b20:	4602      	mov	r2, r0
 8022b22:	460b      	mov	r3, r1
 8022b24:	ebb2 040a 	subs.w	r4, r2, sl
 8022b28:	eb63 050b 	sbc.w	r5, r3, fp
 8022b2c:	f04f 0200 	mov.w	r2, #0
 8022b30:	f04f 0300 	mov.w	r3, #0
 8022b34:	00ab      	lsls	r3, r5, #2
 8022b36:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8022b3a:	00a2      	lsls	r2, r4, #2
 8022b3c:	4614      	mov	r4, r2
 8022b3e:	461d      	mov	r5, r3
 8022b40:	eb14 080a 	adds.w	r8, r4, sl
 8022b44:	eb45 090b 	adc.w	r9, r5, fp
 8022b48:	f04f 0200 	mov.w	r2, #0
 8022b4c:	f04f 0300 	mov.w	r3, #0
 8022b50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022b54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8022b58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8022b5c:	4690      	mov	r8, r2
 8022b5e:	4699      	mov	r9, r3
 8022b60:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8022b64:	e03c      	b.n	8022be0 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8022b66:	4922      	ldr	r1, [pc, #136]	@ (8022bf0 <ullGetHighResolutionTime+0x100>)
 8022b68:	6809      	ldr	r1, [r1, #0]
 8022b6a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8022b6c:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 8022b6e:	4921      	ldr	r1, [pc, #132]	@ (8022bf4 <ullGetHighResolutionTime+0x104>)
 8022b70:	6809      	ldr	r1, [r1, #0]
 8022b72:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 8022b74:	491e      	ldr	r1, [pc, #120]	@ (8022bf0 <ullGetHighResolutionTime+0x100>)
 8022b76:	6809      	ldr	r1, [r1, #0]
 8022b78:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8022b7a:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 8022b7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022b7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8022b80:	4288      	cmp	r0, r1
 8022b82:	d200      	bcs.n	8022b86 <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8022b84:	e7ef      	b.n	8022b66 <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 8022b86:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 8022b88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022b8a:	2000      	movs	r0, #0
 8022b8c:	61b9      	str	r1, [r7, #24]
 8022b8e:	61f8      	str	r0, [r7, #28]
 8022b90:	4819      	ldr	r0, [pc, #100]	@ (8022bf8 <ullGetHighResolutionTime+0x108>)
 8022b92:	2100      	movs	r1, #0
 8022b94:	6138      	str	r0, [r7, #16]
 8022b96:	6179      	str	r1, [r7, #20]
 8022b98:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8022b9c:	4649      	mov	r1, r9
 8022b9e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022ba2:	4650      	mov	r0, sl
 8022ba4:	fb00 f001 	mul.w	r0, r0, r1
 8022ba8:	4659      	mov	r1, fp
 8022baa:	4644      	mov	r4, r8
 8022bac:	fb04 f101 	mul.w	r1, r4, r1
 8022bb0:	4401      	add	r1, r0
 8022bb2:	4640      	mov	r0, r8
 8022bb4:	4654      	mov	r4, sl
 8022bb6:	fba0 2304 	umull	r2, r3, r0, r4
 8022bba:	4419      	add	r1, r3
 8022bbc:	460b      	mov	r3, r1
 8022bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022bc0:	2000      	movs	r0, #0
 8022bc2:	60b9      	str	r1, [r7, #8]
 8022bc4:	60f8      	str	r0, [r7, #12]
 8022bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8022bca:	4621      	mov	r1, r4
 8022bcc:	1851      	adds	r1, r2, r1
 8022bce:	6039      	str	r1, [r7, #0]
 8022bd0:	4629      	mov	r1, r5
 8022bd2:	eb43 0101 	adc.w	r1, r3, r1
 8022bd6:	6079      	str	r1, [r7, #4]
 8022bd8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022bdc:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8022be0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8022be4:	4610      	mov	r0, r2
 8022be6:	4619      	mov	r1, r3
 8022be8:	3738      	adds	r7, #56	@ 0x38
 8022bea:	46bd      	mov	sp, r7
 8022bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022bf0:	20000444 	.word	0x20000444
 8022bf4:	20002734 	.word	0x20002734
 8022bf8:	00989680 	.word	0x00989680

08022bfc <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8022bfc:	b480      	push	{r7}
 8022bfe:	b08d      	sub	sp, #52	@ 0x34
 8022c00:	af00      	add	r7, sp, #0
 8022c02:	60f8      	str	r0, [r7, #12]
 8022c04:	60b9      	str	r1, [r7, #8]
 8022c06:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8022c08:	68fb      	ldr	r3, [r7, #12]
 8022c0a:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8022c0c:	68bb      	ldr	r3, [r7, #8]
 8022c0e:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8022c10:	697a      	ldr	r2, [r7, #20]
 8022c12:	687b      	ldr	r3, [r7, #4]
 8022c14:	4413      	add	r3, r2
 8022c16:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 8022c18:	69ba      	ldr	r2, [r7, #24]
 8022c1a:	697b      	ldr	r3, [r7, #20]
 8022c1c:	4053      	eors	r3, r2
 8022c1e:	f003 0303 	and.w	r3, r3, #3
 8022c22:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 8022c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022c26:	f003 0301 	and.w	r3, r3, #1
 8022c2a:	2b00      	cmp	r3, #0
 8022c2c:	f040 80a1 	bne.w	8022d72 <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 8022c30:	697b      	ldr	r3, [r7, #20]
 8022c32:	f003 0301 	and.w	r3, r3, #1
 8022c36:	2b00      	cmp	r3, #0
 8022c38:	d00b      	beq.n	8022c52 <memcpy+0x56>
 8022c3a:	697a      	ldr	r2, [r7, #20]
 8022c3c:	693b      	ldr	r3, [r7, #16]
 8022c3e:	429a      	cmp	r2, r3
 8022c40:	d207      	bcs.n	8022c52 <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 8022c42:	697a      	ldr	r2, [r7, #20]
 8022c44:	1c53      	adds	r3, r2, #1
 8022c46:	617b      	str	r3, [r7, #20]
 8022c48:	69bb      	ldr	r3, [r7, #24]
 8022c4a:	1c59      	adds	r1, r3, #1
 8022c4c:	61b9      	str	r1, [r7, #24]
 8022c4e:	7812      	ldrb	r2, [r2, #0]
 8022c50:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 8022c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022c54:	f003 0302 	and.w	r3, r3, #2
 8022c58:	2b00      	cmp	r3, #0
 8022c5a:	d01f      	beq.n	8022c9c <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8022c5c:	693b      	ldr	r3, [r7, #16]
 8022c5e:	f003 0301 	and.w	r3, r3, #1
 8022c62:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8022c64:	693b      	ldr	r3, [r7, #16]
 8022c66:	f023 0301 	bic.w	r3, r3, #1
 8022c6a:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022c6c:	e00a      	b.n	8022c84 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022c6e:	697a      	ldr	r2, [r7, #20]
 8022c70:	1c93      	adds	r3, r2, #2
 8022c72:	617b      	str	r3, [r7, #20]
 8022c74:	69bb      	ldr	r3, [r7, #24]
 8022c76:	1c99      	adds	r1, r3, #2
 8022c78:	61b9      	str	r1, [r7, #24]
 8022c7a:	8812      	ldrh	r2, [r2, #0]
 8022c7c:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 8022c7e:	687b      	ldr	r3, [r7, #4]
 8022c80:	3b02      	subs	r3, #2
 8022c82:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022c84:	697a      	ldr	r2, [r7, #20]
 8022c86:	693b      	ldr	r3, [r7, #16]
 8022c88:	429a      	cmp	r2, r3
 8022c8a:	d202      	bcs.n	8022c92 <memcpy+0x96>
 8022c8c:	687b      	ldr	r3, [r7, #4]
 8022c8e:	2b00      	cmp	r3, #0
 8022c90:	d1ed      	bne.n	8022c6e <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8022c92:	693a      	ldr	r2, [r7, #16]
 8022c94:	69fb      	ldr	r3, [r7, #28]
 8022c96:	4313      	orrs	r3, r2
 8022c98:	613b      	str	r3, [r7, #16]
 8022c9a:	e0ae      	b.n	8022dfa <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8022c9c:	697b      	ldr	r3, [r7, #20]
 8022c9e:	f003 0302 	and.w	r3, r3, #2
 8022ca2:	2b00      	cmp	r3, #0
 8022ca4:	d00c      	beq.n	8022cc0 <memcpy+0xc4>
 8022ca6:	697a      	ldr	r2, [r7, #20]
 8022ca8:	693b      	ldr	r3, [r7, #16]
 8022caa:	3b01      	subs	r3, #1
 8022cac:	429a      	cmp	r2, r3
 8022cae:	d207      	bcs.n	8022cc0 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022cb0:	697a      	ldr	r2, [r7, #20]
 8022cb2:	1c93      	adds	r3, r2, #2
 8022cb4:	617b      	str	r3, [r7, #20]
 8022cb6:	69bb      	ldr	r3, [r7, #24]
 8022cb8:	1c99      	adds	r1, r3, #2
 8022cba:	61b9      	str	r1, [r7, #24]
 8022cbc:	8812      	ldrh	r2, [r2, #0]
 8022cbe:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 8022cc0:	693b      	ldr	r3, [r7, #16]
 8022cc2:	f003 0303 	and.w	r3, r3, #3
 8022cc6:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 8022cc8:	693b      	ldr	r3, [r7, #16]
 8022cca:	f023 0303 	bic.w	r3, r3, #3
 8022cce:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8022cd0:	693a      	ldr	r2, [r7, #16]
 8022cd2:	697b      	ldr	r3, [r7, #20]
 8022cd4:	1ad3      	subs	r3, r2, r3
 8022cd6:	109b      	asrs	r3, r3, #2
 8022cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022cda:	e02f      	b.n	8022d3c <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8022cdc:	697a      	ldr	r2, [r7, #20]
 8022cde:	69bb      	ldr	r3, [r7, #24]
 8022ce0:	6812      	ldr	r2, [r2, #0]
 8022ce2:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8022ce4:	697a      	ldr	r2, [r7, #20]
 8022ce6:	69bb      	ldr	r3, [r7, #24]
 8022ce8:	3304      	adds	r3, #4
 8022cea:	6852      	ldr	r2, [r2, #4]
 8022cec:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8022cee:	697a      	ldr	r2, [r7, #20]
 8022cf0:	69bb      	ldr	r3, [r7, #24]
 8022cf2:	3308      	adds	r3, #8
 8022cf4:	6892      	ldr	r2, [r2, #8]
 8022cf6:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 8022cf8:	697a      	ldr	r2, [r7, #20]
 8022cfa:	69bb      	ldr	r3, [r7, #24]
 8022cfc:	330c      	adds	r3, #12
 8022cfe:	68d2      	ldr	r2, [r2, #12]
 8022d00:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8022d02:	697a      	ldr	r2, [r7, #20]
 8022d04:	69bb      	ldr	r3, [r7, #24]
 8022d06:	3310      	adds	r3, #16
 8022d08:	6912      	ldr	r2, [r2, #16]
 8022d0a:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8022d0c:	697a      	ldr	r2, [r7, #20]
 8022d0e:	69bb      	ldr	r3, [r7, #24]
 8022d10:	3314      	adds	r3, #20
 8022d12:	6952      	ldr	r2, [r2, #20]
 8022d14:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 8022d16:	697a      	ldr	r2, [r7, #20]
 8022d18:	69bb      	ldr	r3, [r7, #24]
 8022d1a:	3318      	adds	r3, #24
 8022d1c:	6992      	ldr	r2, [r2, #24]
 8022d1e:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8022d20:	697a      	ldr	r2, [r7, #20]
 8022d22:	69bb      	ldr	r3, [r7, #24]
 8022d24:	331c      	adds	r3, #28
 8022d26:	69d2      	ldr	r2, [r2, #28]
 8022d28:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 8022d2a:	69bb      	ldr	r3, [r7, #24]
 8022d2c:	3320      	adds	r3, #32
 8022d2e:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8022d30:	697b      	ldr	r3, [r7, #20]
 8022d32:	3320      	adds	r3, #32
 8022d34:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 8022d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022d38:	3b08      	subs	r3, #8
 8022d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022d3e:	2b08      	cmp	r3, #8
 8022d40:	dccc      	bgt.n	8022cdc <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022d42:	e00a      	b.n	8022d5a <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8022d44:	697a      	ldr	r2, [r7, #20]
 8022d46:	1d13      	adds	r3, r2, #4
 8022d48:	617b      	str	r3, [r7, #20]
 8022d4a:	69bb      	ldr	r3, [r7, #24]
 8022d4c:	1d19      	adds	r1, r3, #4
 8022d4e:	61b9      	str	r1, [r7, #24]
 8022d50:	6812      	ldr	r2, [r2, #0]
 8022d52:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8022d54:	687b      	ldr	r3, [r7, #4]
 8022d56:	3b04      	subs	r3, #4
 8022d58:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022d5a:	697a      	ldr	r2, [r7, #20]
 8022d5c:	693b      	ldr	r3, [r7, #16]
 8022d5e:	429a      	cmp	r2, r3
 8022d60:	d202      	bcs.n	8022d68 <memcpy+0x16c>
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	2b00      	cmp	r3, #0
 8022d66:	d1ed      	bne.n	8022d44 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8022d68:	693a      	ldr	r2, [r7, #16]
 8022d6a:	6a3b      	ldr	r3, [r7, #32]
 8022d6c:	4313      	orrs	r3, r2
 8022d6e:	613b      	str	r3, [r7, #16]
 8022d70:	e043      	b.n	8022dfa <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 8022d72:	693a      	ldr	r2, [r7, #16]
 8022d74:	697b      	ldr	r3, [r7, #20]
 8022d76:	1ad3      	subs	r3, r2, r3
 8022d78:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022d7a:	e02f      	b.n	8022ddc <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8022d7c:	697a      	ldr	r2, [r7, #20]
 8022d7e:	69bb      	ldr	r3, [r7, #24]
 8022d80:	7812      	ldrb	r2, [r2, #0]
 8022d82:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8022d84:	697a      	ldr	r2, [r7, #20]
 8022d86:	69bb      	ldr	r3, [r7, #24]
 8022d88:	3301      	adds	r3, #1
 8022d8a:	7852      	ldrb	r2, [r2, #1]
 8022d8c:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 8022d8e:	697a      	ldr	r2, [r7, #20]
 8022d90:	69bb      	ldr	r3, [r7, #24]
 8022d92:	3302      	adds	r3, #2
 8022d94:	7892      	ldrb	r2, [r2, #2]
 8022d96:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 8022d98:	697a      	ldr	r2, [r7, #20]
 8022d9a:	69bb      	ldr	r3, [r7, #24]
 8022d9c:	3303      	adds	r3, #3
 8022d9e:	78d2      	ldrb	r2, [r2, #3]
 8022da0:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 8022da2:	697a      	ldr	r2, [r7, #20]
 8022da4:	69bb      	ldr	r3, [r7, #24]
 8022da6:	3304      	adds	r3, #4
 8022da8:	7912      	ldrb	r2, [r2, #4]
 8022daa:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8022dac:	697a      	ldr	r2, [r7, #20]
 8022dae:	69bb      	ldr	r3, [r7, #24]
 8022db0:	3305      	adds	r3, #5
 8022db2:	7952      	ldrb	r2, [r2, #5]
 8022db4:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 8022db6:	697a      	ldr	r2, [r7, #20]
 8022db8:	69bb      	ldr	r3, [r7, #24]
 8022dba:	3306      	adds	r3, #6
 8022dbc:	7992      	ldrb	r2, [r2, #6]
 8022dbe:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 8022dc0:	697a      	ldr	r2, [r7, #20]
 8022dc2:	69bb      	ldr	r3, [r7, #24]
 8022dc4:	3307      	adds	r3, #7
 8022dc6:	79d2      	ldrb	r2, [r2, #7]
 8022dc8:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 8022dca:	69bb      	ldr	r3, [r7, #24]
 8022dcc:	3308      	adds	r3, #8
 8022dce:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8022dd0:	697b      	ldr	r3, [r7, #20]
 8022dd2:	3308      	adds	r3, #8
 8022dd4:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8022dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022dd8:	3b08      	subs	r3, #8
 8022dda:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022dde:	2b08      	cmp	r3, #8
 8022de0:	dccc      	bgt.n	8022d7c <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8022de2:	e00a      	b.n	8022dfa <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8022de4:	697a      	ldr	r2, [r7, #20]
 8022de6:	1c53      	adds	r3, r2, #1
 8022de8:	617b      	str	r3, [r7, #20]
 8022dea:	69bb      	ldr	r3, [r7, #24]
 8022dec:	1c59      	adds	r1, r3, #1
 8022dee:	61b9      	str	r1, [r7, #24]
 8022df0:	7812      	ldrb	r2, [r2, #0]
 8022df2:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	3b01      	subs	r3, #1
 8022df8:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8022dfa:	697a      	ldr	r2, [r7, #20]
 8022dfc:	693b      	ldr	r3, [r7, #16]
 8022dfe:	429a      	cmp	r2, r3
 8022e00:	d202      	bcs.n	8022e08 <memcpy+0x20c>
 8022e02:	687b      	ldr	r3, [r7, #4]
 8022e04:	2b00      	cmp	r3, #0
 8022e06:	d1ed      	bne.n	8022de4 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 8022e08:	68fb      	ldr	r3, [r7, #12]
}
 8022e0a:	4618      	mov	r0, r3
 8022e0c:	3734      	adds	r7, #52	@ 0x34
 8022e0e:	46bd      	mov	sp, r7
 8022e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e14:	4770      	bx	lr

08022e16 <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 8022e16:	b480      	push	{r7}
 8022e18:	b08b      	sub	sp, #44	@ 0x2c
 8022e1a:	af00      	add	r7, sp, #0
 8022e1c:	60f8      	str	r0, [r7, #12]
 8022e1e:	60b9      	str	r1, [r7, #8]
 8022e20:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8022e22:	68fb      	ldr	r3, [r7, #12]
 8022e24:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 8022e26:	697a      	ldr	r2, [r7, #20]
 8022e28:	687b      	ldr	r3, [r7, #4]
 8022e2a:	4413      	add	r3, r2
 8022e2c:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8022e2e:	687b      	ldr	r3, [r7, #4]
 8022e30:	2b07      	cmp	r3, #7
 8022e32:	d97b      	bls.n	8022f2c <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8022e34:	68bb      	ldr	r3, [r7, #8]
 8022e36:	b2db      	uxtb	r3, r3
 8022e38:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 8022e3a:	69fb      	ldr	r3, [r7, #28]
 8022e3c:	021a      	lsls	r2, r3, #8
 8022e3e:	69fb      	ldr	r3, [r7, #28]
 8022e40:	041b      	lsls	r3, r3, #16
 8022e42:	431a      	orrs	r2, r3
 8022e44:	69fb      	ldr	r3, [r7, #28]
 8022e46:	061b      	lsls	r3, r3, #24
 8022e48:	4313      	orrs	r3, r2
 8022e4a:	69fa      	ldr	r2, [r7, #28]
 8022e4c:	4313      	orrs	r3, r2
 8022e4e:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 8022e50:	697b      	ldr	r3, [r7, #20]
 8022e52:	f003 0303 	and.w	r3, r3, #3
 8022e56:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 8022e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e5a:	2b00      	cmp	r3, #0
 8022e5c:	d010      	beq.n	8022e80 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 8022e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e60:	f1c3 0304 	rsb	r3, r3, #4
 8022e64:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 8022e66:	e006      	b.n	8022e76 <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 8022e68:	697b      	ldr	r3, [r7, #20]
 8022e6a:	68ba      	ldr	r2, [r7, #8]
 8022e6c:	b2d2      	uxtb	r2, r2
 8022e6e:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 8022e70:	697b      	ldr	r3, [r7, #20]
 8022e72:	3301      	adds	r3, #1
 8022e74:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 8022e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e78:	1e5a      	subs	r2, r3, #1
 8022e7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8022e7c:	2b00      	cmp	r3, #0
 8022e7e:	d1f3      	bne.n	8022e68 <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 8022e80:	693b      	ldr	r3, [r7, #16]
 8022e82:	f003 0303 	and.w	r3, r3, #3
 8022e86:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 8022e88:	693b      	ldr	r3, [r7, #16]
 8022e8a:	f023 0303 	bic.w	r3, r3, #3
 8022e8e:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 8022e90:	693a      	ldr	r2, [r7, #16]
 8022e92:	697b      	ldr	r3, [r7, #20]
 8022e94:	1ad3      	subs	r3, r2, r3
 8022e96:	109b      	asrs	r3, r3, #2
 8022e98:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8022e9a:	e024      	b.n	8022ee6 <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 8022e9c:	697b      	ldr	r3, [r7, #20]
 8022e9e:	69fa      	ldr	r2, [r7, #28]
 8022ea0:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 8022ea2:	697b      	ldr	r3, [r7, #20]
 8022ea4:	3304      	adds	r3, #4
 8022ea6:	69fa      	ldr	r2, [r7, #28]
 8022ea8:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 8022eaa:	697b      	ldr	r3, [r7, #20]
 8022eac:	3308      	adds	r3, #8
 8022eae:	69fa      	ldr	r2, [r7, #28]
 8022eb0:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 8022eb2:	697b      	ldr	r3, [r7, #20]
 8022eb4:	330c      	adds	r3, #12
 8022eb6:	69fa      	ldr	r2, [r7, #28]
 8022eb8:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 8022eba:	697b      	ldr	r3, [r7, #20]
 8022ebc:	3310      	adds	r3, #16
 8022ebe:	69fa      	ldr	r2, [r7, #28]
 8022ec0:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 8022ec2:	697b      	ldr	r3, [r7, #20]
 8022ec4:	3314      	adds	r3, #20
 8022ec6:	69fa      	ldr	r2, [r7, #28]
 8022ec8:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 8022eca:	697b      	ldr	r3, [r7, #20]
 8022ecc:	3318      	adds	r3, #24
 8022ece:	69fa      	ldr	r2, [r7, #28]
 8022ed0:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 8022ed2:	697b      	ldr	r3, [r7, #20]
 8022ed4:	331c      	adds	r3, #28
 8022ed6:	69fa      	ldr	r2, [r7, #28]
 8022ed8:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 8022eda:	697b      	ldr	r3, [r7, #20]
 8022edc:	3320      	adds	r3, #32
 8022ede:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8022ee0:	6a3b      	ldr	r3, [r7, #32]
 8022ee2:	3b08      	subs	r3, #8
 8022ee4:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8022ee6:	6a3b      	ldr	r3, [r7, #32]
 8022ee8:	2b08      	cmp	r3, #8
 8022eea:	dcd7      	bgt.n	8022e9c <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022eec:	e008      	b.n	8022f00 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8022eee:	697b      	ldr	r3, [r7, #20]
 8022ef0:	69fa      	ldr	r2, [r7, #28]
 8022ef2:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8022ef4:	697b      	ldr	r3, [r7, #20]
 8022ef6:	3304      	adds	r3, #4
 8022ef8:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	3304      	adds	r3, #4
 8022efe:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022f00:	697a      	ldr	r2, [r7, #20]
 8022f02:	693b      	ldr	r3, [r7, #16]
 8022f04:	429a      	cmp	r2, r3
 8022f06:	d202      	bcs.n	8022f0e <memset+0xf8>
 8022f08:	687b      	ldr	r3, [r7, #4]
 8022f0a:	2b00      	cmp	r3, #0
 8022f0c:	d1ef      	bne.n	8022eee <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8022f0e:	693a      	ldr	r2, [r7, #16]
 8022f10:	69bb      	ldr	r3, [r7, #24]
 8022f12:	4313      	orrs	r3, r2
 8022f14:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022f16:	e009      	b.n	8022f2c <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 8022f18:	697b      	ldr	r3, [r7, #20]
 8022f1a:	68ba      	ldr	r2, [r7, #8]
 8022f1c:	b2d2      	uxtb	r2, r2
 8022f1e:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 8022f20:	697b      	ldr	r3, [r7, #20]
 8022f22:	3301      	adds	r3, #1
 8022f24:	617b      	str	r3, [r7, #20]
			ulBytes++;
 8022f26:	687b      	ldr	r3, [r7, #4]
 8022f28:	3301      	adds	r3, #1
 8022f2a:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022f2c:	697a      	ldr	r2, [r7, #20]
 8022f2e:	693b      	ldr	r3, [r7, #16]
 8022f30:	429a      	cmp	r2, r3
 8022f32:	d202      	bcs.n	8022f3a <memset+0x124>
 8022f34:	687b      	ldr	r3, [r7, #4]
 8022f36:	2b00      	cmp	r3, #0
 8022f38:	d1ee      	bne.n	8022f18 <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 8022f3a:	68fb      	ldr	r3, [r7, #12]
}
 8022f3c:	4618      	mov	r0, r3
 8022f3e:	372c      	adds	r7, #44	@ 0x2c
 8022f40:	46bd      	mov	sp, r7
 8022f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f46:	4770      	bx	lr

08022f48 <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 8022f48:	b480      	push	{r7}
 8022f4a:	b083      	sub	sp, #12
 8022f4c:	af00      	add	r7, sp, #0
 8022f4e:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 8022f50:	2303      	movs	r3, #3
}
 8022f52:	4618      	mov	r0, r3
 8022f54:	370c      	adds	r7, #12
 8022f56:	46bd      	mov	sp, r7
 8022f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f5c:	4770      	bx	lr

08022f5e <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 8022f5e:	b480      	push	{r7}
 8022f60:	b083      	sub	sp, #12
 8022f62:	af00      	add	r7, sp, #0
 8022f64:	4603      	mov	r3, r0
 8022f66:	6039      	str	r1, [r7, #0]
 8022f68:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 8022f6a:	bf00      	nop
 8022f6c:	370c      	adds	r7, #12
 8022f6e:	46bd      	mov	sp, r7
 8022f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f74:	4770      	bx	lr

08022f76 <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 8022f76:	b580      	push	{r7, lr}
 8022f78:	b084      	sub	sp, #16
 8022f7a:	af00      	add	r7, sp, #0
 8022f7c:	60f8      	str	r0, [r7, #12]
 8022f7e:	60b9      	str	r1, [r7, #8]
 8022f80:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 8022f82:	68fb      	ldr	r3, [r7, #12]
 8022f84:	68ba      	ldr	r2, [r7, #8]
 8022f86:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 8022f88:	68fb      	ldr	r3, [r7, #12]
 8022f8a:	68ba      	ldr	r2, [r7, #8]
 8022f8c:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	1e5a      	subs	r2, r3, #1
 8022f92:	68fb      	ldr	r3, [r7, #12]
 8022f94:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 8022f96:	68fb      	ldr	r3, [r7, #12]
 8022f98:	2200      	movs	r2, #0
 8022f9a:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8022f9c:	68fb      	ldr	r3, [r7, #12]
 8022f9e:	3310      	adds	r3, #16
 8022fa0:	2210      	movs	r2, #16
 8022fa2:	2100      	movs	r1, #0
 8022fa4:	4618      	mov	r0, r3
 8022fa6:	f7ff ff36 	bl	8022e16 <memset>
}
 8022faa:	bf00      	nop
 8022fac:	3710      	adds	r7, #16
 8022fae:	46bd      	mov	sp, r7
 8022fb0:	bd80      	pop	{r7, pc}

08022fb2 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8022fb2:	b580      	push	{r7, lr}
 8022fb4:	b082      	sub	sp, #8
 8022fb6:	af00      	add	r7, sp, #0
 8022fb8:	6078      	str	r0, [r7, #4]
 8022fba:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8022fbc:	687b      	ldr	r3, [r7, #4]
 8022fbe:	681b      	ldr	r3, [r3, #0]
 8022fc0:	2b00      	cmp	r3, #0
 8022fc2:	d10d      	bne.n	8022fe0 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022fc4:	683b      	ldr	r3, [r7, #0]
 8022fc6:	b2db      	uxtb	r3, r3
 8022fc8:	2214      	movs	r2, #20
 8022fca:	4611      	mov	r1, r2
 8022fcc:	4618      	mov	r0, r3
 8022fce:	f7ff ffc6 	bl	8022f5e <vOutputChar>
		apStr->curLen++;
 8022fd2:	687b      	ldr	r3, [r7, #4]
 8022fd4:	68db      	ldr	r3, [r3, #12]
 8022fd6:	1c5a      	adds	r2, r3, #1
 8022fd8:	687b      	ldr	r3, [r7, #4]
 8022fda:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022fdc:	2301      	movs	r3, #1
 8022fde:	e022      	b.n	8023026 <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	681a      	ldr	r2, [r3, #0]
 8022fe4:	687b      	ldr	r3, [r7, #4]
 8022fe6:	689b      	ldr	r3, [r3, #8]
 8022fe8:	429a      	cmp	r2, r3
 8022fea:	d20e      	bcs.n	802300a <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 8022fec:	687b      	ldr	r3, [r7, #4]
 8022fee:	681b      	ldr	r3, [r3, #0]
 8022ff0:	1c59      	adds	r1, r3, #1
 8022ff2:	687a      	ldr	r2, [r7, #4]
 8022ff4:	6011      	str	r1, [r2, #0]
 8022ff6:	683a      	ldr	r2, [r7, #0]
 8022ff8:	b2d2      	uxtb	r2, r2
 8022ffa:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 8022ffc:	687b      	ldr	r3, [r7, #4]
 8022ffe:	68db      	ldr	r3, [r3, #12]
 8023000:	1c5a      	adds	r2, r3, #1
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8023006:	2301      	movs	r3, #1
 8023008:	e00d      	b.n	8023026 <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 802300a:	687b      	ldr	r3, [r7, #4]
 802300c:	681a      	ldr	r2, [r3, #0]
 802300e:	687b      	ldr	r3, [r7, #4]
 8023010:	689b      	ldr	r3, [r3, #8]
 8023012:	429a      	cmp	r2, r3
 8023014:	d106      	bne.n	8023024 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 8023016:	687b      	ldr	r3, [r7, #4]
 8023018:	681b      	ldr	r3, [r3, #0]
 802301a:	1c59      	adds	r1, r3, #1
 802301c:	687a      	ldr	r2, [r7, #4]
 802301e:	6011      	str	r1, [r2, #0]
 8023020:	2200      	movs	r2, #0
 8023022:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8023024:	2300      	movs	r3, #0
}
 8023026:	4618      	mov	r0, r3
 8023028:	3708      	adds	r7, #8
 802302a:	46bd      	mov	sp, r7
 802302c:	bd80      	pop	{r7, pc}

0802302e <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 802302e:	b580      	push	{r7, lr}
 8023030:	b082      	sub	sp, #8
 8023032:	af00      	add	r7, sp, #0
 8023034:	6078      	str	r0, [r7, #4]
 8023036:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	681b      	ldr	r3, [r3, #0]
 802303c:	2b00      	cmp	r3, #0
 802303e:	d112      	bne.n	8023066 <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8023040:	683b      	ldr	r3, [r7, #0]
 8023042:	b2db      	uxtb	r3, r3
 8023044:	2214      	movs	r2, #20
 8023046:	4611      	mov	r1, r2
 8023048:	4618      	mov	r0, r3
 802304a:	f7ff ff88 	bl	8022f5e <vOutputChar>
		if( c == 0 )
 802304e:	683b      	ldr	r3, [r7, #0]
 8023050:	2b00      	cmp	r3, #0
 8023052:	d101      	bne.n	8023058 <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8023054:	2300      	movs	r3, #0
 8023056:	e02e      	b.n	80230b6 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	68db      	ldr	r3, [r3, #12]
 802305c:	1c5a      	adds	r2, r3, #1
 802305e:	687b      	ldr	r3, [r7, #4]
 8023060:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8023062:	2301      	movs	r3, #1
 8023064:	e027      	b.n	80230b6 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 8023066:	687b      	ldr	r3, [r7, #4]
 8023068:	681a      	ldr	r2, [r3, #0]
 802306a:	687b      	ldr	r3, [r7, #4]
 802306c:	689b      	ldr	r3, [r3, #8]
 802306e:	429a      	cmp	r2, r3
 8023070:	d213      	bcs.n	802309a <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 8023072:	687b      	ldr	r3, [r7, #4]
 8023074:	681b      	ldr	r3, [r3, #0]
 8023076:	1c59      	adds	r1, r3, #1
 8023078:	687a      	ldr	r2, [r7, #4]
 802307a:	6011      	str	r1, [r2, #0]
 802307c:	683a      	ldr	r2, [r7, #0]
 802307e:	b2d2      	uxtb	r2, r2
 8023080:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 8023082:	683b      	ldr	r3, [r7, #0]
 8023084:	2b00      	cmp	r3, #0
 8023086:	d101      	bne.n	802308c <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 8023088:	2300      	movs	r3, #0
 802308a:	e014      	b.n	80230b6 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 802308c:	687b      	ldr	r3, [r7, #4]
 802308e:	68db      	ldr	r3, [r3, #12]
 8023090:	1c5a      	adds	r2, r3, #1
 8023092:	687b      	ldr	r3, [r7, #4]
 8023094:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8023096:	2301      	movs	r3, #1
 8023098:	e00d      	b.n	80230b6 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 802309a:	687b      	ldr	r3, [r7, #4]
 802309c:	681a      	ldr	r2, [r3, #0]
 802309e:	687b      	ldr	r3, [r7, #4]
 80230a0:	689b      	ldr	r3, [r3, #8]
 80230a2:	429a      	cmp	r2, r3
 80230a4:	d106      	bne.n	80230b4 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 80230a6:	687b      	ldr	r3, [r7, #4]
 80230a8:	681b      	ldr	r3, [r3, #0]
 80230aa:	1c59      	adds	r1, r3, #1
 80230ac:	687a      	ldr	r2, [r7, #4]
 80230ae:	6011      	str	r1, [r2, #0]
 80230b0:	2200      	movs	r2, #0
 80230b2:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 80230b4:	2300      	movs	r3, #0
}
 80230b6:	4618      	mov	r0, r3
 80230b8:	3708      	adds	r7, #8
 80230ba:	46bd      	mov	sp, r7
 80230bc:	bd80      	pop	{r7, pc}
	...

080230c0 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 80230c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230c2:	b085      	sub	sp, #20
 80230c4:	af00      	add	r7, sp, #0
 80230c6:	6078      	str	r0, [r7, #4]
 80230c8:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 80230ca:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 80230cc:	683b      	ldr	r3, [r7, #0]
 80230ce:	4618      	mov	r0, r3
 80230d0:	f7ff ff3a 	bl	8022f48 <xApplicationMemoryPermissions>
 80230d4:	4603      	mov	r3, r0
 80230d6:	2b00      	cmp	r3, #0
 80230d8:	d101      	bne.n	80230de <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 80230da:	4b4c      	ldr	r3, [pc, #304]	@ (802320c <prints+0x14c>)
 80230dc:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 80230de:	687b      	ldr	r3, [r7, #4]
 80230e0:	695b      	ldr	r3, [r3, #20]
 80230e2:	2b00      	cmp	r3, #0
 80230e4:	dd1b      	ble.n	802311e <prints+0x5e>
	{
		register int count = 0;
 80230e6:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 80230e8:	683d      	ldr	r5, [r7, #0]
 80230ea:	e001      	b.n	80230f0 <prints+0x30>
		{
			++count;
 80230ec:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 80230ee:	3501      	adds	r5, #1
 80230f0:	782b      	ldrb	r3, [r5, #0]
 80230f2:	2b00      	cmp	r3, #0
 80230f4:	d1fa      	bne.n	80230ec <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 80230f6:	687b      	ldr	r3, [r7, #4]
 80230f8:	695b      	ldr	r3, [r3, #20]
 80230fa:	429c      	cmp	r4, r3
 80230fc:	db03      	blt.n	8023106 <prints+0x46>
		{
			apBuf->flags.width = 0;
 80230fe:	687b      	ldr	r3, [r7, #4]
 8023100:	2200      	movs	r2, #0
 8023102:	615a      	str	r2, [r3, #20]
 8023104:	e004      	b.n	8023110 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 8023106:	687b      	ldr	r3, [r7, #4]
 8023108:	695b      	ldr	r3, [r3, #20]
 802310a:	1b1a      	subs	r2, r3, r4
 802310c:	687b      	ldr	r3, [r7, #4]
 802310e:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8023110:	687b      	ldr	r3, [r7, #4]
 8023112:	7f1b      	ldrb	r3, [r3, #28]
 8023114:	f003 0302 	and.w	r3, r3, #2
 8023118:	2b00      	cmp	r3, #0
 802311a:	d000      	beq.n	802311e <prints+0x5e>
		{
			padchar = '0';
 802311c:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 802311e:	687b      	ldr	r3, [r7, #4]
 8023120:	7f1b      	ldrb	r3, [r3, #28]
 8023122:	f003 0301 	and.w	r3, r3, #1
 8023126:	2b00      	cmp	r3, #0
 8023128:	d112      	bne.n	8023150 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 802312a:	e00d      	b.n	8023148 <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 802312c:	4631      	mov	r1, r6
 802312e:	6878      	ldr	r0, [r7, #4]
 8023130:	f7ff ff3f 	bl	8022fb2 <strbuf_printchar>
 8023134:	4603      	mov	r3, r0
 8023136:	2b00      	cmp	r3, #0
 8023138:	d101      	bne.n	802313e <prints+0x7e>
			{
				return pdFALSE;
 802313a:	2300      	movs	r3, #0
 802313c:	e062      	b.n	8023204 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 802313e:	687b      	ldr	r3, [r7, #4]
 8023140:	695b      	ldr	r3, [r3, #20]
 8023142:	1e5a      	subs	r2, r3, #1
 8023144:	687b      	ldr	r3, [r7, #4]
 8023146:	615a      	str	r2, [r3, #20]
 8023148:	687b      	ldr	r3, [r7, #4]
 802314a:	695b      	ldr	r3, [r3, #20]
 802314c:	2b00      	cmp	r3, #0
 802314e:	dced      	bgt.n	802312c <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8023150:	687b      	ldr	r3, [r7, #4]
 8023152:	7f9b      	ldrb	r3, [r3, #30]
 8023154:	f003 0302 	and.w	r3, r3, #2
 8023158:	b2db      	uxtb	r3, r3
 802315a:	2b00      	cmp	r3, #0
 802315c:	d036      	beq.n	80231cc <prints+0x10c>
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	7f1b      	ldrb	r3, [r3, #28]
 8023162:	2b01      	cmp	r3, #1
 8023164:	d132      	bne.n	80231cc <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 8023166:	6838      	ldr	r0, [r7, #0]
 8023168:	f7dd f8c4 	bl	80002f4 <strlen>
 802316c:	4603      	mov	r3, r0
 802316e:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	699b      	ldr	r3, [r3, #24]
 8023174:	68ba      	ldr	r2, [r7, #8]
 8023176:	429a      	cmp	r2, r3
 8023178:	da28      	bge.n	80231cc <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 802317a:	687b      	ldr	r3, [r7, #4]
 802317c:	699a      	ldr	r2, [r3, #24]
 802317e:	68bb      	ldr	r3, [r7, #8]
 8023180:	1ad3      	subs	r3, r2, r3
 8023182:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8023184:	e00b      	b.n	802319e <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 8023186:	2130      	movs	r1, #48	@ 0x30
 8023188:	6878      	ldr	r0, [r7, #4]
 802318a:	f7ff ff12 	bl	8022fb2 <strbuf_printchar>
 802318e:	4603      	mov	r3, r0
 8023190:	2b00      	cmp	r3, #0
 8023192:	d101      	bne.n	8023198 <prints+0xd8>
				{
					return pdFALSE;
 8023194:	2300      	movs	r3, #0
 8023196:	e035      	b.n	8023204 <prints+0x144>
			for( ; i; i-- )
 8023198:	68fb      	ldr	r3, [r7, #12]
 802319a:	3b01      	subs	r3, #1
 802319c:	60fb      	str	r3, [r7, #12]
 802319e:	68fb      	ldr	r3, [r7, #12]
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	d1f0      	bne.n	8023186 <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 80231a4:	e012      	b.n	80231cc <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 80231a6:	683b      	ldr	r3, [r7, #0]
 80231a8:	781b      	ldrb	r3, [r3, #0]
 80231aa:	4619      	mov	r1, r3
 80231ac:	6878      	ldr	r0, [r7, #4]
 80231ae:	f7ff ff00 	bl	8022fb2 <strbuf_printchar>
 80231b2:	4603      	mov	r3, r0
 80231b4:	2b00      	cmp	r3, #0
 80231b6:	d101      	bne.n	80231bc <prints+0xfc>
		{
			return pdFALSE;
 80231b8:	2300      	movs	r3, #0
 80231ba:	e023      	b.n	8023204 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 80231bc:	683b      	ldr	r3, [r7, #0]
 80231be:	3301      	adds	r3, #1
 80231c0:	603b      	str	r3, [r7, #0]
 80231c2:	687b      	ldr	r3, [r7, #4]
 80231c4:	699b      	ldr	r3, [r3, #24]
 80231c6:	1e5a      	subs	r2, r3, #1
 80231c8:	687b      	ldr	r3, [r7, #4]
 80231ca:	619a      	str	r2, [r3, #24]
 80231cc:	687b      	ldr	r3, [r7, #4]
 80231ce:	699b      	ldr	r3, [r3, #24]
 80231d0:	2b00      	cmp	r3, #0
 80231d2:	d012      	beq.n	80231fa <prints+0x13a>
 80231d4:	683b      	ldr	r3, [r7, #0]
 80231d6:	781b      	ldrb	r3, [r3, #0]
 80231d8:	2b00      	cmp	r3, #0
 80231da:	d1e4      	bne.n	80231a6 <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80231dc:	e00d      	b.n	80231fa <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 80231de:	4631      	mov	r1, r6
 80231e0:	6878      	ldr	r0, [r7, #4]
 80231e2:	f7ff fee6 	bl	8022fb2 <strbuf_printchar>
 80231e6:	4603      	mov	r3, r0
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	d101      	bne.n	80231f0 <prints+0x130>
		{
			return pdFALSE;
 80231ec:	2300      	movs	r3, #0
 80231ee:	e009      	b.n	8023204 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80231f0:	687b      	ldr	r3, [r7, #4]
 80231f2:	695b      	ldr	r3, [r3, #20]
 80231f4:	1e5a      	subs	r2, r3, #1
 80231f6:	687b      	ldr	r3, [r7, #4]
 80231f8:	615a      	str	r2, [r3, #20]
 80231fa:	687b      	ldr	r3, [r7, #4]
 80231fc:	695b      	ldr	r3, [r3, #20]
 80231fe:	2b00      	cmp	r3, #0
 8023200:	dced      	bgt.n	80231de <prints+0x11e>
		}
	}

	return pdTRUE;
 8023202:	2301      	movs	r3, #1
}
 8023204:	4618      	mov	r0, r3
 8023206:	3714      	adds	r7, #20
 8023208:	46bd      	mov	sp, r7
 802320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802320c:	08027e90 	.word	0x08027e90

08023210 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8023210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023214:	b087      	sub	sp, #28
 8023216:	af00      	add	r7, sp, #0
 8023218:	6078      	str	r0, [r7, #4]
 802321a:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 802321c:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 8023220:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 8023222:	687b      	ldr	r3, [r7, #4]
 8023224:	691b      	ldr	r3, [r3, #16]
 8023226:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8023228:	687a      	ldr	r2, [r7, #4]
 802322a:	7f93      	ldrb	r3, [r2, #30]
 802322c:	f043 0302 	orr.w	r3, r3, #2
 8023230:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8023232:	683b      	ldr	r3, [r7, #0]
 8023234:	2b00      	cmp	r3, #0
 8023236:	d10b      	bne.n	8023250 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 8023238:	2330      	movs	r3, #48	@ 0x30
 802323a:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 802323c:	2300      	movs	r3, #0
 802323e:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8023240:	f107 030c 	add.w	r3, r7, #12
 8023244:	4619      	mov	r1, r3
 8023246:	6878      	ldr	r0, [r7, #4]
 8023248:	f7ff ff3a 	bl	80230c0 <prints>
 802324c:	4603      	mov	r3, r0
 802324e:	e067      	b.n	8023320 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	7f9b      	ldrb	r3, [r3, #30]
 8023254:	f003 0301 	and.w	r3, r3, #1
 8023258:	b2db      	uxtb	r3, r3
 802325a:	2b00      	cmp	r3, #0
 802325c:	d009      	beq.n	8023272 <printi+0x62>
 802325e:	2e0a      	cmp	r6, #10
 8023260:	d107      	bne.n	8023272 <printi+0x62>
 8023262:	683b      	ldr	r3, [r7, #0]
 8023264:	2b00      	cmp	r3, #0
 8023266:	da04      	bge.n	8023272 <printi+0x62>
	{
		neg = 1;
 8023268:	f04f 0901 	mov.w	r9, #1
		u = -i;
 802326c:	683b      	ldr	r3, [r7, #0]
 802326e:	425b      	negs	r3, r3
 8023270:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 8023272:	f107 040c 	add.w	r4, r7, #12
 8023276:	340b      	adds	r4, #11

	*s = '\0';
 8023278:	2300      	movs	r3, #0
 802327a:	7023      	strb	r3, [r4, #0]
	switch( base )
 802327c:	2e10      	cmp	r6, #16
 802327e:	d017      	beq.n	80232b0 <printi+0xa0>
 8023280:	2e10      	cmp	r6, #16
 8023282:	d829      	bhi.n	80232d8 <printi+0xc8>
 8023284:	2e08      	cmp	r6, #8
 8023286:	d024      	beq.n	80232d2 <printi+0xc2>
 8023288:	2e0a      	cmp	r6, #10
 802328a:	d022      	beq.n	80232d2 <printi+0xc2>
 802328c:	e024      	b.n	80232d8 <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 802328e:	462b      	mov	r3, r5
 8023290:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 8023294:	f1b8 0f09 	cmp.w	r8, #9
 8023298:	dd03      	ble.n	80232a2 <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	7f5b      	ldrb	r3, [r3, #29]
 802329e:	3b3a      	subs	r3, #58	@ 0x3a
 80232a0:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 80232a2:	fa5f f388 	uxtb.w	r3, r8
 80232a6:	3c01      	subs	r4, #1
 80232a8:	3330      	adds	r3, #48	@ 0x30
 80232aa:	b2db      	uxtb	r3, r3
 80232ac:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 80232ae:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 80232b0:	2d00      	cmp	r5, #0
 80232b2:	d1ec      	bne.n	802328e <printi+0x7e>
		}
		break;
 80232b4:	e010      	b.n	80232d8 <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 80232b6:	fbb5 f3f6 	udiv	r3, r5, r6
 80232ba:	fb06 f303 	mul.w	r3, r6, r3
 80232be:	1aeb      	subs	r3, r5, r3
 80232c0:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 80232c2:	fa5f f388 	uxtb.w	r3, r8
 80232c6:	3c01      	subs	r4, #1
 80232c8:	3330      	adds	r3, #48	@ 0x30
 80232ca:	b2db      	uxtb	r3, r3
 80232cc:	7023      	strb	r3, [r4, #0]
			u /= base;
 80232ce:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 80232d2:	2d00      	cmp	r5, #0
 80232d4:	d1ef      	bne.n	80232b6 <printi+0xa6>
		}
		break;
 80232d6:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 80232d8:	f1b9 0f00 	cmp.w	r9, #0
 80232dc:	d01b      	beq.n	8023316 <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 80232de:	687b      	ldr	r3, [r7, #4]
 80232e0:	695b      	ldr	r3, [r3, #20]
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	d014      	beq.n	8023310 <printi+0x100>
 80232e6:	687b      	ldr	r3, [r7, #4]
 80232e8:	7f1b      	ldrb	r3, [r3, #28]
 80232ea:	f003 0302 	and.w	r3, r3, #2
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	d00e      	beq.n	8023310 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 80232f2:	212d      	movs	r1, #45	@ 0x2d
 80232f4:	6878      	ldr	r0, [r7, #4]
 80232f6:	f7ff fe5c 	bl	8022fb2 <strbuf_printchar>
 80232fa:	4603      	mov	r3, r0
 80232fc:	2b00      	cmp	r3, #0
 80232fe:	d101      	bne.n	8023304 <printi+0xf4>
			{
				return pdFALSE;
 8023300:	2300      	movs	r3, #0
 8023302:	e00d      	b.n	8023320 <printi+0x110>
			}
			--apBuf->flags.width;
 8023304:	687b      	ldr	r3, [r7, #4]
 8023306:	695b      	ldr	r3, [r3, #20]
 8023308:	1e5a      	subs	r2, r3, #1
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	615a      	str	r2, [r3, #20]
 802330e:	e002      	b.n	8023316 <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 8023310:	3c01      	subs	r4, #1
 8023312:	232d      	movs	r3, #45	@ 0x2d
 8023314:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 8023316:	4621      	mov	r1, r4
 8023318:	6878      	ldr	r0, [r7, #4]
 802331a:	f7ff fed1 	bl	80230c0 <prints>
 802331e:	4603      	mov	r3, r0
}
 8023320:	4618      	mov	r0, r3
 8023322:	371c      	adds	r7, #28
 8023324:	46bd      	mov	sp, r7
 8023326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0802332c <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 802332c:	b590      	push	{r4, r7, lr}
 802332e:	b089      	sub	sp, #36	@ 0x24
 8023330:	af02      	add	r7, sp, #8
 8023332:	6078      	str	r0, [r7, #4]
 8023334:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 8023336:	683b      	ldr	r3, [r7, #0]
 8023338:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 802333a:	683b      	ldr	r3, [r7, #0]
 802333c:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 802333e:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 8023340:	683b      	ldr	r3, [r7, #0]
 8023342:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 8023344:	b2db      	uxtb	r3, r3
 8023346:	683a      	ldr	r2, [r7, #0]
 8023348:	b2d2      	uxtb	r2, r2
 802334a:	f107 0008 	add.w	r0, r7, #8
 802334e:	9201      	str	r2, [sp, #4]
 8023350:	9300      	str	r3, [sp, #0]
 8023352:	4623      	mov	r3, r4
 8023354:	460a      	mov	r2, r1
 8023356:	4909      	ldr	r1, [pc, #36]	@ (802337c <printIp+0x50>)
 8023358:	f000 fa81 	bl	802385e <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 802335c:	687a      	ldr	r2, [r7, #4]
 802335e:	7f93      	ldrb	r3, [r2, #30]
 8023360:	f043 0302 	orr.w	r3, r3, #2
 8023364:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 8023366:	f107 0308 	add.w	r3, r7, #8
 802336a:	4619      	mov	r1, r3
 802336c:	6878      	ldr	r0, [r7, #4]
 802336e:	f7ff fea7 	bl	80230c0 <prints>

	return pdTRUE;
 8023372:	2301      	movs	r3, #1
}
 8023374:	4618      	mov	r0, r3
 8023376:	371c      	adds	r7, #28
 8023378:	46bd      	mov	sp, r7
 802337a:	bd90      	pop	{r4, r7, pc}
 802337c:	08027e98 	.word	0x08027e98

08023380 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 8023380:	b480      	push	{r7}
 8023382:	b083      	sub	sp, #12
 8023384:	af00      	add	r7, sp, #0
 8023386:	4603      	mov	r3, r0
 8023388:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 802338a:	4a0b      	ldr	r2, [pc, #44]	@ (80233b8 <usNetToHost+0x38>)
 802338c:	4b0b      	ldr	r3, [pc, #44]	@ (80233bc <usNetToHost+0x3c>)
 802338e:	429a      	cmp	r2, r3
 8023390:	d101      	bne.n	8023396 <usNetToHost+0x16>
	{
		return usValue;
 8023392:	88fb      	ldrh	r3, [r7, #6]
 8023394:	e009      	b.n	80233aa <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 8023396:	88fb      	ldrh	r3, [r7, #6]
 8023398:	021b      	lsls	r3, r3, #8
 802339a:	b21a      	sxth	r2, r3
 802339c:	88fb      	ldrh	r3, [r7, #6]
 802339e:	0a1b      	lsrs	r3, r3, #8
 80233a0:	b29b      	uxth	r3, r3
 80233a2:	b21b      	sxth	r3, r3
 80233a4:	4313      	orrs	r3, r2
 80233a6:	b21b      	sxth	r3, r3
 80233a8:	b29b      	uxth	r3, r3
	}
}
 80233aa:	4618      	mov	r0, r3
 80233ac:	370c      	adds	r7, #12
 80233ae:	46bd      	mov	sp, r7
 80233b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233b4:	4770      	bx	lr
 80233b6:	bf00      	nop
 80233b8:	03020100 	.word	0x03020100
 80233bc:	00010203 	.word	0x00010203

080233c0 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 80233c0:	b580      	push	{r7, lr}
 80233c2:	b088      	sub	sp, #32
 80233c4:	af00      	add	r7, sp, #0
 80233c6:	6078      	str	r0, [r7, #4]
 80233c8:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 80233ca:	f04f 33ff 	mov.w	r3, #4294967295
 80233ce:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 80233d0:	2300      	movs	r3, #0
 80233d2:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 80233d4:	2300      	movs	r3, #0
 80233d6:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 80233d8:	2300      	movs	r3, #0
 80233da:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80233dc:	2300      	movs	r3, #0
 80233de:	61fb      	str	r3, [r7, #28]
 80233e0:	e026      	b.n	8023430 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 80233e2:	69fb      	ldr	r3, [r7, #28]
 80233e4:	005b      	lsls	r3, r3, #1
 80233e6:	683a      	ldr	r2, [r7, #0]
 80233e8:	4413      	add	r3, r2
 80233ea:	881b      	ldrh	r3, [r3, #0]
 80233ec:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 80233ee:	897b      	ldrh	r3, [r7, #10]
 80233f0:	2b00      	cmp	r3, #0
 80233f2:	d107      	bne.n	8023404 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 80233f4:	68fb      	ldr	r3, [r7, #12]
 80233f6:	2b00      	cmp	r3, #0
 80233f8:	d101      	bne.n	80233fe <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 80233fa:	69fb      	ldr	r3, [r7, #28]
 80233fc:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 80233fe:	68fb      	ldr	r3, [r7, #12]
 8023400:	3301      	adds	r3, #1
 8023402:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 8023404:	897b      	ldrh	r3, [r7, #10]
 8023406:	2b00      	cmp	r3, #0
 8023408:	d102      	bne.n	8023410 <printIPv6+0x50>
 802340a:	69fb      	ldr	r3, [r7, #28]
 802340c:	2b07      	cmp	r3, #7
 802340e:	d10c      	bne.n	802342a <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 8023410:	68fb      	ldr	r3, [r7, #12]
 8023412:	2b01      	cmp	r3, #1
 8023414:	dd07      	ble.n	8023426 <printIPv6+0x66>
 8023416:	697a      	ldr	r2, [r7, #20]
 8023418:	68fb      	ldr	r3, [r7, #12]
 802341a:	429a      	cmp	r2, r3
 802341c:	da03      	bge.n	8023426 <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 802341e:	68fb      	ldr	r3, [r7, #12]
 8023420:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 8023422:	693b      	ldr	r3, [r7, #16]
 8023424:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 8023426:	2300      	movs	r3, #0
 8023428:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802342a:	69fb      	ldr	r3, [r7, #28]
 802342c:	3301      	adds	r3, #1
 802342e:	61fb      	str	r3, [r7, #28]
 8023430:	69fb      	ldr	r3, [r7, #28]
 8023432:	2b07      	cmp	r3, #7
 8023434:	ddd5      	ble.n	80233e2 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 8023436:	687b      	ldr	r3, [r7, #4]
 8023438:	2210      	movs	r2, #16
 802343a:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 802343c:	687b      	ldr	r3, [r7, #4]
 802343e:	2261      	movs	r2, #97	@ 0x61
 8023440:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8023442:	2300      	movs	r3, #0
 8023444:	61fb      	str	r3, [r7, #28]
 8023446:	e02b      	b.n	80234a0 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 8023448:	69fa      	ldr	r2, [r7, #28]
 802344a:	69bb      	ldr	r3, [r7, #24]
 802344c:	429a      	cmp	r2, r3
 802344e:	d110      	bne.n	8023472 <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 8023450:	697b      	ldr	r3, [r7, #20]
 8023452:	3b01      	subs	r3, #1
 8023454:	69fa      	ldr	r2, [r7, #28]
 8023456:	4413      	add	r3, r2
 8023458:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 802345a:	213a      	movs	r1, #58	@ 0x3a
 802345c:	6878      	ldr	r0, [r7, #4]
 802345e:	f7ff fda8 	bl	8022fb2 <strbuf_printchar>
			if( iIndex == 7 )
 8023462:	69fb      	ldr	r3, [r7, #28]
 8023464:	2b07      	cmp	r3, #7
 8023466:	d118      	bne.n	802349a <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 8023468:	213a      	movs	r1, #58	@ 0x3a
 802346a:	6878      	ldr	r0, [r7, #4]
 802346c:	f7ff fda1 	bl	8022fb2 <strbuf_printchar>
 8023470:	e013      	b.n	802349a <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 8023472:	69fb      	ldr	r3, [r7, #28]
 8023474:	2b00      	cmp	r3, #0
 8023476:	dd03      	ble.n	8023480 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 8023478:	213a      	movs	r1, #58	@ 0x3a
 802347a:	6878      	ldr	r0, [r7, #4]
 802347c:	f7ff fd99 	bl	8022fb2 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 8023480:	69fb      	ldr	r3, [r7, #28]
 8023482:	005b      	lsls	r3, r3, #1
 8023484:	683a      	ldr	r2, [r7, #0]
 8023486:	4413      	add	r3, r2
 8023488:	881b      	ldrh	r3, [r3, #0]
 802348a:	4618      	mov	r0, r3
 802348c:	f7ff ff78 	bl	8023380 <usNetToHost>
 8023490:	4603      	mov	r3, r0
 8023492:	4619      	mov	r1, r3
 8023494:	6878      	ldr	r0, [r7, #4]
 8023496:	f7ff febb 	bl	8023210 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802349a:	69fb      	ldr	r3, [r7, #28]
 802349c:	3301      	adds	r3, #1
 802349e:	61fb      	str	r3, [r7, #28]
 80234a0:	69fb      	ldr	r3, [r7, #28]
 80234a2:	2b07      	cmp	r3, #7
 80234a4:	ddd0      	ble.n	8023448 <printIPv6+0x88>
		}
	}

	return pdTRUE;
 80234a6:	2301      	movs	r3, #1
}
 80234a8:	4618      	mov	r0, r3
 80234aa:	3720      	adds	r7, #32
 80234ac:	46bd      	mov	sp, r7
 80234ae:	bd80      	pop	{r7, pc}

080234b0 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 80234b0:	b590      	push	{r4, r7, lr}
 80234b2:	b087      	sub	sp, #28
 80234b4:	af00      	add	r7, sp, #0
 80234b6:	60f8      	str	r0, [r7, #12]
 80234b8:	60b9      	str	r1, [r7, #8]
 80234ba:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 80234bc:	68bb      	ldr	r3, [r7, #8]
 80234be:	1c5a      	adds	r2, r3, #1
 80234c0:	60ba      	str	r2, [r7, #8]
 80234c2:	781b      	ldrb	r3, [r3, #0]
 80234c4:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 80234c6:	697b      	ldr	r3, [r7, #20]
 80234c8:	2b25      	cmp	r3, #37	@ 0x25
 80234ca:	d00f      	beq.n	80234ec <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 80234cc:	6979      	ldr	r1, [r7, #20]
 80234ce:	68f8      	ldr	r0, [r7, #12]
 80234d0:	f7ff fdad 	bl	802302e <strbuf_printchar_inline>
 80234d4:	4603      	mov	r3, r0
 80234d6:	2b00      	cmp	r3, #0
 80234d8:	f000 817e 	beq.w	80237d8 <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 80234dc:	68bb      	ldr	r3, [r7, #8]
 80234de:	1c5a      	adds	r2, r3, #1
 80234e0:	60ba      	str	r2, [r7, #8]
 80234e2:	781b      	ldrb	r3, [r3, #0]
 80234e4:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 80234e6:	697b      	ldr	r3, [r7, #20]
 80234e8:	2b25      	cmp	r3, #37	@ 0x25
 80234ea:	d1ef      	bne.n	80234cc <tiny_print+0x1c>
		}
		ch = *( format++ );
 80234ec:	68bb      	ldr	r3, [r7, #8]
 80234ee:	1c5a      	adds	r2, r3, #1
 80234f0:	60ba      	str	r2, [r7, #8]
 80234f2:	781b      	ldrb	r3, [r3, #0]
 80234f4:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 80234f6:	697b      	ldr	r3, [r7, #20]
 80234f8:	2b00      	cmp	r3, #0
 80234fa:	f000 8165 	beq.w	80237c8 <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 80234fe:	697b      	ldr	r3, [r7, #20]
 8023500:	2b25      	cmp	r3, #37	@ 0x25
 8023502:	d108      	bne.n	8023516 <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 8023504:	6979      	ldr	r1, [r7, #20]
 8023506:	68f8      	ldr	r0, [r7, #12]
 8023508:	f7ff fd53 	bl	8022fb2 <strbuf_printchar>
 802350c:	4603      	mov	r3, r0
 802350e:	2b00      	cmp	r3, #0
 8023510:	f040 814e 	bne.w	80237b0 <tiny_print+0x300>
			{
				return;
 8023514:	e161      	b.n	80237da <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 8023516:	68fb      	ldr	r3, [r7, #12]
 8023518:	3310      	adds	r3, #16
 802351a:	2210      	movs	r2, #16
 802351c:	2100      	movs	r1, #0
 802351e:	4618      	mov	r0, r3
 8023520:	f7ff fc79 	bl	8022e16 <memset>

		if( ch == '-' )
 8023524:	697b      	ldr	r3, [r7, #20]
 8023526:	2b2d      	cmp	r3, #45	@ 0x2d
 8023528:	d114      	bne.n	8023554 <tiny_print+0xa4>
		{
			ch = *( format++ );
 802352a:	68bb      	ldr	r3, [r7, #8]
 802352c:	1c5a      	adds	r2, r3, #1
 802352e:	60ba      	str	r2, [r7, #8]
 8023530:	781b      	ldrb	r3, [r3, #0]
 8023532:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 8023534:	68fb      	ldr	r3, [r7, #12]
 8023536:	2201      	movs	r2, #1
 8023538:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 802353a:	e00b      	b.n	8023554 <tiny_print+0xa4>
		{
			ch = *( format++ );
 802353c:	68bb      	ldr	r3, [r7, #8]
 802353e:	1c5a      	adds	r2, r3, #1
 8023540:	60ba      	str	r2, [r7, #8]
 8023542:	781b      	ldrb	r3, [r3, #0]
 8023544:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 8023546:	68fb      	ldr	r3, [r7, #12]
 8023548:	7f1b      	ldrb	r3, [r3, #28]
 802354a:	f043 0302 	orr.w	r3, r3, #2
 802354e:	b2da      	uxtb	r2, r3
 8023550:	68fb      	ldr	r3, [r7, #12]
 8023552:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 8023554:	697b      	ldr	r3, [r7, #20]
 8023556:	2b30      	cmp	r3, #48	@ 0x30
 8023558:	d0f0      	beq.n	802353c <tiny_print+0x8c>
		}
		if( ch == '*' )
 802355a:	697b      	ldr	r3, [r7, #20]
 802355c:	2b2a      	cmp	r3, #42	@ 0x2a
 802355e:	d120      	bne.n	80235a2 <tiny_print+0xf2>
		{
			ch = *( format++ );
 8023560:	68bb      	ldr	r3, [r7, #8]
 8023562:	1c5a      	adds	r2, r3, #1
 8023564:	60ba      	str	r2, [r7, #8]
 8023566:	781b      	ldrb	r3, [r3, #0]
 8023568:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 802356a:	687b      	ldr	r3, [r7, #4]
 802356c:	1d1a      	adds	r2, r3, #4
 802356e:	607a      	str	r2, [r7, #4]
 8023570:	681a      	ldr	r2, [r3, #0]
 8023572:	68fb      	ldr	r3, [r7, #12]
 8023574:	615a      	str	r2, [r3, #20]
 8023576:	e01a      	b.n	80235ae <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 8023578:	68fb      	ldr	r3, [r7, #12]
 802357a:	695a      	ldr	r2, [r3, #20]
 802357c:	4613      	mov	r3, r2
 802357e:	009b      	lsls	r3, r3, #2
 8023580:	4413      	add	r3, r2
 8023582:	005b      	lsls	r3, r3, #1
 8023584:	461a      	mov	r2, r3
 8023586:	68fb      	ldr	r3, [r7, #12]
 8023588:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 802358a:	68fb      	ldr	r3, [r7, #12]
 802358c:	695a      	ldr	r2, [r3, #20]
 802358e:	697b      	ldr	r3, [r7, #20]
 8023590:	3b30      	subs	r3, #48	@ 0x30
 8023592:	441a      	add	r2, r3
 8023594:	68fb      	ldr	r3, [r7, #12]
 8023596:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 8023598:	68bb      	ldr	r3, [r7, #8]
 802359a:	1c5a      	adds	r2, r3, #1
 802359c:	60ba      	str	r2, [r7, #8]
 802359e:	781b      	ldrb	r3, [r3, #0]
 80235a0:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 80235a2:	697b      	ldr	r3, [r7, #20]
 80235a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80235a6:	dd02      	ble.n	80235ae <tiny_print+0xfe>
 80235a8:	697b      	ldr	r3, [r7, #20]
 80235aa:	2b39      	cmp	r3, #57	@ 0x39
 80235ac:	dde4      	ble.n	8023578 <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 80235ae:	697b      	ldr	r3, [r7, #20]
 80235b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80235b2:	d12e      	bne.n	8023612 <tiny_print+0x162>
		{
			ch = *( format++ );
 80235b4:	68bb      	ldr	r3, [r7, #8]
 80235b6:	1c5a      	adds	r2, r3, #1
 80235b8:	60ba      	str	r2, [r7, #8]
 80235ba:	781b      	ldrb	r3, [r3, #0]
 80235bc:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 80235be:	697b      	ldr	r3, [r7, #20]
 80235c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80235c2:	d120      	bne.n	8023606 <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	1d1a      	adds	r2, r3, #4
 80235c8:	607a      	str	r2, [r7, #4]
 80235ca:	681a      	ldr	r2, [r3, #0]
 80235cc:	68fb      	ldr	r3, [r7, #12]
 80235ce:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 80235d0:	68bb      	ldr	r3, [r7, #8]
 80235d2:	1c5a      	adds	r2, r3, #1
 80235d4:	60ba      	str	r2, [r7, #8]
 80235d6:	781b      	ldrb	r3, [r3, #0]
 80235d8:	617b      	str	r3, [r7, #20]
 80235da:	e01a      	b.n	8023612 <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 80235dc:	68fb      	ldr	r3, [r7, #12]
 80235de:	699a      	ldr	r2, [r3, #24]
 80235e0:	4613      	mov	r3, r2
 80235e2:	009b      	lsls	r3, r3, #2
 80235e4:	4413      	add	r3, r2
 80235e6:	005b      	lsls	r3, r3, #1
 80235e8:	461a      	mov	r2, r3
 80235ea:	68fb      	ldr	r3, [r7, #12]
 80235ec:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 80235ee:	68fb      	ldr	r3, [r7, #12]
 80235f0:	699a      	ldr	r2, [r3, #24]
 80235f2:	697b      	ldr	r3, [r7, #20]
 80235f4:	3b30      	subs	r3, #48	@ 0x30
 80235f6:	441a      	add	r2, r3
 80235f8:	68fb      	ldr	r3, [r7, #12]
 80235fa:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 80235fc:	68bb      	ldr	r3, [r7, #8]
 80235fe:	1c5a      	adds	r2, r3, #1
 8023600:	60ba      	str	r2, [r7, #8]
 8023602:	781b      	ldrb	r3, [r3, #0]
 8023604:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 8023606:	697b      	ldr	r3, [r7, #20]
 8023608:	2b2f      	cmp	r3, #47	@ 0x2f
 802360a:	dd02      	ble.n	8023612 <tiny_print+0x162>
 802360c:	697b      	ldr	r3, [r7, #20]
 802360e:	2b39      	cmp	r3, #57	@ 0x39
 8023610:	dde4      	ble.n	80235dc <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 8023612:	68fb      	ldr	r3, [r7, #12]
 8023614:	699b      	ldr	r3, [r3, #24]
 8023616:	2b00      	cmp	r3, #0
 8023618:	d104      	bne.n	8023624 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 802361a:	68fb      	ldr	r3, [r7, #12]
 802361c:	699b      	ldr	r3, [r3, #24]
 802361e:	1e5a      	subs	r2, r3, #1
 8023620:	68fb      	ldr	r3, [r7, #12]
 8023622:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 8023624:	697b      	ldr	r3, [r7, #20]
 8023626:	2b70      	cmp	r3, #112	@ 0x70
 8023628:	d118      	bne.n	802365c <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 802362a:	68bb      	ldr	r3, [r7, #8]
 802362c:	781b      	ldrb	r3, [r3, #0]
 802362e:	2b69      	cmp	r3, #105	@ 0x69
 8023630:	d114      	bne.n	802365c <tiny_print+0x1ac>
 8023632:	68bb      	ldr	r3, [r7, #8]
 8023634:	3301      	adds	r3, #1
 8023636:	781b      	ldrb	r3, [r3, #0]
 8023638:	2b70      	cmp	r3, #112	@ 0x70
 802363a:	d10f      	bne.n	802365c <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 802363c:	68bb      	ldr	r3, [r7, #8]
 802363e:	3302      	adds	r3, #2
 8023640:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 8023642:	687b      	ldr	r3, [r7, #4]
 8023644:	1d1a      	adds	r2, r3, #4
 8023646:	607a      	str	r2, [r7, #4]
 8023648:	681b      	ldr	r3, [r3, #0]
 802364a:	4619      	mov	r1, r3
 802364c:	68f8      	ldr	r0, [r7, #12]
 802364e:	f7ff feb7 	bl	80233c0 <printIPv6>
 8023652:	4603      	mov	r3, r0
 8023654:	2b00      	cmp	r3, #0
 8023656:	f040 80ad 	bne.w	80237b4 <tiny_print+0x304>
				{
					break;
 802365a:	e0b8      	b.n	80237ce <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 802365c:	697b      	ldr	r3, [r7, #20]
 802365e:	2b73      	cmp	r3, #115	@ 0x73
 8023660:	d112      	bne.n	8023688 <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 8023662:	687b      	ldr	r3, [r7, #4]
 8023664:	1d1a      	adds	r2, r3, #4
 8023666:	607a      	str	r2, [r7, #4]
 8023668:	681b      	ldr	r3, [r3, #0]
 802366a:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 802366c:	2c00      	cmp	r4, #0
 802366e:	d001      	beq.n	8023674 <tiny_print+0x1c4>
 8023670:	4623      	mov	r3, r4
 8023672:	e000      	b.n	8023676 <tiny_print+0x1c6>
 8023674:	4b5a      	ldr	r3, [pc, #360]	@ (80237e0 <tiny_print+0x330>)
 8023676:	4619      	mov	r1, r3
 8023678:	68f8      	ldr	r0, [r7, #12]
 802367a:	f7ff fd21 	bl	80230c0 <prints>
 802367e:	4603      	mov	r3, r0
 8023680:	2b00      	cmp	r3, #0
 8023682:	f040 8099 	bne.w	80237b8 <tiny_print+0x308>
			{
				break;
 8023686:	e0a2      	b.n	80237ce <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 8023688:	697b      	ldr	r3, [r7, #20]
 802368a:	2b63      	cmp	r3, #99	@ 0x63
 802368c:	d10f      	bne.n	80236ae <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 802368e:	687b      	ldr	r3, [r7, #4]
 8023690:	1d1a      	adds	r2, r3, #4
 8023692:	607a      	str	r2, [r7, #4]
 8023694:	681b      	ldr	r3, [r3, #0]
 8023696:	b2db      	uxtb	r3, r3
 8023698:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 802369a:	7c3b      	ldrb	r3, [r7, #16]
 802369c:	4619      	mov	r1, r3
 802369e:	68f8      	ldr	r0, [r7, #12]
 80236a0:	f7ff fc87 	bl	8022fb2 <strbuf_printchar>
 80236a4:	4603      	mov	r3, r0
 80236a6:	2b00      	cmp	r3, #0
 80236a8:	f040 8088 	bne.w	80237bc <tiny_print+0x30c>
			{
				return;
 80236ac:	e095      	b.n	80237da <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 80236ae:	697b      	ldr	r3, [r7, #20]
 80236b0:	2b6c      	cmp	r3, #108	@ 0x6c
 80236b2:	d109      	bne.n	80236c8 <tiny_print+0x218>
		{
			ch = *( format++ );
 80236b4:	68bb      	ldr	r3, [r7, #8]
 80236b6:	1c5a      	adds	r2, r3, #1
 80236b8:	60ba      	str	r2, [r7, #8]
 80236ba:	781b      	ldrb	r3, [r3, #0]
 80236bc:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 80236be:	68fa      	ldr	r2, [r7, #12]
 80236c0:	7f93      	ldrb	r3, [r2, #30]
 80236c2:	f043 0304 	orr.w	r3, r3, #4
 80236c6:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 80236c8:	697b      	ldr	r3, [r7, #20]
 80236ca:	2b4c      	cmp	r3, #76	@ 0x4c
 80236cc:	d109      	bne.n	80236e2 <tiny_print+0x232>
		{
			ch = *( format++ );
 80236ce:	68bb      	ldr	r3, [r7, #8]
 80236d0:	1c5a      	adds	r2, r3, #1
 80236d2:	60ba      	str	r2, [r7, #8]
 80236d4:	781b      	ldrb	r3, [r3, #0]
 80236d6:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 80236d8:	68fa      	ldr	r2, [r7, #12]
 80236da:	7f93      	ldrb	r3, [r2, #30]
 80236dc:	f043 0308 	orr.w	r3, r3, #8
 80236e0:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 80236e2:	68fb      	ldr	r3, [r7, #12]
 80236e4:	220a      	movs	r2, #10
 80236e6:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 80236e8:	68fb      	ldr	r3, [r7, #12]
 80236ea:	2261      	movs	r2, #97	@ 0x61
 80236ec:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 80236ee:	697b      	ldr	r3, [r7, #20]
 80236f0:	2b64      	cmp	r3, #100	@ 0x64
 80236f2:	d002      	beq.n	80236fa <tiny_print+0x24a>
 80236f4:	697b      	ldr	r3, [r7, #20]
 80236f6:	2b75      	cmp	r3, #117	@ 0x75
 80236f8:	d116      	bne.n	8023728 <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 80236fa:	697b      	ldr	r3, [r7, #20]
 80236fc:	2b64      	cmp	r3, #100	@ 0x64
 80236fe:	bf0c      	ite	eq
 8023700:	2301      	moveq	r3, #1
 8023702:	2300      	movne	r3, #0
 8023704:	b2d9      	uxtb	r1, r3
 8023706:	68fa      	ldr	r2, [r7, #12]
 8023708:	7f93      	ldrb	r3, [r2, #30]
 802370a:	f361 0300 	bfi	r3, r1, #0, #1
 802370e:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8023710:	687b      	ldr	r3, [r7, #4]
 8023712:	1d1a      	adds	r2, r3, #4
 8023714:	607a      	str	r2, [r7, #4]
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	4619      	mov	r1, r3
 802371a:	68f8      	ldr	r0, [r7, #12]
 802371c:	f7ff fd78 	bl	8023210 <printi>
 8023720:	4603      	mov	r3, r0
 8023722:	2b00      	cmp	r3, #0
 8023724:	d14c      	bne.n	80237c0 <tiny_print+0x310>
			{
				break;
 8023726:	e052      	b.n	80237ce <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 8023728:	68fb      	ldr	r3, [r7, #12]
 802372a:	2210      	movs	r2, #16
 802372c:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 802372e:	697b      	ldr	r3, [r7, #20]
 8023730:	2b78      	cmp	r3, #120	@ 0x78
 8023732:	d117      	bne.n	8023764 <tiny_print+0x2b4>
 8023734:	68bb      	ldr	r3, [r7, #8]
 8023736:	781b      	ldrb	r3, [r3, #0]
 8023738:	2b69      	cmp	r3, #105	@ 0x69
 802373a:	d113      	bne.n	8023764 <tiny_print+0x2b4>
 802373c:	68bb      	ldr	r3, [r7, #8]
 802373e:	3301      	adds	r3, #1
 8023740:	781b      	ldrb	r3, [r3, #0]
 8023742:	2b70      	cmp	r3, #112	@ 0x70
 8023744:	d10e      	bne.n	8023764 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 8023746:	68bb      	ldr	r3, [r7, #8]
 8023748:	3302      	adds	r3, #2
 802374a:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 802374c:	687b      	ldr	r3, [r7, #4]
 802374e:	1d1a      	adds	r2, r3, #4
 8023750:	607a      	str	r2, [r7, #4]
 8023752:	681b      	ldr	r3, [r3, #0]
 8023754:	4619      	mov	r1, r3
 8023756:	68f8      	ldr	r0, [r7, #12]
 8023758:	f7ff fde8 	bl	802332c <printIp>
 802375c:	4603      	mov	r3, r0
 802375e:	2b00      	cmp	r3, #0
 8023760:	d130      	bne.n	80237c4 <tiny_print+0x314>
			{
				break;
 8023762:	e034      	b.n	80237ce <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 8023764:	697b      	ldr	r3, [r7, #20]
 8023766:	2b78      	cmp	r3, #120	@ 0x78
 8023768:	d009      	beq.n	802377e <tiny_print+0x2ce>
 802376a:	697b      	ldr	r3, [r7, #20]
 802376c:	2b58      	cmp	r3, #88	@ 0x58
 802376e:	d006      	beq.n	802377e <tiny_print+0x2ce>
 8023770:	697b      	ldr	r3, [r7, #20]
 8023772:	2b70      	cmp	r3, #112	@ 0x70
 8023774:	d003      	beq.n	802377e <tiny_print+0x2ce>
 8023776:	697b      	ldr	r3, [r7, #20]
 8023778:	2b6f      	cmp	r3, #111	@ 0x6f
 802377a:	f47f ae9f 	bne.w	80234bc <tiny_print+0xc>
		{
			if( ch == 'X' )
 802377e:	697b      	ldr	r3, [r7, #20]
 8023780:	2b58      	cmp	r3, #88	@ 0x58
 8023782:	d103      	bne.n	802378c <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8023784:	68fb      	ldr	r3, [r7, #12]
 8023786:	2241      	movs	r2, #65	@ 0x41
 8023788:	775a      	strb	r2, [r3, #29]
 802378a:	e005      	b.n	8023798 <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 802378c:	697b      	ldr	r3, [r7, #20]
 802378e:	2b6f      	cmp	r3, #111	@ 0x6f
 8023790:	d102      	bne.n	8023798 <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8023792:	68fb      	ldr	r3, [r7, #12]
 8023794:	2208      	movs	r2, #8
 8023796:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8023798:	687b      	ldr	r3, [r7, #4]
 802379a:	1d1a      	adds	r2, r3, #4
 802379c:	607a      	str	r2, [r7, #4]
 802379e:	681b      	ldr	r3, [r3, #0]
 80237a0:	4619      	mov	r1, r3
 80237a2:	68f8      	ldr	r0, [r7, #12]
 80237a4:	f7ff fd34 	bl	8023210 <printi>
 80237a8:	4603      	mov	r3, r0
 80237aa:	2b00      	cmp	r3, #0
 80237ac:	d00e      	beq.n	80237cc <tiny_print+0x31c>
			{
				break;
			}
			continue;
 80237ae:	e00a      	b.n	80237c6 <tiny_print+0x316>
			continue;
 80237b0:	bf00      	nop
 80237b2:	e683      	b.n	80234bc <tiny_print+0xc>
				continue;
 80237b4:	bf00      	nop
 80237b6:	e681      	b.n	80234bc <tiny_print+0xc>
			continue;
 80237b8:	bf00      	nop
 80237ba:	e67f      	b.n	80234bc <tiny_print+0xc>
			continue;
 80237bc:	bf00      	nop
 80237be:	e67d      	b.n	80234bc <tiny_print+0xc>
			continue;
 80237c0:	bf00      	nop
 80237c2:	e67b      	b.n	80234bc <tiny_print+0xc>
			continue;
 80237c4:	bf00      	nop
	{
 80237c6:	e679      	b.n	80234bc <tiny_print+0xc>
			break;
 80237c8:	bf00      	nop
 80237ca:	e000      	b.n	80237ce <tiny_print+0x31e>
				break;
 80237cc:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 80237ce:	2100      	movs	r1, #0
 80237d0:	68f8      	ldr	r0, [r7, #12]
 80237d2:	f7ff fbee 	bl	8022fb2 <strbuf_printchar>
 80237d6:	e000      	b.n	80237da <tiny_print+0x32a>
					return;
 80237d8:	bf00      	nop
}
 80237da:	371c      	adds	r7, #28
 80237dc:	46bd      	mov	sp, r7
 80237de:	bd90      	pop	{r4, r7, pc}
 80237e0:	08027ea4 	.word	0x08027ea4

080237e4 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 80237e4:	b580      	push	{r7, lr}
 80237e6:	b08c      	sub	sp, #48	@ 0x30
 80237e8:	af00      	add	r7, sp, #0
 80237ea:	60f8      	str	r0, [r7, #12]
 80237ec:	60b9      	str	r1, [r7, #8]
 80237ee:	607a      	str	r2, [r7, #4]
 80237f0:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 80237f2:	68fa      	ldr	r2, [r7, #12]
 80237f4:	68bb      	ldr	r3, [r7, #8]
 80237f6:	441a      	add	r2, r3
 80237f8:	f107 0310 	add.w	r3, r7, #16
 80237fc:	68f9      	ldr	r1, [r7, #12]
 80237fe:	4618      	mov	r0, r3
 8023800:	f7ff fbb9 	bl	8022f76 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023804:	f107 0310 	add.w	r3, r7, #16
 8023808:	683a      	ldr	r2, [r7, #0]
 802380a:	6879      	ldr	r1, [r7, #4]
 802380c:	4618      	mov	r0, r3
 802380e:	f7ff fe4f 	bl	80234b0 <tiny_print>

	return strBuf.curLen;
 8023812:	69fb      	ldr	r3, [r7, #28]
}
 8023814:	4618      	mov	r0, r3
 8023816:	3730      	adds	r7, #48	@ 0x30
 8023818:	46bd      	mov	sp, r7
 802381a:	bd80      	pop	{r7, pc}

0802381c <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 802381c:	b40c      	push	{r2, r3}
 802381e:	b580      	push	{r7, lr}
 8023820:	b08c      	sub	sp, #48	@ 0x30
 8023822:	af00      	add	r7, sp, #0
 8023824:	6078      	str	r0, [r7, #4]
 8023826:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 8023828:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 802382c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 802382e:	687a      	ldr	r2, [r7, #4]
 8023830:	683b      	ldr	r3, [r7, #0]
 8023832:	441a      	add	r2, r3
 8023834:	f107 030c 	add.w	r3, r7, #12
 8023838:	6879      	ldr	r1, [r7, #4]
 802383a:	4618      	mov	r0, r3
 802383c:	f7ff fb9b 	bl	8022f76 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023840:	f107 030c 	add.w	r3, r7, #12
 8023844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023846:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8023848:	4618      	mov	r0, r3
 802384a:	f7ff fe31 	bl	80234b0 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 802384e:	69bb      	ldr	r3, [r7, #24]
}
 8023850:	4618      	mov	r0, r3
 8023852:	3730      	adds	r7, #48	@ 0x30
 8023854:	46bd      	mov	sp, r7
 8023856:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802385a:	b002      	add	sp, #8
 802385c:	4770      	bx	lr

0802385e <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 802385e:	b40e      	push	{r1, r2, r3}
 8023860:	b580      	push	{r7, lr}
 8023862:	b08d      	sub	sp, #52	@ 0x34
 8023864:	af00      	add	r7, sp, #0
 8023866:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 8023868:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 802386e:	687b      	ldr	r3, [r7, #4]
 8023870:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8023874:	f107 030c 	add.w	r3, r7, #12
 8023878:	6879      	ldr	r1, [r7, #4]
 802387a:	4618      	mov	r0, r3
 802387c:	f7ff fb7b 	bl	8022f76 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023880:	f107 030c 	add.w	r3, r7, #12
 8023884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023886:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8023888:	4618      	mov	r0, r3
 802388a:	f7ff fe11 	bl	80234b0 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 802388e:	69bb      	ldr	r3, [r7, #24]
}
 8023890:	4618      	mov	r0, r3
 8023892:	3734      	adds	r7, #52	@ 0x34
 8023894:	46bd      	mov	sp, r7
 8023896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802389a:	b003      	add	sp, #12
 802389c:	4770      	bx	lr
	...

080238a0 <rand>:
 80238a0:	4b16      	ldr	r3, [pc, #88]	@ (80238fc <rand+0x5c>)
 80238a2:	b510      	push	{r4, lr}
 80238a4:	681c      	ldr	r4, [r3, #0]
 80238a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80238a8:	b9b3      	cbnz	r3, 80238d8 <rand+0x38>
 80238aa:	2018      	movs	r0, #24
 80238ac:	f000 fa82 	bl	8023db4 <malloc>
 80238b0:	4602      	mov	r2, r0
 80238b2:	6320      	str	r0, [r4, #48]	@ 0x30
 80238b4:	b920      	cbnz	r0, 80238c0 <rand+0x20>
 80238b6:	4b12      	ldr	r3, [pc, #72]	@ (8023900 <rand+0x60>)
 80238b8:	4812      	ldr	r0, [pc, #72]	@ (8023904 <rand+0x64>)
 80238ba:	2152      	movs	r1, #82	@ 0x52
 80238bc:	f000 fa12 	bl	8023ce4 <__assert_func>
 80238c0:	4911      	ldr	r1, [pc, #68]	@ (8023908 <rand+0x68>)
 80238c2:	4b12      	ldr	r3, [pc, #72]	@ (802390c <rand+0x6c>)
 80238c4:	e9c0 1300 	strd	r1, r3, [r0]
 80238c8:	4b11      	ldr	r3, [pc, #68]	@ (8023910 <rand+0x70>)
 80238ca:	6083      	str	r3, [r0, #8]
 80238cc:	230b      	movs	r3, #11
 80238ce:	8183      	strh	r3, [r0, #12]
 80238d0:	2100      	movs	r1, #0
 80238d2:	2001      	movs	r0, #1
 80238d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80238d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80238da:	480e      	ldr	r0, [pc, #56]	@ (8023914 <rand+0x74>)
 80238dc:	690b      	ldr	r3, [r1, #16]
 80238de:	694c      	ldr	r4, [r1, #20]
 80238e0:	4a0d      	ldr	r2, [pc, #52]	@ (8023918 <rand+0x78>)
 80238e2:	4358      	muls	r0, r3
 80238e4:	fb02 0004 	mla	r0, r2, r4, r0
 80238e8:	fba3 3202 	umull	r3, r2, r3, r2
 80238ec:	3301      	adds	r3, #1
 80238ee:	eb40 0002 	adc.w	r0, r0, r2
 80238f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80238f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80238fa:	bd10      	pop	{r4, pc}
 80238fc:	20000038 	.word	0x20000038
 8023900:	08028070 	.word	0x08028070
 8023904:	08028087 	.word	0x08028087
 8023908:	abcd330e 	.word	0xabcd330e
 802390c:	e66d1234 	.word	0xe66d1234
 8023910:	0005deec 	.word	0x0005deec
 8023914:	5851f42d 	.word	0x5851f42d
 8023918:	4c957f2d 	.word	0x4c957f2d

0802391c <std>:
 802391c:	2300      	movs	r3, #0
 802391e:	b510      	push	{r4, lr}
 8023920:	4604      	mov	r4, r0
 8023922:	e9c0 3300 	strd	r3, r3, [r0]
 8023926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802392a:	6083      	str	r3, [r0, #8]
 802392c:	8181      	strh	r1, [r0, #12]
 802392e:	6643      	str	r3, [r0, #100]	@ 0x64
 8023930:	81c2      	strh	r2, [r0, #14]
 8023932:	6183      	str	r3, [r0, #24]
 8023934:	4619      	mov	r1, r3
 8023936:	2208      	movs	r2, #8
 8023938:	305c      	adds	r0, #92	@ 0x5c
 802393a:	f7ff fa6c 	bl	8022e16 <memset>
 802393e:	4b0d      	ldr	r3, [pc, #52]	@ (8023974 <std+0x58>)
 8023940:	6263      	str	r3, [r4, #36]	@ 0x24
 8023942:	4b0d      	ldr	r3, [pc, #52]	@ (8023978 <std+0x5c>)
 8023944:	62a3      	str	r3, [r4, #40]	@ 0x28
 8023946:	4b0d      	ldr	r3, [pc, #52]	@ (802397c <std+0x60>)
 8023948:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802394a:	4b0d      	ldr	r3, [pc, #52]	@ (8023980 <std+0x64>)
 802394c:	6323      	str	r3, [r4, #48]	@ 0x30
 802394e:	4b0d      	ldr	r3, [pc, #52]	@ (8023984 <std+0x68>)
 8023950:	6224      	str	r4, [r4, #32]
 8023952:	429c      	cmp	r4, r3
 8023954:	d006      	beq.n	8023964 <std+0x48>
 8023956:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802395a:	4294      	cmp	r4, r2
 802395c:	d002      	beq.n	8023964 <std+0x48>
 802395e:	33d0      	adds	r3, #208	@ 0xd0
 8023960:	429c      	cmp	r4, r3
 8023962:	d105      	bne.n	8023970 <std+0x54>
 8023964:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8023968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802396c:	f000 b9b6 	b.w	8023cdc <__retarget_lock_init_recursive>
 8023970:	bd10      	pop	{r4, pc}
 8023972:	bf00      	nop
 8023974:	08023aa1 	.word	0x08023aa1
 8023978:	08023ac3 	.word	0x08023ac3
 802397c:	08023afb 	.word	0x08023afb
 8023980:	08023b1f 	.word	0x08023b1f
 8023984:	2000273c 	.word	0x2000273c

08023988 <stdio_exit_handler>:
 8023988:	4a02      	ldr	r2, [pc, #8]	@ (8023994 <stdio_exit_handler+0xc>)
 802398a:	4903      	ldr	r1, [pc, #12]	@ (8023998 <stdio_exit_handler+0x10>)
 802398c:	4803      	ldr	r0, [pc, #12]	@ (802399c <stdio_exit_handler+0x14>)
 802398e:	f000 b869 	b.w	8023a64 <_fwalk_sglue>
 8023992:	bf00      	nop
 8023994:	2000002c 	.word	0x2000002c
 8023998:	08024029 	.word	0x08024029
 802399c:	2000003c 	.word	0x2000003c

080239a0 <cleanup_stdio>:
 80239a0:	6841      	ldr	r1, [r0, #4]
 80239a2:	4b0c      	ldr	r3, [pc, #48]	@ (80239d4 <cleanup_stdio+0x34>)
 80239a4:	4299      	cmp	r1, r3
 80239a6:	b510      	push	{r4, lr}
 80239a8:	4604      	mov	r4, r0
 80239aa:	d001      	beq.n	80239b0 <cleanup_stdio+0x10>
 80239ac:	f000 fb3c 	bl	8024028 <_fflush_r>
 80239b0:	68a1      	ldr	r1, [r4, #8]
 80239b2:	4b09      	ldr	r3, [pc, #36]	@ (80239d8 <cleanup_stdio+0x38>)
 80239b4:	4299      	cmp	r1, r3
 80239b6:	d002      	beq.n	80239be <cleanup_stdio+0x1e>
 80239b8:	4620      	mov	r0, r4
 80239ba:	f000 fb35 	bl	8024028 <_fflush_r>
 80239be:	68e1      	ldr	r1, [r4, #12]
 80239c0:	4b06      	ldr	r3, [pc, #24]	@ (80239dc <cleanup_stdio+0x3c>)
 80239c2:	4299      	cmp	r1, r3
 80239c4:	d004      	beq.n	80239d0 <cleanup_stdio+0x30>
 80239c6:	4620      	mov	r0, r4
 80239c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239cc:	f000 bb2c 	b.w	8024028 <_fflush_r>
 80239d0:	bd10      	pop	{r4, pc}
 80239d2:	bf00      	nop
 80239d4:	2000273c 	.word	0x2000273c
 80239d8:	200027a4 	.word	0x200027a4
 80239dc:	2000280c 	.word	0x2000280c

080239e0 <global_stdio_init.part.0>:
 80239e0:	b510      	push	{r4, lr}
 80239e2:	4b0b      	ldr	r3, [pc, #44]	@ (8023a10 <global_stdio_init.part.0+0x30>)
 80239e4:	4c0b      	ldr	r4, [pc, #44]	@ (8023a14 <global_stdio_init.part.0+0x34>)
 80239e6:	4a0c      	ldr	r2, [pc, #48]	@ (8023a18 <global_stdio_init.part.0+0x38>)
 80239e8:	601a      	str	r2, [r3, #0]
 80239ea:	4620      	mov	r0, r4
 80239ec:	2200      	movs	r2, #0
 80239ee:	2104      	movs	r1, #4
 80239f0:	f7ff ff94 	bl	802391c <std>
 80239f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80239f8:	2201      	movs	r2, #1
 80239fa:	2109      	movs	r1, #9
 80239fc:	f7ff ff8e 	bl	802391c <std>
 8023a00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023a04:	2202      	movs	r2, #2
 8023a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023a0a:	2112      	movs	r1, #18
 8023a0c:	f7ff bf86 	b.w	802391c <std>
 8023a10:	20002874 	.word	0x20002874
 8023a14:	2000273c 	.word	0x2000273c
 8023a18:	08023989 	.word	0x08023989

08023a1c <__sfp_lock_acquire>:
 8023a1c:	4801      	ldr	r0, [pc, #4]	@ (8023a24 <__sfp_lock_acquire+0x8>)
 8023a1e:	f000 b95e 	b.w	8023cde <__retarget_lock_acquire_recursive>
 8023a22:	bf00      	nop
 8023a24:	2000287d 	.word	0x2000287d

08023a28 <__sfp_lock_release>:
 8023a28:	4801      	ldr	r0, [pc, #4]	@ (8023a30 <__sfp_lock_release+0x8>)
 8023a2a:	f000 b959 	b.w	8023ce0 <__retarget_lock_release_recursive>
 8023a2e:	bf00      	nop
 8023a30:	2000287d 	.word	0x2000287d

08023a34 <__sinit>:
 8023a34:	b510      	push	{r4, lr}
 8023a36:	4604      	mov	r4, r0
 8023a38:	f7ff fff0 	bl	8023a1c <__sfp_lock_acquire>
 8023a3c:	6a23      	ldr	r3, [r4, #32]
 8023a3e:	b11b      	cbz	r3, 8023a48 <__sinit+0x14>
 8023a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023a44:	f7ff bff0 	b.w	8023a28 <__sfp_lock_release>
 8023a48:	4b04      	ldr	r3, [pc, #16]	@ (8023a5c <__sinit+0x28>)
 8023a4a:	6223      	str	r3, [r4, #32]
 8023a4c:	4b04      	ldr	r3, [pc, #16]	@ (8023a60 <__sinit+0x2c>)
 8023a4e:	681b      	ldr	r3, [r3, #0]
 8023a50:	2b00      	cmp	r3, #0
 8023a52:	d1f5      	bne.n	8023a40 <__sinit+0xc>
 8023a54:	f7ff ffc4 	bl	80239e0 <global_stdio_init.part.0>
 8023a58:	e7f2      	b.n	8023a40 <__sinit+0xc>
 8023a5a:	bf00      	nop
 8023a5c:	080239a1 	.word	0x080239a1
 8023a60:	20002874 	.word	0x20002874

08023a64 <_fwalk_sglue>:
 8023a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023a68:	4607      	mov	r7, r0
 8023a6a:	4688      	mov	r8, r1
 8023a6c:	4614      	mov	r4, r2
 8023a6e:	2600      	movs	r6, #0
 8023a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023a74:	f1b9 0901 	subs.w	r9, r9, #1
 8023a78:	d505      	bpl.n	8023a86 <_fwalk_sglue+0x22>
 8023a7a:	6824      	ldr	r4, [r4, #0]
 8023a7c:	2c00      	cmp	r4, #0
 8023a7e:	d1f7      	bne.n	8023a70 <_fwalk_sglue+0xc>
 8023a80:	4630      	mov	r0, r6
 8023a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023a86:	89ab      	ldrh	r3, [r5, #12]
 8023a88:	2b01      	cmp	r3, #1
 8023a8a:	d907      	bls.n	8023a9c <_fwalk_sglue+0x38>
 8023a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023a90:	3301      	adds	r3, #1
 8023a92:	d003      	beq.n	8023a9c <_fwalk_sglue+0x38>
 8023a94:	4629      	mov	r1, r5
 8023a96:	4638      	mov	r0, r7
 8023a98:	47c0      	blx	r8
 8023a9a:	4306      	orrs	r6, r0
 8023a9c:	3568      	adds	r5, #104	@ 0x68
 8023a9e:	e7e9      	b.n	8023a74 <_fwalk_sglue+0x10>

08023aa0 <__sread>:
 8023aa0:	b510      	push	{r4, lr}
 8023aa2:	460c      	mov	r4, r1
 8023aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023aa8:	f000 f8ca 	bl	8023c40 <_read_r>
 8023aac:	2800      	cmp	r0, #0
 8023aae:	bfab      	itete	ge
 8023ab0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8023ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8023ab4:	181b      	addge	r3, r3, r0
 8023ab6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8023aba:	bfac      	ite	ge
 8023abc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8023abe:	81a3      	strhlt	r3, [r4, #12]
 8023ac0:	bd10      	pop	{r4, pc}

08023ac2 <__swrite>:
 8023ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ac6:	461f      	mov	r7, r3
 8023ac8:	898b      	ldrh	r3, [r1, #12]
 8023aca:	05db      	lsls	r3, r3, #23
 8023acc:	4605      	mov	r5, r0
 8023ace:	460c      	mov	r4, r1
 8023ad0:	4616      	mov	r6, r2
 8023ad2:	d505      	bpl.n	8023ae0 <__swrite+0x1e>
 8023ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ad8:	2302      	movs	r3, #2
 8023ada:	2200      	movs	r2, #0
 8023adc:	f000 f89e 	bl	8023c1c <_lseek_r>
 8023ae0:	89a3      	ldrh	r3, [r4, #12]
 8023ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023ae6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023aea:	81a3      	strh	r3, [r4, #12]
 8023aec:	4632      	mov	r2, r6
 8023aee:	463b      	mov	r3, r7
 8023af0:	4628      	mov	r0, r5
 8023af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023af6:	f000 b8b5 	b.w	8023c64 <_write_r>

08023afa <__sseek>:
 8023afa:	b510      	push	{r4, lr}
 8023afc:	460c      	mov	r4, r1
 8023afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023b02:	f000 f88b 	bl	8023c1c <_lseek_r>
 8023b06:	1c43      	adds	r3, r0, #1
 8023b08:	89a3      	ldrh	r3, [r4, #12]
 8023b0a:	bf15      	itete	ne
 8023b0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023b0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023b12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8023b16:	81a3      	strheq	r3, [r4, #12]
 8023b18:	bf18      	it	ne
 8023b1a:	81a3      	strhne	r3, [r4, #12]
 8023b1c:	bd10      	pop	{r4, pc}

08023b1e <__sclose>:
 8023b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023b22:	f000 b86b 	b.w	8023bfc <_close_r>

08023b26 <memcmp>:
 8023b26:	b510      	push	{r4, lr}
 8023b28:	3901      	subs	r1, #1
 8023b2a:	4402      	add	r2, r0
 8023b2c:	4290      	cmp	r0, r2
 8023b2e:	d101      	bne.n	8023b34 <memcmp+0xe>
 8023b30:	2000      	movs	r0, #0
 8023b32:	e005      	b.n	8023b40 <memcmp+0x1a>
 8023b34:	7803      	ldrb	r3, [r0, #0]
 8023b36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023b3a:	42a3      	cmp	r3, r4
 8023b3c:	d001      	beq.n	8023b42 <memcmp+0x1c>
 8023b3e:	1b18      	subs	r0, r3, r4
 8023b40:	bd10      	pop	{r4, pc}
 8023b42:	3001      	adds	r0, #1
 8023b44:	e7f2      	b.n	8023b2c <memcmp+0x6>

08023b46 <memmove>:
 8023b46:	4288      	cmp	r0, r1
 8023b48:	b510      	push	{r4, lr}
 8023b4a:	eb01 0402 	add.w	r4, r1, r2
 8023b4e:	d902      	bls.n	8023b56 <memmove+0x10>
 8023b50:	4284      	cmp	r4, r0
 8023b52:	4623      	mov	r3, r4
 8023b54:	d807      	bhi.n	8023b66 <memmove+0x20>
 8023b56:	1e43      	subs	r3, r0, #1
 8023b58:	42a1      	cmp	r1, r4
 8023b5a:	d008      	beq.n	8023b6e <memmove+0x28>
 8023b5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023b60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023b64:	e7f8      	b.n	8023b58 <memmove+0x12>
 8023b66:	4402      	add	r2, r0
 8023b68:	4601      	mov	r1, r0
 8023b6a:	428a      	cmp	r2, r1
 8023b6c:	d100      	bne.n	8023b70 <memmove+0x2a>
 8023b6e:	bd10      	pop	{r4, pc}
 8023b70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023b74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023b78:	e7f7      	b.n	8023b6a <memmove+0x24>
	...

08023b7c <strcasecmp>:
 8023b7c:	b530      	push	{r4, r5, lr}
 8023b7e:	4d0b      	ldr	r5, [pc, #44]	@ (8023bac <strcasecmp+0x30>)
 8023b80:	4604      	mov	r4, r0
 8023b82:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023b86:	5cea      	ldrb	r2, [r5, r3]
 8023b88:	f002 0203 	and.w	r2, r2, #3
 8023b8c:	2a01      	cmp	r2, #1
 8023b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023b92:	5ca8      	ldrb	r0, [r5, r2]
 8023b94:	f000 0003 	and.w	r0, r0, #3
 8023b98:	bf08      	it	eq
 8023b9a:	3320      	addeq	r3, #32
 8023b9c:	2801      	cmp	r0, #1
 8023b9e:	bf08      	it	eq
 8023ba0:	3220      	addeq	r2, #32
 8023ba2:	1a98      	subs	r0, r3, r2
 8023ba4:	d101      	bne.n	8023baa <strcasecmp+0x2e>
 8023ba6:	2a00      	cmp	r2, #0
 8023ba8:	d1eb      	bne.n	8023b82 <strcasecmp+0x6>
 8023baa:	bd30      	pop	{r4, r5, pc}
 8023bac:	0802811c 	.word	0x0802811c

08023bb0 <strncmp>:
 8023bb0:	b510      	push	{r4, lr}
 8023bb2:	b16a      	cbz	r2, 8023bd0 <strncmp+0x20>
 8023bb4:	3901      	subs	r1, #1
 8023bb6:	1884      	adds	r4, r0, r2
 8023bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023bbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023bc0:	429a      	cmp	r2, r3
 8023bc2:	d103      	bne.n	8023bcc <strncmp+0x1c>
 8023bc4:	42a0      	cmp	r0, r4
 8023bc6:	d001      	beq.n	8023bcc <strncmp+0x1c>
 8023bc8:	2a00      	cmp	r2, #0
 8023bca:	d1f5      	bne.n	8023bb8 <strncmp+0x8>
 8023bcc:	1ad0      	subs	r0, r2, r3
 8023bce:	bd10      	pop	{r4, pc}
 8023bd0:	4610      	mov	r0, r2
 8023bd2:	e7fc      	b.n	8023bce <strncmp+0x1e>

08023bd4 <strncpy>:
 8023bd4:	b510      	push	{r4, lr}
 8023bd6:	3901      	subs	r1, #1
 8023bd8:	4603      	mov	r3, r0
 8023bda:	b132      	cbz	r2, 8023bea <strncpy+0x16>
 8023bdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023be0:	f803 4b01 	strb.w	r4, [r3], #1
 8023be4:	3a01      	subs	r2, #1
 8023be6:	2c00      	cmp	r4, #0
 8023be8:	d1f7      	bne.n	8023bda <strncpy+0x6>
 8023bea:	441a      	add	r2, r3
 8023bec:	2100      	movs	r1, #0
 8023bee:	4293      	cmp	r3, r2
 8023bf0:	d100      	bne.n	8023bf4 <strncpy+0x20>
 8023bf2:	bd10      	pop	{r4, pc}
 8023bf4:	f803 1b01 	strb.w	r1, [r3], #1
 8023bf8:	e7f9      	b.n	8023bee <strncpy+0x1a>
	...

08023bfc <_close_r>:
 8023bfc:	b538      	push	{r3, r4, r5, lr}
 8023bfe:	4d06      	ldr	r5, [pc, #24]	@ (8023c18 <_close_r+0x1c>)
 8023c00:	2300      	movs	r3, #0
 8023c02:	4604      	mov	r4, r0
 8023c04:	4608      	mov	r0, r1
 8023c06:	602b      	str	r3, [r5, #0]
 8023c08:	f7df fae8 	bl	80031dc <_close>
 8023c0c:	1c43      	adds	r3, r0, #1
 8023c0e:	d102      	bne.n	8023c16 <_close_r+0x1a>
 8023c10:	682b      	ldr	r3, [r5, #0]
 8023c12:	b103      	cbz	r3, 8023c16 <_close_r+0x1a>
 8023c14:	6023      	str	r3, [r4, #0]
 8023c16:	bd38      	pop	{r3, r4, r5, pc}
 8023c18:	20002878 	.word	0x20002878

08023c1c <_lseek_r>:
 8023c1c:	b538      	push	{r3, r4, r5, lr}
 8023c1e:	4d07      	ldr	r5, [pc, #28]	@ (8023c3c <_lseek_r+0x20>)
 8023c20:	4604      	mov	r4, r0
 8023c22:	4608      	mov	r0, r1
 8023c24:	4611      	mov	r1, r2
 8023c26:	2200      	movs	r2, #0
 8023c28:	602a      	str	r2, [r5, #0]
 8023c2a:	461a      	mov	r2, r3
 8023c2c:	f7df fafd 	bl	800322a <_lseek>
 8023c30:	1c43      	adds	r3, r0, #1
 8023c32:	d102      	bne.n	8023c3a <_lseek_r+0x1e>
 8023c34:	682b      	ldr	r3, [r5, #0]
 8023c36:	b103      	cbz	r3, 8023c3a <_lseek_r+0x1e>
 8023c38:	6023      	str	r3, [r4, #0]
 8023c3a:	bd38      	pop	{r3, r4, r5, pc}
 8023c3c:	20002878 	.word	0x20002878

08023c40 <_read_r>:
 8023c40:	b538      	push	{r3, r4, r5, lr}
 8023c42:	4d07      	ldr	r5, [pc, #28]	@ (8023c60 <_read_r+0x20>)
 8023c44:	4604      	mov	r4, r0
 8023c46:	4608      	mov	r0, r1
 8023c48:	4611      	mov	r1, r2
 8023c4a:	2200      	movs	r2, #0
 8023c4c:	602a      	str	r2, [r5, #0]
 8023c4e:	461a      	mov	r2, r3
 8023c50:	f7df fa8b 	bl	800316a <_read>
 8023c54:	1c43      	adds	r3, r0, #1
 8023c56:	d102      	bne.n	8023c5e <_read_r+0x1e>
 8023c58:	682b      	ldr	r3, [r5, #0]
 8023c5a:	b103      	cbz	r3, 8023c5e <_read_r+0x1e>
 8023c5c:	6023      	str	r3, [r4, #0]
 8023c5e:	bd38      	pop	{r3, r4, r5, pc}
 8023c60:	20002878 	.word	0x20002878

08023c64 <_write_r>:
 8023c64:	b538      	push	{r3, r4, r5, lr}
 8023c66:	4d07      	ldr	r5, [pc, #28]	@ (8023c84 <_write_r+0x20>)
 8023c68:	4604      	mov	r4, r0
 8023c6a:	4608      	mov	r0, r1
 8023c6c:	4611      	mov	r1, r2
 8023c6e:	2200      	movs	r2, #0
 8023c70:	602a      	str	r2, [r5, #0]
 8023c72:	461a      	mov	r2, r3
 8023c74:	f7df fa96 	bl	80031a4 <_write>
 8023c78:	1c43      	adds	r3, r0, #1
 8023c7a:	d102      	bne.n	8023c82 <_write_r+0x1e>
 8023c7c:	682b      	ldr	r3, [r5, #0]
 8023c7e:	b103      	cbz	r3, 8023c82 <_write_r+0x1e>
 8023c80:	6023      	str	r3, [r4, #0]
 8023c82:	bd38      	pop	{r3, r4, r5, pc}
 8023c84:	20002878 	.word	0x20002878

08023c88 <__errno>:
 8023c88:	4b01      	ldr	r3, [pc, #4]	@ (8023c90 <__errno+0x8>)
 8023c8a:	6818      	ldr	r0, [r3, #0]
 8023c8c:	4770      	bx	lr
 8023c8e:	bf00      	nop
 8023c90:	20000038 	.word	0x20000038

08023c94 <__libc_init_array>:
 8023c94:	b570      	push	{r4, r5, r6, lr}
 8023c96:	4d0d      	ldr	r5, [pc, #52]	@ (8023ccc <__libc_init_array+0x38>)
 8023c98:	4c0d      	ldr	r4, [pc, #52]	@ (8023cd0 <__libc_init_array+0x3c>)
 8023c9a:	1b64      	subs	r4, r4, r5
 8023c9c:	10a4      	asrs	r4, r4, #2
 8023c9e:	2600      	movs	r6, #0
 8023ca0:	42a6      	cmp	r6, r4
 8023ca2:	d109      	bne.n	8023cb8 <__libc_init_array+0x24>
 8023ca4:	4d0b      	ldr	r5, [pc, #44]	@ (8023cd4 <__libc_init_array+0x40>)
 8023ca6:	4c0c      	ldr	r4, [pc, #48]	@ (8023cd8 <__libc_init_array+0x44>)
 8023ca8:	f000 fe3a 	bl	8024920 <_init>
 8023cac:	1b64      	subs	r4, r4, r5
 8023cae:	10a4      	asrs	r4, r4, #2
 8023cb0:	2600      	movs	r6, #0
 8023cb2:	42a6      	cmp	r6, r4
 8023cb4:	d105      	bne.n	8023cc2 <__libc_init_array+0x2e>
 8023cb6:	bd70      	pop	{r4, r5, r6, pc}
 8023cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8023cbc:	4798      	blx	r3
 8023cbe:	3601      	adds	r6, #1
 8023cc0:	e7ee      	b.n	8023ca0 <__libc_init_array+0xc>
 8023cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8023cc6:	4798      	blx	r3
 8023cc8:	3601      	adds	r6, #1
 8023cca:	e7f2      	b.n	8023cb2 <__libc_init_array+0x1e>
 8023ccc:	08028258 	.word	0x08028258
 8023cd0:	08028258 	.word	0x08028258
 8023cd4:	08028258 	.word	0x08028258
 8023cd8:	0802825c 	.word	0x0802825c

08023cdc <__retarget_lock_init_recursive>:
 8023cdc:	4770      	bx	lr

08023cde <__retarget_lock_acquire_recursive>:
 8023cde:	4770      	bx	lr

08023ce0 <__retarget_lock_release_recursive>:
 8023ce0:	4770      	bx	lr
	...

08023ce4 <__assert_func>:
 8023ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023ce6:	4614      	mov	r4, r2
 8023ce8:	461a      	mov	r2, r3
 8023cea:	4b09      	ldr	r3, [pc, #36]	@ (8023d10 <__assert_func+0x2c>)
 8023cec:	681b      	ldr	r3, [r3, #0]
 8023cee:	4605      	mov	r5, r0
 8023cf0:	68d8      	ldr	r0, [r3, #12]
 8023cf2:	b954      	cbnz	r4, 8023d0a <__assert_func+0x26>
 8023cf4:	4b07      	ldr	r3, [pc, #28]	@ (8023d14 <__assert_func+0x30>)
 8023cf6:	461c      	mov	r4, r3
 8023cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023cfc:	9100      	str	r1, [sp, #0]
 8023cfe:	462b      	mov	r3, r5
 8023d00:	4905      	ldr	r1, [pc, #20]	@ (8023d18 <__assert_func+0x34>)
 8023d02:	f000 f9b9 	bl	8024078 <fiprintf>
 8023d06:	f000 f9d9 	bl	80240bc <abort>
 8023d0a:	4b04      	ldr	r3, [pc, #16]	@ (8023d1c <__assert_func+0x38>)
 8023d0c:	e7f4      	b.n	8023cf8 <__assert_func+0x14>
 8023d0e:	bf00      	nop
 8023d10:	20000038 	.word	0x20000038
 8023d14:	0802811a 	.word	0x0802811a
 8023d18:	080280ec 	.word	0x080280ec
 8023d1c:	080280df 	.word	0x080280df

08023d20 <_free_r>:
 8023d20:	b538      	push	{r3, r4, r5, lr}
 8023d22:	4605      	mov	r5, r0
 8023d24:	2900      	cmp	r1, #0
 8023d26:	d041      	beq.n	8023dac <_free_r+0x8c>
 8023d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023d2c:	1f0c      	subs	r4, r1, #4
 8023d2e:	2b00      	cmp	r3, #0
 8023d30:	bfb8      	it	lt
 8023d32:	18e4      	addlt	r4, r4, r3
 8023d34:	f000 f8e8 	bl	8023f08 <__malloc_lock>
 8023d38:	4a1d      	ldr	r2, [pc, #116]	@ (8023db0 <_free_r+0x90>)
 8023d3a:	6813      	ldr	r3, [r2, #0]
 8023d3c:	b933      	cbnz	r3, 8023d4c <_free_r+0x2c>
 8023d3e:	6063      	str	r3, [r4, #4]
 8023d40:	6014      	str	r4, [r2, #0]
 8023d42:	4628      	mov	r0, r5
 8023d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023d48:	f000 b8e4 	b.w	8023f14 <__malloc_unlock>
 8023d4c:	42a3      	cmp	r3, r4
 8023d4e:	d908      	bls.n	8023d62 <_free_r+0x42>
 8023d50:	6820      	ldr	r0, [r4, #0]
 8023d52:	1821      	adds	r1, r4, r0
 8023d54:	428b      	cmp	r3, r1
 8023d56:	bf01      	itttt	eq
 8023d58:	6819      	ldreq	r1, [r3, #0]
 8023d5a:	685b      	ldreq	r3, [r3, #4]
 8023d5c:	1809      	addeq	r1, r1, r0
 8023d5e:	6021      	streq	r1, [r4, #0]
 8023d60:	e7ed      	b.n	8023d3e <_free_r+0x1e>
 8023d62:	461a      	mov	r2, r3
 8023d64:	685b      	ldr	r3, [r3, #4]
 8023d66:	b10b      	cbz	r3, 8023d6c <_free_r+0x4c>
 8023d68:	42a3      	cmp	r3, r4
 8023d6a:	d9fa      	bls.n	8023d62 <_free_r+0x42>
 8023d6c:	6811      	ldr	r1, [r2, #0]
 8023d6e:	1850      	adds	r0, r2, r1
 8023d70:	42a0      	cmp	r0, r4
 8023d72:	d10b      	bne.n	8023d8c <_free_r+0x6c>
 8023d74:	6820      	ldr	r0, [r4, #0]
 8023d76:	4401      	add	r1, r0
 8023d78:	1850      	adds	r0, r2, r1
 8023d7a:	4283      	cmp	r3, r0
 8023d7c:	6011      	str	r1, [r2, #0]
 8023d7e:	d1e0      	bne.n	8023d42 <_free_r+0x22>
 8023d80:	6818      	ldr	r0, [r3, #0]
 8023d82:	685b      	ldr	r3, [r3, #4]
 8023d84:	6053      	str	r3, [r2, #4]
 8023d86:	4408      	add	r0, r1
 8023d88:	6010      	str	r0, [r2, #0]
 8023d8a:	e7da      	b.n	8023d42 <_free_r+0x22>
 8023d8c:	d902      	bls.n	8023d94 <_free_r+0x74>
 8023d8e:	230c      	movs	r3, #12
 8023d90:	602b      	str	r3, [r5, #0]
 8023d92:	e7d6      	b.n	8023d42 <_free_r+0x22>
 8023d94:	6820      	ldr	r0, [r4, #0]
 8023d96:	1821      	adds	r1, r4, r0
 8023d98:	428b      	cmp	r3, r1
 8023d9a:	bf04      	itt	eq
 8023d9c:	6819      	ldreq	r1, [r3, #0]
 8023d9e:	685b      	ldreq	r3, [r3, #4]
 8023da0:	6063      	str	r3, [r4, #4]
 8023da2:	bf04      	itt	eq
 8023da4:	1809      	addeq	r1, r1, r0
 8023da6:	6021      	streq	r1, [r4, #0]
 8023da8:	6054      	str	r4, [r2, #4]
 8023daa:	e7ca      	b.n	8023d42 <_free_r+0x22>
 8023dac:	bd38      	pop	{r3, r4, r5, pc}
 8023dae:	bf00      	nop
 8023db0:	20002884 	.word	0x20002884

08023db4 <malloc>:
 8023db4:	4b02      	ldr	r3, [pc, #8]	@ (8023dc0 <malloc+0xc>)
 8023db6:	4601      	mov	r1, r0
 8023db8:	6818      	ldr	r0, [r3, #0]
 8023dba:	f000 b825 	b.w	8023e08 <_malloc_r>
 8023dbe:	bf00      	nop
 8023dc0:	20000038 	.word	0x20000038

08023dc4 <sbrk_aligned>:
 8023dc4:	b570      	push	{r4, r5, r6, lr}
 8023dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8023e04 <sbrk_aligned+0x40>)
 8023dc8:	460c      	mov	r4, r1
 8023dca:	6831      	ldr	r1, [r6, #0]
 8023dcc:	4605      	mov	r5, r0
 8023dce:	b911      	cbnz	r1, 8023dd6 <sbrk_aligned+0x12>
 8023dd0:	f000 f964 	bl	802409c <_sbrk_r>
 8023dd4:	6030      	str	r0, [r6, #0]
 8023dd6:	4621      	mov	r1, r4
 8023dd8:	4628      	mov	r0, r5
 8023dda:	f000 f95f 	bl	802409c <_sbrk_r>
 8023dde:	1c43      	adds	r3, r0, #1
 8023de0:	d103      	bne.n	8023dea <sbrk_aligned+0x26>
 8023de2:	f04f 34ff 	mov.w	r4, #4294967295
 8023de6:	4620      	mov	r0, r4
 8023de8:	bd70      	pop	{r4, r5, r6, pc}
 8023dea:	1cc4      	adds	r4, r0, #3
 8023dec:	f024 0403 	bic.w	r4, r4, #3
 8023df0:	42a0      	cmp	r0, r4
 8023df2:	d0f8      	beq.n	8023de6 <sbrk_aligned+0x22>
 8023df4:	1a21      	subs	r1, r4, r0
 8023df6:	4628      	mov	r0, r5
 8023df8:	f000 f950 	bl	802409c <_sbrk_r>
 8023dfc:	3001      	adds	r0, #1
 8023dfe:	d1f2      	bne.n	8023de6 <sbrk_aligned+0x22>
 8023e00:	e7ef      	b.n	8023de2 <sbrk_aligned+0x1e>
 8023e02:	bf00      	nop
 8023e04:	20002880 	.word	0x20002880

08023e08 <_malloc_r>:
 8023e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023e0c:	1ccd      	adds	r5, r1, #3
 8023e0e:	f025 0503 	bic.w	r5, r5, #3
 8023e12:	3508      	adds	r5, #8
 8023e14:	2d0c      	cmp	r5, #12
 8023e16:	bf38      	it	cc
 8023e18:	250c      	movcc	r5, #12
 8023e1a:	2d00      	cmp	r5, #0
 8023e1c:	4606      	mov	r6, r0
 8023e1e:	db01      	blt.n	8023e24 <_malloc_r+0x1c>
 8023e20:	42a9      	cmp	r1, r5
 8023e22:	d904      	bls.n	8023e2e <_malloc_r+0x26>
 8023e24:	230c      	movs	r3, #12
 8023e26:	6033      	str	r3, [r6, #0]
 8023e28:	2000      	movs	r0, #0
 8023e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023f04 <_malloc_r+0xfc>
 8023e32:	f000 f869 	bl	8023f08 <__malloc_lock>
 8023e36:	f8d8 3000 	ldr.w	r3, [r8]
 8023e3a:	461c      	mov	r4, r3
 8023e3c:	bb44      	cbnz	r4, 8023e90 <_malloc_r+0x88>
 8023e3e:	4629      	mov	r1, r5
 8023e40:	4630      	mov	r0, r6
 8023e42:	f7ff ffbf 	bl	8023dc4 <sbrk_aligned>
 8023e46:	1c43      	adds	r3, r0, #1
 8023e48:	4604      	mov	r4, r0
 8023e4a:	d158      	bne.n	8023efe <_malloc_r+0xf6>
 8023e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8023e50:	4627      	mov	r7, r4
 8023e52:	2f00      	cmp	r7, #0
 8023e54:	d143      	bne.n	8023ede <_malloc_r+0xd6>
 8023e56:	2c00      	cmp	r4, #0
 8023e58:	d04b      	beq.n	8023ef2 <_malloc_r+0xea>
 8023e5a:	6823      	ldr	r3, [r4, #0]
 8023e5c:	4639      	mov	r1, r7
 8023e5e:	4630      	mov	r0, r6
 8023e60:	eb04 0903 	add.w	r9, r4, r3
 8023e64:	f000 f91a 	bl	802409c <_sbrk_r>
 8023e68:	4581      	cmp	r9, r0
 8023e6a:	d142      	bne.n	8023ef2 <_malloc_r+0xea>
 8023e6c:	6821      	ldr	r1, [r4, #0]
 8023e6e:	1a6d      	subs	r5, r5, r1
 8023e70:	4629      	mov	r1, r5
 8023e72:	4630      	mov	r0, r6
 8023e74:	f7ff ffa6 	bl	8023dc4 <sbrk_aligned>
 8023e78:	3001      	adds	r0, #1
 8023e7a:	d03a      	beq.n	8023ef2 <_malloc_r+0xea>
 8023e7c:	6823      	ldr	r3, [r4, #0]
 8023e7e:	442b      	add	r3, r5
 8023e80:	6023      	str	r3, [r4, #0]
 8023e82:	f8d8 3000 	ldr.w	r3, [r8]
 8023e86:	685a      	ldr	r2, [r3, #4]
 8023e88:	bb62      	cbnz	r2, 8023ee4 <_malloc_r+0xdc>
 8023e8a:	f8c8 7000 	str.w	r7, [r8]
 8023e8e:	e00f      	b.n	8023eb0 <_malloc_r+0xa8>
 8023e90:	6822      	ldr	r2, [r4, #0]
 8023e92:	1b52      	subs	r2, r2, r5
 8023e94:	d420      	bmi.n	8023ed8 <_malloc_r+0xd0>
 8023e96:	2a0b      	cmp	r2, #11
 8023e98:	d917      	bls.n	8023eca <_malloc_r+0xc2>
 8023e9a:	1961      	adds	r1, r4, r5
 8023e9c:	42a3      	cmp	r3, r4
 8023e9e:	6025      	str	r5, [r4, #0]
 8023ea0:	bf18      	it	ne
 8023ea2:	6059      	strne	r1, [r3, #4]
 8023ea4:	6863      	ldr	r3, [r4, #4]
 8023ea6:	bf08      	it	eq
 8023ea8:	f8c8 1000 	streq.w	r1, [r8]
 8023eac:	5162      	str	r2, [r4, r5]
 8023eae:	604b      	str	r3, [r1, #4]
 8023eb0:	4630      	mov	r0, r6
 8023eb2:	f000 f82f 	bl	8023f14 <__malloc_unlock>
 8023eb6:	f104 000b 	add.w	r0, r4, #11
 8023eba:	1d23      	adds	r3, r4, #4
 8023ebc:	f020 0007 	bic.w	r0, r0, #7
 8023ec0:	1ac2      	subs	r2, r0, r3
 8023ec2:	bf1c      	itt	ne
 8023ec4:	1a1b      	subne	r3, r3, r0
 8023ec6:	50a3      	strne	r3, [r4, r2]
 8023ec8:	e7af      	b.n	8023e2a <_malloc_r+0x22>
 8023eca:	6862      	ldr	r2, [r4, #4]
 8023ecc:	42a3      	cmp	r3, r4
 8023ece:	bf0c      	ite	eq
 8023ed0:	f8c8 2000 	streq.w	r2, [r8]
 8023ed4:	605a      	strne	r2, [r3, #4]
 8023ed6:	e7eb      	b.n	8023eb0 <_malloc_r+0xa8>
 8023ed8:	4623      	mov	r3, r4
 8023eda:	6864      	ldr	r4, [r4, #4]
 8023edc:	e7ae      	b.n	8023e3c <_malloc_r+0x34>
 8023ede:	463c      	mov	r4, r7
 8023ee0:	687f      	ldr	r7, [r7, #4]
 8023ee2:	e7b6      	b.n	8023e52 <_malloc_r+0x4a>
 8023ee4:	461a      	mov	r2, r3
 8023ee6:	685b      	ldr	r3, [r3, #4]
 8023ee8:	42a3      	cmp	r3, r4
 8023eea:	d1fb      	bne.n	8023ee4 <_malloc_r+0xdc>
 8023eec:	2300      	movs	r3, #0
 8023eee:	6053      	str	r3, [r2, #4]
 8023ef0:	e7de      	b.n	8023eb0 <_malloc_r+0xa8>
 8023ef2:	230c      	movs	r3, #12
 8023ef4:	6033      	str	r3, [r6, #0]
 8023ef6:	4630      	mov	r0, r6
 8023ef8:	f000 f80c 	bl	8023f14 <__malloc_unlock>
 8023efc:	e794      	b.n	8023e28 <_malloc_r+0x20>
 8023efe:	6005      	str	r5, [r0, #0]
 8023f00:	e7d6      	b.n	8023eb0 <_malloc_r+0xa8>
 8023f02:	bf00      	nop
 8023f04:	20002884 	.word	0x20002884

08023f08 <__malloc_lock>:
 8023f08:	4801      	ldr	r0, [pc, #4]	@ (8023f10 <__malloc_lock+0x8>)
 8023f0a:	f7ff bee8 	b.w	8023cde <__retarget_lock_acquire_recursive>
 8023f0e:	bf00      	nop
 8023f10:	2000287c 	.word	0x2000287c

08023f14 <__malloc_unlock>:
 8023f14:	4801      	ldr	r0, [pc, #4]	@ (8023f1c <__malloc_unlock+0x8>)
 8023f16:	f7ff bee3 	b.w	8023ce0 <__retarget_lock_release_recursive>
 8023f1a:	bf00      	nop
 8023f1c:	2000287c 	.word	0x2000287c

08023f20 <__sflush_r>:
 8023f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f28:	0716      	lsls	r6, r2, #28
 8023f2a:	4605      	mov	r5, r0
 8023f2c:	460c      	mov	r4, r1
 8023f2e:	d454      	bmi.n	8023fda <__sflush_r+0xba>
 8023f30:	684b      	ldr	r3, [r1, #4]
 8023f32:	2b00      	cmp	r3, #0
 8023f34:	dc02      	bgt.n	8023f3c <__sflush_r+0x1c>
 8023f36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023f38:	2b00      	cmp	r3, #0
 8023f3a:	dd48      	ble.n	8023fce <__sflush_r+0xae>
 8023f3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023f3e:	2e00      	cmp	r6, #0
 8023f40:	d045      	beq.n	8023fce <__sflush_r+0xae>
 8023f42:	2300      	movs	r3, #0
 8023f44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023f48:	682f      	ldr	r7, [r5, #0]
 8023f4a:	6a21      	ldr	r1, [r4, #32]
 8023f4c:	602b      	str	r3, [r5, #0]
 8023f4e:	d030      	beq.n	8023fb2 <__sflush_r+0x92>
 8023f50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023f52:	89a3      	ldrh	r3, [r4, #12]
 8023f54:	0759      	lsls	r1, r3, #29
 8023f56:	d505      	bpl.n	8023f64 <__sflush_r+0x44>
 8023f58:	6863      	ldr	r3, [r4, #4]
 8023f5a:	1ad2      	subs	r2, r2, r3
 8023f5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023f5e:	b10b      	cbz	r3, 8023f64 <__sflush_r+0x44>
 8023f60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023f62:	1ad2      	subs	r2, r2, r3
 8023f64:	2300      	movs	r3, #0
 8023f66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023f68:	6a21      	ldr	r1, [r4, #32]
 8023f6a:	4628      	mov	r0, r5
 8023f6c:	47b0      	blx	r6
 8023f6e:	1c43      	adds	r3, r0, #1
 8023f70:	89a3      	ldrh	r3, [r4, #12]
 8023f72:	d106      	bne.n	8023f82 <__sflush_r+0x62>
 8023f74:	6829      	ldr	r1, [r5, #0]
 8023f76:	291d      	cmp	r1, #29
 8023f78:	d82b      	bhi.n	8023fd2 <__sflush_r+0xb2>
 8023f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8024024 <__sflush_r+0x104>)
 8023f7c:	410a      	asrs	r2, r1
 8023f7e:	07d6      	lsls	r6, r2, #31
 8023f80:	d427      	bmi.n	8023fd2 <__sflush_r+0xb2>
 8023f82:	2200      	movs	r2, #0
 8023f84:	6062      	str	r2, [r4, #4]
 8023f86:	04d9      	lsls	r1, r3, #19
 8023f88:	6922      	ldr	r2, [r4, #16]
 8023f8a:	6022      	str	r2, [r4, #0]
 8023f8c:	d504      	bpl.n	8023f98 <__sflush_r+0x78>
 8023f8e:	1c42      	adds	r2, r0, #1
 8023f90:	d101      	bne.n	8023f96 <__sflush_r+0x76>
 8023f92:	682b      	ldr	r3, [r5, #0]
 8023f94:	b903      	cbnz	r3, 8023f98 <__sflush_r+0x78>
 8023f96:	6560      	str	r0, [r4, #84]	@ 0x54
 8023f98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023f9a:	602f      	str	r7, [r5, #0]
 8023f9c:	b1b9      	cbz	r1, 8023fce <__sflush_r+0xae>
 8023f9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023fa2:	4299      	cmp	r1, r3
 8023fa4:	d002      	beq.n	8023fac <__sflush_r+0x8c>
 8023fa6:	4628      	mov	r0, r5
 8023fa8:	f7ff feba 	bl	8023d20 <_free_r>
 8023fac:	2300      	movs	r3, #0
 8023fae:	6363      	str	r3, [r4, #52]	@ 0x34
 8023fb0:	e00d      	b.n	8023fce <__sflush_r+0xae>
 8023fb2:	2301      	movs	r3, #1
 8023fb4:	4628      	mov	r0, r5
 8023fb6:	47b0      	blx	r6
 8023fb8:	4602      	mov	r2, r0
 8023fba:	1c50      	adds	r0, r2, #1
 8023fbc:	d1c9      	bne.n	8023f52 <__sflush_r+0x32>
 8023fbe:	682b      	ldr	r3, [r5, #0]
 8023fc0:	2b00      	cmp	r3, #0
 8023fc2:	d0c6      	beq.n	8023f52 <__sflush_r+0x32>
 8023fc4:	2b1d      	cmp	r3, #29
 8023fc6:	d001      	beq.n	8023fcc <__sflush_r+0xac>
 8023fc8:	2b16      	cmp	r3, #22
 8023fca:	d11e      	bne.n	802400a <__sflush_r+0xea>
 8023fcc:	602f      	str	r7, [r5, #0]
 8023fce:	2000      	movs	r0, #0
 8023fd0:	e022      	b.n	8024018 <__sflush_r+0xf8>
 8023fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023fd6:	b21b      	sxth	r3, r3
 8023fd8:	e01b      	b.n	8024012 <__sflush_r+0xf2>
 8023fda:	690f      	ldr	r7, [r1, #16]
 8023fdc:	2f00      	cmp	r7, #0
 8023fde:	d0f6      	beq.n	8023fce <__sflush_r+0xae>
 8023fe0:	0793      	lsls	r3, r2, #30
 8023fe2:	680e      	ldr	r6, [r1, #0]
 8023fe4:	bf08      	it	eq
 8023fe6:	694b      	ldreq	r3, [r1, #20]
 8023fe8:	600f      	str	r7, [r1, #0]
 8023fea:	bf18      	it	ne
 8023fec:	2300      	movne	r3, #0
 8023fee:	eba6 0807 	sub.w	r8, r6, r7
 8023ff2:	608b      	str	r3, [r1, #8]
 8023ff4:	f1b8 0f00 	cmp.w	r8, #0
 8023ff8:	dde9      	ble.n	8023fce <__sflush_r+0xae>
 8023ffa:	6a21      	ldr	r1, [r4, #32]
 8023ffc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8023ffe:	4643      	mov	r3, r8
 8024000:	463a      	mov	r2, r7
 8024002:	4628      	mov	r0, r5
 8024004:	47b0      	blx	r6
 8024006:	2800      	cmp	r0, #0
 8024008:	dc08      	bgt.n	802401c <__sflush_r+0xfc>
 802400a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802400e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024012:	81a3      	strh	r3, [r4, #12]
 8024014:	f04f 30ff 	mov.w	r0, #4294967295
 8024018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802401c:	4407      	add	r7, r0
 802401e:	eba8 0800 	sub.w	r8, r8, r0
 8024022:	e7e7      	b.n	8023ff4 <__sflush_r+0xd4>
 8024024:	dfbffffe 	.word	0xdfbffffe

08024028 <_fflush_r>:
 8024028:	b538      	push	{r3, r4, r5, lr}
 802402a:	690b      	ldr	r3, [r1, #16]
 802402c:	4605      	mov	r5, r0
 802402e:	460c      	mov	r4, r1
 8024030:	b913      	cbnz	r3, 8024038 <_fflush_r+0x10>
 8024032:	2500      	movs	r5, #0
 8024034:	4628      	mov	r0, r5
 8024036:	bd38      	pop	{r3, r4, r5, pc}
 8024038:	b118      	cbz	r0, 8024042 <_fflush_r+0x1a>
 802403a:	6a03      	ldr	r3, [r0, #32]
 802403c:	b90b      	cbnz	r3, 8024042 <_fflush_r+0x1a>
 802403e:	f7ff fcf9 	bl	8023a34 <__sinit>
 8024042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024046:	2b00      	cmp	r3, #0
 8024048:	d0f3      	beq.n	8024032 <_fflush_r+0xa>
 802404a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802404c:	07d0      	lsls	r0, r2, #31
 802404e:	d404      	bmi.n	802405a <_fflush_r+0x32>
 8024050:	0599      	lsls	r1, r3, #22
 8024052:	d402      	bmi.n	802405a <_fflush_r+0x32>
 8024054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024056:	f7ff fe42 	bl	8023cde <__retarget_lock_acquire_recursive>
 802405a:	4628      	mov	r0, r5
 802405c:	4621      	mov	r1, r4
 802405e:	f7ff ff5f 	bl	8023f20 <__sflush_r>
 8024062:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024064:	07da      	lsls	r2, r3, #31
 8024066:	4605      	mov	r5, r0
 8024068:	d4e4      	bmi.n	8024034 <_fflush_r+0xc>
 802406a:	89a3      	ldrh	r3, [r4, #12]
 802406c:	059b      	lsls	r3, r3, #22
 802406e:	d4e1      	bmi.n	8024034 <_fflush_r+0xc>
 8024070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024072:	f7ff fe35 	bl	8023ce0 <__retarget_lock_release_recursive>
 8024076:	e7dd      	b.n	8024034 <_fflush_r+0xc>

08024078 <fiprintf>:
 8024078:	b40e      	push	{r1, r2, r3}
 802407a:	b503      	push	{r0, r1, lr}
 802407c:	4601      	mov	r1, r0
 802407e:	ab03      	add	r3, sp, #12
 8024080:	4805      	ldr	r0, [pc, #20]	@ (8024098 <fiprintf+0x20>)
 8024082:	f853 2b04 	ldr.w	r2, [r3], #4
 8024086:	6800      	ldr	r0, [r0, #0]
 8024088:	9301      	str	r3, [sp, #4]
 802408a:	f000 f847 	bl	802411c <_vfiprintf_r>
 802408e:	b002      	add	sp, #8
 8024090:	f85d eb04 	ldr.w	lr, [sp], #4
 8024094:	b003      	add	sp, #12
 8024096:	4770      	bx	lr
 8024098:	20000038 	.word	0x20000038

0802409c <_sbrk_r>:
 802409c:	b538      	push	{r3, r4, r5, lr}
 802409e:	4d06      	ldr	r5, [pc, #24]	@ (80240b8 <_sbrk_r+0x1c>)
 80240a0:	2300      	movs	r3, #0
 80240a2:	4604      	mov	r4, r0
 80240a4:	4608      	mov	r0, r1
 80240a6:	602b      	str	r3, [r5, #0]
 80240a8:	f7df f8cc 	bl	8003244 <_sbrk>
 80240ac:	1c43      	adds	r3, r0, #1
 80240ae:	d102      	bne.n	80240b6 <_sbrk_r+0x1a>
 80240b0:	682b      	ldr	r3, [r5, #0]
 80240b2:	b103      	cbz	r3, 80240b6 <_sbrk_r+0x1a>
 80240b4:	6023      	str	r3, [r4, #0]
 80240b6:	bd38      	pop	{r3, r4, r5, pc}
 80240b8:	20002878 	.word	0x20002878

080240bc <abort>:
 80240bc:	b508      	push	{r3, lr}
 80240be:	2006      	movs	r0, #6
 80240c0:	f000 fb8e 	bl	80247e0 <raise>
 80240c4:	2001      	movs	r0, #1
 80240c6:	f7df f845 	bl	8003154 <_exit>

080240ca <__sfputc_r>:
 80240ca:	6893      	ldr	r3, [r2, #8]
 80240cc:	3b01      	subs	r3, #1
 80240ce:	2b00      	cmp	r3, #0
 80240d0:	b410      	push	{r4}
 80240d2:	6093      	str	r3, [r2, #8]
 80240d4:	da08      	bge.n	80240e8 <__sfputc_r+0x1e>
 80240d6:	6994      	ldr	r4, [r2, #24]
 80240d8:	42a3      	cmp	r3, r4
 80240da:	db01      	blt.n	80240e0 <__sfputc_r+0x16>
 80240dc:	290a      	cmp	r1, #10
 80240de:	d103      	bne.n	80240e8 <__sfputc_r+0x1e>
 80240e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80240e4:	f000 bac0 	b.w	8024668 <__swbuf_r>
 80240e8:	6813      	ldr	r3, [r2, #0]
 80240ea:	1c58      	adds	r0, r3, #1
 80240ec:	6010      	str	r0, [r2, #0]
 80240ee:	7019      	strb	r1, [r3, #0]
 80240f0:	4608      	mov	r0, r1
 80240f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80240f6:	4770      	bx	lr

080240f8 <__sfputs_r>:
 80240f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80240fa:	4606      	mov	r6, r0
 80240fc:	460f      	mov	r7, r1
 80240fe:	4614      	mov	r4, r2
 8024100:	18d5      	adds	r5, r2, r3
 8024102:	42ac      	cmp	r4, r5
 8024104:	d101      	bne.n	802410a <__sfputs_r+0x12>
 8024106:	2000      	movs	r0, #0
 8024108:	e007      	b.n	802411a <__sfputs_r+0x22>
 802410a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802410e:	463a      	mov	r2, r7
 8024110:	4630      	mov	r0, r6
 8024112:	f7ff ffda 	bl	80240ca <__sfputc_r>
 8024116:	1c43      	adds	r3, r0, #1
 8024118:	d1f3      	bne.n	8024102 <__sfputs_r+0xa>
 802411a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802411c <_vfiprintf_r>:
 802411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024120:	460d      	mov	r5, r1
 8024122:	b09d      	sub	sp, #116	@ 0x74
 8024124:	4614      	mov	r4, r2
 8024126:	4698      	mov	r8, r3
 8024128:	4606      	mov	r6, r0
 802412a:	b118      	cbz	r0, 8024134 <_vfiprintf_r+0x18>
 802412c:	6a03      	ldr	r3, [r0, #32]
 802412e:	b90b      	cbnz	r3, 8024134 <_vfiprintf_r+0x18>
 8024130:	f7ff fc80 	bl	8023a34 <__sinit>
 8024134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024136:	07d9      	lsls	r1, r3, #31
 8024138:	d405      	bmi.n	8024146 <_vfiprintf_r+0x2a>
 802413a:	89ab      	ldrh	r3, [r5, #12]
 802413c:	059a      	lsls	r2, r3, #22
 802413e:	d402      	bmi.n	8024146 <_vfiprintf_r+0x2a>
 8024140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024142:	f7ff fdcc 	bl	8023cde <__retarget_lock_acquire_recursive>
 8024146:	89ab      	ldrh	r3, [r5, #12]
 8024148:	071b      	lsls	r3, r3, #28
 802414a:	d501      	bpl.n	8024150 <_vfiprintf_r+0x34>
 802414c:	692b      	ldr	r3, [r5, #16]
 802414e:	b99b      	cbnz	r3, 8024178 <_vfiprintf_r+0x5c>
 8024150:	4629      	mov	r1, r5
 8024152:	4630      	mov	r0, r6
 8024154:	f000 fac6 	bl	80246e4 <__swsetup_r>
 8024158:	b170      	cbz	r0, 8024178 <_vfiprintf_r+0x5c>
 802415a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802415c:	07dc      	lsls	r4, r3, #31
 802415e:	d504      	bpl.n	802416a <_vfiprintf_r+0x4e>
 8024160:	f04f 30ff 	mov.w	r0, #4294967295
 8024164:	b01d      	add	sp, #116	@ 0x74
 8024166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802416a:	89ab      	ldrh	r3, [r5, #12]
 802416c:	0598      	lsls	r0, r3, #22
 802416e:	d4f7      	bmi.n	8024160 <_vfiprintf_r+0x44>
 8024170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024172:	f7ff fdb5 	bl	8023ce0 <__retarget_lock_release_recursive>
 8024176:	e7f3      	b.n	8024160 <_vfiprintf_r+0x44>
 8024178:	2300      	movs	r3, #0
 802417a:	9309      	str	r3, [sp, #36]	@ 0x24
 802417c:	2320      	movs	r3, #32
 802417e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024182:	f8cd 800c 	str.w	r8, [sp, #12]
 8024186:	2330      	movs	r3, #48	@ 0x30
 8024188:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8024338 <_vfiprintf_r+0x21c>
 802418c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8024190:	f04f 0901 	mov.w	r9, #1
 8024194:	4623      	mov	r3, r4
 8024196:	469a      	mov	sl, r3
 8024198:	f813 2b01 	ldrb.w	r2, [r3], #1
 802419c:	b10a      	cbz	r2, 80241a2 <_vfiprintf_r+0x86>
 802419e:	2a25      	cmp	r2, #37	@ 0x25
 80241a0:	d1f9      	bne.n	8024196 <_vfiprintf_r+0x7a>
 80241a2:	ebba 0b04 	subs.w	fp, sl, r4
 80241a6:	d00b      	beq.n	80241c0 <_vfiprintf_r+0xa4>
 80241a8:	465b      	mov	r3, fp
 80241aa:	4622      	mov	r2, r4
 80241ac:	4629      	mov	r1, r5
 80241ae:	4630      	mov	r0, r6
 80241b0:	f7ff ffa2 	bl	80240f8 <__sfputs_r>
 80241b4:	3001      	adds	r0, #1
 80241b6:	f000 80a7 	beq.w	8024308 <_vfiprintf_r+0x1ec>
 80241ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80241bc:	445a      	add	r2, fp
 80241be:	9209      	str	r2, [sp, #36]	@ 0x24
 80241c0:	f89a 3000 	ldrb.w	r3, [sl]
 80241c4:	2b00      	cmp	r3, #0
 80241c6:	f000 809f 	beq.w	8024308 <_vfiprintf_r+0x1ec>
 80241ca:	2300      	movs	r3, #0
 80241cc:	f04f 32ff 	mov.w	r2, #4294967295
 80241d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80241d4:	f10a 0a01 	add.w	sl, sl, #1
 80241d8:	9304      	str	r3, [sp, #16]
 80241da:	9307      	str	r3, [sp, #28]
 80241dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80241e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80241e2:	4654      	mov	r4, sl
 80241e4:	2205      	movs	r2, #5
 80241e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80241ea:	4853      	ldr	r0, [pc, #332]	@ (8024338 <_vfiprintf_r+0x21c>)
 80241ec:	f7dc f890 	bl	8000310 <memchr>
 80241f0:	9a04      	ldr	r2, [sp, #16]
 80241f2:	b9d8      	cbnz	r0, 802422c <_vfiprintf_r+0x110>
 80241f4:	06d1      	lsls	r1, r2, #27
 80241f6:	bf44      	itt	mi
 80241f8:	2320      	movmi	r3, #32
 80241fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80241fe:	0713      	lsls	r3, r2, #28
 8024200:	bf44      	itt	mi
 8024202:	232b      	movmi	r3, #43	@ 0x2b
 8024204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024208:	f89a 3000 	ldrb.w	r3, [sl]
 802420c:	2b2a      	cmp	r3, #42	@ 0x2a
 802420e:	d015      	beq.n	802423c <_vfiprintf_r+0x120>
 8024210:	9a07      	ldr	r2, [sp, #28]
 8024212:	4654      	mov	r4, sl
 8024214:	2000      	movs	r0, #0
 8024216:	f04f 0c0a 	mov.w	ip, #10
 802421a:	4621      	mov	r1, r4
 802421c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024220:	3b30      	subs	r3, #48	@ 0x30
 8024222:	2b09      	cmp	r3, #9
 8024224:	d94b      	bls.n	80242be <_vfiprintf_r+0x1a2>
 8024226:	b1b0      	cbz	r0, 8024256 <_vfiprintf_r+0x13a>
 8024228:	9207      	str	r2, [sp, #28]
 802422a:	e014      	b.n	8024256 <_vfiprintf_r+0x13a>
 802422c:	eba0 0308 	sub.w	r3, r0, r8
 8024230:	fa09 f303 	lsl.w	r3, r9, r3
 8024234:	4313      	orrs	r3, r2
 8024236:	9304      	str	r3, [sp, #16]
 8024238:	46a2      	mov	sl, r4
 802423a:	e7d2      	b.n	80241e2 <_vfiprintf_r+0xc6>
 802423c:	9b03      	ldr	r3, [sp, #12]
 802423e:	1d19      	adds	r1, r3, #4
 8024240:	681b      	ldr	r3, [r3, #0]
 8024242:	9103      	str	r1, [sp, #12]
 8024244:	2b00      	cmp	r3, #0
 8024246:	bfbb      	ittet	lt
 8024248:	425b      	neglt	r3, r3
 802424a:	f042 0202 	orrlt.w	r2, r2, #2
 802424e:	9307      	strge	r3, [sp, #28]
 8024250:	9307      	strlt	r3, [sp, #28]
 8024252:	bfb8      	it	lt
 8024254:	9204      	strlt	r2, [sp, #16]
 8024256:	7823      	ldrb	r3, [r4, #0]
 8024258:	2b2e      	cmp	r3, #46	@ 0x2e
 802425a:	d10a      	bne.n	8024272 <_vfiprintf_r+0x156>
 802425c:	7863      	ldrb	r3, [r4, #1]
 802425e:	2b2a      	cmp	r3, #42	@ 0x2a
 8024260:	d132      	bne.n	80242c8 <_vfiprintf_r+0x1ac>
 8024262:	9b03      	ldr	r3, [sp, #12]
 8024264:	1d1a      	adds	r2, r3, #4
 8024266:	681b      	ldr	r3, [r3, #0]
 8024268:	9203      	str	r2, [sp, #12]
 802426a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802426e:	3402      	adds	r4, #2
 8024270:	9305      	str	r3, [sp, #20]
 8024272:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8024348 <_vfiprintf_r+0x22c>
 8024276:	7821      	ldrb	r1, [r4, #0]
 8024278:	2203      	movs	r2, #3
 802427a:	4650      	mov	r0, sl
 802427c:	f7dc f848 	bl	8000310 <memchr>
 8024280:	b138      	cbz	r0, 8024292 <_vfiprintf_r+0x176>
 8024282:	9b04      	ldr	r3, [sp, #16]
 8024284:	eba0 000a 	sub.w	r0, r0, sl
 8024288:	2240      	movs	r2, #64	@ 0x40
 802428a:	4082      	lsls	r2, r0
 802428c:	4313      	orrs	r3, r2
 802428e:	3401      	adds	r4, #1
 8024290:	9304      	str	r3, [sp, #16]
 8024292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024296:	4829      	ldr	r0, [pc, #164]	@ (802433c <_vfiprintf_r+0x220>)
 8024298:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802429c:	2206      	movs	r2, #6
 802429e:	f7dc f837 	bl	8000310 <memchr>
 80242a2:	2800      	cmp	r0, #0
 80242a4:	d03f      	beq.n	8024326 <_vfiprintf_r+0x20a>
 80242a6:	4b26      	ldr	r3, [pc, #152]	@ (8024340 <_vfiprintf_r+0x224>)
 80242a8:	bb1b      	cbnz	r3, 80242f2 <_vfiprintf_r+0x1d6>
 80242aa:	9b03      	ldr	r3, [sp, #12]
 80242ac:	3307      	adds	r3, #7
 80242ae:	f023 0307 	bic.w	r3, r3, #7
 80242b2:	3308      	adds	r3, #8
 80242b4:	9303      	str	r3, [sp, #12]
 80242b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242b8:	443b      	add	r3, r7
 80242ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80242bc:	e76a      	b.n	8024194 <_vfiprintf_r+0x78>
 80242be:	fb0c 3202 	mla	r2, ip, r2, r3
 80242c2:	460c      	mov	r4, r1
 80242c4:	2001      	movs	r0, #1
 80242c6:	e7a8      	b.n	802421a <_vfiprintf_r+0xfe>
 80242c8:	2300      	movs	r3, #0
 80242ca:	3401      	adds	r4, #1
 80242cc:	9305      	str	r3, [sp, #20]
 80242ce:	4619      	mov	r1, r3
 80242d0:	f04f 0c0a 	mov.w	ip, #10
 80242d4:	4620      	mov	r0, r4
 80242d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80242da:	3a30      	subs	r2, #48	@ 0x30
 80242dc:	2a09      	cmp	r2, #9
 80242de:	d903      	bls.n	80242e8 <_vfiprintf_r+0x1cc>
 80242e0:	2b00      	cmp	r3, #0
 80242e2:	d0c6      	beq.n	8024272 <_vfiprintf_r+0x156>
 80242e4:	9105      	str	r1, [sp, #20]
 80242e6:	e7c4      	b.n	8024272 <_vfiprintf_r+0x156>
 80242e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80242ec:	4604      	mov	r4, r0
 80242ee:	2301      	movs	r3, #1
 80242f0:	e7f0      	b.n	80242d4 <_vfiprintf_r+0x1b8>
 80242f2:	ab03      	add	r3, sp, #12
 80242f4:	9300      	str	r3, [sp, #0]
 80242f6:	462a      	mov	r2, r5
 80242f8:	4b12      	ldr	r3, [pc, #72]	@ (8024344 <_vfiprintf_r+0x228>)
 80242fa:	a904      	add	r1, sp, #16
 80242fc:	4630      	mov	r0, r6
 80242fe:	f3af 8000 	nop.w
 8024302:	4607      	mov	r7, r0
 8024304:	1c78      	adds	r0, r7, #1
 8024306:	d1d6      	bne.n	80242b6 <_vfiprintf_r+0x19a>
 8024308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802430a:	07d9      	lsls	r1, r3, #31
 802430c:	d405      	bmi.n	802431a <_vfiprintf_r+0x1fe>
 802430e:	89ab      	ldrh	r3, [r5, #12]
 8024310:	059a      	lsls	r2, r3, #22
 8024312:	d402      	bmi.n	802431a <_vfiprintf_r+0x1fe>
 8024314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024316:	f7ff fce3 	bl	8023ce0 <__retarget_lock_release_recursive>
 802431a:	89ab      	ldrh	r3, [r5, #12]
 802431c:	065b      	lsls	r3, r3, #25
 802431e:	f53f af1f 	bmi.w	8024160 <_vfiprintf_r+0x44>
 8024322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024324:	e71e      	b.n	8024164 <_vfiprintf_r+0x48>
 8024326:	ab03      	add	r3, sp, #12
 8024328:	9300      	str	r3, [sp, #0]
 802432a:	462a      	mov	r2, r5
 802432c:	4b05      	ldr	r3, [pc, #20]	@ (8024344 <_vfiprintf_r+0x228>)
 802432e:	a904      	add	r1, sp, #16
 8024330:	4630      	mov	r0, r6
 8024332:	f000 f879 	bl	8024428 <_printf_i>
 8024336:	e7e4      	b.n	8024302 <_vfiprintf_r+0x1e6>
 8024338:	0802821c 	.word	0x0802821c
 802433c:	08028226 	.word	0x08028226
 8024340:	00000000 	.word	0x00000000
 8024344:	080240f9 	.word	0x080240f9
 8024348:	08028222 	.word	0x08028222

0802434c <_printf_common>:
 802434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024350:	4616      	mov	r6, r2
 8024352:	4698      	mov	r8, r3
 8024354:	688a      	ldr	r2, [r1, #8]
 8024356:	690b      	ldr	r3, [r1, #16]
 8024358:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802435c:	4293      	cmp	r3, r2
 802435e:	bfb8      	it	lt
 8024360:	4613      	movlt	r3, r2
 8024362:	6033      	str	r3, [r6, #0]
 8024364:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8024368:	4607      	mov	r7, r0
 802436a:	460c      	mov	r4, r1
 802436c:	b10a      	cbz	r2, 8024372 <_printf_common+0x26>
 802436e:	3301      	adds	r3, #1
 8024370:	6033      	str	r3, [r6, #0]
 8024372:	6823      	ldr	r3, [r4, #0]
 8024374:	0699      	lsls	r1, r3, #26
 8024376:	bf42      	ittt	mi
 8024378:	6833      	ldrmi	r3, [r6, #0]
 802437a:	3302      	addmi	r3, #2
 802437c:	6033      	strmi	r3, [r6, #0]
 802437e:	6825      	ldr	r5, [r4, #0]
 8024380:	f015 0506 	ands.w	r5, r5, #6
 8024384:	d106      	bne.n	8024394 <_printf_common+0x48>
 8024386:	f104 0a19 	add.w	sl, r4, #25
 802438a:	68e3      	ldr	r3, [r4, #12]
 802438c:	6832      	ldr	r2, [r6, #0]
 802438e:	1a9b      	subs	r3, r3, r2
 8024390:	42ab      	cmp	r3, r5
 8024392:	dc26      	bgt.n	80243e2 <_printf_common+0x96>
 8024394:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024398:	6822      	ldr	r2, [r4, #0]
 802439a:	3b00      	subs	r3, #0
 802439c:	bf18      	it	ne
 802439e:	2301      	movne	r3, #1
 80243a0:	0692      	lsls	r2, r2, #26
 80243a2:	d42b      	bmi.n	80243fc <_printf_common+0xb0>
 80243a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80243a8:	4641      	mov	r1, r8
 80243aa:	4638      	mov	r0, r7
 80243ac:	47c8      	blx	r9
 80243ae:	3001      	adds	r0, #1
 80243b0:	d01e      	beq.n	80243f0 <_printf_common+0xa4>
 80243b2:	6823      	ldr	r3, [r4, #0]
 80243b4:	6922      	ldr	r2, [r4, #16]
 80243b6:	f003 0306 	and.w	r3, r3, #6
 80243ba:	2b04      	cmp	r3, #4
 80243bc:	bf02      	ittt	eq
 80243be:	68e5      	ldreq	r5, [r4, #12]
 80243c0:	6833      	ldreq	r3, [r6, #0]
 80243c2:	1aed      	subeq	r5, r5, r3
 80243c4:	68a3      	ldr	r3, [r4, #8]
 80243c6:	bf0c      	ite	eq
 80243c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80243cc:	2500      	movne	r5, #0
 80243ce:	4293      	cmp	r3, r2
 80243d0:	bfc4      	itt	gt
 80243d2:	1a9b      	subgt	r3, r3, r2
 80243d4:	18ed      	addgt	r5, r5, r3
 80243d6:	2600      	movs	r6, #0
 80243d8:	341a      	adds	r4, #26
 80243da:	42b5      	cmp	r5, r6
 80243dc:	d11a      	bne.n	8024414 <_printf_common+0xc8>
 80243de:	2000      	movs	r0, #0
 80243e0:	e008      	b.n	80243f4 <_printf_common+0xa8>
 80243e2:	2301      	movs	r3, #1
 80243e4:	4652      	mov	r2, sl
 80243e6:	4641      	mov	r1, r8
 80243e8:	4638      	mov	r0, r7
 80243ea:	47c8      	blx	r9
 80243ec:	3001      	adds	r0, #1
 80243ee:	d103      	bne.n	80243f8 <_printf_common+0xac>
 80243f0:	f04f 30ff 	mov.w	r0, #4294967295
 80243f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80243f8:	3501      	adds	r5, #1
 80243fa:	e7c6      	b.n	802438a <_printf_common+0x3e>
 80243fc:	18e1      	adds	r1, r4, r3
 80243fe:	1c5a      	adds	r2, r3, #1
 8024400:	2030      	movs	r0, #48	@ 0x30
 8024402:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024406:	4422      	add	r2, r4
 8024408:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802440c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8024410:	3302      	adds	r3, #2
 8024412:	e7c7      	b.n	80243a4 <_printf_common+0x58>
 8024414:	2301      	movs	r3, #1
 8024416:	4622      	mov	r2, r4
 8024418:	4641      	mov	r1, r8
 802441a:	4638      	mov	r0, r7
 802441c:	47c8      	blx	r9
 802441e:	3001      	adds	r0, #1
 8024420:	d0e6      	beq.n	80243f0 <_printf_common+0xa4>
 8024422:	3601      	adds	r6, #1
 8024424:	e7d9      	b.n	80243da <_printf_common+0x8e>
	...

08024428 <_printf_i>:
 8024428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802442c:	7e0f      	ldrb	r7, [r1, #24]
 802442e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024430:	2f78      	cmp	r7, #120	@ 0x78
 8024432:	4691      	mov	r9, r2
 8024434:	4680      	mov	r8, r0
 8024436:	460c      	mov	r4, r1
 8024438:	469a      	mov	sl, r3
 802443a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802443e:	d807      	bhi.n	8024450 <_printf_i+0x28>
 8024440:	2f62      	cmp	r7, #98	@ 0x62
 8024442:	d80a      	bhi.n	802445a <_printf_i+0x32>
 8024444:	2f00      	cmp	r7, #0
 8024446:	f000 80d2 	beq.w	80245ee <_printf_i+0x1c6>
 802444a:	2f58      	cmp	r7, #88	@ 0x58
 802444c:	f000 80b9 	beq.w	80245c2 <_printf_i+0x19a>
 8024450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024454:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024458:	e03a      	b.n	80244d0 <_printf_i+0xa8>
 802445a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802445e:	2b15      	cmp	r3, #21
 8024460:	d8f6      	bhi.n	8024450 <_printf_i+0x28>
 8024462:	a101      	add	r1, pc, #4	@ (adr r1, 8024468 <_printf_i+0x40>)
 8024464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024468:	080244c1 	.word	0x080244c1
 802446c:	080244d5 	.word	0x080244d5
 8024470:	08024451 	.word	0x08024451
 8024474:	08024451 	.word	0x08024451
 8024478:	08024451 	.word	0x08024451
 802447c:	08024451 	.word	0x08024451
 8024480:	080244d5 	.word	0x080244d5
 8024484:	08024451 	.word	0x08024451
 8024488:	08024451 	.word	0x08024451
 802448c:	08024451 	.word	0x08024451
 8024490:	08024451 	.word	0x08024451
 8024494:	080245d5 	.word	0x080245d5
 8024498:	080244ff 	.word	0x080244ff
 802449c:	0802458f 	.word	0x0802458f
 80244a0:	08024451 	.word	0x08024451
 80244a4:	08024451 	.word	0x08024451
 80244a8:	080245f7 	.word	0x080245f7
 80244ac:	08024451 	.word	0x08024451
 80244b0:	080244ff 	.word	0x080244ff
 80244b4:	08024451 	.word	0x08024451
 80244b8:	08024451 	.word	0x08024451
 80244bc:	08024597 	.word	0x08024597
 80244c0:	6833      	ldr	r3, [r6, #0]
 80244c2:	1d1a      	adds	r2, r3, #4
 80244c4:	681b      	ldr	r3, [r3, #0]
 80244c6:	6032      	str	r2, [r6, #0]
 80244c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80244cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80244d0:	2301      	movs	r3, #1
 80244d2:	e09d      	b.n	8024610 <_printf_i+0x1e8>
 80244d4:	6833      	ldr	r3, [r6, #0]
 80244d6:	6820      	ldr	r0, [r4, #0]
 80244d8:	1d19      	adds	r1, r3, #4
 80244da:	6031      	str	r1, [r6, #0]
 80244dc:	0606      	lsls	r6, r0, #24
 80244de:	d501      	bpl.n	80244e4 <_printf_i+0xbc>
 80244e0:	681d      	ldr	r5, [r3, #0]
 80244e2:	e003      	b.n	80244ec <_printf_i+0xc4>
 80244e4:	0645      	lsls	r5, r0, #25
 80244e6:	d5fb      	bpl.n	80244e0 <_printf_i+0xb8>
 80244e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80244ec:	2d00      	cmp	r5, #0
 80244ee:	da03      	bge.n	80244f8 <_printf_i+0xd0>
 80244f0:	232d      	movs	r3, #45	@ 0x2d
 80244f2:	426d      	negs	r5, r5
 80244f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80244f8:	4859      	ldr	r0, [pc, #356]	@ (8024660 <_printf_i+0x238>)
 80244fa:	230a      	movs	r3, #10
 80244fc:	e011      	b.n	8024522 <_printf_i+0xfa>
 80244fe:	6821      	ldr	r1, [r4, #0]
 8024500:	6833      	ldr	r3, [r6, #0]
 8024502:	0608      	lsls	r0, r1, #24
 8024504:	f853 5b04 	ldr.w	r5, [r3], #4
 8024508:	d402      	bmi.n	8024510 <_printf_i+0xe8>
 802450a:	0649      	lsls	r1, r1, #25
 802450c:	bf48      	it	mi
 802450e:	b2ad      	uxthmi	r5, r5
 8024510:	2f6f      	cmp	r7, #111	@ 0x6f
 8024512:	4853      	ldr	r0, [pc, #332]	@ (8024660 <_printf_i+0x238>)
 8024514:	6033      	str	r3, [r6, #0]
 8024516:	bf14      	ite	ne
 8024518:	230a      	movne	r3, #10
 802451a:	2308      	moveq	r3, #8
 802451c:	2100      	movs	r1, #0
 802451e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8024522:	6866      	ldr	r6, [r4, #4]
 8024524:	60a6      	str	r6, [r4, #8]
 8024526:	2e00      	cmp	r6, #0
 8024528:	bfa2      	ittt	ge
 802452a:	6821      	ldrge	r1, [r4, #0]
 802452c:	f021 0104 	bicge.w	r1, r1, #4
 8024530:	6021      	strge	r1, [r4, #0]
 8024532:	b90d      	cbnz	r5, 8024538 <_printf_i+0x110>
 8024534:	2e00      	cmp	r6, #0
 8024536:	d04b      	beq.n	80245d0 <_printf_i+0x1a8>
 8024538:	4616      	mov	r6, r2
 802453a:	fbb5 f1f3 	udiv	r1, r5, r3
 802453e:	fb03 5711 	mls	r7, r3, r1, r5
 8024542:	5dc7      	ldrb	r7, [r0, r7]
 8024544:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024548:	462f      	mov	r7, r5
 802454a:	42bb      	cmp	r3, r7
 802454c:	460d      	mov	r5, r1
 802454e:	d9f4      	bls.n	802453a <_printf_i+0x112>
 8024550:	2b08      	cmp	r3, #8
 8024552:	d10b      	bne.n	802456c <_printf_i+0x144>
 8024554:	6823      	ldr	r3, [r4, #0]
 8024556:	07df      	lsls	r7, r3, #31
 8024558:	d508      	bpl.n	802456c <_printf_i+0x144>
 802455a:	6923      	ldr	r3, [r4, #16]
 802455c:	6861      	ldr	r1, [r4, #4]
 802455e:	4299      	cmp	r1, r3
 8024560:	bfde      	ittt	le
 8024562:	2330      	movle	r3, #48	@ 0x30
 8024564:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024568:	f106 36ff 	addle.w	r6, r6, #4294967295
 802456c:	1b92      	subs	r2, r2, r6
 802456e:	6122      	str	r2, [r4, #16]
 8024570:	f8cd a000 	str.w	sl, [sp]
 8024574:	464b      	mov	r3, r9
 8024576:	aa03      	add	r2, sp, #12
 8024578:	4621      	mov	r1, r4
 802457a:	4640      	mov	r0, r8
 802457c:	f7ff fee6 	bl	802434c <_printf_common>
 8024580:	3001      	adds	r0, #1
 8024582:	d14a      	bne.n	802461a <_printf_i+0x1f2>
 8024584:	f04f 30ff 	mov.w	r0, #4294967295
 8024588:	b004      	add	sp, #16
 802458a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802458e:	6823      	ldr	r3, [r4, #0]
 8024590:	f043 0320 	orr.w	r3, r3, #32
 8024594:	6023      	str	r3, [r4, #0]
 8024596:	4833      	ldr	r0, [pc, #204]	@ (8024664 <_printf_i+0x23c>)
 8024598:	2778      	movs	r7, #120	@ 0x78
 802459a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802459e:	6823      	ldr	r3, [r4, #0]
 80245a0:	6831      	ldr	r1, [r6, #0]
 80245a2:	061f      	lsls	r7, r3, #24
 80245a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80245a8:	d402      	bmi.n	80245b0 <_printf_i+0x188>
 80245aa:	065f      	lsls	r7, r3, #25
 80245ac:	bf48      	it	mi
 80245ae:	b2ad      	uxthmi	r5, r5
 80245b0:	6031      	str	r1, [r6, #0]
 80245b2:	07d9      	lsls	r1, r3, #31
 80245b4:	bf44      	itt	mi
 80245b6:	f043 0320 	orrmi.w	r3, r3, #32
 80245ba:	6023      	strmi	r3, [r4, #0]
 80245bc:	b11d      	cbz	r5, 80245c6 <_printf_i+0x19e>
 80245be:	2310      	movs	r3, #16
 80245c0:	e7ac      	b.n	802451c <_printf_i+0xf4>
 80245c2:	4827      	ldr	r0, [pc, #156]	@ (8024660 <_printf_i+0x238>)
 80245c4:	e7e9      	b.n	802459a <_printf_i+0x172>
 80245c6:	6823      	ldr	r3, [r4, #0]
 80245c8:	f023 0320 	bic.w	r3, r3, #32
 80245cc:	6023      	str	r3, [r4, #0]
 80245ce:	e7f6      	b.n	80245be <_printf_i+0x196>
 80245d0:	4616      	mov	r6, r2
 80245d2:	e7bd      	b.n	8024550 <_printf_i+0x128>
 80245d4:	6833      	ldr	r3, [r6, #0]
 80245d6:	6825      	ldr	r5, [r4, #0]
 80245d8:	6961      	ldr	r1, [r4, #20]
 80245da:	1d18      	adds	r0, r3, #4
 80245dc:	6030      	str	r0, [r6, #0]
 80245de:	062e      	lsls	r6, r5, #24
 80245e0:	681b      	ldr	r3, [r3, #0]
 80245e2:	d501      	bpl.n	80245e8 <_printf_i+0x1c0>
 80245e4:	6019      	str	r1, [r3, #0]
 80245e6:	e002      	b.n	80245ee <_printf_i+0x1c6>
 80245e8:	0668      	lsls	r0, r5, #25
 80245ea:	d5fb      	bpl.n	80245e4 <_printf_i+0x1bc>
 80245ec:	8019      	strh	r1, [r3, #0]
 80245ee:	2300      	movs	r3, #0
 80245f0:	6123      	str	r3, [r4, #16]
 80245f2:	4616      	mov	r6, r2
 80245f4:	e7bc      	b.n	8024570 <_printf_i+0x148>
 80245f6:	6833      	ldr	r3, [r6, #0]
 80245f8:	1d1a      	adds	r2, r3, #4
 80245fa:	6032      	str	r2, [r6, #0]
 80245fc:	681e      	ldr	r6, [r3, #0]
 80245fe:	6862      	ldr	r2, [r4, #4]
 8024600:	2100      	movs	r1, #0
 8024602:	4630      	mov	r0, r6
 8024604:	f7db fe84 	bl	8000310 <memchr>
 8024608:	b108      	cbz	r0, 802460e <_printf_i+0x1e6>
 802460a:	1b80      	subs	r0, r0, r6
 802460c:	6060      	str	r0, [r4, #4]
 802460e:	6863      	ldr	r3, [r4, #4]
 8024610:	6123      	str	r3, [r4, #16]
 8024612:	2300      	movs	r3, #0
 8024614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024618:	e7aa      	b.n	8024570 <_printf_i+0x148>
 802461a:	6923      	ldr	r3, [r4, #16]
 802461c:	4632      	mov	r2, r6
 802461e:	4649      	mov	r1, r9
 8024620:	4640      	mov	r0, r8
 8024622:	47d0      	blx	sl
 8024624:	3001      	adds	r0, #1
 8024626:	d0ad      	beq.n	8024584 <_printf_i+0x15c>
 8024628:	6823      	ldr	r3, [r4, #0]
 802462a:	079b      	lsls	r3, r3, #30
 802462c:	d413      	bmi.n	8024656 <_printf_i+0x22e>
 802462e:	68e0      	ldr	r0, [r4, #12]
 8024630:	9b03      	ldr	r3, [sp, #12]
 8024632:	4298      	cmp	r0, r3
 8024634:	bfb8      	it	lt
 8024636:	4618      	movlt	r0, r3
 8024638:	e7a6      	b.n	8024588 <_printf_i+0x160>
 802463a:	2301      	movs	r3, #1
 802463c:	4632      	mov	r2, r6
 802463e:	4649      	mov	r1, r9
 8024640:	4640      	mov	r0, r8
 8024642:	47d0      	blx	sl
 8024644:	3001      	adds	r0, #1
 8024646:	d09d      	beq.n	8024584 <_printf_i+0x15c>
 8024648:	3501      	adds	r5, #1
 802464a:	68e3      	ldr	r3, [r4, #12]
 802464c:	9903      	ldr	r1, [sp, #12]
 802464e:	1a5b      	subs	r3, r3, r1
 8024650:	42ab      	cmp	r3, r5
 8024652:	dcf2      	bgt.n	802463a <_printf_i+0x212>
 8024654:	e7eb      	b.n	802462e <_printf_i+0x206>
 8024656:	2500      	movs	r5, #0
 8024658:	f104 0619 	add.w	r6, r4, #25
 802465c:	e7f5      	b.n	802464a <_printf_i+0x222>
 802465e:	bf00      	nop
 8024660:	0802822d 	.word	0x0802822d
 8024664:	0802823e 	.word	0x0802823e

08024668 <__swbuf_r>:
 8024668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802466a:	460e      	mov	r6, r1
 802466c:	4614      	mov	r4, r2
 802466e:	4605      	mov	r5, r0
 8024670:	b118      	cbz	r0, 802467a <__swbuf_r+0x12>
 8024672:	6a03      	ldr	r3, [r0, #32]
 8024674:	b90b      	cbnz	r3, 802467a <__swbuf_r+0x12>
 8024676:	f7ff f9dd 	bl	8023a34 <__sinit>
 802467a:	69a3      	ldr	r3, [r4, #24]
 802467c:	60a3      	str	r3, [r4, #8]
 802467e:	89a3      	ldrh	r3, [r4, #12]
 8024680:	071a      	lsls	r2, r3, #28
 8024682:	d501      	bpl.n	8024688 <__swbuf_r+0x20>
 8024684:	6923      	ldr	r3, [r4, #16]
 8024686:	b943      	cbnz	r3, 802469a <__swbuf_r+0x32>
 8024688:	4621      	mov	r1, r4
 802468a:	4628      	mov	r0, r5
 802468c:	f000 f82a 	bl	80246e4 <__swsetup_r>
 8024690:	b118      	cbz	r0, 802469a <__swbuf_r+0x32>
 8024692:	f04f 37ff 	mov.w	r7, #4294967295
 8024696:	4638      	mov	r0, r7
 8024698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802469a:	6823      	ldr	r3, [r4, #0]
 802469c:	6922      	ldr	r2, [r4, #16]
 802469e:	1a98      	subs	r0, r3, r2
 80246a0:	6963      	ldr	r3, [r4, #20]
 80246a2:	b2f6      	uxtb	r6, r6
 80246a4:	4283      	cmp	r3, r0
 80246a6:	4637      	mov	r7, r6
 80246a8:	dc05      	bgt.n	80246b6 <__swbuf_r+0x4e>
 80246aa:	4621      	mov	r1, r4
 80246ac:	4628      	mov	r0, r5
 80246ae:	f7ff fcbb 	bl	8024028 <_fflush_r>
 80246b2:	2800      	cmp	r0, #0
 80246b4:	d1ed      	bne.n	8024692 <__swbuf_r+0x2a>
 80246b6:	68a3      	ldr	r3, [r4, #8]
 80246b8:	3b01      	subs	r3, #1
 80246ba:	60a3      	str	r3, [r4, #8]
 80246bc:	6823      	ldr	r3, [r4, #0]
 80246be:	1c5a      	adds	r2, r3, #1
 80246c0:	6022      	str	r2, [r4, #0]
 80246c2:	701e      	strb	r6, [r3, #0]
 80246c4:	6962      	ldr	r2, [r4, #20]
 80246c6:	1c43      	adds	r3, r0, #1
 80246c8:	429a      	cmp	r2, r3
 80246ca:	d004      	beq.n	80246d6 <__swbuf_r+0x6e>
 80246cc:	89a3      	ldrh	r3, [r4, #12]
 80246ce:	07db      	lsls	r3, r3, #31
 80246d0:	d5e1      	bpl.n	8024696 <__swbuf_r+0x2e>
 80246d2:	2e0a      	cmp	r6, #10
 80246d4:	d1df      	bne.n	8024696 <__swbuf_r+0x2e>
 80246d6:	4621      	mov	r1, r4
 80246d8:	4628      	mov	r0, r5
 80246da:	f7ff fca5 	bl	8024028 <_fflush_r>
 80246de:	2800      	cmp	r0, #0
 80246e0:	d0d9      	beq.n	8024696 <__swbuf_r+0x2e>
 80246e2:	e7d6      	b.n	8024692 <__swbuf_r+0x2a>

080246e4 <__swsetup_r>:
 80246e4:	b538      	push	{r3, r4, r5, lr}
 80246e6:	4b29      	ldr	r3, [pc, #164]	@ (802478c <__swsetup_r+0xa8>)
 80246e8:	4605      	mov	r5, r0
 80246ea:	6818      	ldr	r0, [r3, #0]
 80246ec:	460c      	mov	r4, r1
 80246ee:	b118      	cbz	r0, 80246f8 <__swsetup_r+0x14>
 80246f0:	6a03      	ldr	r3, [r0, #32]
 80246f2:	b90b      	cbnz	r3, 80246f8 <__swsetup_r+0x14>
 80246f4:	f7ff f99e 	bl	8023a34 <__sinit>
 80246f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80246fc:	0719      	lsls	r1, r3, #28
 80246fe:	d422      	bmi.n	8024746 <__swsetup_r+0x62>
 8024700:	06da      	lsls	r2, r3, #27
 8024702:	d407      	bmi.n	8024714 <__swsetup_r+0x30>
 8024704:	2209      	movs	r2, #9
 8024706:	602a      	str	r2, [r5, #0]
 8024708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802470c:	81a3      	strh	r3, [r4, #12]
 802470e:	f04f 30ff 	mov.w	r0, #4294967295
 8024712:	e033      	b.n	802477c <__swsetup_r+0x98>
 8024714:	0758      	lsls	r0, r3, #29
 8024716:	d512      	bpl.n	802473e <__swsetup_r+0x5a>
 8024718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802471a:	b141      	cbz	r1, 802472e <__swsetup_r+0x4a>
 802471c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024720:	4299      	cmp	r1, r3
 8024722:	d002      	beq.n	802472a <__swsetup_r+0x46>
 8024724:	4628      	mov	r0, r5
 8024726:	f7ff fafb 	bl	8023d20 <_free_r>
 802472a:	2300      	movs	r3, #0
 802472c:	6363      	str	r3, [r4, #52]	@ 0x34
 802472e:	89a3      	ldrh	r3, [r4, #12]
 8024730:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8024734:	81a3      	strh	r3, [r4, #12]
 8024736:	2300      	movs	r3, #0
 8024738:	6063      	str	r3, [r4, #4]
 802473a:	6923      	ldr	r3, [r4, #16]
 802473c:	6023      	str	r3, [r4, #0]
 802473e:	89a3      	ldrh	r3, [r4, #12]
 8024740:	f043 0308 	orr.w	r3, r3, #8
 8024744:	81a3      	strh	r3, [r4, #12]
 8024746:	6923      	ldr	r3, [r4, #16]
 8024748:	b94b      	cbnz	r3, 802475e <__swsetup_r+0x7a>
 802474a:	89a3      	ldrh	r3, [r4, #12]
 802474c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024754:	d003      	beq.n	802475e <__swsetup_r+0x7a>
 8024756:	4621      	mov	r1, r4
 8024758:	4628      	mov	r0, r5
 802475a:	f000 f883 	bl	8024864 <__smakebuf_r>
 802475e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024762:	f013 0201 	ands.w	r2, r3, #1
 8024766:	d00a      	beq.n	802477e <__swsetup_r+0x9a>
 8024768:	2200      	movs	r2, #0
 802476a:	60a2      	str	r2, [r4, #8]
 802476c:	6962      	ldr	r2, [r4, #20]
 802476e:	4252      	negs	r2, r2
 8024770:	61a2      	str	r2, [r4, #24]
 8024772:	6922      	ldr	r2, [r4, #16]
 8024774:	b942      	cbnz	r2, 8024788 <__swsetup_r+0xa4>
 8024776:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802477a:	d1c5      	bne.n	8024708 <__swsetup_r+0x24>
 802477c:	bd38      	pop	{r3, r4, r5, pc}
 802477e:	0799      	lsls	r1, r3, #30
 8024780:	bf58      	it	pl
 8024782:	6962      	ldrpl	r2, [r4, #20]
 8024784:	60a2      	str	r2, [r4, #8]
 8024786:	e7f4      	b.n	8024772 <__swsetup_r+0x8e>
 8024788:	2000      	movs	r0, #0
 802478a:	e7f7      	b.n	802477c <__swsetup_r+0x98>
 802478c:	20000038 	.word	0x20000038

08024790 <_raise_r>:
 8024790:	291f      	cmp	r1, #31
 8024792:	b538      	push	{r3, r4, r5, lr}
 8024794:	4605      	mov	r5, r0
 8024796:	460c      	mov	r4, r1
 8024798:	d904      	bls.n	80247a4 <_raise_r+0x14>
 802479a:	2316      	movs	r3, #22
 802479c:	6003      	str	r3, [r0, #0]
 802479e:	f04f 30ff 	mov.w	r0, #4294967295
 80247a2:	bd38      	pop	{r3, r4, r5, pc}
 80247a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80247a6:	b112      	cbz	r2, 80247ae <_raise_r+0x1e>
 80247a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80247ac:	b94b      	cbnz	r3, 80247c2 <_raise_r+0x32>
 80247ae:	4628      	mov	r0, r5
 80247b0:	f000 f830 	bl	8024814 <_getpid_r>
 80247b4:	4622      	mov	r2, r4
 80247b6:	4601      	mov	r1, r0
 80247b8:	4628      	mov	r0, r5
 80247ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80247be:	f000 b817 	b.w	80247f0 <_kill_r>
 80247c2:	2b01      	cmp	r3, #1
 80247c4:	d00a      	beq.n	80247dc <_raise_r+0x4c>
 80247c6:	1c59      	adds	r1, r3, #1
 80247c8:	d103      	bne.n	80247d2 <_raise_r+0x42>
 80247ca:	2316      	movs	r3, #22
 80247cc:	6003      	str	r3, [r0, #0]
 80247ce:	2001      	movs	r0, #1
 80247d0:	e7e7      	b.n	80247a2 <_raise_r+0x12>
 80247d2:	2100      	movs	r1, #0
 80247d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80247d8:	4620      	mov	r0, r4
 80247da:	4798      	blx	r3
 80247dc:	2000      	movs	r0, #0
 80247de:	e7e0      	b.n	80247a2 <_raise_r+0x12>

080247e0 <raise>:
 80247e0:	4b02      	ldr	r3, [pc, #8]	@ (80247ec <raise+0xc>)
 80247e2:	4601      	mov	r1, r0
 80247e4:	6818      	ldr	r0, [r3, #0]
 80247e6:	f7ff bfd3 	b.w	8024790 <_raise_r>
 80247ea:	bf00      	nop
 80247ec:	20000038 	.word	0x20000038

080247f0 <_kill_r>:
 80247f0:	b538      	push	{r3, r4, r5, lr}
 80247f2:	4d07      	ldr	r5, [pc, #28]	@ (8024810 <_kill_r+0x20>)
 80247f4:	2300      	movs	r3, #0
 80247f6:	4604      	mov	r4, r0
 80247f8:	4608      	mov	r0, r1
 80247fa:	4611      	mov	r1, r2
 80247fc:	602b      	str	r3, [r5, #0]
 80247fe:	f7de fc99 	bl	8003134 <_kill>
 8024802:	1c43      	adds	r3, r0, #1
 8024804:	d102      	bne.n	802480c <_kill_r+0x1c>
 8024806:	682b      	ldr	r3, [r5, #0]
 8024808:	b103      	cbz	r3, 802480c <_kill_r+0x1c>
 802480a:	6023      	str	r3, [r4, #0]
 802480c:	bd38      	pop	{r3, r4, r5, pc}
 802480e:	bf00      	nop
 8024810:	20002878 	.word	0x20002878

08024814 <_getpid_r>:
 8024814:	f7de bc86 	b.w	8003124 <_getpid>

08024818 <__swhatbuf_r>:
 8024818:	b570      	push	{r4, r5, r6, lr}
 802481a:	460c      	mov	r4, r1
 802481c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024820:	2900      	cmp	r1, #0
 8024822:	b096      	sub	sp, #88	@ 0x58
 8024824:	4615      	mov	r5, r2
 8024826:	461e      	mov	r6, r3
 8024828:	da0d      	bge.n	8024846 <__swhatbuf_r+0x2e>
 802482a:	89a3      	ldrh	r3, [r4, #12]
 802482c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024830:	f04f 0100 	mov.w	r1, #0
 8024834:	bf14      	ite	ne
 8024836:	2340      	movne	r3, #64	@ 0x40
 8024838:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802483c:	2000      	movs	r0, #0
 802483e:	6031      	str	r1, [r6, #0]
 8024840:	602b      	str	r3, [r5, #0]
 8024842:	b016      	add	sp, #88	@ 0x58
 8024844:	bd70      	pop	{r4, r5, r6, pc}
 8024846:	466a      	mov	r2, sp
 8024848:	f000 f848 	bl	80248dc <_fstat_r>
 802484c:	2800      	cmp	r0, #0
 802484e:	dbec      	blt.n	802482a <__swhatbuf_r+0x12>
 8024850:	9901      	ldr	r1, [sp, #4]
 8024852:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024856:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802485a:	4259      	negs	r1, r3
 802485c:	4159      	adcs	r1, r3
 802485e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024862:	e7eb      	b.n	802483c <__swhatbuf_r+0x24>

08024864 <__smakebuf_r>:
 8024864:	898b      	ldrh	r3, [r1, #12]
 8024866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024868:	079d      	lsls	r5, r3, #30
 802486a:	4606      	mov	r6, r0
 802486c:	460c      	mov	r4, r1
 802486e:	d507      	bpl.n	8024880 <__smakebuf_r+0x1c>
 8024870:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024874:	6023      	str	r3, [r4, #0]
 8024876:	6123      	str	r3, [r4, #16]
 8024878:	2301      	movs	r3, #1
 802487a:	6163      	str	r3, [r4, #20]
 802487c:	b003      	add	sp, #12
 802487e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024880:	ab01      	add	r3, sp, #4
 8024882:	466a      	mov	r2, sp
 8024884:	f7ff ffc8 	bl	8024818 <__swhatbuf_r>
 8024888:	9f00      	ldr	r7, [sp, #0]
 802488a:	4605      	mov	r5, r0
 802488c:	4639      	mov	r1, r7
 802488e:	4630      	mov	r0, r6
 8024890:	f7ff faba 	bl	8023e08 <_malloc_r>
 8024894:	b948      	cbnz	r0, 80248aa <__smakebuf_r+0x46>
 8024896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802489a:	059a      	lsls	r2, r3, #22
 802489c:	d4ee      	bmi.n	802487c <__smakebuf_r+0x18>
 802489e:	f023 0303 	bic.w	r3, r3, #3
 80248a2:	f043 0302 	orr.w	r3, r3, #2
 80248a6:	81a3      	strh	r3, [r4, #12]
 80248a8:	e7e2      	b.n	8024870 <__smakebuf_r+0xc>
 80248aa:	89a3      	ldrh	r3, [r4, #12]
 80248ac:	6020      	str	r0, [r4, #0]
 80248ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80248b2:	81a3      	strh	r3, [r4, #12]
 80248b4:	9b01      	ldr	r3, [sp, #4]
 80248b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80248ba:	b15b      	cbz	r3, 80248d4 <__smakebuf_r+0x70>
 80248bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80248c0:	4630      	mov	r0, r6
 80248c2:	f000 f81d 	bl	8024900 <_isatty_r>
 80248c6:	b128      	cbz	r0, 80248d4 <__smakebuf_r+0x70>
 80248c8:	89a3      	ldrh	r3, [r4, #12]
 80248ca:	f023 0303 	bic.w	r3, r3, #3
 80248ce:	f043 0301 	orr.w	r3, r3, #1
 80248d2:	81a3      	strh	r3, [r4, #12]
 80248d4:	89a3      	ldrh	r3, [r4, #12]
 80248d6:	431d      	orrs	r5, r3
 80248d8:	81a5      	strh	r5, [r4, #12]
 80248da:	e7cf      	b.n	802487c <__smakebuf_r+0x18>

080248dc <_fstat_r>:
 80248dc:	b538      	push	{r3, r4, r5, lr}
 80248de:	4d07      	ldr	r5, [pc, #28]	@ (80248fc <_fstat_r+0x20>)
 80248e0:	2300      	movs	r3, #0
 80248e2:	4604      	mov	r4, r0
 80248e4:	4608      	mov	r0, r1
 80248e6:	4611      	mov	r1, r2
 80248e8:	602b      	str	r3, [r5, #0]
 80248ea:	f7de fc83 	bl	80031f4 <_fstat>
 80248ee:	1c43      	adds	r3, r0, #1
 80248f0:	d102      	bne.n	80248f8 <_fstat_r+0x1c>
 80248f2:	682b      	ldr	r3, [r5, #0]
 80248f4:	b103      	cbz	r3, 80248f8 <_fstat_r+0x1c>
 80248f6:	6023      	str	r3, [r4, #0]
 80248f8:	bd38      	pop	{r3, r4, r5, pc}
 80248fa:	bf00      	nop
 80248fc:	20002878 	.word	0x20002878

08024900 <_isatty_r>:
 8024900:	b538      	push	{r3, r4, r5, lr}
 8024902:	4d06      	ldr	r5, [pc, #24]	@ (802491c <_isatty_r+0x1c>)
 8024904:	2300      	movs	r3, #0
 8024906:	4604      	mov	r4, r0
 8024908:	4608      	mov	r0, r1
 802490a:	602b      	str	r3, [r5, #0]
 802490c:	f7de fc82 	bl	8003214 <_isatty>
 8024910:	1c43      	adds	r3, r0, #1
 8024912:	d102      	bne.n	802491a <_isatty_r+0x1a>
 8024914:	682b      	ldr	r3, [r5, #0]
 8024916:	b103      	cbz	r3, 802491a <_isatty_r+0x1a>
 8024918:	6023      	str	r3, [r4, #0]
 802491a:	bd38      	pop	{r3, r4, r5, pc}
 802491c:	20002878 	.word	0x20002878

08024920 <_init>:
 8024920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024922:	bf00      	nop
 8024924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024926:	bc08      	pop	{r3}
 8024928:	469e      	mov	lr, r3
 802492a:	4770      	bx	lr

0802492c <_fini>:
 802492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802492e:	bf00      	nop
 8024930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024932:	bc08      	pop	{r3}
 8024934:	469e      	mov	lr, r3
 8024936:	4770      	bx	lr
